{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE ViewPatterns #-}
{-# LANGUAGE TupleSections #-}

module LambdaDesigner.ParsedOps where

import Control.Lens
import Data.ByteString.Char8 as BS
import Data.Maybe

-- Custom

data CommandType = Pulse ByteString ByteString Int
                 | Store ByteString (Tree ByteString)

data Tree a where
  N :: (Op a) => a -> Tree a
  FC :: CHOP -> Tree CHOP -> (Tree CHOP -> Tree CHOP) -> (Tree CHOP -> Tree CHOP) -> Tree CHOP
  FT :: TOP -> Tree TOP -> (Tree TOP -> Tree TOP) -> (Tree TOP -> Tree TOP) -> Tree TOP
  Comp :: (Op a, Op b) => COMP -> Tree a -> Tree b
  Comp2 :: (Op a, Op b, Op c) => COMP -> Tree a -> Tree b -> Tree c
  Fix :: (Op a) => ByteString -> Tree a -> Tree a
  PyExpr :: ByteString -> Tree a
  Mod :: (ByteString -> ByteString) -> Tree a -> Tree b
  Mod2 :: (ByteString -> ByteString -> ByteString) -> Tree a -> Tree b -> Tree c
  Mod3 :: (ByteString -> ByteString -> ByteString -> ByteString) -> Tree a -> Tree b -> Tree c -> Tree d
  Resolve :: Tree a -> Tree ByteString
  ResolveP :: Tree a -> Tree ByteString
  ResolvePS :: [Tree a] -> Tree ByteString

type Vec2 = (Maybe (Tree Float), Maybe (Tree Float))
type Vec3 = (Maybe (Tree Float), Maybe (Tree Float), Maybe (Tree Float))
type Vec4 = (Maybe (Tree Float), Maybe (Tree Float), Maybe (Tree Float), Maybe (Tree Float))
type IVec2 = (Maybe (Tree Int), Maybe (Tree Int))
type RGB = Vec3
type RGBA = Vec4

emptyV4 = (Nothing, Nothing, Nothing, Nothing)
emptyV3 = (Nothing, Nothing, Nothing)
emptyV2 = (Nothing, Nothing)

vec2Map :: (ByteString, ByteString) -> String -> (Maybe (Tree a), Maybe (Tree a)) -> [(ByteString, Tree ByteString)]
vec2Map (x, y) n (xv, yv) = catMaybes [BS.append (pack n) x <$$> xv,  BS.append (pack n) y <$$> yv]


vec3Map :: (ByteString, ByteString, ByteString) -> String -> Vec3 -> [(ByteString, Tree ByteString)]
vec3Map (x, y, z) n (xv, yv, zv) = catMaybes [BS.append (pack n) x <$$> xv,  BS.append (pack n) y <$$> yv, BS.append (pack n) z <$$> zv]

vec4Map :: (ByteString, ByteString, ByteString, ByteString) -> String -> Vec4 -> [(ByteString, Tree ByteString)]
vec4Map (x, y, z, w) n (xv, yv, zv, wv) = catMaybes [ BS.append (pack n) x <$$> xv
                                                    , BS.append (pack n) y <$$> yv
                                                    , BS.append (pack n) z <$$> zv
                                                    , BS.append (pack n) w <$$> wv
                                                    ]
vec4Map' = vec4Map ("x", "y", "z", "w")

vec2Map' :: String -> Vec2 -> [(ByteString, Tree ByteString)]
vec2Map' = vec2Map ("x", "y")

ivec2Map' :: String -> IVec2 -> [(ByteString, Tree ByteString)]
ivec2Map' = vec2Map ("x", "y")

uvMap :: String -> Vec2 -> [(ByteString, Tree ByteString)]
uvMap = vec2Map ("u", "v")

dimenMap :: String -> IVec2 -> [(ByteString, Tree ByteString)]
dimenMap = vec2Map ("w", "h")

vec3Map' :: String -> Vec3 -> [(ByteString, Tree ByteString)]
vec3Map' = vec3Map ("x", "y", "z")

uvwMap :: String -> Vec3 -> [(ByteString, Tree ByteString)]
uvwMap = vec3Map ("u", "v", "w")

rgbMap :: String -> Vec3 -> [(ByteString, Tree ByteString)]
rgbMap = vec3Map ("r", "g", "b")

rgbaMap :: String -> Vec4 -> [(ByteString, Tree ByteString)]
rgbaMap = vec4Map ("r", "g", "b", "a")

(<$$>) :: ByteString -> Maybe (Tree a) -> Maybe (ByteString, Tree ByteString)
a <$$> b = (a,) . Resolve <$> b


class (Op a) => Baseable a where
  inOp :: Tree a
  outOp :: Tree a -> Tree a

class Op a where
  connections :: a -> [Tree a]
  connections _ = []
  pars :: a -> [(ByteString, Tree ByteString)]
  pars _ = []
  customPars :: a -> [(ByteString, Tree ByteString)]
  customPars _ = []
  text :: a -> Maybe ByteString
  text _ = Nothing
  opType :: a -> ByteString
  opType _ = ""
  commands :: a -> [CommandType]
  commands _ = []

-- Copied

-- data types 

data CHOP = 
  MouseinCHOP {
    _mouseinCHOPexportmethod :: Maybe (Tree Int)
    , _mouseinCHOPleft :: Maybe (Tree Int)
    , _mouseinCHOPactive :: Maybe (Tree Int)
    , _mouseinCHOPmbuttonname :: Maybe (Tree ByteString)
    , _mouseinCHOPposxname :: Maybe (Tree ByteString)
    , _mouseinCHOPrate :: Maybe (Tree Float)
    , _mouseinCHOPmonitor :: Maybe (Tree ByteString)
    , _mouseinCHOPexporttable :: Maybe (Tree DAT)
    , _mouseinCHOPrbuttonname :: Maybe (Tree ByteString)
    , _mouseinCHOPdefval :: Maybe (Tree Float)
    , _mouseinCHOPwheel :: Maybe (Tree ByteString)
    , _mouseinCHOPsrselect :: Maybe (Tree Int)
    , _mouseinCHOPscope :: Maybe (Tree ByteString)
    , _mouseinCHOPright :: Maybe (Tree Int)
    , _mouseinCHOPoutput :: Maybe (Tree Int)
    , _mouseinCHOPposyname :: Maybe (Tree ByteString)
    , _mouseinCHOPlbuttonname :: Maybe (Tree ByteString)
    , _mouseinCHOPtimeslice :: Maybe (Tree Bool)
    , _mouseinCHOPwheelinc :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | NatnetinCHOP {
    _natnetinCHOPresetpulse :: Maybe (Tree Bool)
    , _natnetinCHOPactive :: Maybe (Tree Bool)
    , _natnetinCHOPexportmethod :: Maybe (Tree Int)
    , _natnetinCHOPexporttable :: Maybe (Tree DAT)
    , _natnetinCHOPrate :: Maybe (Tree Int)
    , _natnetinCHOPscope :: Maybe (Tree ByteString)
    , _natnetinCHOPdataport :: Maybe (Tree Int)
    , _natnetinCHOPlocaladdress :: Maybe (Tree ByteString)
    , _natnetinCHOPcommandport :: Maybe (Tree Int)
    , _natnetinCHOPsrselect :: Maybe (Tree Int)
    , _natnetinCHOPtimeslice :: Maybe (Tree Bool)
    , _natnetinCHOPnetaddress :: Maybe (Tree ByteString)
    , _natnetinCHOPconnectiontype :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudiofilterCHOP {
    _audiofilterCHOPexportmethod :: Maybe (Tree Int)
    , _audiofilterCHOPfilter :: Maybe (Tree Int)
    , _audiofilterCHOPunits :: Maybe (Tree Int)
    , _audiofilterCHOPdrywet :: Maybe (Tree Float)
    , _audiofilterCHOPresonance :: Maybe (Tree Float)
    , _audiofilterCHOPscope :: Maybe (Tree ByteString)
    , _audiofilterCHOPexporttable :: Maybe (Tree DAT)
    , _audiofilterCHOPcutofffrequency :: Maybe (Tree Float)
    , _audiofilterCHOPsrselect :: Maybe (Tree Int)
    , _audiofilterCHOProlloff :: Maybe (Tree Float)
    , _audiofilterCHOPtimeslice :: Maybe (Tree Bool)
    , _audiofilterCHOPcutofflog :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ScriptCHOP {
    _scriptCHOPsetuppars :: Maybe (Tree Bool)
    , _scriptCHOPsrselect :: Maybe (Tree Int)
    , _scriptCHOPexportmethod :: Maybe (Tree Int)
    , _scriptCHOPcallbacks :: Maybe (Tree DAT)
    , _scriptCHOPexporttable :: Maybe (Tree DAT)
    , _scriptCHOPtimeslice :: Maybe (Tree Bool)
    , _scriptCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | PipeinCHOP {
    _pipeinCHOPmode :: Maybe (Tree Int)
    , _pipeinCHOPmaxtargetunit :: Maybe (Tree Int)
    , _pipeinCHOPactive :: Maybe (Tree Bool)
    , _pipeinCHOPmaxqueueunit :: Maybe (Tree Int)
    , _pipeinCHOPaddress :: Maybe (Tree ByteString)
    , _pipeinCHOPcallbacks :: Maybe (Tree DAT)
    , _pipeinCHOPecho :: Maybe (Tree Int)
    , _pipeinCHOPexporttable :: Maybe (Tree DAT)
    , _pipeinCHOPreset :: Maybe (Tree Bool)
    , _pipeinCHOPmaxtarget :: Maybe (Tree Float)
    , _pipeinCHOPexportmethod :: Maybe (Tree Int)
    , _pipeinCHOPqueued :: Maybe (Tree Bool)
    , _pipeinCHOPport :: Maybe (Tree Int)
    , _pipeinCHOPscope :: Maybe (Tree ByteString)
    , _pipeinCHOPmintarget :: Maybe (Tree Float)
    , _pipeinCHOPadjusttimeunit :: Maybe (Tree Int)
    , _pipeinCHOPsrselect :: Maybe (Tree Int)
    , _pipeinCHOPmintargetunit :: Maybe (Tree Int)
    , _pipeinCHOPadjusttime :: Maybe (Tree Float)
    , _pipeinCHOPtimeslice :: Maybe (Tree Bool)
    , _pipeinCHOPallowscripts :: Maybe (Tree Bool)
    , _pipeinCHOPmaxqueue :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | FunctionCHOP {
    _functionCHOPexportmethod :: Maybe (Tree Int)
    , _functionCHOPbaseval :: Maybe (Tree Float)
    , _functionCHOPdivval :: Maybe (Tree Float)
    , _functionCHOPpinfval :: Maybe (Tree Float)
    , _functionCHOPexporttable :: Maybe (Tree DAT)
    , _functionCHOPninfval :: Maybe (Tree Float)
    , _functionCHOPexpval :: Maybe (Tree Float)
    , _functionCHOPscope :: Maybe (Tree ByteString)
    , _functionCHOPmatch :: Maybe (Tree Int)
    , _functionCHOPangunit :: Maybe (Tree Int)
    , _functionCHOPdomval :: Maybe (Tree Float)
    , _functionCHOPsrselect :: Maybe (Tree Int)
    , _functionCHOPfunc :: Maybe (Tree Int)
    , _functionCHOPerror :: Maybe (Tree Int)
    , _functionCHOPtimeslice :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudiodynamicsCHOP {
    _audiodynamicsCHOPchanlinkingcomp :: Maybe (Tree Int)
    , _audiodynamicsCHOPdrywet :: Maybe (Tree Float)
    , _audiodynamicsCHOPchanlinkinglim :: Maybe (Tree Int)
    , _audiodynamicsCHOPratiocompressor :: Maybe (Tree Float)
    , _audiodynamicsCHOPenablecompressor :: Maybe (Tree Bool)
    , _audiodynamicsCHOPcompressiontype :: Maybe (Tree Int)
    , _audiodynamicsCHOPexporttable :: Maybe (Tree DAT)
    , _audiodynamicsCHOPexportmethod :: Maybe (Tree Int)
    , _audiodynamicsCHOPreleasecompressor :: Maybe (Tree Float)
    , _audiodynamicsCHOPkneelimiter :: Maybe (Tree Float)
    , _audiodynamicsCHOPscope :: Maybe (Tree ByteString)
    , _audiodynamicsCHOPgaincompressor :: Maybe (Tree Float)
    , _audiodynamicsCHOPthresholdlimiter :: Maybe (Tree Float)
    , _audiodynamicsCHOPthresholdcompressor :: Maybe (Tree Float)
    , _audiodynamicsCHOPreleaselimiter :: Maybe (Tree Float)
    , _audiodynamicsCHOPsrselect :: Maybe (Tree Int)
    , _audiodynamicsCHOPkneecompressor :: Maybe (Tree Float)
    , _audiodynamicsCHOPinputgain :: Maybe (Tree Float)
    , _audiodynamicsCHOPenablelimiter :: Maybe (Tree Bool)
    , _audiodynamicsCHOPattackcompressor :: Maybe (Tree Float)
    , _audiodynamicsCHOPtimeslice :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | CompositeCHOP {
    _compositeCHOPend :: Maybe (Tree Float)
    , _compositeCHOPpeak :: Maybe (Tree Float)
    , _compositeCHOPshortrot :: Maybe (Tree Bool)
    , _compositeCHOPreleaseunit :: Maybe (Tree Int)
    , _compositeCHOPquatrot :: Maybe (Tree Bool)
    , _compositeCHOPrelative :: Maybe (Tree Int)
    , _compositeCHOPbase :: Maybe (Tree Float)
    , _compositeCHOPendunit :: Maybe (Tree Int)
    , _compositeCHOPstart :: Maybe (Tree Float)
    , _compositeCHOPrisefunc :: Maybe (Tree Int)
    , _compositeCHOPexportmethod :: Maybe (Tree Int)
    , _compositeCHOPeffect :: Maybe (Tree Float)
    , _compositeCHOProtscope :: Maybe (Tree ByteString)
    , _compositeCHOPstartunit :: Maybe (Tree Int)
    , _compositeCHOPfallfunc :: Maybe (Tree Int)
    , _compositeCHOPscope :: Maybe (Tree ByteString)
    , _compositeCHOPexporttable :: Maybe (Tree DAT)
    , _compositeCHOPmatch :: Maybe (Tree Int)
    , _compositeCHOPcyclelen :: Maybe (Tree Float)
    , _compositeCHOPrelease :: Maybe (Tree Float)
    , _compositeCHOPsrselect :: Maybe (Tree Int)
    , _compositeCHOPpeakunit :: Maybe (Tree Int)
    , _compositeCHOPtimeslice :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ReorderCHOP {
    _reorderCHOPexportmethod :: Maybe (Tree Int)
    , _reorderCHOPrempos :: Maybe (Tree Int)
    , _reorderCHOPcharpattern :: Maybe (Tree ByteString)
    , _reorderCHOPnumpattern :: Maybe (Tree ByteString)
    , _reorderCHOPexporttable :: Maybe (Tree DAT)
    , _reorderCHOPscope :: Maybe (Tree ByteString)
    , _reorderCHOPseed :: Maybe (Tree Float)
    , _reorderCHOPsrselect :: Maybe (Tree Int)
    , _reorderCHOPnvalue :: Maybe (Tree Int)
    , _reorderCHOPmethod :: Maybe (Tree Int)
    , _reorderCHOPremorder :: Maybe (Tree Int)
    , _reorderCHOPtimeslice :: Maybe (Tree Bool)
    , _reorderCHOPorderref :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | FileinCHOP {
    _fileinCHOPexportmethod :: Maybe (Tree Int)
    , _fileinCHOPleft :: Maybe (Tree Int)
    , _fileinCHOPfile :: Maybe (Tree ByteString)
    , _fileinCHOPnameoption :: Maybe (Tree Int)
    , _fileinCHOPoverridevalue :: Maybe (Tree Float)
    , _fileinCHOPrate :: Maybe (Tree Float)
    , _fileinCHOPscope :: Maybe (Tree ByteString)
    , _fileinCHOPoverridpattern :: Maybe (Tree ByteString)
    , _fileinCHOPtimeslice :: Maybe (Tree Bool)
    , _fileinCHOPdefval :: Maybe (Tree Float)
    , _fileinCHOPexporttable :: Maybe (Tree DAT)
    , _fileinCHOPrefreshpulse :: Maybe (Tree Bool)
    , _fileinCHOPrenamefrom :: Maybe (Tree ByteString)
    , _fileinCHOPname :: Maybe (Tree ByteString)
    , _fileinCHOPrenameto :: Maybe (Tree ByteString)
    , _fileinCHOPrefresh :: Maybe (Tree Bool)
    , _fileinCHOPsrselect :: Maybe (Tree Int)
    , _fileinCHOPright :: Maybe (Tree Int)
    , _fileinCHOPrateoption :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ClipblenderCHOP {
    _clipblenderCHOPresetpulse :: Maybe (Tree Bool)
    , _clipblenderCHOPtimechannel :: Maybe (Tree ByteString)
    , _clipblenderCHOPqenable :: Maybe (Tree ByteString)
    , _clipblenderCHOPstepforward :: Maybe (Tree Bool)
    , _clipblenderCHOPdatlist :: Maybe (Tree DAT)
    , _clipblenderCHOPxrot :: Maybe (Tree ByteString)
    , _clipblenderCHOPztrans :: Maybe (Tree ByteString)
    , _clipblenderCHOPaend :: Maybe (Tree ByteString)
    , _clipblenderCHOPtimeremaining :: Maybe (Tree ByteString)
    , _clipblenderCHOPscope :: Maybe (Tree ByteString)
    , _clipblenderCHOPxtrans :: Maybe (Tree ByteString)
    , _clipblenderCHOPexporttable :: Maybe (Tree DAT)
    , _clipblenderCHOPr :: Vec3
    , _clipblenderCHOPplayspeed :: Maybe (Tree Float)
    , _clipblenderCHOPfixjump :: Maybe (Tree Bool)
    , _clipblenderCHOPexportmethod :: Maybe (Tree Int)
    , _clipblenderCHOPdefault :: Maybe (Tree CHOP)
    , _clipblenderCHOPyrot :: Maybe (Tree ByteString)
    , _clipblenderCHOPtimeslice :: Maybe (Tree Bool)
    , _clipblenderCHOPlogjumps :: Maybe (Tree Bool)
    , _clipblenderCHOPprerotate :: Maybe (Tree Bool)
    , _clipblenderCHOPytrans :: Maybe (Tree ByteString)
    , _clipblenderCHOPqtrigger :: Maybe (Tree Bool)
    , _clipblenderCHOPdelay :: Maybe (Tree Int)
    , _clipblenderCHOPdoxform :: Maybe (Tree Bool)
    , _clipblenderCHOPsrselect :: Maybe (Tree Int)
    , _clipblenderCHOPreset :: Maybe (Tree Bool)
    , _clipblenderCHOPprintstate :: Maybe (Tree Bool)
    , _clipblenderCHOPzrot :: Maybe (Tree ByteString)
    , _clipblenderCHOPt :: Vec3
    , _clipblenderCHOPlogpulse :: Maybe (Tree Bool)
    , _clipblenderCHOPtarget :: Vec3
    , _clipblenderCHOPstepbackward :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | LagCHOP {
    _lagCHOPlagmethod :: Maybe (Tree Int)
    , _lagCHOPresetpulse :: Maybe (Tree Bool)
    , _lagCHOPaclamp :: Maybe (Tree Bool)
    , _lagCHOPslope2 :: Maybe (Tree Float)
    , _lagCHOPslope1 :: Maybe (Tree Float)
    , _lagCHOPclamp :: Maybe (Tree Bool)
    , _lagCHOPlagsamples :: Maybe (Tree Bool)
    , _lagCHOPexporttable :: Maybe (Tree DAT)
    , _lagCHOPaccel1 :: Maybe (Tree Float)
    , _lagCHOPexportmethod :: Maybe (Tree Int)
    , _lagCHOPovershootunit :: Maybe (Tree Int)
    , _lagCHOPovershoot2 :: Maybe (Tree Float)
    , _lagCHOPtimeslice :: Maybe (Tree Bool)
    , _lagCHOPscope :: Maybe (Tree ByteString)
    , _lagCHOPlag1 :: Maybe (Tree Float)
    , _lagCHOPlagunit :: Maybe (Tree Int)
    , _lagCHOPsrselect :: Maybe (Tree Int)
    , _lagCHOPovershoot1 :: Maybe (Tree Float)
    , _lagCHOPaccel2 :: Maybe (Tree Float)
    , _lagCHOPlag2 :: Maybe (Tree Float)
    , _lagCHOPreset :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SelectCHOP {
    _selectCHOPautoprefix :: Maybe (Tree Bool)
    , _selectCHOPexportmethod :: Maybe (Tree Int)
    , _selectCHOPalign :: Maybe (Tree Int)
    , _selectCHOPexporttable :: Maybe (Tree DAT)
    , _selectCHOPscope :: Maybe (Tree ByteString)
    , _selectCHOPchannames :: Maybe (Tree ByteString)
    , _selectCHOPrenamefrom :: Maybe (Tree ByteString)
    , _selectCHOPrenameto :: Maybe (Tree ByteString)
    , _selectCHOPsrselect :: Maybe (Tree Int)
    , _selectCHOPchop :: Maybe (Tree CHOP)
    , _selectCHOPtimeslice :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | LogicCHOP {
    _logicCHOPexportmethod :: Maybe (Tree Int)
    , _logicCHOPalign :: Maybe (Tree Int)
    , _logicCHOPchopop :: Maybe (Tree Int)
    , _logicCHOPexporttable :: Maybe (Tree DAT)
    , _logicCHOPboundmin :: Maybe (Tree Float)
    , _logicCHOPscope :: Maybe (Tree ByteString)
    , _logicCHOPchanop :: Maybe (Tree Int)
    , _logicCHOPboundmax :: Maybe (Tree Float)
    , _logicCHOPsrselect :: Maybe (Tree Int)
    , _logicCHOPconvert :: Maybe (Tree Int)
    , _logicCHOPmatch :: Maybe (Tree Int)
    , _logicCHOPtimeslice :: Maybe (Tree Bool)
    , _logicCHOPpreop :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | PerformCHOP {
    _performCHOPgputemp :: Maybe (Tree Bool)
    , _performCHOPaclinestatus :: Maybe (Tree Bool)
    , _performCHOPperformmode :: Maybe (Tree Bool)
    , _performCHOPoptimizedexpression :: Maybe (Tree Bool)
    , _performCHOPtimeslicemsec :: Maybe (Tree Bool)
    , _performCHOPfps :: Maybe (Tree Bool)
    , _performCHOPmvreadahead :: Maybe (Tree Bool)
    , _performCHOPcookstate :: Maybe (Tree Bool)
    , _performCHOPexporttable :: Maybe (Tree DAT)
    , _performCHOPcachedexpressions :: Maybe (Tree Bool)
    , _performCHOPbatterytime :: Maybe (Tree Bool)
    , _performCHOPcookrealtime :: Maybe (Tree Bool)
    , _performCHOPexportmethod :: Maybe (Tree Int)
    , _performCHOPcookrate :: Maybe (Tree Bool)
    , _performCHOPmsec :: Maybe (Tree Bool)
    , _performCHOPtimeslicestep :: Maybe (Tree Bool)
    , _performCHOPactiveops :: Maybe (Tree Bool)
    , _performCHOPcook :: Maybe (Tree Bool)
    , _performCHOPtotalgpumem :: Maybe (Tree Bool)
    , _performCHOPgpumemused :: Maybe (Tree Bool)
    , _performCHOPscope :: Maybe (Tree ByteString)
    , _performCHOPcpumemused :: Maybe (Tree Bool)
    , _performCHOPactiveexpressions :: Maybe (Tree Bool)
    , _performCHOPperformfocus :: Maybe (Tree Bool)
    , _performCHOPsrselect :: Maybe (Tree Int)
    , _performCHOPbatterylife :: Maybe (Tree Bool)
    , _performCHOPtotalops :: Maybe (Tree Bool)
    , _performCHOPbatterycharging :: Maybe (Tree Bool)
    , _performCHOPtimeslice :: Maybe (Tree Bool)
    , _performCHOPdeactivatedops :: Maybe (Tree Bool)
    , _performCHOPdroppedframes :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | KeyboardinCHOP {
    _keyboardinCHOPexportmethod :: Maybe (Tree Int)
    , _keyboardinCHOPleft :: Maybe (Tree Int)
    , _keyboardinCHOPactive :: Maybe (Tree Int)
    , _keyboardinCHOPfirstkey :: Maybe (Tree Int)
    , _keyboardinCHOPrate :: Maybe (Tree Float)
    , _keyboardinCHOPright :: Maybe (Tree Int)
    , _keyboardinCHOPnumber :: Maybe (Tree Int)
    , _keyboardinCHOPscope :: Maybe (Tree ByteString)
    , _keyboardinCHOPdefval :: Maybe (Tree Float)
    , _keyboardinCHOPexporttable :: Maybe (Tree DAT)
    , _keyboardinCHOPmodifiers :: Maybe (Tree Int)
    , _keyboardinCHOPsrselect :: Maybe (Tree Int)
    , _keyboardinCHOPchannelnames :: Maybe (Tree Int)
    , _keyboardinCHOPtimeslice :: Maybe (Tree Bool)
    , _keyboardinCHOPorder :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | DmxinCHOP {
    _dmxinCHOPqueuesize :: Maybe (Tree Int)
    , _dmxinCHOPformat :: Maybe (Tree Int)
    , _dmxinCHOPactive :: Maybe (Tree Bool)
    , _dmxinCHOPsubnet :: Maybe (Tree Int)
    , _dmxinCHOPexportmethod :: Maybe (Tree Int)
    , _dmxinCHOPuniversename :: Maybe (Tree ByteString)
    , _dmxinCHOPserialport :: Maybe (Tree Bool)
    , _dmxinCHOPscope :: Maybe (Tree ByteString)
    , _dmxinCHOPnetname :: Maybe (Tree ByteString)
    , _dmxinCHOPexporttable :: Maybe (Tree DAT)
    , _dmxinCHOPinterface :: Maybe (Tree Bool)
    , _dmxinCHOPfilterdat :: Maybe (Tree DAT)
    , _dmxinCHOPtimeslice :: Maybe (Tree Bool)
    , _dmxinCHOPrate :: Maybe (Tree Int)
    , _dmxinCHOPstartcodes :: Maybe (Tree ByteString)
    , _dmxinCHOPnet :: Maybe (Tree Int)
    , _dmxinCHOPsubnetname :: Maybe (Tree ByteString)
    , _dmxinCHOPdevice :: Maybe (Tree Bool)
    , _dmxinCHOPmulticast :: Maybe (Tree Bool)
    , _dmxinCHOPsrselect :: Maybe (Tree Int)
    , _dmxinCHOPuniverse :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | InversekinCHOP {
    _inversekinCHOPexportmethod :: Maybe (Tree Int)
    , _inversekinCHOPiktwist :: Maybe (Tree Float)
    , _inversekinCHOPikdampen :: Maybe (Tree Float)
    , _inversekinCHOPscope :: Maybe (Tree ByteString)
    , _inversekinCHOPsrselect :: Maybe (Tree Int)
    , _inversekinCHOPexporttable :: Maybe (Tree DAT)
    , _inversekinCHOPsolvertype :: Maybe (Tree Int)
    , _inversekinCHOPcurve :: Maybe (Tree SOP)
    , _inversekinCHOPtimeslice :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SequencerCHOP {
    _sequencerCHOPqueue :: Maybe (Tree ByteString)
    , _sequencerCHOPresetpulse :: Maybe (Tree Bool)
    , _sequencerCHOPexportmethod :: Maybe (Tree Int)
    , _sequencerCHOPexporttable :: Maybe (Tree DAT)
    , _sequencerCHOPscope :: Maybe (Tree ByteString)
    , _sequencerCHOPdatlist :: Maybe (Tree DAT)
    , _sequencerCHOPsrselect :: Maybe (Tree Int)
    , _sequencerCHOPblendscope :: Maybe (Tree ByteString)
    , _sequencerCHOPtrigger :: Maybe (Tree Bool)
    , _sequencerCHOPaddscope :: Maybe (Tree ByteString)
    , _sequencerCHOPtimeslice :: Maybe (Tree Bool)
    , _sequencerCHOPreset :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | BeatCHOP {
    _beatCHOPresetpulse :: Maybe (Tree Bool)
    , _beatCHOPresetbarvalue :: Maybe (Tree Float)
    , _beatCHOPrandoffset :: Maybe (Tree Float)
    , _beatCHOPexportmethod :: Maybe (Tree Int)
    , _beatCHOPbpm :: Maybe (Tree Bool)
    , _beatCHOPresetwait :: Maybe (Tree Bool)
    , _beatCHOPscope :: Maybe (Tree ByteString)
    , _beatCHOPramp :: Maybe (Tree Bool)
    , _beatCHOPbeat :: Maybe (Tree Bool)
    , _beatCHOPsixteenths :: Maybe (Tree Bool)
    , _beatCHOPexporttable :: Maybe (Tree DAT)
    , _beatCHOPmultiples :: Maybe (Tree Int)
    , _beatCHOPcountramp :: Maybe (Tree Bool)
    , _beatCHOPrandseed :: Maybe (Tree Float)
    , _beatCHOPsetperiod :: Maybe (Tree Int)
    , _beatCHOPshiftoffset :: Maybe (Tree Float)
    , _beatCHOPresetcondition :: Maybe (Tree Int)
    , _beatCHOPupdateglobal :: Maybe (Tree Bool)
    , _beatCHOPcount :: Maybe (Tree Bool)
    , _beatCHOPrampbeat :: Maybe (Tree Bool)
    , _beatCHOPperiod :: Maybe (Tree Float)
    , _beatCHOPshiftstep :: Maybe (Tree Float)
    , _beatCHOPpulse :: Maybe (Tree Bool)
    , _beatCHOPbar :: Maybe (Tree Bool)
    , _beatCHOPsrselect :: Maybe (Tree Int)
    , _beatCHOPplaymode :: Maybe (Tree Int)
    , _beatCHOPrampbar :: Maybe (Tree Bool)
    , _beatCHOPreftimeslice :: Maybe (Tree Bool)
    , _beatCHOPsine :: Maybe (Tree Bool)
    , _beatCHOPtimeslice :: Maybe (Tree Bool)
    , _beatCHOPreset :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | LtcoutCHOP {
    _ltcoutCHOPresetpulse :: Maybe (Tree Bool)
    , _ltcoutCHOPaudiorate :: Maybe (Tree Float)
    , _ltcoutCHOPhour :: Maybe (Tree Int)
    , _ltcoutCHOPuser8 :: Maybe (Tree Int)
    , _ltcoutCHOPexportmethod :: Maybe (Tree Int)
    , _ltcoutCHOPuser4 :: Maybe (Tree Int)
    , _ltcoutCHOPuser7 :: Maybe (Tree Int)
    , _ltcoutCHOPframerate :: Maybe (Tree Float)
    , _ltcoutCHOPsecond :: Maybe (Tree Int)
    , _ltcoutCHOPframe :: Maybe (Tree Int)
    , _ltcoutCHOPexporttable :: Maybe (Tree DAT)
    , _ltcoutCHOPdropframe :: Maybe (Tree Bool)
    , _ltcoutCHOPuser2 :: Maybe (Tree Int)
    , _ltcoutCHOPuser5 :: Maybe (Tree Int)
    , _ltcoutCHOPuser1 :: Maybe (Tree Int)
    , _ltcoutCHOPminute :: Maybe (Tree Int)
    , _ltcoutCHOPfielduser :: Maybe (Tree Bool)
    , _ltcoutCHOPscope :: Maybe (Tree ByteString)
    , _ltcoutCHOPplay :: Maybe (Tree Bool)
    , _ltcoutCHOPsrselect :: Maybe (Tree Int)
    , _ltcoutCHOPreset :: Maybe (Tree Bool)
    , _ltcoutCHOPtimeslice :: Maybe (Tree Bool)
    , _ltcoutCHOPuser6 :: Maybe (Tree Int)
    , _ltcoutCHOPuser3 :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | TouchoutCHOP {
    _touchoutCHOPmaxsize :: Maybe (Tree Float)
    , _touchoutCHOPcookalways :: Maybe (Tree Bool)
    , _touchoutCHOPactive :: Maybe (Tree Bool)
    , _touchoutCHOPmaxsizeunit :: Maybe (Tree Int)
    , _touchoutCHOPresendnames :: Maybe (Tree Bool)
    , _touchoutCHOPexporttable :: Maybe (Tree DAT)
    , _touchoutCHOPsyncports :: Maybe (Tree Int)
    , _touchoutCHOPaddress :: Maybe (Tree ByteString)
    , _touchoutCHOPscope :: Maybe (Tree ByteString)
    , _touchoutCHOPprotocol :: Maybe (Tree Int)
    , _touchoutCHOPsrselect :: Maybe (Tree Int)
    , _touchoutCHOPexportmethod :: Maybe (Tree Int)
    , _touchoutCHOPport :: Maybe (Tree Int)
    , _touchoutCHOPtimeslice :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | NullCHOP {
    _nullCHOPexportmethod :: Maybe (Tree Int)
    , _nullCHOPsrselect :: Maybe (Tree Int)
    , _nullCHOPcheckrange :: Maybe (Tree Bool)
    , _nullCHOPchecknames :: Maybe (Tree Bool)
    , _nullCHOPcooktype :: Maybe (Tree Int)
    , _nullCHOPtimeslice :: Maybe (Tree Bool)
    , _nullCHOPscope :: Maybe (Tree ByteString)
    , _nullCHOPexporttable :: Maybe (Tree DAT)
    , _nullCHOPcheckvalues :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | RecordCHOP {
    _recordCHOPinterp :: Maybe (Tree Int)
    , _recordCHOPexportmethod :: Maybe (Tree Int)
    , _recordCHOPsegment1 :: Maybe (Tree Float)
    , _recordCHOPoutput :: Maybe (Tree Int)
    , _recordCHOPsegmentunit :: Maybe (Tree Int)
    , _recordCHOPresetcondition :: Maybe (Tree Int)
    , _recordCHOPexporttable :: Maybe (Tree DAT)
    , _recordCHOPscope :: Maybe (Tree ByteString)
    , _recordCHOPsrselect :: Maybe (Tree Int)
    , _recordCHOPrecord :: Maybe (Tree Int)
    , _recordCHOPsample :: Maybe (Tree Int)
    , _recordCHOPtimeslice :: Maybe (Tree Bool)
    , _recordCHOPreset :: Maybe (Tree Bool)
    , _recordCHOPsegment2 :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AttributeCHOP {
    _attributeCHOPexportmethod :: Maybe (Tree Int)
    , _attributeCHOPsrselect :: Maybe (Tree Int)
    , _attributeCHOPrord :: Maybe (Tree Int)
    , _attributeCHOPexporttable :: Maybe (Tree DAT)
    , _attributeCHOPslerp :: Maybe (Tree Int)
    , _attributeCHOPtimeslice :: Maybe (Tree Bool)
    , _attributeCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | FanCHOP {
    _fanCHOPexportmethod :: Maybe (Tree Int)
    , _fanCHOPexporttable :: Maybe (Tree DAT)
    , _fanCHOPsrselect :: Maybe (Tree Int)
    , _fanCHOPquantize :: Maybe (Tree Bool)
    , _fanCHOPfanop :: Maybe (Tree Int)
    , _fanCHOPrange :: Maybe (Tree Int)
    , _fanCHOPtimeslice :: Maybe (Tree Bool)
    , _fanCHOPchanname :: Maybe (Tree ByteString)
    , _fanCHOPalloff :: Maybe (Tree Int)
    , _fanCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | CrossCHOP {
    _crossCHOPexportmethod :: Maybe (Tree Int)
    , _crossCHOPsrselect :: Maybe (Tree Int)
    , _crossCHOPexporttable :: Maybe (Tree DAT)
    , _crossCHOPcross :: Maybe (Tree Float)
    , _crossCHOPtimeslice :: Maybe (Tree Bool)
    , _crossCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | PosistagenetCHOP {
    _posistagenetCHOPexportmethod :: Maybe (Tree Int)
    , _posistagenetCHOPaccel :: Maybe (Tree Bool)
    , _posistagenetCHOPactive :: Maybe (Tree Bool)
    , _posistagenetCHOPexporttable :: Maybe (Tree DAT)
    , _posistagenetCHOPscope :: Maybe (Tree ByteString)
    , _posistagenetCHOPnetaddress :: Maybe (Tree ByteString)
    , _posistagenetCHOPtargetpos :: Maybe (Tree Bool)
    , _posistagenetCHOPsrselect :: Maybe (Tree Int)
    , _posistagenetCHOPpos :: Maybe (Tree Bool)
    , _posistagenetCHOPori :: Maybe (Tree Bool)
    , _posistagenetCHOPport :: Maybe (Tree Int)
    , _posistagenetCHOPtimeslice :: Maybe (Tree Bool)
    , _posistagenetCHOPspeed :: Maybe (Tree Bool)
    , _posistagenetCHOPreset :: Maybe (Tree Bool)
    , _posistagenetCHOPsamplerate :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | RealsenseCHOP {
    _realsenseCHOPmode :: Maybe (Tree Int)
    , _realsenseCHOPsmoothtype :: Maybe (Tree Int)
    , _realsenseCHOPfist :: Maybe (Tree Bool)
    , _realsenseCHOPhandsrotation :: Maybe (Tree Int)
    , _realsenseCHOPclick :: Maybe (Tree Bool)
    , _realsenseCHOPpersonscolorbounds :: Maybe (Tree Bool)
    , _realsenseCHOPsmoothing :: Maybe (Tree Bool)
    , _realsenseCHOPmarkertop :: Maybe (Tree TOP)
    , _realsenseCHOPsmoothrad :: Maybe (Tree Float)
    , _realsenseCHOPsmoothstrength :: Maybe (Tree Float)
    , _realsenseCHOPfullpinch :: Maybe (Tree Bool)
    , _realsenseCHOPswipe :: Maybe (Tree Bool)
    , _realsenseCHOPexportmethod :: Maybe (Tree Int)
    , _realsenseCHOPtap :: Maybe (Tree Bool)
    , _realsenseCHOPhandscolorpos :: Maybe (Tree Bool)
    , _realsenseCHOPweights :: Maybe (Tree Int)
    , _realsenseCHOPactive :: Maybe (Tree Bool)
    , _realsenseCHOPfaceexpressions :: Maybe (Tree Bool)
    , _realsenseCHOPexporttable :: Maybe (Tree DAT)
    , _realsenseCHOPmaxperson :: Maybe (Tree Int)
    , _realsenseCHOPfacelandmarkscolor :: Maybe (Tree Bool)
    , _realsenseCHOPpersonsworldcenterpos :: Maybe (Tree Bool)
    , _realsenseCHOPseparatehands :: Maybe (Tree Bool)
    , _realsenseCHOPsensor :: Maybe (Tree ByteString)
    , _realsenseCHOPfacebounds :: Maybe (Tree Bool)
    , _realsenseCHOPpersonsskelcolorpos :: Maybe (Tree Bool)
    , _realsenseCHOPfaceworldpos :: Maybe (Tree Bool)
    , _realsenseCHOPtimeslice :: Maybe (Tree Bool)
    , _realsenseCHOPhandsworldpos :: Maybe (Tree Bool)
    , _realsenseCHOPpersonscolorcenterpos :: Maybe (Tree Bool)
    , _realsenseCHOPfacelandmarksworld :: Maybe (Tree Bool)
    , _realsenseCHOPscope :: Maybe (Tree ByteString)
    , _realsenseCHOPthumbs :: Maybe (Tree Bool)
    , _realsenseCHOPsrselect :: Maybe (Tree Int)
    , _realsenseCHOPvsign :: Maybe (Tree Bool)
    , _realsenseCHOPwave :: Maybe (Tree Bool)
    , _realsenseCHOPmodel :: Maybe (Tree Int)
    , _realsenseCHOPtwofingerpinch :: Maybe (Tree Bool)
    , _realsenseCHOPspreadfingers :: Maybe (Tree Bool)
    , _realsenseCHOPfacerotation :: Maybe (Tree Bool)
    , _realsenseCHOPpersonsskelworldpos :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SlopeCHOP {
    _slopeCHOPexportmethod :: Maybe (Tree Int)
    , _slopeCHOPtype :: Maybe (Tree Int)
    , _slopeCHOPsrselect :: Maybe (Tree Int)
    , _slopeCHOPmethod :: Maybe (Tree Int)
    , _slopeCHOPtimeslice :: Maybe (Tree Bool)
    , _slopeCHOPscope :: Maybe (Tree ByteString)
    , _slopeCHOPexporttable :: Maybe (Tree DAT)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | MouseoutCHOP {
    _mouseoutCHOPexportmethod :: Maybe (Tree Int)
    , _mouseoutCHOPcookalways :: Maybe (Tree Bool)
    , _mouseoutCHOPmbuttonname :: Maybe (Tree ByteString)
    , _mouseoutCHOPtimeslice :: Maybe (Tree Bool)
    , _mouseoutCHOPscope :: Maybe (Tree ByteString)
    , _mouseoutCHOPexporttable :: Maybe (Tree DAT)
    , _mouseoutCHOPrbuttonname :: Maybe (Tree ByteString)
    , _mouseoutCHOPposu :: Maybe (Tree ByteString)
    , _mouseoutCHOPsrselect :: Maybe (Tree Int)
    , _mouseoutCHOPposv :: Maybe (Tree ByteString)
    , _mouseoutCHOPlbuttonname :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | LimitCHOP {
    _limitCHOPexportmethod :: Maybe (Tree Int)
    , _limitCHOPtype :: Maybe (Tree Int)
    , _limitCHOPioffsetunit :: Maybe (Tree Int)
    , _limitCHOPtimeslice :: Maybe (Tree Bool)
    , _limitCHOPioffset :: Maybe (Tree Float)
    , _limitCHOPmin :: Maybe (Tree Float)
    , _limitCHOPnorm :: Maybe (Tree Bool)
    , _limitCHOPunderflow :: Maybe (Tree Bool)
    , _limitCHOPscope :: Maybe (Tree ByteString)
    , _limitCHOPvstep :: Maybe (Tree Float)
    , _limitCHOPexporttable :: Maybe (Tree DAT)
    , _limitCHOPsrselect :: Maybe (Tree Int)
    , _limitCHOPvoffset :: Maybe (Tree Float)
    , _limitCHOPistep :: Maybe (Tree Float)
    , _limitCHOPquantvalue :: Maybe (Tree Int)
    , _limitCHOPistepunit :: Maybe (Tree Int)
    , _limitCHOPpositive :: Maybe (Tree Bool)
    , _limitCHOPquantindex :: Maybe (Tree Int)
    , _limitCHOPmax :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | EnvelopeCHOP {
    _envelopeCHOPinterp :: Maybe (Tree Int)
    , _envelopeCHOPresample :: Maybe (Tree Bool)
    , _envelopeCHOPexportmethod :: Maybe (Tree Int)
    , _envelopeCHOPexporttable :: Maybe (Tree DAT)
    , _envelopeCHOPscope :: Maybe (Tree ByteString)
    , _envelopeCHOPnorm :: Maybe (Tree Bool)
    , _envelopeCHOPwidth :: Maybe (Tree Float)
    , _envelopeCHOPwidthunit :: Maybe (Tree Int)
    , _envelopeCHOPsrselect :: Maybe (Tree Int)
    , _envelopeCHOPmethod :: Maybe (Tree Int)
    , _envelopeCHOPtimeslice :: Maybe (Tree Bool)
    , _envelopeCHOPbounds :: Maybe (Tree Int)
    , _envelopeCHOPsamplerate :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | PipeoutCHOP {
    _pipeoutCHOPmode :: Maybe (Tree Int)
    , _pipeoutCHOPexportmethod :: Maybe (Tree Int)
    , _pipeoutCHOPsendinput :: Maybe (Tree Bool)
    , _pipeoutCHOPactive :: Maybe (Tree Bool)
    , _pipeoutCHOPecho :: Maybe (Tree Bool)
    , _pipeoutCHOPaddress :: Maybe (Tree ByteString)
    , _pipeoutCHOPscript :: Maybe (Tree ByteString)
    , _pipeoutCHOPsendsingle :: Maybe (Tree Bool)
    , _pipeoutCHOPpulse :: Maybe (Tree Bool)
    , _pipeoutCHOPexporttable :: Maybe (Tree DAT)
    , _pipeoutCHOPsample :: Maybe (Tree Int)
    , _pipeoutCHOPcallbacks :: Maybe (Tree DAT)
    , _pipeoutCHOPsrselect :: Maybe (Tree Int)
    , _pipeoutCHOPscope :: Maybe (Tree ByteString)
    , _pipeoutCHOPsendscript :: Maybe (Tree Bool)
    , _pipeoutCHOPcookalways :: Maybe (Tree Bool)
    , _pipeoutCHOPport :: Maybe (Tree Int)
    , _pipeoutCHOPtimeslice :: Maybe (Tree Bool)
    , _pipeoutCHOPupload :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | LeapmotionCHOP {
    _leapmotionCHOPdebugchannels :: Maybe (Tree Bool)
    , _leapmotionCHOPfingerrotation :: Maybe (Tree Bool)
    , _leapmotionCHOPhands :: Maybe (Tree Int)
    , _leapmotionCHOPactive :: Maybe (Tree Bool)
    , _leapmotionCHOPexportmethod :: Maybe (Tree Int)
    , _leapmotionCHOPkeytapgestures :: Maybe (Tree Int)
    , _leapmotionCHOPpinchstrength :: Maybe (Tree Bool)
    , _leapmotionCHOPhmd :: Maybe (Tree Int)
    , _leapmotionCHOPscope :: Maybe (Tree ByteString)
    , _leapmotionCHOPnamedfingers :: Maybe (Tree Bool)
    , _leapmotionCHOPhandvelocity :: Maybe (Tree Bool)
    , _leapmotionCHOPcirclegestures :: Maybe (Tree Int)
    , _leapmotionCHOPstatuschannels :: Maybe (Tree Bool)
    , _leapmotionCHOPtools :: Maybe (Tree Int)
    , _leapmotionCHOPrighthands :: Maybe (Tree Int)
    , _leapmotionCHOPexporttable :: Maybe (Tree DAT)
    , _leapmotionCHOPgrabstrength :: Maybe (Tree Bool)
    , _leapmotionCHOPfingerextended :: Maybe (Tree Bool)
    , _leapmotionCHOPfingerjoints :: Maybe (Tree Bool)
    , _leapmotionCHOPlefthands :: Maybe (Tree Int)
    , _leapmotionCHOPnamedhands :: Maybe (Tree Bool)
    , _leapmotionCHOPswipegestures :: Maybe (Tree Int)
    , _leapmotionCHOPsrselect :: Maybe (Tree Int)
    , _leapmotionCHOPhandsphere :: Maybe (Tree Bool)
    , _leapmotionCHOPscreentapgestures :: Maybe (Tree Int)
    , _leapmotionCHOPtimeslice :: Maybe (Tree Bool)
    , _leapmotionCHOPfingersize :: Maybe (Tree Bool)
    , _leapmotionCHOPfingersperhand :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SwitchCHOP {
    _switchCHOPindex :: Maybe (Tree Int)
    , _switchCHOPsrselect :: Maybe (Tree Int)
    , _switchCHOPexportmethod :: Maybe (Tree Int)
    , _switchCHOPindexfirst :: Maybe (Tree Bool)
    , _switchCHOPexporttable :: Maybe (Tree DAT)
    , _switchCHOPtimeslice :: Maybe (Tree Bool)
    , _switchCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | Leuzerod4CHOP {
    _leuzerod4CHOPactive :: Maybe (Tree Bool)
    , _leuzerod4CHOPexportmethod :: Maybe (Tree Int)
    , _leuzerod4CHOPoutputmode :: Maybe (Tree Int)
    , _leuzerod4CHOPupperright1 :: Maybe (Tree Float)
    , _leuzerod4CHOPupperright2 :: Maybe (Tree Float)
    , _leuzerod4CHOPmaxdistance :: Maybe (Tree Float)
    , _leuzerod4CHOPmaxblobs :: Maybe (Tree Int)
    , _leuzerod4CHOPport :: Maybe (Tree Int)
    , _leuzerod4CHOPexporttable :: Maybe (Tree DAT)
    , _leuzerod4CHOPlowerleft1 :: Maybe (Tree Float)
    , _leuzerod4CHOPboundingboxmask :: Maybe (Tree TOP)
    , _leuzerod4CHOProd4porotocol :: Maybe (Tree Int)
    , _leuzerod4CHOPmaxblobmovement :: Maybe (Tree Float)
    , _leuzerod4CHOPscope :: Maybe (Tree ByteString)
    , _leuzerod4CHOPmaxpointdistance :: Maybe (Tree Float)
    , _leuzerod4CHOProtate :: Maybe (Tree Float)
    , _leuzerod4CHOPsrselect :: Maybe (Tree Int)
    , _leuzerod4CHOPareaofinterest :: Maybe (Tree Int)
    , _leuzerod4CHOPallowmovementoutside :: Maybe (Tree Bool)
    , _leuzerod4CHOPlowerleft2 :: Maybe (Tree Float)
    , _leuzerod4CHOPtimeslice :: Maybe (Tree Bool)
    , _leuzerod4CHOPnetaddress :: Maybe (Tree ByteString)
    , _leuzerod4CHOPinputcoordinate :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ToptoCHOP {
    _toptoCHOPinterp :: Maybe (Tree Int)
    , _toptoCHOPvend :: Maybe (Tree Float)
    , _toptoCHOPdownloadtype :: Maybe (Tree Int)
    , _toptoCHOPexportmethod :: Maybe (Tree Int)
    , _toptoCHOPcrop :: Maybe (Tree Int)
    , _toptoCHOPimageright :: Maybe (Tree Int)
    , _toptoCHOPdefval :: Maybe (Tree Float)
    , _toptoCHOPvstart :: Maybe (Tree Float)
    , _toptoCHOPtop :: Maybe (Tree TOP)
    , _toptoCHOPrgbaunit :: Maybe (Tree Int)
    , _toptoCHOPuvunits :: Maybe (Tree Int)
    , _toptoCHOPstartunit :: Maybe (Tree Int)
    , _toptoCHOPr :: Maybe (Tree ByteString)
    , _toptoCHOPg :: Maybe (Tree ByteString)
    , _toptoCHOPuend :: Maybe (Tree Float)
    , _toptoCHOPstart :: Maybe (Tree Float)
    , _toptoCHOPleft :: Maybe (Tree Int)
    , _toptoCHOPustart :: Maybe (Tree Float)
    , _toptoCHOPb :: Maybe (Tree ByteString)
    , _toptoCHOPtimeslice :: Maybe (Tree Bool)
    , _toptoCHOPrate :: Maybe (Tree Float)
    , _toptoCHOPscope :: Maybe (Tree ByteString)
    , _toptoCHOPa :: Maybe (Tree ByteString)
    , _toptoCHOPimageleft :: Maybe (Tree Int)
    , _toptoCHOPsrselect :: Maybe (Tree Int)
    , _toptoCHOPexporttable :: Maybe (Tree DAT)
    , _toptoCHOPimagetop :: Maybe (Tree Int)
    , _toptoCHOPimagebottom :: Maybe (Tree Int)
    , _toptoCHOPdefcolor :: Vec4
    , _toptoCHOPright :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AbletonlinkCHOP {
    _abletonlinkCHOPactive :: Maybe (Tree Bool)
    , _abletonlinkCHOPscope :: Maybe (Tree ByteString)
    , _abletonlinkCHOPramp :: Maybe (Tree Bool)
    , _abletonlinkCHOPphase :: Maybe (Tree Bool)
    , _abletonlinkCHOPbeat :: Maybe (Tree Bool)
    , _abletonlinkCHOPsixteenths :: Maybe (Tree Bool)
    , _abletonlinkCHOPcallbacks :: Maybe (Tree DAT)
    , _abletonlinkCHOPtempo :: Maybe (Tree Bool)
    , _abletonlinkCHOPenable :: Maybe (Tree Bool)
    , _abletonlinkCHOPexporttable :: Maybe (Tree DAT)
    , _abletonlinkCHOPsignature1 :: Maybe (Tree Int)
    , _abletonlinkCHOPexportmethod :: Maybe (Tree Int)
    , _abletonlinkCHOPcountramp :: Maybe (Tree Bool)
    , _abletonlinkCHOPstatus :: Maybe (Tree Bool)
    , _abletonlinkCHOPcount :: Maybe (Tree Bool)
    , _abletonlinkCHOPrampbeat :: Maybe (Tree Bool)
    , _abletonlinkCHOPsignature2 :: Maybe (Tree Int)
    , _abletonlinkCHOPbeats :: Maybe (Tree Bool)
    , _abletonlinkCHOPpulse :: Maybe (Tree Bool)
    , _abletonlinkCHOPbar :: Maybe (Tree Bool)
    , _abletonlinkCHOPsrselect :: Maybe (Tree Int)
    , _abletonlinkCHOPrampbar :: Maybe (Tree Bool)
    , _abletonlinkCHOPsine :: Maybe (Tree Bool)
    , _abletonlinkCHOPtimeslice :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ConstantCHOP {
    _constantCHOPname1 :: Maybe (Tree ByteString)
    , _constantCHOPname17 :: Maybe (Tree ByteString)
    , _constantCHOPvalue3 :: Maybe (Tree Float)
    , _constantCHOPvalue29 :: Maybe (Tree Float)
    , _constantCHOPvalue14 :: Maybe (Tree Float)
    , _constantCHOPname21 :: Maybe (Tree ByteString)
    , _constantCHOPstartunit :: Maybe (Tree Int)
    , _constantCHOPvalue20 :: Maybe (Tree Float)
    , _constantCHOPvalue25 :: Maybe (Tree Float)
    , _constantCHOPvalue24 :: Maybe (Tree Float)
    , _constantCHOPname12 :: Maybe (Tree ByteString)
    , _constantCHOPexporttable :: Maybe (Tree DAT)
    , _constantCHOPname15 :: Maybe (Tree ByteString)
    , _constantCHOPleft :: Maybe (Tree Int)
    , _constantCHOPname0 :: Maybe (Tree ByteString)
    , _constantCHOPname23 :: Maybe (Tree ByteString)
    , _constantCHOPname27 :: Maybe (Tree ByteString)
    , _constantCHOPname39 :: Maybe (Tree ByteString)
    , _constantCHOPname2 :: Maybe (Tree ByteString)
    , _constantCHOPsrselect :: Maybe (Tree Int)
    , _constantCHOPvalue36 :: Maybe (Tree Float)
    , _constantCHOPvalue23 :: Maybe (Tree Float)
    , _constantCHOPname33 :: Maybe (Tree ByteString)
    , _constantCHOPvalue19 :: Maybe (Tree Float)
    , _constantCHOPname34 :: Maybe (Tree ByteString)
    , _constantCHOPname38 :: Maybe (Tree ByteString)
    , _constantCHOPname5 :: Maybe (Tree ByteString)
    , _constantCHOPvalue2 :: Maybe (Tree Float)
    , _constantCHOPname37 :: Maybe (Tree ByteString)
    , _constantCHOPdefval :: Maybe (Tree Float)
    , _constantCHOPvalue11 :: Maybe (Tree Float)
    , _constantCHOPvalue13 :: Maybe (Tree Float)
    , _constantCHOPscope :: Maybe (Tree ByteString)
    , _constantCHOPexportmethod :: Maybe (Tree Int)
    , _constantCHOPname10 :: Maybe (Tree ByteString)
    , _constantCHOPvalue5 :: Maybe (Tree Float)
    , _constantCHOPvalue37 :: Maybe (Tree Float)
    , _constantCHOPsnap :: Maybe (Tree Bool)
    , _constantCHOPvalue0 :: Maybe (Tree Float)
    , _constantCHOPvalue9 :: Maybe (Tree Float)
    , _constantCHOPvalue17 :: Maybe (Tree Float)
    , _constantCHOPname7 :: Maybe (Tree ByteString)
    , _constantCHOPname6 :: Maybe (Tree ByteString)
    , _constantCHOPvalue32 :: Maybe (Tree Float)
    , _constantCHOPtimeslice :: Maybe (Tree Bool)
    , _constantCHOPvalue10 :: Maybe (Tree Float)
    , _constantCHOPname29 :: Maybe (Tree ByteString)
    , _constantCHOPfirst :: Maybe (Tree Int)
    , _constantCHOPname36 :: Maybe (Tree ByteString)
    , _constantCHOPvalue6 :: Maybe (Tree Float)
    , _constantCHOPname35 :: Maybe (Tree ByteString)
    , _constantCHOPname30 :: Maybe (Tree ByteString)
    , _constantCHOPvalue33 :: Maybe (Tree Float)
    , _constantCHOPcurrent :: Maybe (Tree Bool)
    , _constantCHOPvalue21 :: Maybe (Tree Float)
    , _constantCHOPvalue8 :: Maybe (Tree Float)
    , _constantCHOPvalue4 :: Maybe (Tree Float)
    , _constantCHOPvalue15 :: Maybe (Tree Float)
    , _constantCHOPname26 :: Maybe (Tree ByteString)
    , _constantCHOPname4 :: Maybe (Tree ByteString)
    , _constantCHOPname11 :: Maybe (Tree ByteString)
    , _constantCHOPname8 :: Maybe (Tree ByteString)
    , _constantCHOPname28 :: Maybe (Tree ByteString)
    , _constantCHOPvalue26 :: Maybe (Tree Float)
    , _constantCHOPsingle :: Maybe (Tree Bool)
    , _constantCHOPname19 :: Maybe (Tree ByteString)
    , _constantCHOPvalue28 :: Maybe (Tree Float)
    , _constantCHOPname13 :: Maybe (Tree ByteString)
    , _constantCHOPname20 :: Maybe (Tree ByteString)
    , _constantCHOPendunit :: Maybe (Tree Int)
    , _constantCHOPrate :: Maybe (Tree Float)
    , _constantCHOPvalue27 :: Maybe (Tree Float)
    , _constantCHOPvalue18 :: Maybe (Tree Float)
    , _constantCHOPvalue39 :: Maybe (Tree Float)
    , _constantCHOPend :: Maybe (Tree Float)
    , _constantCHOPvalue7 :: Maybe (Tree Float)
    , _constantCHOPvalue22 :: Maybe (Tree Float)
    , _constantCHOPvalue12 :: Maybe (Tree Float)
    , _constantCHOPname18 :: Maybe (Tree ByteString)
    , _constantCHOPvalue34 :: Maybe (Tree Float)
    , _constantCHOPname32 :: Maybe (Tree ByteString)
    , _constantCHOPname25 :: Maybe (Tree ByteString)
    , _constantCHOPvalue35 :: Maybe (Tree Float)
    , _constantCHOPstart :: Maybe (Tree Float)
    , _constantCHOPvalue1 :: Maybe (Tree Float)
    , _constantCHOPname14 :: Maybe (Tree ByteString)
    , _constantCHOPvalue16 :: Maybe (Tree Float)
    , _constantCHOPvalue31 :: Maybe (Tree Float)
    , _constantCHOPname31 :: Maybe (Tree ByteString)
    , _constantCHOPname24 :: Maybe (Tree ByteString)
    , _constantCHOPname16 :: Maybe (Tree ByteString)
    , _constantCHOPvalue30 :: Maybe (Tree Float)
    , _constantCHOPname9 :: Maybe (Tree ByteString)
    , _constantCHOPname3 :: Maybe (Tree ByteString)
    , _constantCHOPname22 :: Maybe (Tree ByteString)
    , _constantCHOPvalue38 :: Maybe (Tree Float)
    , _constantCHOPright :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ObjectCHOP {
    _objectCHOPtscopez :: Maybe (Tree ByteString)
    , _objectCHOPnameformat :: Maybe (Tree Int)
    , _objectCHOPcompute :: Maybe (Tree Int)
    , _objectCHOPcookpast :: Maybe (Tree Bool)
    , _objectCHOPappendattribs :: Maybe (Tree Bool)
    , _objectCHOPend :: Maybe (Tree Float)
    , _objectCHOPscope :: Maybe (Tree ByteString)
    , _objectCHOPtscopey :: Maybe (Tree ByteString)
    , _objectCHOPtscopex :: Maybe (Tree ByteString)
    , _objectCHOPdefval :: Maybe (Tree Float)
    , _objectCHOPexportmethod :: Maybe (Tree Int)
    , _objectCHOPoutputrange :: Maybe (Tree Int)
    , _objectCHOPsmoothrotate :: Maybe (Tree Bool)
    , _objectCHOPstartunit :: Maybe (Tree Int)
    , _objectCHOPstart :: Maybe (Tree Float)
    , _objectCHOPleft :: Maybe (Tree Int)
    , _objectCHOPbearing :: Vec3
    , _objectCHOPendunit :: Maybe (Tree Int)
    , _objectCHOPxord :: Maybe (Tree Int)
    , _objectCHOPright :: Maybe (Tree Int)
    , _objectCHOPexporttable :: Maybe (Tree DAT)
    , _objectCHOPtimeslice :: Maybe (Tree Bool)
    , _objectCHOPsrselect :: Maybe (Tree Int)
    , _objectCHOPbearingref :: Maybe (Tree Int)
    , _objectCHOPrord :: Maybe (Tree Int)
    , _objectCHOPdat :: Maybe (Tree DAT)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | JoinCHOP {
    _joinCHOPblendbyinput :: Maybe (Tree Bool)
    , _joinCHOPtransscopex :: Maybe (Tree ByteString)
    , _joinCHOPshortrot :: Maybe (Tree Bool)
    , _joinCHOPblendmethod :: Maybe (Tree Int)
    , _joinCHOPstep :: Maybe (Tree Float)
    , _joinCHOPtransscopey :: Maybe (Tree ByteString)
    , _joinCHOPscope :: Maybe (Tree ByteString)
    , _joinCHOPblendscope :: Maybe (Tree ByteString)
    , _joinCHOPtransscopez :: Maybe (Tree ByteString)
    , _joinCHOPexporttable :: Maybe (Tree DAT)
    , _joinCHOPexportmethod :: Maybe (Tree Int)
    , _joinCHOProtscope :: Maybe (Tree ByteString)
    , _joinCHOPblendbias :: Maybe (Tree Float)
    , _joinCHOPblendregionunit :: Maybe (Tree Int)
    , _joinCHOPmatch :: Maybe (Tree Int)
    , _joinCHOPcyclelen :: Maybe (Tree Float)
    , _joinCHOPquatrot :: Maybe (Tree Bool)
    , _joinCHOPstepscope :: Maybe (Tree ByteString)
    , _joinCHOPsrselect :: Maybe (Tree Int)
    , _joinCHOPtimeslice :: Maybe (Tree Bool)
    , _joinCHOPblendregion :: Maybe (Tree Float)
    , _joinCHOPblendfunc :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | CycleCHOP {
    _cycleCHOPexportmethod :: Maybe (Tree Int)
    , _cycleCHOPbefore :: Maybe (Tree Float)
    , _cycleCHOPexporttable :: Maybe (Tree DAT)
    , _cycleCHOPblendmethod :: Maybe (Tree Int)
    , _cycleCHOPblendbias :: Maybe (Tree Float)
    , _cycleCHOPblendregionunit :: Maybe (Tree Int)
    , _cycleCHOPstep :: Maybe (Tree Float)
    , _cycleCHOPmirror :: Maybe (Tree Bool)
    , _cycleCHOPblendregion :: Maybe (Tree Float)
    , _cycleCHOPextremes :: Maybe (Tree Bool)
    , _cycleCHOPsrselect :: Maybe (Tree Int)
    , _cycleCHOPscope :: Maybe (Tree ByteString)
    , _cycleCHOPafter :: Maybe (Tree Float)
    , _cycleCHOPtimeslice :: Maybe (Tree Bool)
    , _cycleCHOPstepscope :: Maybe (Tree ByteString)
    , _cycleCHOPblendfunc :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | FeedbackCHOP {
    _feedbackCHOPresetpulse :: Maybe (Tree Bool)
    , _feedbackCHOPsrselect :: Maybe (Tree Int)
    , _feedbackCHOPoutput :: Maybe (Tree Int)
    , _feedbackCHOPexportmethod :: Maybe (Tree Int)
    , _feedbackCHOPexporttable :: Maybe (Tree DAT)
    , _feedbackCHOPtimeslice :: Maybe (Tree Bool)
    , _feedbackCHOPscope :: Maybe (Tree ByteString)
    , _feedbackCHOPreset :: Maybe (Tree Bool)
    , _feedbackCHOPdelta :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | OculusriftCHOP {
    _oculusriftCHOPnear :: Maybe (Tree Float)
    , _oculusriftCHOPrecenter :: Maybe (Tree Bool)
    , _oculusriftCHOPactive :: Maybe (Tree Bool)
    , _oculusriftCHOPdeviceinfo :: Maybe (Tree Bool)
    , _oculusriftCHOPexportmethod :: Maybe (Tree Int)
    , _oculusriftCHOPexporttable :: Maybe (Tree DAT)
    , _oculusriftCHOPfar :: Maybe (Tree Float)
    , _oculusriftCHOPscope :: Maybe (Tree ByteString)
    , _oculusriftCHOPsrselect :: Maybe (Tree Int)
    , _oculusriftCHOPacceleration :: Maybe (Tree Bool)
    , _oculusriftCHOPvelocity :: Maybe (Tree Bool)
    , _oculusriftCHOPorientation :: Maybe (Tree Bool)
    , _oculusriftCHOPcontrollerbuttons :: Maybe (Tree Bool)
    , _oculusriftCHOPtimeslice :: Maybe (Tree Bool)
    , _oculusriftCHOPoutput :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | MathCHOP {
    _mathCHOPexportmethod :: Maybe (Tree Int)
    , _mathCHOPgain :: Maybe (Tree Float)
    , _mathCHOPpostoff :: Maybe (Tree Float)
    , _mathCHOPalign :: Maybe (Tree Int)
    , _mathCHOPtorange1 :: Maybe (Tree Float)
    , _mathCHOPfromrange2 :: Maybe (Tree Float)
    , _mathCHOPpostop :: Maybe (Tree Int)
    , _mathCHOPchopop :: Maybe (Tree Int)
    , _mathCHOPchanop :: Maybe (Tree Int)
    , _mathCHOPmatch :: Maybe (Tree Int)
    , _mathCHOPexporttable :: Maybe (Tree DAT)
    , _mathCHOPscope :: Maybe (Tree ByteString)
    , _mathCHOPtorange2 :: Maybe (Tree Float)
    , _mathCHOPpreoff :: Maybe (Tree Float)
    , _mathCHOPfromrange1 :: Maybe (Tree Float)
    , _mathCHOPsrselect :: Maybe (Tree Int)
    , _mathCHOPtimeslice :: Maybe (Tree Bool)
    , _mathCHOPpreop :: Maybe (Tree Int)
    , _mathCHOPinteger :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ScanCHOP {
    _scanCHOPvertexrepeat :: Maybe (Tree Int)
    , _scanCHOPlayered :: Maybe (Tree Bool)
    , _scanCHOPcolor :: Maybe (Tree Bool)
    , _scanCHOPxscale :: Maybe (Tree Float)
    , _scanCHOPsrselect :: Maybe (Tree Int)
    , _scanCHOPscope :: Maybe (Tree ByteString)
    , _scanCHOPlimitstep :: Maybe (Tree Bool)
    , _scanCHOPtop :: Maybe (Tree TOP)
    , _scanCHOPgreenscale :: Maybe (Tree Float)
    , _scanCHOPlevel :: Maybe (Tree Int)
    , _scanCHOPheight :: Maybe (Tree Int)
    , _scanCHOPvertexorder :: Maybe (Tree Bool)
    , _scanCHOPsop :: Maybe (Tree SOP)
    , _scanCHOPbluescale :: Maybe (Tree Float)
    , _scanCHOPsource :: Maybe (Tree Int)
    , _scanCHOPlimit :: Maybe (Tree Bool)
    , _scanCHOPexportmethod :: Maybe (Tree Int)
    , _scanCHOPrandomize :: Maybe (Tree Bool)
    , _scanCHOPexporttable :: Maybe (Tree DAT)
    , _scanCHOPrate :: Maybe (Tree Float)
    , _scanCHOPinterleave :: Maybe (Tree Int)
    , _scanCHOPtrim :: Maybe (Tree Bool)
    , _scanCHOPtrimval :: Maybe (Tree Float)
    , _scanCHOProtate :: Maybe (Tree Float)
    , _scanCHOPtriggerval :: Maybe (Tree Float)
    , _scanCHOPwidth :: Maybe (Tree Int)
    , _scanCHOPblankingcount :: Maybe (Tree Int)
    , _scanCHOPtrimunits :: Maybe (Tree Int)
    , _scanCHOPstepsize :: Maybe (Tree Float)
    , _scanCHOPchop :: Maybe (Tree CHOP)
    , _scanCHOPyscale :: Maybe (Tree Float)
    , _scanCHOPtrigger :: Maybe (Tree Bool)
    , _scanCHOPtimeslice :: Maybe (Tree Bool)
    , _scanCHOPredscale :: Maybe (Tree Float)
    , _scanCHOPswap :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudiostreaminCHOP {
    _audiostreaminCHOPvideostreamintop :: Maybe (Tree TOP)
    , _audiostreaminCHOPplay :: Maybe (Tree Float)
    , _audiostreaminCHOPsrselect :: Maybe (Tree Int)
    , _audiostreaminCHOPvolume :: Maybe (Tree Float)
    , _audiostreaminCHOPexportmethod :: Maybe (Tree Int)
    , _audiostreaminCHOPtimeslice :: Maybe (Tree Bool)
    , _audiostreaminCHOPopentimeout :: Maybe (Tree Float)
    , _audiostreaminCHOPurl :: Maybe (Tree ByteString)
    , _audiostreaminCHOPscope :: Maybe (Tree ByteString)
    , _audiostreaminCHOPexporttable :: Maybe (Tree DAT)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | WaveCHOP {
    _waveCHOPend :: Maybe (Tree Float)
    , _waveCHOPdecay :: Maybe (Tree Float)
    , _waveCHOPexportmethod :: Maybe (Tree Int)
    , _waveCHOPoffset :: Maybe (Tree Float)
    , _waveCHOPscope :: Maybe (Tree ByteString)
    , _waveCHOPdefval :: Maybe (Tree Float)
    , _waveCHOPwavetype :: Maybe (Tree Int)
    , _waveCHOPramp :: Maybe (Tree Float)
    , _waveCHOPphase :: Maybe (Tree Float)
    , _waveCHOPrampunit :: Maybe (Tree Int)
    , _waveCHOPperiodunit :: Maybe (Tree Int)
    , _waveCHOPendunit :: Maybe (Tree Int)
    , _waveCHOPstart :: Maybe (Tree Float)
    , _waveCHOPleft :: Maybe (Tree Int)
    , _waveCHOPperiod :: Maybe (Tree Float)
    , _waveCHOPstartunit :: Maybe (Tree Int)
    , _waveCHOPrate :: Maybe (Tree Float)
    , _waveCHOPchannelname :: Maybe (Tree ByteString)
    , _waveCHOPexprs :: Maybe (Tree Float)
    , _waveCHOPexporttable :: Maybe (Tree DAT)
    , _waveCHOPtimeslice :: Maybe (Tree Bool)
    , _waveCHOPdecayunit :: Maybe (Tree Int)
    , _waveCHOPbias :: Maybe (Tree Float)
    , _waveCHOPsrselect :: Maybe (Tree Int)
    , _waveCHOPamp :: Maybe (Tree Float)
    , _waveCHOPright :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudiobandeqCHOP {
    _audiobandeqCHOPband12 :: Maybe (Tree Float)
    , _audiobandeqCHOPdrywet :: Maybe (Tree Float)
    , _audiobandeqCHOPband13 :: Maybe (Tree Float)
    , _audiobandeqCHOPscope :: Maybe (Tree ByteString)
    , _audiobandeqCHOPband10 :: Maybe (Tree Float)
    , _audiobandeqCHOPband14 :: Maybe (Tree Float)
    , _audiobandeqCHOPband5 :: Maybe (Tree Float)
    , _audiobandeqCHOPband1 :: Maybe (Tree Float)
    , _audiobandeqCHOPband3 :: Maybe (Tree Float)
    , _audiobandeqCHOPband16 :: Maybe (Tree Float)
    , _audiobandeqCHOPexporttable :: Maybe (Tree DAT)
    , _audiobandeqCHOPband2 :: Maybe (Tree Float)
    , _audiobandeqCHOPexportmethod :: Maybe (Tree Int)
    , _audiobandeqCHOPband4 :: Maybe (Tree Float)
    , _audiobandeqCHOPband6 :: Maybe (Tree Float)
    , _audiobandeqCHOPband7 :: Maybe (Tree Float)
    , _audiobandeqCHOPsrselect :: Maybe (Tree Int)
    , _audiobandeqCHOPband9 :: Maybe (Tree Float)
    , _audiobandeqCHOPband11 :: Maybe (Tree Float)
    , _audiobandeqCHOPband15 :: Maybe (Tree Float)
    , _audiobandeqCHOPtimeslice :: Maybe (Tree Bool)
    , _audiobandeqCHOPband8 :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ShuffleCHOP {
    _shuffleCHOPexportmethod :: Maybe (Tree Int)
    , _shuffleCHOPsrselect :: Maybe (Tree Int)
    , _shuffleCHOPfirstsample :: Maybe (Tree Bool)
    , _shuffleCHOPmethod :: Maybe (Tree Int)
    , _shuffleCHOPtimeslice :: Maybe (Tree Bool)
    , _shuffleCHOPnval :: Maybe (Tree Int)
    , _shuffleCHOPexporttable :: Maybe (Tree DAT)
    , _shuffleCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | TimelineCHOP {
    _timelineCHOPstart :: Maybe (Tree Bool)
    , _timelineCHOPend :: Maybe (Tree Bool)
    , _timelineCHOPsignature1 :: Maybe (Tree Bool)
    , _timelineCHOPexportmethod :: Maybe (Tree Int)
    , _timelineCHOPbpm :: Maybe (Tree Bool)
    , _timelineCHOPrate :: Maybe (Tree Bool)
    , _timelineCHOPscope :: Maybe (Tree ByteString)
    , _timelineCHOPexporttable :: Maybe (Tree DAT)
    , _timelineCHOPplay :: Maybe (Tree Bool)
    , _timelineCHOPsrselect :: Maybe (Tree Int)
    , _timelineCHOPsignature2 :: Maybe (Tree Bool)
    , _timelineCHOPframe :: Maybe (Tree Bool)
    , _timelineCHOPtimeslice :: Maybe (Tree Bool)
    , _timelineCHOPrangeend :: Maybe (Tree Bool)
    , _timelineCHOPrangestart :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | LfoCHOP {
    _lfoCHOPresetpulse :: Maybe (Tree Bool)
    , _lfoCHOPresetcondition :: Maybe (Tree Int)
    , _lfoCHOPbias :: Maybe (Tree Float)
    , _lfoCHOPrate :: Maybe (Tree Float)
    , _lfoCHOPchannelname :: Maybe (Tree ByteString)
    , _lfoCHOPscope :: Maybe (Tree ByteString)
    , _lfoCHOPexporttable :: Maybe (Tree DAT)
    , _lfoCHOPwavetype :: Maybe (Tree Int)
    , _lfoCHOPplay :: Maybe (Tree Bool)
    , _lfoCHOPphase :: Maybe (Tree Float)
    , _lfoCHOPexportmethod :: Maybe (Tree Int)
    , _lfoCHOPfrequency :: Maybe (Tree Float)
    , _lfoCHOPoffset :: Maybe (Tree Float)
    , _lfoCHOPsrselect :: Maybe (Tree Int)
    , _lfoCHOPamp :: Maybe (Tree Float)
    , _lfoCHOPtimeslice :: Maybe (Tree Bool)
    , _lfoCHOPreset :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | TriggerCHOP {
    _triggerCHOPpeaklenunit :: Maybe (Tree Int)
    , _triggerCHOPthreshdown :: Maybe (Tree Float)
    , _triggerCHOPdecay :: Maybe (Tree Float)
    , _triggerCHOPpeak :: Maybe (Tree Float)
    , _triggerCHOPexportmethod :: Maybe (Tree Int)
    , _triggerCHOPashape :: Maybe (Tree Int)
    , _triggerCHOPminsustain :: Maybe (Tree Float)
    , _triggerCHOPspecifyrate :: Maybe (Tree Bool)
    , _triggerCHOPclamppeak :: Maybe (Tree Bool)
    , _triggerCHOPminsustainunit :: Maybe (Tree Int)
    , _triggerCHOPdelayunit :: Maybe (Tree Int)
    , _triggerCHOPscope :: Maybe (Tree ByteString)
    , _triggerCHOPsrselect :: Maybe (Tree Int)
    , _triggerCHOPexporttable :: Maybe (Tree DAT)
    , _triggerCHOPretriggerunit :: Maybe (Tree Int)
    , _triggerCHOPmultitriggeradd :: Maybe (Tree Bool)
    , _triggerCHOPretrigger :: Maybe (Tree Float)
    , _triggerCHOPtriggeron :: Maybe (Tree Int)
    , _triggerCHOPsustain :: Maybe (Tree Float)
    , _triggerCHOPthreshup :: Maybe (Tree Float)
    , _triggerCHOPremainder :: Maybe (Tree Int)
    , _triggerCHOPrate :: Maybe (Tree Float)
    , _triggerCHOPmintriggerunit :: Maybe (Tree Int)
    , _triggerCHOPthreshold :: Maybe (Tree Bool)
    , _triggerCHOPdshape :: Maybe (Tree Int)
    , _triggerCHOPdelay :: Maybe (Tree Float)
    , _triggerCHOPrshape :: Maybe (Tree Int)
    , _triggerCHOPrelease :: Maybe (Tree Float)
    , _triggerCHOPcomplete :: Maybe (Tree Bool)
    , _triggerCHOPdecayunit :: Maybe (Tree Int)
    , _triggerCHOPreleaseunit :: Maybe (Tree Int)
    , _triggerCHOPattackunit :: Maybe (Tree Int)
    , _triggerCHOPattack :: Maybe (Tree Float)
    , _triggerCHOPpeaklen :: Maybe (Tree Float)
    , _triggerCHOPmintrigger :: Maybe (Tree Float)
    , _triggerCHOPtimeslice :: Maybe (Tree Bool)
    , _triggerCHOPchanname :: Maybe (Tree ByteString)
    , _triggerCHOPtriggerpulse :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | StretchCHOP {
    _stretchCHOPinterp :: Maybe (Tree Int)
    , _stretchCHOPstart :: Maybe (Tree Float)
    , _stretchCHOPend :: Maybe (Tree Float)
    , _stretchCHOPexportmethod :: Maybe (Tree Int)
    , _stretchCHOPreverse :: Maybe (Tree Bool)
    , _stretchCHOPstartunit :: Maybe (Tree Int)
    , _stretchCHOPscope :: Maybe (Tree ByteString)
    , _stretchCHOPconstarea :: Maybe (Tree Bool)
    , _stretchCHOPtimeslice :: Maybe (Tree Bool)
    , _stretchCHOPsrselect :: Maybe (Tree Int)
    , _stretchCHOPrelative :: Maybe (Tree Int)
    , _stretchCHOPexporttable :: Maybe (Tree DAT)
    , _stretchCHOPscale :: Maybe (Tree Float)
    , _stretchCHOPendunit :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | CplusplusCHOP {
    _cplusplusCHOPexportmethod :: Maybe (Tree Int)
    , _cplusplusCHOPreinitpulse :: Maybe (Tree Bool)
    , _cplusplusCHOPsrselect :: Maybe (Tree Int)
    , _cplusplusCHOPunloadplugin :: Maybe (Tree Bool)
    , _cplusplusCHOPexporttable :: Maybe (Tree DAT)
    , _cplusplusCHOPplugin :: Maybe (Tree ByteString)
    , _cplusplusCHOPtimeslice :: Maybe (Tree Bool)
    , _cplusplusCHOPscope :: Maybe (Tree ByteString)
    , _cplusplusCHOPreinit :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | OscinCHOP {
    _oscinCHOPresetpulse :: Maybe (Tree Bool)
    , _oscinCHOPmaxtargetunit :: Maybe (Tree Int)
    , _oscinCHOPactive :: Maybe (Tree Bool)
    , _oscinCHOPmaxqueueunit :: Maybe (Tree Int)
    , _oscinCHOPmintargetunit :: Maybe (Tree Int)
    , _oscinCHOPport :: Maybe (Tree Int)
    , _oscinCHOPexporttable :: Maybe (Tree DAT)
    , _oscinCHOPmaxtarget :: Maybe (Tree Float)
    , _oscinCHOPexportmethod :: Maybe (Tree Int)
    , _oscinCHOPqueued :: Maybe (Tree Bool)
    , _oscinCHOPstripsegments :: Maybe (Tree Int)
    , _oscinCHOPprotocol :: Maybe (Tree Int)
    , _oscinCHOPscope :: Maybe (Tree ByteString)
    , _oscinCHOPoscaddressscope :: Maybe (Tree ByteString)
    , _oscinCHOPmintarget :: Maybe (Tree Float)
    , _oscinCHOPadjusttimeunit :: Maybe (Tree Int)
    , _oscinCHOPuseglobalrate :: Maybe (Tree Bool)
    , _oscinCHOPsrselect :: Maybe (Tree Int)
    , _oscinCHOPmaxqueue :: Maybe (Tree Float)
    , _oscinCHOPadjusttime :: Maybe (Tree Float)
    , _oscinCHOPtimeslice :: Maybe (Tree Bool)
    , _oscinCHOPnetaddress :: Maybe (Tree ByteString)
    , _oscinCHOPreset :: Maybe (Tree Bool)
    , _oscinCHOPsamplerate :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | LtcinCHOP {
    _ltcinCHOPdebugchans :: Maybe (Tree Bool)
    , _ltcinCHOPexportmethod :: Maybe (Tree Int)
    , _ltcinCHOPsrselect :: Maybe (Tree Int)
    , _ltcinCHOPinputrate :: Maybe (Tree Float)
    , _ltcinCHOPexporttable :: Maybe (Tree DAT)
    , _ltcinCHOPtimeslice :: Maybe (Tree Bool)
    , _ltcinCHOPscope :: Maybe (Tree ByteString)
    , _ltcinCHOPuserfields :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | TabletCHOP {
    _tabletCHOPbutton22 :: Maybe (Tree ByteString)
    , _tabletCHOPexportmethod :: Maybe (Tree Int)
    , _tabletCHOPtanpressure :: Maybe (Tree ByteString)
    , _tabletCHOPxcoord :: Maybe (Tree ByteString)
    , _tabletCHOPbutton2 :: Maybe (Tree ByteString)
    , _tabletCHOProtation2 :: Maybe (Tree ByteString)
    , _tabletCHOPbutton1 :: Maybe (Tree ByteString)
    , _tabletCHOPtanpressure2 :: Maybe (Tree ByteString)
    , _tabletCHOPzcoord :: Maybe (Tree ByteString)
    , _tabletCHOPleft :: Maybe (Tree Int)
    , _tabletCHOPpressure :: Maybe (Tree ByteString)
    , _tabletCHOPbutton25 :: Maybe (Tree ByteString)
    , _tabletCHOPpressure2 :: Maybe (Tree ByteString)
    , _tabletCHOPycoord2 :: Maybe (Tree ByteString)
    , _tabletCHOPactive :: Maybe (Tree Int)
    , _tabletCHOPxtilt2 :: Maybe (Tree ByteString)
    , _tabletCHOPexporttable :: Maybe (Tree DAT)
    , _tabletCHOPytilt :: Maybe (Tree ByteString)
    , _tabletCHOPbutton3 :: Maybe (Tree ByteString)
    , _tabletCHOPzcoord2 :: Maybe (Tree ByteString)
    , _tabletCHOPdefval :: Maybe (Tree Float)
    , _tabletCHOPxtilt :: Maybe (Tree ByteString)
    , _tabletCHOPbutton21 :: Maybe (Tree ByteString)
    , _tabletCHOPbutton5 :: Maybe (Tree ByteString)
    , _tabletCHOPtimeslice :: Maybe (Tree Bool)
    , _tabletCHOPrate :: Maybe (Tree Float)
    , _tabletCHOPytilt2 :: Maybe (Tree ByteString)
    , _tabletCHOPbutton24 :: Maybe (Tree ByteString)
    , _tabletCHOPycoord :: Maybe (Tree ByteString)
    , _tabletCHOProtation :: Maybe (Tree ByteString)
    , _tabletCHOPsrselect :: Maybe (Tree Int)
    , _tabletCHOPbutton4 :: Maybe (Tree ByteString)
    , _tabletCHOPxcoord2 :: Maybe (Tree ByteString)
    , _tabletCHOPbutton23 :: Maybe (Tree ByteString)
    , _tabletCHOPscope :: Maybe (Tree ByteString)
    , _tabletCHOPright :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | EventCHOP {
    _eventCHOPresetpulse :: Maybe (Tree Bool)
    , _eventCHOPspeed :: Maybe (Tree Float)
    , _eventCHOPactive :: Maybe (Tree ByteString)
    , _eventCHOPexportmethod :: Maybe (Tree Int)
    , _eventCHOPdecaytime :: Maybe (Tree Float)
    , _eventCHOPreleasetunit :: Maybe (Tree Int)
    , _eventCHOPadsr :: Maybe (Tree ByteString)
    , _eventCHOPsustainmin :: Maybe (Tree Float)
    , _eventCHOPcallbacks :: Maybe (Tree DAT)
    , _eventCHOPreleaselevel :: Maybe (Tree Float)
    , _eventCHOPreleasetime :: Maybe (Tree Float)
    , _eventCHOPsustaintunit :: Maybe (Tree Int)
    , _eventCHOPid :: Maybe (Tree ByteString)
    , _eventCHOPindex :: Maybe (Tree ByteString)
    , _eventCHOPattacktime :: Maybe (Tree Float)
    , _eventCHOPsustaintime :: Maybe (Tree Float)
    , _eventCHOPsustainmax :: Maybe (Tree Float)
    , _eventCHOPresetcondition :: Maybe (Tree Int)
    , _eventCHOPattacklevel :: Maybe (Tree Float)
    , _eventCHOPstate :: Maybe (Tree ByteString)
    , _eventCHOPscope :: Maybe (Tree ByteString)
    , _eventCHOPglobalspeed :: Maybe (Tree Float)
    , _eventCHOPtime :: Maybe (Tree ByteString)
    , _eventCHOPsrselect :: Maybe (Tree Int)
    , _eventCHOPreset :: Maybe (Tree Bool)
    , _eventCHOPattacktunit :: Maybe (Tree Int)
    , _eventCHOPexporttable :: Maybe (Tree DAT)
    , _eventCHOPdecaytunit :: Maybe (Tree Int)
    , _eventCHOPtimeslice :: Maybe (Tree Bool)
    , _eventCHOPinput :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | TouchinCHOP {
    _touchinCHOPexportmethod :: Maybe (Tree Int)
    , _touchinCHOPactive :: Maybe (Tree Bool)
    , _touchinCHOPrecover :: Maybe (Tree Bool)
    , _touchinCHOPprotocol :: Maybe (Tree Int)
    , _touchinCHOPqueuevarianceunit :: Maybe (Tree Int)
    , _touchinCHOPmaxqueueunit :: Maybe (Tree Int)
    , _touchinCHOPaddress :: Maybe (Tree ByteString)
    , _touchinCHOPscope :: Maybe (Tree ByteString)
    , _touchinCHOPexporttable :: Maybe (Tree DAT)
    , _touchinCHOPadjusttimeunit :: Maybe (Tree Int)
    , _touchinCHOPqueuetarget :: Maybe (Tree Float)
    , _touchinCHOPqueuetargetunit :: Maybe (Tree Int)
    , _touchinCHOPsrselect :: Maybe (Tree Int)
    , _touchinCHOPmaxqueue :: Maybe (Tree Float)
    , _touchinCHOPadjusttime :: Maybe (Tree Float)
    , _touchinCHOPport :: Maybe (Tree Int)
    , _touchinCHOPtimeslice :: Maybe (Tree Bool)
    , _touchinCHOPsyncports :: Maybe (Tree Int)
    , _touchinCHOPqueuevariance :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | HogCHOP {
    _hogCHOPdelay :: Maybe (Tree Float)
    , _hogCHOPexportmethod :: Maybe (Tree Int)
    , _hogCHOPdelayunit :: Maybe (Tree Int)
    , _hogCHOPactive :: Maybe (Tree Bool)
    , _hogCHOPsrselect :: Maybe (Tree Int)
    , _hogCHOPcookalways :: Maybe (Tree Bool)
    , _hogCHOPtimeslice :: Maybe (Tree Bool)
    , _hogCHOPscope :: Maybe (Tree ByteString)
    , _hogCHOPexporttable :: Maybe (Tree DAT)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | PatternCHOP {
    _patternCHOPreverse :: Maybe (Tree Bool)
    , _patternCHOPphasestep :: Maybe (Tree Float)
    , _patternCHOPinteger :: Maybe (Tree Int)
    , _patternCHOPbias :: Maybe (Tree Float)
    , _patternCHOPtaper1 :: Maybe (Tree Float)
    , _patternCHOPtimeslice :: Maybe (Tree Bool)
    , _patternCHOPdefval :: Maybe (Tree Float)
    , _patternCHOPwavetype :: Maybe (Tree Int)
    , _patternCHOPphase :: Maybe (Tree Float)
    , _patternCHOPfromrange1 :: Maybe (Tree Float)
    , _patternCHOPexporttable :: Maybe (Tree DAT)
    , _patternCHOPtaper2 :: Maybe (Tree Float)
    , _patternCHOPexportmethod :: Maybe (Tree Int)
    , _patternCHOPleft :: Maybe (Tree Int)
    , _patternCHOPtorange1 :: Maybe (Tree Float)
    , _patternCHOPfromrange2 :: Maybe (Tree Float)
    , _patternCHOPcombine :: Maybe (Tree Int)
    , _patternCHOPchannelname :: Maybe (Tree ByteString)
    , _patternCHOPscope :: Maybe (Tree ByteString)
    , _patternCHOPlength :: Maybe (Tree Int)
    , _patternCHOPseed :: Maybe (Tree Float)
    , _patternCHOPsrselect :: Maybe (Tree Int)
    , _patternCHOPoffset :: Maybe (Tree Float)
    , _patternCHOPnumcycles :: Maybe (Tree Float)
    , _patternCHOPamp :: Maybe (Tree Float)
    , _patternCHOPtaperdecay :: Maybe (Tree Float)
    , _patternCHOPright :: Maybe (Tree Int)
    , _patternCHOPrate :: Maybe (Tree Float)
    , _patternCHOPtorange2 :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudiorenderCHOP {
    _audiorenderCHOPexportmethod :: Maybe (Tree Int)
    , _audiorenderCHOPoutputformat :: Maybe (Tree Int)
    , _audiorenderCHOPactive :: Maybe (Tree Bool)
    , _audiorenderCHOPtimeslice :: Maybe (Tree Bool)
    , _audiorenderCHOPscope :: Maybe (Tree ByteString)
    , _audiorenderCHOPexporttable :: Maybe (Tree DAT)
    , _audiorenderCHOPmappingtable :: Maybe (Tree DAT)
    , _audiorenderCHOPsrselect :: Maybe (Tree Int)
    , _audiorenderCHOPattenuation :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | MidioutCHOP {
    _midioutCHOPautonoteoff :: Maybe (Tree Int)
    , _midioutCHOPcookalways :: Maybe (Tree Bool)
    , _midioutCHOPactive :: Maybe (Tree Bool)
    , _midioutCHOPexportmethod :: Maybe (Tree Int)
    , _midioutCHOPvolumeon :: Maybe (Tree Bool)
    , _midioutCHOPcontrolnorm :: Maybe (Tree Int)
    , _midioutCHOPonebased :: Maybe (Tree Bool)
    , _midioutCHOPfile :: Maybe (Tree ByteString)
    , _midioutCHOPnotename :: Maybe (Tree ByteString)
    , _midioutCHOPcontrolname :: Maybe (Tree ByteString)
    , _midioutCHOPcontrolformat :: Maybe (Tree Int)
    , _midioutCHOPnotenorm :: Maybe (Tree Int)
    , _midioutCHOPpressname :: Maybe (Tree ByteString)
    , _midioutCHOPexporttable :: Maybe (Tree DAT)
    , _midioutCHOPvolumeoff :: Maybe (Tree Bool)
    , _midioutCHOPid :: Maybe (Tree ByteString)
    , _midioutCHOPdestination :: Maybe (Tree Int)
    , _midioutCHOPbarticks :: Maybe (Tree Int)
    , _midioutCHOPpitchname :: Maybe (Tree ByteString)
    , _midioutCHOPscope :: Maybe (Tree ByteString)
    , _midioutCHOPbarname :: Maybe (Tree ByteString)
    , _midioutCHOPprogname :: Maybe (Tree ByteString)
    , _midioutCHOPdevice :: Maybe (Tree DAT)
    , _midioutCHOPreset :: Maybe (Tree Bool)
    , _midioutCHOPwritefile :: Maybe (Tree Bool)
    , _midioutCHOPsrselect :: Maybe (Tree Int)
    , _midioutCHOPaftername :: Maybe (Tree ByteString)
    , _midioutCHOPtimeslice :: Maybe (Tree Bool)
    , _midioutCHOPstartstop :: Maybe (Tree Bool)
    , _midioutCHOPprefix :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudiodeviceoutCHOP {
    _audiodeviceoutCHOPerrormissing :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPfrontleftcenter :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPtopfrontright :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPcookalways :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPactive :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPtopbackcenter :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPdriver :: Maybe (Tree Int)
    , _audiodeviceoutCHOPtopbackleft :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPpan :: Maybe (Tree Float)
    , _audiodeviceoutCHOPbufferlength :: Maybe (Tree Float)
    , _audiodeviceoutCHOPfrontright :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPfrontcenter :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPsideright :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPsideleft :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPfrontrightcenter :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPexporttable :: Maybe (Tree DAT)
    , _audiodeviceoutCHOPclampoutput :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPexportmethod :: Maybe (Tree Int)
    , _audiodeviceoutCHOPbackcenter :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPtopcenter :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPtopbackright :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPlowfrequency :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPtopfrontcenter :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPbackleft :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPscope :: Maybe (Tree ByteString)
    , _audiodeviceoutCHOPfrontleft :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPtopfrontleft :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPdevice :: Maybe (Tree ByteString)
    , _audiodeviceoutCHOPvolume :: Maybe (Tree Float)
    , _audiodeviceoutCHOPsrselect :: Maybe (Tree Int)
    , _audiodeviceoutCHOPoutputs :: Maybe (Tree ByteString)
    , _audiodeviceoutCHOPtimeslice :: Maybe (Tree Bool)
    , _audiodeviceoutCHOPbackright :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SpringCHOP {
    _springCHOPexportmethod :: Maybe (Tree Int)
    , _springCHOPdampingk :: Maybe (Tree Float)
    , _springCHOPexporttable :: Maybe (Tree DAT)
    , _springCHOPinitspeed :: Maybe (Tree Float)
    , _springCHOPspringk :: Maybe (Tree Float)
    , _springCHOPscope :: Maybe (Tree ByteString)
    , _springCHOPsrselect :: Maybe (Tree Int)
    , _springCHOPcondfromchan :: Maybe (Tree Bool)
    , _springCHOPmass :: Maybe (Tree Float)
    , _springCHOPmethod :: Maybe (Tree Int)
    , _springCHOPinitpos :: Maybe (Tree Float)
    , _springCHOPtimeslice :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ParameterCHOP {
    _parameterCHOPexportmethod :: Maybe (Tree Int)
    , _parameterCHOPbuiltin :: Maybe (Tree Bool)
    , _parameterCHOPnameformat :: Maybe (Tree Int)
    , _parameterCHOPexporttable :: Maybe (Tree DAT)
    , _parameterCHOPcustom :: Maybe (Tree Bool)
    , _parameterCHOPscope :: Maybe (Tree ByteString)
    , _parameterCHOPrenamefrom :: Maybe (Tree ByteString)
    , _parameterCHOPrenameto :: Maybe (Tree ByteString)
    , _parameterCHOPsrselect :: Maybe (Tree Int)
    , _parameterCHOPtimeslice :: Maybe (Tree Bool)
    , _parameterCHOPparameters :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | InterpolateCHOP {
    _interpolateCHOPexportmethod :: Maybe (Tree Int)
    , _interpolateCHOPsrselect :: Maybe (Tree Int)
    , _interpolateCHOPoverlap :: Maybe (Tree Int)
    , _interpolateCHOPexporttable :: Maybe (Tree DAT)
    , _interpolateCHOPblendfunc :: Maybe (Tree Int)
    , _interpolateCHOPtimeslice :: Maybe (Tree Bool)
    , _interpolateCHOPscope :: Maybe (Tree ByteString)
    , _interpolateCHOPmatch :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | OscoutCHOP {
    _oscoutCHOPmaxsize :: Maybe (Tree Float)
    , _oscoutCHOPnumericformat :: Maybe (Tree Int)
    , _oscoutCHOPcookalways :: Maybe (Tree Bool)
    , _oscoutCHOPactive :: Maybe (Tree Bool)
    , _oscoutCHOPsendevents :: Maybe (Tree Bool)
    , _oscoutCHOPmaxsizeunit :: Maybe (Tree Int)
    , _oscoutCHOPprotocol :: Maybe (Tree Int)
    , _oscoutCHOPmaxbytes :: Maybe (Tree Int)
    , _oscoutCHOPscope :: Maybe (Tree ByteString)
    , _oscoutCHOPexporttable :: Maybe (Tree DAT)
    , _oscoutCHOPsrselect :: Maybe (Tree Int)
    , _oscoutCHOPexportmethod :: Maybe (Tree Int)
    , _oscoutCHOPformat :: Maybe (Tree Int)
    , _oscoutCHOPport :: Maybe (Tree Int)
    , _oscoutCHOPtimeslice :: Maybe (Tree Bool)
    , _oscoutCHOPnetaddress :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | GestureCHOP {
    _gestureCHOPinterp :: Maybe (Tree Bool)
    , _gestureCHOPresetpulse :: Maybe (Tree Bool)
    , _gestureCHOPblendunit :: Maybe (Tree Int)
    , _gestureCHOPresetcondition :: Maybe (Tree Int)
    , _gestureCHOPexporttable :: Maybe (Tree DAT)
    , _gestureCHOPspeedunit :: Maybe (Tree Int)
    , _gestureCHOPscope :: Maybe (Tree ByteString)
    , _gestureCHOPblend :: Maybe (Tree Float)
    , _gestureCHOPstep :: Maybe (Tree Bool)
    , _gestureCHOPnumbeats :: Maybe (Tree Int)
    , _gestureCHOPexportmethod :: Maybe (Tree Int)
    , _gestureCHOPplaymode :: Maybe (Tree Int)
    , _gestureCHOPfitmethod :: Maybe (Tree Bool)
    , _gestureCHOPsrselect :: Maybe (Tree Int)
    , _gestureCHOPstepreset :: Maybe (Tree Bool)
    , _gestureCHOPtimeslice :: Maybe (Tree Bool)
    , _gestureCHOPspeed :: Maybe (Tree Float)
    , _gestureCHOPreset :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ExtendCHOP {
    _extendCHOPdefval :: Maybe (Tree Float)
    , _extendCHOPexportmethod :: Maybe (Tree Int)
    , _extendCHOPleft :: Maybe (Tree Int)
    , _extendCHOPsrselect :: Maybe (Tree Int)
    , _extendCHOPright :: Maybe (Tree Int)
    , _extendCHOPtimeslice :: Maybe (Tree Bool)
    , _extendCHOPscope :: Maybe (Tree ByteString)
    , _extendCHOPexporttable :: Maybe (Tree DAT)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudioparaeqCHOP {
    _audioparaeqCHOPfrequencyhz3 :: Maybe (Tree Float)
    , _audioparaeqCHOPbandwidth1 :: Maybe (Tree Float)
    , _audioparaeqCHOPenableeq3 :: Maybe (Tree Bool)
    , _audioparaeqCHOPfrequencylog2 :: Maybe (Tree Float)
    , _audioparaeqCHOPfrequencyhz2 :: Maybe (Tree Float)
    , _audioparaeqCHOPenableeq2 :: Maybe (Tree Bool)
    , _audioparaeqCHOPenableeq1 :: Maybe (Tree Bool)
    , _audioparaeqCHOPexporttable :: Maybe (Tree DAT)
    , _audioparaeqCHOPexportmethod :: Maybe (Tree Int)
    , _audioparaeqCHOPboost3 :: Maybe (Tree Float)
    , _audioparaeqCHOPboost1 :: Maybe (Tree Float)
    , _audioparaeqCHOPbandwidth2 :: Maybe (Tree Float)
    , _audioparaeqCHOPscope :: Maybe (Tree ByteString)
    , _audioparaeqCHOPbandwidth3 :: Maybe (Tree Float)
    , _audioparaeqCHOPboost2 :: Maybe (Tree Float)
    , _audioparaeqCHOPunits :: Maybe (Tree Int)
    , _audioparaeqCHOPfrequencyhz1 :: Maybe (Tree Float)
    , _audioparaeqCHOPsrselect :: Maybe (Tree Int)
    , _audioparaeqCHOPfrequencylog1 :: Maybe (Tree Float)
    , _audioparaeqCHOPtimeslice :: Maybe (Tree Bool)
    , _audioparaeqCHOPdrywet :: Maybe (Tree Float)
    , _audioparaeqCHOPfrequencylog3 :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | JoystickCHOP {
    _joystickCHOPyaxis :: Maybe (Tree ByteString)
    , _joystickCHOPscope :: Maybe (Tree ByteString)
    , _joystickCHOPdefval :: Maybe (Tree Float)
    , _joystickCHOPaxisrange :: Maybe (Tree Int)
    , _joystickCHOPyrotinvert :: Maybe (Tree Bool)
    , _joystickCHOPxaxis :: Maybe (Tree ByteString)
    , _joystickCHOPexporttable :: Maybe (Tree DAT)
    , _joystickCHOPpovarrray :: Maybe (Tree ByteString)
    , _joystickCHOPslider0 :: Maybe (Tree ByteString)
    , _joystickCHOPexportmethod :: Maybe (Tree Int)
    , _joystickCHOPleft :: Maybe (Tree Int)
    , _joystickCHOPyrot :: Maybe (Tree ByteString)
    , _joystickCHOPtimeslice :: Maybe (Tree Bool)
    , _joystickCHOPrate :: Maybe (Tree Float)
    , _joystickCHOPbuttonarray :: Maybe (Tree ByteString)
    , _joystickCHOPxrot :: Maybe (Tree ByteString)
    , _joystickCHOPzaxis :: Maybe (Tree ByteString)
    , _joystickCHOPpovstatearray :: Maybe (Tree ByteString)
    , _joystickCHOPslider1 :: Maybe (Tree ByteString)
    , _joystickCHOPsrselect :: Maybe (Tree Int)
    , _joystickCHOPconnected :: Maybe (Tree ByteString)
    , _joystickCHOPaxisdeadzone :: Maybe (Tree Float)
    , _joystickCHOPzrot :: Maybe (Tree ByteString)
    , _joystickCHOPsource :: Maybe (Tree ByteString)
    , _joystickCHOPright :: Maybe (Tree Int)
    , _joystickCHOPyaxisinvert :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | FilterCHOP {
    _filterCHOPresetpulse :: Maybe (Tree Bool)
    , _filterCHOPtype :: Maybe (Tree Int)
    , _filterCHOPeffect :: Maybe (Tree Float)
    , _filterCHOPexporttable :: Maybe (Tree DAT)
    , _filterCHOPspike :: Maybe (Tree Float)
    , _filterCHOPscope :: Maybe (Tree ByteString)
    , _filterCHOPwidth :: Maybe (Tree Float)
    , _filterCHOPwidthunit :: Maybe (Tree Int)
    , _filterCHOPsrselect :: Maybe (Tree Int)
    , _filterCHOPexportmethod :: Maybe (Tree Int)
    , _filterCHOPramptolerance :: Maybe (Tree Float)
    , _filterCHOPpasses :: Maybe (Tree Int)
    , _filterCHOPramprate :: Maybe (Tree Float)
    , _filterCHOPfilterpersample :: Maybe (Tree Bool)
    , _filterCHOPtimeslice :: Maybe (Tree Bool)
    , _filterCHOPreset :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudiofileinCHOP {
    _audiofileinCHOPfile :: Maybe (Tree ByteString)
    , _audiofileinCHOPprereadlength :: Maybe (Tree Float)
    , _audiofileinCHOPrepeat :: Maybe (Tree Int)
    , _audiofileinCHOPcuepulse :: Maybe (Tree Bool)
    , _audiofileinCHOPcuepoint :: Maybe (Tree Float)
    , _audiofileinCHOPtrim :: Maybe (Tree Bool)
    , _audiofileinCHOPprereadlengthunit :: Maybe (Tree Int)
    , _audiofileinCHOPtrimendunit :: Maybe (Tree Int)
    , _audiofileinCHOPtrimstartunit :: Maybe (Tree Int)
    , _audiofileinCHOPvolume :: Maybe (Tree Float)
    , _audiofileinCHOPexporttable :: Maybe (Tree DAT)
    , _audiofileinCHOPspeed :: Maybe (Tree Float)
    , _audiofileinCHOPopentimeout :: Maybe (Tree Float)
    , _audiofileinCHOPindex :: Maybe (Tree Float)
    , _audiofileinCHOPexportmethod :: Maybe (Tree Int)
    , _audiofileinCHOPreloadpulse :: Maybe (Tree Bool)
    , _audiofileinCHOPindexunit :: Maybe (Tree Int)
    , _audiofileinCHOPscope :: Maybe (Tree ByteString)
    , _audiofileinCHOPtrimend :: Maybe (Tree Float)
    , _audiofileinCHOPplay :: Maybe (Tree Bool)
    , _audiofileinCHOPsrselect :: Maybe (Tree Int)
    , _audiofileinCHOPtrimstart :: Maybe (Tree Float)
    , _audiofileinCHOPplaymode :: Maybe (Tree Int)
    , _audiofileinCHOPcuepointunit :: Maybe (Tree Int)
    , _audiofileinCHOPtimeslice :: Maybe (Tree Bool)
    , _audiofileinCHOPmono :: Maybe (Tree Bool)
    , _audiofileinCHOPcue :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AngleCHOP {
    _angleCHOPexportmethod :: Maybe (Tree Int)
    , _angleCHOPinorder :: Maybe (Tree Int)
    , _angleCHOPsrselect :: Maybe (Tree Int)
    , _angleCHOPinunit :: Maybe (Tree Int)
    , _angleCHOPoutorder :: Maybe (Tree Int)
    , _angleCHOPoutunit :: Maybe (Tree Int)
    , _angleCHOPtimeslice :: Maybe (Tree Bool)
    , _angleCHOPscope :: Maybe (Tree ByteString)
    , _angleCHOPexporttable :: Maybe (Tree DAT)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | DmxoutCHOP {
    _dmxoutCHOPformat :: Maybe (Tree Int)
    , _dmxoutCHOPactive :: Maybe (Tree Bool)
    , _dmxoutCHOPsubnet :: Maybe (Tree Int)
    , _dmxoutCHOPexportmethod :: Maybe (Tree Int)
    , _dmxoutCHOPserialport :: Maybe (Tree Bool)
    , _dmxoutCHOPscope :: Maybe (Tree ByteString)
    , _dmxoutCHOPcustomport :: Maybe (Tree Bool)
    , _dmxoutCHOPlocaladdress :: Maybe (Tree ByteString)
    , _dmxoutCHOPpriority :: Maybe (Tree Int)
    , _dmxoutCHOPexporttable :: Maybe (Tree DAT)
    , _dmxoutCHOPsource :: Maybe (Tree ByteString)
    , _dmxoutCHOPinterface :: Maybe (Tree Bool)
    , _dmxoutCHOPcid :: Maybe (Tree ByteString)
    , _dmxoutCHOPrate :: Maybe (Tree Int)
    , _dmxoutCHOPlocalport :: Maybe (Tree Int)
    , _dmxoutCHOPnet :: Maybe (Tree Int)
    , _dmxoutCHOPnetport :: Maybe (Tree Int)
    , _dmxoutCHOPuniverse :: Maybe (Tree Int)
    , _dmxoutCHOPsendartsync :: Maybe (Tree Bool)
    , _dmxoutCHOPdevice :: Maybe (Tree Bool)
    , _dmxoutCHOPmulticast :: Maybe (Tree Bool)
    , _dmxoutCHOPsrselect :: Maybe (Tree Int)
    , _dmxoutCHOProutingtable :: Maybe (Tree DAT)
    , _dmxoutCHOPtimeslice :: Maybe (Tree Bool)
    , _dmxoutCHOPnetaddress :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | TransformCHOP {
    _transformCHOPoutrord :: Maybe (Tree Int)
    , _transformCHOPusehint :: Maybe (Tree Bool)
    , _transformCHOPcustinputorders :: Maybe (Tree Bool)
    , _transformCHOPinvertoutput :: Maybe (Tree Bool)
    , _transformCHOPs :: Vec3
    , _transformCHOPinvertinput :: Maybe (Tree Bool)
    , _transformCHOPinvert :: Maybe (Tree Bool)
    , _transformCHOPxord :: Maybe (Tree Int)
    , _transformCHOPr :: Vec3
    , _transformCHOPexportmethod :: Maybe (Tree Int)
    , _transformCHOPout :: Maybe (Tree Int)
    , _transformCHOPmatop :: Maybe (Tree Int)
    , _transformCHOPcustoutputorders :: Maybe (Tree Bool)
    , _transformCHOPp :: Vec3
    , _transformCHOPexporttable :: Maybe (Tree DAT)
    , _transformCHOPscope :: Maybe (Tree ByteString)
    , _transformCHOPinrord :: Maybe (Tree Int)
    , _transformCHOPoutxord :: Maybe (Tree Int)
    , _transformCHOPsrselect :: Maybe (Tree Int)
    , _transformCHOPrord :: Maybe (Tree Int)
    , _transformCHOPt :: Vec3
    , _transformCHOPtimeslice :: Maybe (Tree Bool)
    , _transformCHOPhint :: Vec3
    , _transformCHOPinxord :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | OutCHOP {
    _outCHOPexportmethod :: Maybe (Tree Int)
    , _outCHOPlabel :: Maybe (Tree ByteString)
    , _outCHOPsrselect :: Maybe (Tree Int)
    , _outCHOPexporttable :: Maybe (Tree DAT)
    , _outCHOPtimeslice :: Maybe (Tree Bool)
    , _outCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | TimesliceCHOP {
    _timesliceCHOPexportmethod :: Maybe (Tree Int)
    , _timesliceCHOPsrselect :: Maybe (Tree Int)
    , _timesliceCHOPexporttable :: Maybe (Tree DAT)
    , _timesliceCHOPmethod :: Maybe (Tree Int)
    , _timesliceCHOPquatrot :: Maybe (Tree Bool)
    , _timesliceCHOPtimeslice :: Maybe (Tree Bool)
    , _timesliceCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SpliceCHOP {
    _spliceCHOPtrimmethod :: Maybe (Tree Int)
    , _spliceCHOPstart :: Maybe (Tree Float)
    , _spliceCHOPtimeslice :: Maybe (Tree Bool)
    , _spliceCHOPinsertlength :: Maybe (Tree Float)
    , _spliceCHOPexportmethod :: Maybe (Tree Int)
    , _spliceCHOPinsertunits :: Maybe (Tree Int)
    , _spliceCHOPinsertinterp :: Maybe (Tree Int)
    , _spliceCHOPscope :: Maybe (Tree ByteString)
    , _spliceCHOPexporttable :: Maybe (Tree DAT)
    , _spliceCHOPmatch :: Maybe (Tree Int)
    , _spliceCHOPoutputtrimmed :: Maybe (Tree Bool)
    , _spliceCHOPinsertmethod :: Maybe (Tree Int)
    , _spliceCHOPsrselect :: Maybe (Tree Int)
    , _spliceCHOPdirection :: Maybe (Tree Int)
    , _spliceCHOPtrimlength :: Maybe (Tree Float)
    , _spliceCHOPunits :: Maybe (Tree Int)
    , _spliceCHOPunmatchedinterp :: Maybe (Tree Int)
    , _spliceCHOPtrimlengthunits :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SpeedCHOP {
    _speedCHOPresetvalue :: Maybe (Tree Float)
    , _speedCHOPresetpulse :: Maybe (Tree Bool)
    , _speedCHOPlimittype :: Maybe (Tree Int)
    , _speedCHOPresetcondition :: Maybe (Tree Int)
    , _speedCHOPexporttable :: Maybe (Tree DAT)
    , _speedCHOPexportmethod :: Maybe (Tree Int)
    , _speedCHOPscope :: Maybe (Tree ByteString)
    , _speedCHOPresetonstart :: Maybe (Tree Bool)
    , _speedCHOPconstant2 :: Maybe (Tree Float)
    , _speedCHOPsrselect :: Maybe (Tree Int)
    , _speedCHOPmax :: Maybe (Tree Float)
    , _speedCHOPconstant3 :: Maybe (Tree Float)
    , _speedCHOPmin :: Maybe (Tree Float)
    , _speedCHOPtimeslice :: Maybe (Tree Bool)
    , _speedCHOPorder :: Maybe (Tree Int)
    , _speedCHOPreset :: Maybe (Tree Bool)
    , _speedCHOPconstant1 :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | FileoutCHOP {
    _fileoutCHOPexportmethod :: Maybe (Tree Int)
    , _fileoutCHOPfile :: Maybe (Tree ByteString)
    , _fileoutCHOPsrselect :: Maybe (Tree Int)
    , _fileoutCHOPactive :: Maybe (Tree Bool)
    , _fileoutCHOPexporttable :: Maybe (Tree DAT)
    , _fileoutCHOPinterval :: Maybe (Tree Int)
    , _fileoutCHOPtimeslice :: Maybe (Tree Bool)
    , _fileoutCHOPscope :: Maybe (Tree ByteString)
    , _fileoutCHOPwrite :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudioplayCHOP {
    _audioplayCHOPerrormissing :: Maybe (Tree Bool)
    , _audioplayCHOPmode :: Maybe (Tree Int)
    , _audioplayCHOPcookalways :: Maybe (Tree Bool)
    , _audioplayCHOPfile :: Maybe (Tree ByteString)
    , _audioplayCHOPfrontleftcenter :: Maybe (Tree Int)
    , _audioplayCHOPstereo :: Maybe (Tree Bool)
    , _audioplayCHOPtopfrontright :: Maybe (Tree Int)
    , _audioplayCHOPtopbackleft :: Maybe (Tree Int)
    , _audioplayCHOPfrontright :: Maybe (Tree Int)
    , _audioplayCHOPdatlist :: Maybe (Tree DAT)
    , _audioplayCHOPfrontcenter :: Maybe (Tree Int)
    , _audioplayCHOPsideright :: Maybe (Tree Int)
    , _audioplayCHOPsideleft :: Maybe (Tree Int)
    , _audioplayCHOPfrontrightcenter :: Maybe (Tree Int)
    , _audioplayCHOPexporttable :: Maybe (Tree DAT)
    , _audioplayCHOPexportmethod :: Maybe (Tree Int)
    , _audioplayCHOPbackcenter :: Maybe (Tree Int)
    , _audioplayCHOPtopcenter :: Maybe (Tree Int)
    , _audioplayCHOPtopbackright :: Maybe (Tree Int)
    , _audioplayCHOPlowfrequency :: Maybe (Tree Int)
    , _audioplayCHOPspecifydevice :: Maybe (Tree Bool)
    , _audioplayCHOPtopfrontcenter :: Maybe (Tree Int)
    , _audioplayCHOPbackleft :: Maybe (Tree Int)
    , _audioplayCHOPscope :: Maybe (Tree ByteString)
    , _audioplayCHOPfrontleft :: Maybe (Tree Int)
    , _audioplayCHOPtopbackcenter :: Maybe (Tree Int)
    , _audioplayCHOPtopfrontleft :: Maybe (Tree Int)
    , _audioplayCHOPdevice :: Maybe (Tree ByteString)
    , _audioplayCHOPvolume :: Maybe (Tree Float)
    , _audioplayCHOPsrselect :: Maybe (Tree Int)
    , _audioplayCHOPtrigger :: Maybe (Tree Bool)
    , _audioplayCHOPoutputs :: Maybe (Tree ByteString)
    , _audioplayCHOPtimeslice :: Maybe (Tree Bool)
    , _audioplayCHOPbackright :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ClockCHOP {
    _clockCHOPyday :: Maybe (Tree ByteString)
    , _clockCHOPlongitude2 :: Maybe (Tree Float)
    , _clockCHOPoutput :: Maybe (Tree Int)
    , _clockCHOPlongitude1 :: Maybe (Tree Float)
    , _clockCHOPsunphase :: Maybe (Tree ByteString)
    , _clockCHOPwday :: Maybe (Tree ByteString)
    , _clockCHOPmin :: Maybe (Tree ByteString)
    , _clockCHOPweek :: Maybe (Tree ByteString)
    , _clockCHOPsunrise :: Maybe (Tree ByteString)
    , _clockCHOPsunset :: Maybe (Tree ByteString)
    , _clockCHOPhouradjust :: Maybe (Tree Float)
    , _clockCHOPeastwest :: Maybe (Tree Int)
    , _clockCHOPhourformat :: Maybe (Tree Int)
    , _clockCHOPexporttable :: Maybe (Tree DAT)
    , _clockCHOPsec :: Maybe (Tree ByteString)
    , _clockCHOPhour :: Maybe (Tree ByteString)
    , _clockCHOPexportmethod :: Maybe (Tree Int)
    , _clockCHOPdeclination :: Maybe (Tree ByteString)
    , _clockCHOPyear :: Maybe (Tree ByteString)
    , _clockCHOPtimeslice :: Maybe (Tree Bool)
    , _clockCHOPlatitude1 :: Maybe (Tree Float)
    , _clockCHOPscope :: Maybe (Tree ByteString)
    , _clockCHOPmonth :: Maybe (Tree ByteString)
    , _clockCHOPnorthsouth :: Maybe (Tree Int)
    , _clockCHOPstartref :: Maybe (Tree Int)
    , _clockCHOPsrselect :: Maybe (Tree Int)
    , _clockCHOPlatitude2 :: Maybe (Tree Float)
    , _clockCHOPday :: Maybe (Tree ByteString)
    , _clockCHOPmsec :: Maybe (Tree ByteString)
    , _clockCHOPampm :: Maybe (Tree ByteString)
    , _clockCHOPmoonphase :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ScurveCHOP {
    _scurveCHOPbias :: Maybe (Tree Float)
    , _scurveCHOPappend :: Maybe (Tree Int)
    , _scurveCHOPprepend :: Maybe (Tree Int)
    , _scurveCHOPdefval :: Maybe (Tree Float)
    , _scurveCHOPfromrange1 :: Maybe (Tree Float)
    , _scurveCHOPlinearize :: Maybe (Tree Float)
    , _scurveCHOPexporttable :: Maybe (Tree DAT)
    , _scurveCHOPlength :: Maybe (Tree Int)
    , _scurveCHOPexportmethod :: Maybe (Tree Int)
    , _scurveCHOPleft :: Maybe (Tree Int)
    , _scurveCHOPtype :: Maybe (Tree Int)
    , _scurveCHOPtorange1 :: Maybe (Tree Float)
    , _scurveCHOPfromrange2 :: Maybe (Tree Float)
    , _scurveCHOPright :: Maybe (Tree Int)
    , _scurveCHOPchannelname :: Maybe (Tree ByteString)
    , _scurveCHOPscope :: Maybe (Tree ByteString)
    , _scurveCHOPsrselect :: Maybe (Tree Int)
    , _scurveCHOPsteepness :: Maybe (Tree Float)
    , _scurveCHOPtimeslice :: Maybe (Tree Bool)
    , _scurveCHOPrate :: Maybe (Tree Float)
    , _scurveCHOPtorange2 :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | HandleCHOP {
    _handleCHOPexportmethod :: Maybe (Tree Int)
    , _handleCHOPpreroll :: Maybe (Tree Int)
    , _handleCHOPexporttable :: Maybe (Tree DAT)
    , _handleCHOPiterations :: Maybe (Tree Int)
    , _handleCHOPscope :: Maybe (Tree ByteString)
    , _handleCHOPinit :: Maybe (Tree Float)
    , _handleCHOPsrselect :: Maybe (Tree Int)
    , _handleCHOPtimeslice :: Maybe (Tree Bool)
    , _handleCHOPdelta :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ShiftCHOP {
    _shiftCHOPstart :: Maybe (Tree Float)
    , _shiftCHOPend :: Maybe (Tree Float)
    , _shiftCHOPexportmethod :: Maybe (Tree Int)
    , _shiftCHOPstartunit :: Maybe (Tree Int)
    , _shiftCHOPreference :: Maybe (Tree Int)
    , _shiftCHOPscope :: Maybe (Tree ByteString)
    , _shiftCHOPexporttable :: Maybe (Tree DAT)
    , _shiftCHOPtimeslice :: Maybe (Tree Bool)
    , _shiftCHOPsrselect :: Maybe (Tree Int)
    , _shiftCHOPrelative :: Maybe (Tree Int)
    , _shiftCHOPscrollunit :: Maybe (Tree Int)
    , _shiftCHOPendunit :: Maybe (Tree Int)
    , _shiftCHOPscroll :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ExpressionCHOP {
    _expressionCHOPexpr4 :: Maybe (Tree Float)
    , _expressionCHOPexportmethod :: Maybe (Tree Int)
    , _expressionCHOPexpr2 :: Maybe (Tree Float)
    , _expressionCHOPchanperexpr :: Maybe (Tree Int)
    , _expressionCHOPexpr3 :: Maybe (Tree Float)
    , _expressionCHOPnumexpr :: Maybe (Tree Int)
    , _expressionCHOPexpr1 :: Maybe (Tree Float)
    , _expressionCHOPscope :: Maybe (Tree ByteString)
    , _expressionCHOPexporttable :: Maybe (Tree DAT)
    , _expressionCHOPexpr5 :: Maybe (Tree Float)
    , _expressionCHOPsrselect :: Maybe (Tree Int)
    , _expressionCHOPlimitexpr :: Maybe (Tree Bool)
    , _expressionCHOPlimitnum :: Maybe (Tree Int)
    , _expressionCHOPtimeslice :: Maybe (Tree Bool)
    , _expressionCHOPexpr0 :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | MergeCHOP {
    _mergeCHOPexportmethod :: Maybe (Tree Int)
    , _mergeCHOPsrselect :: Maybe (Tree Int)
    , _mergeCHOPduplicate :: Maybe (Tree Int)
    , _mergeCHOPalign :: Maybe (Tree Int)
    , _mergeCHOPexporttable :: Maybe (Tree DAT)
    , _mergeCHOPtimeslice :: Maybe (Tree Bool)
    , _mergeCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | CopyCHOP {
    _copyCHOPoutput :: Maybe (Tree Int)
    , _copyCHOPparam4 :: Maybe (Tree ByteString)
    , _copyCHOPval1 :: Maybe (Tree Float)
    , _copyCHOPparam8 :: Maybe (Tree ByteString)
    , _copyCHOPval6 :: Maybe (Tree Float)
    , _copyCHOPparam10 :: Maybe (Tree ByteString)
    , _copyCHOPscope :: Maybe (Tree ByteString)
    , _copyCHOPremainder :: Maybe (Tree Int)
    , _copyCHOPkeep :: Maybe (Tree Bool)
    , _copyCHOPparam2 :: Maybe (Tree ByteString)
    , _copyCHOPval9 :: Maybe (Tree Float)
    , _copyCHOPval3 :: Maybe (Tree Float)
    , _copyCHOPparam1 :: Maybe (Tree ByteString)
    , _copyCHOPparam3 :: Maybe (Tree ByteString)
    , _copyCHOPexporttable :: Maybe (Tree DAT)
    , _copyCHOPval5 :: Maybe (Tree Float)
    , _copyCHOPexportmethod :: Maybe (Tree Int)
    , _copyCHOPparam5 :: Maybe (Tree ByteString)
    , _copyCHOPcook :: Maybe (Tree Bool)
    , _copyCHOPparam6 :: Maybe (Tree ByteString)
    , _copyCHOPval10 :: Maybe (Tree Float)
    , _copyCHOPthreshold :: Maybe (Tree Float)
    , _copyCHOPparam9 :: Maybe (Tree ByteString)
    , _copyCHOPval7 :: Maybe (Tree Float)
    , _copyCHOPval8 :: Maybe (Tree Float)
    , _copyCHOPparam7 :: Maybe (Tree ByteString)
    , _copyCHOPval4 :: Maybe (Tree Float)
    , _copyCHOPval2 :: Maybe (Tree Float)
    , _copyCHOPsrselect :: Maybe (Tree Int)
    , _copyCHOPmethod :: Maybe (Tree Int)
    , _copyCHOPtimeslice :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | KinectCHOP {
    _kinectCHOPprediction :: Maybe (Tree Float)
    , _kinectCHOPactive :: Maybe (Tree Bool)
    , _kinectCHOPsmoothing :: Maybe (Tree Float)
    , _kinectCHOPcolorspace :: Maybe (Tree Bool)
    , _kinectCHOPjointsmoothing :: Maybe (Tree Bool)
    , _kinectCHOPflipfaceu :: Maybe (Tree Bool)
    , _kinectCHOPworldspace :: Maybe (Tree Bool)
    , _kinectCHOProtationsmoothing :: Maybe (Tree Float)
    , _kinectCHOPscope :: Maybe (Tree ByteString)
    , _kinectCHOPcorrection :: Maybe (Tree Float)
    , _kinectCHOPskeleton :: Maybe (Tree Int)
    , _kinectCHOPmaxplayers :: Maybe (Tree Int)
    , _kinectCHOPinteractions :: Maybe (Tree Bool)
    , _kinectCHOPexporttable :: Maybe (Tree DAT)
    , _kinectCHOPfacetracking :: Maybe (Tree Bool)
    , _kinectCHOPsensor :: Maybe (Tree ByteString)
    , _kinectCHOPexportmethod :: Maybe (Tree Int)
    , _kinectCHOPdepthspace :: Maybe (Tree Bool)
    , _kinectCHOPunrollbones :: Maybe (Tree Bool)
    , _kinectCHOPjitterrad :: Maybe (Tree Float)
    , _kinectCHOPhwversion :: Maybe (Tree Int)
    , _kinectCHOPrelbonerotations :: Maybe (Tree Bool)
    , _kinectCHOPmaxdevrad :: Maybe (Tree Float)
    , _kinectCHOPabsbonerotations :: Maybe (Tree Bool)
    , _kinectCHOPsrselect :: Maybe (Tree Int)
    , _kinectCHOPflipskelu :: Maybe (Tree Bool)
    , _kinectCHOPbonelengths :: Maybe (Tree Bool)
    , _kinectCHOPstatuschans :: Maybe (Tree Bool)
    , _kinectCHOPtimeslice :: Maybe (Tree Bool)
    , _kinectCHOPneardepthmode :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | InCHOP {
    _inCHOPexportmethod :: Maybe (Tree Int)
    , _inCHOPspecifynum :: Maybe (Tree Bool)
    , _inCHOPlabel :: Maybe (Tree ByteString)
    , _inCHOPsrselect :: Maybe (Tree Int)
    , _inCHOPnumchannels :: Maybe (Tree Int)
    , _inCHOPexporttable :: Maybe (Tree DAT)
    , _inCHOPtimeslice :: Maybe (Tree Bool)
    , _inCHOPscope :: Maybe (Tree ByteString)
    , _inCHOPchannames :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | TimerCHOP {
    _timerCHOPoutdonepulse :: Maybe (Tree Bool)
    , _timerCHOPouttimerpulse :: Maybe (Tree Bool)
    , _timerCHOPoutcyclepulse :: Maybe (Tree Bool)
    , _timerCHOPoutdelayfraction :: Maybe (Tree Bool)
    , _timerCHOPcueunits :: Maybe (Tree Int)
    , _timerCHOPoutfraction :: Maybe (Tree Bool)
    , _timerCHOPoutdone :: Maybe (Tree Bool)
    , _timerCHOPoutsegplusfraction :: Maybe (Tree Bool)
    , _timerCHOPcycle :: Maybe (Tree Bool)
    , _timerCHOPcyclelimit :: Maybe (Tree Bool)
    , _timerCHOPoutsegpulse :: Maybe (Tree Bool)
    , _timerCHOPinfocolumns :: Maybe (Tree ByteString)
    , _timerCHOPoutready :: Maybe (Tree Bool)
    , _timerCHOPoutseg :: Maybe (Tree Bool)
    , _timerCHOPdelay :: Maybe (Tree Float)
    , _timerCHOPcycleendalert :: Maybe (Tree Float)
    , _timerCHOPdelayunits :: Maybe (Tree Int)
    , _timerCHOPouttimeractive :: Maybe (Tree Bool)
    , _timerCHOPinitialize :: Maybe (Tree Bool)
    , _timerCHOPoutcycle :: Maybe (Tree Bool)
    , _timerCHOPoutrunningcount :: Maybe (Tree Int)
    , _timerCHOPrate :: Maybe (Tree Float)
    , _timerCHOPchannelcolumns :: Maybe (Tree ByteString)
    , _timerCHOPlengthunits :: Maybe (Tree Int)
    , _timerCHOPlength :: Maybe (Tree Float)
    , _timerCHOPplay :: Maybe (Tree Bool)
    , _timerCHOPsrselect :: Maybe (Tree Int)
    , _timerCHOPoutinit :: Maybe (Tree Bool)
    , _timerCHOPnotifyunits :: Maybe (Tree Int)
    , _timerCHOPsegunits :: Maybe (Tree Int)
    , _timerCHOPtimeslice :: Maybe (Tree Bool)
    , _timerCHOPcuepulse :: Maybe (Tree Bool)
    , _timerCHOPondone :: Maybe (Tree Int)
    , _timerCHOPspeed :: Maybe (Tree Float)
    , _timerCHOPactive :: Maybe (Tree Bool)
    , _timerCHOPexitendcycle :: Maybe (Tree Bool)
    , _timerCHOPcuepoint :: Maybe (Tree Float)
    , _timerCHOPinterpolation :: Maybe (Tree Int)
    , _timerCHOPgotonextseg :: Maybe (Tree Bool)
    , _timerCHOPscope :: Maybe (Tree ByteString)
    , _timerCHOPstart :: Maybe (Tree Bool)
    , _timerCHOPoutrunning :: Maybe (Tree Bool)
    , _timerCHOPoutcycleplusfraction :: Maybe (Tree Bool)
    , _timerCHOPoutcumulativecount :: Maybe (Tree Int)
    , _timerCHOPsegdat :: Maybe (Tree DAT)
    , _timerCHOPgotoprevseg :: Maybe (Tree Bool)
    , _timerCHOPouttimercount :: Maybe (Tree Int)
    , _timerCHOPdatoutput :: Maybe (Tree Bool)
    , _timerCHOPexportmethod :: Maybe (Tree Int)
    , _timerCHOPgotoendcycle :: Maybe (Tree Bool)
    , _timerCHOPexporttable :: Maybe (Tree DAT)
    , _timerCHOPoutreadypulse :: Maybe (Tree Bool)
    , _timerCHOPmaxcycles :: Maybe (Tree Int)
    , _timerCHOPsegmethod :: Maybe (Tree Int)
    , _timerCHOPgotodone :: Maybe (Tree Bool)
    , _timerCHOPplaymode :: Maybe (Tree Int)
    , _timerCHOPcallbacks :: Maybe (Tree DAT)
    , _timerCHOPoutdelaycount :: Maybe (Tree Int)
    , _timerCHOPcue :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SharedmeminCHOP {
    _sharedmeminCHOPexportmethod :: Maybe (Tree Int)
    , _sharedmeminCHOPsrselect :: Maybe (Tree Int)
    , _sharedmeminCHOPactive :: Maybe (Tree Bool)
    , _sharedmeminCHOPmemtype :: Maybe (Tree Int)
    , _sharedmeminCHOPexporttable :: Maybe (Tree DAT)
    , _sharedmeminCHOPtimeslice :: Maybe (Tree Bool)
    , _sharedmeminCHOPscope :: Maybe (Tree ByteString)
    , _sharedmeminCHOPname :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | KeyframeCHOP {
    _keyframeCHOPdefval :: Maybe (Tree Float)
    , _keyframeCHOPanimation :: Maybe (Tree COMP)
    , _keyframeCHOPleft :: Maybe (Tree Int)
    , _keyframeCHOPsrselect :: Maybe (Tree Int)
    , _keyframeCHOPexportmethod :: Maybe (Tree Int)
    , _keyframeCHOPtimeslice :: Maybe (Tree Bool)
    , _keyframeCHOPrate :: Maybe (Tree Float)
    , _keyframeCHOPright :: Maybe (Tree Int)
    , _keyframeCHOPscope :: Maybe (Tree ByteString)
    , _keyframeCHOPexporttable :: Maybe (Tree DAT)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | MidiinCHOP {
    _midiinCHOPexmsg9 :: Maybe (Tree ByteString)
    , _midiinCHOPexname2 :: Maybe (Tree ByteString)
    , _midiinCHOPexmsg12 :: Maybe (Tree ByteString)
    , _midiinCHOPnotenorm :: Maybe (Tree Int)
    , _midiinCHOPexportmethod :: Maybe (Tree Int)
    , _midiinCHOPexname4 :: Maybe (Tree ByteString)
    , _midiinCHOPactive :: Maybe (Tree Bool)
    , _midiinCHOPexmsg10 :: Maybe (Tree ByteString)
    , _midiinCHOPonebased :: Maybe (Tree Bool)
    , _midiinCHOPexname1 :: Maybe (Tree ByteString)
    , _midiinCHOPscope :: Maybe (Tree ByteString)
    , _midiinCHOPfile :: Maybe (Tree ByteString)
    , _midiinCHOPprefix :: Maybe (Tree ByteString)
    , _midiinCHOPformat :: Maybe (Tree Int)
    , _midiinCHOPpressname :: Maybe (Tree ByteString)
    , _midiinCHOPexporttable :: Maybe (Tree DAT)
    , _midiinCHOPexmsg8 :: Maybe (Tree ByteString)
    , _midiinCHOPsimplified :: Maybe (Tree Bool)
    , _midiinCHOPrecordtype :: Maybe (Tree Int)
    , _midiinCHOPexmsg4 :: Maybe (Tree ByteString)
    , _midiinCHOPexmsg5 :: Maybe (Tree ByteString)
    , _midiinCHOPleft :: Maybe (Tree Int)
    , _midiinCHOPexname10 :: Maybe (Tree ByteString)
    , _midiinCHOPendunit :: Maybe (Tree Int)
    , _midiinCHOPexmsg11 :: Maybe (Tree ByteString)
    , _midiinCHOPexname5 :: Maybe (Tree ByteString)
    , _midiinCHOPright :: Maybe (Tree Int)
    , _midiinCHOPsongpos :: Maybe (Tree ByteString)
    , _midiinCHOPtimeslice :: Maybe (Tree Bool)
    , _midiinCHOPbarname :: Maybe (Tree ByteString)
    , _midiinCHOPexmsg2 :: Maybe (Tree ByteString)
    , _midiinCHOPsrselect :: Maybe (Tree Int)
    , _midiinCHOPnotemeth :: Maybe (Tree Int)
    , _midiinCHOPexname12 :: Maybe (Tree ByteString)
    , _midiinCHOPexmsg1 :: Maybe (Tree ByteString)
    , _midiinCHOPexname11 :: Maybe (Tree ByteString)
    , _midiinCHOPvelname :: Maybe (Tree ByteString)
    , _midiinCHOPrate :: Maybe (Tree Float)
    , _midiinCHOPexmsg7 :: Maybe (Tree ByteString)
    , _midiinCHOPresetpulse :: Maybe (Tree Bool)
    , _midiinCHOPend :: Maybe (Tree Float)
    , _midiinCHOPexname3 :: Maybe (Tree ByteString)
    , _midiinCHOPtimerperiod :: Maybe (Tree ByteString)
    , _midiinCHOPpulsename :: Maybe (Tree ByteString)
    , _midiinCHOPexmsg3 :: Maybe (Tree ByteString)
    , _midiinCHOPstart :: Maybe (Tree Float)
    , _midiinCHOPexname9 :: Maybe (Tree ByteString)
    , _midiinCHOPnotescope :: Maybe (Tree ByteString)
    , _midiinCHOPcontroltype :: Maybe (Tree Int)
    , _midiinCHOPdefval :: Maybe (Tree Float)
    , _midiinCHOPexmsg6 :: Maybe (Tree ByteString)
    , _midiinCHOPnotename :: Maybe (Tree ByteString)
    , _midiinCHOPcontrolname :: Maybe (Tree ByteString)
    , _midiinCHOPticks :: Maybe (Tree Int)
    , _midiinCHOPbarmsg :: Maybe (Tree ByteString)
    , _midiinCHOPstartunit :: Maybe (Tree Int)
    , _midiinCHOPvelocity :: Maybe (Tree Int)
    , _midiinCHOPsource :: Maybe (Tree Int)
    , _midiinCHOPid :: Maybe (Tree ByteString)
    , _midiinCHOPexname8 :: Maybe (Tree ByteString)
    , _midiinCHOPbarperiod :: Maybe (Tree ByteString)
    , _midiinCHOPpitchname :: Maybe (Tree ByteString)
    , _midiinCHOPexname7 :: Maybe (Tree ByteString)
    , _midiinCHOPentire :: Maybe (Tree Bool)
    , _midiinCHOPbarstart :: Maybe (Tree ByteString)
    , _midiinCHOPcontrolind :: Maybe (Tree ByteString)
    , _midiinCHOPnorm :: Maybe (Tree Int)
    , _midiinCHOPrampname :: Maybe (Tree ByteString)
    , _midiinCHOPprogname :: Maybe (Tree ByteString)
    , _midiinCHOPchannel :: Maybe (Tree ByteString)
    , _midiinCHOPdevice :: Maybe (Tree DAT)
    , _midiinCHOPrecord :: Maybe (Tree Bool)
    , _midiinCHOPaftername :: Maybe (Tree ByteString)
    , _midiinCHOPtimerstart :: Maybe (Tree ByteString)
    , _midiinCHOPunwrap :: Maybe (Tree Bool)
    , _midiinCHOPreset :: Maybe (Tree Bool)
    , _midiinCHOPexname6 :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | DelayCHOP {
    _delayCHOPdelay :: Maybe (Tree Float)
    , _delayCHOPexportmethod :: Maybe (Tree Int)
    , _delayCHOPdelayunit :: Maybe (Tree Int)
    , _delayCHOPexporttable :: Maybe (Tree DAT)
    , _delayCHOPsrselect :: Maybe (Tree Int)
    , _delayCHOPmaxdelay :: Maybe (Tree Float)
    , _delayCHOPtimeslice :: Maybe (Tree Bool)
    , _delayCHOPscope :: Maybe (Tree ByteString)
    , _delayCHOPmaxdelayunit :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | RenderpickCHOP {
    _renderpickCHOPposition :: Maybe (Tree Int)
    , _renderpickCHOPdepth :: Maybe (Tree Bool)
    , _renderpickCHOPpicku :: Maybe (Tree Float)
    , _renderpickCHOPexportmethod :: Maybe (Tree Int)
    , _renderpickCHOPcolor :: Maybe (Tree Bool)
    , _renderpickCHOPcustomattrib2type :: Maybe (Tree Int)
    , _renderpickCHOPpickradstep :: Maybe (Tree Int)
    , _renderpickCHOPcustomattrib1 :: Maybe (Tree ByteString)
    , _renderpickCHOPcustomattrib2 :: Maybe (Tree ByteString)
    , _renderpickCHOPpickv :: Maybe (Tree Float)
    , _renderpickCHOPclearprev :: Maybe (Tree Bool)
    , _renderpickCHOPpath :: Maybe (Tree Bool)
    , _renderpickCHOPselect :: Maybe (Tree Bool)
    , _renderpickCHOPactivatecallbacks :: Maybe (Tree Bool)
    , _renderpickCHOPscope :: Maybe (Tree ByteString)
    , _renderpickCHOPpanel :: Maybe (Tree COMP)
    , _renderpickCHOPcallbacks :: Maybe (Tree DAT)
    , _renderpickCHOPpickradius :: Maybe (Tree Int)
    , _renderpickCHOPcustomattrib1type :: Maybe (Tree Int)
    , _renderpickCHOPpanelvalue :: Maybe (Tree ByteString)
    , _renderpickCHOPpickcirstep :: Maybe (Tree Int)
    , _renderpickCHOPcustomattrib3type :: Maybe (Tree Int)
    , _renderpickCHOPcustomattrib3 :: Maybe (Tree ByteString)
    , _renderpickCHOPtimeslice :: Maybe (Tree Bool)
    , _renderpickCHOPstrategy :: Maybe (Tree Int)
    , _renderpickCHOPuv :: Maybe (Tree Bool)
    , _renderpickCHOPexporttable :: Maybe (Tree DAT)
    , _renderpickCHOPrendertop :: Maybe (Tree TOP)
    , _renderpickCHOPusepickableflags :: Maybe (Tree Bool)
    , _renderpickCHOPsrselect :: Maybe (Tree Int)
    , _renderpickCHOPcustomattrib4 :: Maybe (Tree ByteString)
    , _renderpickCHOPinstanceid :: Maybe (Tree Bool)
    , _renderpickCHOPcustomattrib4type :: Maybe (Tree Int)
    , _renderpickCHOPresponsetime :: Maybe (Tree Int)
    , _renderpickCHOPincludenonpickable :: Maybe (Tree Bool)
    , _renderpickCHOPnormal :: Maybe (Tree Int)
    , _renderpickCHOPpickingby :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ReplaceCHOP {
    _replaceCHOPexportmethod :: Maybe (Tree Int)
    , _replaceCHOPsrselect :: Maybe (Tree Int)
    , _replaceCHOPnotify :: Maybe (Tree Bool)
    , _replaceCHOPexporttable :: Maybe (Tree DAT)
    , _replaceCHOPtimeslice :: Maybe (Tree Bool)
    , _replaceCHOPlength :: Maybe (Tree Int)
    , _replaceCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | CountCHOP {
    _countCHOPresetpulse :: Maybe (Tree Bool)
    , _countCHOPthreshdown :: Maybe (Tree Float)
    , _countCHOPontooff :: Maybe (Tree Int)
    , _countCHOPoutput :: Maybe (Tree Int)
    , _countCHOPlimitmin :: Maybe (Tree Float)
    , _countCHOPofftoon :: Maybe (Tree Int)
    , _countCHOPscope :: Maybe (Tree ByteString)
    , _countCHOPexportmethod :: Maybe (Tree Int)
    , _countCHOPlimitmax :: Maybe (Tree Float)
    , _countCHOPexporttable :: Maybe (Tree DAT)
    , _countCHOPretriggerunit :: Maybe (Tree Int)
    , _countCHOPresetvalue :: Maybe (Tree Float)
    , _countCHOPretrigger :: Maybe (Tree Float)
    , _countCHOPtriggeron :: Maybe (Tree Int)
    , _countCHOPthreshup :: Maybe (Tree Float)
    , _countCHOPresetcondition :: Maybe (Tree Int)
    , _countCHOPon :: Maybe (Tree Int)
    , _countCHOPoff :: Maybe (Tree Int)
    , _countCHOPthreshold :: Maybe (Tree Bool)
    , _countCHOPsrselect :: Maybe (Tree Int)
    , _countCHOPtimeslice :: Maybe (Tree Bool)
    , _countCHOPreset :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | OculusaudioCHOP {
    _oculusaudioCHOProomsize :: Vec3
    , _oculusaudioCHOPactive :: Maybe (Tree Bool)
    , _oculusaudioCHOPexportmethod :: Maybe (Tree Int)
    , _oculusaudioCHOPbandhint :: Maybe (Tree Int)
    , _oculusaudioCHOPmaxrange :: Maybe (Tree Float)
    , _oculusaudioCHOPattenuation :: Maybe (Tree Int)
    , _oculusaudioCHOPreflectrevert :: Maybe (Tree Bool)
    , _oculusaudioCHOPexporttable :: Maybe (Tree DAT)
    , _oculusaudioCHOProomleftrelfect :: Maybe (Tree Float)
    , _oculusaudioCHOPboxroommode :: Maybe (Tree Bool)
    , _oculusaudioCHOPattenuationscale :: Maybe (Tree Float)
    , _oculusaudioCHOProomrightrelfect :: Maybe (Tree Float)
    , _oculusaudioCHOProombackrelfect :: Maybe (Tree Float)
    , _oculusaudioCHOPscope :: Maybe (Tree ByteString)
    , _oculusaudioCHOProomtoprelfect :: Maybe (Tree Float)
    , _oculusaudioCHOPsrselect :: Maybe (Tree Int)
    , _oculusaudioCHOPminrange :: Maybe (Tree Float)
    , _oculusaudioCHOProomfrontrelfect :: Maybe (Tree Float)
    , _oculusaudioCHOPtimeslice :: Maybe (Tree Bool)
    , _oculusaudioCHOPdiameter :: Maybe (Tree Float)
    , _oculusaudioCHOProombottomrelfect :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ClipCHOP {
    _clipCHOPtranstion :: Maybe (Tree Int)
    , _clipCHOPblendtime :: Maybe (Tree Float)
    , _clipCHOPexportmethod :: Maybe (Tree Int)
    , _clipCHOPrord :: Maybe (Tree Int)
    , _clipCHOPnblendtimeunit :: Maybe (Tree Int)
    , _clipCHOPcallbacks :: Maybe (Tree DAT)
    , _clipCHOPindexchannel :: Maybe (Tree ByteString)
    , _clipCHOPpauseend :: Maybe (Tree Bool)
    , _clipCHOPexporttable :: Maybe (Tree DAT)
    , _clipCHOPrdat :: Maybe (Tree DAT)
    , _clipCHOPnext :: Maybe (Tree ByteString)
    , _clipCHOPnblendtime :: Maybe (Tree Float)
    , _clipCHOPabspos :: Maybe (Tree Int)
    , _clipCHOPscope :: Maybe (Tree ByteString)
    , _clipCHOPlooprelease :: Maybe (Tree ByteString)
    , _clipCHOPsrselect :: Maybe (Tree Int)
    , _clipCHOPblendtimeunit :: Maybe (Tree Int)
    , _clipCHOPloopactive :: Maybe (Tree Bool)
    , _clipCHOProttype :: Maybe (Tree Int)
    , _clipCHOPtimeslice :: Maybe (Tree Bool)
    , _clipCHOPreload :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudiospectrumCHOP {
    _audiospectrumCHOPmode :: Maybe (Tree Int)
    , _audiospectrumCHOPoutputmenu :: Maybe (Tree Int)
    , _audiospectrumCHOPexportmethod :: Maybe (Tree Int)
    , _audiospectrumCHOPhighfreqboost :: Maybe (Tree Float)
    , _audiospectrumCHOPexporttable :: Maybe (Tree DAT)
    , _audiospectrumCHOPfftsize :: Maybe (Tree Int)
    , _audiospectrumCHOPscope :: Maybe (Tree ByteString)
    , _audiospectrumCHOPoutlength :: Maybe (Tree Int)
    , _audiospectrumCHOPsrselect :: Maybe (Tree Int)
    , _audiospectrumCHOPfrequencylog :: Maybe (Tree Float)
    , _audiospectrumCHOPtimeslice :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | DeleteCHOP {
    _deleteCHOPselrange2 :: Maybe (Tree Float)
    , _deleteCHOPdeletecomp :: Maybe (Tree Bool)
    , _deleteCHOPonesample :: Maybe (Tree Bool)
    , _deleteCHOPselconst :: Maybe (Tree Bool)
    , _deleteCHOPvalue1 :: Maybe (Tree Float)
    , _deleteCHOPvalue2 :: Maybe (Tree Float)
    , _deleteCHOPinclvalue1 :: Maybe (Tree Bool)
    , _deleteCHOPscope :: Maybe (Tree ByteString)
    , _deleteCHOPdelsamples :: Maybe (Tree Bool)
    , _deleteCHOPselect :: Maybe (Tree Int)
    , _deleteCHOPcompnums :: Maybe (Tree ByteString)
    , _deleteCHOPinclvalue2 :: Maybe (Tree Bool)
    , _deleteCHOPexporttable :: Maybe (Tree DAT)
    , _deleteCHOPdiscard :: Maybe (Tree Int)
    , _deleteCHOPdelscope :: Maybe (Tree ByteString)
    , _deleteCHOPexportmethod :: Maybe (Tree Int)
    , _deleteCHOPcompchans :: Maybe (Tree Int)
    , _deleteCHOPselrange1 :: Maybe (Tree Float)
    , _deleteCHOPdelchannels :: Maybe (Tree Bool)
    , _deleteCHOPselnumbers :: Maybe (Tree ByteString)
    , _deleteCHOPtimeslice :: Maybe (Tree Bool)
    , _deleteCHOPcompmulti :: Maybe (Tree Int)
    , _deleteCHOPsrselect :: Maybe (Tree Int)
    , _deleteCHOPcondition :: Maybe (Tree Int)
    , _deleteCHOPchanvalue :: Maybe (Tree Int)
    , _deleteCHOPcompnames :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | PulseCHOP {
    _pulseCHOPpulse7 :: Maybe (Tree Float)
    , _pulseCHOPpulse9 :: Maybe (Tree Float)
    , _pulseCHOPpulse11 :: Maybe (Tree Float)
    , _pulseCHOPpulse2 :: Maybe (Tree Float)
    , _pulseCHOPpulse0 :: Maybe (Tree Float)
    , _pulseCHOPscope :: Maybe (Tree ByteString)
    , _pulseCHOPexporttable :: Maybe (Tree DAT)
    , _pulseCHOPpulse26 :: Maybe (Tree Float)
    , _pulseCHOPlimit :: Maybe (Tree Int)
    , _pulseCHOPstart :: Maybe (Tree Float)
    , _pulseCHOPleft :: Maybe (Tree Int)
    , _pulseCHOPendunit :: Maybe (Tree Int)
    , _pulseCHOPpulse21 :: Maybe (Tree Float)
    , _pulseCHOPrate :: Maybe (Tree Float)
    , _pulseCHOPpulse16 :: Maybe (Tree Float)
    , _pulseCHOPpulse28 :: Maybe (Tree Float)
    , _pulseCHOPnumber :: Maybe (Tree Int)
    , _pulseCHOPwidth :: Maybe (Tree Float)
    , _pulseCHOPpulse19 :: Maybe (Tree Float)
    , _pulseCHOPsrselect :: Maybe (Tree Int)
    , _pulseCHOPpulse13 :: Maybe (Tree Float)
    , _pulseCHOPtimeslice :: Maybe (Tree Bool)
    , _pulseCHOPpulse30 :: Maybe (Tree Float)
    , _pulseCHOPinterp :: Maybe (Tree Int)
    , _pulseCHOPend :: Maybe (Tree Float)
    , _pulseCHOPpulse20 :: Maybe (Tree Float)
    , _pulseCHOPexportmethod :: Maybe (Tree Int)
    , _pulseCHOPpulse29 :: Maybe (Tree Float)
    , _pulseCHOPpulse1 :: Maybe (Tree Float)
    , _pulseCHOPpulse3 :: Maybe (Tree Float)
    , _pulseCHOPdefval :: Maybe (Tree Float)
    , _pulseCHOPpulse6 :: Maybe (Tree Float)
    , _pulseCHOPwidthunit :: Maybe (Tree Int)
    , _pulseCHOPpulse15 :: Maybe (Tree Float)
    , _pulseCHOPmin :: Maybe (Tree Float)
    , _pulseCHOPpulse10 :: Maybe (Tree Float)
    , _pulseCHOPpulse31 :: Maybe (Tree Float)
    , _pulseCHOPstartunit :: Maybe (Tree Int)
    , _pulseCHOPpulse14 :: Maybe (Tree Float)
    , _pulseCHOPpulse4 :: Maybe (Tree Float)
    , _pulseCHOPpulse5 :: Maybe (Tree Float)
    , _pulseCHOPright :: Maybe (Tree Int)
    , _pulseCHOPchannelname :: Maybe (Tree ByteString)
    , _pulseCHOPpulse24 :: Maybe (Tree Float)
    , _pulseCHOPpulse8 :: Maybe (Tree Float)
    , _pulseCHOPpulse17 :: Maybe (Tree Float)
    , _pulseCHOPpulse25 :: Maybe (Tree Float)
    , _pulseCHOPlastpulse :: Maybe (Tree Bool)
    , _pulseCHOPpulse27 :: Maybe (Tree Float)
    , _pulseCHOPpulse22 :: Maybe (Tree Float)
    , _pulseCHOPpulse23 :: Maybe (Tree Float)
    , _pulseCHOPpulse18 :: Maybe (Tree Float)
    , _pulseCHOPpulse12 :: Maybe (Tree Float)
    , _pulseCHOPmax :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | NoiseCHOP {
    _noiseCHOPresetpulse :: Maybe (Tree Bool)
    , _noiseCHOPrough :: Maybe (Tree Float)
    , _noiseCHOPchannelname :: Maybe (Tree ByteString)
    , _noiseCHOPconstraint :: Maybe (Tree Int)
    , _noiseCHOPharmon :: Maybe (Tree Int)
    , _noiseCHOPend :: Maybe (Tree Float)
    , _noiseCHOPscope :: Maybe (Tree ByteString)
    , _noiseCHOPdefval :: Maybe (Tree Float)
    , _noiseCHOPexporttable :: Maybe (Tree DAT)
    , _noiseCHOPexportmethod :: Maybe (Tree Int)
    , _noiseCHOPconstrstart :: Maybe (Tree Float)
    , _noiseCHOPperiodunit :: Maybe (Tree Int)
    , _noiseCHOPxord :: Maybe (Tree Int)
    , _noiseCHOPr :: Vec3
    , _noiseCHOPstartunit :: Maybe (Tree Int)
    , _noiseCHOPstart :: Maybe (Tree Float)
    , _noiseCHOPleft :: Maybe (Tree Int)
    , _noiseCHOPtype :: Maybe (Tree Int)
    , _noiseCHOPs :: Vec3
    , _noiseCHOPperiod :: Maybe (Tree Float)
    , _noiseCHOPendunit :: Maybe (Tree Int)
    , _noiseCHOPnormal :: Maybe (Tree Bool)
    , _noiseCHOPrate :: Maybe (Tree Float)
    , _noiseCHOPp :: Vec3
    , _noiseCHOPright :: Maybe (Tree Int)
    , _noiseCHOPspread :: Maybe (Tree Float)
    , _noiseCHOPtimeslice :: Maybe (Tree Bool)
    , _noiseCHOPseed :: Maybe (Tree Float)
    , _noiseCHOPsrselect :: Maybe (Tree Int)
    , _noiseCHOPnumint :: Maybe (Tree Int)
    , _noiseCHOPrord :: Maybe (Tree Int)
    , _noiseCHOPconstrend :: Maybe (Tree Float)
    , _noiseCHOPamp :: Maybe (Tree Float)
    , _noiseCHOPt :: Vec3
    , _noiseCHOPexp :: Maybe (Tree Float)
    , _noiseCHOPconstrmean :: Maybe (Tree Float)
    , _noiseCHOPreset :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | TrailCHOP {
    _trailCHOPresample :: Maybe (Tree Bool)
    , _trailCHOPresetpulse :: Maybe (Tree Bool)
    , _trailCHOPgrowlength :: Maybe (Tree Bool)
    , _trailCHOPactive :: Maybe (Tree Bool)
    , _trailCHOPsamples :: Maybe (Tree Int)
    , _trailCHOPexportmethod :: Maybe (Tree Int)
    , _trailCHOPexporttable :: Maybe (Tree DAT)
    , _trailCHOPrate :: Maybe (Tree Float)
    , _trailCHOPsetrate :: Maybe (Tree Bool)
    , _trailCHOPwlength :: Maybe (Tree Float)
    , _trailCHOPscope :: Maybe (Tree ByteString)
    , _trailCHOPwlengthunit :: Maybe (Tree Int)
    , _trailCHOPcapture :: Maybe (Tree Int)
    , _trailCHOPsrselect :: Maybe (Tree Int)
    , _trailCHOPtimeslice :: Maybe (Tree Bool)
    , _trailCHOPreset :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SoptoCHOP {
    _soptoCHOPexportmethod :: Maybe (Tree Int)
    , _soptoCHOPsop :: Maybe (Tree SOP)
    , _soptoCHOPexporttable :: Maybe (Tree DAT)
    , _soptoCHOPrate :: Maybe (Tree Float)
    , _soptoCHOPscope :: Maybe (Tree ByteString)
    , _soptoCHOPsrselect :: Maybe (Tree Int)
    , _soptoCHOPattribscope :: Maybe (Tree ByteString)
    , _soptoCHOPgroup :: Maybe (Tree ByteString)
    , _soptoCHOPorganize :: Maybe (Tree ByteString)
    , _soptoCHOPmethod :: Maybe (Tree Int)
    , _soptoCHOPtimeslice :: Maybe (Tree Bool)
    , _soptoCHOPrenamescope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SyncinCHOP {
    _syncinCHOPmulticastaddress :: Maybe (Tree ByteString)
    , _syncinCHOPsrselect :: Maybe (Tree Int)
    , _syncinCHOPactive :: Maybe (Tree Bool)
    , _syncinCHOPexportmethod :: Maybe (Tree Int)
    , _syncinCHOPtimeout :: Maybe (Tree Int)
    , _syncinCHOPexporttable :: Maybe (Tree DAT)
    , _syncinCHOPport :: Maybe (Tree Int)
    , _syncinCHOPtimeslice :: Maybe (Tree Bool)
    , _syncinCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | BlacktraxCHOP {
    _blacktraxCHOPresetpulse :: Maybe (Tree Bool)
    , _blacktraxCHOPleds :: Maybe (Tree Bool)
    , _blacktraxCHOPactive :: Maybe (Tree Bool)
    , _blacktraxCHOPexportmethod :: Maybe (Tree Int)
    , _blacktraxCHOPprotocol :: Maybe (Tree Int)
    , _blacktraxCHOPmaxbeacons :: Maybe (Tree Int)
    , _blacktraxCHOPscope :: Maybe (Tree ByteString)
    , _blacktraxCHOPexporttable :: Maybe (Tree DAT)
    , _blacktraxCHOPtimeslice :: Maybe (Tree Bool)
    , _blacktraxCHOPacceleration :: Maybe (Tree Bool)
    , _blacktraxCHOPmappingtable :: Maybe (Tree DAT)
    , _blacktraxCHOPvelocity :: Maybe (Tree Bool)
    , _blacktraxCHOPsrselect :: Maybe (Tree Int)
    , _blacktraxCHOPoutputformat :: Maybe (Tree Int)
    , _blacktraxCHOPport :: Maybe (Tree Int)
    , _blacktraxCHOPcentroid :: Maybe (Tree Bool)
    , _blacktraxCHOPnetaddress :: Maybe (Tree ByteString)
    , _blacktraxCHOPreset :: Maybe (Tree Bool)
    , _blacktraxCHOPsamplerate :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SharedmemoutCHOP {
    _sharedmemoutCHOPexportmethod :: Maybe (Tree Int)
    , _sharedmemoutCHOPsrselect :: Maybe (Tree Int)
    , _sharedmemoutCHOPactive :: Maybe (Tree Bool)
    , _sharedmemoutCHOPmemtype :: Maybe (Tree Int)
    , _sharedmemoutCHOPexporttable :: Maybe (Tree DAT)
    , _sharedmemoutCHOPtimeslice :: Maybe (Tree Bool)
    , _sharedmemoutCHOPscope :: Maybe (Tree ByteString)
    , _sharedmemoutCHOPname :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | OpenvrCHOP {
    _openvrCHOPnear :: Maybe (Tree Float)
    , _openvrCHOPactive :: Maybe (Tree Bool)
    , _openvrCHOPunitscale :: Maybe (Tree Float)
    , _openvrCHOPexporttable :: Maybe (Tree DAT)
    , _openvrCHOPexportmethod :: Maybe (Tree Int)
    , _openvrCHOPfar :: Maybe (Tree Float)
    , _openvrCHOPbuttons :: Maybe (Tree Bool)
    , _openvrCHOPscope :: Maybe (Tree ByteString)
    , _openvrCHOPfirstcontroller :: Maybe (Tree Int)
    , _openvrCHOPsrselect :: Maybe (Tree Int)
    , _openvrCHOPmaxcontrollers :: Maybe (Tree Int)
    , _openvrCHOPmaxbuttons :: Maybe (Tree Int)
    , _openvrCHOPgeneralinfo :: Maybe (Tree Bool)
    , _openvrCHOPorientation :: Maybe (Tree Bool)
    , _openvrCHOPmaxanalogs :: Maybe (Tree Int)
    , _openvrCHOPtimeslice :: Maybe (Tree Bool)
    , _openvrCHOPoutput :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudiomovieCHOP {
    _audiomovieCHOPindex :: Maybe (Tree Bool)
    , _audiomovieCHOPexportmethod :: Maybe (Tree Int)
    , _audiomovieCHOPprereadlength :: Maybe (Tree Float)
    , _audiomovieCHOPexporttable :: Maybe (Tree DAT)
    , _audiomovieCHOPopentimeout :: Maybe (Tree Float)
    , _audiomovieCHOPscope :: Maybe (Tree ByteString)
    , _audiomovieCHOPsyncoffsetunit :: Maybe (Tree Int)
    , _audiomovieCHOPplay :: Maybe (Tree Bool)
    , _audiomovieCHOPsrselect :: Maybe (Tree Int)
    , _audiomovieCHOPprereadlengthunit :: Maybe (Tree Int)
    , _audiomovieCHOPsyncoffset :: Maybe (Tree Float)
    , _audiomovieCHOPmoviefileintop :: Maybe (Tree TOP)
    , _audiomovieCHOPtimeslice :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | LookupCHOP {
    _lookupCHOPinterp :: Maybe (Tree Bool)
    , _lookupCHOPexportmethod :: Maybe (Tree Int)
    , _lookupCHOPindex1 :: Maybe (Tree Float)
    , _lookupCHOPcyclic :: Maybe (Tree Int)
    , _lookupCHOPexporttable :: Maybe (Tree DAT)
    , _lookupCHOPscope :: Maybe (Tree ByteString)
    , _lookupCHOPindex2 :: Maybe (Tree Float)
    , _lookupCHOPmatch :: Maybe (Tree Int)
    , _lookupCHOPsrselect :: Maybe (Tree Int)
    , _lookupCHOPtimeslice :: Maybe (Tree Bool)
    , _lookupCHOPchanmatch :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudiooscillatorCHOP {
    _audiooscillatorCHOPresetpulse :: Maybe (Tree Bool)
    , _audiooscillatorCHOPsmooth :: Maybe (Tree Bool)
    , _audiooscillatorCHOPresetcondition :: Maybe (Tree Int)
    , _audiooscillatorCHOPoctave :: Maybe (Tree Float)
    , _audiooscillatorCHOPbias :: Maybe (Tree Float)
    , _audiooscillatorCHOPrate :: Maybe (Tree Float)
    , _audiooscillatorCHOPscope :: Maybe (Tree ByteString)
    , _audiooscillatorCHOPexporttable :: Maybe (Tree DAT)
    , _audiooscillatorCHOPwavetype :: Maybe (Tree Int)
    , _audiooscillatorCHOPphase :: Maybe (Tree Float)
    , _audiooscillatorCHOPexportmethod :: Maybe (Tree Int)
    , _audiooscillatorCHOPfrequency :: Maybe (Tree Float)
    , _audiooscillatorCHOPoffset :: Maybe (Tree Float)
    , _audiooscillatorCHOPsrselect :: Maybe (Tree Int)
    , _audiooscillatorCHOPamp :: Maybe (Tree Float)
    , _audiooscillatorCHOPtimeslice :: Maybe (Tree Bool)
    , _audiooscillatorCHOPreset :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SyncoutCHOP {
    _syncoutCHOPexportmethod :: Maybe (Tree Int)
    , _syncoutCHOPactive :: Maybe (Tree Bool)
    , _syncoutCHOPclearstats :: Maybe (Tree Bool)
    , _syncoutCHOPbanclients :: Maybe (Tree Bool)
    , _syncoutCHOPscope :: Maybe (Tree ByteString)
    , _syncoutCHOPexporttable :: Maybe (Tree DAT)
    , _syncoutCHOPmulticastaddress :: Maybe (Tree ByteString)
    , _syncoutCHOPsrselect :: Maybe (Tree Int)
    , _syncoutCHOPtimeout :: Maybe (Tree Int)
    , _syncoutCHOPport :: Maybe (Tree Int)
    , _syncoutCHOPtimeslice :: Maybe (Tree Bool)
    , _syncoutCHOPbanclienttimeouts :: Maybe (Tree Int)
    , _syncoutCHOPclienttimeouts :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | EtherdreamCHOP {
    _etherdreamCHOPexportmethod :: Maybe (Tree Int)
    , _etherdreamCHOPactive :: Maybe (Tree Bool)
    , _etherdreamCHOPexporttable :: Maybe (Tree DAT)
    , _etherdreamCHOPxscale :: Maybe (Tree Float)
    , _etherdreamCHOPscope :: Maybe (Tree ByteString)
    , _etherdreamCHOPnetaddress :: Maybe (Tree ByteString)
    , _etherdreamCHOPqueuetime :: Maybe (Tree Float)
    , _etherdreamCHOPyscale :: Maybe (Tree Float)
    , _etherdreamCHOPqueueunits :: Maybe (Tree Int)
    , _etherdreamCHOPsrselect :: Maybe (Tree Int)
    , _etherdreamCHOPport :: Maybe (Tree Int)
    , _etherdreamCHOPtimeslice :: Maybe (Tree Bool)
    , _etherdreamCHOPbluescale :: Maybe (Tree Float)
    , _etherdreamCHOPredscale :: Maybe (Tree Float)
    , _etherdreamCHOPgreenscale :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SortCHOP {
    _sortCHOPexportmethod :: Maybe (Tree Int)
    , _sortCHOPnames :: Maybe (Tree ByteString)
    , _sortCHOPexporttable :: Maybe (Tree DAT)
    , _sortCHOPscope :: Maybe (Tree ByteString)
    , _sortCHOPselect :: Maybe (Tree Int)
    , _sortCHOPseed :: Maybe (Tree Float)
    , _sortCHOPsrselect :: Maybe (Tree Int)
    , _sortCHOPindices :: Maybe (Tree ByteString)
    , _sortCHOPindexchannel :: Maybe (Tree Bool)
    , _sortCHOPmethod :: Maybe (Tree Int)
    , _sortCHOPtimeslice :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | HoldCHOP {
    _holdCHOPexportmethod :: Maybe (Tree Int)
    , _holdCHOPsrselect :: Maybe (Tree Int)
    , _holdCHOPexporttable :: Maybe (Tree DAT)
    , _holdCHOPsample :: Maybe (Tree Int)
    , _holdCHOPtimeslice :: Maybe (Tree Bool)
    , _holdCHOPscope :: Maybe (Tree ByteString)
    , _holdCHOPpulse :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | WarpCHOP {
    _warpCHOPexportmethod :: Maybe (Tree Int)
    , _warpCHOPsrselect :: Maybe (Tree Int)
    , _warpCHOPexporttable :: Maybe (Tree DAT)
    , _warpCHOPmethod :: Maybe (Tree Int)
    , _warpCHOPscaleindex :: Maybe (Tree Bool)
    , _warpCHOPtimeslice :: Maybe (Tree Bool)
    , _warpCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudiostreamoutCHOP {
    _audiostreamoutCHOPstreamname :: Maybe (Tree ByteString)
    , _audiostreamoutCHOPexportmethod :: Maybe (Tree Int)
    , _audiostreamoutCHOPsrselect :: Maybe (Tree Int)
    , _audiostreamoutCHOPactive :: Maybe (Tree Bool)
    , _audiostreamoutCHOPexporttable :: Maybe (Tree DAT)
    , _audiostreamoutCHOPport :: Maybe (Tree Int)
    , _audiostreamoutCHOPtimeslice :: Maybe (Tree Bool)
    , _audiostreamoutCHOPscope :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | MidiinmapCHOP {
    _midiinmapCHOPid :: Maybe (Tree ByteString)
    , _midiinmapCHOPbvelocity :: Maybe (Tree Bool)
    , _midiinmapCHOPsqueue :: Maybe (Tree Bool)
    , _midiinmapCHOPleft :: Maybe (Tree Int)
    , _midiinmapCHOPexportmethod :: Maybe (Tree Int)
    , _midiinmapCHOPsliders :: Maybe (Tree ByteString)
    , _midiinmapCHOPtimeslice :: Maybe (Tree Bool)
    , _midiinmapCHOPrate :: Maybe (Tree Float)
    , _midiinmapCHOPbuttons :: Maybe (Tree ByteString)
    , _midiinmapCHOPscope :: Maybe (Tree ByteString)
    , _midiinmapCHOPexporttable :: Maybe (Tree DAT)
    , _midiinmapCHOPdefval :: Maybe (Tree Float)
    , _midiinmapCHOPdevice :: Maybe (Tree DAT)
    , _midiinmapCHOPsrselect :: Maybe (Tree Int)
    , _midiinmapCHOPright :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | OverrideCHOP {
    _overrideCHOPexportmethod :: Maybe (Tree Int)
    , _overrideCHOPmakeindex :: Maybe (Tree Bool)
    , _overrideCHOPsrselect :: Maybe (Tree Int)
    , _overrideCHOPtimeslice :: Maybe (Tree Bool)
    , _overrideCHOPmatch :: Maybe (Tree Int)
    , _overrideCHOPindexname :: Maybe (Tree ByteString)
    , _overrideCHOPscope :: Maybe (Tree ByteString)
    , _overrideCHOPexporttable :: Maybe (Tree DAT)
    , _overrideCHOPcookmonitor :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | RenameCHOP {
    _renameCHOPexportmethod :: Maybe (Tree Int)
    , _renameCHOPrenamefrom :: Maybe (Tree ByteString)
    , _renameCHOPrenameto :: Maybe (Tree ByteString)
    , _renameCHOPsrselect :: Maybe (Tree Int)
    , _renameCHOPtimeslice :: Maybe (Tree Bool)
    , _renameCHOPscope :: Maybe (Tree ByteString)
    , _renameCHOPexporttable :: Maybe (Tree DAT)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AudiodeviceinCHOP {
    _audiodeviceinCHOPerrormissing :: Maybe (Tree Bool)
    , _audiodeviceinCHOPfrontleftcenter :: Maybe (Tree Bool)
    , _audiodeviceinCHOPtopfrontright :: Maybe (Tree Bool)
    , _audiodeviceinCHOPformat :: Maybe (Tree Int)
    , _audiodeviceinCHOPactive :: Maybe (Tree Bool)
    , _audiodeviceinCHOPtopbackcenter :: Maybe (Tree Bool)
    , _audiodeviceinCHOPdriver :: Maybe (Tree Int)
    , _audiodeviceinCHOPtopbackleft :: Maybe (Tree Bool)
    , _audiodeviceinCHOPfrontcenter :: Maybe (Tree Bool)
    , _audiodeviceinCHOPbufferlength :: Maybe (Tree Float)
    , _audiodeviceinCHOPfrontright :: Maybe (Tree Bool)
    , _audiodeviceinCHOPfrontleft :: Maybe (Tree Bool)
    , _audiodeviceinCHOPsideright :: Maybe (Tree Bool)
    , _audiodeviceinCHOPsideleft :: Maybe (Tree Bool)
    , _audiodeviceinCHOPfrontrightcenter :: Maybe (Tree Bool)
    , _audiodeviceinCHOPexporttable :: Maybe (Tree DAT)
    , _audiodeviceinCHOPexportmethod :: Maybe (Tree Int)
    , _audiodeviceinCHOPbackcenter :: Maybe (Tree Bool)
    , _audiodeviceinCHOPtopcenter :: Maybe (Tree Bool)
    , _audiodeviceinCHOPtopbackright :: Maybe (Tree Bool)
    , _audiodeviceinCHOPlowfrequency :: Maybe (Tree Bool)
    , _audiodeviceinCHOPrate :: Maybe (Tree Float)
    , _audiodeviceinCHOPtopfrontcenter :: Maybe (Tree Bool)
    , _audiodeviceinCHOPbackleft :: Maybe (Tree Bool)
    , _audiodeviceinCHOPscope :: Maybe (Tree ByteString)
    , _audiodeviceinCHOPinputs :: Maybe (Tree ByteString)
    , _audiodeviceinCHOPtopfrontleft :: Maybe (Tree Bool)
    , _audiodeviceinCHOPdevice :: Maybe (Tree ByteString)
    , _audiodeviceinCHOPsrselect :: Maybe (Tree Int)
    , _audiodeviceinCHOPtimeslice :: Maybe (Tree Bool)
    , _audiodeviceinCHOPbackright :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | InversecurveCHOP {
    _inversecurveCHOPexportmethod :: Maybe (Tree Int)
    , _inversecurveCHOPexporttable :: Maybe (Tree DAT)
    , _inversecurveCHOPupvector :: Vec3
    , _inversecurveCHOPscope :: Maybe (Tree ByteString)
    , _inversecurveCHOPinterpolation :: Maybe (Tree Int)
    , _inversecurveCHOPmapexports :: Maybe (Tree Bool)
    , _inversecurveCHOPspan1 :: Maybe (Tree Float)
    , _inversecurveCHOPsrselect :: Maybe (Tree Int)
    , _inversecurveCHOPtimeslice :: Maybe (Tree Bool)
    , _inversecurveCHOPorder :: Maybe (Tree Int)
    , _inversecurveCHOPspan2 :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | PanelCHOP {
    _panelCHOPqueue :: Maybe (Tree Bool)
    , _panelCHOPexportmethod :: Maybe (Tree Int)
    , _panelCHOPselect :: Maybe (Tree ByteString)
    , _panelCHOPqueuesize :: Maybe (Tree Int)
    , _panelCHOPrename :: Maybe (Tree ByteString)
    , _panelCHOPsrselect :: Maybe (Tree Int)
    , _panelCHOPtimeslice :: Maybe (Tree Bool)
    , _panelCHOPscope :: Maybe (Tree ByteString)
    , _panelCHOPexporttable :: Maybe (Tree DAT)
    , _panelCHOPcomponent :: Maybe (Tree COMP)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | DattoCHOP {
    _dattoCHOPcolexpr :: Maybe (Tree ByteString)
    , _dattoCHOPfromcol :: Maybe (Tree Int)
    , _dattoCHOProwindexstart :: Maybe (Tree Int)
    , _dattoCHOPrownameend :: Maybe (Tree ByteString)
    , _dattoCHOPrownamestart :: Maybe (Tree ByteString)
    , _dattoCHOPfirstrow :: Maybe (Tree Int)
    , _dattoCHOPfromrow :: Maybe (Tree Int)
    , _dattoCHOProwexpr :: Maybe (Tree ByteString)
    , _dattoCHOPcolnamestart :: Maybe (Tree ByteString)
    , _dattoCHOProwindexend :: Maybe (Tree Int)
    , _dattoCHOPcolnames :: Maybe (Tree ByteString)
    , _dattoCHOPexporttable :: Maybe (Tree DAT)
    , _dattoCHOPoutput :: Maybe (Tree Int)
    , _dattoCHOPextractrows :: Maybe (Tree Int)
    , _dattoCHOPexportmethod :: Maybe (Tree Int)
    , _dattoCHOPtimeslice :: Maybe (Tree Bool)
    , _dattoCHOPcolindexend :: Maybe (Tree Int)
    , _dattoCHOPscope :: Maybe (Tree ByteString)
    , _dattoCHOPrownames :: Maybe (Tree ByteString)
    , _dattoCHOPsrselect :: Maybe (Tree Int)
    , _dattoCHOPfirstcolumn :: Maybe (Tree Int)
    , _dattoCHOPcolnameend :: Maybe (Tree ByteString)
    , _dattoCHOPdat :: Maybe (Tree DAT)
    , _dattoCHOPcolindexstart :: Maybe (Tree Int)
    , _dattoCHOPextractcols :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | HokuyoCHOP {
    _hokuyoCHOPinterface :: Maybe (Tree Int)
    , _hokuyoCHOPendstep :: Maybe (Tree Int)
    , _hokuyoCHOPactive :: Maybe (Tree Bool)
    , _hokuyoCHOPexportmethod :: Maybe (Tree Int)
    , _hokuyoCHOPstartstep :: Maybe (Tree Int)
    , _hokuyoCHOPexporttable :: Maybe (Tree DAT)
    , _hokuyoCHOPscope :: Maybe (Tree ByteString)
    , _hokuyoCHOPhighsensitivity :: Maybe (Tree Bool)
    , _hokuyoCHOPsrselect :: Maybe (Tree Int)
    , _hokuyoCHOPmotorspeed :: Maybe (Tree Int)
    , _hokuyoCHOPport :: Maybe (Tree ByteString)
    , _hokuyoCHOPtimeslice :: Maybe (Tree Bool)
    , _hokuyoCHOPnetaddress :: Maybe (Tree ByteString)
    , _hokuyoCHOPoutput :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | AnalyzeCHOP {
    _analyzeCHOPexportmethod :: Maybe (Tree Int)
    , _analyzeCHOPnopeakvalue :: Maybe (Tree Float)
    , _analyzeCHOPsrselect :: Maybe (Tree Int)
    , _analyzeCHOPscope :: Maybe (Tree ByteString)
    , _analyzeCHOPvalleys :: Maybe (Tree Bool)
    , _analyzeCHOPexporttable :: Maybe (Tree DAT)
    , _analyzeCHOPallowend :: Maybe (Tree Bool)
    , _analyzeCHOPtimeslice :: Maybe (Tree Bool)
    , _analyzeCHOPallowstart :: Maybe (Tree Bool)
    , _analyzeCHOPfunction :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | SerialCHOP {
    _serialCHOPscript1 :: Maybe (Tree ByteString)
    , _serialCHOPparity :: Maybe (Tree Int)
    , _serialCHOPscript6 :: Maybe (Tree ByteString)
    , _serialCHOPscript9 :: Maybe (Tree ByteString)
    , _serialCHOPactive :: Maybe (Tree Bool)
    , _serialCHOPexportmethod :: Maybe (Tree Int)
    , _serialCHOPscript8 :: Maybe (Tree ByteString)
    , _serialCHOPscript14 :: Maybe (Tree ByteString)
    , _serialCHOPstopbits :: Maybe (Tree Int)
    , _serialCHOPscript0 :: Maybe (Tree ByteString)
    , _serialCHOPscript3 :: Maybe (Tree ByteString)
    , _serialCHOPscript7 :: Maybe (Tree ByteString)
    , _serialCHOPscript10 :: Maybe (Tree ByteString)
    , _serialCHOPport :: Maybe (Tree ByteString)
    , _serialCHOPexporttable :: Maybe (Tree DAT)
    , _serialCHOPscript12 :: Maybe (Tree ByteString)
    , _serialCHOPbaudrate :: Maybe (Tree Int)
    , _serialCHOPscript13 :: Maybe (Tree ByteString)
    , _serialCHOPscript2 :: Maybe (Tree ByteString)
    , _serialCHOPstate :: Maybe (Tree Int)
    , _serialCHOPscope :: Maybe (Tree ByteString)
    , _serialCHOPscript5 :: Maybe (Tree ByteString)
    , _serialCHOPsrselect :: Maybe (Tree Int)
    , _serialCHOPdatabits :: Maybe (Tree Int)
    , _serialCHOPscript11 :: Maybe (Tree ByteString)
    , _serialCHOPtimeslice :: Maybe (Tree Bool)
    , _serialCHOPscript4 :: Maybe (Tree ByteString)
    , _serialCHOPscript15 :: Maybe (Tree ByteString)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | InfoCHOP {
    _infoCHOPexportmethod :: Maybe (Tree Int)
    , _infoCHOPpassive :: Maybe (Tree Bool)
    , _infoCHOPexporttable :: Maybe (Tree DAT)
    , _infoCHOPiscope :: Maybe (Tree ByteString)
    , _infoCHOPscope :: Maybe (Tree ByteString)
    , _infoCHOPsrselect :: Maybe (Tree Int)
    , _infoCHOPrange1 :: Maybe (Tree Float)
    , _infoCHOPvalues :: Maybe (Tree Int)
    , _infoCHOPtimeslice :: Maybe (Tree Bool)
    , _infoCHOPrange2 :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | TrimCHOP {
    _trimCHOPstart :: Maybe (Tree Float)
    , _trimCHOPend :: Maybe (Tree Float)
    , _trimCHOPexportmethod :: Maybe (Tree Int)
    , _trimCHOPendunit :: Maybe (Tree Int)
    , _trimCHOPscope :: Maybe (Tree ByteString)
    , _trimCHOPexporttable :: Maybe (Tree DAT)
    , _trimCHOPtimeslice :: Maybe (Tree Bool)
    , _trimCHOPsrselect :: Maybe (Tree Int)
    , _trimCHOPrelative :: Maybe (Tree Int)
    , _trimCHOPstartunit :: Maybe (Tree Int)
    , _trimCHOPdiscard :: Maybe (Tree Int)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | ResampleCHOP {
    _resampleCHOPinterp :: Maybe (Tree Int)
    , _resampleCHOPstart :: Maybe (Tree Float)
    , _resampleCHOPend :: Maybe (Tree Float)
    , _resampleCHOPexportmethod :: Maybe (Tree Int)
    , _resampleCHOPstartunit :: Maybe (Tree Int)
    , _resampleCHOPrate :: Maybe (Tree Float)
    , _resampleCHOPquatrot :: Maybe (Tree Bool)
    , _resampleCHOPscope :: Maybe (Tree ByteString)
    , _resampleCHOPconstarea :: Maybe (Tree Bool)
    , _resampleCHOPtimeslice :: Maybe (Tree Bool)
    , _resampleCHOPcyclelen :: Maybe (Tree Float)
    , _resampleCHOPsrselect :: Maybe (Tree Int)
    , _resampleCHOPrelative :: Maybe (Tree Int)
    , _resampleCHOPexporttable :: Maybe (Tree DAT)
    , _resampleCHOPmethod :: Maybe (Tree Int)
    , _resampleCHOPendunit :: Maybe (Tree Int)
    , _resampleCHOPcorrect :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | BlendCHOP {
    _blendCHOPfirstweight :: Maybe (Tree Bool)
    , _blendCHOPexportmethod :: Maybe (Tree Int)
    , _blendCHOPsrselect :: Maybe (Tree Int)
    , _blendCHOPexporttable :: Maybe (Tree DAT)
    , _blendCHOPmethod :: Maybe (Tree Int)
    , _blendCHOPtimeslice :: Maybe (Tree Bool)
    , _blendCHOPscope :: Maybe (Tree ByteString)
    , _blendCHOPunderflow :: Maybe (Tree Bool)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }
  | HeliosdacCHOP {
    _heliosdacCHOPexportmethod :: Maybe (Tree Int)
    , _heliosdacCHOPactive :: Maybe (Tree Bool)
    , _heliosdacCHOPexporttable :: Maybe (Tree DAT)
    , _heliosdacCHOPxscale :: Maybe (Tree Float)
    , _heliosdacCHOPscope :: Maybe (Tree ByteString)
    , _heliosdacCHOPbluescale :: Maybe (Tree Float)
    , _heliosdacCHOPqueuetime :: Maybe (Tree Float)
    , _heliosdacCHOPgreenscale :: Maybe (Tree Float)
    , _heliosdacCHOPsrselect :: Maybe (Tree Int)
    , _heliosdacCHOPdevice :: Maybe (Tree ByteString)
    , _heliosdacCHOPtimeslice :: Maybe (Tree Bool)
    , _heliosdacCHOPintensityscale :: Maybe (Tree Float)
    , _heliosdacCHOPredscale :: Maybe (Tree Float)
    , _heliosdacCHOPyscale :: Maybe (Tree Float)
    , _chopCommands :: [CommandType]
    , _chopIns :: [Tree CHOP]
  }


data MAT = 
  InMAT {
    _inMATpcaptpath :: Maybe (Tree ByteString)
    , _inMATwireframe :: Maybe (Tree Int)
    , _inMATdestblenda :: Maybe (Tree Int)
    , _inMATmat :: Maybe (Tree MAT)
    , _inMATdepthfunc :: Maybe (Tree Int)
    , _inMATcullface :: Maybe (Tree Int)
    , _inMATskelrootpath :: Maybe (Tree ByteString)
    , _inMATdestblend :: Maybe (Tree Int)
    , _inMATlabel :: Maybe (Tree ByteString)
    , _inMATalphafunc :: Maybe (Tree Int)
    , _inMATdepthtest :: Maybe (Tree Bool)
    , _inMATpolygonoffsetunits :: Maybe (Tree Float)
    , _inMATpolygonoffsetfactor :: Maybe (Tree Float)
    , _inMATpolygonoffset :: Maybe (Tree Bool)
    , _inMATseparatealphafunc :: Maybe (Tree Bool)
    , _inMATdepthwriting :: Maybe (Tree Bool)
    , _inMATalphathreshold :: Maybe (Tree Float)
    , _inMATpcaptdata :: Maybe (Tree ByteString)
    , _inMATdodeform :: Maybe (Tree Bool)
    , _inMATdeformdata :: Maybe (Tree Int)
    , _inMATwirewidth :: Maybe (Tree Float)
    , _inMATtargetsop :: Maybe (Tree SOP)
    , _inMATsrcblend :: Maybe (Tree Int)
    , _inMATblending :: Maybe (Tree Bool)
    , _inMATalphatest :: Maybe (Tree Bool)
    , _inMATsrcblenda :: Maybe (Tree Int)
    , _matCommands :: [CommandType]
    , _matIns :: [Tree MAT]
  }
  | PointspriteMAT {
    _pointspriteMAToffsettop :: Maybe (Tree Float)
    , _pointspriteMATcolormapanisotropy :: Maybe (Tree Int)
    , _pointspriteMATalpha :: Maybe (Tree Float)
    , _pointspriteMAToffsetbottom :: Maybe (Tree Float)
    , _pointspriteMATcullface :: Maybe (Tree Int)
    , _pointspriteMATskelrootpath :: Maybe (Tree ByteString)
    , _pointspriteMATwireframe :: Maybe (Tree Int)
    , _pointspriteMATalphafunc :: Maybe (Tree Int)
    , _pointspriteMATpointscale :: Maybe (Tree Float)
    , _pointspriteMATpolygonoffsetfactor :: Maybe (Tree Float)
    , _pointspriteMATpolygonoffset :: Maybe (Tree Bool)
    , _pointspriteMATseparatealphafunc :: Maybe (Tree Bool)
    , _pointspriteMATdepthwriting :: Maybe (Tree Bool)
    , _pointspriteMAToffsetleft :: Maybe (Tree Float)
    , _pointspriteMATcolormapextendv :: Maybe (Tree Int)
    , _pointspriteMATpcaptdata :: Maybe (Tree ByteString)
    , _pointspriteMATdodeform :: Maybe (Tree Bool)
    , _pointspriteMATpostmultalpha :: Maybe (Tree Bool)
    , _pointspriteMATcolor :: Vec3
    , _pointspriteMATdeformdata :: Maybe (Tree Int)
    , _pointspriteMATdestblenda :: Maybe (Tree Int)
    , _pointspriteMATcolormapextendu :: Maybe (Tree Int)
    , _pointspriteMATblending :: Maybe (Tree Bool)
    , _pointspriteMATpcaptpath :: Maybe (Tree ByteString)
    , _pointspriteMATcolormap :: Maybe (Tree TOP)
    , _pointspriteMATmat :: Maybe (Tree MAT)
    , _pointspriteMATcolormapextendw :: Maybe (Tree Int)
    , _pointspriteMATattenfar :: Maybe (Tree Float)
    , _pointspriteMATdestblend :: Maybe (Tree Int)
    , _pointspriteMATattensizenear :: Maybe (Tree Float)
    , _pointspriteMATpolygonoffsetunits :: Maybe (Tree Float)
    , _pointspriteMATattenpscale :: Maybe (Tree Float)
    , _pointspriteMATdepthtest :: Maybe (Tree Bool)
    , _pointspriteMATcolormapfilter :: Maybe (Tree Int)
    , _pointspriteMATattennear :: Maybe (Tree Float)
    , _pointspriteMATalphathreshold :: Maybe (Tree Float)
    , _pointspriteMATdepthfunc :: Maybe (Tree Int)
    , _pointspriteMAToffsetright :: Maybe (Tree Float)
    , _pointspriteMATwirewidth :: Maybe (Tree Float)
    , _pointspriteMATsrcblend :: Maybe (Tree Int)
    , _pointspriteMATtargetsop :: Maybe (Tree SOP)
    , _pointspriteMATattensizefar :: Maybe (Tree Float)
    , _pointspriteMATalphatest :: Maybe (Tree Bool)
    , _pointspriteMATsrcblenda :: Maybe (Tree Int)
    , _matCommands :: [CommandType]
    , _matIns :: [Tree MAT]
  }
  | OutMAT {
    _outMATpcaptpath :: Maybe (Tree ByteString)
    , _outMATwireframe :: Maybe (Tree Int)
    , _outMATdestblenda :: Maybe (Tree Int)
    , _outMATmat :: Maybe (Tree MAT)
    , _outMATdepthfunc :: Maybe (Tree Int)
    , _outMATcullface :: Maybe (Tree Int)
    , _outMATskelrootpath :: Maybe (Tree ByteString)
    , _outMATdestblend :: Maybe (Tree Int)
    , _outMATlabel :: Maybe (Tree ByteString)
    , _outMATalphafunc :: Maybe (Tree Int)
    , _outMATdepthtest :: Maybe (Tree Bool)
    , _outMATpolygonoffsetunits :: Maybe (Tree Float)
    , _outMATpolygonoffsetfactor :: Maybe (Tree Float)
    , _outMATpolygonoffset :: Maybe (Tree Bool)
    , _outMATseparatealphafunc :: Maybe (Tree Bool)
    , _outMATdepthwriting :: Maybe (Tree Bool)
    , _outMATalphathreshold :: Maybe (Tree Float)
    , _outMATpcaptdata :: Maybe (Tree ByteString)
    , _outMATdodeform :: Maybe (Tree Bool)
    , _outMATdeformdata :: Maybe (Tree Int)
    , _outMATwirewidth :: Maybe (Tree Float)
    , _outMATtargetsop :: Maybe (Tree SOP)
    , _outMATsrcblend :: Maybe (Tree Int)
    , _outMATblending :: Maybe (Tree Bool)
    , _outMATalphatest :: Maybe (Tree Bool)
    , _outMATsrcblenda :: Maybe (Tree Int)
    , _matCommands :: [CommandType]
    , _matIns :: [Tree MAT]
  }
  | PhongMAT {
    _phongMATapplypointcolor :: Maybe (Tree Bool)
    , _phongMATdarknessemitmapextendu :: Maybe (Tree Int)
    , _phongMATcolormapcoord :: Maybe (Tree Int)
    , _phongMATbackfacelit :: Maybe (Tree Int)
    , _phongMATnormalmapextendw :: Maybe (Tree Int)
    , _phongMATemitmapextendw :: Maybe (Tree Int)
    , _phongMATtexture1mapfilter :: Maybe (Tree Int)
    , _phongMATcolorbuffer7rgb :: Maybe (Tree ByteString)
    , _phongMATdiffusemapanisotropy :: Maybe (Tree Int)
    , _phongMATalphafunc :: Maybe (Tree Int)
    , _phongMATrolloff :: Maybe (Tree Float)
    , _phongMATalphamapcoord :: Maybe (Tree Int)
    , _phongMATwritecameradepthtoalpha :: Maybe (Tree Bool)
    , _phongMATdarknessemit :: Maybe (Tree Bool)
    , _phongMATrim1mapcoordinterp :: Maybe (Tree Int)
    , _phongMATdepthwriting :: Maybe (Tree Bool)
    , _phongMATnormalmapanisotropy :: Maybe (Tree Int)
    , _phongMATdodeform :: Maybe (Tree Bool)
    , _phongMATspecmapanisotropy :: Maybe (Tree Int)
    , _phongMATdarknessemitmapfilter :: Maybe (Tree Int)
    , _phongMATtexture3coord :: Maybe (Tree Int)
    , _phongMATdeformdata :: Maybe (Tree Int)
    , _phongMATemitmapcoord :: Maybe (Tree Int)
    , _phongMATrim1mapextendw :: Maybe (Tree Int)
    , _phongMATemitmapcoordinterp :: Maybe (Tree Int)
    , _phongMATbumpscale :: Maybe (Tree Float)
    , _phongMATcolorbuffer5rgb :: Maybe (Tree ByteString)
    , _phongMATdarknessemitmapextendv :: Maybe (Tree Int)
    , _phongMATtexture2mapfilter :: Maybe (Tree Int)
    , _phongMATdestblenda :: Maybe (Tree Int)
    , _phongMATspecmapcoord :: Maybe (Tree Int)
    , _phongMATtexture4coord :: Maybe (Tree Int)
    , _phongMATrim2enable :: Maybe (Tree Bool)
    , _phongMATalphamultlight :: Maybe (Tree Bool)
    , _phongMATcolormapextendu :: Maybe (Tree Int)
    , _phongMATalphathreshold :: Maybe (Tree Float)
    , _phongMATalphamapcoordinterp :: Maybe (Tree Int)
    , _phongMATnormalmap :: Maybe (Tree TOP)
    , _phongMATmultitexturing :: Maybe (Tree Bool)
    , _phongMATcolormapanisotropy :: Maybe (Tree Int)
    , _phongMATtexture4 :: Maybe (Tree TOP)
    , _phongMATdepthtest :: Maybe (Tree Bool)
    , _phongMATemit :: Vec3
    , _phongMATdepthfunc :: Maybe (Tree Int)
    , _phongMATemitmapextendu :: Maybe (Tree Int)
    , _phongMATtexture1mapextendw :: Maybe (Tree Int)
    , _phongMATalphafront :: Maybe (Tree Float)
    , _phongMATrim2strength :: Maybe (Tree Float)
    , _phongMATtexture3mapextendv :: Maybe (Tree Int)
    , _phongMATtexture1coord :: Maybe (Tree Int)
    , _phongMATtexture4mapextendv :: Maybe (Tree Int)
    , _phongMATspecmapfilter :: Maybe (Tree Int)
    , _phongMATnormalmapextendv :: Maybe (Tree Int)
    , _phongMATnormalmapcoordinterp :: Maybe (Tree Int)
    , _phongMATskelrootpath :: Maybe (Tree ByteString)
    , _phongMATtexture4mapextendu :: Maybe (Tree Int)
    , _phongMATrim1mapanisotropy :: Maybe (Tree Int)
    , _phongMATenvmapanisotropy :: Maybe (Tree Int)
    , _phongMATdiffusemapcoordinterp :: Maybe (Tree Int)
    , _phongMATpolygonoffset :: Maybe (Tree Bool)
    , _phongMATseparatealphafunc :: Maybe (Tree Bool)
    , _phongMATpcaptdata :: Maybe (Tree ByteString)
    , _phongMATdarknessemitmap :: Maybe (Tree TOP)
    , _phongMATalphaside :: Maybe (Tree Float)
    , _phongMATtexture3 :: Maybe (Tree TOP)
    , _phongMATenvmapfilter :: Maybe (Tree Int)
    , _phongMATshadowstrength :: Maybe (Tree Float)
    , _phongMATspecmapextendu :: Maybe (Tree Int)
    , _phongMATenvmapcolor :: Vec3
    , _phongMATpcaptpath :: Maybe (Tree ByteString)
    , _phongMATenvmapextendw :: Maybe (Tree Int)
    , _phongMATdarknessemitmapextendw :: Maybe (Tree Int)
    , _phongMATrim1width :: Maybe (Tree Float)
    , _phongMATenvmapextendu :: Maybe (Tree Int)
    , _phongMATrim1mapfilter :: Maybe (Tree Int)
    , _phongMATtexture1coordinterp :: Maybe (Tree Int)
    , _phongMATspec2 :: Vec3
    , _phongMATambdiff :: Maybe (Tree Bool)
    , _phongMATinstancetexture :: Maybe (Tree ByteString)
    , _phongMATenvmaprotate :: Vec3
    , _phongMATtexture4coordnterp :: Maybe (Tree Int)
    , _phongMATalphatest :: Maybe (Tree Bool)
    , _phongMATtexture2mapanisotropy :: Maybe (Tree Int)
    , _phongMATcolormapfilter :: Maybe (Tree Int)
    , _phongMATfrontfacelit :: Maybe (Tree Int)
    , _phongMATdestblend :: Maybe (Tree Int)
    , _phongMATrim1mapcoord :: Maybe (Tree Int)
    , _phongMATrim2mapanisotropy :: Maybe (Tree Int)
    , _phongMATtexture2mapextendw :: Maybe (Tree Int)
    , _phongMATrim1color :: Vec3
    , _phongMATtexture2 :: Maybe (Tree TOP)
    , _phongMATalphamapextendw :: Maybe (Tree Int)
    , _phongMATamb :: Vec3
    , _phongMATcolorbuffer1rgb :: Maybe (Tree ByteString)
    , _phongMATrim1strengthramp :: Maybe (Tree TOP)
    , _phongMATrim2mapextendv :: Maybe (Tree Int)
    , _phongMATtexture2coordinterp :: Maybe (Tree Int)
    , _phongMATcolorbuffer3rgb :: Maybe (Tree ByteString)
    , _phongMATdiffusemap :: Maybe (Tree TOP)
    , _phongMATenvmaptype2d :: Maybe (Tree Int)
    , _phongMATrim2center :: Maybe (Tree Float)
    , _phongMATcullface :: Maybe (Tree Int)
    , _phongMAToutputshader :: Maybe (Tree Bool)
    , _phongMATtexture1 :: Maybe (Tree TOP)
    , _phongMATcolormapcoordinterp :: Maybe (Tree Int)
    , _phongMATpostmultalpha :: Maybe (Tree Bool)
    , _phongMATnormalmapfilter :: Maybe (Tree Int)
    , _phongMATdiffusemapextendw :: Maybe (Tree Int)
    , _phongMATdiffusemapextendu :: Maybe (Tree Int)
    , _phongMATrim1strength :: Maybe (Tree Float)
    , _phongMATcolormapextendv :: Maybe (Tree Int)
    , _phongMATspecmapcoordinterp :: Maybe (Tree Int)
    , _phongMATrim2mapfilter :: Maybe (Tree Int)
    , _phongMATrim1enable :: Maybe (Tree Bool)
    , _phongMATdarknessemitmapcoord :: Maybe (Tree Int)
    , _phongMATrim2map :: Maybe (Tree TOP)
    , _phongMATspecmap :: Maybe (Tree TOP)
    , _phongMATnormalmapextendu :: Maybe (Tree Int)
    , _phongMATcolormap :: Maybe (Tree TOP)
    , _phongMATtexture3mapextendu :: Maybe (Tree Int)
    , _phongMATmat :: Maybe (Tree MAT)
    , _phongMATrim1mapextendu :: Maybe (Tree Int)
    , _phongMATrim2mapextendu :: Maybe (Tree Int)
    , _phongMATrim2width :: Maybe (Tree Float)
    , _phongMATemitmapanisotropy :: Maybe (Tree Int)
    , _phongMATdiffusemapcoord :: Maybe (Tree Int)
    , _phongMATdiff :: Vec3
    , _phongMATdiffusemapextendv :: Maybe (Tree Int)
    , _phongMATtexture3coordinterp :: Maybe (Tree Int)
    , _phongMATemitmap :: Maybe (Tree TOP)
    , _phongMATtexture3mapanisotropy :: Maybe (Tree Int)
    , _phongMATpolygonoffsetunits :: Maybe (Tree Float)
    , _phongMATcolorbuffer2rgb :: Maybe (Tree ByteString)
    , _phongMATmultitexexpr :: Maybe (Tree ByteString)
    , _phongMATtexture2coord :: Maybe (Tree Int)
    , _phongMATcolorbuffer4rgb :: Maybe (Tree ByteString)
    , _phongMATwirewidth :: Maybe (Tree Float)
    , _phongMATrim2strengthramp :: Maybe (Tree TOP)
    , _phongMATblending :: Maybe (Tree Bool)
    , _phongMATenvmap :: Maybe (Tree TOP)
    , _phongMATalphamapfilter :: Maybe (Tree Int)
    , _phongMATtexture3mapfilter :: Maybe (Tree Int)
    , _phongMATtexture4mapfilter :: Maybe (Tree Int)
    , _phongMATtexture1mapextendu :: Maybe (Tree Int)
    , _phongMATenvmapextendv :: Maybe (Tree Int)
    , _phongMATtexture1mapanisotropy :: Maybe (Tree Int)
    , _phongMATdiffusemapfilter :: Maybe (Tree Int)
    , _phongMATrim2mapextendw :: Maybe (Tree Int)
    , _phongMATshadowcolor :: Vec3
    , _phongMATemitmapextendv :: Maybe (Tree Int)
    , _phongMATtexture4mapanisotropy :: Maybe (Tree Int)
    , _phongMATtexture2mapextendv :: Maybe (Tree Int)
    , _phongMATpolygonoffsetfactor :: Maybe (Tree Float)
    , _phongMATrim2color :: Vec3
    , _phongMATtexture1mapextendv :: Maybe (Tree Int)
    , _phongMATparallaxmapping :: Maybe (Tree Bool)
    , _phongMATcolorbuffer6rgb :: Maybe (Tree ByteString)
    , _phongMATshininess :: Maybe (Tree Float)
    , _phongMATcolormapextendw :: Maybe (Tree Int)
    , _phongMATdarknessemitmapcoordinterp :: Maybe (Tree Int)
    , _phongMATrim1mapextendv :: Maybe (Tree Int)
    , _phongMATrim1center :: Maybe (Tree Float)
    , _phongMATtexture2mapextendu :: Maybe (Tree Int)
    , _phongMATwireframe :: Maybe (Tree Int)
    , _phongMATalphamode :: Maybe (Tree Bool)
    , _phongMATrim1map :: Maybe (Tree TOP)
    , _phongMATconstant :: Vec3
    , _phongMATdarknessemitcolor :: Vec3
    , _phongMATtargetsop :: Maybe (Tree SOP)
    , _phongMATshininess2 :: Maybe (Tree Float)
    , _phongMATalphamapanisotropy :: Maybe (Tree Int)
    , _phongMATnormalmapcoord :: Maybe (Tree Int)
    , _phongMATtexture4mapextendw :: Maybe (Tree Int)
    , _phongMATdarknessemitmapanisotropy :: Maybe (Tree Int)
    , _phongMATspecmapextendw :: Maybe (Tree Int)
    , _phongMATalphamapextendv :: Maybe (Tree Int)
    , _phongMATtexture3mapextendw :: Maybe (Tree Int)
    , _phongMATspec :: Vec3
    , _phongMATrim2mapcoord :: Maybe (Tree Int)
    , _phongMATemitmapfilter :: Maybe (Tree Int)
    , _phongMATalphamapextendu :: Maybe (Tree Int)
    , _phongMATrim2mapcoordinterp :: Maybe (Tree Int)
    , _phongMATsrcblend :: Maybe (Tree Int)
    , _phongMATalphamap :: Maybe (Tree TOP)
    , _phongMATparallaxclamp :: Maybe (Tree Float)
    , _phongMATsrcblenda :: Maybe (Tree Int)
    , _phongMATspecmapextendv :: Maybe (Tree Int)
    , _matCommands :: [CommandType]
    , _matIns :: [Tree MAT]
  }
  | SwitchMAT {
    _switchMATpcaptpath :: Maybe (Tree ByteString)
    , _switchMATwireframe :: Maybe (Tree Int)
    , _switchMATdestblenda :: Maybe (Tree Int)
    , _switchMATmat :: Maybe (Tree MAT)
    , _switchMATdepthfunc :: Maybe (Tree Int)
    , _switchMATcullface :: Maybe (Tree Int)
    , _switchMATskelrootpath :: Maybe (Tree ByteString)
    , _switchMATalphathreshold :: Maybe (Tree Float)
    , _switchMATalphafunc :: Maybe (Tree Int)
    , _switchMATdepthtest :: Maybe (Tree Bool)
    , _switchMATpolygonoffsetunits :: Maybe (Tree Float)
    , _switchMATindex :: Maybe (Tree Int)
    , _switchMATpolygonoffsetfactor :: Maybe (Tree Float)
    , _switchMATpolygonoffset :: Maybe (Tree Bool)
    , _switchMATseparatealphafunc :: Maybe (Tree Bool)
    , _switchMATdepthwriting :: Maybe (Tree Bool)
    , _switchMATdestblend :: Maybe (Tree Int)
    , _switchMATpcaptdata :: Maybe (Tree ByteString)
    , _switchMATdodeform :: Maybe (Tree Bool)
    , _switchMATdeformdata :: Maybe (Tree Int)
    , _switchMATwirewidth :: Maybe (Tree Float)
    , _switchMATtargetsop :: Maybe (Tree SOP)
    , _switchMATsrcblend :: Maybe (Tree Int)
    , _switchMATblending :: Maybe (Tree Bool)
    , _switchMATalphatest :: Maybe (Tree Bool)
    , _switchMATsrcblenda :: Maybe (Tree Int)
    , _matCommands :: [CommandType]
    , _matIns :: [Tree MAT]
  }
  | DepthMAT {
    _depthMATpcaptpath :: Maybe (Tree ByteString)
    , _depthMATwireframe :: Maybe (Tree Int)
    , _depthMATdestblenda :: Maybe (Tree Int)
    , _depthMATmat :: Maybe (Tree MAT)
    , _depthMATdepthfunc :: Maybe (Tree Int)
    , _depthMATcullface :: Maybe (Tree Int)
    , _depthMATskelrootpath :: Maybe (Tree ByteString)
    , _depthMATdestblend :: Maybe (Tree Int)
    , _depthMATalphafunc :: Maybe (Tree Int)
    , _depthMATdepthtest :: Maybe (Tree Bool)
    , _depthMATpolygonoffsetunits :: Maybe (Tree Float)
    , _depthMATpolygonoffsetfactor :: Maybe (Tree Float)
    , _depthMATpolygonoffset :: Maybe (Tree Bool)
    , _depthMATseparatealphafunc :: Maybe (Tree Bool)
    , _depthMATdepthwriting :: Maybe (Tree Bool)
    , _depthMATalphathreshold :: Maybe (Tree Float)
    , _depthMATpcaptdata :: Maybe (Tree ByteString)
    , _depthMATdodeform :: Maybe (Tree Bool)
    , _depthMATdeformdata :: Maybe (Tree Int)
    , _depthMATwirewidth :: Maybe (Tree Float)
    , _depthMATtargetsop :: Maybe (Tree SOP)
    , _depthMATsrcblend :: Maybe (Tree Int)
    , _depthMATblending :: Maybe (Tree Bool)
    , _depthMATalphatest :: Maybe (Tree Bool)
    , _depthMATsrcblenda :: Maybe (Tree Int)
    , _matCommands :: [CommandType]
    , _matIns :: [Tree MAT]
  }
  | SelectMAT {
    _selectMATpcaptpath :: Maybe (Tree ByteString)
    , _selectMATwireframe :: Maybe (Tree Int)
    , _selectMATdestblenda :: Maybe (Tree Int)
    , _selectMATmat :: Maybe (Tree MAT)
    , _selectMATdepthfunc :: Maybe (Tree Int)
    , _selectMATselectmat :: Maybe (Tree MAT)
    , _selectMATskelrootpath :: Maybe (Tree ByteString)
    , _selectMATdestblend :: Maybe (Tree Int)
    , _selectMATalphafunc :: Maybe (Tree Int)
    , _selectMATcullface :: Maybe (Tree Int)
    , _selectMATdepthtest :: Maybe (Tree Bool)
    , _selectMATpolygonoffsetunits :: Maybe (Tree Float)
    , _selectMATpolygonoffsetfactor :: Maybe (Tree Float)
    , _selectMATpolygonoffset :: Maybe (Tree Bool)
    , _selectMATseparatealphafunc :: Maybe (Tree Bool)
    , _selectMATdepthwriting :: Maybe (Tree Bool)
    , _selectMATalphathreshold :: Maybe (Tree Float)
    , _selectMATpcaptdata :: Maybe (Tree ByteString)
    , _selectMATdodeform :: Maybe (Tree Bool)
    , _selectMATdeformdata :: Maybe (Tree Int)
    , _selectMATwirewidth :: Maybe (Tree Float)
    , _selectMATtargetsop :: Maybe (Tree SOP)
    , _selectMATsrcblend :: Maybe (Tree Int)
    , _selectMATblending :: Maybe (Tree Bool)
    , _selectMATalphatest :: Maybe (Tree Bool)
    , _selectMATsrcblenda :: Maybe (Tree Int)
    , _matCommands :: [CommandType]
    , _matIns :: [Tree MAT]
  }
  | ConstantMAT {
    _constantMATpcaptpath :: Maybe (Tree ByteString)
    , _constantMATcolormap :: Maybe (Tree TOP)
    , _constantMATdestblenda :: Maybe (Tree Int)
    , _constantMATmat :: Maybe (Tree MAT)
    , _constantMATalpha :: Maybe (Tree Float)
    , _constantMATcolormapextendu :: Maybe (Tree Int)
    , _constantMATcolormapcoord :: Maybe (Tree Int)
    , _constantMATcullface :: Maybe (Tree Int)
    , _constantMATskelrootpath :: Maybe (Tree ByteString)
    , _constantMATwireframe :: Maybe (Tree Int)
    , _constantMATcolormapcoordinterp :: Maybe (Tree Int)
    , _constantMATalphafunc :: Maybe (Tree Int)
    , _constantMATalphathreshold :: Maybe (Tree Float)
    , _constantMATdepthtest :: Maybe (Tree Bool)
    , _constantMATapplyprojmaps :: Maybe (Tree Bool)
    , _constantMATcolormapfilter :: Maybe (Tree Int)
    , _constantMATpolygonoffsetfactor :: Maybe (Tree Float)
    , _constantMATpolygonoffset :: Maybe (Tree Bool)
    , _constantMATseparatealphafunc :: Maybe (Tree Bool)
    , _constantMATcolormapanisotropy :: Maybe (Tree Int)
    , _constantMATpolygonoffsetunits :: Maybe (Tree Float)
    , _constantMATdestblend :: Maybe (Tree Int)
    , _constantMATcolormapextendv :: Maybe (Tree Int)
    , _constantMATpcaptdata :: Maybe (Tree ByteString)
    , _constantMATdodeform :: Maybe (Tree Bool)
    , _constantMATsrcblend :: Maybe (Tree Int)
    , _constantMATpostmultalpha :: Maybe (Tree Bool)
    , _constantMATwirewidth :: Maybe (Tree Float)
    , _constantMATcolor :: Vec3
    , _constantMATdeformdata :: Maybe (Tree Int)
    , _constantMATtargetsop :: Maybe (Tree SOP)
    , _constantMATcolormapextendw :: Maybe (Tree Int)
    , _constantMATblending :: Maybe (Tree Bool)
    , _constantMATalphatest :: Maybe (Tree Bool)
    , _constantMATdepthfunc :: Maybe (Tree Int)
    , _constantMATdepthwriting :: Maybe (Tree Bool)
    , _constantMATsrcblenda :: Maybe (Tree Int)
    , _matCommands :: [CommandType]
    , _matIns :: [Tree MAT]
  }
  | WireframeMAT {
    _wireframeMATpcaptpath :: Maybe (Tree ByteString)
    , _wireframeMATwireframe :: Maybe (Tree Int)
    , _wireframeMATdestblenda :: Maybe (Tree Int)
    , _wireframeMATmat :: Maybe (Tree MAT)
    , _wireframeMATalpha :: Maybe (Tree Float)
    , _wireframeMATwireframemode :: Maybe (Tree Int)
    , _wireframeMATlinewidth :: Maybe (Tree Float)
    , _wireframeMATcullface :: Maybe (Tree Int)
    , _wireframeMATskelrootpath :: Maybe (Tree ByteString)
    , _wireframeMATdestblend :: Maybe (Tree Int)
    , _wireframeMATalphafunc :: Maybe (Tree Int)
    , _wireframeMATalphathreshold :: Maybe (Tree Float)
    , _wireframeMATdepthtest :: Maybe (Tree Bool)
    , _wireframeMATcolor :: Vec3
    , _wireframeMATpolygonoffsetunits :: Maybe (Tree Float)
    , _wireframeMATpolygonoffsetfactor :: Maybe (Tree Float)
    , _wireframeMATpolygonoffset :: Maybe (Tree Bool)
    , _wireframeMATseparatealphafunc :: Maybe (Tree Bool)
    , _wireframeMATdepthwriting :: Maybe (Tree Bool)
    , _wireframeMATdepthfunc :: Maybe (Tree Int)
    , _wireframeMATpcaptdata :: Maybe (Tree ByteString)
    , _wireframeMATdodeform :: Maybe (Tree Bool)
    , _wireframeMATdeformdata :: Maybe (Tree Int)
    , _wireframeMATwirewidth :: Maybe (Tree Float)
    , _wireframeMATtargetsop :: Maybe (Tree SOP)
    , _wireframeMATsrcblend :: Maybe (Tree Int)
    , _wireframeMATblending :: Maybe (Tree Bool)
    , _wireframeMATalphatest :: Maybe (Tree Bool)
    , _wireframeMATsrcblenda :: Maybe (Tree Int)
    , _matCommands :: [CommandType]
    , _matIns :: [Tree MAT]
  }
  | NullMAT {
    _nullMATpcaptpath :: Maybe (Tree ByteString)
    , _nullMATwireframe :: Maybe (Tree Int)
    , _nullMATdestblenda :: Maybe (Tree Int)
    , _nullMATmat :: Maybe (Tree MAT)
    , _nullMATdepthfunc :: Maybe (Tree Int)
    , _nullMATcullface :: Maybe (Tree Int)
    , _nullMATskelrootpath :: Maybe (Tree ByteString)
    , _nullMATdestblend :: Maybe (Tree Int)
    , _nullMATalphafunc :: Maybe (Tree Int)
    , _nullMATdepthtest :: Maybe (Tree Bool)
    , _nullMATpolygonoffsetunits :: Maybe (Tree Float)
    , _nullMATpolygonoffsetfactor :: Maybe (Tree Float)
    , _nullMATpolygonoffset :: Maybe (Tree Bool)
    , _nullMATseparatealphafunc :: Maybe (Tree Bool)
    , _nullMATdepthwriting :: Maybe (Tree Bool)
    , _nullMATalphathreshold :: Maybe (Tree Float)
    , _nullMATpcaptdata :: Maybe (Tree ByteString)
    , _nullMATdodeform :: Maybe (Tree Bool)
    , _nullMATdeformdata :: Maybe (Tree Int)
    , _nullMATwirewidth :: Maybe (Tree Float)
    , _nullMATtargetsop :: Maybe (Tree SOP)
    , _nullMATsrcblend :: Maybe (Tree Int)
    , _nullMATblending :: Maybe (Tree Bool)
    , _nullMATalphatest :: Maybe (Tree Bool)
    , _nullMATsrcblenda :: Maybe (Tree Int)
    , _matCommands :: [CommandType]
    , _matIns :: [Tree MAT]
  }
  | PbrMAT {
    _pbrMATapplypointcolor :: Maybe (Tree Bool)
    , _pbrMATdarknessemitmapextendu :: Maybe (Tree Int)
    , _pbrMATroughnessmapextendu :: Maybe (Tree Int)
    , _pbrMATbackfacelit :: Maybe (Tree Int)
    , _pbrMATnormalmapextendw :: Maybe (Tree Int)
    , _pbrMATemitmapextendw :: Maybe (Tree Int)
    , _pbrMATcolorbuffer7rgb :: Maybe (Tree ByteString)
    , _pbrMATalphafunc :: Maybe (Tree Int)
    , _pbrMATrolloff :: Maybe (Tree Float)
    , _pbrMATroughnessmapfilter :: Maybe (Tree Int)
    , _pbrMATwritecameradepthtoalpha :: Maybe (Tree Bool)
    , _pbrMATdarknessemit :: Maybe (Tree Bool)
    , _pbrMATrim1mapfilter :: Maybe (Tree Int)
    , _pbrMATdepthwriting :: Maybe (Tree Bool)
    , _pbrMATambientocclusionmapfilter :: Maybe (Tree Int)
    , _pbrMATnormalmapanisotropy :: Maybe (Tree Int)
    , _pbrMATdodeform :: Maybe (Tree Bool)
    , _pbrMATdarknessemitmapfilter :: Maybe (Tree Int)
    , _pbrMATdeformdata :: Maybe (Tree Int)
    , _pbrMATspecularlevelmapextendu :: Maybe (Tree Int)
    , _pbrMATrim1mapextendw :: Maybe (Tree Int)
    , _pbrMATemitmapcoordinterp :: Maybe (Tree Int)
    , _pbrMATbumpscale :: Maybe (Tree Float)
    , _pbrMATmetallicmapcoord :: Maybe (Tree Int)
    , _pbrMATdarknessemitmapextendv :: Maybe (Tree Int)
    , _pbrMATdestblenda :: Maybe (Tree Int)
    , _pbrMAToutputshader :: Maybe (Tree Bool)
    , _pbrMATrim2enable :: Maybe (Tree Bool)
    , _pbrMATalphamultlight :: Maybe (Tree Bool)
    , _pbrMATenvlightquality :: Maybe (Tree Float)
    , _pbrMATalphathreshold :: Maybe (Tree Float)
    , _pbrMATalphamapcoordinterp :: Maybe (Tree Int)
    , _pbrMATspecularlevelmapchannelsource :: Maybe (Tree Int)
    , _pbrMATnormalmap :: Maybe (Tree TOP)
    , _pbrMATdepthtest :: Maybe (Tree Bool)
    , _pbrMATambientocclusionmapextendu :: Maybe (Tree Int)
    , _pbrMATemit :: Vec3
    , _pbrMATdepthfunc :: Maybe (Tree Int)
    , _pbrMATemitmapextendu :: Maybe (Tree Int)
    , _pbrMATambientocclusionmap :: Maybe (Tree TOP)
    , _pbrMATroughnessmap :: Maybe (Tree TOP)
    , _pbrMATalphafront :: Maybe (Tree Float)
    , _pbrMATspecularlevelmapextendw :: Maybe (Tree Int)
    , _pbrMATalphatest :: Maybe (Tree Bool)
    , _pbrMATspecularlevelmapfilter :: Maybe (Tree Int)
    , _pbrMATheightmapcoord :: Maybe (Tree Int)
    , _pbrMATnormalmapextendv :: Maybe (Tree Int)
    , _pbrMATnormalmapcoordinterp :: Maybe (Tree Int)
    , _pbrMATskelrootpath :: Maybe (Tree ByteString)
    , _pbrMATroughnessmapcoord :: Maybe (Tree Int)
    , _pbrMATheightmapextendv :: Maybe (Tree Int)
    , _pbrMATalphamapcoord :: Maybe (Tree Int)
    , _pbrMATrim1mapanisotropy :: Maybe (Tree Int)
    , _pbrMATwirewidth :: Maybe (Tree Float)
    , _pbrMATroughnessmapchannelsource :: Maybe (Tree Int)
    , _pbrMATseparatealphafunc :: Maybe (Tree Bool)
    , _pbrMATrim2mapfilter :: Maybe (Tree Int)
    , _pbrMATpcaptdata :: Maybe (Tree ByteString)
    , _pbrMATdarknessemitmap :: Maybe (Tree TOP)
    , _pbrMATalphaside :: Maybe (Tree Float)
    , _pbrMATheightmapanisotropy :: Maybe (Tree Int)
    , _pbrMATshadowstrength :: Maybe (Tree Float)
    , _pbrMATroughness :: Maybe (Tree Float)
    , _pbrMATpcaptpath :: Maybe (Tree ByteString)
    , _pbrMATbasecolor :: Vec3
    , _pbrMATrim1width :: Maybe (Tree Float)
    , _pbrMATroughnessmapanisotropy :: Maybe (Tree Int)
    , _pbrMATmetalnessmapfilter :: Maybe (Tree Int)
    , _pbrMATrim1mapcoordinterp :: Maybe (Tree Int)
    , _pbrMATbasecolormapextendw :: Maybe (Tree Int)
    , _pbrMATheightmapextendu :: Maybe (Tree Int)
    , _pbrMATroughnessmapcoordinterp :: Maybe (Tree Int)
    , _pbrMATambientocclusionmapcoordinterp :: Maybe (Tree Int)
    , _pbrMATinstancetexture :: Maybe (Tree ByteString)
    , _pbrMATnormalmapcoord :: Maybe (Tree Int)
    , _pbrMATrim2strength :: Maybe (Tree Float)
    , _pbrMATheightmapextendw :: Maybe (Tree Int)
    , _pbrMATfrontfacelit :: Maybe (Tree Int)
    , _pbrMATdestblend :: Maybe (Tree Int)
    , _pbrMATrim1mapcoord :: Maybe (Tree Int)
    , _pbrMATrim2mapanisotropy :: Maybe (Tree Int)
    , _pbrMATmetallicmap :: Maybe (Tree TOP)
    , _pbrMATrim1color :: Vec3
    , _pbrMATmetalnessmapextendu :: Maybe (Tree Int)
    , _pbrMATspecularlevel :: Maybe (Tree Float)
    , _pbrMATalphamapextendw :: Maybe (Tree Int)
    , _pbrMATconstant :: Vec3
    , _pbrMATcolorbuffer1rgb :: Maybe (Tree ByteString)
    , _pbrMATrim2mapextendv :: Maybe (Tree Int)
    , _pbrMATcolorbuffer3rgb :: Maybe (Tree ByteString)
    , _pbrMATsubstance :: Maybe (Tree TOP)
    , _pbrMATbasecolormapcoord :: Maybe (Tree Int)
    , _pbrMATambientocclusionmapextendv :: Maybe (Tree Int)
    , _pbrMATrim2center :: Maybe (Tree Float)
    , _pbrMATcullface :: Maybe (Tree Int)
    , _pbrMATspecularlevelmapcoordinterp :: Maybe (Tree Int)
    , _pbrMATmetallicmapcoordinterp :: Maybe (Tree Int)
    , _pbrMATambientocclusionmapcoord :: Maybe (Tree Int)
    , _pbrMATparallaxmapping :: Maybe (Tree Bool)
    , _pbrMATpostmultalpha :: Maybe (Tree Bool)
    , _pbrMATnormalmapfilter :: Maybe (Tree Int)
    , _pbrMATdarknessemitmapextendw :: Maybe (Tree Int)
    , _pbrMATrim1strength :: Maybe (Tree Float)
    , _pbrMATheightmap :: Maybe (Tree TOP)
    , _pbrMATrim1enable :: Maybe (Tree Bool)
    , _pbrMATdarknessemitmapcoord :: Maybe (Tree Int)
    , _pbrMATmetallic :: Maybe (Tree Float)
    , _pbrMATrim2map :: Maybe (Tree TOP)
    , _pbrMATheightmapcoordinterp :: Maybe (Tree Int)
    , _pbrMATnormalmapextendu :: Maybe (Tree Int)
    , _pbrMATroughnessmapextendw :: Maybe (Tree Int)
    , _pbrMATspecularlevelmapextendv :: Maybe (Tree Int)
    , _pbrMATmat :: Maybe (Tree MAT)
    , _pbrMATrim1mapextendu :: Maybe (Tree Int)
    , _pbrMATrim2mapextendu :: Maybe (Tree Int)
    , _pbrMATbasecolormapanisotropy :: Maybe (Tree Int)
    , _pbrMATrim2width :: Maybe (Tree Float)
    , _pbrMATemitmapanisotropy :: Maybe (Tree Int)
    , _pbrMATheightmapfilter :: Maybe (Tree Int)
    , _pbrMATbasecolormapextendv :: Maybe (Tree Int)
    , _pbrMATemitmap :: Maybe (Tree TOP)
    , _pbrMATpolygonoffsetunits :: Maybe (Tree Float)
    , _pbrMATcolorbuffer2rgb :: Maybe (Tree ByteString)
    , _pbrMATcolorbuffer4rgb :: Maybe (Tree ByteString)
    , _pbrMATbasecolormap :: Maybe (Tree TOP)
    , _pbrMATspecularlevelmapcoord :: Maybe (Tree Int)
    , _pbrMATrim2strengthramp :: Maybe (Tree TOP)
    , _pbrMATblending :: Maybe (Tree Bool)
    , _pbrMATcolorbuffer5rgb :: Maybe (Tree ByteString)
    , _pbrMATalphamapfilter :: Maybe (Tree Int)
    , _pbrMATbasecolormapfilter :: Maybe (Tree Int)
    , _pbrMATbasecolormapextendu :: Maybe (Tree Int)
    , _pbrMATrim2mapextendw :: Maybe (Tree Int)
    , _pbrMATheightmapchannelsource :: Maybe (Tree Int)
    , _pbrMATshadowcolor :: Vec3
    , _pbrMATemitmapextendv :: Maybe (Tree Int)
    , _pbrMATambientocclusionmapextendw :: Maybe (Tree Int)
    , _pbrMATambientocclusionmapanisotropy :: Maybe (Tree Int)
    , _pbrMATpolygonoffsetfactor :: Maybe (Tree Float)
    , _pbrMATmetallicmapchannelsource :: Maybe (Tree Int)
    , _pbrMATrim2color :: Vec3
    , _pbrMATroughnessmapextendv :: Maybe (Tree Int)
    , _pbrMATambientocclusion :: Maybe (Tree Float)
    , _pbrMATcolorbuffer6rgb :: Maybe (Tree ByteString)
    , _pbrMATdarknessemitmapcoordinterp :: Maybe (Tree Int)
    , _pbrMATrim1mapextendv :: Maybe (Tree Int)
    , _pbrMATrim1center :: Maybe (Tree Float)
    , _pbrMATmetalnessmapextendv :: Maybe (Tree Int)
    , _pbrMATemitmapcoord :: Maybe (Tree Int)
    , _pbrMATwireframe :: Maybe (Tree Int)
    , _pbrMATalphamode :: Maybe (Tree Bool)
    , _pbrMATrim1map :: Maybe (Tree TOP)
    , _pbrMATdarknessemitcolor :: Vec3
    , _pbrMATtargetsop :: Maybe (Tree SOP)
    , _pbrMATalphamapanisotropy :: Maybe (Tree Int)
    , _pbrMATmetalnessmapanisotropy :: Maybe (Tree Int)
    , _pbrMATpolygonoffset :: Maybe (Tree Bool)
    , _pbrMATrim1strengthramp :: Maybe (Tree TOP)
    , _pbrMATdarknessemitmapanisotropy :: Maybe (Tree Int)
    , _pbrMATmetalnessmapextendw :: Maybe (Tree Int)
    , _pbrMATspecularlevelmap :: Maybe (Tree TOP)
    , _pbrMATalphamapextendv :: Maybe (Tree Int)
    , _pbrMATspecularlevelmapanisotropy :: Maybe (Tree Int)
    , _pbrMATrim2mapcoord :: Maybe (Tree Int)
    , _pbrMATemitmapfilter :: Maybe (Tree Int)
    , _pbrMATbasecolormapcoordinterp :: Maybe (Tree Int)
    , _pbrMATalphamapextendu :: Maybe (Tree Int)
    , _pbrMATrim2mapcoordinterp :: Maybe (Tree Int)
    , _pbrMATsrcblend :: Maybe (Tree Int)
    , _pbrMATalphamap :: Maybe (Tree TOP)
    , _pbrMATparallaxclamp :: Maybe (Tree Float)
    , _pbrMATambientocclusionmapchannelsource :: Maybe (Tree Int)
    , _pbrMATsrcblenda :: Maybe (Tree Int)
    , _matCommands :: [CommandType]
    , _matIns :: [Tree MAT]
  }
  | GlslMAT {
    _glslMATvalue3 :: Vec4
    , _glslMATtop15extendw :: Maybe (Tree Int)
    , _glslMATglslversion :: Maybe (Tree Int)
    , _glslMATtop3extendv :: Maybe (Tree Int)
    , _glslMATtop5extendv :: Maybe (Tree Int)
    , _glslMATcullface :: Maybe (Tree Int)
    , _glslMATtop9filter :: Maybe (Tree Int)
    , _glslMATalphafunc :: Maybe (Tree Int)
    , _glslMATgdat :: Maybe (Tree DAT)
    , _glslMATsampler7 :: Maybe (Tree ByteString)
    , _glslMATsampler3 :: Maybe (Tree ByteString)
    , _glslMATtop13extendw :: Maybe (Tree Int)
    , _glslMATvalue10 :: Vec4
    , _glslMATtop12anisotropy :: Maybe (Tree Int)
    , _glslMATuniname12 :: Maybe (Tree ByteString)
    , _glslMATtop1extendv :: Maybe (Tree Int)
    , _glslMATchanscope8 :: Maybe (Tree ByteString)
    , _glslMATchanscope7 :: Maybe (Tree ByteString)
    , _glslMATtop6extendu :: Maybe (Tree Int)
    , _glslMATtop11extendw :: Maybe (Tree Int)
    , _glslMATtop0filter :: Maybe (Tree Int)
    , _glslMATuniname10 :: Maybe (Tree ByteString)
    , _glslMATchopuniname7 :: Maybe (Tree ByteString)
    , _glslMATuniname11 :: Maybe (Tree ByteString)
    , _glslMATvalue19 :: Vec4
    , _glslMATchop6 :: Maybe (Tree CHOP)
    , _glslMATchopunitype2 :: Maybe (Tree Int)
    , _glslMATclearuniformnames :: Maybe (Tree Bool)
    , _glslMATuniname5 :: Maybe (Tree ByteString)
    , _glslMATvalue9 :: Vec4
    , _glslMATuniname4 :: Maybe (Tree ByteString)
    , _glslMATsampler11 :: Maybe (Tree ByteString)
    , _glslMATchopuniname9 :: Maybe (Tree ByteString)
    , _glslMATtop6 :: Maybe (Tree TOP)
    , _glslMATtop11filter :: Maybe (Tree Int)
    , _glslMATtop4extendu :: Maybe (Tree Int)
    , _glslMATvalue13 :: Vec4
    , _glslMATchopunitype8 :: Maybe (Tree Int)
    , _glslMATsampler1 :: Maybe (Tree ByteString)
    , _glslMATsampler13 :: Maybe (Tree ByteString)
    , _glslMATvdat :: Maybe (Tree DAT)
    , _glslMATtop6anisotropy :: Maybe (Tree Int)
    , _glslMATuniname14 :: Maybe (Tree ByteString)
    , _glslMATchoparraytype8 :: Maybe (Tree Int)
    , _glslMATvalue17 :: Vec4
    , _glslMATtop2extendu :: Maybe (Tree Int)
    , _glslMATchopuniname8 :: Maybe (Tree ByteString)
    , _glslMATtop14anisotropy :: Maybe (Tree Int)
    , _glslMATtop5anisotropy :: Maybe (Tree Int)
    , _glslMATchopunitype3 :: Maybe (Tree Int)
    , _glslMATchopunitype7 :: Maybe (Tree Int)
    , _glslMATuniname2 :: Maybe (Tree ByteString)
    , _glslMATvalue6 :: Vec4
    , _glslMATtop13extendu :: Maybe (Tree Int)
    , _glslMATtop7extendw :: Maybe (Tree Int)
    , _glslMATtop5extendu :: Maybe (Tree Int)
    , _glslMATuniname0 :: Maybe (Tree ByteString)
    , _glslMATchopunitype5 :: Maybe (Tree Int)
    , _glslMATvalue21 :: Vec4
    , _glslMATdepthtest :: Maybe (Tree Bool)
    , _glslMATtop4extendw :: Maybe (Tree Int)
    , _glslMATsampler8 :: Maybe (Tree ByteString)
    , _glslMATchopunitype6 :: Maybe (Tree Int)
    , _glslMATvalue4 :: Vec4
    , _glslMATtop10anisotropy :: Maybe (Tree Int)
    , _glslMATvalue15 :: Vec4
    , _glslMATskelrootpath :: Maybe (Tree ByteString)
    , _glslMATchop3 :: Maybe (Tree CHOP)
    , _glslMATtop6filter :: Maybe (Tree Int)
    , _glslMATunimatrixname4 :: Maybe (Tree ByteString)
    , _glslMATtop15 :: Maybe (Tree TOP)
    , _glslMATuniname20 :: Maybe (Tree ByteString)
    , _glslMATtop7 :: Maybe (Tree TOP)
    , _glslMATuniname3 :: Maybe (Tree ByteString)
    , _glslMATtop12 :: Maybe (Tree TOP)
    , _glslMATpolygonoffset :: Maybe (Tree Bool)
    , _glslMATseparatealphafunc :: Maybe (Tree Bool)
    , _glslMATchopuniname2 :: Maybe (Tree ByteString)
    , _glslMATsampler14 :: Maybe (Tree ByteString)
    , _glslMATuniname9 :: Maybe (Tree ByteString)
    , _glslMATtop3anisotropy :: Maybe (Tree Int)
    , _glslMATchop5 :: Maybe (Tree CHOP)
    , _glslMATchopuniname0 :: Maybe (Tree ByteString)
    , _glslMATchoparraytype6 :: Maybe (Tree Int)
    , _glslMATtop3 :: Maybe (Tree TOP)
    , _glslMATchanscope1 :: Maybe (Tree ByteString)
    , _glslMATtop10 :: Maybe (Tree TOP)
    , _glslMATloaduniformnames :: Maybe (Tree Bool)
    , _glslMATchopuniname4 :: Maybe (Tree ByteString)
    , _glslMATchopuniname1 :: Maybe (Tree ByteString)
    , _glslMATtop1extendu :: Maybe (Tree Int)
    , _glslMATtop7filter :: Maybe (Tree Int)
    , _glslMATvalue8 :: Vec4
    , _glslMATtop9extendv :: Maybe (Tree Int)
    , _glslMATtop7extendu :: Maybe (Tree Int)
    , _glslMATchoparraytype1 :: Maybe (Tree Int)
    , _glslMATtop2anisotropy :: Maybe (Tree Int)
    , _glslMATtop1extendw :: Maybe (Tree Int)
    , _glslMATuniname13 :: Maybe (Tree ByteString)
    , _glslMATtop2extendv :: Maybe (Tree Int)
    , _glslMATtop7anisotropy :: Maybe (Tree Int)
    , _glslMATchopunitype0 :: Maybe (Tree Int)
    , _glslMATdestblend :: Maybe (Tree Int)
    , _glslMATtop4 :: Maybe (Tree TOP)
    , _glslMATtop0extendu :: Maybe (Tree Int)
    , _glslMATchanscope0 :: Maybe (Tree ByteString)
    , _glslMATtop13anisotropy :: Maybe (Tree Int)
    , _glslMATalphatest :: Maybe (Tree Bool)
    , _glslMATvalue0 :: Vec4
    , _glslMATtop12extendu :: Maybe (Tree Int)
    , _glslMATchoparraytype4 :: Maybe (Tree Int)
    , _glslMATchopunitype4 :: Maybe (Tree Int)
    , _glslMATtop8anisotropy :: Maybe (Tree Int)
    , _glslMATtop1anisotropy :: Maybe (Tree Int)
    , _glslMATtop15extendu :: Maybe (Tree Int)
    , _glslMATtop14extendu :: Maybe (Tree Int)
    , _glslMATchop8 :: Maybe (Tree CHOP)
    , _glslMATunimatrixname3 :: Maybe (Tree ByteString)
    , _glslMATtop15filter :: Maybe (Tree Int)
    , _glslMATchopunitype9 :: Maybe (Tree Int)
    , _glslMATtop11extendv :: Maybe (Tree Int)
    , _glslMATtop14extendv :: Maybe (Tree Int)
    , _glslMATdodeform :: Maybe (Tree Bool)
    , _glslMATtop10extendw :: Maybe (Tree Int)
    , _glslMATtop11anisotropy :: Maybe (Tree Int)
    , _glslMATtop13extendv :: Maybe (Tree Int)
    , _glslMAToutprim :: Maybe (Tree Int)
    , _glslMATchopuniname3 :: Maybe (Tree ByteString)
    , _glslMATtop0extendw :: Maybe (Tree Int)
    , _glslMATtop11 :: Maybe (Tree TOP)
    , _glslMATvalue1 :: Vec4
    , _glslMATtop9anisotropy :: Maybe (Tree Int)
    , _glslMATchopuniname6 :: Maybe (Tree ByteString)
    , _glslMATalphathreshold :: Maybe (Tree Float)
    , _glslMATsampler0 :: Maybe (Tree ByteString)
    , _glslMATtop10filter :: Maybe (Tree Int)
    , _glslMATtop13filter :: Maybe (Tree Int)
    , _glslMATchoparraytype9 :: Maybe (Tree Int)
    , _glslMATchanscope6 :: Maybe (Tree ByteString)
    , _glslMATtop9extendw :: Maybe (Tree Int)
    , _glslMATvalue20 :: Vec4
    , _glslMATuniname1 :: Maybe (Tree ByteString)
    , _glslMATnumout :: Maybe (Tree Int)
    , _glslMATuniname17 :: Maybe (Tree ByteString)
    , _glslMATchanscope9 :: Maybe (Tree ByteString)
    , _glslMATunimatrixname2 :: Maybe (Tree ByteString)
    , _glslMATuniname8 :: Maybe (Tree ByteString)
    , _glslMATchanscope2 :: Maybe (Tree ByteString)
    , _glslMATsampler4 :: Maybe (Tree ByteString)
    , _glslMATdepthfunc :: Maybe (Tree Int)
    , _glslMATchopuniname5 :: Maybe (Tree ByteString)
    , _glslMATtop8extendw :: Maybe (Tree Int)
    , _glslMATtop4filter :: Maybe (Tree Int)
    , _glslMATchop2 :: Maybe (Tree CHOP)
    , _glslMATtop8filter :: Maybe (Tree Int)
    , _glslMATmat :: Maybe (Tree MAT)
    , _glslMATblending :: Maybe (Tree Bool)
    , _glslMATtop13 :: Maybe (Tree TOP)
    , _glslMATchop9 :: Maybe (Tree CHOP)
    , _glslMATchop0 :: Maybe (Tree CHOP)
    , _glslMATuniname19 :: Maybe (Tree ByteString)
    , _glslMATsampler6 :: Maybe (Tree ByteString)
    , _glslMATvalue11 :: Vec4
    , _glslMATdeformdata :: Maybe (Tree Int)
    , _glslMATtop2filter :: Maybe (Tree Int)
    , _glslMATuniname7 :: Maybe (Tree ByteString)
    , _glslMATtop14filter :: Maybe (Tree Int)
    , _glslMATpcaptpath :: Maybe (Tree ByteString)
    , _glslMATvalue5 :: Vec4
    , _glslMATchop1 :: Maybe (Tree CHOP)
    , _glslMATpolygonoffsetunits :: Maybe (Tree Float)
    , _glslMATtop5extendw :: Maybe (Tree Int)
    , _glslMATtop1 :: Maybe (Tree TOP)
    , _glslMATtop1filter :: Maybe (Tree Int)
    , _glslMATchanscope3 :: Maybe (Tree ByteString)
    , _glslMATsampler9 :: Maybe (Tree ByteString)
    , _glslMATchop4 :: Maybe (Tree CHOP)
    , _glslMATsampler12 :: Maybe (Tree ByteString)
    , _glslMATsampler2 :: Maybe (Tree ByteString)
    , _glslMATwirewidth :: Maybe (Tree Float)
    , _glslMATtop2 :: Maybe (Tree TOP)
    , _glslMATtop10extendv :: Maybe (Tree Int)
    , _glslMATtop7extendv :: Maybe (Tree Int)
    , _glslMATtop8 :: Maybe (Tree TOP)
    , _glslMATunimatrixname0 :: Maybe (Tree ByteString)
    , _glslMATtop12filter :: Maybe (Tree Int)
    , _glslMATdestblenda :: Maybe (Tree Int)
    , _glslMATchoparraytype7 :: Maybe (Tree Int)
    , _glslMATchop7 :: Maybe (Tree CHOP)
    , _glslMATtop14extendw :: Maybe (Tree Int)
    , _glslMATtop15extendv :: Maybe (Tree Int)
    , _glslMATdepthwriting :: Maybe (Tree Bool)
    , _glslMATsampler15 :: Maybe (Tree ByteString)
    , _glslMATchopunitype1 :: Maybe (Tree Int)
    , _glslMATunimatrixname1 :: Maybe (Tree ByteString)
    , _glslMATtop0anisotropy :: Maybe (Tree Int)
    , _glslMATtop6extendv :: Maybe (Tree Int)
    , _glslMATtop0extendv :: Maybe (Tree Int)
    , _glslMATtop3extendw :: Maybe (Tree Int)
    , _glslMATpolygonoffsetfactor :: Maybe (Tree Float)
    , _glslMATtop4anisotropy :: Maybe (Tree Int)
    , _glslMATinprim :: Maybe (Tree Int)
    , _glslMATtwocolor :: Maybe (Tree Bool)
    , _glslMATchoparraytype0 :: Maybe (Tree Int)
    , _glslMATtop4extendv :: Maybe (Tree Int)
    , _glslMATuniname16 :: Maybe (Tree ByteString)
    , _glslMATchoparraytype3 :: Maybe (Tree Int)
    , _glslMATtop3filter :: Maybe (Tree Int)
    , _glslMATpdat :: Maybe (Tree DAT)
    , _glslMATtop10extendu :: Maybe (Tree Int)
    , _glslMATuniname6 :: Maybe (Tree ByteString)
    , _glslMATsampler5 :: Maybe (Tree ByteString)
    , _glslMATtop14 :: Maybe (Tree TOP)
    , _glslMATtop8extendu :: Maybe (Tree Int)
    , _glslMATwireframe :: Maybe (Tree Int)
    , _glslMATtop3extendu :: Maybe (Tree Int)
    , _glslMATtargetsop :: Maybe (Tree SOP)
    , _glslMATvalue2 :: Vec4
    , _glslMATtop9 :: Maybe (Tree TOP)
    , _glslMATtop9extendu :: Maybe (Tree Int)
    , _glslMATtop2extendw :: Maybe (Tree Int)
    , _glslMATuniname21 :: Maybe (Tree ByteString)
    , _glslMATuniname15 :: Maybe (Tree ByteString)
    , _glslMATtop0 :: Maybe (Tree TOP)
    , _glslMATvalue14 :: Vec4
    , _glslMATtop12extendw :: Maybe (Tree Int)
    , _glslMATvalue16 :: Vec4
    , _glslMATtop5 :: Maybe (Tree TOP)
    , _glslMATpcaptdata :: Maybe (Tree ByteString)
    , _glslMATtop6extendw :: Maybe (Tree Int)
    , _glslMATtop8extendv :: Maybe (Tree Int)
    , _glslMATchoparraytype2 :: Maybe (Tree Int)
    , _glslMATlightingspace :: Maybe (Tree Int)
    , _glslMATuniname18 :: Maybe (Tree ByteString)
    , _glslMATinherit :: Maybe (Tree MAT)
    , _glslMATtop5filter :: Maybe (Tree Int)
    , _glslMATchoparraytype5 :: Maybe (Tree Int)
    , _glslMATtop12extendv :: Maybe (Tree Int)
    , _glslMATvalue7 :: Vec4
    , _glslMATsrcblend :: Maybe (Tree Int)
    , _glslMATtop11extendu :: Maybe (Tree Int)
    , _glslMATvalue18 :: Vec4
    , _glslMATchanscope4 :: Maybe (Tree ByteString)
    , _glslMATvalue12 :: Vec4
    , _glslMATsrcblenda :: Maybe (Tree Int)
    , _glslMATchanscope5 :: Maybe (Tree ByteString)
    , _glslMATtop15anisotropy :: Maybe (Tree Int)
    , _glslMATsampler10 :: Maybe (Tree ByteString)
    , _matCommands :: [CommandType]
    , _matIns :: [Tree MAT]
  }


data SOP = 
  ForceSOP {
    _forceSOPvortex :: Maybe (Tree Float)
    , _forceSOPdoradial :: Maybe (Tree Bool)
    , _forceSOPspiral :: Maybe (Tree Float)
    , _forceSOPdir :: Vec3
    , _forceSOPdoaxis :: Maybe (Tree Bool)
    , _forceSOPaxial :: Maybe (Tree Float)
    , _forceSOPradial :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ParticleSOP {
    _particleSOPsplittype :: Maybe (Tree Int)
    , _particleSOPresetpulse :: Maybe (Tree Bool)
    , _particleSOPattractmode :: Maybe (Tree Int)
    , _particleSOPdrag :: Maybe (Tree Float)
    , _particleSOPgaintan :: Maybe (Tree Float)
    , _particleSOPrmunused :: Maybe (Tree Bool)
    , _particleSOPsplitmin :: Maybe (Tree Int)
    , _particleSOPdoid :: Maybe (Tree Bool)
    , _particleSOPsplitvar :: Vec3
    , _particleSOPmass :: Maybe (Tree Float)
    , _particleSOPdomass :: Maybe (Tree Bool)
    , _particleSOPgainnorm :: Maybe (Tree Float)
    , _particleSOPsplitmax :: Maybe (Tree Int)
    , _particleSOPbirth :: Maybe (Tree Float)
    , _particleSOPtimeinc :: Maybe (Tree Float)
    , _particleSOPexternal :: Vec3
    , _particleSOPdodrag :: Maybe (Tree Bool)
    , _particleSOPjitter :: Maybe (Tree Bool)
    , _particleSOPlimitpos :: Vec3
    , _particleSOPprtype :: Maybe (Tree Int)
    , _particleSOPbehave :: Maybe (Tree Int)
    , _particleSOPnormals :: Maybe (Tree Bool)
    , _particleSOPperiod :: Maybe (Tree Float)
    , _particleSOPaccurate :: Maybe (Tree Bool)
    , _particleSOPturb :: Vec3
    , _particleSOPptreuse :: Maybe (Tree Int)
    , _particleSOPtimepreroll :: Maybe (Tree Float)
    , _particleSOPhit :: Maybe (Tree Int)
    , _particleSOPseed :: Maybe (Tree Int)
    , _particleSOPlife :: Maybe (Tree Float)
    , _particleSOPsplitvel :: Vec3
    , _particleSOPsourcegrp :: Maybe (Tree ByteString)
    , _particleSOPmaxsteps :: Maybe (Tree Int)
    , _particleSOPlifevar :: Maybe (Tree Float)
    , _particleSOPlimitneg :: Vec3
    , _particleSOPalpha :: Maybe (Tree Float)
    , _particleSOPreset :: Maybe (Tree Bool)
    , _particleSOPwind :: Vec3
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | RailsSOP {
    _railsSOPnewg :: Maybe (Tree Bool)
    , _railsSOPcycle :: Maybe (Tree Int)
    , _railsSOPxsectgrp :: Maybe (Tree ByteString)
    , _railsSOPfirstl :: Maybe (Tree Bool)
    , _railsSOPrailname :: Maybe (Tree ByteString)
    , _railsSOPusedir :: Maybe (Tree Bool)
    , _railsSOProll :: Maybe (Tree Float)
    , _railsSOPstretch :: Maybe (Tree Bool)
    , _railsSOPnoflip :: Maybe (Tree Bool)
    , _railsSOPvertex1 :: Maybe (Tree Int)
    , _railsSOPusevtx :: Maybe (Tree Bool)
    , _railsSOPdir :: Vec3
    , _railsSOPvertex2 :: Maybe (Tree Int)
    , _railsSOPscale :: Maybe (Tree Float)
    , _railsSOPrailgrp :: Maybe (Tree ByteString)
    , _railsSOPpairs :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | CacheSOP {
    _cacheSOPblendpos :: Maybe (Tree Bool)
    , _cacheSOPoutputindex :: Maybe (Tree Float)
    , _cacheSOPactive :: Maybe (Tree Bool)
    , _cacheSOPresetpulse :: Maybe (Tree Bool)
    , _cacheSOPcachesize :: Maybe (Tree Int)
    , _cacheSOPcachepoints :: Maybe (Tree Bool)
    , _cacheSOPprefill :: Maybe (Tree Bool)
    , _cacheSOPreset :: Maybe (Tree Bool)
    , _cacheSOPstep :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | CircleSOP {
    _circleSOPtype :: Maybe (Tree Int)
    , _circleSOPnormals :: Maybe (Tree Bool)
    , _circleSOPdivs :: Maybe (Tree Int)
    , _circleSOPtexture :: Maybe (Tree Int)
    , _circleSOPmodifybounds :: Maybe (Tree Bool)
    , _circleSOPbeginangle :: Maybe (Tree Float)
    , _circleSOPimperfect :: Maybe (Tree Bool)
    , _circleSOParc :: Maybe (Tree Int)
    , _circleSOPorient :: Maybe (Tree Int)
    , _circleSOPrad :: Vec2
    , _circleSOPt :: Vec3
    , _circleSOPendangle :: Maybe (Tree Float)
    , _circleSOPorder :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | CarveSOP {
    _carveSOPdomainv2 :: Maybe (Tree Float)
    , _carveSOPfirstv :: Maybe (Tree Bool)
    , _carveSOPkeepout :: Maybe (Tree Bool)
    , _carveSOPfirstu :: Maybe (Tree Bool)
    , _carveSOPsecondv :: Maybe (Tree Bool)
    , _carveSOPkeeporiginal :: Maybe (Tree Bool)
    , _carveSOPdomainu2 :: Maybe (Tree Float)
    , _carveSOPdomainu1 :: Maybe (Tree Float)
    , _carveSOPdivsu :: Maybe (Tree Int)
    , _carveSOPdomainv1 :: Maybe (Tree Float)
    , _carveSOPkeepin :: Maybe (Tree Bool)
    , _carveSOPallvbreakpoints :: Maybe (Tree Bool)
    , _carveSOPgroup :: Maybe (Tree ByteString)
    , _carveSOPextractop :: Maybe (Tree Int)
    , _carveSOPsecondu :: Maybe (Tree Bool)
    , _carveSOPallubreakpoints :: Maybe (Tree Bool)
    , _carveSOPdivsv :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | PrimitiveSOP {
    _primitiveSOPdoweight :: Maybe (Tree Float)
    , _primitiveSOPcustom2val1 :: Maybe (Tree Float)
    , _primitiveSOPalpha :: Maybe (Tree Float)
    , _primitiveSOPdoclr :: Maybe (Tree Int)
    , _primitiveSOPdocrease :: Maybe (Tree Int)
    , _primitiveSOPtemplategrp :: Maybe (Tree ByteString)
    , _primitiveSOPcustom2 :: Maybe (Tree ByteString)
    , _primitiveSOPprtype :: Maybe (Tree Int)
    , _primitiveSOPcustom1 :: Maybe (Tree ByteString)
    , _primitiveSOPdiff :: Vec3
    , _primitiveSOPvtxuoff :: Maybe (Tree Int)
    , _primitiveSOPdorot :: Maybe (Tree Int)
    , _primitiveSOPpshapeu :: Maybe (Tree Bool)
    , _primitiveSOPcustom1val3 :: Maybe (Tree Float)
    , _primitiveSOPxord :: Maybe (Tree Int)
    , _primitiveSOPcrease :: Maybe (Tree Float)
    , _primitiveSOPr :: Vec3
    , _primitiveSOPcustom1val2 :: Maybe (Tree Float)
    , _primitiveSOPdoprender :: Maybe (Tree Bool)
    , _primitiveSOPcustom2val3 :: Maybe (Tree Float)
    , _primitiveSOPs :: Vec3
    , _primitiveSOPp :: Vec3
    , _primitiveSOPcustom2val4 :: Maybe (Tree Float)
    , _primitiveSOPvtxsort :: Maybe (Tree Int)
    , _primitiveSOPvtxvoff :: Maybe (Tree Int)
    , _primitiveSOPdoxform :: Maybe (Tree Bool)
    , _primitiveSOPcloseu :: Maybe (Tree Int)
    , _primitiveSOPcustom1val4 :: Maybe (Tree Float)
    , _primitiveSOPclampu :: Maybe (Tree Int)
    , _primitiveSOPcustom1size :: Maybe (Tree Int)
    , _primitiveSOPcustom1val1 :: Maybe (Tree Float)
    , _primitiveSOPclampv :: Maybe (Tree Int)
    , _primitiveSOPgroup :: Maybe (Tree ByteString)
    , _primitiveSOPrord :: Maybe (Tree Int)
    , _primitiveSOPmetaweight :: Maybe (Tree Bool)
    , _primitiveSOPupvector :: Vec3
    , _primitiveSOPcustom2val2 :: Maybe (Tree Float)
    , _primitiveSOPt :: Vec3
    , _primitiveSOPclosev :: Maybe (Tree Int)
    , _primitiveSOPpshapev :: Maybe (Tree Bool)
    , _primitiveSOPcustom2size :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | NoiseSOP {
    _noiseSOPrough :: Maybe (Tree Float)
    , _noiseSOPtype :: Maybe (Tree Int)
    , _noiseSOPs :: Vec3
    , _noiseSOPattribute :: Maybe (Tree Int)
    , _noiseSOPperiod :: Maybe (Tree Float)
    , _noiseSOPharmon :: Maybe (Tree Int)
    , _noiseSOPxord :: Maybe (Tree Int)
    , _noiseSOPp :: Vec3
    , _noiseSOPspread :: Maybe (Tree Float)
    , _noiseSOPseed :: Maybe (Tree Float)
    , _noiseSOPkeepnormals :: Maybe (Tree Bool)
    , _noiseSOPnumint :: Maybe (Tree Int)
    , _noiseSOPgroup :: Maybe (Tree ByteString)
    , _noiseSOPrord :: Maybe (Tree Int)
    , _noiseSOPamp :: Maybe (Tree Float)
    , _noiseSOPt :: Vec3
    , _noiseSOPexp :: Maybe (Tree Float)
    , _noiseSOPr :: Vec3
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ModelSOP {
    _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | FitSOP {
    _fitSOPsurftype :: Maybe (Tree Int)
    , _fitSOPtype :: Maybe (Tree Int)
    , _fitSOPgroup :: Maybe (Tree ByteString)
    , _fitSOPdataparmv :: Maybe (Tree Int)
    , _fitSOPdataparmu :: Maybe (Tree Int)
    , _fitSOPclosev :: Maybe (Tree Int)
    , _fitSOPmultiplev :: Maybe (Tree Bool)
    , _fitSOPscope :: Maybe (Tree Int)
    , _fitSOPsmooth :: Maybe (Tree Float)
    , _fitSOPcloseu :: Maybe (Tree Int)
    , _fitSOPcorners :: Maybe (Tree Bool)
    , _fitSOPmultipleu :: Maybe (Tree Bool)
    , _fitSOPtol :: Maybe (Tree Float)
    , _fitSOPorderv :: Maybe (Tree Int)
    , _fitSOPmethod :: Maybe (Tree Int)
    , _fitSOPorderu :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | JointSOP {
    _jointSOPsmoothtwist :: Maybe (Tree Bool)
    , _jointSOPdivs :: Maybe (Tree Int)
    , _jointSOPmintwist :: Maybe (Tree Bool)
    , _jointSOPlrscale2 :: Maybe (Tree Float)
    , _jointSOPlroffset2 :: Maybe (Tree Float)
    , _jointSOPlroffset1 :: Maybe (Tree Float)
    , _jointSOPpreserve1 :: Maybe (Tree Bool)
    , _jointSOPgroup :: Maybe (Tree ByteString)
    , _jointSOPsmoothpath :: Maybe (Tree Bool)
    , _jointSOPorient :: Maybe (Tree Bool)
    , _jointSOPlrscale1 :: Maybe (Tree Float)
    , _jointSOPpreserve2 :: Maybe (Tree Bool)
    , _jointSOPmajoraxes :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | SwitchSOP {
    _switchSOPinput :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | InSOP {
    _inSOPlabel :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | BoxSOP {
    _boxSOPmodifybounds :: Maybe (Tree Bool)
    , _boxSOPdodivs :: Maybe (Tree Bool)
    , _boxSOPnormals :: Maybe (Tree Bool)
    , _boxSOPs :: Maybe (Tree Float)
    , _boxSOPsize :: Vec3
    , _boxSOPdivsz :: Maybe (Tree Int)
    , _boxSOPdivsy :: Maybe (Tree Int)
    , _boxSOPdivsx :: Maybe (Tree Int)
    , _boxSOPrebar :: Maybe (Tree Bool)
    , _boxSOPconsolidatepts :: Maybe (Tree Bool)
    , _boxSOPt :: Vec3
    , _boxSOPtexture :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ChoptoSOP {
    _choptoSOPcompnml :: Maybe (Tree Bool)
    , _choptoSOPmapping :: Maybe (Tree Int)
    , _choptoSOPendpos :: Vec3
    , _choptoSOPgroup :: Maybe (Tree ByteString)
    , _choptoSOPorganize :: Maybe (Tree ByteString)
    , _choptoSOPstartpos :: Vec3
    , _choptoSOPchop :: Maybe (Tree CHOP)
    , _choptoSOPcomptang :: Maybe (Tree Bool)
    , _choptoSOPmethod :: Maybe (Tree Int)
    , _choptoSOPchanscope :: Maybe (Tree ByteString)
    , _choptoSOPattscope :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | StitchSOP {
    _stitchSOPfixed :: Maybe (Tree Bool)
    , _stitchSOPlrwidth2 :: Maybe (Tree Float)
    , _stitchSOPleftuv1 :: Maybe (Tree Float)
    , _stitchSOPrightuv2 :: Maybe (Tree Float)
    , _stitchSOPsharp :: Maybe (Tree Bool)
    , _stitchSOPbias :: Maybe (Tree Float)
    , _stitchSOPdotangent :: Maybe (Tree Bool)
    , _stitchSOPstitchop :: Maybe (Tree Int)
    , _stitchSOPloop :: Maybe (Tree Bool)
    , _stitchSOPinc :: Maybe (Tree Int)
    , _stitchSOPleftuv2 :: Maybe (Tree Float)
    , _stitchSOPlrwidth1 :: Maybe (Tree Float)
    , _stitchSOPrightuv1 :: Maybe (Tree Float)
    , _stitchSOPgroup :: Maybe (Tree ByteString)
    , _stitchSOPlrscale2 :: Maybe (Tree Float)
    , _stitchSOPdir :: Maybe (Tree Int)
    , _stitchSOPlrscale1 :: Maybe (Tree Float)
    , _stitchSOPdostitch :: Maybe (Tree Bool)
    , _stitchSOPtolerance :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ExtrudeSOP {
    _extrudeSOPdofuse :: Maybe (Tree Int)
    , _extrudeSOPbacktype :: Maybe (Tree Int)
    , _extrudeSOPfrontgrp :: Maybe (Tree ByteString)
    , _extrudeSOPinitextrude :: Maybe (Tree Bool)
    , _extrudeSOPnewg :: Maybe (Tree Bool)
    , _extrudeSOPxsectiongrp :: Maybe (Tree ByteString)
    , _extrudeSOPthickxlate :: Maybe (Tree Float)
    , _extrudeSOPdepthscale :: Maybe (Tree Float)
    , _extrudeSOPbackgrp :: Maybe (Tree ByteString)
    , _extrudeSOPdepthxlate :: Maybe (Tree Float)
    , _extrudeSOPdocusp :: Maybe (Tree Bool)
    , _extrudeSOPsidetype :: Maybe (Tree Int)
    , _extrudeSOPsidegrp :: Maybe (Tree ByteString)
    , _extrudeSOPthickscale :: Maybe (Tree Float)
    , _extrudeSOPsourcegrp :: Maybe (Tree ByteString)
    , _extrudeSOPfronttype :: Maybe (Tree Int)
    , _extrudeSOPsharefaces :: Maybe (Tree Bool)
    , _extrudeSOPremovesharedsides :: Maybe (Tree Bool)
    , _extrudeSOPvertex :: Maybe (Tree Int)
    , _extrudeSOPcuspangle :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | CaptureSOP {
    _captureSOPsavesel :: Maybe (Tree Bool)
    , _captureSOPsavefile :: Maybe (Tree ByteString)
    , _captureSOPweightfrom :: Maybe (Tree Int)
    , _captureSOPautoincr :: Maybe (Tree Bool)
    , _captureSOPgroup :: Maybe (Tree ByteString)
    , _captureSOPcolor :: Maybe (Tree Int)
    , _captureSOPcaptframe :: Maybe (Tree Int)
    , _captureSOPsavecaptfile :: Maybe (Tree Bool)
    , _captureSOPcaptfile :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | MetaballSOP {
    _metaballSOPkernel :: Maybe (Tree ByteString)
    , _metaballSOPt :: Vec3
    , _metaballSOPnormals :: Maybe (Tree Bool)
    , _metaballSOPmetaweight :: Maybe (Tree Float)
    , _metaballSOPrad :: Vec3
    , _metaballSOPexpxy :: Maybe (Tree Float)
    , _metaballSOPmodifybounds :: Maybe (Tree Bool)
    , _metaballSOPexpz :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | PointSOP {
    _pointSOPcustom3 :: Maybe (Tree ByteString)
    , _pointSOPcustom3val1 :: Maybe (Tree Float)
    , _pointSOPcustom4type :: Maybe (Tree Int)
    , _pointSOPalpha :: Maybe (Tree Float)
    , _pointSOPradiusf :: Maybe (Tree Float)
    , _pointSOPscalef :: Maybe (Tree Float)
    , _pointSOPspringk :: Maybe (Tree Float)
    , _pointSOPdotension :: Maybe (Tree Int)
    , _pointSOPdonml :: Maybe (Tree Int)
    , _pointSOPcustom1type :: Maybe (Tree Int)
    , _pointSOPcustom1val3 :: Maybe (Tree Float)
    , _pointSOPcustom4val4 :: Maybe (Tree Float)
    , _pointSOPradialf :: Maybe (Tree Float)
    , _pointSOPdomass :: Maybe (Tree Int)
    , _pointSOPcustom2val4 :: Maybe (Tree Float)
    , _pointSOPdoedgef :: Maybe (Tree Int)
    , _pointSOPcustom1val4 :: Maybe (Tree Float)
    , _pointSOPdodirf :: Maybe (Tree Int)
    , _pointSOPdrag :: Maybe (Tree Float)
    , _pointSOPdonormalf :: Maybe (Tree Int)
    , _pointSOPmass :: Maybe (Tree Float)
    , _pointSOPdovel :: Maybe (Tree Int)
    , _pointSOPdoweight :: Maybe (Tree Int)
    , _pointSOPdopscale :: Maybe (Tree Int)
    , _pointSOPgroup :: Maybe (Tree ByteString)
    , _pointSOPcustom2val1 :: Maybe (Tree Float)
    , _pointSOPv :: Vec3
    , _pointSOPdoup :: Maybe (Tree Int)
    , _pointSOPdoclr :: Maybe (Tree Int)
    , _pointSOPcustom3type :: Maybe (Tree Int)
    , _pointSOPcustom4val2 :: Maybe (Tree Float)
    , _pointSOPweight :: Maybe (Tree Float)
    , _pointSOPcustom2 :: Maybe (Tree ByteString)
    , _pointSOPcustom1 :: Maybe (Tree ByteString)
    , _pointSOPdiff :: Vec3
    , _pointSOPdoradius :: Maybe (Tree Int)
    , _pointSOPdirf :: Vec3
    , _pointSOPup :: Vec3
    , _pointSOPcustom4val3 :: Maybe (Tree Float)
    , _pointSOPcustom3val3 :: Maybe (Tree Float)
    , _pointSOPcustom2val2 :: Maybe (Tree Float)
    , _pointSOPdoscale :: Maybe (Tree Int)
    , _pointSOPcustom1val2 :: Maybe (Tree Float)
    , _pointSOPedgef :: Maybe (Tree Float)
    , _pointSOPtension :: Maybe (Tree Float)
    , _pointSOPt :: Vec3
    , _pointSOPdoradialf :: Maybe (Tree Int)
    , _pointSOPcustom4 :: Maybe (Tree ByteString)
    , _pointSOPmap :: Vec3
    , _pointSOPcustom3val2 :: Maybe (Tree Float)
    , _pointSOPcustom4val1 :: Maybe (Tree Float)
    , _pointSOPcustom1val1 :: Maybe (Tree Float)
    , _pointSOPcustom2type :: Maybe (Tree Int)
    , _pointSOPdouvw :: Maybe (Tree Int)
    , _pointSOPnormalf :: Maybe (Tree Float)
    , _pointSOPpscale :: Maybe (Tree Float)
    , _pointSOPcustom3val4 :: Maybe (Tree Float)
    , _pointSOPcustom2val3 :: Maybe (Tree Float)
    , _pointSOPdospringk :: Maybe (Tree Int)
    , _pointSOPn :: Vec3
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ConvertSOP {
    _convertSOPlodtrim :: Maybe (Tree Float)
    , _convertSOPfromtype :: Maybe (Tree Int)
    , _convertSOPsurftype :: Maybe (Tree Int)
    , _convertSOPdivu :: Maybe (Tree Int)
    , _convertSOPdivtrim :: Maybe (Tree Int)
    , _convertSOPinterphull :: Maybe (Tree Bool)
    , _convertSOPlodu :: Maybe (Tree Float)
    , _convertSOPlodv :: Maybe (Tree Float)
    , _convertSOPgroup :: Maybe (Tree ByteString)
    , _convertSOPorderv :: Maybe (Tree Int)
    , _convertSOPprtype :: Maybe (Tree Int)
    , _convertSOPdivv :: Maybe (Tree Int)
    , _convertSOPorderu :: Maybe (Tree Int)
    , _convertSOPtotype :: Maybe (Tree Int)
    , _convertSOPnew :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | LimitSOP {
    _limitSOPchanz :: Maybe (Tree ByteString)
    , _limitSOPchanb :: Maybe (Tree ByteString)
    , _limitSOPchanrad :: Maybe (Tree ByteString)
    , _limitSOPzlimitmin :: Maybe (Tree Float)
    , _limitSOPcustomattrib0chan1 :: Maybe (Tree ByteString)
    , _limitSOPcustomattrib1chan2 :: Maybe (Tree ByteString)
    , _limitSOPchanrz :: Maybe (Tree ByteString)
    , _limitSOPtexturew :: Maybe (Tree ByteString)
    , _limitSOPrad :: Maybe (Tree Float)
    , _limitSOPtexture :: Maybe (Tree Bool)
    , _limitSOPoutput :: Maybe (Tree Int)
    , _limitSOPcustomattrib1chan0 :: Maybe (Tree ByteString)
    , _limitSOPtexoffset2 :: Maybe (Tree Float)
    , _limitSOPzlimitmax :: Maybe (Tree Float)
    , _limitSOPcustomattrib1chan3 :: Maybe (Tree ByteString)
    , _limitSOPchanry :: Maybe (Tree ByteString)
    , _limitSOPcustomattrib0chan2 :: Maybe (Tree ByteString)
    , _limitSOProtate :: Vec3
    , _limitSOPchanrx :: Maybe (Tree ByteString)
    , _limitSOPdorotate :: Maybe (Tree Int)
    , _limitSOPcustomattrib1chan1 :: Maybe (Tree ByteString)
    , _limitSOPflipsmooth :: Maybe (Tree Float)
    , _limitSOPchanalpha :: Maybe (Tree ByteString)
    , _limitSOPchop :: Maybe (Tree CHOP)
    , _limitSOPchanx :: Maybe (Tree ByteString)
    , _limitSOPxlimitmax :: Maybe (Tree Float)
    , _limitSOPylimitmin :: Maybe (Tree Float)
    , _limitSOPchanradx :: Maybe (Tree ByteString)
    , _limitSOPtexscale1 :: Maybe (Tree Float)
    , _limitSOPchang :: Maybe (Tree ByteString)
    , _limitSOPchanradz :: Maybe (Tree ByteString)
    , _limitSOPcustomattrib1 :: Maybe (Tree ByteString)
    , _limitSOPcustomattrib0chan0 :: Maybe (Tree ByteString)
    , _limitSOPchanr :: Maybe (Tree ByteString)
    , _limitSOPcustomattrib0 :: Maybe (Tree ByteString)
    , _limitSOPtexoffset1 :: Maybe (Tree Float)
    , _limitSOPdivisions :: Maybe (Tree Int)
    , _limitSOPtexscale2 :: Maybe (Tree Float)
    , _limitSOPcustomattrib0chan3 :: Maybe (Tree ByteString)
    , _limitSOPnormals :: Maybe (Tree Bool)
    , _limitSOPylimitmax :: Maybe (Tree Float)
    , _limitSOPxlimitmin :: Maybe (Tree Float)
    , _limitSOPchany :: Maybe (Tree ByteString)
    , _limitSOPrord :: Maybe (Tree Int)
    , _limitSOPchanrady :: Maybe (Tree ByteString)
    , _limitSOPorient :: Maybe (Tree Bool)
    , _limitSOPdolimit :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | BooleanSOP {
    _booleanSOPcreategroup :: Maybe (Tree Bool)
    , _booleanSOPgroupa :: Maybe (Tree ByteString)
    , _booleanSOPaccattrib :: Maybe (Tree Bool)
    , _booleanSOPbooleanop :: Maybe (Tree Int)
    , _booleanSOPgroupb :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | KinectSOP {
    _kinectSOPnormals :: Maybe (Tree Bool)
    , _kinectSOPskeleton :: Maybe (Tree Int)
    , _kinectSOPhwversion :: Maybe (Tree Int)
    , _kinectSOPneardepthmode :: Maybe (Tree Bool)
    , _kinectSOPsensor :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | MaterialSOP {
    _materialSOPmat :: Maybe (Tree MAT)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | SweepSOP {
    _sweepSOPcycle :: Maybe (Tree Int)
    , _sweepSOPpathgrp :: Maybe (Tree ByteString)
    , _sweepSOPangle :: Maybe (Tree Bool)
    , _sweepSOPrefgrp :: Maybe (Tree ByteString)
    , _sweepSOPaimatref :: Maybe (Tree Bool)
    , _sweepSOPfast :: Maybe (Tree Bool)
    , _sweepSOProll :: Maybe (Tree Float)
    , _sweepSOPtwist :: Maybe (Tree Float)
    , _sweepSOPnoflip :: Maybe (Tree Bool)
    , _sweepSOPskin :: Maybe (Tree Int)
    , _sweepSOPsweepgrp :: Maybe (Tree ByteString)
    , _sweepSOPnewg :: Maybe (Tree Bool)
    , _sweepSOPusevtx :: Maybe (Tree Bool)
    , _sweepSOPxgrp :: Maybe (Tree ByteString)
    , _sweepSOPscale :: Maybe (Tree Float)
    , _sweepSOPvertex :: Maybe (Tree Int)
    , _sweepSOPskipcoin :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | TrimSOP {
    _trimSOPoptype :: Maybe (Tree Int)
    , _trimSOPtrimtol :: Maybe (Tree Float)
    , _trimSOPgroup :: Maybe (Tree ByteString)
    , _trimSOPaltitude :: Maybe (Tree Int)
    , _trimSOPbigloop :: Maybe (Tree Bool)
    , _trimSOPindividual :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | OutSOP {
    _outSOPlabel :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | BridgeSOP {
    _bridgeSOProtatet3 :: Maybe (Tree Float)
    , _bridgeSOPisodivs :: Maybe (Tree Int)
    , _bridgeSOPcsharp :: Maybe (Tree Bool)
    , _bridgeSOPcircular :: Maybe (Tree Bool)
    , _bridgeSOPscalet3 :: Maybe (Tree Float)
    , _bridgeSOPsdivs :: Maybe (Tree Int)
    , _bridgeSOPinc :: Maybe (Tree Int)
    , _bridgeSOPfrenet :: Maybe (Tree Int)
    , _bridgeSOPscalet1 :: Maybe (Tree Float)
    , _bridgeSOPscalec2 :: Maybe (Tree Float)
    , _bridgeSOProtatet2 :: Maybe (Tree Float)
    , _bridgeSOPtolerance :: Maybe (Tree Float)
    , _bridgeSOPgroup :: Maybe (Tree ByteString)
    , _bridgeSOPbridge :: Maybe (Tree Int)
    , _bridgeSOProtatet1 :: Maybe (Tree Float)
    , _bridgeSOPscalec3 :: Maybe (Tree Float)
    , _bridgeSOPscalet2 :: Maybe (Tree Float)
    , _bridgeSOPcurvature :: Maybe (Tree Bool)
    , _bridgeSOPorder :: Maybe (Tree Int)
    , _bridgeSOPscalec1 :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | FacetSOP {
    _facetSOPinline :: Maybe (Tree Bool)
    , _facetSOPremove :: Maybe (Tree Bool)
    , _facetSOPangle :: Maybe (Tree Float)
    , _facetSOPprenml :: Maybe (Tree Bool)
    , _facetSOPcusp :: Maybe (Tree Bool)
    , _facetSOPinlinedist :: Maybe (Tree Float)
    , _facetSOPpostnml :: Maybe (Tree Bool)
    , _facetSOPdist :: Maybe (Tree Float)
    , _facetSOPunit :: Maybe (Tree Bool)
    , _facetSOPorientpolys :: Maybe (Tree Bool)
    , _facetSOPgroup :: Maybe (Tree ByteString)
    , _facetSOPunique :: Maybe (Tree Bool)
    , _facetSOPcons :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | SurfsectSOP {
    _surfsectSOPstep :: Maybe (Tree Int)
    , _surfsectSOPtol2d :: Maybe (Tree Float)
    , _surfsectSOPinsidea :: Maybe (Tree Bool)
    , _surfsectSOPmindholes :: Maybe (Tree Bool)
    , _surfsectSOPboolop :: Maybe (Tree Int)
    , _surfsectSOPjoin :: Maybe (Tree Bool)
    , _surfsectSOPprofilesa :: Maybe (Tree ByteString)
    , _surfsectSOPinsideb :: Maybe (Tree Bool)
    , _surfsectSOPcreategroupa :: Maybe (Tree Bool)
    , _surfsectSOPoutsideb :: Maybe (Tree Bool)
    , _surfsectSOPcreategroupb :: Maybe (Tree Bool)
    , _surfsectSOPoutsidea :: Maybe (Tree Bool)
    , _surfsectSOPprofilesb :: Maybe (Tree ByteString)
    , _surfsectSOPgroupb :: Maybe (Tree ByteString)
    , _surfsectSOPtol3d :: Maybe (Tree Float)
    , _surfsectSOPgroupa :: Maybe (Tree ByteString)
    , _surfsectSOPtarget :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | RaySOP {
    _raySOPhitgrp :: Maybe (Tree ByteString)
    , _raySOPnewgrp :: Maybe (Tree Bool)
    , _raySOPdotrans :: Maybe (Tree Bool)
    , _raySOPputdist :: Maybe (Tree Bool)
    , _raySOPlift :: Maybe (Tree Float)
    , _raySOPseed :: Maybe (Tree Int)
    , _raySOPlookfar :: Maybe (Tree Bool)
    , _raySOPgroup :: Maybe (Tree ByteString)
    , _raySOPbounces :: Maybe (Tree Int)
    , _raySOPbouncegeo :: Maybe (Tree Bool)
    , _raySOPscale :: Maybe (Tree Float)
    , _raySOPnormal :: Maybe (Tree Int)
    , _raySOPmethod :: Maybe (Tree Int)
    , _raySOPjitter :: Maybe (Tree Float)
    , _raySOPsample :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | BonegroupSOP {
    _bonegroupSOPbonesperpoint :: Maybe (Tree Int)
    , _bonegroupSOPbonespergroup :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | TorusSOP {
    _torusSOPcols :: Maybe (Tree Int)
    , _torusSOPsurftype :: Maybe (Tree Int)
    , _torusSOPendanglev :: Maybe (Tree Float)
    , _torusSOPclosev :: Maybe (Tree Bool)
    , _torusSOPbeginangleu :: Maybe (Tree Float)
    , _torusSOPorderv :: Maybe (Tree Int)
    , _torusSOPrad :: Vec2
    , _torusSOPtexture :: Maybe (Tree Int)
    , _torusSOPangleoffset :: Maybe (Tree Float)
    , _torusSOPcapu :: Maybe (Tree Bool)
    , _torusSOPendangleu :: Maybe (Tree Float)
    , _torusSOPtype :: Maybe (Tree Int)
    , _torusSOPnormals :: Maybe (Tree Bool)
    , _torusSOPbeginanglev :: Maybe (Tree Float)
    , _torusSOPorderu :: Maybe (Tree Int)
    , _torusSOPcapv :: Maybe (Tree Bool)
    , _torusSOProws :: Maybe (Tree Int)
    , _torusSOPimperfect :: Maybe (Tree Bool)
    , _torusSOPcloseu :: Maybe (Tree Bool)
    , _torusSOPmodifybounds :: Maybe (Tree Bool)
    , _torusSOPorient :: Maybe (Tree Int)
    , _torusSOPt :: Vec3
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | WireframeSOP {
    _wireframeSOPfast :: Maybe (Tree Bool)
    , _wireframeSOPradius :: Maybe (Tree Float)
    , _wireframeSOPgroup :: Maybe (Tree ByteString)
    , _wireframeSOPcorners :: Maybe (Tree Bool)
    , _wireframeSOPremove :: Maybe (Tree Bool)
    , _wireframeSOPcaps :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | AddSOP {
    _addSOPusept0 :: Maybe (Tree Bool)
    , _addSOPpt4 :: Vec3
    , _addSOPpointdat :: Maybe (Tree DAT)
    , _addSOPusept3 :: Maybe (Tree Bool)
    , _addSOPadd :: Maybe (Tree Int)
    , _addSOPclosed3 :: Maybe (Tree Bool)
    , _addSOPprim4 :: Maybe (Tree ByteString)
    , _addSOPclosed4 :: Maybe (Tree Bool)
    , _addSOPprim0 :: Maybe (Tree ByteString)
    , _addSOPusept4 :: Maybe (Tree Bool)
    , _addSOPpt1 :: Vec3
    , _addSOPkeep :: Maybe (Tree Bool)
    , _addSOPprim3 :: Maybe (Tree ByteString)
    , _addSOPweight2 :: Maybe (Tree Float)
    , _addSOPusept2 :: Maybe (Tree Bool)
    , _addSOPclosed1 :: Maybe (Tree Bool)
    , _addSOPweight5 :: Maybe (Tree Float)
    , _addSOPpt3 :: Vec3
    , _addSOPweight3 :: Maybe (Tree Float)
    , _addSOPremove :: Maybe (Tree Bool)
    , _addSOPnamedattribs :: Maybe (Tree Bool)
    , _addSOPprim5 :: Maybe (Tree ByteString)
    , _addSOPclosed5 :: Maybe (Tree Bool)
    , _addSOPpt2 :: Vec3
    , _addSOPnormals :: Maybe (Tree Bool)
    , _addSOPusept5 :: Maybe (Tree Bool)
    , _addSOPpolydat :: Maybe (Tree DAT)
    , _addSOPclosed0 :: Maybe (Tree Bool)
    , _addSOPpt5 :: Vec3
    , _addSOPweight1 :: Maybe (Tree Float)
    , _addSOPweight4 :: Maybe (Tree Float)
    , _addSOPinc :: Maybe (Tree Int)
    , _addSOPclosedall :: Maybe (Tree Bool)
    , _addSOPclosed2 :: Maybe (Tree Bool)
    , _addSOPgroup :: Maybe (Tree ByteString)
    , _addSOPprim1 :: Maybe (Tree ByteString)
    , _addSOPusept1 :: Maybe (Tree Bool)
    , _addSOPpt0 :: Vec3
    , _addSOPprim2 :: Maybe (Tree ByteString)
    , _addSOPweight0 :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | TextureSOP {
    _textureSOPxord :: Maybe (Tree Int)
    , _textureSOPtype :: Maybe (Tree Int)
    , _textureSOPangle :: Maybe (Tree Float)
    , _textureSOPs :: Vec3
    , _textureSOPp :: Vec3
    , _textureSOPoffset :: Vec3
    , _textureSOPrord :: Maybe (Tree Int)
    , _textureSOPcoord :: Maybe (Tree Int)
    , _textureSOPscaletwo :: Vec3
    , _textureSOPgroup :: Maybe (Tree ByteString)
    , _textureSOPfixseams :: Maybe (Tree Bool)
    , _textureSOPtexlayer :: Maybe (Tree Int)
    , _textureSOPt :: Vec3
    , _textureSOPaxis :: Maybe (Tree Int)
    , _textureSOPr :: Vec3
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | DeformSOP {
    _deformSOPdelcaptatr :: Maybe (Tree Bool)
    , _deformSOPdelcolatr :: Maybe (Tree Bool)
    , _deformSOPdonormal :: Maybe (Tree Bool)
    , _deformSOPgroup :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | OpenvrSOP {
    _openvrSOPmodel :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | CurvesectSOP {
    _curvesectSOPextractpt :: Maybe (Tree Bool)
    , _curvesectSOPleft :: Maybe (Tree Int)
    , _curvesectSOPkeeporiginal :: Maybe (Tree Bool)
    , _curvesectSOPleftgroup :: Maybe (Tree ByteString)
    , _curvesectSOPrightgroup :: Maybe (Tree ByteString)
    , _curvesectSOPxsect :: Maybe (Tree Bool)
    , _curvesectSOPright :: Maybe (Tree Int)
    , _curvesectSOPtolerance :: Maybe (Tree Float)
    , _curvesectSOPaffect :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | LsystemSOP {
    _lsystemSOPvertinc :: Maybe (Tree Float)
    , _lsystemSOPcols :: Maybe (Tree Int)
    , _lsystemSOPcolormap :: Maybe (Tree TOP)
    , _lsystemSOPcontangl :: Maybe (Tree Bool)
    , _lsystemSOPcontwidth :: Maybe (Tree Bool)
    , _lsystemSOPthickinit :: Maybe (Tree Float)
    , _lsystemSOPpointwidth :: Maybe (Tree Bool)
    , _lsystemSOPgenerations :: Maybe (Tree Float)
    , _lsystemSOPstampa :: Maybe (Tree ByteString)
    , _lsystemSOPinc :: Vec2
    , _lsystemSOPvarc :: Maybe (Tree Float)
    , _lsystemSOPgrpprefix :: Maybe (Tree ByteString)
    , _lsystemSOPstampb :: Maybe (Tree ByteString)
    , _lsystemSOPsmooth :: Maybe (Tree Float)
    , _lsystemSOPdocolor :: Maybe (Tree Bool)
    , _lsystemSOProws :: Maybe (Tree Int)
    , _lsystemSOPvarb :: Maybe (Tree Float)
    , _lsystemSOPcontlength :: Maybe (Tree Bool)
    , _lsystemSOPrandseed :: Maybe (Tree Int)
    , _lsystemSOPtension :: Maybe (Tree Float)
    , _lsystemSOPtype :: Maybe (Tree Int)
    , _lsystemSOPgravity :: Maybe (Tree Float)
    , _lsystemSOPrules :: Maybe (Tree DAT)
    , _lsystemSOPpictop :: Maybe (Tree TOP)
    , _lsystemSOPstepscale :: Maybe (Tree Float)
    , _lsystemSOPanglescale :: Maybe (Tree Float)
    , _lsystemSOPrandscale :: Maybe (Tree Float)
    , _lsystemSOPchanprefix :: Maybe (Tree ByteString)
    , _lsystemSOPstepinit :: Maybe (Tree Float)
    , _lsystemSOPthickscale :: Maybe (Tree Float)
    , _lsystemSOPstampc :: Maybe (Tree ByteString)
    , _lsystemSOPangleinit :: Maybe (Tree Float)
    , _lsystemSOPdotexture :: Maybe (Tree Bool)
    , _lsystemSOPvard :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | FractalSOP {
    _fractalSOPvtxnms :: Maybe (Tree Bool)
    , _fractalSOPsmooth :: Maybe (Tree Float)
    , _fractalSOPfixed :: Maybe (Tree Bool)
    , _fractalSOPseed :: Maybe (Tree Int)
    , _fractalSOPgroup :: Maybe (Tree ByteString)
    , _fractalSOPdivs :: Maybe (Tree Int)
    , _fractalSOPdir :: Vec3
    , _fractalSOPscale :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | CopySOP {
    _copySOPmulvtx :: Maybe (Tree ByteString)
    , _copySOPnprims :: Maybe (Tree Int)
    , _copySOPparam8 :: Maybe (Tree ByteString)
    , _copySOPval6 :: Maybe (Tree Float)
    , _copySOPvlength :: Maybe (Tree Bool)
    , _copySOPval3 :: Maybe (Tree Float)
    , _copySOPsubprim :: Maybe (Tree ByteString)
    , _copySOPncy :: Maybe (Tree Int)
    , _copySOPr :: Vec3
    , _copySOPval5 :: Maybe (Tree Float)
    , _copySOPsetpt :: Maybe (Tree ByteString)
    , _copySOPsubvtx :: Maybe (Tree ByteString)
    , _copySOPp :: Vec3
    , _copySOPval7 :: Maybe (Tree Float)
    , _copySOPval4 :: Maybe (Tree Float)
    , _copySOPval2 :: Maybe (Tree Float)
    , _copySOPval1 :: Maybe (Tree Float)
    , _copySOPcopyg :: Maybe (Tree ByteString)
    , _copySOPaddprim :: Maybe (Tree ByteString)
    , _copySOPaddpt :: Maybe (Tree ByteString)
    , _copySOPcum :: Maybe (Tree Bool)
    , _copySOPsetprim :: Maybe (Tree ByteString)
    , _copySOPparam4 :: Maybe (Tree ByteString)
    , _copySOPparam10 :: Maybe (Tree ByteString)
    , _copySOPtemplategrp :: Maybe (Tree ByteString)
    , _copySOPparam2 :: Maybe (Tree ByteString)
    , _copySOPupvector :: Vec3
    , _copySOPval9 :: Maybe (Tree Float)
    , _copySOPnewg :: Maybe (Tree Bool)
    , _copySOPparam1 :: Maybe (Tree ByteString)
    , _copySOPnml :: Maybe (Tree Bool)
    , _copySOPparam3 :: Maybe (Tree ByteString)
    , _copySOPxord :: Maybe (Tree Int)
    , _copySOPscale :: Maybe (Tree Float)
    , _copySOPsetvtx :: Maybe (Tree ByteString)
    , _copySOPparam5 :: Maybe (Tree ByteString)
    , _copySOPaddvtx :: Maybe (Tree ByteString)
    , _copySOPs :: Vec3
    , _copySOPval10 :: Maybe (Tree Float)
    , _copySOPparam6 :: Maybe (Tree ByteString)
    , _copySOPstamp :: Maybe (Tree Bool)
    , _copySOPparam9 :: Maybe (Tree ByteString)
    , _copySOPmulpt :: Maybe (Tree ByteString)
    , _copySOPval8 :: Maybe (Tree Float)
    , _copySOPparam7 :: Maybe (Tree ByteString)
    , _copySOPsourcegrp :: Maybe (Tree ByteString)
    , _copySOPrord :: Maybe (Tree Int)
    , _copySOPsubpt :: Maybe (Tree ByteString)
    , _copySOPdoattr :: Maybe (Tree Bool)
    , _copySOPt :: Vec3
    , _copySOPmulprim :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | TristripSOP {
    _tristripSOPmaxstriplength :: Maybe (Tree Int)
    , _tristripSOPconstrainstriplength :: Maybe (Tree Bool)
    , _tristripSOPgroup :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | CplusplusSOP {
    _cplusplusSOPplugin :: Maybe (Tree ByteString)
    , _cplusplusSOPreinitpulse :: Maybe (Tree Bool)
    , _cplusplusSOPunloadplugin :: Maybe (Tree Bool)
    , _cplusplusSOPreinit :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | MagnetSOP {
    _magnetSOPdeformgrp :: Maybe (Tree ByteString)
    , _magnetSOPposition :: Maybe (Tree Bool)
    , _magnetSOPs :: Vec3
    , _magnetSOPp :: Vec3
    , _magnetSOPcolor :: Maybe (Tree Bool)
    , _magnetSOPvelocity :: Maybe (Tree Bool)
    , _magnetSOPmagnetgrp :: Maybe (Tree ByteString)
    , _magnetSOPrord :: Maybe (Tree Int)
    , _magnetSOPnml :: Maybe (Tree Bool)
    , _magnetSOPt :: Vec3
    , _magnetSOPxord :: Maybe (Tree Int)
    , _magnetSOPr :: Vec3
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | RectangleSOP {
    _rectangleSOPt :: Vec3
    , _rectangleSOPnormals :: Maybe (Tree Bool)
    , _rectangleSOPcamz :: Maybe (Tree Float)
    , _rectangleSOPsize :: Vec2
    , _rectangleSOPorient :: Maybe (Tree Int)
    , _rectangleSOPmodifybounds :: Maybe (Tree Bool)
    , _rectangleSOPtexture :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | SphereSOP {
    _sphereSOPcols :: Maybe (Tree Int)
    , _sphereSOPsurftype :: Maybe (Tree Int)
    , _sphereSOPtype :: Maybe (Tree Int)
    , _sphereSOPnormals :: Maybe (Tree Bool)
    , _sphereSOPtexture :: Maybe (Tree Int)
    , _sphereSOPaccurate :: Maybe (Tree Bool)
    , _sphereSOPfreq :: Maybe (Tree Int)
    , _sphereSOPmodifybounds :: Maybe (Tree Bool)
    , _sphereSOPimperfect :: Maybe (Tree Bool)
    , _sphereSOProws :: Maybe (Tree Int)
    , _sphereSOPrad :: Vec3
    , _sphereSOPorderv :: Maybe (Tree Int)
    , _sphereSOPorient :: Maybe (Tree Int)
    , _sphereSOPt :: Vec3
    , _sphereSOPorderu :: Maybe (Tree Int)
    , _sphereSOPupole :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | DattoSOP {
    _dattoSOPdetaildat :: Maybe (Tree DAT)
    , _dattoSOPprtype :: Maybe (Tree Int)
    , _dattoSOPverticesdat :: Maybe (Tree DAT)
    , _dattoSOPprimsdat :: Maybe (Tree DAT)
    , _dattoSOPclosedv :: Maybe (Tree Bool)
    , _dattoSOPfloat :: Maybe (Tree ByteString)
    , _dattoSOPstring :: Maybe (Tree ByteString)
    , _dattoSOPclosed :: Maybe (Tree Bool)
    , _dattoSOPint :: Maybe (Tree ByteString)
    , _dattoSOPbuild :: Maybe (Tree Int)
    , _dattoSOPpointsdat :: Maybe (Tree DAT)
    , _dattoSOPn :: Maybe (Tree Int)
    , _dattoSOPmerge :: Maybe (Tree Int)
    , _dattoSOPconnect :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | TextSOP {
    _textSOPreadingdirection :: Maybe (Tree Int)
    , _textSOPwordwrap :: Maybe (Tree Bool)
    , _textSOPitalic :: Maybe (Tree Bool)
    , _textSOPfontfile :: Maybe (Tree ByteString)
    , _textSOPalignx :: Maybe (Tree Int)
    , _textSOPtext :: Maybe (Tree ByteString)
    , _textSOPxord :: Maybe (Tree Int)
    , _textSOPr :: Vec3
    , _textSOPlegacyparsing :: Maybe (Tree Bool)
    , _textSOPfontsizey :: Maybe (Tree Float)
    , _textSOPlinespacing :: Maybe (Tree Float)
    , _textSOPkeepfontratio :: Maybe (Tree Bool)
    , _textSOPs :: Vec3
    , _textSOPp :: Vec3
    , _textSOPlevelofdetail :: Maybe (Tree Int)
    , _textSOPfontsizex :: Maybe (Tree Float)
    , _textSOPkerning1 :: Maybe (Tree Float)
    , _textSOPfont :: Maybe (Tree ByteString)
    , _textSOPwordwrapsize :: Maybe (Tree Float)
    , _textSOPlanguage :: Maybe (Tree ByteString)
    , _textSOPbold :: Maybe (Tree Bool)
    , _textSOPrord :: Maybe (Tree Int)
    , _textSOPt :: Vec3
    , _textSOPkerning2 :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | LinethickSOP {
    _linethickSOPstartwidth2 :: Maybe (Tree Float)
    , _linethickSOPdomain2 :: Maybe (Tree Float)
    , _linethickSOPshape :: Maybe (Tree Int)
    , _linethickSOPgroup :: Maybe (Tree ByteString)
    , _linethickSOPstartwidth1 :: Maybe (Tree Float)
    , _linethickSOPsymmetric :: Maybe (Tree Bool)
    , _linethickSOPdivisions :: Maybe (Tree Int)
    , _linethickSOProws :: Maybe (Tree Int)
    , _linethickSOPdomain1 :: Maybe (Tree Float)
    , _linethickSOPendwidth2 :: Maybe (Tree Float)
    , _linethickSOPendwidth1 :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | TraceSOP {
    _traceSOPaddtexture :: Maybe (Tree Bool)
    , _traceSOPnormals :: Maybe (Tree Bool)
    , _traceSOPfitcurve :: Maybe (Tree Bool)
    , _traceSOPdelborder :: Maybe (Tree Bool)
    , _traceSOPconvpoly :: Maybe (Tree Bool)
    , _traceSOPstep :: Maybe (Tree Float)
    , _traceSOPbordwidth :: Maybe (Tree Int)
    , _traceSOPtop :: Maybe (Tree TOP)
    , _traceSOPlod :: Maybe (Tree Float)
    , _traceSOPdoresample :: Maybe (Tree Bool)
    , _traceSOPdosmooth :: Maybe (Tree Bool)
    , _traceSOPthresh :: Maybe (Tree Float)
    , _traceSOPerror :: Maybe (Tree Float)
    , _traceSOPhole :: Maybe (Tree Bool)
    , _traceSOPcorner :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | SortSOP {
    _sortSOPptsort :: Maybe (Tree Int)
    , _sortSOPpointoffset :: Maybe (Tree Int)
    , _sortSOPprimsort :: Maybe (Tree Int)
    , _sortSOPpointdir :: Vec3
    , _sortSOPpartdir :: Vec3
    , _sortSOPprimseed :: Maybe (Tree Int)
    , _sortSOPpointprox :: Vec3
    , _sortSOPpartreverse :: Maybe (Tree Bool)
    , _sortSOPpartoffset :: Maybe (Tree Int)
    , _sortSOPprimoffset :: Maybe (Tree Int)
    , _sortSOPpointseed :: Maybe (Tree Int)
    , _sortSOPprimprox :: Vec3
    , _sortSOPpartsort :: Maybe (Tree Int)
    , _sortSOPpartprox :: Vec3
    , _sortSOPprimdir :: Vec3
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | JoinSOP {
    _joinSOPknotmult :: Maybe (Tree Bool)
    , _joinSOPblend :: Maybe (Tree Bool)
    , _joinSOPgroup :: Maybe (Tree ByteString)
    , _joinSOPdir :: Maybe (Tree Int)
    , _joinSOPbias :: Maybe (Tree Float)
    , _joinSOPprim :: Maybe (Tree Bool)
    , _joinSOPjoinop :: Maybe (Tree Int)
    , _joinSOPinc :: Maybe (Tree Int)
    , _joinSOPloop :: Maybe (Tree Bool)
    , _joinSOPtolerance :: Maybe (Tree Float)
    , _joinSOPproximity :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | PolystitchSOP {
    _polystitchSOPangle :: Maybe (Tree Float)
    , _polystitchSOPstitch :: Maybe (Tree ByteString)
    , _polystitchSOPconsolidate :: Maybe (Tree Bool)
    , _polystitchSOPfindcorner :: Maybe (Tree Bool)
    , _polystitchSOPcorners :: Maybe (Tree ByteString)
    , _polystitchSOPtol3d :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | BlendSOP {
    _blendSOPblend1v4 :: Maybe (Tree Float)
    , _blendSOPblend4v3 :: Maybe (Tree Float)
    , _blendSOPblend4v1 :: Maybe (Tree Float)
    , _blendSOPblend1v3 :: Maybe (Tree Float)
    , _blendSOPdoup :: Maybe (Tree Bool)
    , _blendSOPblend3v2 :: Maybe (Tree Float)
    , _blendSOPdoclr :: Maybe (Tree Bool)
    , _blendSOPblend2v2 :: Maybe (Tree Float)
    , _blendSOPblend1v2 :: Maybe (Tree Float)
    , _blendSOPdonml :: Maybe (Tree Bool)
    , _blendSOPdiff :: Maybe (Tree Bool)
    , _blendSOPblend3v3 :: Maybe (Tree Float)
    , _blendSOPblend3v1 :: Maybe (Tree Float)
    , _blendSOPblend2v3 :: Maybe (Tree Float)
    , _blendSOPdouvw :: Maybe (Tree Bool)
    , _blendSOPdopos :: Maybe (Tree Bool)
    , _blendSOPblend4v2 :: Maybe (Tree Float)
    , _blendSOPblend4v4 :: Maybe (Tree Float)
    , _blendSOPblend3v4 :: Maybe (Tree Float)
    , _blendSOPgroup :: Maybe (Tree ByteString)
    , _blendSOPblend1v1 :: Maybe (Tree Float)
    , _blendSOPblend2v4 :: Maybe (Tree Float)
    , _blendSOPblend2v1 :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | LodSOP {
    _lodSOPpolysonly :: Maybe (Tree Bool)
    , _lodSOPtriangulate :: Maybe (Tree Bool)
    , _lodSOPtstrips :: Maybe (Tree Bool)
    , _lodSOPsteppercent :: Maybe (Tree Float)
    , _lodSOPminpercent :: Maybe (Tree Float)
    , _lodSOPdistance :: Maybe (Tree Float)
    , _lodSOPlengthweight :: Maybe (Tree Float)
    , _lodSOPborderweight :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | CreepSOP {
    _creepSOPs :: Vec3
    , _creepSOPt :: Vec3
    , _creepSOPr :: Vec3
    , _creepSOPreset :: Maybe (Tree Bool)
    , _creepSOPresetmethod :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | PolysplineSOP {
    _polysplineSOPtension :: Maybe (Tree Float)
    , _polysplineSOPedgedivs :: Maybe (Tree Int)
    , _polysplineSOPclosure :: Maybe (Tree Int)
    , _polysplineSOPgroup :: Maybe (Tree ByteString)
    , _polysplineSOPsegsize :: Maybe (Tree Float)
    , _polysplineSOPdivide :: Maybe (Tree Int)
    , _polysplineSOPbasis :: Maybe (Tree Int)
    , _polysplineSOPpolydivs :: Maybe (Tree Int)
    , _polysplineSOPfirst :: Maybe (Tree Int)
    , _polysplineSOPlast :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | CurveclaySOP {
    _curveclaySOPsharp :: Maybe (Tree Float)
    , _curveclaySOPfacegroup :: Maybe (Tree ByteString)
    , _curveclaySOPdivs :: Maybe (Tree Int)
    , _curveclaySOPprojop :: Maybe (Tree Int)
    , _curveclaySOPindividual :: Maybe (Tree Bool)
    , _curveclaySOPprojdir3 :: Maybe (Tree Float)
    , _curveclaySOPsurfgroup :: Maybe (Tree ByteString)
    , _curveclaySOPrefine :: Maybe (Tree Float)
    , _curveclaySOPprojdir2 :: Maybe (Tree Float)
    , _curveclaySOPdeformdir1 :: Maybe (Tree Float)
    , _curveclaySOPdeformdir3 :: Maybe (Tree Float)
    , _curveclaySOPdeformlen :: Maybe (Tree Float)
    , _curveclaySOPdeforminside :: Maybe (Tree Bool)
    , _curveclaySOPprojdir1 :: Maybe (Tree Float)
    , _curveclaySOPdeformdir2 :: Maybe (Tree Float)
    , _curveclaySOPdeformop :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ProjectSOP {
    _projectSOPmaptype :: Maybe (Tree Int)
    , _projectSOPvector3 :: Maybe (Tree Float)
    , _projectSOPprojside :: Maybe (Tree Int)
    , _projectSOPuvgap :: Maybe (Tree Float)
    , _projectSOPvrange1 :: Maybe (Tree Float)
    , _projectSOPaxis :: Maybe (Tree Int)
    , _projectSOPurange2 :: Maybe (Tree Float)
    , _projectSOPufrom :: Maybe (Tree Int)
    , _projectSOPftolerance :: Maybe (Tree Float)
    , _projectSOPcycle :: Maybe (Tree Int)
    , _projectSOPcsharp :: Maybe (Tree Bool)
    , _projectSOPuserange :: Maybe (Tree Bool)
    , _projectSOPfacegroup :: Maybe (Tree ByteString)
    , _projectSOPsurfgroup :: Maybe (Tree ByteString)
    , _projectSOPaccurate :: Maybe (Tree Bool)
    , _projectSOPsdivs :: Maybe (Tree Int)
    , _projectSOPvector1 :: Maybe (Tree Float)
    , _projectSOPvfrom :: Maybe (Tree Int)
    , _projectSOPvector2 :: Maybe (Tree Float)
    , _projectSOPrtolerance :: Maybe (Tree Float)
    , _projectSOPvrange2 :: Maybe (Tree Float)
    , _projectSOPorder :: Maybe (Tree Int)
    , _projectSOPurange1 :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | FileinSOP {
    _fileinSOPflipfacing :: Maybe (Tree Bool)
    , _fileinSOPrefreshpulse :: Maybe (Tree Bool)
    , _fileinSOPfile :: Maybe (Tree ByteString)
    , _fileinSOPnormals :: Maybe (Tree Bool)
    , _fileinSOPrefresh :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | SequenceblendSOP {
    _sequenceblendSOPdopos :: Maybe (Tree Bool)
    , _sequenceblendSOPdoup :: Maybe (Tree Bool)
    , _sequenceblendSOPdouvw :: Maybe (Tree Bool)
    , _sequenceblendSOPdoclr :: Maybe (Tree Bool)
    , _sequenceblendSOPdonml :: Maybe (Tree Bool)
    , _sequenceblendSOPblend :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | CapSOP {
    _capSOPfirstv :: Maybe (Tree Int)
    , _capSOPfirstu :: Maybe (Tree Int)
    , _capSOPgroup :: Maybe (Tree ByteString)
    , _capSOPdivsv2 :: Maybe (Tree Int)
    , _capSOPlastv :: Maybe (Tree Int)
    , _capSOPscaleu2 :: Maybe (Tree Float)
    , _capSOPdivsv1 :: Maybe (Tree Int)
    , _capSOPscaleu1 :: Maybe (Tree Float)
    , _capSOPlastu :: Maybe (Tree Int)
    , _capSOPdivsu2 :: Maybe (Tree Int)
    , _capSOPdivsu1 :: Maybe (Tree Int)
    , _capSOPpshapeu :: Maybe (Tree Bool)
    , _capSOPscalev2 :: Maybe (Tree Float)
    , _capSOPpshapev :: Maybe (Tree Bool)
    , _capSOPscalev1 :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | AlembicSOP {
    _alembicSOPinterp :: Maybe (Tree Int)
    , _alembicSOPcompnml :: Maybe (Tree Bool)
    , _alembicSOPxform :: Maybe (Tree Int)
    , _alembicSOPtimeunit :: Maybe (Tree Int)
    , _alembicSOPfile :: Maybe (Tree ByteString)
    , _alembicSOPloadfile :: Maybe (Tree Bool)
    , _alembicSOPstraightgpu :: Maybe (Tree Bool)
    , _alembicSOPobjectpath :: Maybe (Tree ByteString)
    , _alembicSOPtime :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ObjectmergeSOP {
    _objectmergeSOPsop4 :: Maybe (Tree SOP)
    , _objectmergeSOPsop1 :: Maybe (Tree SOP)
    , _objectmergeSOPsop6 :: Maybe (Tree SOP)
    , _objectmergeSOPsop9 :: Maybe (Tree SOP)
    , _objectmergeSOPsop10 :: Maybe (Tree SOP)
    , _objectmergeSOPsop3 :: Maybe (Tree SOP)
    , _objectmergeSOPsop5 :: Maybe (Tree SOP)
    , _objectmergeSOPsop8 :: Maybe (Tree SOP)
    , _objectmergeSOPsop7 :: Maybe (Tree SOP)
    , _objectmergeSOPsop2 :: Maybe (Tree SOP)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | MergeSOP {
    _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | BasisSOP {
    _basisSOPulength :: Maybe (Tree Float)
    , _basisSOPuraise :: Maybe (Tree Bool)
    , _basisSOPvbasis :: Maybe (Tree Bool)
    , _basisSOPvparmtype :: Maybe (Tree Int)
    , _basisSOPuorigin :: Maybe (Tree Float)
    , _basisSOPuread :: Maybe (Tree Bool)
    , _basisSOPvrange1 :: Maybe (Tree Float)
    , _basisSOPvlength :: Maybe (Tree Float)
    , _basisSOPuconcat :: Maybe (Tree Bool)
    , _basisSOPurange2 :: Maybe (Tree Float)
    , _basisSOPorderv :: Maybe (Tree Int)
    , _basisSOPuknots :: Maybe (Tree ByteString)
    , _basisSOPvread :: Maybe (Tree Bool)
    , _basisSOPvdoscale :: Maybe (Tree Bool)
    , _basisSOPubasis :: Maybe (Tree Bool)
    , _basisSOPudoscale :: Maybe (Tree Bool)
    , _basisSOPvdoorigin :: Maybe (Tree Bool)
    , _basisSOPvbias :: Maybe (Tree Float)
    , _basisSOPvraise :: Maybe (Tree Bool)
    , _basisSOPorderu :: Maybe (Tree Int)
    , _basisSOPvscale :: Maybe (Tree Float)
    , _basisSOPubias :: Maybe (Tree Float)
    , _basisSOPuscale :: Maybe (Tree Float)
    , _basisSOPvknots :: Maybe (Tree ByteString)
    , _basisSOPvconcat :: Maybe (Tree Bool)
    , _basisSOPgroup :: Maybe (Tree ByteString)
    , _basisSOPudolength :: Maybe (Tree Bool)
    , _basisSOPudoorigin :: Maybe (Tree Bool)
    , _basisSOPvdolength :: Maybe (Tree Bool)
    , _basisSOPuparmtype :: Maybe (Tree Int)
    , _basisSOPvrange2 :: Maybe (Tree Float)
    , _basisSOPurange1 :: Maybe (Tree Float)
    , _basisSOPvorigin :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | AttributeSOP {
    _attributeSOPfrompt1 :: Maybe (Tree ByteString)
    , _attributeSOPtopt1 :: Maybe (Tree ByteString)
    , _attributeSOPtodtl2 :: Maybe (Tree ByteString)
    , _attributeSOPprimdel :: Maybe (Tree ByteString)
    , _attributeSOPtopt2 :: Maybe (Tree ByteString)
    , _attributeSOPtovtx4 :: Maybe (Tree ByteString)
    , _attributeSOPfromvtx1 :: Maybe (Tree ByteString)
    , _attributeSOPtovtx2 :: Maybe (Tree ByteString)
    , _attributeSOPtodtl3 :: Maybe (Tree ByteString)
    , _attributeSOPtovtx0 :: Maybe (Tree ByteString)
    , _attributeSOPfromvtx3 :: Maybe (Tree ByteString)
    , _attributeSOPtopt4 :: Maybe (Tree ByteString)
    , _attributeSOPtopr3 :: Maybe (Tree ByteString)
    , _attributeSOPtodtl0 :: Maybe (Tree ByteString)
    , _attributeSOPtovtx3 :: Maybe (Tree ByteString)
    , _attributeSOPfrompt0 :: Maybe (Tree ByteString)
    , _attributeSOPfromdtl1 :: Maybe (Tree ByteString)
    , _attributeSOPptdel :: Maybe (Tree ByteString)
    , _attributeSOPfrompr2 :: Maybe (Tree ByteString)
    , _attributeSOPfromdtl4 :: Maybe (Tree ByteString)
    , _attributeSOPfrompr1 :: Maybe (Tree ByteString)
    , _attributeSOPfrompt2 :: Maybe (Tree ByteString)
    , _attributeSOPtopr2 :: Maybe (Tree ByteString)
    , _attributeSOPtovtx1 :: Maybe (Tree ByteString)
    , _attributeSOPfrompr3 :: Maybe (Tree ByteString)
    , _attributeSOPtodtl4 :: Maybe (Tree ByteString)
    , _attributeSOPtopr1 :: Maybe (Tree ByteString)
    , _attributeSOPtopt0 :: Maybe (Tree ByteString)
    , _attributeSOPtopr4 :: Maybe (Tree ByteString)
    , _attributeSOPfrompt4 :: Maybe (Tree ByteString)
    , _attributeSOPdtldel :: Maybe (Tree ByteString)
    , _attributeSOPfrompt3 :: Maybe (Tree ByteString)
    , _attributeSOPtopt3 :: Maybe (Tree ByteString)
    , _attributeSOPfromvtx0 :: Maybe (Tree ByteString)
    , _attributeSOPfromvtx4 :: Maybe (Tree ByteString)
    , _attributeSOPvtxdel :: Maybe (Tree ByteString)
    , _attributeSOPtodtl1 :: Maybe (Tree ByteString)
    , _attributeSOPfromdtl3 :: Maybe (Tree ByteString)
    , _attributeSOPfromdtl0 :: Maybe (Tree ByteString)
    , _attributeSOPfrompr0 :: Maybe (Tree ByteString)
    , _attributeSOPfromdtl2 :: Maybe (Tree ByteString)
    , _attributeSOPtopr0 :: Maybe (Tree ByteString)
    , _attributeSOPfromvtx2 :: Maybe (Tree ByteString)
    , _attributeSOPfrompr4 :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | SelectSOP {
    _selectSOPsop :: Maybe (Tree SOP)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | AlignSOP {
    _alignSOPleftuv1 :: Maybe (Tree Float)
    , _alignSOPrightuv2 :: Maybe (Tree Float)
    , _alignSOPs :: Vec3
    , _alignSOPalign :: Maybe (Tree Int)
    , _alignSOPp :: Vec3
    , _alignSOPbias :: Maybe (Tree Float)
    , _alignSOPinc :: Maybe (Tree Int)
    , _alignSOPindividual :: Maybe (Tree Bool)
    , _alignSOPdotrans :: Maybe (Tree Bool)
    , _alignSOPleftuv2 :: Maybe (Tree Float)
    , _alignSOPrightuv1 :: Maybe (Tree Float)
    , _alignSOPr :: Vec3
    , _alignSOPgroup :: Maybe (Tree ByteString)
    , _alignSOPrord :: Maybe (Tree Int)
    , _alignSOPrightuvend2 :: Maybe (Tree Float)
    , _alignSOPdorotate :: Maybe (Tree Bool)
    , _alignSOPt :: Vec3
    , _alignSOPxord :: Maybe (Tree Int)
    , _alignSOPrightuvend1 :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | FontSOP {
    _fontSOPtype :: Maybe (Tree Int)
    , _fontSOPfile :: Maybe (Tree ByteString)
    , _fontSOPs :: Vec2
    , _fontSOPvcenter :: Maybe (Tree Bool)
    , _fontSOPtexture :: Maybe (Tree Int)
    , _fontSOPitalic :: Maybe (Tree Float)
    , _fontSOPkern :: Vec2
    , _fontSOPhcenter :: Maybe (Tree Bool)
    , _fontSOPlod :: Maybe (Tree Float)
    , _fontSOPtext :: Maybe (Tree ByteString)
    , _fontSOPt :: Vec3
    , _fontSOPhole :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | TwistSOP {
    _twistSOPstrength :: Maybe (Tree Float)
    , _twistSOPgroup :: Maybe (Tree ByteString)
    , _twistSOPp :: Vec3
    , _twistSOProll :: Maybe (Tree Float)
    , _twistSOPsaxis :: Maybe (Tree Int)
    , _twistSOPpaxis :: Maybe (Tree Int)
    , _twistSOPop :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | RevolveSOP {
    _revolveSOPcap :: Maybe (Tree Bool)
    , _revolveSOPsurftype :: Maybe (Tree Int)
    , _revolveSOPtype :: Maybe (Tree Int)
    , _revolveSOPpolys :: Maybe (Tree Bool)
    , _revolveSOPdivs :: Maybe (Tree Int)
    , _revolveSOPorigin :: Vec3
    , _revolveSOPbeginangle :: Maybe (Tree Float)
    , _revolveSOPimperfect :: Maybe (Tree Bool)
    , _revolveSOPgroup :: Maybe (Tree ByteString)
    , _revolveSOPdir :: Vec3
    , _revolveSOPendangle :: Maybe (Tree Float)
    , _revolveSOPorder :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | PolyloftSOP {
    _polyloftSOPpointgroup4 :: Maybe (Tree ByteString)
    , _polyloftSOPpointgroup2 :: Maybe (Tree ByteString)
    , _polyloftSOPpointgroup1 :: Maybe (Tree ByteString)
    , _polyloftSOPconsolidate :: Maybe (Tree Bool)
    , _polyloftSOPclosev :: Maybe (Tree Int)
    , _polyloftSOPpointgroup0 :: Maybe (Tree ByteString)
    , _polyloftSOPcloseu :: Maybe (Tree Int)
    , _polyloftSOPpointgroup3 :: Maybe (Tree ByteString)
    , _polyloftSOPgroup :: Maybe (Tree ByteString)
    , _polyloftSOPpolygroup :: Maybe (Tree ByteString)
    , _polyloftSOPcreategroup :: Maybe (Tree Bool)
    , _polyloftSOPprim :: Maybe (Tree Bool)
    , _polyloftSOPpointgroup5 :: Maybe (Tree ByteString)
    , _polyloftSOPminimize :: Maybe (Tree Int)
    , _polyloftSOPdist :: Maybe (Tree Float)
    , _polyloftSOPproximity :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | PolypatchSOP {
    _polypatchSOPconnecttype :: Maybe (Tree Int)
    , _polypatchSOPlastvclamp :: Maybe (Tree Int)
    , _polypatchSOPpolys :: Maybe (Tree Bool)
    , _polypatchSOPdivisionsx :: Maybe (Tree Int)
    , _polypatchSOPfirstvclamp :: Maybe (Tree Int)
    , _polypatchSOPlastuclamp :: Maybe (Tree Int)
    , _polypatchSOPfirstuclamp :: Maybe (Tree Int)
    , _polypatchSOPcloseu :: Maybe (Tree Int)
    , _polypatchSOPbasis :: Maybe (Tree Int)
    , _polypatchSOPgroup :: Maybe (Tree ByteString)
    , _polypatchSOPclosev :: Maybe (Tree Int)
    , _polypatchSOPdivisionsy :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | NullSOP {
    _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | FilletSOP {
    _filletSOPlrwidth2 :: Maybe (Tree Float)
    , _filletSOPleftuv1 :: Maybe (Tree Float)
    , _filletSOPrightuv2 :: Maybe (Tree Float)
    , _filletSOPprimtype :: Maybe (Tree Int)
    , _filletSOPlrscale2 :: Maybe (Tree Float)
    , _filletSOPseamless :: Maybe (Tree Bool)
    , _filletSOPinc :: Maybe (Tree Int)
    , _filletSOPfillet :: Maybe (Tree Int)
    , _filletSOPloop :: Maybe (Tree Bool)
    , _filletSOPlroffset1 :: Maybe (Tree Float)
    , _filletSOPfillettype :: Maybe (Tree Int)
    , _filletSOPleftuv2 :: Maybe (Tree Float)
    , _filletSOPlrwidth1 :: Maybe (Tree Float)
    , _filletSOPrightuv1 :: Maybe (Tree Float)
    , _filletSOPcut :: Maybe (Tree Bool)
    , _filletSOPgroup :: Maybe (Tree ByteString)
    , _filletSOPlroffset2 :: Maybe (Tree Float)
    , _filletSOPdir :: Maybe (Tree Int)
    , _filletSOPlrscale1 :: Maybe (Tree Float)
    , _filletSOPorder :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | InversecurveSOP {
    _inversecurveSOPchop :: Maybe (Tree CHOP)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | TrailSOP {
    _trailSOPreset :: Maybe (Tree Bool)
    , _trailSOPresetpulse :: Maybe (Tree Bool)
    , _trailSOPsurftype :: Maybe (Tree Int)
    , _trailSOPresult :: Maybe (Tree Int)
    , _trailSOPcache :: Maybe (Tree Int)
    , _trailSOPaccurate :: Maybe (Tree Bool)
    , _trailSOPevalframe :: Maybe (Tree Bool)
    , _trailSOPinc :: Maybe (Tree Int)
    , _trailSOPlength :: Maybe (Tree Int)
    , _trailSOPvelscale :: Maybe (Tree Float)
    , _trailSOPclose :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | AttributecreateSOP {
    _attributecreateSOPcompnml :: Maybe (Tree Bool)
    , _attributecreateSOPcomptang :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | LatticeSOP {
    _latticeSOPkernel :: Maybe (Tree ByteString)
    , _latticeSOPdivsx :: Maybe (Tree Int)
    , _latticeSOPradius :: Maybe (Tree Float)
    , _latticeSOPgroup :: Maybe (Tree ByteString)
    , _latticeSOPdivsy :: Maybe (Tree Int)
    , _latticeSOPdivsz :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | TubeSOP {
    _tubeSOPcols :: Maybe (Tree Int)
    , _tubeSOPorderv :: Maybe (Tree Int)
    , _tubeSOPsurftype :: Maybe (Tree Int)
    , _tubeSOPtype :: Maybe (Tree Int)
    , _tubeSOPnormals :: Maybe (Tree Bool)
    , _tubeSOPtexture :: Maybe (Tree Int)
    , _tubeSOPmodifybounds :: Maybe (Tree Bool)
    , _tubeSOPcap :: Maybe (Tree Bool)
    , _tubeSOPimperfect :: Maybe (Tree Bool)
    , _tubeSOPrad2 :: Maybe (Tree Float)
    , _tubeSOProws :: Maybe (Tree Int)
    , _tubeSOPorient :: Maybe (Tree Int)
    , _tubeSOPrad1 :: Maybe (Tree Float)
    , _tubeSOPheight :: Maybe (Tree Float)
    , _tubeSOPt :: Vec3
    , _tubeSOPorderu :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ArmSOP {
    _armSOPshoulder3t :: Vec3
    , _armSOPwrist1t :: Vec3
    , _armSOPshoulder :: Maybe (Tree Float)
    , _armSOPelbow3t :: Vec3
    , _armSOPflipelbow :: Maybe (Tree Bool)
    , _armSOPshoulder1t :: Vec3
    , _armSOPaxis :: Maybe (Tree Int)
    , _armSOPwrist5t :: Vec3
    , _armSOPcapttype :: Maybe (Tree Int)
    , _armSOPelbow :: Maybe (Tree Float)
    , _armSOProtatehand :: Maybe (Tree Bool)
    , _armSOPelbow1t :: Vec3
    , _armSOPwrist3t :: Vec3
    , _armSOPclavlength :: Maybe (Tree Float)
    , _armSOPelbow4t :: Vec3
    , _armSOPwrist :: Maybe (Tree Float)
    , _armSOPs :: Vec3
    , _armSOPshoulder2t :: Vec3
    , _armSOPshoulder4t :: Vec3
    , _armSOPwrist4t :: Vec3
    , _armSOPhandlength :: Maybe (Tree Float)
    , _armSOPhumlength :: Maybe (Tree Float)
    , _armSOPelbowtwist :: Maybe (Tree Float)
    , _armSOPulnalength :: Maybe (Tree Float)
    , _armSOPelbow2t :: Vec3
    , _armSOPbonerad :: Maybe (Tree Float)
    , _armSOPr :: Vec3
    , _armSOPwrist2t :: Vec3
    , _armSOPshoulder5t :: Vec3
    , _armSOPt :: Vec3
    , _armSOPautoelbow :: Maybe (Tree Bool)
    , _armSOPelbow5t :: Vec3
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | TransformSOP {
    _transformSOPfromy :: Maybe (Tree Int)
    , _transformSOPposttx :: Maybe (Tree Int)
    , _transformSOPpostscalez :: Maybe (Tree Int)
    , _transformSOPpostscalex :: Maybe (Tree Int)
    , _transformSOPvlength :: Maybe (Tree Bool)
    , _transformSOPupvector :: Vec3
    , _transformSOPposttz :: Maybe (Tree Int)
    , _transformSOPtoy :: Maybe (Tree Int)
    , _transformSOPxord :: Maybe (Tree Int)
    , _transformSOPr :: Vec3
    , _transformSOPfromz :: Maybe (Tree Int)
    , _transformSOPfromx :: Maybe (Tree Int)
    , _transformSOPtox :: Maybe (Tree Int)
    , _transformSOPpostscaley :: Maybe (Tree Int)
    , _transformSOPs :: Vec3
    , _transformSOPp :: Vec3
    , _transformSOPpostscale :: Maybe (Tree Int)
    , _transformSOPpostty :: Maybe (Tree Int)
    , _transformSOPtoz :: Maybe (Tree Int)
    , _transformSOPgroup :: Maybe (Tree ByteString)
    , _transformSOPrord :: Maybe (Tree Int)
    , _transformSOPscale :: Maybe (Tree Float)
    , _transformSOPt :: Vec3
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | VertexSOP {
    _vertexSOPcustom3val2 :: Maybe (Tree Float)
    , _vertexSOPcustom2val1 :: Maybe (Tree Float)
    , _vertexSOPcustom4type :: Maybe (Tree Int)
    , _vertexSOPalpha :: Maybe (Tree Float)
    , _vertexSOPdoclr :: Maybe (Tree Int)
    , _vertexSOPdocrease :: Maybe (Tree Int)
    , _vertexSOPcustom4val2 :: Maybe (Tree Float)
    , _vertexSOPcustom3val4 :: Maybe (Tree Float)
    , _vertexSOPcustom2 :: Maybe (Tree ByteString)
    , _vertexSOPcustom1 :: Maybe (Tree ByteString)
    , _vertexSOPdiff :: Vec3
    , _vertexSOPcustom1val3 :: Maybe (Tree Float)
    , _vertexSOPcustom2val4 :: Maybe (Tree Float)
    , _vertexSOPcustom4val3 :: Maybe (Tree Float)
    , _vertexSOPcustom3val3 :: Maybe (Tree Float)
    , _vertexSOPcrease :: Maybe (Tree Float)
    , _vertexSOPcustom3val1 :: Maybe (Tree Float)
    , _vertexSOPcustom1val2 :: Maybe (Tree Float)
    , _vertexSOPcustom4val1 :: Maybe (Tree Float)
    , _vertexSOPcustom3type :: Maybe (Tree Int)
    , _vertexSOPcustom4 :: Maybe (Tree ByteString)
    , _vertexSOPmap :: Vec3
    , _vertexSOPcustom3 :: Maybe (Tree ByteString)
    , _vertexSOPgroup :: Maybe (Tree ByteString)
    , _vertexSOPcustom4val4 :: Maybe (Tree Float)
    , _vertexSOPcustom1val4 :: Maybe (Tree Float)
    , _vertexSOPcustom1val1 :: Maybe (Tree Float)
    , _vertexSOPcustom2type :: Maybe (Tree Int)
    , _vertexSOPdouvw :: Maybe (Tree Int)
    , _vertexSOPcustom1type :: Maybe (Tree Int)
    , _vertexSOPcustom2val2 :: Maybe (Tree Float)
    , _vertexSOPcustom2val3 :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | GroupSOP {
    _groupSOPselect2 :: Maybe (Tree Int)
    , _groupSOPnot1 :: Maybe (Tree Bool)
    , _groupSOPusenumber :: Maybe (Tree Bool)
    , _groupSOPpreserve :: Maybe (Tree Bool)
    , _groupSOPop1 :: Maybe (Tree Int)
    , _groupSOPgrp4 :: Maybe (Tree ByteString)
    , _groupSOPgrp3 :: Maybe (Tree ByteString)
    , _groupSOPgrp1 :: Maybe (Tree ByteString)
    , _groupSOPnot4 :: Maybe (Tree Bool)
    , _groupSOPtransfer :: Maybe (Tree Bool)
    , _groupSOPedgestep :: Maybe (Tree Int)
    , _groupSOPdir :: Vec3
    , _groupSOPdoangle :: Maybe (Tree Bool)
    , _groupSOPdestroyname :: Maybe (Tree ByteString)
    , _groupSOPboundarygroups :: Maybe (Tree Bool)
    , _groupSOPentity :: Maybe (Tree Int)
    , _groupSOPusenormal :: Maybe (Tree Bool)
    , _groupSOPselect1 :: Maybe (Tree Int)
    , _groupSOPuseedges :: Maybe (Tree Bool)
    , _groupSOPrangeend :: Maybe (Tree Int)
    , _groupSOPgeotype :: Maybe (Tree Int)
    , _groupSOPop2 :: Maybe (Tree Int)
    , _groupSOPgrp2 :: Maybe (Tree ByteString)
    , _groupSOPrangestart :: Maybe (Tree Int)
    , _groupSOPangle :: Maybe (Tree Float)
    , _groupSOPnewname :: Maybe (Tree ByteString)
    , _groupSOPcrname :: Maybe (Tree ByteString)
    , _groupSOPnot3 :: Maybe (Tree Bool)
    , _groupSOPcnvtname :: Maybe (Tree ByteString)
    , _groupSOPusebounds :: Maybe (Tree Bool)
    , _groupSOPordered :: Maybe (Tree Bool)
    , _groupSOPpattern :: Maybe (Tree ByteString)
    , _groupSOPboundtype :: Maybe (Tree Int)
    , _groupSOPgroupop :: Maybe (Tree Int)
    , _groupSOPdodepth :: Maybe (Tree Bool)
    , _groupSOPop3 :: Maybe (Tree Int)
    , _groupSOPfilter :: Maybe (Tree Int)
    , _groupSOPsize :: Vec3
    , _groupSOPedgeangle :: Maybe (Tree Float)
    , _groupSOPoldname :: Maybe (Tree ByteString)
    , _groupSOPgrpequal :: Maybe (Tree ByteString)
    , _groupSOPnot2 :: Maybe (Tree Bool)
    , _groupSOPcnvtype :: Maybe (Tree Int)
    , _groupSOPconvertg :: Maybe (Tree ByteString)
    , _groupSOPunshared :: Maybe (Tree Bool)
    , _groupSOPt :: Vec3
    , _groupSOPpoint :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | RefineSOP {
    _refineSOPdomainv2 :: Maybe (Tree Float)
    , _refineSOPfirstv :: Maybe (Tree Bool)
    , _refineSOPrefinev :: Maybe (Tree Int)
    , _refineSOPfirstu :: Maybe (Tree Bool)
    , _refineSOPsecondv :: Maybe (Tree Bool)
    , _refineSOPunrefinev :: Maybe (Tree Int)
    , _refineSOPtolv :: Maybe (Tree Float)
    , _refineSOPdomainu2 :: Maybe (Tree Float)
    , _refineSOPdomainu1 :: Maybe (Tree Float)
    , _refineSOPunrefineu :: Maybe (Tree Int)
    , _refineSOPdivsu :: Maybe (Tree Int)
    , _refineSOPdomainv1 :: Maybe (Tree Float)
    , _refineSOPtolu :: Maybe (Tree Float)
    , _refineSOPgroup :: Maybe (Tree ByteString)
    , _refineSOPsubdivspace :: Maybe (Tree Int)
    , _refineSOPsecondu :: Maybe (Tree Bool)
    , _refineSOPrefineu :: Maybe (Tree Int)
    , _refineSOPrefinespace :: Maybe (Tree Int)
    , _refineSOPdivsv :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | DivideSOP {
    _divideSOPplanar :: Maybe (Tree Bool)
    , _divideSOPangle :: Vec3
    , _divideSOPdivs :: Maybe (Tree Int)
    , _divideSOPconvex :: Maybe (Tree Bool)
    , _divideSOPoffset :: Vec3
    , _divideSOPsize :: Vec3
    , _divideSOPweight1 :: Maybe (Tree Float)
    , _divideSOPsmooth :: Maybe (Tree Bool)
    , _divideSOPdual :: Maybe (Tree Bool)
    , _divideSOPgroup :: Maybe (Tree ByteString)
    , _divideSOPbrick :: Maybe (Tree Bool)
    , _divideSOPweight2 :: Maybe (Tree Float)
    , _divideSOPremovesh :: Maybe (Tree Bool)
    , _divideSOPnumsides :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ResampleSOP {
    _resampleSOPmeasure :: Maybe (Tree Int)
    , _resampleSOPsegs :: Maybe (Tree Int)
    , _resampleSOPgroup :: Maybe (Tree ByteString)
    , _resampleSOPlod :: Maybe (Tree Float)
    , _resampleSOPlast :: Maybe (Tree Bool)
    , _resampleSOPmethod :: Maybe (Tree Int)
    , _resampleSOPdosegs :: Maybe (Tree Bool)
    , _resampleSOPdolength :: Maybe (Tree Bool)
    , _resampleSOPedge :: Maybe (Tree Bool)
    , _resampleSOPlength :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ClipSOP {
    _clipSOPbelow :: Maybe (Tree ByteString)
    , _clipSOPgroup :: Maybe (Tree ByteString)
    , _clipSOPnewg :: Maybe (Tree Bool)
    , _clipSOPclipop :: Maybe (Tree Int)
    , _clipSOPdir :: Vec3
    , _clipSOPdist :: Maybe (Tree Float)
    , _clipSOPabove :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | SpringSOP {
    _springSOPresetpulse :: Maybe (Tree Bool)
    , _springSOPfixed :: Maybe (Tree ByteString)
    , _springSOPattractmode :: Maybe (Tree Int)
    , _springSOPgaintan :: Maybe (Tree Float)
    , _springSOPspringk :: Maybe (Tree Float)
    , _springSOPgainnorm :: Maybe (Tree Float)
    , _springSOPtimeinc :: Maybe (Tree Float)
    , _springSOPcopygroups :: Maybe (Tree Bool)
    , _springSOPrevertfixed :: Maybe (Tree Bool)
    , _springSOPexternal :: Vec3
    , _springSOPdodrag :: Maybe (Tree Bool)
    , _springSOPlimitpos :: Vec3
    , _springSOPtension :: Maybe (Tree Float)
    , _springSOPdomass :: Maybe (Tree Bool)
    , _springSOPperiod :: Maybe (Tree Float)
    , _springSOPaccurate :: Maybe (Tree Bool)
    , _springSOPturb :: Vec3
    , _springSOPtimepreroll :: Maybe (Tree Float)
    , _springSOPhit :: Maybe (Tree Int)
    , _springSOPseed :: Maybe (Tree Int)
    , _springSOPdrag :: Maybe (Tree Float)
    , _springSOPmass :: Maybe (Tree Float)
    , _springSOPlimitneg :: Vec3
    , _springSOPspringbehavior :: Maybe (Tree Int)
    , _springSOPreset :: Maybe (Tree Bool)
    , _springSOPwind :: Vec3
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | SuperquadSOP {
    _superquadSOPcols :: Maybe (Tree Int)
    , _superquadSOPsurftype :: Maybe (Tree Int)
    , _superquadSOPtype :: Maybe (Tree Int)
    , _superquadSOPnormals :: Maybe (Tree Bool)
    , _superquadSOPangle :: Maybe (Tree Float)
    , _superquadSOPexpxy :: Maybe (Tree Float)
    , _superquadSOPmodifybounds :: Maybe (Tree Bool)
    , _superquadSOPexpz :: Maybe (Tree Float)
    , _superquadSOProws :: Maybe (Tree Int)
    , _superquadSOPrad :: Vec3
    , _superquadSOPorient :: Maybe (Tree Int)
    , _superquadSOPt :: Vec3
    , _superquadSOPtexture :: Maybe (Tree Int)
    , _superquadSOPcusp :: Maybe (Tree Bool)
    , _superquadSOPupole :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ProfileSOP {
    _profileSOPvrange1 :: Maybe (Tree Float)
    , _profileSOPcsharp :: Maybe (Tree Bool)
    , _profileSOPsdivs :: Maybe (Tree Int)
    , _profileSOPurange2 :: Maybe (Tree Float)
    , _profileSOPdelprof :: Maybe (Tree Bool)
    , _profileSOPmaptype :: Maybe (Tree Int)
    , _profileSOPsmooth :: Maybe (Tree Bool)
    , _profileSOPkeepsurf :: Maybe (Tree Bool)
    , _profileSOPtolerance :: Maybe (Tree Float)
    , _profileSOPgroup :: Maybe (Tree ByteString)
    , _profileSOPparametric :: Maybe (Tree Bool)
    , _profileSOPvrange2 :: Maybe (Tree Float)
    , _profileSOPorder :: Maybe (Tree Int)
    , _profileSOPurange1 :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | GridSOP {
    _gridSOPinterpu :: Maybe (Tree Bool)
    , _gridSOPcols :: Maybe (Tree Int)
    , _gridSOPsurftype :: Maybe (Tree Int)
    , _gridSOPtype :: Maybe (Tree Int)
    , _gridSOPnormals :: Maybe (Tree Bool)
    , _gridSOPsize :: Vec2
    , _gridSOPtexture :: Maybe (Tree Int)
    , _gridSOProws :: Maybe (Tree Int)
    , _gridSOPinterpv :: Maybe (Tree Bool)
    , _gridSOPmodifybounds :: Maybe (Tree Bool)
    , _gridSOPorderv :: Maybe (Tree Int)
    , _gridSOPorient :: Maybe (Tree Int)
    , _gridSOPt :: Vec3
    , _gridSOPorderu :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | HoleSOP {
    _holeSOPangle :: Maybe (Tree Float)
    , _holeSOPunbridge :: Maybe (Tree Bool)
    , _holeSOPsnap :: Maybe (Tree Bool)
    , _holeSOPdist :: Maybe (Tree Float)
    , _holeSOPgroup :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | SkinSOP {
    _skinSOPsurftype :: Maybe (Tree Int)
    , _skinSOPvprims :: Maybe (Tree ByteString)
    , _skinSOPpolys :: Maybe (Tree Bool)
    , _skinSOPprim :: Maybe (Tree Bool)
    , _skinSOPorderv :: Maybe (Tree Int)
    , _skinSOPinc :: Maybe (Tree Int)
    , _skinSOPuprims :: Maybe (Tree ByteString)
    , _skinSOPskinops :: Maybe (Tree Int)
    , _skinSOPforce :: Maybe (Tree Bool)
    , _skinSOPclosev :: Maybe (Tree Int)
    , _skinSOPkeepshape :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | LineSOP {
    _lineSOPpoints :: Maybe (Tree Int)
    , _lineSOPpb :: Vec3
    , _lineSOPtexture :: Maybe (Tree Int)
    , _lineSOPpa :: Vec3
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | DeleteSOP {
    _deleteSOPselect2 :: Maybe (Tree Int)
    , _deleteSOPusenumber :: Maybe (Tree Bool)
    , _deleteSOPrangestart :: Maybe (Tree Int)
    , _deleteSOPremovegrp :: Maybe (Tree Bool)
    , _deleteSOPusebounds :: Maybe (Tree Bool)
    , _deleteSOPdir :: Vec3
    , _deleteSOPentity :: Maybe (Tree Int)
    , _deleteSOPpattern :: Maybe (Tree ByteString)
    , _deleteSOPrangeend :: Maybe (Tree Int)
    , _deleteSOPusenormal :: Maybe (Tree Bool)
    , _deleteSOPfilter :: Maybe (Tree Int)
    , _deleteSOPkeeppoints :: Maybe (Tree Bool)
    , _deleteSOPangle :: Maybe (Tree Float)
    , _deleteSOPselect1 :: Maybe (Tree Int)
    , _deleteSOPsize :: Vec3
    , _deleteSOPnegate :: Maybe (Tree Int)
    , _deleteSOPgroupop :: Maybe (Tree Int)
    , _deleteSOPboundtype :: Maybe (Tree Int)
    , _deleteSOPgroup :: Maybe (Tree ByteString)
    , _deleteSOPt :: Vec3
    , _deleteSOPgeotype :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | PolyreduceSOP {
    _polyreduceSOPreduce :: Maybe (Tree ByteString)
    , _polyreduceSOPmeshinvert :: Maybe (Tree Bool)
    , _polyreduceSOPpercentage :: Maybe (Tree Float)
    , _polyreduceSOPdistance :: Maybe (Tree Float)
    , _polyreduceSOPlengthweight :: Maybe (Tree Float)
    , _polyreduceSOPcreaseweight :: Maybe (Tree Float)
    , _polyreduceSOPborderweight :: Maybe (Tree Float)
    , _polyreduceSOPkeepedges :: Maybe (Tree Bool)
    , _polyreduceSOPtriangulate :: Maybe (Tree Bool)
    , _polyreduceSOPoriginalpoints :: Maybe (Tree Bool)
    , _polyreduceSOPnumpolys :: Maybe (Tree Int)
    , _polyreduceSOPminpercent :: Maybe (Tree Float)
    , _polyreduceSOPcreases :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | SpriteSOP {
    _spriteSOPxyzchop :: Maybe (Tree CHOP)
    , _spriteSOPfalloffend :: Maybe (Tree Float)
    , _spriteSOPalphachop :: Maybe (Tree CHOP)
    , _spriteSOPwidthchop :: Maybe (Tree CHOP)
    , _spriteSOPcolorchop :: Maybe (Tree CHOP)
    , _spriteSOPconstantwidthnear :: Maybe (Tree Float)
    , _spriteSOPperspectivewidth :: Maybe (Tree Float)
    , _spriteSOPfalloffstart :: Maybe (Tree Float)
    , _spriteSOPconstantwidth :: Maybe (Tree Float)
    , _spriteSOPconstantwitdhfar :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | SubdivideSOP {
    _subdivideSOPcloseholes :: Maybe (Tree Int)
    , _subdivideSOPsubdivide :: Maybe (Tree ByteString)
    , _subdivideSOPoverridecrease :: Maybe (Tree Bool)
    , _subdivideSOPbias :: Maybe (Tree Float)
    , _subdivideSOPsurroundpoly :: Maybe (Tree Int)
    , _subdivideSOPoutputcrease :: Maybe (Tree Bool)
    , _subdivideSOPoutcreasegroup :: Maybe (Tree ByteString)
    , _subdivideSOPiterations :: Maybe (Tree Int)
    , _subdivideSOPcreaseweight :: Maybe (Tree Float)
    , _subdivideSOPcreases :: Maybe (Tree ByteString)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | IsosurfaceSOP {
    _isosurfaceSOPnormals :: Maybe (Tree Bool)
    , _isosurfaceSOPmin :: Vec3
    , _isosurfaceSOPfunc :: Maybe (Tree Float)
    , _isosurfaceSOPdivsz :: Maybe (Tree Int)
    , _isosurfaceSOPdivsy :: Maybe (Tree Int)
    , _isosurfaceSOPmax :: Vec3
    , _isosurfaceSOPdivsx :: Maybe (Tree Int)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | CaptureregionSOP {
    _captureregionSOPcolor :: Vec3
    , _captureregionSOPbheight :: Maybe (Tree Float)
    , _captureregionSOPbcap :: Vec3
    , _captureregionSOPtcap :: Vec3
    , _captureregionSOPweight2 :: Maybe (Tree Float)
    , _captureregionSOPorient :: Maybe (Tree Int)
    , _captureregionSOPt :: Vec3
    , _captureregionSOPtheight :: Maybe (Tree Float)
    , _captureregionSOPweight1 :: Maybe (Tree Float)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ScriptSOP {
    _scriptSOPcallbacks :: Maybe (Tree DAT)
    , _scriptSOPsetuppars :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }
  | ClaySOP {
    _claySOPvsharp :: Maybe (Tree Float)
    , _claySOPuvsnap1 :: Maybe (Tree Float)
    , _claySOPv :: Maybe (Tree Float)
    , _claySOPu :: Maybe (Tree Float)
    , _claySOPvusebias :: Maybe (Tree Bool)
    , _claySOPubias :: Maybe (Tree Float)
    , _claySOPdir :: Vec3
    , _claySOPvwarp :: Maybe (Tree Bool)
    , _claySOPxord :: Maybe (Tree Int)
    , _claySOPdist :: Maybe (Tree Float)
    , _claySOPr :: Vec3
    , _claySOPs :: Vec3
    , _claySOPp :: Vec3
    , _claySOPvbias :: Maybe (Tree Float)
    , _claySOPusharp :: Maybe (Tree Float)
    , _claySOPuwarp :: Maybe (Tree Bool)
    , _claySOPcoord :: Vec3
    , _claySOPgroup :: Maybe (Tree ByteString)
    , _claySOPrord :: Maybe (Tree Int)
    , _claySOPuvsnap2 :: Maybe (Tree Float)
    , _claySOPt :: Vec3
    , _claySOPnormal :: Maybe (Tree Bool)
    , _claySOPuusebias :: Maybe (Tree Bool)
    , _sopCommands :: [CommandType]
    , _sopIns :: [Tree SOP]
  }


data TOP = 
  RemapTOP {
    _remapTOPfillmode :: Maybe (Tree Int)
    , _remapTOPresmult :: Maybe (Tree Bool)
    , _remapTOPaspect2 :: Maybe (Tree Float)
    , _remapTOPformat :: Maybe (Tree Int)
    , _remapTOPresmenu :: Maybe (Tree Int)
    , _remapTOPnpasses :: Maybe (Tree Int)
    , _remapTOPresolutionw :: Maybe (Tree Int)
    , _remapTOPextend :: Maybe (Tree Int)
    , _remapTOPaspect1 :: Maybe (Tree Float)
    , _remapTOPoutputresolution :: Maybe (Tree Int)
    , _remapTOPfliphorz :: Maybe (Tree Bool)
    , _remapTOPresolutionh :: Maybe (Tree Int)
    , _remapTOPchanmask :: Maybe (Tree Int)
    , _remapTOParmenu :: Maybe (Tree Int)
    , _remapTOPvertsource :: Maybe (Tree Int)
    , _remapTOPfiltertype :: Maybe (Tree Int)
    , _remapTOPhorzsource :: Maybe (Tree Int)
    , _remapTOPflipvert :: Maybe (Tree Bool)
    , _remapTOPoutputaspect :: Maybe (Tree Int)
    , _remapTOPinputfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | MoviefileoutTOP {
    _moviefileoutTOPquality :: Maybe (Tree Float)
    , _moviefileoutTOPkeyframeinterval :: Maybe (Tree Int)
    , _moviefileoutTOPaddframe :: Maybe (Tree Bool)
    , _moviefileoutTOPformat :: Maybe (Tree Int)
    , _moviefileoutTOPfile :: Maybe (Tree ByteString)
    , _moviefileoutTOPhapsecondarycompression :: Maybe (Tree Bool)
    , _moviefileoutTOPinputfiltertype :: Maybe (Tree Int)
    , _moviefileoutTOPfps :: Maybe (Tree Float)
    , _moviefileoutTOPoutputresolution :: Maybe (Tree Int)
    , _moviefileoutTOPfillmode :: Maybe (Tree Int)
    , _moviefileoutTOPresolutionw :: Maybe (Tree Int)
    , _moviefileoutTOPaudiobitrate :: Maybe (Tree Int)
    , _moviefileoutTOPprofile :: Maybe (Tree Int)
    , _moviefileoutTOPbitratemode :: Maybe (Tree Int)
    , _moviefileoutTOPmoviepixelformat :: Maybe (Tree Int)
    , _moviefileoutTOPn :: Maybe (Tree Int)
    , _moviefileoutTOPvideocodec :: Maybe (Tree Int)
    , _moviefileoutTOPaspect2 :: Maybe (Tree Float)
    , _moviefileoutTOPimagefiletype :: Maybe (Tree Int)
    , _moviefileoutTOPavgbitrate :: Maybe (Tree Float)
    , _moviefileoutTOPaudiocodec :: Maybe (Tree Int)
    , _moviefileoutTOPpeakbitrate :: Maybe (Tree Float)
    , _moviefileoutTOPresmult :: Maybe (Tree Bool)
    , _moviefileoutTOPtype :: Maybe (Tree Int)
    , _moviefileoutTOPresmenu :: Maybe (Tree Int)
    , _moviefileoutTOPencodetestmode :: Maybe (Tree Bool)
    , _moviefileoutTOPchanmask :: Maybe (Tree Int)
    , _moviefileoutTOPaudiochop :: Maybe (Tree CHOP)
    , _moviefileoutTOPmipmaps :: Maybe (Tree Bool)
    , _moviefileoutTOPnpasses :: Maybe (Tree Int)
    , _moviefileoutTOPoutputaspect :: Maybe (Tree Int)
    , _moviefileoutTOPresolutionh :: Maybe (Tree Int)
    , _moviefileoutTOParmenu :: Maybe (Tree Int)
    , _moviefileoutTOPmaxthread :: Maybe (Tree Int)
    , _moviefileoutTOPstallforopen :: Maybe (Tree Bool)
    , _moviefileoutTOPaspect1 :: Maybe (Tree Float)
    , _moviefileoutTOPrecord :: Maybe (Tree Bool)
    , _moviefileoutTOPpause :: Maybe (Tree Bool)
    , _moviefileoutTOPentropymode :: Maybe (Tree Int)
    , _moviefileoutTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | GlslmultiTOP {
    _glslmultiTOPdepth :: Maybe (Tree Int)
    , _glslmultiTOPvalue3 :: Vec4
    , _glslmultiTOPglslversion :: Maybe (Tree Int)
    , _glslmultiTOPfillmode :: Maybe (Tree Int)
    , _glslmultiTOPresolutionw :: Maybe (Tree Int)
    , _glslmultiTOPacsize0 :: Maybe (Tree Int)
    , _glslmultiTOPclearvalue :: Vec4
    , _glslmultiTOPvalue24 :: Vec4
    , _glslmultiTOPdispatchsizey :: Maybe (Tree Int)
    , _glslmultiTOPvalue10 :: Vec4
    , _glslmultiTOPresmenu :: Maybe (Tree Int)
    , _glslmultiTOPuniname12 :: Maybe (Tree ByteString)
    , _glslmultiTOPuniname25 :: Maybe (Tree ByteString)
    , _glslmultiTOPchopunitype9 :: Maybe (Tree Int)
    , _glslmultiTOPacinitval0 :: Maybe (Tree Int)
    , _glslmultiTOPuniname1 :: Maybe (Tree ByteString)
    , _glslmultiTOPmatuniname2 :: Maybe (Tree ByteString)
    , _glslmultiTOPuniname10 :: Maybe (Tree ByteString)
    , _glslmultiTOPchopuniname7 :: Maybe (Tree ByteString)
    , _glslmultiTOPuniname11 :: Maybe (Tree ByteString)
    , _glslmultiTOPvalue23 :: Vec4
    , _glslmultiTOPoutputaspect :: Maybe (Tree Int)
    , _glslmultiTOPvalue19 :: Vec4
    , _glslmultiTOPchopunitype2 :: Maybe (Tree Int)
    , _glslmultiTOPuniname5 :: Maybe (Tree ByteString)
    , _glslmultiTOPuniname4 :: Maybe (Tree ByteString)
    , _glslmultiTOPuniname23 :: Maybe (Tree ByteString)
    , _glslmultiTOPvalue2 :: Vec4
    , _glslmultiTOPresmult :: Maybe (Tree Bool)
    , _glslmultiTOPchopuniname9 :: Maybe (Tree ByteString)
    , _glslmultiTOPacsize1 :: Maybe (Tree Int)
    , _glslmultiTOPvalue13 :: Vec4
    , _glslmultiTOPacsingleval1 :: Maybe (Tree Int)
    , _glslmultiTOPacinitval1 :: Maybe (Tree Int)
    , _glslmultiTOPchopuniname4 :: Maybe (Tree ByteString)
    , _glslmultiTOPchop6 :: Maybe (Tree CHOP)
    , _glslmultiTOPuniname14 :: Maybe (Tree ByteString)
    , _glslmultiTOPchoparraytype8 :: Maybe (Tree Int)
    , _glslmultiTOPvalue17 :: Vec4
    , _glslmultiTOPchopunitype4 :: Maybe (Tree Int)
    , _glslmultiTOPchopuniname8 :: Maybe (Tree ByteString)
    , _glslmultiTOPchanmask :: Maybe (Tree Int)
    , _glslmultiTOPchopuniname1 :: Maybe (Tree ByteString)
    , _glslmultiTOPoutputaccess :: Maybe (Tree Int)
    , _glslmultiTOPuniname2 :: Maybe (Tree ByteString)
    , _glslmultiTOPvalue6 :: Vec4
    , _glslmultiTOParmenu :: Maybe (Tree Int)
    , _glslmultiTOPuniname3 :: Maybe (Tree ByteString)
    , _glslmultiTOPvalue21 :: Vec4
    , _glslmultiTOPchopunitype3 :: Maybe (Tree Int)
    , _glslmultiTOPchopunitype6 :: Maybe (Tree Int)
    , _glslmultiTOPvalue4 :: Vec4
    , _glslmultiTOPvalue15 :: Vec4
    , _glslmultiTOPchop3 :: Maybe (Tree CHOP)
    , _glslmultiTOPclearoutputs :: Maybe (Tree Bool)
    , _glslmultiTOPfiltertype :: Maybe (Tree Int)
    , _glslmultiTOPuniname20 :: Maybe (Tree ByteString)
    , _glslmultiTOPmatuniname1 :: Maybe (Tree ByteString)
    , _glslmultiTOPchopuniname2 :: Maybe (Tree ByteString)
    , _glslmultiTOPuniname9 :: Maybe (Tree ByteString)
    , _glslmultiTOPchoparraytype1 :: Maybe (Tree Int)
    , _glslmultiTOPchopuniname0 :: Maybe (Tree ByteString)
    , _glslmultiTOPresolutionh :: Maybe (Tree Int)
    , _glslmultiTOPuniname27 :: Maybe (Tree ByteString)
    , _glslmultiTOPaspect1 :: Maybe (Tree Float)
    , _glslmultiTOPnumcolorbufs :: Maybe (Tree Int)
    , _glslmultiTOPinputmapping :: Maybe (Tree Int)
    , _glslmultiTOPvalue27 :: Vec4
    , _glslmultiTOPchop2 :: Maybe (Tree CHOP)
    , _glslmultiTOPvalue8 :: Vec4
    , _glslmultiTOPchop5 :: Maybe (Tree CHOP)
    , _glslmultiTOPuniname13 :: Maybe (Tree ByteString)
    , _glslmultiTOPchopunitype0 :: Maybe (Tree Int)
    , _glslmultiTOPacinitval2 :: Maybe (Tree Int)
    , _glslmultiTOPacbinding3 :: Maybe (Tree Int)
    , _glslmultiTOPuniname28 :: Maybe (Tree ByteString)
    , _glslmultiTOPvalue0 :: Vec4
    , _glslmultiTOPacchopval2 :: Maybe (Tree CHOP)
    , _glslmultiTOPchoparraytype4 :: Maybe (Tree Int)
    , _glslmultiTOPchopunitype8 :: Maybe (Tree Int)
    , _glslmultiTOPinputextendw :: Maybe (Tree Int)
    , _glslmultiTOPuniname0 :: Maybe (Tree ByteString)
    , _glslmultiTOPuniname26 :: Maybe (Tree ByteString)
    , _glslmultiTOPacsize3 :: Maybe (Tree Int)
    , _glslmultiTOPcustomdepth :: Maybe (Tree Int)
    , _glslmultiTOPmatuniname3 :: Maybe (Tree ByteString)
    , _glslmultiTOPacbinding2 :: Maybe (Tree Int)
    , _glslmultiTOPchoparraytype5 :: Maybe (Tree Int)
    , _glslmultiTOPnval :: Maybe (Tree Int)
    , _glslmultiTOPmode :: Maybe (Tree Int)
    , _glslmultiTOPaspect2 :: Maybe (Tree Float)
    , _glslmultiTOPformat :: Maybe (Tree Int)
    , _glslmultiTOPvalue29 :: Vec4
    , _glslmultiTOPacinitval3 :: Maybe (Tree Int)
    , _glslmultiTOPchopuniname3 :: Maybe (Tree ByteString)
    , _glslmultiTOPcomputedat :: Maybe (Tree DAT)
    , _glslmultiTOPacchopval0 :: Maybe (Tree CHOP)
    , _glslmultiTOPpixeldat :: Maybe (Tree DAT)
    , _glslmultiTOPvalue20 :: Vec4
    , _glslmultiTOPvalue25 :: Vec4
    , _glslmultiTOPchoparraytype6 :: Maybe (Tree Int)
    , _glslmultiTOPchoparraytype9 :: Maybe (Tree Int)
    , _glslmultiTOPtype :: Maybe (Tree Int)
    , _glslmultiTOPacsingleval0 :: Maybe (Tree Int)
    , _glslmultiTOPchopuniname6 :: Maybe (Tree ByteString)
    , _glslmultiTOPuniname17 :: Maybe (Tree ByteString)
    , _glslmultiTOPuniname8 :: Maybe (Tree ByteString)
    , _glslmultiTOPchopuniname5 :: Maybe (Tree ByteString)
    , _glslmultiTOPmatuniname7 :: Maybe (Tree ByteString)
    , _glslmultiTOPchop7 :: Maybe (Tree CHOP)
    , _glslmultiTOPchop9 :: Maybe (Tree CHOP)
    , _glslmultiTOPenablevectorpage3 :: Maybe (Tree Bool)
    , _glslmultiTOPchop0 :: Maybe (Tree CHOP)
    , _glslmultiTOPuniname19 :: Maybe (Tree ByteString)
    , _glslmultiTOPvalue11 :: Vec4
    , _glslmultiTOPuniname7 :: Maybe (Tree ByteString)
    , _glslmultiTOPloaduniformnames :: Maybe (Tree Bool)
    , _glslmultiTOPuniname29 :: Maybe (Tree ByteString)
    , _glslmultiTOPvalue5 :: Vec4
    , _glslmultiTOPchop1 :: Maybe (Tree CHOP)
    , _glslmultiTOPvalue9 :: Vec4
    , _glslmultiTOPchop4 :: Maybe (Tree CHOP)
    , _glslmultiTOPmatuniname9 :: Maybe (Tree ByteString)
    , _glslmultiTOPdispatchsizez :: Maybe (Tree Int)
    , _glslmultiTOPchopunitype5 :: Maybe (Tree Int)
    , _glslmultiTOPchoparraytype7 :: Maybe (Tree Int)
    , _glslmultiTOPinputfiltertype :: Maybe (Tree Int)
    , _glslmultiTOPmatuniname4 :: Maybe (Tree ByteString)
    , _glslmultiTOPchopunitype1 :: Maybe (Tree Int)
    , _glslmultiTOPmatuniname8 :: Maybe (Tree ByteString)
    , _glslmultiTOPvalue26 :: Vec4
    , _glslmultiTOPuniname21 :: Maybe (Tree ByteString)
    , _glslmultiTOPvalue28 :: Vec4
    , _glslmultiTOPacsingleval2 :: Maybe (Tree Int)
    , _glslmultiTOPvalue14 :: Vec4
    , _glslmultiTOPuniname24 :: Maybe (Tree ByteString)
    , _glslmultiTOPacbinding0 :: Maybe (Tree Int)
    , _glslmultiTOPuniname16 :: Maybe (Tree ByteString)
    , _glslmultiTOPchoparraytype3 :: Maybe (Tree Int)
    , _glslmultiTOPnpasses :: Maybe (Tree Int)
    , _glslmultiTOPchop8 :: Maybe (Tree CHOP)
    , _glslmultiTOPacchopval1 :: Maybe (Tree CHOP)
    , _glslmultiTOPacchopval3 :: Maybe (Tree CHOP)
    , _glslmultiTOPinputextenduv :: Maybe (Tree Int)
    , _glslmultiTOPvalue22 :: Vec4
    , _glslmultiTOPoutputresolution :: Maybe (Tree Int)
    , _glslmultiTOPacsize2 :: Maybe (Tree Int)
    , _glslmultiTOPmatuniname0 :: Maybe (Tree ByteString)
    , _glslmultiTOPmatuniname6 :: Maybe (Tree ByteString)
    , _glslmultiTOPacbinding1 :: Maybe (Tree Int)
    , _glslmultiTOPuniname15 :: Maybe (Tree ByteString)
    , _glslmultiTOPvalue1 :: Vec4
    , _glslmultiTOPvalue16 :: Vec4
    , _glslmultiTOPmatuniname5 :: Maybe (Tree ByteString)
    , _glslmultiTOPdispatchsizex :: Maybe (Tree Int)
    , _glslmultiTOPvertexdat :: Maybe (Tree DAT)
    , _glslmultiTOPchoparraytype2 :: Maybe (Tree Int)
    , _glslmultiTOPuniname18 :: Maybe (Tree ByteString)
    , _glslmultiTOPchopunitype7 :: Maybe (Tree Int)
    , _glslmultiTOPuniname6 :: Maybe (Tree ByteString)
    , _glslmultiTOPvalue7 :: Vec4
    , _glslmultiTOPuniname22 :: Maybe (Tree ByteString)
    , _glslmultiTOPvalue18 :: Vec4
    , _glslmultiTOPacsingleval3 :: Maybe (Tree Int)
    , _glslmultiTOPvalue12 :: Vec4
    , _glslmultiTOPchoparraytype0 :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | SubstanceselectTOP {
    _substanceselectTOPsubstance :: Maybe (Tree TOP)
    , _substanceselectTOPresmult :: Maybe (Tree Bool)
    , _substanceselectTOPaspect2 :: Maybe (Tree Float)
    , _substanceselectTOPformat :: Maybe (Tree Int)
    , _substanceselectTOPoutput :: Maybe (Tree ByteString)
    , _substanceselectTOPresmenu :: Maybe (Tree Int)
    , _substanceselectTOPnpasses :: Maybe (Tree Int)
    , _substanceselectTOPinputfiltertype :: Maybe (Tree Int)
    , _substanceselectTOPchanmask :: Maybe (Tree Int)
    , _substanceselectTOPoutputresolution :: Maybe (Tree Int)
    , _substanceselectTOPfillmode :: Maybe (Tree Int)
    , _substanceselectTOPresolutionw :: Maybe (Tree Int)
    , _substanceselectTOParmenu :: Maybe (Tree Int)
    , _substanceselectTOPfiltertype :: Maybe (Tree Int)
    , _substanceselectTOPaspect1 :: Maybe (Tree Float)
    , _substanceselectTOPresolutionh :: Maybe (Tree Int)
    , _substanceselectTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | PhotoshopinTOP {
    _photoshopinTOPaspect2 :: Maybe (Tree Float)
    , _photoshopinTOPformat :: Maybe (Tree Int)
    , _photoshopinTOPactive :: Maybe (Tree Bool)
    , _photoshopinTOPoutputresolution :: Maybe (Tree Int)
    , _photoshopinTOPinputfiltertype :: Maybe (Tree Int)
    , _photoshopinTOPchanmask :: Maybe (Tree Int)
    , _photoshopinTOPaddress :: Maybe (Tree ByteString)
    , _photoshopinTOPfillmode :: Maybe (Tree Int)
    , _photoshopinTOPresolutionw :: Maybe (Tree Int)
    , _photoshopinTOParmenu :: Maybe (Tree Int)
    , _photoshopinTOPfiltertype :: Maybe (Tree Int)
    , _photoshopinTOPimageformat :: Maybe (Tree Int)
    , _photoshopinTOPlockeddocument :: Maybe (Tree ByteString)
    , _photoshopinTOPresmult :: Maybe (Tree Bool)
    , _photoshopinTOPresmenu :: Maybe (Tree Int)
    , _photoshopinTOPunlock :: Maybe (Tree Bool)
    , _photoshopinTOPpassword :: Maybe (Tree ByteString)
    , _photoshopinTOPresolutionh :: Maybe (Tree Int)
    , _photoshopinTOPnpasses :: Maybe (Tree Int)
    , _photoshopinTOPlocktocurrent :: Maybe (Tree Bool)
    , _photoshopinTOPupdatemode :: Maybe (Tree Int)
    , _photoshopinTOPaspect1 :: Maybe (Tree Float)
    , _photoshopinTOPupdate :: Maybe (Tree Bool)
    , _photoshopinTOPmaxupdaterate :: Maybe (Tree Float)
    , _photoshopinTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | OutTOP {
    _outTOPresmult :: Maybe (Tree Bool)
    , _outTOPaspect2 :: Maybe (Tree Float)
    , _outTOPformat :: Maybe (Tree Int)
    , _outTOPresmenu :: Maybe (Tree Int)
    , _outTOPnpasses :: Maybe (Tree Int)
    , _outTOPinputfiltertype :: Maybe (Tree Int)
    , _outTOPchanmask :: Maybe (Tree Int)
    , _outTOPoutputresolution :: Maybe (Tree Int)
    , _outTOPfillmode :: Maybe (Tree Int)
    , _outTOPresolutionw :: Maybe (Tree Int)
    , _outTOParmenu :: Maybe (Tree Int)
    , _outTOPfiltertype :: Maybe (Tree Int)
    , _outTOPaspect1 :: Maybe (Tree Float)
    , _outTOPlabel :: Maybe (Tree ByteString)
    , _outTOPresolutionh :: Maybe (Tree Int)
    , _outTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | SyphonspoutoutTOP {
    _syphonspoutoutTOPresmult :: Maybe (Tree Bool)
    , _syphonspoutoutTOPaspect2 :: Maybe (Tree Float)
    , _syphonspoutoutTOPformat :: Maybe (Tree Int)
    , _syphonspoutoutTOPactive :: Maybe (Tree Bool)
    , _syphonspoutoutTOPresmenu :: Maybe (Tree Int)
    , _syphonspoutoutTOPnpasses :: Maybe (Tree Int)
    , _syphonspoutoutTOPinputfiltertype :: Maybe (Tree Int)
    , _syphonspoutoutTOPchanmask :: Maybe (Tree Int)
    , _syphonspoutoutTOPoutputresolution :: Maybe (Tree Int)
    , _syphonspoutoutTOPfillmode :: Maybe (Tree Int)
    , _syphonspoutoutTOPresolutionh :: Maybe (Tree Int)
    , _syphonspoutoutTOParmenu :: Maybe (Tree Int)
    , _syphonspoutoutTOPsendername :: Maybe (Tree ByteString)
    , _syphonspoutoutTOPaspect1 :: Maybe (Tree Float)
    , _syphonspoutoutTOPresolutionw :: Maybe (Tree Int)
    , _syphonspoutoutTOPoutputaspect :: Maybe (Tree Int)
    , _syphonspoutoutTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | LumablurTOP {
    _lumablurTOPaspect2 :: Maybe (Tree Float)
    , _lumablurTOPformat :: Maybe (Tree Int)
    , _lumablurTOPextend :: Maybe (Tree Int)
    , _lumablurTOPaspect1 :: Maybe (Tree Float)
    , _lumablurTOPoutputresolution :: Maybe (Tree Int)
    , _lumablurTOPfillmode :: Maybe (Tree Int)
    , _lumablurTOPresolutionw :: Maybe (Tree Int)
    , _lumablurTOParmenu :: Maybe (Tree Int)
    , _lumablurTOPfiltertype :: Maybe (Tree Int)
    , _lumablurTOPtype :: Maybe (Tree Int)
    , _lumablurTOPwidthchan :: Maybe (Tree Int)
    , _lumablurTOPinputfiltertype :: Maybe (Tree Int)
    , _lumablurTOPresmult :: Maybe (Tree Bool)
    , _lumablurTOPblackvalue :: Maybe (Tree Float)
    , _lumablurTOPresmenu :: Maybe (Tree Int)
    , _lumablurTOPblackwidth :: Maybe (Tree Int)
    , _lumablurTOPwhitewidth :: Maybe (Tree Int)
    , _lumablurTOPresolutionh :: Maybe (Tree Int)
    , _lumablurTOPnpasses :: Maybe (Tree Int)
    , _lumablurTOPchanmask :: Maybe (Tree Int)
    , _lumablurTOPoutputaspect :: Maybe (Tree Int)
    , _lumablurTOPwhitevalue :: Maybe (Tree Float)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | BlobtrackTOP {
    _blobtrackTOPresetpulse :: Maybe (Tree Bool)
    , _blobtrackTOPaspect2 :: Maybe (Tree Float)
    , _blobtrackTOPrevivetime :: Maybe (Tree Float)
    , _blobtrackTOPmonosource :: Maybe (Tree Int)
    , _blobtrackTOPdeleteoverlap :: Maybe (Tree Bool)
    , _blobtrackTOPchanmask :: Maybe (Tree Int)
    , _blobtrackTOPoutputresolution :: Maybe (Tree Int)
    , _blobtrackTOPfillmode :: Maybe (Tree Int)
    , _blobtrackTOPresolutionw :: Maybe (Tree Int)
    , _blobtrackTOPdeletenearby :: Maybe (Tree Bool)
    , _blobtrackTOPfiltertype :: Maybe (Tree Int)
    , _blobtrackTOPdeleteoverlaptol :: Maybe (Tree Float)
    , _blobtrackTOPmaxblobsize :: Maybe (Tree Float)
    , _blobtrackTOPmaxmovedistance :: Maybe (Tree Float)
    , _blobtrackTOPinputfiltertype :: Maybe (Tree Int)
    , _blobtrackTOPresmult :: Maybe (Tree Bool)
    , _blobtrackTOPblobcolor :: Vec3
    , _blobtrackTOPresmenu :: Maybe (Tree Int)
    , _blobtrackTOPformat :: Maybe (Tree Int)
    , _blobtrackTOPdeletenearbytol :: Maybe (Tree Float)
    , _blobtrackTOPresolutionh :: Maybe (Tree Int)
    , _blobtrackTOPrevivearea :: Maybe (Tree Float)
    , _blobtrackTOPminblobsize :: Maybe (Tree Float)
    , _blobtrackTOParmenu :: Maybe (Tree Int)
    , _blobtrackTOPnpasses :: Maybe (Tree Int)
    , _blobtrackTOPaspect1 :: Maybe (Tree Float)
    , _blobtrackTOPrevivedistance :: Maybe (Tree Float)
    , _blobtrackTOPdrawblobs :: Maybe (Tree Bool)
    , _blobtrackTOPreviveblobs :: Maybe (Tree Bool)
    , _blobtrackTOPoutputaspect :: Maybe (Tree Int)
    , _blobtrackTOPreset :: Maybe (Tree Bool)
    , _blobtrackTOPdeletedist :: Maybe (Tree Float)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | TileTOP {
    _tileTOPaspect2 :: Maybe (Tree Float)
    , _tileTOPformat :: Maybe (Tree Int)
    , _tileTOPoutputresolution :: Maybe (Tree Int)
    , _tileTOPinputfiltertype :: Maybe (Tree Int)
    , _tileTOPoverlapuunit :: Maybe (Tree Int)
    , _tileTOPcropleftunit :: Maybe (Tree Int)
    , _tileTOPfillmode :: Maybe (Tree Int)
    , _tileTOPoverlapvunit :: Maybe (Tree Int)
    , _tileTOPresolutionw :: Maybe (Tree Int)
    , _tileTOPcropbottomunit :: Maybe (Tree Int)
    , _tileTOPcropbottom :: Maybe (Tree Float)
    , _tileTOPrepeatx :: Maybe (Tree Int)
    , _tileTOPcroprightunit :: Maybe (Tree Int)
    , _tileTOPflipx :: Maybe (Tree Bool)
    , _tileTOPrepeaty :: Maybe (Tree Int)
    , _tileTOParmenu :: Maybe (Tree Int)
    , _tileTOPresmult :: Maybe (Tree Bool)
    , _tileTOPresmenu :: Maybe (Tree Int)
    , _tileTOPoverlapu :: Maybe (Tree Float)
    , _tileTOPchanmask :: Maybe (Tree Int)
    , _tileTOPoverlapv :: Maybe (Tree Float)
    , _tileTOPreflecty :: Maybe (Tree Bool)
    , _tileTOPnpasses :: Maybe (Tree Int)
    , _tileTOPoutputaspect :: Maybe (Tree Int)
    , _tileTOPflop :: Maybe (Tree Bool)
    , _tileTOPresolutionh :: Maybe (Tree Int)
    , _tileTOPcropleft :: Maybe (Tree Float)
    , _tileTOPreflectx :: Maybe (Tree Bool)
    , _tileTOPcroptopunit :: Maybe (Tree Int)
    , _tileTOPaspect1 :: Maybe (Tree Float)
    , _tileTOPflipy :: Maybe (Tree Bool)
    , _tileTOPcroptop :: Maybe (Tree Float)
    , _tileTOPcropright :: Maybe (Tree Float)
    , _tileTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | BlurTOP {
    _blurTOPaspect2 :: Maybe (Tree Float)
    , _blurTOPformat :: Maybe (Tree Int)
    , _blurTOPpreshrink :: Maybe (Tree Int)
    , _blurTOPoffset2 :: Maybe (Tree Float)
    , _blurTOPextend :: Maybe (Tree Int)
    , _blurTOPchanmask :: Maybe (Tree Int)
    , _blurTOPoutputresolution :: Maybe (Tree Int)
    , _blurTOPfillmode :: Maybe (Tree Int)
    , _blurTOPresolutionw :: Maybe (Tree Int)
    , _blurTOParmenu :: Maybe (Tree Int)
    , _blurTOPfiltertype :: Maybe (Tree Int)
    , _blurTOPresolutionh :: Maybe (Tree Int)
    , _blurTOPinputfiltertype :: Maybe (Tree Int)
    , _blurTOPoffset1 :: Maybe (Tree Float)
    , _blurTOPresmult :: Maybe (Tree Bool)
    , _blurTOPtype :: Maybe (Tree Int)
    , _blurTOPresmenu :: Maybe (Tree Int)
    , _blurTOPsize :: Maybe (Tree Int)
    , _blurTOPoffsetunit :: Maybe (Tree Int)
    , _blurTOPdither :: Maybe (Tree Bool)
    , _blurTOProtate :: Maybe (Tree Float)
    , _blurTOPnpasses :: Maybe (Tree Int)
    , _blurTOPaspect1 :: Maybe (Tree Float)
    , _blurTOPmethod :: Maybe (Tree Int)
    , _blurTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | HsvadjustTOP {
    _hsvadjustTOPstartcolor :: Vec3
    , _hsvadjustTOPaspect2 :: Maybe (Tree Float)
    , _hsvadjustTOPformat :: Maybe (Tree Int)
    , _hsvadjustTOPhueoffset :: Maybe (Tree Float)
    , _hsvadjustTOPvaluerange :: Maybe (Tree Float)
    , _hsvadjustTOPinputfiltertype :: Maybe (Tree Int)
    , _hsvadjustTOPchanmask :: Maybe (Tree Int)
    , _hsvadjustTOPoutputresolution :: Maybe (Tree Int)
    , _hsvadjustTOPfillmode :: Maybe (Tree Int)
    , _hsvadjustTOPresolutionw :: Maybe (Tree Int)
    , _hsvadjustTOPhuerange :: Maybe (Tree Float)
    , _hsvadjustTOParmenu :: Maybe (Tree Int)
    , _hsvadjustTOPfiltertype :: Maybe (Tree Int)
    , _hsvadjustTOPsaturationmult :: Maybe (Tree Float)
    , _hsvadjustTOPsaturationrange :: Maybe (Tree Float)
    , _hsvadjustTOPvaluefalloff :: Maybe (Tree Float)
    , _hsvadjustTOPhuefalloff :: Maybe (Tree Float)
    , _hsvadjustTOPvaluemult :: Maybe (Tree Float)
    , _hsvadjustTOPresmult :: Maybe (Tree Bool)
    , _hsvadjustTOPresmenu :: Maybe (Tree Int)
    , _hsvadjustTOPresolutionh :: Maybe (Tree Int)
    , _hsvadjustTOPsaturationfalloff :: Maybe (Tree Float)
    , _hsvadjustTOPnpasses :: Maybe (Tree Int)
    , _hsvadjustTOPaspect1 :: Maybe (Tree Float)
    , _hsvadjustTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | RenderselectTOP {
    _renderselectTOPresmult :: Maybe (Tree Bool)
    , _renderselectTOPaspect2 :: Maybe (Tree Float)
    , _renderselectTOPformat :: Maybe (Tree Int)
    , _renderselectTOPresmenu :: Maybe (Tree Int)
    , _renderselectTOPnpasses :: Maybe (Tree Int)
    , _renderselectTOPinputfiltertype :: Maybe (Tree Int)
    , _renderselectTOPchanmask :: Maybe (Tree Int)
    , _renderselectTOPoutputresolution :: Maybe (Tree Int)
    , _renderselectTOPfillmode :: Maybe (Tree Int)
    , _renderselectTOPresolutionh :: Maybe (Tree Int)
    , _renderselectTOPpeellayerindex :: Maybe (Tree Int)
    , _renderselectTOParmenu :: Maybe (Tree Int)
    , _renderselectTOPtop :: Maybe (Tree TOP)
    , _renderselectTOPcolorbufindex :: Maybe (Tree Int)
    , _renderselectTOPaspect1 :: Maybe (Tree Float)
    , _renderselectTOPcameraindex :: Maybe (Tree Int)
    , _renderselectTOPresolutionw :: Maybe (Tree Int)
    , _renderselectTOPoutputaspect :: Maybe (Tree Int)
    , _renderselectTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | FitTOP {
    _fitTOPaspect2 :: Maybe (Tree Float)
    , _fitTOPfit :: Maybe (Tree Int)
    , _fitTOPinputfiltertype :: Maybe (Tree Int)
    , _fitTOPchanmask :: Maybe (Tree Int)
    , _fitTOPoutputresolution :: Maybe (Tree Int)
    , _fitTOPfillmode :: Maybe (Tree Int)
    , _fitTOPresolutionw :: Maybe (Tree Int)
    , _fitTOParmenu :: Maybe (Tree Int)
    , _fitTOPfiltertype :: Maybe (Tree Int)
    , _fitTOPformat :: Maybe (Tree Int)
    , _fitTOPbgcolor :: Vec4
    , _fitTOPxord :: Maybe (Tree Int)
    , _fitTOPresmult :: Maybe (Tree Bool)
    , _fitTOPpunit :: Maybe (Tree Int)
    , _fitTOPs :: Vec2
    , _fitTOPresmenu :: Maybe (Tree Int)
    , _fitTOPp :: Vec2
    , _fitTOPresolutionh :: Maybe (Tree Int)
    , _fitTOPtunit :: Maybe (Tree Int)
    , _fitTOPnpasses :: Maybe (Tree Int)
    , _fitTOPaspect1 :: Maybe (Tree Float)
    , _fitTOPt :: Vec2
    , _fitTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | NdiinTOP {
    _ndiinTOPresmult :: Maybe (Tree Bool)
    , _ndiinTOPaspect2 :: Maybe (Tree Float)
    , _ndiinTOPformat :: Maybe (Tree Int)
    , _ndiinTOPactive :: Maybe (Tree Bool)
    , _ndiinTOPresmenu :: Maybe (Tree Int)
    , _ndiinTOPbandwidth :: Maybe (Tree Int)
    , _ndiinTOPnpasses :: Maybe (Tree Int)
    , _ndiinTOPinputfiltertype :: Maybe (Tree Int)
    , _ndiinTOPaspect1 :: Maybe (Tree Float)
    , _ndiinTOPoutputresolution :: Maybe (Tree Int)
    , _ndiinTOPfillmode :: Maybe (Tree Int)
    , _ndiinTOPname :: Maybe (Tree ByteString)
    , _ndiinTOPresolutionh :: Maybe (Tree Int)
    , _ndiinTOPchanmask :: Maybe (Tree Int)
    , _ndiinTOParmenu :: Maybe (Tree Int)
    , _ndiinTOPfiltertype :: Maybe (Tree Int)
    , _ndiinTOPgrouptable :: Maybe (Tree DAT)
    , _ndiinTOPextraips :: Maybe (Tree ByteString)
    , _ndiinTOPresolutionw :: Maybe (Tree Int)
    , _ndiinTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | EmbossTOP {
    _embossTOPaspect2 :: Maybe (Tree Float)
    , _embossTOPformat :: Maybe (Tree Int)
    , _embossTOPoffset2 :: Maybe (Tree Float)
    , _embossTOPinputfiltertype :: Maybe (Tree Int)
    , _embossTOPchanmask :: Maybe (Tree Int)
    , _embossTOPoutputresolution :: Maybe (Tree Int)
    , _embossTOPfillmode :: Maybe (Tree Int)
    , _embossTOPresolutionw :: Maybe (Tree Int)
    , _embossTOPselect :: Maybe (Tree Int)
    , _embossTOParmenu :: Maybe (Tree Int)
    , _embossTOPfiltertype :: Maybe (Tree Int)
    , _embossTOPdirection :: Maybe (Tree Float)
    , _embossTOPoffset1 :: Maybe (Tree Float)
    , _embossTOPresmult :: Maybe (Tree Bool)
    , _embossTOPresmenu :: Maybe (Tree Int)
    , _embossTOPoffsetunit :: Maybe (Tree Int)
    , _embossTOPstrength :: Maybe (Tree Float)
    , _embossTOPresolutionh :: Maybe (Tree Int)
    , _embossTOPnpasses :: Maybe (Tree Int)
    , _embossTOPaspect1 :: Maybe (Tree Float)
    , _embossTOPmethod :: Maybe (Tree Int)
    , _embossTOPmidpoint :: Maybe (Tree Float)
    , _embossTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | DisplaceTOP {
    _displaceTOPaspect2 :: Maybe (Tree Float)
    , _displaceTOPformat :: Maybe (Tree Int)
    , _displaceTOPoffset2 :: Maybe (Tree Float)
    , _displaceTOPinputfiltertype :: Maybe (Tree Int)
    , _displaceTOPhorzsource :: Maybe (Tree Int)
    , _displaceTOPoutputresolution :: Maybe (Tree Int)
    , _displaceTOPfillmode :: Maybe (Tree Int)
    , _displaceTOPdisplaceweight2 :: Maybe (Tree Float)
    , _displaceTOPmidpoint1 :: Maybe (Tree Float)
    , _displaceTOParmenu :: Maybe (Tree Int)
    , _displaceTOPvertsource :: Maybe (Tree Int)
    , _displaceTOPfiltertype :: Maybe (Tree Int)
    , _displaceTOPresolutionw :: Maybe (Tree Int)
    , _displaceTOPdisplaceweight1 :: Maybe (Tree Float)
    , _displaceTOPoffset1 :: Maybe (Tree Float)
    , _displaceTOPresmult :: Maybe (Tree Bool)
    , _displaceTOPresmenu :: Maybe (Tree Int)
    , _displaceTOPchanmask :: Maybe (Tree Int)
    , _displaceTOPmidpoint2 :: Maybe (Tree Float)
    , _displaceTOPoutputaspect :: Maybe (Tree Int)
    , _displaceTOPresolutionh :: Maybe (Tree Int)
    , _displaceTOPoffsetweight :: Maybe (Tree Float)
    , _displaceTOPnpasses :: Maybe (Tree Int)
    , _displaceTOPaspect1 :: Maybe (Tree Float)
    , _displaceTOPuvweight :: Maybe (Tree Float)
    , _displaceTOPextend :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | MultiplyTOP {
    _multiplyTOPaspect2 :: Maybe (Tree Float)
    , _multiplyTOPformat :: Maybe (Tree Int)
    , _multiplyTOPextend :: Maybe (Tree Int)
    , _multiplyTOPchanmask :: Maybe (Tree Int)
    , _multiplyTOPoutputresolution :: Maybe (Tree Int)
    , _multiplyTOPfillmode :: Maybe (Tree Int)
    , _multiplyTOPresolutionw :: Maybe (Tree Int)
    , _multiplyTOParmenu :: Maybe (Tree Int)
    , _multiplyTOPfiltertype :: Maybe (Tree Int)
    , _multiplyTOPinputfiltertype :: Maybe (Tree Int)
    , _multiplyTOPresmult :: Maybe (Tree Bool)
    , _multiplyTOPpunit :: Maybe (Tree Int)
    , _multiplyTOPs :: Vec2
    , _multiplyTOPresmenu :: Maybe (Tree Int)
    , _multiplyTOPp :: Vec2
    , _multiplyTOPsize :: Maybe (Tree Int)
    , _multiplyTOPnpasses :: Maybe (Tree Int)
    , _multiplyTOPoutputaspect :: Maybe (Tree Int)
    , _multiplyTOPresolutionh :: Maybe (Tree Int)
    , _multiplyTOPtunit :: Maybe (Tree Int)
    , _multiplyTOPprefit :: Maybe (Tree Int)
    , _multiplyTOPr :: Maybe (Tree Float)
    , _multiplyTOPaspect1 :: Maybe (Tree Float)
    , _multiplyTOPjustifyh :: Maybe (Tree Int)
    , _multiplyTOPt :: Vec2
    , _multiplyTOPjustifyv :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | InsideTOP {
    _insideTOPaspect2 :: Maybe (Tree Float)
    , _insideTOPformat :: Maybe (Tree Int)
    , _insideTOPextend :: Maybe (Tree Int)
    , _insideTOPchanmask :: Maybe (Tree Int)
    , _insideTOPoutputresolution :: Maybe (Tree Int)
    , _insideTOPfillmode :: Maybe (Tree Int)
    , _insideTOPresolutionw :: Maybe (Tree Int)
    , _insideTOParmenu :: Maybe (Tree Int)
    , _insideTOPfiltertype :: Maybe (Tree Int)
    , _insideTOPinputfiltertype :: Maybe (Tree Int)
    , _insideTOPresmult :: Maybe (Tree Bool)
    , _insideTOPpunit :: Maybe (Tree Int)
    , _insideTOPs :: Vec2
    , _insideTOPresmenu :: Maybe (Tree Int)
    , _insideTOPp :: Vec2
    , _insideTOPsize :: Maybe (Tree Int)
    , _insideTOPnpasses :: Maybe (Tree Int)
    , _insideTOPoutputaspect :: Maybe (Tree Int)
    , _insideTOPresolutionh :: Maybe (Tree Int)
    , _insideTOPtunit :: Maybe (Tree Int)
    , _insideTOPprefit :: Maybe (Tree Int)
    , _insideTOPr :: Maybe (Tree Float)
    , _insideTOPaspect1 :: Maybe (Tree Float)
    , _insideTOPjustifyh :: Maybe (Tree Int)
    , _insideTOPt :: Vec2
    , _insideTOPjustifyv :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | NullTOP {
    _nullTOPresmult :: Maybe (Tree Bool)
    , _nullTOPaspect2 :: Maybe (Tree Float)
    , _nullTOPformat :: Maybe (Tree Int)
    , _nullTOPresmenu :: Maybe (Tree Int)
    , _nullTOPnpasses :: Maybe (Tree Int)
    , _nullTOPinputfiltertype :: Maybe (Tree Int)
    , _nullTOPchanmask :: Maybe (Tree Int)
    , _nullTOPoutputresolution :: Maybe (Tree Int)
    , _nullTOPfillmode :: Maybe (Tree Int)
    , _nullTOPresolutionw :: Maybe (Tree Int)
    , _nullTOParmenu :: Maybe (Tree Int)
    , _nullTOPfiltertype :: Maybe (Tree Int)
    , _nullTOPaspect1 :: Maybe (Tree Float)
    , _nullTOPresolutionh :: Maybe (Tree Int)
    , _nullTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | SsaoTOP {
    _ssaoTOPsamplesteps :: Maybe (Tree Int)
    , _ssaoTOPquality :: Maybe (Tree Int)
    , _ssaoTOPssaopassres :: Maybe (Tree Int)
    , _ssaoTOPsurfaceavoid :: Maybe (Tree Float)
    , _ssaoTOPcombinewithcolor :: Maybe (Tree Bool)
    , _ssaoTOPcontrast :: Maybe (Tree Float)
    , _ssaoTOPchanmask :: Maybe (Tree Int)
    , _ssaoTOPoutputresolution :: Maybe (Tree Int)
    , _ssaoTOPresmult :: Maybe (Tree Bool)
    , _ssaoTOPresolutionw :: Maybe (Tree Int)
    , _ssaoTOPaspect2 :: Maybe (Tree Float)
    , _ssaoTOPattenuation :: Maybe (Tree Float)
    , _ssaoTOPfiltertype :: Maybe (Tree Int)
    , _ssaoTOPformat :: Maybe (Tree Int)
    , _ssaoTOPinputfiltertype :: Maybe (Tree Int)
    , _ssaoTOPsampledirs :: Maybe (Tree Int)
    , _ssaoTOPresmenu :: Maybe (Tree Int)
    , _ssaoTOPnpasses :: Maybe (Tree Int)
    , _ssaoTOPedgethresh :: Maybe (Tree Float)
    , _ssaoTOPfillmode :: Maybe (Tree Int)
    , _ssaoTOPresolutionh :: Maybe (Tree Int)
    , _ssaoTOPssaoradius :: Maybe (Tree Float)
    , _ssaoTOParmenu :: Maybe (Tree Int)
    , _ssaoTOPblursharpness :: Maybe (Tree Float)
    , _ssaoTOPblurradius :: Maybe (Tree Float)
    , _ssaoTOPaspect1 :: Maybe (Tree Float)
    , _ssaoTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | OpencolorioTOP {
    _opencolorioTOPpower :: Vec3
    , _opencolorioTOPdisplay :: Maybe (Tree ByteString)
    , _opencolorioTOPincolorspace :: Maybe (Tree ByteString)
    , _opencolorioTOPprecision :: Maybe (Tree Int)
    , _opencolorioTOPformat :: Maybe (Tree Int)
    , _opencolorioTOPcdlmode :: Maybe (Tree Int)
    , _opencolorioTOPcdldirection :: Maybe (Tree Int)
    , _opencolorioTOPoffset :: Vec3
    , _opencolorioTOPinputfiltertype :: Maybe (Tree Int)
    , _opencolorioTOPconfig :: Maybe (Tree ByteString)
    , _opencolorioTOPoutputresolution :: Maybe (Tree Int)
    , _opencolorioTOPinterpolation :: Maybe (Tree Int)
    , _opencolorioTOPresolutionw :: Maybe (Tree Int)
    , _opencolorioTOPoutcolorspace :: Maybe (Tree ByteString)
    , _opencolorioTOPreloadconfig :: Maybe (Tree Bool)
    , _opencolorioTOPgain :: Maybe (Tree Float)
    , _opencolorioTOPfiltertype :: Maybe (Tree Int)
    , _opencolorioTOPsaturation :: Maybe (Tree Float)
    , _opencolorioTOPcolorspace :: Maybe (Tree ByteString)
    , _opencolorioTOPuseoutput :: Maybe (Tree Bool)
    , _opencolorioTOPlutsize :: Maybe (Tree Int)
    , _opencolorioTOPchanmask :: Maybe (Tree Int)
    , _opencolorioTOPresmult :: Maybe (Tree Bool)
    , _opencolorioTOPusecolorspacetransform :: Maybe (Tree Bool)
    , _opencolorioTOPfiledirection :: Maybe (Tree Int)
    , _opencolorioTOPresmenu :: Maybe (Tree Int)
    , _opencolorioTOPfilesource :: Maybe (Tree ByteString)
    , _opencolorioTOPnpasses :: Maybe (Tree Int)
    , _opencolorioTOPgamma :: Maybe (Tree Float)
    , _opencolorioTOPccfile :: Maybe (Tree ByteString)
    , _opencolorioTOPfillmode :: Maybe (Tree Int)
    , _opencolorioTOPresolutionh :: Maybe (Tree Int)
    , _opencolorioTOPslope :: Vec3
    , _opencolorioTOPaspect2 :: Maybe (Tree Float)
    , _opencolorioTOParmenu :: Maybe (Tree Int)
    , _opencolorioTOPview :: Maybe (Tree ByteString)
    , _opencolorioTOPaspect1 :: Maybe (Tree Float)
    , _opencolorioTOPoutputaspect :: Maybe (Tree Int)
    , _opencolorioTOPusefiletransform :: Maybe (Tree Bool)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | CircleTOP {
    _circleTOPaspect2 :: Maybe (Tree Float)
    , _circleTOPformat :: Maybe (Tree Int)
    , _circleTOPsoftnessunit :: Maybe (Tree Int)
    , _circleTOPendarcangle :: Maybe (Tree Float)
    , _circleTOPchanmask :: Maybe (Tree Int)
    , _circleTOPoutputresolution :: Maybe (Tree Int)
    , _circleTOPborderoffset :: Maybe (Tree Float)
    , _circleTOPfillcolor :: Vec3
    , _circleTOPantialias :: Maybe (Tree Bool)
    , _circleTOPresolutionw :: Maybe (Tree Int)
    , _circleTOParmenu :: Maybe (Tree Int)
    , _circleTOPradius :: Vec2
    , _circleTOPborderwidth :: Maybe (Tree Float)
    , _circleTOPfillalpha :: Maybe (Tree Float)
    , _circleTOPbgcolor :: Vec3
    , _circleTOPradiusunit :: Maybe (Tree Int)
    , _circleTOPinputfiltertype :: Maybe (Tree Int)
    , _circleTOPbeginarcangle :: Maybe (Tree Float)
    , _circleTOPcenterunit :: Maybe (Tree Int)
    , _circleTOPresmult :: Maybe (Tree Bool)
    , _circleTOPispolygon :: Maybe (Tree Bool)
    , _circleTOPresmenu :: Maybe (Tree Int)
    , _circleTOPmultrgbbyalpha :: Maybe (Tree Bool)
    , _circleTOPbgalpha :: Maybe (Tree Float)
    , _circleTOPborder :: Vec3
    , _circleTOPfillmode :: Maybe (Tree Int)
    , _circleTOPresolutionh :: Maybe (Tree Int)
    , _circleTOProtate :: Maybe (Tree Float)
    , _circleTOPcenter :: Vec2
    , _circleTOPsoftness :: Maybe (Tree Float)
    , _circleTOPborderalpha :: Maybe (Tree Float)
    , _circleTOPnpasses :: Maybe (Tree Int)
    , _circleTOPaspect1 :: Maybe (Tree Float)
    , _circleTOPsides :: Maybe (Tree Int)
    , _circleTOPborderwidthunit :: Maybe (Tree Int)
    , _circleTOPoutputaspect :: Maybe (Tree Int)
    , _circleTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | SubstanceTOP {
    _substanceTOPresmult :: Maybe (Tree Bool)
    , _substanceTOPaspect2 :: Maybe (Tree Float)
    , _substanceTOPformat :: Maybe (Tree Int)
    , _substanceTOPfile :: Maybe (Tree ByteString)
    , _substanceTOPresmenu :: Maybe (Tree Int)
    , _substanceTOPnpasses :: Maybe (Tree Int)
    , _substanceTOPinputfiltertype :: Maybe (Tree Int)
    , _substanceTOPchanmask :: Maybe (Tree Int)
    , _substanceTOPoutputresolution :: Maybe (Tree Int)
    , _substanceTOPfillmode :: Maybe (Tree Int)
    , _substanceTOPresolutionw :: Maybe (Tree Int)
    , _substanceTOPgraph :: Maybe (Tree ByteString)
    , _substanceTOPreloadconfig :: Maybe (Tree Bool)
    , _substanceTOParmenu :: Maybe (Tree Int)
    , _substanceTOPfiltertype :: Maybe (Tree Int)
    , _substanceTOPaspect1 :: Maybe (Tree Float)
    , _substanceTOPresolutionh :: Maybe (Tree Int)
    , _substanceTOPoutputaspect :: Maybe (Tree Int)
    , _substanceTOPoutput :: Maybe (Tree ByteString)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | SubtractTOP {
    _subtractTOPaspect2 :: Maybe (Tree Float)
    , _subtractTOPformat :: Maybe (Tree Int)
    , _subtractTOPextend :: Maybe (Tree Int)
    , _subtractTOPchanmask :: Maybe (Tree Int)
    , _subtractTOPoutputresolution :: Maybe (Tree Int)
    , _subtractTOPfillmode :: Maybe (Tree Int)
    , _subtractTOPresolutionw :: Maybe (Tree Int)
    , _subtractTOParmenu :: Maybe (Tree Int)
    , _subtractTOPfiltertype :: Maybe (Tree Int)
    , _subtractTOPinputfiltertype :: Maybe (Tree Int)
    , _subtractTOPresmult :: Maybe (Tree Bool)
    , _subtractTOPpunit :: Maybe (Tree Int)
    , _subtractTOPs :: Vec2
    , _subtractTOPresmenu :: Maybe (Tree Int)
    , _subtractTOPp :: Vec2
    , _subtractTOPsize :: Maybe (Tree Int)
    , _subtractTOPnpasses :: Maybe (Tree Int)
    , _subtractTOPoutputaspect :: Maybe (Tree Int)
    , _subtractTOPresolutionh :: Maybe (Tree Int)
    , _subtractTOPtunit :: Maybe (Tree Int)
    , _subtractTOPprefit :: Maybe (Tree Int)
    , _subtractTOPr :: Maybe (Tree Float)
    , _subtractTOPaspect1 :: Maybe (Tree Float)
    , _subtractTOPjustifyh :: Maybe (Tree Int)
    , _subtractTOPt :: Vec2
    , _subtractTOPjustifyv :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ProjectionTOP {
    _projectionTOPresmult :: Maybe (Tree Bool)
    , _projectionTOPaspect2 :: Maybe (Tree Float)
    , _projectionTOPfov :: Maybe (Tree Float)
    , _projectionTOPoutput :: Maybe (Tree Int)
    , _projectionTOPresmenu :: Maybe (Tree Int)
    , _projectionTOPnpasses :: Maybe (Tree Int)
    , _projectionTOPinputfiltertype :: Maybe (Tree Int)
    , _projectionTOPchanmask :: Maybe (Tree Int)
    , _projectionTOPoutputresolution :: Maybe (Tree Int)
    , _projectionTOPfillmode :: Maybe (Tree Int)
    , _projectionTOPresolutionh :: Maybe (Tree Int)
    , _projectionTOParmenu :: Maybe (Tree Int)
    , _projectionTOPr :: Vec3
    , _projectionTOPaspect1 :: Maybe (Tree Float)
    , _projectionTOPformat :: Maybe (Tree Int)
    , _projectionTOPresolutionw :: Maybe (Tree Int)
    , _projectionTOPoutputaspect :: Maybe (Tree Int)
    , _projectionTOPinput :: Maybe (Tree Int)
    , _projectionTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | Texture3dTOP {
    _texture3dTOPresetpulse :: Maybe (Tree Bool)
    , _texture3dTOPreplaceindex :: Maybe (Tree Int)
    , _texture3dTOPformat :: Maybe (Tree Int)
    , _texture3dTOPactive :: Maybe (Tree Bool)
    , _texture3dTOPinputfiltertype :: Maybe (Tree Int)
    , _texture3dTOPreplacesingle :: Maybe (Tree Bool)
    , _texture3dTOPoutputresolution :: Maybe (Tree Int)
    , _texture3dTOPprefill :: Maybe (Tree Bool)
    , _texture3dTOPresolutionw :: Maybe (Tree Int)
    , _texture3dTOParmenu :: Maybe (Tree Int)
    , _texture3dTOPfiltertype :: Maybe (Tree Int)
    , _texture3dTOPaspect2 :: Maybe (Tree Float)
    , _texture3dTOPstep :: Maybe (Tree Int)
    , _texture3dTOPprefillpulse :: Maybe (Tree Bool)
    , _texture3dTOPresmult :: Maybe (Tree Bool)
    , _texture3dTOPtype :: Maybe (Tree Int)
    , _texture3dTOPresmenu :: Maybe (Tree Int)
    , _texture3dTOPcachesize :: Maybe (Tree Int)
    , _texture3dTOPchanmask :: Maybe (Tree Int)
    , _texture3dTOPfillmode :: Maybe (Tree Int)
    , _texture3dTOPresolutionh :: Maybe (Tree Int)
    , _texture3dTOPnpasses :: Maybe (Tree Int)
    , _texture3dTOPaspect1 :: Maybe (Tree Float)
    , _texture3dTOPresetsinglepulse :: Maybe (Tree Bool)
    , _texture3dTOPoutputaspect :: Maybe (Tree Int)
    , _texture3dTOPreset :: Maybe (Tree Bool)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | PackTOP {
    _packTOPresmult :: Maybe (Tree Bool)
    , _packTOPaspect2 :: Maybe (Tree Float)
    , _packTOPformat :: Maybe (Tree Int)
    , _packTOPresmenu :: Maybe (Tree Int)
    , _packTOPnpasses :: Maybe (Tree Int)
    , _packTOPfillmode :: Maybe (Tree Int)
    , _packTOPinputfiltertype :: Maybe (Tree Int)
    , _packTOPchanmask :: Maybe (Tree Int)
    , _packTOPoutputresolution :: Maybe (Tree Int)
    , _packTOPresolutionh :: Maybe (Tree Int)
    , _packTOPresolutionw :: Maybe (Tree Int)
    , _packTOParmenu :: Maybe (Tree Int)
    , _packTOPfiltertype :: Maybe (Tree Int)
    , _packTOPaspect1 :: Maybe (Tree Float)
    , _packTOPpacktype :: Maybe (Tree Int)
    , _packTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | MoviefileinTOP {
    _moviefileinTOPaspect2 :: Maybe (Tree Float)
    , _moviefileinTOPformat :: Maybe (Tree Int)
    , _moviefileinTOPhighperfread :: Maybe (Tree Bool)
    , _moviefileinTOPcuepulse :: Maybe (Tree Bool)
    , _moviefileinTOPbottomhalfalpha :: Maybe (Tree Bool)
    , _moviefileinTOPfillmode :: Maybe (Tree Int)
    , _moviefileinTOPresolutionw :: Maybe (Tree Int)
    , _moviefileinTOPtrim :: Maybe (Tree Bool)
    , _moviefileinTOParmenu :: Maybe (Tree Int)
    , _moviefileinTOPdeinterlace :: Maybe (Tree Int)
    , _moviefileinTOPprecedence :: Maybe (Tree Int)
    , _moviefileinTOPasyncupload :: Maybe (Tree Bool)
    , _moviefileinTOPresolutionh :: Maybe (Tree Int)
    , _moviefileinTOPtendunit :: Maybe (Tree Int)
    , _moviefileinTOPloadingerrorimage :: Maybe (Tree Int)
    , _moviefileinTOPindex :: Maybe (Tree Float)
    , _moviefileinTOPaudioloop :: Maybe (Tree Int)
    , _moviefileinTOPplaymode :: Maybe (Tree Int)
    , _moviefileinTOPresmenu :: Maybe (Tree Int)
    , _moviefileinTOPtstartunit :: Maybe (Tree Int)
    , _moviefileinTOPspeed :: Maybe (Tree Float)
    , _moviefileinTOPimageindexing :: Maybe (Tree Int)
    , _moviefileinTOPplay :: Maybe (Tree Bool)
    , _moviefileinTOPnpasses :: Maybe (Tree Int)
    , _moviefileinTOPloopcrossfadeunit :: Maybe (Tree Int)
    , _moviefileinTOPstepsize :: Maybe (Tree Int)
    , _moviefileinTOPcuepointunit :: Maybe (Tree Int)
    , _moviefileinTOPopentimeout :: Maybe (Tree Int)
    , _moviefileinTOPreload :: Maybe (Tree Bool)
    , _moviefileinTOPsamplerate :: Maybe (Tree Float)
    , _moviefileinTOPinterp :: Maybe (Tree Bool)
    , _moviefileinTOPfile :: Maybe (Tree ByteString)
    , _moviefileinTOPoutputresolution :: Maybe (Tree Int)
    , _moviefileinTOPcuepoint :: Maybe (Tree Float)
    , _moviefileinTOPprereadframes :: Maybe (Tree Int)
    , _moviefileinTOPaspect1 :: Maybe (Tree Float)
    , _moviefileinTOPupdateimage :: Maybe (Tree Bool)
    , _moviefileinTOPfiltertype :: Maybe (Tree Int)
    , _moviefileinTOPhighperfreadfactor :: Maybe (Tree Float)
    , _moviefileinTOPtend :: Maybe (Tree Float)
    , _moviefileinTOPcuebehavior :: Maybe (Tree Int)
    , _moviefileinTOPinputsrgb :: Maybe (Tree Bool)
    , _moviefileinTOPtextendright :: Maybe (Tree Int)
    , _moviefileinTOPinputfiltertype :: Maybe (Tree Int)
    , _moviefileinTOPtstart :: Maybe (Tree Float)
    , _moviefileinTOPresmult :: Maybe (Tree Bool)
    , _moviefileinTOPframetimeoutstrat :: Maybe (Tree Int)
    , _moviefileinTOPreloadpulse :: Maybe (Tree Bool)
    , _moviefileinTOPindexunit :: Maybe (Tree Int)
    , _moviefileinTOPloopcrossfade :: Maybe (Tree Float)
    , _moviefileinTOPoverridesample :: Maybe (Tree Bool)
    , _moviefileinTOPoutputaspect :: Maybe (Tree Int)
    , _moviefileinTOPmultalpha :: Maybe (Tree Int)
    , _moviefileinTOPtextendleft :: Maybe (Tree Int)
    , _moviefileinTOPchanmask :: Maybe (Tree Int)
    , _moviefileinTOPframetimeout :: Maybe (Tree Int)
    , _moviefileinTOPcue :: Maybe (Tree Bool)
    , _moviefileinTOPmaxdecodecpus :: Maybe (Tree Int)
    , _moviefileinTOPalwaysloadinitial :: Maybe (Tree Bool)
    , _moviefileinTOPusecpucache :: Maybe (Tree Bool)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | SelectTOP {
    _selectTOPresmult :: Maybe (Tree Bool)
    , _selectTOPaspect2 :: Maybe (Tree Float)
    , _selectTOPformat :: Maybe (Tree Int)
    , _selectTOPresmenu :: Maybe (Tree Int)
    , _selectTOPnpasses :: Maybe (Tree Int)
    , _selectTOPinputfiltertype :: Maybe (Tree Int)
    , _selectTOPchanmask :: Maybe (Tree Int)
    , _selectTOPoutputresolution :: Maybe (Tree Int)
    , _selectTOPfillmode :: Maybe (Tree Int)
    , _selectTOPresolutionw :: Maybe (Tree Int)
    , _selectTOParmenu :: Maybe (Tree Int)
    , _selectTOPtop :: Maybe (Tree TOP)
    , _selectTOPfiltertype :: Maybe (Tree Int)
    , _selectTOPaspect1 :: Maybe (Tree Float)
    , _selectTOPresolutionh :: Maybe (Tree Int)
    , _selectTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | FeedbackTOP {
    _feedbackTOPresetpulse :: Maybe (Tree Bool)
    , _feedbackTOPresmult :: Maybe (Tree Bool)
    , _feedbackTOPaspect2 :: Maybe (Tree Float)
    , _feedbackTOPformat :: Maybe (Tree Int)
    , _feedbackTOPresmenu :: Maybe (Tree Int)
    , _feedbackTOPnpasses :: Maybe (Tree Int)
    , _feedbackTOPinputfiltertype :: Maybe (Tree Int)
    , _feedbackTOPchanmask :: Maybe (Tree Int)
    , _feedbackTOPoutputresolution :: Maybe (Tree Int)
    , _feedbackTOPfillmode :: Maybe (Tree Int)
    , _feedbackTOPresolutionh :: Maybe (Tree Int)
    , _feedbackTOParmenu :: Maybe (Tree Int)
    , _feedbackTOPtop :: Maybe (Tree TOP)
    , _feedbackTOPfiltertype :: Maybe (Tree Int)
    , _feedbackTOPaspect1 :: Maybe (Tree Float)
    , _feedbackTOPresolutionw :: Maybe (Tree Int)
    , _feedbackTOPoutputaspect :: Maybe (Tree Int)
    , _feedbackTOPreset :: Maybe (Tree Bool)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | RampTOP {
    _rampTOPinterp :: Maybe (Tree Int)
    , _rampTOPaspect2 :: Maybe (Tree Float)
    , _rampTOPformat :: Maybe (Tree Int)
    , _rampTOPcolor4 :: Maybe (Tree Float)
    , _rampTOPcolor1 :: Maybe (Tree Float)
    , _rampTOPinputfiltertype :: Maybe (Tree Int)
    , _rampTOPchanmask :: Maybe (Tree Int)
    , _rampTOPoutputresolution :: Maybe (Tree Int)
    , _rampTOPresmult :: Maybe (Tree Bool)
    , _rampTOPantialias :: Maybe (Tree Int)
    , _rampTOParmenu :: Maybe (Tree Int)
    , _rampTOPphase :: Maybe (Tree Float)
    , _rampTOPfiltertype :: Maybe (Tree Int)
    , _rampTOPposition2 :: Maybe (Tree Float)
    , _rampTOPcolor3 :: Maybe (Tree Float)
    , _rampTOPresolutionw :: Maybe (Tree Int)
    , _rampTOPposition1 :: Maybe (Tree Float)
    , _rampTOPextendleft :: Maybe (Tree Int)
    , _rampTOPtension :: Maybe (Tree Float)
    , _rampTOPtype :: Maybe (Tree Int)
    , _rampTOPresmenu :: Maybe (Tree Int)
    , _rampTOPmultrgbbyalpha :: Maybe (Tree Bool)
    , _rampTOPperiod :: Maybe (Tree Float)
    , _rampTOPextendright :: Maybe (Tree Int)
    , _rampTOPfillmode :: Maybe (Tree Int)
    , _rampTOPdither :: Maybe (Tree Bool)
    , _rampTOPresolutionh :: Maybe (Tree Int)
    , _rampTOPfitaspect :: Maybe (Tree Int)
    , _rampTOPnpasses :: Maybe (Tree Int)
    , _rampTOPaspect1 :: Maybe (Tree Float)
    , _rampTOPcolor2 :: Maybe (Tree Float)
    , _rampTOPdat :: Maybe (Tree DAT)
    , _rampTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | AnalyzeTOP {
    _analyzeTOPresmult :: Maybe (Tree Bool)
    , _analyzeTOPaspect2 :: Maybe (Tree Float)
    , _analyzeTOPformat :: Maybe (Tree Int)
    , _analyzeTOPresmenu :: Maybe (Tree Int)
    , _analyzeTOPnpasses :: Maybe (Tree Int)
    , _analyzeTOPfillmode :: Maybe (Tree Int)
    , _analyzeTOPinputfiltertype :: Maybe (Tree Int)
    , _analyzeTOPchanmask :: Maybe (Tree Int)
    , _analyzeTOPoutputresolution :: Maybe (Tree Int)
    , _analyzeTOPscope :: Maybe (Tree Int)
    , _analyzeTOPresolutionh :: Maybe (Tree Int)
    , _analyzeTOPselect :: Maybe (Tree Int)
    , _analyzeTOParmenu :: Maybe (Tree Int)
    , _analyzeTOPfiltertype :: Maybe (Tree Int)
    , _analyzeTOPaspect1 :: Maybe (Tree Float)
    , _analyzeTOPresolutionw :: Maybe (Tree Int)
    , _analyzeTOPoutputaspect :: Maybe (Tree Int)
    , _analyzeTOPop :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | AddTOP {
    _addTOPaspect2 :: Maybe (Tree Float)
    , _addTOPformat :: Maybe (Tree Int)
    , _addTOPextend :: Maybe (Tree Int)
    , _addTOPchanmask :: Maybe (Tree Int)
    , _addTOPoutputresolution :: Maybe (Tree Int)
    , _addTOPfillmode :: Maybe (Tree Int)
    , _addTOPresolutionw :: Maybe (Tree Int)
    , _addTOParmenu :: Maybe (Tree Int)
    , _addTOPfiltertype :: Maybe (Tree Int)
    , _addTOPinputfiltertype :: Maybe (Tree Int)
    , _addTOPresmult :: Maybe (Tree Bool)
    , _addTOPpunit :: Maybe (Tree Int)
    , _addTOPs :: Vec2
    , _addTOPresmenu :: Maybe (Tree Int)
    , _addTOPp :: Vec2
    , _addTOPsize :: Maybe (Tree Int)
    , _addTOPnpasses :: Maybe (Tree Int)
    , _addTOPoutputaspect :: Maybe (Tree Int)
    , _addTOPresolutionh :: Maybe (Tree Int)
    , _addTOPtunit :: Maybe (Tree Int)
    , _addTOPprefit :: Maybe (Tree Int)
    , _addTOPr :: Maybe (Tree Float)
    , _addTOPaspect1 :: Maybe (Tree Float)
    , _addTOPjustifyh :: Maybe (Tree Int)
    , _addTOPt :: Vec2
    , _addTOPjustifyv :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | TextTOP {
    _textTOPfontcolor :: Vec3
    , _textTOPleftborder :: Maybe (Tree Int)
    , _textTOPreadingdirection :: Maybe (Tree Int)
    , _textTOPdispmethod :: Maybe (Tree Int)
    , _textTOPresmenu :: Maybe (Tree Int)
    , _textTOPtopborder :: Maybe (Tree Int)
    , _textTOPbordera :: Vec3
    , _textTOPinputfiltertype :: Maybe (Tree Int)
    , _textTOPaligny :: Maybe (Tree Int)
    , _textTOPitalic :: Maybe (Tree Bool)
    , _textTOPfillmode :: Maybe (Tree Int)
    , _textTOPrightborderi :: Maybe (Tree Int)
    , _textTOPantialias :: Maybe (Tree ByteString)
    , _textTOPfontalpha :: Maybe (Tree Float)
    , _textTOPcharset :: Maybe (Tree Int)
    , _textTOPfiltertype :: Maybe (Tree Int)
    , _textTOPfontsizeyunit :: Maybe (Tree Int)
    , _textTOPposition2 :: Maybe (Tree Float)
    , _textTOPbgcolor :: Vec3
    , _textTOPposttext :: Maybe (Tree ByteString)
    , _textTOPfield :: Maybe (Tree COMP)
    , _textTOPposition1 :: Maybe (Tree Float)
    , _textTOPlegacyparsing :: Maybe (Tree Bool)
    , _textTOParmenu :: Maybe (Tree Int)
    , _textTOPlinespacing :: Maybe (Tree Float)
    , _textTOPkeepfontratio :: Maybe (Tree Bool)
    , _textTOPvaluetouse :: Maybe (Tree Float)
    , _textTOPborderspace1 :: Maybe (Tree Float)
    , _textTOProwindex :: Maybe (Tree Int)
    , _textTOPresolutionh :: Maybe (Tree Int)
    , _textTOPcolindex :: Maybe (Tree Int)
    , _textTOPkerning1 :: Maybe (Tree Float)
    , _textTOPnpasses :: Maybe (Tree Int)
    , _textTOPlanguage :: Maybe (Tree ByteString)
    , _textTOPcompoverinput :: Maybe (Tree Bool)
    , _textTOPwordwrap :: Maybe (Tree Bool)
    , _textTOPresolutionw :: Maybe (Tree Int)
    , _textTOPchop :: Maybe (Tree CHOP)
    , _textTOPlinespacingunit :: Maybe (Tree Int)
    , _textTOPoutputaspect :: Maybe (Tree Int)
    , _textTOPborderaalpha :: Maybe (Tree Float)
    , _textTOPchopvaluereplace :: Maybe (Tree Bool)
    , _textTOPformat :: Maybe (Tree Int)
    , _textTOPstrokewidth :: Maybe (Tree Int)
    , _textTOPoutputresolution :: Maybe (Tree Int)
    , _textTOPbottomborderi :: Maybe (Tree Int)
    , _textTOPaspect1 :: Maybe (Tree Float)
    , _textTOPborderb :: Vec3
    , _textTOPresmult :: Maybe (Tree Bool)
    , _textTOPfontfile :: Maybe (Tree ByteString)
    , _textTOPtopborderi :: Maybe (Tree Int)
    , _textTOPfontsizexunit :: Maybe (Tree Int)
    , _textTOPleftborderi :: Maybe (Tree Int)
    , _textTOPappendvalue :: Maybe (Tree Bool)
    , _textTOPtext :: Maybe (Tree ByteString)
    , _textTOPaspect2 :: Maybe (Tree Float)
    , _textTOPleadingzero :: Maybe (Tree Bool)
    , _textTOPborderspace2 :: Maybe (Tree Float)
    , _textTOPrightborder :: Maybe (Tree Int)
    , _textTOPbottomborder :: Maybe (Tree Int)
    , _textTOPtotaldigits :: Maybe (Tree Int)
    , _textTOPspecdat :: Maybe (Tree DAT)
    , _textTOPfontsizey :: Maybe (Tree Float)
    , _textTOPdecimaldigits :: Maybe (Tree Int)
    , _textTOPmultrgbbyalpha :: Maybe (Tree Bool)
    , _textTOPborderbalpha :: Maybe (Tree Float)
    , _textTOPfontautosize :: Maybe (Tree Int)
    , _textTOPbgalpha :: Maybe (Tree Float)
    , _textTOPfont :: Maybe (Tree ByteString)
    , _textTOPalignx :: Maybe (Tree Int)
    , _textTOPbold :: Maybe (Tree Bool)
    , _textTOPchanmask :: Maybe (Tree Int)
    , _textTOPdat :: Maybe (Tree DAT)
    , _textTOPfontsizex :: Maybe (Tree Float)
    , _textTOPpositionunit :: Maybe (Tree Int)
    , _textTOPkerning2 :: Maybe (Tree Float)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | KinectTOP {
    _kinectTOPtoofarvalue :: Maybe (Tree Float)
    , _kinectTOPaspect2 :: Maybe (Tree Float)
    , _kinectTOPformat :: Maybe (Tree Int)
    , _kinectTOPactive :: Maybe (Tree Bool)
    , _kinectTOPimage :: Maybe (Tree Int)
    , _kinectTOPinputfiltertype :: Maybe (Tree Int)
    , _kinectTOPchanmask :: Maybe (Tree Int)
    , _kinectTOPoutputresolution :: Maybe (Tree Int)
    , _kinectTOPfillmode :: Maybe (Tree Int)
    , _kinectTOPtooclosevalue :: Maybe (Tree Float)
    , _kinectTOPremap :: Maybe (Tree Bool)
    , _kinectTOParmenu :: Maybe (Tree Int)
    , _kinectTOPfiltertype :: Maybe (Tree Int)
    , _kinectTOPskeleton :: Maybe (Tree Int)
    , _kinectTOPresolutionw :: Maybe (Tree Int)
    , _kinectTOPmirrorimage :: Maybe (Tree Bool)
    , _kinectTOPunknownpointvalue :: Maybe (Tree Int)
    , _kinectTOPresmult :: Maybe (Tree Bool)
    , _kinectTOPsensor :: Maybe (Tree ByteString)
    , _kinectTOPresmenu :: Maybe (Tree Int)
    , _kinectTOPunknownvalue :: Maybe (Tree Float)
    , _kinectTOPhwversion :: Maybe (Tree Int)
    , _kinectTOPcamerares :: Maybe (Tree Int)
    , _kinectTOPresolutionh :: Maybe (Tree Int)
    , _kinectTOPnpasses :: Maybe (Tree Int)
    , _kinectTOPaspect1 :: Maybe (Tree Float)
    , _kinectTOPoutputaspect :: Maybe (Tree Int)
    , _kinectTOPneardepthmode :: Maybe (Tree Bool)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | CropTOP {
    _cropTOPaspect2 :: Maybe (Tree Float)
    , _cropTOPformat :: Maybe (Tree Int)
    , _cropTOPoutputresolution :: Maybe (Tree Int)
    , _cropTOPextend :: Maybe (Tree Int)
    , _cropTOPchanmask :: Maybe (Tree Int)
    , _cropTOPcropleftunit :: Maybe (Tree Int)
    , _cropTOPfillmode :: Maybe (Tree Int)
    , _cropTOPresolutionw :: Maybe (Tree Int)
    , _cropTOParmenu :: Maybe (Tree Int)
    , _cropTOPcropleft :: Maybe (Tree Float)
    , _cropTOPcropbottom :: Maybe (Tree Float)
    , _cropTOPcroprightunit :: Maybe (Tree Int)
    , _cropTOPinputfiltertype :: Maybe (Tree Int)
    , _cropTOPresmult :: Maybe (Tree Bool)
    , _cropTOPcropright :: Maybe (Tree Float)
    , _cropTOPresmenu :: Maybe (Tree Int)
    , _cropTOPresolutionh :: Maybe (Tree Int)
    , _cropTOPcropbottomunit :: Maybe (Tree Int)
    , _cropTOPnpasses :: Maybe (Tree Int)
    , _cropTOPcroptopunit :: Maybe (Tree Int)
    , _cropTOPaspect1 :: Maybe (Tree Float)
    , _cropTOPcroptop :: Maybe (Tree Float)
    , _cropTOPoutputaspect :: Maybe (Tree Int)
    , _cropTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | PrefiltermapTOP {
    _prefiltermapTOPresmult :: Maybe (Tree Bool)
    , _prefiltermapTOPaspect2 :: Maybe (Tree Float)
    , _prefiltermapTOPformat :: Maybe (Tree Int)
    , _prefiltermapTOPoutput :: Maybe (Tree Int)
    , _prefiltermapTOPresmenu :: Maybe (Tree Int)
    , _prefiltermapTOPnpasses :: Maybe (Tree Int)
    , _prefiltermapTOPinputfiltertype :: Maybe (Tree Int)
    , _prefiltermapTOPchanmask :: Maybe (Tree Int)
    , _prefiltermapTOPoutputresolution :: Maybe (Tree Int)
    , _prefiltermapTOPfillmode :: Maybe (Tree Int)
    , _prefiltermapTOPresolutionw :: Maybe (Tree Int)
    , _prefiltermapTOParmenu :: Maybe (Tree Int)
    , _prefiltermapTOPfiltertype :: Maybe (Tree Int)
    , _prefiltermapTOPaspect1 :: Maybe (Tree Float)
    , _prefiltermapTOPresolutionh :: Maybe (Tree Int)
    , _prefiltermapTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | OverTOP {
    _overTOPaspect2 :: Maybe (Tree Float)
    , _overTOPformat :: Maybe (Tree Int)
    , _overTOPextend :: Maybe (Tree Int)
    , _overTOPchanmask :: Maybe (Tree Int)
    , _overTOPoutputresolution :: Maybe (Tree Int)
    , _overTOPfillmode :: Maybe (Tree Int)
    , _overTOPresolutionw :: Maybe (Tree Int)
    , _overTOParmenu :: Maybe (Tree Int)
    , _overTOPfiltertype :: Maybe (Tree Int)
    , _overTOPinputfiltertype :: Maybe (Tree Int)
    , _overTOPresmult :: Maybe (Tree Bool)
    , _overTOPpunit :: Maybe (Tree Int)
    , _overTOPs :: Vec2
    , _overTOPresmenu :: Maybe (Tree Int)
    , _overTOPp :: Vec2
    , _overTOPsize :: Maybe (Tree Int)
    , _overTOPnpasses :: Maybe (Tree Int)
    , _overTOPoutputaspect :: Maybe (Tree Int)
    , _overTOPresolutionh :: Maybe (Tree Int)
    , _overTOPtunit :: Maybe (Tree Int)
    , _overTOPprefit :: Maybe (Tree Int)
    , _overTOPr :: Maybe (Tree Float)
    , _overTOPaspect1 :: Maybe (Tree Float)
    , _overTOPjustifyh :: Maybe (Tree Int)
    , _overTOPt :: Vec2
    , _overTOPjustifyv :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | CompositeTOP {
    _compositeTOPaspect2 :: Maybe (Tree Float)
    , _compositeTOPformat :: Maybe (Tree Int)
    , _compositeTOPpreviewgrid :: Maybe (Tree Bool)
    , _compositeTOPextend :: Maybe (Tree Int)
    , _compositeTOPchanmask :: Maybe (Tree Int)
    , _compositeTOPoutputresolution :: Maybe (Tree Int)
    , _compositeTOPfillmode :: Maybe (Tree Int)
    , _compositeTOPresolutionw :: Maybe (Tree Int)
    , _compositeTOPinputindex :: Maybe (Tree Int)
    , _compositeTOPprefit :: Maybe (Tree Int)
    , _compositeTOPtop :: Maybe (Tree TOP)
    , _compositeTOPfiltertype :: Maybe (Tree Int)
    , _compositeTOPpunit :: Maybe (Tree Int)
    , _compositeTOPtstep :: Vec2
    , _compositeTOPr :: Maybe (Tree Float)
    , _compositeTOPresmult :: Maybe (Tree Bool)
    , _compositeTOPoperand :: Maybe (Tree Int)
    , _compositeTOPresmenu :: Maybe (Tree Int)
    , _compositeTOPs :: Vec2
    , _compositeTOPsize :: Maybe (Tree Int)
    , _compositeTOPtstepunit :: Maybe (Tree Int)
    , _compositeTOPp :: Vec2
    , _compositeTOPoutputaspect :: Maybe (Tree Int)
    , _compositeTOPresolutionh :: Maybe (Tree Int)
    , _compositeTOPtunit :: Maybe (Tree Int)
    , _compositeTOParmenu :: Maybe (Tree Int)
    , _compositeTOPselectinput :: Maybe (Tree Bool)
    , _compositeTOPnpasses :: Maybe (Tree Int)
    , _compositeTOPaspect1 :: Maybe (Tree Float)
    , _compositeTOPinputfiltertype :: Maybe (Tree Int)
    , _compositeTOPjustifyh :: Maybe (Tree Int)
    , _compositeTOPt :: Vec2
    , _compositeTOPjustifyv :: Maybe (Tree Int)
    , _compositeTOPswaporder :: Maybe (Tree Bool)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | WebrenderTOP {
    _webrenderTOPaspect2 :: Maybe (Tree Float)
    , _webrenderTOPformat :: Maybe (Tree Int)
    , _webrenderTOPtransparent :: Maybe (Tree Bool)
    , _webrenderTOPactive :: Maybe (Tree Bool)
    , _webrenderTOPchanmask :: Maybe (Tree Int)
    , _webrenderTOPoutputresolution :: Maybe (Tree Int)
    , _webrenderTOPautorestart :: Maybe (Tree Bool)
    , _webrenderTOPusedat :: Maybe (Tree Bool)
    , _webrenderTOPresolutionw :: Maybe (Tree Int)
    , _webrenderTOParmenu :: Maybe (Tree Int)
    , _webrenderTOPfiltertype :: Maybe (Tree Int)
    , _webrenderTOPresetcount :: Maybe (Tree Bool)
    , _webrenderTOPaudio :: Maybe (Tree Bool)
    , _webrenderTOPinputfiltertype :: Maybe (Tree Int)
    , _webrenderTOPoptions :: Maybe (Tree ByteString)
    , _webrenderTOPfillmode :: Maybe (Tree Int)
    , _webrenderTOPresmult :: Maybe (Tree Bool)
    , _webrenderTOPresmenu :: Maybe (Tree Int)
    , _webrenderTOPmaxrenderrate :: Maybe (Tree Int)
    , _webrenderTOPurl :: Maybe (Tree ByteString)
    , _webrenderTOPresolutionh :: Maybe (Tree Int)
    , _webrenderTOPnpasses :: Maybe (Tree Int)
    , _webrenderTOPaspect1 :: Maybe (Tree Float)
    , _webrenderTOPautorestartpulse :: Maybe (Tree Bool)
    , _webrenderTOPupdatewhenloaded :: Maybe (Tree Bool)
    , _webrenderTOPdat :: Maybe (Tree DAT)
    , _webrenderTOPoutputaspect :: Maybe (Tree Int)
    , _webrenderTOPreload :: Maybe (Tree Bool)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | AntialiasTOP {
    _antialiasTOPquality :: Maybe (Tree Int)
    , _antialiasTOPaspect2 :: Maybe (Tree Float)
    , _antialiasTOPformat :: Maybe (Tree Int)
    , _antialiasTOPoutputresolution :: Maybe (Tree Int)
    , _antialiasTOPinputfiltertype :: Maybe (Tree Int)
    , _antialiasTOPedgethreshold :: Maybe (Tree Float)
    , _antialiasTOPmaxsearchsteps :: Maybe (Tree Int)
    , _antialiasTOPfillmode :: Maybe (Tree Int)
    , _antialiasTOPcornerrounding :: Maybe (Tree Int)
    , _antialiasTOPresolutionw :: Maybe (Tree Int)
    , _antialiasTOParmenu :: Maybe (Tree Int)
    , _antialiasTOPfiltertype :: Maybe (Tree Int)
    , _antialiasTOPmaxdiagsearchsteps :: Maybe (Tree Int)
    , _antialiasTOPresmult :: Maybe (Tree Bool)
    , _antialiasTOPresmenu :: Maybe (Tree Int)
    , _antialiasTOPaspect1 :: Maybe (Tree Float)
    , _antialiasTOPresolutionh :: Maybe (Tree Int)
    , _antialiasTOPoutputedges :: Maybe (Tree Bool)
    , _antialiasTOPnpasses :: Maybe (Tree Int)
    , _antialiasTOPchanmask :: Maybe (Tree Int)
    , _antialiasTOPedgedetectsource :: Maybe (Tree Int)
    , _antialiasTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | RgbtohsvTOP {
    _rgbtohsvTOPresmult :: Maybe (Tree Bool)
    , _rgbtohsvTOPaspect2 :: Maybe (Tree Float)
    , _rgbtohsvTOPformat :: Maybe (Tree Int)
    , _rgbtohsvTOPresmenu :: Maybe (Tree Int)
    , _rgbtohsvTOPnpasses :: Maybe (Tree Int)
    , _rgbtohsvTOPinputfiltertype :: Maybe (Tree Int)
    , _rgbtohsvTOPchanmask :: Maybe (Tree Int)
    , _rgbtohsvTOPoutputresolution :: Maybe (Tree Int)
    , _rgbtohsvTOPfillmode :: Maybe (Tree Int)
    , _rgbtohsvTOPresolutionw :: Maybe (Tree Int)
    , _rgbtohsvTOParmenu :: Maybe (Tree Int)
    , _rgbtohsvTOPfiltertype :: Maybe (Tree Int)
    , _rgbtohsvTOPaspect1 :: Maybe (Tree Float)
    , _rgbtohsvTOPresolutionh :: Maybe (Tree Int)
    , _rgbtohsvTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ConvolveTOP {
    _convolveTOPfillmode :: Maybe (Tree Int)
    , _convolveTOPapplytoalpha :: Maybe (Tree Bool)
    , _convolveTOPaspect2 :: Maybe (Tree Float)
    , _convolveTOPformat :: Maybe (Tree Int)
    , _convolveTOPresmenu :: Maybe (Tree Int)
    , _convolveTOPnpasses :: Maybe (Tree Int)
    , _convolveTOPnormalize :: Maybe (Tree Bool)
    , _convolveTOPoffset :: Maybe (Tree Float)
    , _convolveTOPinputfiltertype :: Maybe (Tree Int)
    , _convolveTOPchanmask :: Maybe (Tree Int)
    , _convolveTOPoutputresolution :: Maybe (Tree Int)
    , _convolveTOPresmult :: Maybe (Tree Bool)
    , _convolveTOPresolutionh :: Maybe (Tree Int)
    , _convolveTOParmenu :: Maybe (Tree Int)
    , _convolveTOPfiltertype :: Maybe (Tree Int)
    , _convolveTOPaspect1 :: Maybe (Tree Float)
    , _convolveTOPresolutionw :: Maybe (Tree Int)
    , _convolveTOPdat :: Maybe (Tree DAT)
    , _convolveTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | EdgeTOP {
    _edgeTOPaspect2 :: Maybe (Tree Float)
    , _edgeTOPformat :: Maybe (Tree Int)
    , _edgeTOPoffset2 :: Maybe (Tree Float)
    , _edgeTOPinputfiltertype :: Maybe (Tree Int)
    , _edgeTOPchanmask :: Maybe (Tree Int)
    , _edgeTOPoutputresolution :: Maybe (Tree Int)
    , _edgeTOPfillmode :: Maybe (Tree Int)
    , _edgeTOPresolutionw :: Maybe (Tree Int)
    , _edgeTOPedgecolor :: Vec4
    , _edgeTOPselect :: Maybe (Tree Int)
    , _edgeTOParmenu :: Maybe (Tree Int)
    , _edgeTOPfiltertype :: Maybe (Tree Int)
    , _edgeTOPoffset1 :: Maybe (Tree Float)
    , _edgeTOPblacklevel :: Maybe (Tree Float)
    , _edgeTOPresmult :: Maybe (Tree Bool)
    , _edgeTOPresmenu :: Maybe (Tree Int)
    , _edgeTOPoffsetunit :: Maybe (Tree Int)
    , _edgeTOPstrength :: Maybe (Tree Float)
    , _edgeTOPalphaoutputmenu :: Maybe (Tree Int)
    , _edgeTOPresolutionh :: Maybe (Tree Int)
    , _edgeTOPcompinput :: Maybe (Tree Bool)
    , _edgeTOPnpasses :: Maybe (Tree Int)
    , _edgeTOPaspect1 :: Maybe (Tree Float)
    , _edgeTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | SlopeTOP {
    _slopeTOPaspect2 :: Maybe (Tree Float)
    , _slopeTOPgreen :: Maybe (Tree Int)
    , _slopeTOPblue :: Maybe (Tree Int)
    , _slopeTOPalpha :: Maybe (Tree Int)
    , _slopeTOPchanmask :: Maybe (Tree Int)
    , _slopeTOPoutputresolution :: Maybe (Tree Int)
    , _slopeTOPfillmode :: Maybe (Tree Int)
    , _slopeTOPresolutionw :: Maybe (Tree Int)
    , _slopeTOParmenu :: Maybe (Tree Int)
    , _slopeTOPfiltertype :: Maybe (Tree Int)
    , _slopeTOPformat :: Maybe (Tree Int)
    , _slopeTOPinputfiltertype :: Maybe (Tree Int)
    , _slopeTOPoffset1 :: Maybe (Tree Float)
    , _slopeTOPresmult :: Maybe (Tree Bool)
    , _slopeTOPzeropoint :: Maybe (Tree Float)
    , _slopeTOPresmenu :: Maybe (Tree Int)
    , _slopeTOPoffsetunit :: Maybe (Tree Int)
    , _slopeTOPstrength :: Maybe (Tree Float)
    , _slopeTOPresolutionh :: Maybe (Tree Int)
    , _slopeTOPred :: Maybe (Tree Int)
    , _slopeTOPnpasses :: Maybe (Tree Int)
    , _slopeTOPaspect1 :: Maybe (Tree Float)
    , _slopeTOPmethod :: Maybe (Tree Int)
    , _slopeTOPoutputaspect :: Maybe (Tree Int)
    , _slopeTOPoffset2 :: Maybe (Tree Float)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | NormalmapTOP {
    _normalmapTOPresmult :: Maybe (Tree Bool)
    , _normalmapTOPaspect2 :: Maybe (Tree Float)
    , _normalmapTOPformat :: Maybe (Tree Int)
    , _normalmapTOPoffset2 :: Maybe (Tree Float)
    , _normalmapTOPresmenu :: Maybe (Tree Int)
    , _normalmapTOPnpasses :: Maybe (Tree Int)
    , _normalmapTOPoffsetunit :: Maybe (Tree Int)
    , _normalmapTOPinputfiltertype :: Maybe (Tree Int)
    , _normalmapTOPheightmap :: Maybe (Tree Bool)
    , _normalmapTOPoutputresolution :: Maybe (Tree Int)
    , _normalmapTOPfillmode :: Maybe (Tree Int)
    , _normalmapTOPresolutionw :: Maybe (Tree Int)
    , _normalmapTOPchanmask :: Maybe (Tree Int)
    , _normalmapTOParmenu :: Maybe (Tree Int)
    , _normalmapTOPfiltertype :: Maybe (Tree Int)
    , _normalmapTOPaspect1 :: Maybe (Tree Float)
    , _normalmapTOPmethod :: Maybe (Tree Int)
    , _normalmapTOPresolutionh :: Maybe (Tree Int)
    , _normalmapTOPoutputaspect :: Maybe (Tree Int)
    , _normalmapTOPoffset1 :: Maybe (Tree Float)
    , _normalmapTOPsource :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ThresholdTOP {
    _thresholdTOParmenu :: Maybe (Tree Int)
    , _thresholdTOPresmult :: Maybe (Tree Bool)
    , _thresholdTOPcomparator :: Maybe (Tree Int)
    , _thresholdTOPformat :: Maybe (Tree Int)
    , _thresholdTOPresmenu :: Maybe (Tree Int)
    , _thresholdTOPnpasses :: Maybe (Tree Int)
    , _thresholdTOPfillmode :: Maybe (Tree Int)
    , _thresholdTOPsoften :: Maybe (Tree Float)
    , _thresholdTOPalpha :: Maybe (Tree Int)
    , _thresholdTOPchanmask :: Maybe (Tree Int)
    , _thresholdTOPoutputresolution :: Maybe (Tree Int)
    , _thresholdTOPthreshold :: Maybe (Tree Float)
    , _thresholdTOPresolutionh :: Maybe (Tree Int)
    , _thresholdTOPaspect2 :: Maybe (Tree Float)
    , _thresholdTOPfiltertype :: Maybe (Tree Int)
    , _thresholdTOPaspect1 :: Maybe (Tree Float)
    , _thresholdTOPrgb :: Maybe (Tree Int)
    , _thresholdTOPresolutionw :: Maybe (Tree Int)
    , _thresholdTOPoutputaspect :: Maybe (Tree Int)
    , _thresholdTOPinputfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | CplusplusTOP {
    _cplusplusTOPaspect2 :: Maybe (Tree Float)
    , _cplusplusTOPformat :: Maybe (Tree Int)
    , _cplusplusTOPinputfiltertype :: Maybe (Tree Int)
    , _cplusplusTOPchanmask :: Maybe (Tree Int)
    , _cplusplusTOPoutputresolution :: Maybe (Tree Int)
    , _cplusplusTOPfillmode :: Maybe (Tree Int)
    , _cplusplusTOPantialias :: Maybe (Tree Int)
    , _cplusplusTOParmenu :: Maybe (Tree Int)
    , _cplusplusTOPstencilbuffer :: Maybe (Tree Bool)
    , _cplusplusTOPresolutionw :: Maybe (Tree Int)
    , _cplusplusTOPresmult :: Maybe (Tree Bool)
    , _cplusplusTOPunloadplugin :: Maybe (Tree Bool)
    , _cplusplusTOPresmenu :: Maybe (Tree Int)
    , _cplusplusTOPplugin :: Maybe (Tree ByteString)
    , _cplusplusTOPresolutionh :: Maybe (Tree Int)
    , _cplusplusTOPnpasses :: Maybe (Tree Int)
    , _cplusplusTOPnumcolorbufs :: Maybe (Tree Int)
    , _cplusplusTOPreinitpulse :: Maybe (Tree Bool)
    , _cplusplusTOPaspect1 :: Maybe (Tree Float)
    , _cplusplusTOPdepthbuffer :: Maybe (Tree Int)
    , _cplusplusTOPoutputaspect :: Maybe (Tree Int)
    , _cplusplusTOPreinit :: Maybe (Tree Bool)
    , _cplusplusTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | SwitchTOP {
    _switchTOPindex :: Maybe (Tree Float)
    , _switchTOPresmult :: Maybe (Tree Bool)
    , _switchTOPaspect2 :: Maybe (Tree Float)
    , _switchTOPformat :: Maybe (Tree Int)
    , _switchTOPresmenu :: Maybe (Tree Int)
    , _switchTOPnpasses :: Maybe (Tree Int)
    , _switchTOPinputfiltertype :: Maybe (Tree Int)
    , _switchTOPchanmask :: Maybe (Tree Int)
    , _switchTOPoutputresolution :: Maybe (Tree Int)
    , _switchTOPfillmode :: Maybe (Tree Int)
    , _switchTOPblend :: Maybe (Tree Bool)
    , _switchTOPresolutionw :: Maybe (Tree Int)
    , _switchTOParmenu :: Maybe (Tree Int)
    , _switchTOPfiltertype :: Maybe (Tree Int)
    , _switchTOPaspect1 :: Maybe (Tree Float)
    , _switchTOPresolutionh :: Maybe (Tree Int)
    , _switchTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | MatteTOP {
    _matteTOPresmult :: Maybe (Tree Bool)
    , _matteTOPaspect2 :: Maybe (Tree Float)
    , _matteTOPformat :: Maybe (Tree Int)
    , _matteTOPresmenu :: Maybe (Tree Int)
    , _matteTOPnpasses :: Maybe (Tree Int)
    , _matteTOPinputfiltertype :: Maybe (Tree Int)
    , _matteTOPchanmask :: Maybe (Tree Int)
    , _matteTOPoutputresolution :: Maybe (Tree Int)
    , _matteTOPfillmode :: Maybe (Tree Int)
    , _matteTOPresolutionh :: Maybe (Tree Int)
    , _matteTOParmenu :: Maybe (Tree Int)
    , _matteTOPswitchinputs :: Maybe (Tree Float)
    , _matteTOPfiltertype :: Maybe (Tree Int)
    , _matteTOPaspect1 :: Maybe (Tree Float)
    , _matteTOPresolutionw :: Maybe (Tree Int)
    , _matteTOPoutputaspect :: Maybe (Tree Int)
    , _matteTOPmattechannel :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | LumalevelTOP {
    _lumalevelTOPoutlow :: Maybe (Tree Float)
    , _lumalevelTOPaspect2 :: Maybe (Tree Float)
    , _lumalevelTOPbrightness1 :: Maybe (Tree Float)
    , _lumalevelTOPclamphigh :: Maybe (Tree Float)
    , _lumalevelTOPouthigh :: Maybe (Tree Float)
    , _lumalevelTOPcontrast :: Maybe (Tree Float)
    , _lumalevelTOPaspect1 :: Maybe (Tree Float)
    , _lumalevelTOPoutputresolution :: Maybe (Tree Int)
    , _lumalevelTOPfillmode :: Maybe (Tree Int)
    , _lumalevelTOPresolutionw :: Maybe (Tree Int)
    , _lumalevelTOPopacity :: Maybe (Tree Float)
    , _lumalevelTOParmenu :: Maybe (Tree Int)
    , _lumalevelTOPgamma2 :: Maybe (Tree Float)
    , _lumalevelTOPfiltertype :: Maybe (Tree Int)
    , _lumalevelTOPinvert :: Maybe (Tree Float)
    , _lumalevelTOPinhigh :: Maybe (Tree Float)
    , _lumalevelTOPinputfiltertype :: Maybe (Tree Int)
    , _lumalevelTOPsource :: Maybe (Tree Int)
    , _lumalevelTOPblacklevel :: Maybe (Tree Float)
    , _lumalevelTOPresmult :: Maybe (Tree Bool)
    , _lumalevelTOPresmenu :: Maybe (Tree Int)
    , _lumalevelTOPchanmask :: Maybe (Tree Int)
    , _lumalevelTOPgamma1 :: Maybe (Tree Float)
    , _lumalevelTOPsoften :: Maybe (Tree Float)
    , _lumalevelTOPthreshold :: Maybe (Tree Float)
    , _lumalevelTOPformat :: Maybe (Tree Int)
    , _lumalevelTOPresolutionh :: Maybe (Tree Int)
    , _lumalevelTOPbrightness2 :: Maybe (Tree Float)
    , _lumalevelTOPnpasses :: Maybe (Tree Int)
    , _lumalevelTOPstepsize :: Maybe (Tree Float)
    , _lumalevelTOPclamplow :: Maybe (Tree Float)
    , _lumalevelTOPinlow :: Maybe (Tree Float)
    , _lumalevelTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | CacheselectTOP {
    _cacheselectTOPindex :: Maybe (Tree Int)
    , _cacheselectTOPresmult :: Maybe (Tree Bool)
    , _cacheselectTOPaspect2 :: Maybe (Tree Float)
    , _cacheselectTOPformat :: Maybe (Tree Int)
    , _cacheselectTOPresmenu :: Maybe (Tree Int)
    , _cacheselectTOPnpasses :: Maybe (Tree Int)
    , _cacheselectTOPinputfiltertype :: Maybe (Tree Int)
    , _cacheselectTOPchanmask :: Maybe (Tree Int)
    , _cacheselectTOPoutputresolution :: Maybe (Tree Int)
    , _cacheselectTOPfillmode :: Maybe (Tree Int)
    , _cacheselectTOPresolutionw :: Maybe (Tree Int)
    , _cacheselectTOPcachetop :: Maybe (Tree TOP)
    , _cacheselectTOParmenu :: Maybe (Tree Int)
    , _cacheselectTOPfiltertype :: Maybe (Tree Int)
    , _cacheselectTOPaspect1 :: Maybe (Tree Float)
    , _cacheselectTOPresolutionh :: Maybe (Tree Int)
    , _cacheselectTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | UnderTOP {
    _underTOPaspect2 :: Maybe (Tree Float)
    , _underTOPformat :: Maybe (Tree Int)
    , _underTOPextend :: Maybe (Tree Int)
    , _underTOPchanmask :: Maybe (Tree Int)
    , _underTOPoutputresolution :: Maybe (Tree Int)
    , _underTOPfillmode :: Maybe (Tree Int)
    , _underTOPresolutionw :: Maybe (Tree Int)
    , _underTOParmenu :: Maybe (Tree Int)
    , _underTOPfiltertype :: Maybe (Tree Int)
    , _underTOPinputfiltertype :: Maybe (Tree Int)
    , _underTOPresmult :: Maybe (Tree Bool)
    , _underTOPpunit :: Maybe (Tree Int)
    , _underTOPs :: Vec2
    , _underTOPresmenu :: Maybe (Tree Int)
    , _underTOPp :: Vec2
    , _underTOPsize :: Maybe (Tree Int)
    , _underTOPnpasses :: Maybe (Tree Int)
    , _underTOPoutputaspect :: Maybe (Tree Int)
    , _underTOPresolutionh :: Maybe (Tree Int)
    , _underTOPtunit :: Maybe (Tree Int)
    , _underTOPprefit :: Maybe (Tree Int)
    , _underTOPr :: Maybe (Tree Float)
    , _underTOPaspect1 :: Maybe (Tree Float)
    , _underTOPjustifyh :: Maybe (Tree Int)
    , _underTOPt :: Vec2
    , _underTOPjustifyv :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | RenderTOP {
    _renderTOPaspect2 :: Maybe (Tree Float)
    , _renderTOPoverdraw :: Maybe (Tree Bool)
    , _renderTOPvalue3 :: Vec4
    , _renderTOPfillmode :: Maybe (Tree Int)
    , _renderTOPcullface :: Maybe (Tree Int)
    , _renderTOPresolutionw :: Maybe (Tree Int)
    , _renderTOPnumcolorbufs :: Maybe (Tree Int)
    , _renderTOParmenu :: Maybe (Tree Int)
    , _renderTOPsampler0 :: Maybe (Tree ByteString)
    , _renderTOPformat :: Maybe (Tree Int)
    , _renderTOPsampler3 :: Maybe (Tree ByteString)
    , _renderTOPresmenu :: Maybe (Tree Int)
    , _renderTOPtop1extendv :: Maybe (Tree Int)
    , _renderTOPuniname1 :: Maybe (Tree ByteString)
    , _renderTOPcropbottom :: Maybe (Tree Float)
    , _renderTOPsampler4 :: Maybe (Tree ByteString)
    , _renderTOPoutputaspect :: Maybe (Tree Int)
    , _renderTOPmulticamerahint :: Maybe (Tree Int)
    , _renderTOPtop4filter :: Maybe (Tree Int)
    , _renderTOPoverridemat :: Maybe (Tree MAT)
    , _renderTOPorderindtrans :: Maybe (Tree Bool)
    , _renderTOPtop4extendv :: Maybe (Tree Int)
    , _renderTOPuniname4 :: Maybe (Tree ByteString)
    , _renderTOPvalue2 :: Vec4
    , _renderTOPcropbottomunit :: Maybe (Tree Int)
    , _renderTOPcropleft :: Maybe (Tree Float)
    , _renderTOPtop2extendu :: Maybe (Tree Int)
    , _renderTOPpolygonoffsetunits :: Maybe (Tree Float)
    , _renderTOPinputfiltertype :: Maybe (Tree Int)
    , _renderTOPtop1 :: Maybe (Tree TOP)
    , _renderTOPtop1filter :: Maybe (Tree Int)
    , _renderTOPresmult :: Maybe (Tree Bool)
    , _renderTOPtop2extendw :: Maybe (Tree Int)
    , _renderTOPsampler2 :: Maybe (Tree ByteString)
    , _renderTOPdither :: Maybe (Tree Bool)
    , _renderTOPuniname2 :: Maybe (Tree ByteString)
    , _renderTOPtop2 :: Maybe (Tree TOP)
    , _renderTOPcroptopunit :: Maybe (Tree Int)
    , _renderTOPuniname0 :: Maybe (Tree ByteString)
    , _renderTOPfiltertype :: Maybe (Tree Int)
    , _renderTOPtop4extendw :: Maybe (Tree Int)
    , _renderTOPsampler1 :: Maybe (Tree ByteString)
    , _renderTOPrender :: Maybe (Tree Bool)
    , _renderTOPvalue4 :: Vec4
    , _renderTOPantialias :: Maybe (Tree Int)
    , _renderTOPdrawdepthonly :: Maybe (Tree Bool)
    , _renderTOPdepthformat :: Maybe (Tree Int)
    , _renderTOPcroprightunit :: Maybe (Tree Int)
    , _renderTOPtop0anisotropy :: Maybe (Tree Int)
    , _renderTOPrendermode :: Maybe (Tree Int)
    , _renderTOPtop0extendv :: Maybe (Tree Int)
    , _renderTOPtop0 :: Maybe (Tree TOP)
    , _renderTOPtop3extendw :: Maybe (Tree Int)
    , _renderTOPtop0filter :: Maybe (Tree Int)
    , _renderTOPpolygonoffsetfactor :: Maybe (Tree Float)
    , _renderTOPpolygonoffset :: Maybe (Tree Bool)
    , _renderTOPcropright :: Maybe (Tree Float)
    , _renderTOPtop3anisotropy :: Maybe (Tree Int)
    , _renderTOPtop3extendv :: Maybe (Tree Int)
    , _renderTOPresolutionh :: Maybe (Tree Int)
    , _renderTOPtop3filter :: Maybe (Tree Int)
    , _renderTOPallowbufblending :: Maybe (Tree Bool)
    , _renderTOPtop3 :: Maybe (Tree TOP)
    , _renderTOPaspect1 :: Maybe (Tree Float)
    , _renderTOPtop4extendu :: Maybe (Tree Int)
    , _renderTOPcoloroutputneeded :: Maybe (Tree Bool)
    , _renderTOPtop1extendu :: Maybe (Tree Int)
    , _renderTOPalphatocoverage :: Maybe (Tree Bool)
    , _renderTOPtop3extendu :: Maybe (Tree Int)
    , _renderTOPtop2anisotropy :: Maybe (Tree Int)
    , _renderTOPcropleftunit :: Maybe (Tree Int)
    , _renderTOPtop1extendw :: Maybe (Tree Int)
    , _renderTOPtop2extendv :: Maybe (Tree Int)
    , _renderTOPtop4anisotropy :: Maybe (Tree Int)
    , _renderTOPtop4 :: Maybe (Tree TOP)
    , _renderTOPoverdrawlimit :: Maybe (Tree Int)
    , _renderTOPvalue1 :: Vec4
    , _renderTOPtop0extendu :: Maybe (Tree Int)
    , _renderTOPvalue0 :: Vec4
    , _renderTOPdepthpeel :: Maybe (Tree Bool)
    , _renderTOPtop0extendw :: Maybe (Tree Int)
    , _renderTOPtranspeellayers :: Maybe (Tree Int)
    , _renderTOPtop1anisotropy :: Maybe (Tree Int)
    , _renderTOPoutputresolution :: Maybe (Tree Int)
    , _renderTOPuniname3 :: Maybe (Tree ByteString)
    , _renderTOPnpasses :: Maybe (Tree Int)
    , _renderTOPchanmask :: Maybe (Tree Int)
    , _renderTOPcroptop :: Maybe (Tree Float)
    , _renderTOPtop2filter :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ConstantTOP {
    _constantTOPresmult :: Maybe (Tree Bool)
    , _constantTOPaspect2 :: Maybe (Tree Float)
    , _constantTOPformat :: Maybe (Tree Int)
    , _constantTOPrgbaunit :: Maybe (Tree Int)
    , _constantTOPmultrgbbyalpha :: Maybe (Tree Bool)
    , _constantTOPnpasses :: Maybe (Tree Int)
    , _constantTOPcolor :: Vec3
    , _constantTOPalpha :: Maybe (Tree Float)
    , _constantTOPresmenu :: Maybe (Tree Int)
    , _constantTOPoutputresolution :: Maybe (Tree Int)
    , _constantTOPfillmode :: Maybe (Tree Int)
    , _constantTOPresolutionh :: Maybe (Tree Int)
    , _constantTOPchanmask :: Maybe (Tree Int)
    , _constantTOParmenu :: Maybe (Tree Int)
    , _constantTOPfiltertype :: Maybe (Tree Int)
    , _constantTOPaspect1 :: Maybe (Tree Float)
    , _constantTOPresolutionw :: Maybe (Tree Int)
    , _constantTOPoutputaspect :: Maybe (Tree Int)
    , _constantTOPinputfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ScreengrabTOP {
    _screengrabTOPaspect2 :: Maybe (Tree Float)
    , _screengrabTOPformat :: Maybe (Tree Int)
    , _screengrabTOPactive :: Maybe (Tree Bool)
    , _screengrabTOPbottomunit :: Maybe (Tree Int)
    , _screengrabTOPactivepulse :: Maybe (Tree Bool)
    , _screengrabTOPinputfiltertype :: Maybe (Tree Int)
    , _screengrabTOPchanmask :: Maybe (Tree Int)
    , _screengrabTOPoutputresolution :: Maybe (Tree Int)
    , _screengrabTOPresmult :: Maybe (Tree Bool)
    , _screengrabTOPresolutionw :: Maybe (Tree Int)
    , _screengrabTOParmenu :: Maybe (Tree Int)
    , _screengrabTOPtop :: Maybe (Tree Float)
    , _screengrabTOPfiltertype :: Maybe (Tree Int)
    , _screengrabTOPbottom :: Maybe (Tree Float)
    , _screengrabTOPleftunit :: Maybe (Tree Int)
    , _screengrabTOPleft :: Maybe (Tree Float)
    , _screengrabTOPresmenu :: Maybe (Tree Int)
    , _screengrabTOPdelayed :: Maybe (Tree Bool)
    , _screengrabTOPrightunit :: Maybe (Tree Int)
    , _screengrabTOPfillmode :: Maybe (Tree Int)
    , _screengrabTOPresolutionh :: Maybe (Tree Int)
    , _screengrabTOPtopunit :: Maybe (Tree Int)
    , _screengrabTOPnpasses :: Maybe (Tree Int)
    , _screengrabTOPaspect1 :: Maybe (Tree Float)
    , _screengrabTOPright :: Maybe (Tree Float)
    , _screengrabTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | RealsenseTOP {
    _realsenseTOPaspect2 :: Maybe (Tree Float)
    , _realsenseTOPformat :: Maybe (Tree Int)
    , _realsenseTOPactive :: Maybe (Tree Bool)
    , _realsenseTOPimage :: Maybe (Tree Int)
    , _realsenseTOPinputfiltertype :: Maybe (Tree Int)
    , _realsenseTOPchanmask :: Maybe (Tree Int)
    , _realsenseTOPoutputresolution :: Maybe (Tree Int)
    , _realsenseTOPfillmode :: Maybe (Tree Int)
    , _realsenseTOPcolorres :: Maybe (Tree ByteString)
    , _realsenseTOPapi :: Maybe (Tree Int)
    , _realsenseTOParmenu :: Maybe (Tree Int)
    , _realsenseTOPtradeoff :: Maybe (Tree Int)
    , _realsenseTOPresolutionw :: Maybe (Tree Int)
    , _realsenseTOPmirrorimage :: Maybe (Tree Bool)
    , _realsenseTOPresmult :: Maybe (Tree Bool)
    , _realsenseTOPsensor :: Maybe (Tree ByteString)
    , _realsenseTOPresmenu :: Maybe (Tree Int)
    , _realsenseTOPmaxdepth :: Maybe (Tree Float)
    , _realsenseTOPresolutionh :: Maybe (Tree Int)
    , _realsenseTOPnpasses :: Maybe (Tree Int)
    , _realsenseTOPaspect1 :: Maybe (Tree Float)
    , _realsenseTOPmodel :: Maybe (Tree Int)
    , _realsenseTOPdefaulttradeoff :: Maybe (Tree Bool)
    , _realsenseTOPoutputaspect :: Maybe (Tree Int)
    , _realsenseTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ReorderTOP {
    _reorderTOPaspect2 :: Maybe (Tree Float)
    , _reorderTOPformat :: Maybe (Tree Int)
    , _reorderTOPoutputgreenchan :: Maybe (Tree Int)
    , _reorderTOPoutputred :: Maybe (Tree Int)
    , _reorderTOPchanmask :: Maybe (Tree Int)
    , _reorderTOPoutputresolution :: Maybe (Tree Int)
    , _reorderTOPfillmode :: Maybe (Tree Int)
    , _reorderTOPresolutionw :: Maybe (Tree Int)
    , _reorderTOParmenu :: Maybe (Tree Int)
    , _reorderTOPfiltertype :: Maybe (Tree Int)
    , _reorderTOPoutputblue :: Maybe (Tree Int)
    , _reorderTOPinputfiltertype :: Maybe (Tree Int)
    , _reorderTOPresmult :: Maybe (Tree Bool)
    , _reorderTOPoutputgreen :: Maybe (Tree Int)
    , _reorderTOPresmenu :: Maybe (Tree Int)
    , _reorderTOPoutputalpha :: Maybe (Tree Int)
    , _reorderTOPresolutionh :: Maybe (Tree Int)
    , _reorderTOPnpasses :: Maybe (Tree Int)
    , _reorderTOPoutputbluechan :: Maybe (Tree Int)
    , _reorderTOPoutputredchan :: Maybe (Tree Int)
    , _reorderTOPaspect1 :: Maybe (Tree Float)
    , _reorderTOPoutputalphachan :: Maybe (Tree Int)
    , _reorderTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | MonochromeTOP {
    _monochromeTOPresmult :: Maybe (Tree Bool)
    , _monochromeTOPaspect2 :: Maybe (Tree Float)
    , _monochromeTOPformat :: Maybe (Tree Int)
    , _monochromeTOPresmenu :: Maybe (Tree Int)
    , _monochromeTOPnpasses :: Maybe (Tree Int)
    , _monochromeTOPchanmask :: Maybe (Tree Int)
    , _monochromeTOPalpha :: Maybe (Tree Int)
    , _monochromeTOPmono :: Maybe (Tree Float)
    , _monochromeTOPoutputresolution :: Maybe (Tree Int)
    , _monochromeTOPfillmode :: Maybe (Tree Int)
    , _monochromeTOPresolutionh :: Maybe (Tree Int)
    , _monochromeTOParmenu :: Maybe (Tree Int)
    , _monochromeTOPfiltertype :: Maybe (Tree Int)
    , _monochromeTOPaspect1 :: Maybe (Tree Float)
    , _monochromeTOPrgb :: Maybe (Tree Int)
    , _monochromeTOPresolutionw :: Maybe (Tree Int)
    , _monochromeTOPoutputaspect :: Maybe (Tree Int)
    , _monochromeTOPinputfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | GlslTOP {
    _glslTOPdepth :: Maybe (Tree Int)
    , _glslTOPvalue3 :: Vec4
    , _glslTOPglslversion :: Maybe (Tree Int)
    , _glslTOPfillmode :: Maybe (Tree Int)
    , _glslTOPresolutionw :: Maybe (Tree Int)
    , _glslTOPacsize0 :: Maybe (Tree Int)
    , _glslTOPclearvalue :: Vec4
    , _glslTOPvalue24 :: Vec4
    , _glslTOPdispatchsizey :: Maybe (Tree Int)
    , _glslTOPvalue10 :: Vec4
    , _glslTOPresmenu :: Maybe (Tree Int)
    , _glslTOPuniname12 :: Maybe (Tree ByteString)
    , _glslTOPuniname25 :: Maybe (Tree ByteString)
    , _glslTOPchopunitype9 :: Maybe (Tree Int)
    , _glslTOPacinitval0 :: Maybe (Tree Int)
    , _glslTOPuniname1 :: Maybe (Tree ByteString)
    , _glslTOPmatuniname2 :: Maybe (Tree ByteString)
    , _glslTOPuniname10 :: Maybe (Tree ByteString)
    , _glslTOPchopuniname7 :: Maybe (Tree ByteString)
    , _glslTOPuniname11 :: Maybe (Tree ByteString)
    , _glslTOPvalue23 :: Vec4
    , _glslTOPoutputaspect :: Maybe (Tree Int)
    , _glslTOPvalue19 :: Vec4
    , _glslTOPchopunitype2 :: Maybe (Tree Int)
    , _glslTOPuniname5 :: Maybe (Tree ByteString)
    , _glslTOPuniname4 :: Maybe (Tree ByteString)
    , _glslTOPuniname23 :: Maybe (Tree ByteString)
    , _glslTOPvalue2 :: Vec4
    , _glslTOPresmult :: Maybe (Tree Bool)
    , _glslTOPchopuniname9 :: Maybe (Tree ByteString)
    , _glslTOPacsize1 :: Maybe (Tree Int)
    , _glslTOPvalue13 :: Vec4
    , _glslTOPacsingleval1 :: Maybe (Tree Int)
    , _glslTOPacinitval1 :: Maybe (Tree Int)
    , _glslTOPchopuniname4 :: Maybe (Tree ByteString)
    , _glslTOPchop6 :: Maybe (Tree CHOP)
    , _glslTOPuniname14 :: Maybe (Tree ByteString)
    , _glslTOPchoparraytype8 :: Maybe (Tree Int)
    , _glslTOPvalue17 :: Vec4
    , _glslTOPchopunitype4 :: Maybe (Tree Int)
    , _glslTOPchopuniname8 :: Maybe (Tree ByteString)
    , _glslTOPchanmask :: Maybe (Tree Int)
    , _glslTOPchopuniname1 :: Maybe (Tree ByteString)
    , _glslTOPoutputaccess :: Maybe (Tree Int)
    , _glslTOPuniname2 :: Maybe (Tree ByteString)
    , _glslTOPvalue6 :: Vec4
    , _glslTOParmenu :: Maybe (Tree Int)
    , _glslTOPuniname3 :: Maybe (Tree ByteString)
    , _glslTOPvalue21 :: Vec4
    , _glslTOPchopunitype3 :: Maybe (Tree Int)
    , _glslTOPchopunitype6 :: Maybe (Tree Int)
    , _glslTOPvalue4 :: Vec4
    , _glslTOPvalue15 :: Vec4
    , _glslTOPchop3 :: Maybe (Tree CHOP)
    , _glslTOPclearoutputs :: Maybe (Tree Bool)
    , _glslTOPfiltertype :: Maybe (Tree Int)
    , _glslTOPuniname20 :: Maybe (Tree ByteString)
    , _glslTOPmatuniname1 :: Maybe (Tree ByteString)
    , _glslTOPchopuniname2 :: Maybe (Tree ByteString)
    , _glslTOPuniname9 :: Maybe (Tree ByteString)
    , _glslTOPchoparraytype1 :: Maybe (Tree Int)
    , _glslTOPchopuniname0 :: Maybe (Tree ByteString)
    , _glslTOPresolutionh :: Maybe (Tree Int)
    , _glslTOPuniname27 :: Maybe (Tree ByteString)
    , _glslTOPaspect1 :: Maybe (Tree Float)
    , _glslTOPnumcolorbufs :: Maybe (Tree Int)
    , _glslTOPinputmapping :: Maybe (Tree Int)
    , _glslTOPvalue27 :: Vec4
    , _glslTOPchop2 :: Maybe (Tree CHOP)
    , _glslTOPvalue8 :: Vec4
    , _glslTOPchop5 :: Maybe (Tree CHOP)
    , _glslTOPuniname13 :: Maybe (Tree ByteString)
    , _glslTOPchopunitype0 :: Maybe (Tree Int)
    , _glslTOPacinitval2 :: Maybe (Tree Int)
    , _glslTOPacbinding3 :: Maybe (Tree Int)
    , _glslTOPuniname28 :: Maybe (Tree ByteString)
    , _glslTOPvalue0 :: Vec4
    , _glslTOPacchopval2 :: Maybe (Tree CHOP)
    , _glslTOPchoparraytype4 :: Maybe (Tree Int)
    , _glslTOPchopunitype8 :: Maybe (Tree Int)
    , _glslTOPinputextendw :: Maybe (Tree Int)
    , _glslTOPuniname0 :: Maybe (Tree ByteString)
    , _glslTOPuniname26 :: Maybe (Tree ByteString)
    , _glslTOPacsize3 :: Maybe (Tree Int)
    , _glslTOPcustomdepth :: Maybe (Tree Int)
    , _glslTOPmatuniname3 :: Maybe (Tree ByteString)
    , _glslTOPacbinding2 :: Maybe (Tree Int)
    , _glslTOPchoparraytype5 :: Maybe (Tree Int)
    , _glslTOPnval :: Maybe (Tree Int)
    , _glslTOPmode :: Maybe (Tree Int)
    , _glslTOPaspect2 :: Maybe (Tree Float)
    , _glslTOPformat :: Maybe (Tree Int)
    , _glslTOPvalue29 :: Vec4
    , _glslTOPacinitval3 :: Maybe (Tree Int)
    , _glslTOPchopuniname3 :: Maybe (Tree ByteString)
    , _glslTOPcomputedat :: Maybe (Tree DAT)
    , _glslTOPacchopval0 :: Maybe (Tree CHOP)
    , _glslTOPpixeldat :: Maybe (Tree DAT)
    , _glslTOPvalue20 :: Vec4
    , _glslTOPvalue25 :: Vec4
    , _glslTOPchoparraytype6 :: Maybe (Tree Int)
    , _glslTOPchoparraytype9 :: Maybe (Tree Int)
    , _glslTOPtype :: Maybe (Tree Int)
    , _glslTOPacsingleval0 :: Maybe (Tree Int)
    , _glslTOPchopuniname6 :: Maybe (Tree ByteString)
    , _glslTOPuniname17 :: Maybe (Tree ByteString)
    , _glslTOPuniname8 :: Maybe (Tree ByteString)
    , _glslTOPchopuniname5 :: Maybe (Tree ByteString)
    , _glslTOPmatuniname7 :: Maybe (Tree ByteString)
    , _glslTOPchop7 :: Maybe (Tree CHOP)
    , _glslTOPchop9 :: Maybe (Tree CHOP)
    , _glslTOPenablevectorpage3 :: Maybe (Tree Bool)
    , _glslTOPchop0 :: Maybe (Tree CHOP)
    , _glslTOPuniname19 :: Maybe (Tree ByteString)
    , _glslTOPvalue11 :: Vec4
    , _glslTOPuniname7 :: Maybe (Tree ByteString)
    , _glslTOPloaduniformnames :: Maybe (Tree Bool)
    , _glslTOPuniname29 :: Maybe (Tree ByteString)
    , _glslTOPvalue5 :: Vec4
    , _glslTOPchop1 :: Maybe (Tree CHOP)
    , _glslTOPvalue9 :: Vec4
    , _glslTOPchop4 :: Maybe (Tree CHOP)
    , _glslTOPmatuniname9 :: Maybe (Tree ByteString)
    , _glslTOPdispatchsizez :: Maybe (Tree Int)
    , _glslTOPchopunitype5 :: Maybe (Tree Int)
    , _glslTOPchoparraytype7 :: Maybe (Tree Int)
    , _glslTOPinputfiltertype :: Maybe (Tree Int)
    , _glslTOPmatuniname4 :: Maybe (Tree ByteString)
    , _glslTOPchopunitype1 :: Maybe (Tree Int)
    , _glslTOPmatuniname8 :: Maybe (Tree ByteString)
    , _glslTOPvalue26 :: Vec4
    , _glslTOPuniname21 :: Maybe (Tree ByteString)
    , _glslTOPvalue28 :: Vec4
    , _glslTOPacsingleval2 :: Maybe (Tree Int)
    , _glslTOPvalue14 :: Vec4
    , _glslTOPuniname24 :: Maybe (Tree ByteString)
    , _glslTOPacbinding0 :: Maybe (Tree Int)
    , _glslTOPuniname16 :: Maybe (Tree ByteString)
    , _glslTOPchoparraytype3 :: Maybe (Tree Int)
    , _glslTOPnpasses :: Maybe (Tree Int)
    , _glslTOPchop8 :: Maybe (Tree CHOP)
    , _glslTOPacchopval1 :: Maybe (Tree CHOP)
    , _glslTOPacchopval3 :: Maybe (Tree CHOP)
    , _glslTOPinputextenduv :: Maybe (Tree Int)
    , _glslTOPvalue22 :: Vec4
    , _glslTOPoutputresolution :: Maybe (Tree Int)
    , _glslTOPacsize2 :: Maybe (Tree Int)
    , _glslTOPmatuniname0 :: Maybe (Tree ByteString)
    , _glslTOPmatuniname6 :: Maybe (Tree ByteString)
    , _glslTOPacbinding1 :: Maybe (Tree Int)
    , _glslTOPuniname15 :: Maybe (Tree ByteString)
    , _glslTOPvalue1 :: Vec4
    , _glslTOPvalue16 :: Vec4
    , _glslTOPmatuniname5 :: Maybe (Tree ByteString)
    , _glslTOPdispatchsizex :: Maybe (Tree Int)
    , _glslTOPvertexdat :: Maybe (Tree DAT)
    , _glslTOPchoparraytype2 :: Maybe (Tree Int)
    , _glslTOPuniname18 :: Maybe (Tree ByteString)
    , _glslTOPchopunitype7 :: Maybe (Tree Int)
    , _glslTOPuniname6 :: Maybe (Tree ByteString)
    , _glslTOPvalue7 :: Vec4
    , _glslTOPuniname22 :: Maybe (Tree ByteString)
    , _glslTOPvalue18 :: Vec4
    , _glslTOPacsingleval3 :: Maybe (Tree Int)
    , _glslTOPvalue12 :: Vec4
    , _glslTOPchoparraytype0 :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | CrossTOP {
    _crossTOPaspect2 :: Maybe (Tree Float)
    , _crossTOPformat :: Maybe (Tree Int)
    , _crossTOPinputfiltertype :: Maybe (Tree Int)
    , _crossTOPchanmask :: Maybe (Tree Int)
    , _crossTOPoutputresolution :: Maybe (Tree Int)
    , _crossTOPfillmode :: Maybe (Tree Int)
    , _crossTOPresolutionw :: Maybe (Tree Int)
    , _crossTOParmenu :: Maybe (Tree Int)
    , _crossTOPfiltertype :: Maybe (Tree Int)
    , _crossTOPr :: Maybe (Tree Float)
    , _crossTOPextend :: Maybe (Tree Int)
    , _crossTOPresmult :: Maybe (Tree Bool)
    , _crossTOPpunit :: Maybe (Tree Int)
    , _crossTOPs :: Vec2
    , _crossTOPresmenu :: Maybe (Tree Int)
    , _crossTOPp :: Vec2
    , _crossTOPcross :: Maybe (Tree Float)
    , _crossTOPsize :: Maybe (Tree Int)
    , _crossTOPresolutionh :: Maybe (Tree Int)
    , _crossTOPtunit :: Maybe (Tree Int)
    , _crossTOPprefit :: Maybe (Tree Int)
    , _crossTOPnpasses :: Maybe (Tree Int)
    , _crossTOPaspect1 :: Maybe (Tree Float)
    , _crossTOPt :: Vec2
    , _crossTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | InTOP {
    _inTOPresmult :: Maybe (Tree Bool)
    , _inTOPaspect2 :: Maybe (Tree Float)
    , _inTOPformat :: Maybe (Tree Int)
    , _inTOPresmenu :: Maybe (Tree Int)
    , _inTOPnpasses :: Maybe (Tree Int)
    , _inTOPinputfiltertype :: Maybe (Tree Int)
    , _inTOPchanmask :: Maybe (Tree Int)
    , _inTOPoutputresolution :: Maybe (Tree Int)
    , _inTOPfillmode :: Maybe (Tree Int)
    , _inTOPresolutionw :: Maybe (Tree Int)
    , _inTOParmenu :: Maybe (Tree Int)
    , _inTOPfiltertype :: Maybe (Tree Int)
    , _inTOPaspect1 :: Maybe (Tree Float)
    , _inTOPlabel :: Maybe (Tree ByteString)
    , _inTOPresolutionh :: Maybe (Tree Int)
    , _inTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | LayoutTOP {
    _layoutTOPaspect2 :: Maybe (Tree Float)
    , _layoutTOPfit :: Maybe (Tree Int)
    , _layoutTOPalign :: Maybe (Tree Int)
    , _layoutTOPscaleres :: Maybe (Tree Bool)
    , _layoutTOPinputfiltertype :: Maybe (Tree Int)
    , _layoutTOPchanmask :: Maybe (Tree Int)
    , _layoutTOPoutputresolution :: Maybe (Tree Int)
    , _layoutTOPfillmode :: Maybe (Tree Int)
    , _layoutTOPresolutionw :: Maybe (Tree Int)
    , _layoutTOParmenu :: Maybe (Tree Int)
    , _layoutTOPtop :: Maybe (Tree TOP)
    , _layoutTOPfiltertype :: Maybe (Tree Int)
    , _layoutTOPformat :: Maybe (Tree Int)
    , _layoutTOPbgcolor :: Vec4
    , _layoutTOPmaxcols :: Maybe (Tree Int)
    , _layoutTOPresmult :: Maybe (Tree Bool)
    , _layoutTOPresmenu :: Maybe (Tree Int)
    , _layoutTOPresolutionh :: Maybe (Tree Int)
    , _layoutTOPnpasses :: Maybe (Tree Int)
    , _layoutTOPfillbg :: Maybe (Tree Bool)
    , _layoutTOPaspect1 :: Maybe (Tree Float)
    , _layoutTOPmaxrows :: Maybe (Tree Int)
    , _layoutTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ScreenTOP {
    _screenTOPaspect2 :: Maybe (Tree Float)
    , _screenTOPformat :: Maybe (Tree Int)
    , _screenTOPextend :: Maybe (Tree Int)
    , _screenTOPchanmask :: Maybe (Tree Int)
    , _screenTOPoutputresolution :: Maybe (Tree Int)
    , _screenTOPfillmode :: Maybe (Tree Int)
    , _screenTOPresolutionw :: Maybe (Tree Int)
    , _screenTOParmenu :: Maybe (Tree Int)
    , _screenTOPfiltertype :: Maybe (Tree Int)
    , _screenTOPinputfiltertype :: Maybe (Tree Int)
    , _screenTOPresmult :: Maybe (Tree Bool)
    , _screenTOPpunit :: Maybe (Tree Int)
    , _screenTOPs :: Vec2
    , _screenTOPresmenu :: Maybe (Tree Int)
    , _screenTOPp :: Vec2
    , _screenTOPsize :: Maybe (Tree Int)
    , _screenTOPnpasses :: Maybe (Tree Int)
    , _screenTOPoutputaspect :: Maybe (Tree Int)
    , _screenTOPresolutionh :: Maybe (Tree Int)
    , _screenTOPtunit :: Maybe (Tree Int)
    , _screenTOPprefit :: Maybe (Tree Int)
    , _screenTOPr :: Maybe (Tree Float)
    , _screenTOPaspect1 :: Maybe (Tree Float)
    , _screenTOPjustifyh :: Maybe (Tree Int)
    , _screenTOPt :: Vec2
    , _screenTOPjustifyv :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | FlipTOP {
    _flipTOPresmult :: Maybe (Tree Bool)
    , _flipTOPaspect2 :: Maybe (Tree Float)
    , _flipTOPformat :: Maybe (Tree Int)
    , _flipTOPresmenu :: Maybe (Tree Int)
    , _flipTOPnpasses :: Maybe (Tree Int)
    , _flipTOPinputfiltertype :: Maybe (Tree Int)
    , _flipTOPchanmask :: Maybe (Tree Int)
    , _flipTOPoutputresolution :: Maybe (Tree Int)
    , _flipTOPfillmode :: Maybe (Tree Int)
    , _flipTOPflop :: Maybe (Tree Int)
    , _flipTOPresolutionh :: Maybe (Tree Int)
    , _flipTOParmenu :: Maybe (Tree Int)
    , _flipTOPfiltertype :: Maybe (Tree Int)
    , _flipTOPaspect1 :: Maybe (Tree Float)
    , _flipTOPflipy :: Maybe (Tree Bool)
    , _flipTOPflipx :: Maybe (Tree Bool)
    , _flipTOPresolutionw :: Maybe (Tree Int)
    , _flipTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | DirectxinTOP {
    _directxinTOPresmult :: Maybe (Tree Bool)
    , _directxinTOPaspect2 :: Maybe (Tree Float)
    , _directxinTOPformat :: Maybe (Tree Int)
    , _directxinTOPresmenu :: Maybe (Tree Int)
    , _directxinTOPnpasses :: Maybe (Tree Int)
    , _directxinTOPinputfiltertype :: Maybe (Tree Int)
    , _directxinTOPchanmask :: Maybe (Tree Int)
    , _directxinTOPoutputresolution :: Maybe (Tree Int)
    , _directxinTOPfillmode :: Maybe (Tree Int)
    , _directxinTOPresolutionw :: Maybe (Tree Int)
    , _directxinTOPhandle :: Maybe (Tree ByteString)
    , _directxinTOParmenu :: Maybe (Tree Int)
    , _directxinTOPfiltertype :: Maybe (Tree Int)
    , _directxinTOPaspect1 :: Maybe (Tree Float)
    , _directxinTOPresolutionh :: Maybe (Tree Int)
    , _directxinTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | CornerpinTOP {
    _cornerpinTOPextractp42 :: Maybe (Tree Float)
    , _cornerpinTOPgridrefine :: Maybe (Tree Int)
    , _cornerpinTOPaspect2 :: Maybe (Tree Float)
    , _cornerpinTOPinputfiltertype :: Maybe (Tree Int)
    , _cornerpinTOPformat :: Maybe (Tree Int)
    , _cornerpinTOPextractp22 :: Maybe (Tree Float)
    , _cornerpinTOPextractp12 :: Maybe (Tree Float)
    , _cornerpinTOPextractp11 :: Maybe (Tree Float)
    , _cornerpinTOPoutputresolution :: Maybe (Tree Int)
    , _cornerpinTOPresmult :: Maybe (Tree Bool)
    , _cornerpinTOPresolutionw :: Maybe (Tree Int)
    , _cornerpinTOPfiltertype :: Maybe (Tree Int)
    , _cornerpinTOParmenu :: Maybe (Tree Int)
    , _cornerpinTOPpinp12 :: Maybe (Tree Float)
    , _cornerpinTOPpinp32 :: Maybe (Tree Float)
    , _cornerpinTOPpinp2unit :: Maybe (Tree Int)
    , _cornerpinTOPbgcolor :: Vec4
    , _cornerpinTOPchanmask :: Maybe (Tree Int)
    , _cornerpinTOPextractp2unit :: Maybe (Tree Int)
    , _cornerpinTOPpinp4unit :: Maybe (Tree Int)
    , _cornerpinTOPextractp3unit :: Maybe (Tree Int)
    , _cornerpinTOPextractp41 :: Maybe (Tree Float)
    , _cornerpinTOPresmenu :: Maybe (Tree Int)
    , _cornerpinTOPnpasses :: Maybe (Tree Int)
    , _cornerpinTOPpinp41 :: Maybe (Tree Float)
    , _cornerpinTOPpinp11 :: Maybe (Tree Float)
    , _cornerpinTOPpinp21 :: Maybe (Tree Float)
    , _cornerpinTOPfillmode :: Maybe (Tree Int)
    , _cornerpinTOPpinp3unit :: Maybe (Tree Int)
    , _cornerpinTOPextractp4unit :: Maybe (Tree Int)
    , _cornerpinTOPresolutionh :: Maybe (Tree Int)
    , _cornerpinTOPpinp42 :: Maybe (Tree Float)
    , _cornerpinTOPextractp1unit :: Maybe (Tree Int)
    , _cornerpinTOPoutputaspect :: Maybe (Tree Int)
    , _cornerpinTOPextractp32 :: Maybe (Tree Float)
    , _cornerpinTOPpinp31 :: Maybe (Tree Float)
    , _cornerpinTOPaspect1 :: Maybe (Tree Float)
    , _cornerpinTOPextractp21 :: Maybe (Tree Float)
    , _cornerpinTOPextractp31 :: Maybe (Tree Float)
    , _cornerpinTOPpinp1unit :: Maybe (Tree Int)
    , _cornerpinTOPextend :: Maybe (Tree Int)
    , _cornerpinTOPpinp22 :: Maybe (Tree Float)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | OpviewerTOP {
    _opviewerTOPpreservealpha :: Maybe (Tree Bool)
    , _opviewerTOPresmult :: Maybe (Tree Bool)
    , _opviewerTOPaspect2 :: Maybe (Tree Float)
    , _opviewerTOParmenu :: Maybe (Tree Int)
    , _opviewerTOPresmenu :: Maybe (Tree Int)
    , _opviewerTOPnpasses :: Maybe (Tree Int)
    , _opviewerTOPinputfiltertype :: Maybe (Tree Int)
    , _opviewerTOPchanmask :: Maybe (Tree Int)
    , _opviewerTOPoutputresolution :: Maybe (Tree Int)
    , _opviewerTOPfillmode :: Maybe (Tree Int)
    , _opviewerTOPformat :: Maybe (Tree Int)
    , _opviewerTOPresolutionh :: Maybe (Tree Int)
    , _opviewerTOPfiltertype :: Maybe (Tree Int)
    , _opviewerTOPaspect1 :: Maybe (Tree Float)
    , _opviewerTOPallowpanel :: Maybe (Tree Bool)
    , _opviewerTOPresolutionw :: Maybe (Tree Int)
    , _opviewerTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ViosoTOP {
    _viosoTOParmenu :: Maybe (Tree Int)
    , _viosoTOPresmult :: Maybe (Tree Bool)
    , _viosoTOPaspect2 :: Maybe (Tree Float)
    , _viosoTOPformat :: Maybe (Tree Int)
    , _viosoTOPfilter :: Maybe (Tree Int)
    , _viosoTOPresmenu :: Maybe (Tree Int)
    , _viosoTOPnpasses :: Maybe (Tree Int)
    , _viosoTOPinputfiltertype :: Maybe (Tree Int)
    , _viosoTOPchanmask :: Maybe (Tree Int)
    , _viosoTOPoutputresolution :: Maybe (Tree Int)
    , _viosoTOPfillmode :: Maybe (Tree Int)
    , _viosoTOPresolutionh :: Maybe (Tree Int)
    , _viosoTOPprojectorindex :: Maybe (Tree Int)
    , _viosoTOPconfigfile :: Maybe (Tree ByteString)
    , _viosoTOPaspect1 :: Maybe (Tree Float)
    , _viosoTOPresolutionw :: Maybe (Tree Int)
    , _viosoTOPoutputaspect :: Maybe (Tree Int)
    , _viosoTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | LookupTOP {
    _lookupTOPdarkuvunit :: Maybe (Tree Int)
    , _lookupTOPaspect2 :: Maybe (Tree Float)
    , _lookupTOPclampchopvalues :: Maybe (Tree Bool)
    , _lookupTOPformat :: Maybe (Tree Int)
    , _lookupTOPlightuv2 :: Maybe (Tree Float)
    , _lookupTOPinputfiltertype :: Maybe (Tree Int)
    , _lookupTOPdarkuv2 :: Maybe (Tree Float)
    , _lookupTOPoutputresolution :: Maybe (Tree Int)
    , _lookupTOPfillmode :: Maybe (Tree Int)
    , _lookupTOPresolutionw :: Maybe (Tree Int)
    , _lookupTOParmenu :: Maybe (Tree Int)
    , _lookupTOPusesourceluminance :: Maybe (Tree Bool)
    , _lookupTOPdisplaylookup :: Maybe (Tree Bool)
    , _lookupTOPlightuv1 :: Maybe (Tree Float)
    , _lookupTOPchop :: Maybe (Tree CHOP)
    , _lookupTOPdarkuv1 :: Maybe (Tree Float)
    , _lookupTOPresmult :: Maybe (Tree Bool)
    , _lookupTOPresmenu :: Maybe (Tree Int)
    , _lookupTOPchanmask :: Maybe (Tree Int)
    , _lookupTOPresolutionh :: Maybe (Tree Int)
    , _lookupTOPnpasses :: Maybe (Tree Int)
    , _lookupTOPlightuvunit :: Maybe (Tree Int)
    , _lookupTOPaspect1 :: Maybe (Tree Float)
    , _lookupTOPmethod :: Maybe (Tree Int)
    , _lookupTOPoutputaspect :: Maybe (Tree Int)
    , _lookupTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | VideodeviceoutTOP {
    _videodeviceoutTOPfirstfield :: Maybe (Tree Bool)
    , _videodeviceoutTOPtransfermode :: Maybe (Tree Int)
    , _videodeviceoutTOPactive :: Maybe (Tree Bool)
    , _videodeviceoutTOPinputfiltertype :: Maybe (Tree Int)
    , _videodeviceoutTOPchanmask :: Maybe (Tree Int)
    , _videodeviceoutTOPoutputresolution :: Maybe (Tree Int)
    , _videodeviceoutTOPfillmode :: Maybe (Tree Int)
    , _videodeviceoutTOPbufferlength :: Maybe (Tree Float)
    , _videodeviceoutTOPresolutionw :: Maybe (Tree Int)
    , _videodeviceoutTOPmanualfield :: Maybe (Tree Bool)
    , _videodeviceoutTOParmenu :: Maybe (Tree Int)
    , _videodeviceoutTOPfiltertype :: Maybe (Tree Int)
    , _videodeviceoutTOPaspect2 :: Maybe (Tree Float)
    , _videodeviceoutTOPformat :: Maybe (Tree Int)
    , _videodeviceoutTOPsignalformat :: Maybe (Tree ByteString)
    , _videodeviceoutTOPresmult :: Maybe (Tree Bool)
    , _videodeviceoutTOPlibrary :: Maybe (Tree Int)
    , _videodeviceoutTOPresmenu :: Maybe (Tree Int)
    , _videodeviceoutTOPoutputpixelformat :: Maybe (Tree Int)
    , _videodeviceoutTOPaudiobitdepth :: Maybe (Tree Int)
    , _videodeviceoutTOPresolutionh :: Maybe (Tree Int)
    , _videodeviceoutTOPnpasses :: Maybe (Tree Int)
    , _videodeviceoutTOPdevice :: Maybe (Tree ByteString)
    , _videodeviceoutTOPaspect1 :: Maybe (Tree Float)
    , _videodeviceoutTOPchop :: Maybe (Tree CHOP)
    , _videodeviceoutTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | DepthTOP {
    _depthTOPrangefrom1 :: Maybe (Tree Float)
    , _depthTOPaspect2 :: Maybe (Tree Float)
    , _depthTOPformat :: Maybe (Tree Int)
    , _depthTOPinputfiltertype :: Maybe (Tree Int)
    , _depthTOPpixelformat :: Maybe (Tree Int)
    , _depthTOPoutputresolution :: Maybe (Tree Int)
    , _depthTOPfillmode :: Maybe (Tree Int)
    , _depthTOPresolutionw :: Maybe (Tree Int)
    , _depthTOPclamp :: Maybe (Tree Bool)
    , _depthTOParmenu :: Maybe (Tree Int)
    , _depthTOPfiltertype :: Maybe (Tree Int)
    , _depthTOPcameraindex :: Maybe (Tree Int)
    , _depthTOPresmult :: Maybe (Tree Bool)
    , _depthTOPdepthspace :: Maybe (Tree Int)
    , _depthTOPresmenu :: Maybe (Tree Int)
    , _depthTOPchanmask :: Maybe (Tree Int)
    , _depthTOPgamma :: Maybe (Tree Float)
    , _depthTOPrangeto1 :: Maybe (Tree Float)
    , _depthTOPresolutionh :: Maybe (Tree Int)
    , _depthTOPpeellayerindex :: Maybe (Tree Int)
    , _depthTOPrangeto2 :: Maybe (Tree Float)
    , _depthTOPnpasses :: Maybe (Tree Int)
    , _depthTOPrangefrom2 :: Maybe (Tree Float)
    , _depthTOPaspect1 :: Maybe (Tree Float)
    , _depthTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | VideostreaminTOP {
    _videostreaminTOPaspect2 :: Maybe (Tree Float)
    , _videostreaminTOPformat :: Maybe (Tree Int)
    , _videostreaminTOPprereadframes :: Maybe (Tree Int)
    , _videostreaminTOPinputfiltertype :: Maybe (Tree Int)
    , _videostreaminTOPchanmask :: Maybe (Tree Int)
    , _videostreaminTOPbottomhalfalpha :: Maybe (Tree Bool)
    , _videostreaminTOPfillmode :: Maybe (Tree Int)
    , _videostreaminTOPresolutionw :: Maybe (Tree Int)
    , _videostreaminTOParmenu :: Maybe (Tree Int)
    , _videostreaminTOPdeinterlace :: Maybe (Tree Int)
    , _videostreaminTOPprecedence :: Maybe (Tree Int)
    , _videostreaminTOPasyncupload :: Maybe (Tree Bool)
    , _videostreaminTOPnetworkqueuesize :: Maybe (Tree Int)
    , _videostreaminTOPresmult :: Maybe (Tree Bool)
    , _videostreaminTOPresmenu :: Maybe (Tree Int)
    , _videostreaminTOPreloadpulse :: Maybe (Tree Bool)
    , _videostreaminTOPurl :: Maybe (Tree ByteString)
    , _videostreaminTOPresolutionh :: Maybe (Tree Int)
    , _videostreaminTOPoutputresolution :: Maybe (Tree Int)
    , _videostreaminTOPplay :: Maybe (Tree Bool)
    , _videostreaminTOPnpasses :: Maybe (Tree Int)
    , _videostreaminTOPnetworkbuffersize :: Maybe (Tree Float)
    , _videostreaminTOPaspect1 :: Maybe (Tree Float)
    , _videostreaminTOPmaxdecodecpus :: Maybe (Tree Int)
    , _videostreaminTOPoutputaspect :: Maybe (Tree Int)
    , _videostreaminTOPreload :: Maybe (Tree Bool)
    , _videostreaminTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | SharedmemoutTOP {
    _sharedmemoutTOPresmult :: Maybe (Tree Bool)
    , _sharedmemoutTOPaspect2 :: Maybe (Tree Float)
    , _sharedmemoutTOPformat :: Maybe (Tree Int)
    , _sharedmemoutTOPactive :: Maybe (Tree Bool)
    , _sharedmemoutTOPdownloadtype :: Maybe (Tree Int)
    , _sharedmemoutTOPnpasses :: Maybe (Tree Int)
    , _sharedmemoutTOPmemtype :: Maybe (Tree Int)
    , _sharedmemoutTOPinputfiltertype :: Maybe (Tree Int)
    , _sharedmemoutTOPresmenu :: Maybe (Tree Int)
    , _sharedmemoutTOPoutputresolution :: Maybe (Tree Int)
    , _sharedmemoutTOPfillmode :: Maybe (Tree Int)
    , _sharedmemoutTOPname :: Maybe (Tree ByteString)
    , _sharedmemoutTOPresolutionh :: Maybe (Tree Int)
    , _sharedmemoutTOPchanmask :: Maybe (Tree Int)
    , _sharedmemoutTOParmenu :: Maybe (Tree Int)
    , _sharedmemoutTOPfiltertype :: Maybe (Tree Int)
    , _sharedmemoutTOPaspect1 :: Maybe (Tree Float)
    , _sharedmemoutTOPresolutionw :: Maybe (Tree Int)
    , _sharedmemoutTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ChoptoTOP {
    _choptoTOPresmult :: Maybe (Tree Bool)
    , _choptoTOPaspect2 :: Maybe (Tree Float)
    , _choptoTOPformat :: Maybe (Tree Int)
    , _choptoTOPresmenu :: Maybe (Tree Int)
    , _choptoTOPdataformat :: Maybe (Tree Int)
    , _choptoTOPchanmask :: Maybe (Tree Int)
    , _choptoTOPinputfiltertype :: Maybe (Tree Int)
    , _choptoTOPnpasses :: Maybe (Tree Int)
    , _choptoTOPoutputresolution :: Maybe (Tree Int)
    , _choptoTOPfillmode :: Maybe (Tree Int)
    , _choptoTOPresolutionh :: Maybe (Tree Int)
    , _choptoTOPclamp :: Maybe (Tree Bool)
    , _choptoTOParmenu :: Maybe (Tree Int)
    , _choptoTOPfiltertype :: Maybe (Tree Int)
    , _choptoTOPaspect1 :: Maybe (Tree Float)
    , _choptoTOPchop :: Maybe (Tree CHOP)
    , _choptoTOPresolutionw :: Maybe (Tree Int)
    , _choptoTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | OpenvrTOP {
    _openvrTOPresmult :: Maybe (Tree Bool)
    , _openvrTOPaspect2 :: Maybe (Tree Float)
    , _openvrTOPformat :: Maybe (Tree Int)
    , _openvrTOPactive :: Maybe (Tree Bool)
    , _openvrTOPresmenu :: Maybe (Tree Int)
    , _openvrTOPnpasses :: Maybe (Tree Int)
    , _openvrTOPinputfiltertype :: Maybe (Tree Int)
    , _openvrTOPchanmask :: Maybe (Tree Int)
    , _openvrTOPoutputresolution :: Maybe (Tree Int)
    , _openvrTOPfillmode :: Maybe (Tree Int)
    , _openvrTOPresolutionw :: Maybe (Tree Int)
    , _openvrTOParmenu :: Maybe (Tree Int)
    , _openvrTOPfiltertype :: Maybe (Tree Int)
    , _openvrTOPaspect1 :: Maybe (Tree Float)
    , _openvrTOPresolutionh :: Maybe (Tree Int)
    , _openvrTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ChannelmixTOP {
    _channelmixTOPred3 :: Maybe (Tree Float)
    , _channelmixTOPaspect2 :: Maybe (Tree Float)
    , _channelmixTOPformat :: Maybe (Tree Int)
    , _channelmixTOPblue2 :: Maybe (Tree Float)
    , _channelmixTOPalpha4 :: Maybe (Tree Float)
    , _channelmixTOPinputfiltertype :: Maybe (Tree Int)
    , _channelmixTOPaspect1 :: Maybe (Tree Float)
    , _channelmixTOPoutputresolution :: Maybe (Tree Int)
    , _channelmixTOPresmult :: Maybe (Tree Bool)
    , _channelmixTOPalpha3 :: Maybe (Tree Float)
    , _channelmixTOPresolutionw :: Maybe (Tree Int)
    , _channelmixTOPgreen2 :: Maybe (Tree Float)
    , _channelmixTOPconstant2 :: Maybe (Tree Float)
    , _channelmixTOPgreen1 :: Maybe (Tree Float)
    , _channelmixTOParmenu :: Maybe (Tree Int)
    , _channelmixTOPconstant1 :: Maybe (Tree Float)
    , _channelmixTOPconstant3 :: Maybe (Tree Float)
    , _channelmixTOPred4 :: Maybe (Tree Float)
    , _channelmixTOPgreen3 :: Maybe (Tree Float)
    , _channelmixTOPresolutionh :: Maybe (Tree Int)
    , _channelmixTOPchanmask :: Maybe (Tree Int)
    , _channelmixTOPalpha1 :: Maybe (Tree Float)
    , _channelmixTOPblue1 :: Maybe (Tree Float)
    , _channelmixTOPalpha2 :: Maybe (Tree Float)
    , _channelmixTOPresmenu :: Maybe (Tree Int)
    , _channelmixTOPconstant4 :: Maybe (Tree Float)
    , _channelmixTOPfillmode :: Maybe (Tree Int)
    , _channelmixTOPblue3 :: Maybe (Tree Float)
    , _channelmixTOPgreen4 :: Maybe (Tree Float)
    , _channelmixTOPnpasses :: Maybe (Tree Int)
    , _channelmixTOPred2 :: Maybe (Tree Float)
    , _channelmixTOPred1 :: Maybe (Tree Float)
    , _channelmixTOPblue4 :: Maybe (Tree Float)
    , _channelmixTOPoutputaspect :: Maybe (Tree Int)
    , _channelmixTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | NoiseTOP {
    _noiseTOPoutputaspect :: Maybe (Tree Int)
    , _noiseTOPrough :: Maybe (Tree Float)
    , _noiseTOPaspect2 :: Maybe (Tree Float)
    , _noiseTOPformat :: Maybe (Tree Int)
    , _noiseTOPinputscale :: Maybe (Tree Float)
    , _noiseTOPharmon :: Maybe (Tree Int)
    , _noiseTOPoffset :: Maybe (Tree Float)
    , _noiseTOPalpha :: Maybe (Tree Int)
    , _noiseTOPresmenu :: Maybe (Tree Int)
    , _noiseTOPoutputresolution :: Maybe (Tree Int)
    , _noiseTOPaspect1 :: Maybe (Tree Float)
    , _noiseTOPresolutionw :: Maybe (Tree Int)
    , _noiseTOParmenu :: Maybe (Tree Int)
    , _noiseTOPfiltertype :: Maybe (Tree Int)
    , _noiseTOPrgb :: Maybe (Tree Int)
    , _noiseTOPxord :: Maybe (Tree Int)
    , _noiseTOPchanmask :: Maybe (Tree Int)
    , _noiseTOPr :: Vec3
    , _noiseTOPaspectcorrect :: Maybe (Tree Bool)
    , _noiseTOPresmult :: Maybe (Tree Bool)
    , _noiseTOPgain :: Maybe (Tree Float)
    , _noiseTOPtype :: Maybe (Tree Int)
    , _noiseTOPnoisescale :: Maybe (Tree Float)
    , _noiseTOPs :: Vec3
    , _noiseTOPperiod :: Maybe (Tree Float)
    , _noiseTOPt4d :: Maybe (Tree Float)
    , _noiseTOPp :: Vec3
    , _noiseTOPfillmode :: Maybe (Tree Int)
    , _noiseTOPdither :: Maybe (Tree Bool)
    , _noiseTOPspread :: Maybe (Tree Float)
    , _noiseTOPresolutionh :: Maybe (Tree Int)
    , _noiseTOPs4d :: Maybe (Tree Float)
    , _noiseTOPseed :: Maybe (Tree Float)
    , _noiseTOPnpasses :: Maybe (Tree Int)
    , _noiseTOPrord :: Maybe (Tree Int)
    , _noiseTOPinputfiltertype :: Maybe (Tree Int)
    , _noiseTOPamp :: Maybe (Tree Float)
    , _noiseTOPt :: Vec3
    , _noiseTOPexp :: Maybe (Tree Float)
    , _noiseTOPmono :: Maybe (Tree Bool)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | OculusriftTOP {
    _oculusriftTOPresmult :: Maybe (Tree Bool)
    , _oculusriftTOPaspect2 :: Maybe (Tree Float)
    , _oculusriftTOPformat :: Maybe (Tree Int)
    , _oculusriftTOPactive :: Maybe (Tree Bool)
    , _oculusriftTOPresmenu :: Maybe (Tree Int)
    , _oculusriftTOPnpasses :: Maybe (Tree Int)
    , _oculusriftTOPinputfiltertype :: Maybe (Tree Int)
    , _oculusriftTOPchanmask :: Maybe (Tree Int)
    , _oculusriftTOPoutputresolution :: Maybe (Tree Int)
    , _oculusriftTOPfillmode :: Maybe (Tree Int)
    , _oculusriftTOPdebugperfhud :: Maybe (Tree Int)
    , _oculusriftTOPresolutionw :: Maybe (Tree Int)
    , _oculusriftTOParmenu :: Maybe (Tree Int)
    , _oculusriftTOPfiltertype :: Maybe (Tree Int)
    , _oculusriftTOPaspect1 :: Maybe (Tree Float)
    , _oculusriftTOPresolutionh :: Maybe (Tree Int)
    , _oculusriftTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | TransformTOP {
    _transformTOPaspect2 :: Maybe (Tree Float)
    , _transformTOPformat :: Maybe (Tree Int)
    , _transformTOPextend :: Maybe (Tree Int)
    , _transformTOPchanmask :: Maybe (Tree Int)
    , _transformTOPoutputresolution :: Maybe (Tree Int)
    , _transformTOPfillmode :: Maybe (Tree Int)
    , _transformTOPgrowshrink :: Vec2
    , _transformTOPresolutionw :: Maybe (Tree Int)
    , _transformTOPmipmapbias :: Maybe (Tree Float)
    , _transformTOParmenu :: Maybe (Tree Int)
    , _transformTOPlimittiles :: Maybe (Tree Bool)
    , _transformTOPtileu2 :: Maybe (Tree Float)
    , _transformTOPtileu1 :: Maybe (Tree Float)
    , _transformTOPbgcolor :: Vec4
    , _transformTOProtate :: Maybe (Tree Float)
    , _transformTOPxord :: Maybe (Tree Int)
    , _transformTOPinputfiltertype :: Maybe (Tree Int)
    , _transformTOPresmult :: Maybe (Tree Bool)
    , _transformTOPpunit :: Maybe (Tree Int)
    , _transformTOPs :: Vec2
    , _transformTOPresmenu :: Maybe (Tree Int)
    , _transformTOPp :: Vec2
    , _transformTOPtilev2 :: Maybe (Tree Float)
    , _transformTOPresolutionh :: Maybe (Tree Int)
    , _transformTOPtunit :: Maybe (Tree Int)
    , _transformTOPcompover :: Maybe (Tree Bool)
    , _transformTOPnpasses :: Maybe (Tree Int)
    , _transformTOPaspect1 :: Maybe (Tree Float)
    , _transformTOPt :: Vec2
    , _transformTOPtilev1 :: Maybe (Tree Float)
    , _transformTOPoutputaspect :: Maybe (Tree Int)
    , _transformTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | MathTOP {
    _mathTOPaspect2 :: Maybe (Tree Float)
    , _mathTOPformat :: Maybe (Tree Int)
    , _mathTOPpostoff :: Maybe (Tree Float)
    , _mathTOPinputfiltertype :: Maybe (Tree Int)
    , _mathTOPchanmask :: Maybe (Tree Int)
    , _mathTOPoutputresolution :: Maybe (Tree Int)
    , _mathTOPfillmode :: Maybe (Tree Int)
    , _mathTOPresolutionw :: Maybe (Tree Int)
    , _mathTOParmenu :: Maybe (Tree Int)
    , _mathTOPfiltertype :: Maybe (Tree Int)
    , _mathTOPfromrange1 :: Maybe (Tree Float)
    , _mathTOPinteger :: Maybe (Tree Int)
    , _mathTOPresmult :: Maybe (Tree Bool)
    , _mathTOPgain :: Maybe (Tree Float)
    , _mathTOPinputmask :: Maybe (Tree Int)
    , _mathTOPresmenu :: Maybe (Tree Int)
    , _mathTOPtorange1 :: Maybe (Tree Float)
    , _mathTOPfromrange2 :: Maybe (Tree Float)
    , _mathTOPpostop :: Maybe (Tree Int)
    , _mathTOPoutputchannels :: Maybe (Tree Int)
    , _mathTOPchanop :: Maybe (Tree Int)
    , _mathTOPresolutionh :: Maybe (Tree Int)
    , _mathTOPnpasses :: Maybe (Tree Int)
    , _mathTOPpreop :: Maybe (Tree Int)
    , _mathTOPpreoff :: Maybe (Tree Float)
    , _mathTOPaspect1 :: Maybe (Tree Float)
    , _mathTOPop :: Maybe (Tree Int)
    , _mathTOPoutputaspect :: Maybe (Tree Int)
    , _mathTOPtorange2 :: Maybe (Tree Float)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | DirectxoutTOP {
    _directxoutTOPresmult :: Maybe (Tree Bool)
    , _directxoutTOPqueuesize :: Maybe (Tree Int)
    , _directxoutTOPformat :: Maybe (Tree Int)
    , _directxoutTOPactive :: Maybe (Tree Bool)
    , _directxoutTOPresmenu :: Maybe (Tree Int)
    , _directxoutTOPnpasses :: Maybe (Tree Int)
    , _directxoutTOPinputfiltertype :: Maybe (Tree Int)
    , _directxoutTOPchanmask :: Maybe (Tree Int)
    , _directxoutTOPoutputresolution :: Maybe (Tree Int)
    , _directxoutTOPfillmode :: Maybe (Tree Int)
    , _directxoutTOPresolutionw :: Maybe (Tree Int)
    , _directxoutTOParmenu :: Maybe (Tree Int)
    , _directxoutTOPfiltertype :: Maybe (Tree Int)
    , _directxoutTOPaspect1 :: Maybe (Tree Float)
    , _directxoutTOPaspect2 :: Maybe (Tree Float)
    , _directxoutTOPresolutionh :: Maybe (Tree Int)
    , _directxoutTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ChromakeyTOP {
    _chromakeyTOPaspect2 :: Maybe (Tree Float)
    , _chromakeyTOPformat :: Maybe (Tree Int)
    , _chromakeyTOPrgbout :: Maybe (Tree Int)
    , _chromakeyTOPhuemax :: Maybe (Tree Float)
    , _chromakeyTOPaspect1 :: Maybe (Tree Float)
    , _chromakeyTOPoutputresolution :: Maybe (Tree Int)
    , _chromakeyTOPfillmode :: Maybe (Tree Int)
    , _chromakeyTOPresolutionw :: Maybe (Tree Int)
    , _chromakeyTOPvalmin :: Maybe (Tree Float)
    , _chromakeyTOParmenu :: Maybe (Tree Int)
    , _chromakeyTOPfiltertype :: Maybe (Tree Int)
    , _chromakeyTOPalphaout :: Maybe (Tree Int)
    , _chromakeyTOPinvert :: Maybe (Tree Float)
    , _chromakeyTOPresolutionh :: Maybe (Tree Int)
    , _chromakeyTOPssofthigh :: Maybe (Tree Float)
    , _chromakeyTOPinputfiltertype :: Maybe (Tree Int)
    , _chromakeyTOPhuemin :: Maybe (Tree Float)
    , _chromakeyTOPresmult :: Maybe (Tree Bool)
    , _chromakeyTOPssoftlow :: Maybe (Tree Float)
    , _chromakeyTOPresmenu :: Maybe (Tree Int)
    , _chromakeyTOPchanmask :: Maybe (Tree Int)
    , _chromakeyTOPhsofthigh :: Maybe (Tree Float)
    , _chromakeyTOPsatmax :: Maybe (Tree Float)
    , _chromakeyTOPvsofthigh :: Maybe (Tree Float)
    , _chromakeyTOPsatmin :: Maybe (Tree Float)
    , _chromakeyTOPvalmax :: Maybe (Tree Float)
    , _chromakeyTOPnpasses :: Maybe (Tree Int)
    , _chromakeyTOPvsoftlow :: Maybe (Tree Float)
    , _chromakeyTOPoutputaspect :: Maybe (Tree Int)
    , _chromakeyTOPhsoftlow :: Maybe (Tree Float)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | VideodeviceinTOP {
    _videodeviceinTOPlgamma :: Maybe (Tree Float)
    , _videodeviceinTOPaspect2 :: Maybe (Tree Float)
    , _videodeviceinTOPformat :: Maybe (Tree Int)
    , _videodeviceinTOPexposure :: Maybe (Tree Float)
    , _videodeviceinTOPinputfiltertype :: Maybe (Tree Int)
    , _videodeviceinTOPfillmode :: Maybe (Tree Int)
    , _videodeviceinTOPresolutionw :: Maybe (Tree Int)
    , _videodeviceinTOPprecedence :: Maybe (Tree Int)
    , _videodeviceinTOParmenu :: Maybe (Tree Int)
    , _videodeviceinTOPinputpixelformat :: Maybe (Tree Int)
    , _videodeviceinTOPfiltertype :: Maybe (Tree Int)
    , _videodeviceinTOPautogebias :: Maybe (Tree Float)
    , _videodeviceinTOPactive :: Maybe (Tree Bool)
    , _videodeviceinTOPgain :: Maybe (Tree Float)
    , _videodeviceinTOPcgamma :: Maybe (Tree Float)
    , _videodeviceinTOPlibrary :: Maybe (Tree Int)
    , _videodeviceinTOPresmenu :: Maybe (Tree Int)
    , _videodeviceinTOPchannel :: Maybe (Tree Int)
    , _videodeviceinTOPresolutionh :: Maybe (Tree Int)
    , _videodeviceinTOPnpasses :: Maybe (Tree Int)
    , _videodeviceinTOPaspect1 :: Maybe (Tree Float)
    , _videodeviceinTOPlimitedfps :: Maybe (Tree Float)
    , _videodeviceinTOPoutputaspect :: Maybe (Tree Int)
    , _videodeviceinTOPmaxsyncoffset :: Maybe (Tree Float)
    , _videodeviceinTOPtransfermode :: Maybe (Tree Int)
    , _videodeviceinTOPoptions :: Maybe (Tree Int)
    , _videodeviceinTOPsynctimeout :: Maybe (Tree Int)
    , _videodeviceinTOPspecifyip :: Maybe (Tree Bool)
    , _videodeviceinTOPoutputresolution :: Maybe (Tree Int)
    , _videodeviceinTOPsyncgroupindex :: Maybe (Tree Int)
    , _videodeviceinTOPquadlink :: Maybe (Tree Bool)
    , _videodeviceinTOPlimitfps :: Maybe (Tree Bool)
    , _videodeviceinTOPautowb :: Maybe (Tree Bool)
    , _videodeviceinTOPip :: Maybe (Tree ByteString)
    , _videodeviceinTOPautoge :: Maybe (Tree Bool)
    , _videodeviceinTOPresmult :: Maybe (Tree Bool)
    , _videodeviceinTOPsignalformat :: Maybe (Tree ByteString)
    , _videodeviceinTOPwbcoeffs :: Vec3
    , _videodeviceinTOPcapture :: Maybe (Tree Bool)
    , _videodeviceinTOPdevice :: Maybe (Tree ByteString)
    , _videodeviceinTOPchanmask :: Maybe (Tree Int)
    , _videodeviceinTOPdeinterlace :: Maybe (Tree Int)
    , _videodeviceinTOPcapturepulse :: Maybe (Tree Bool)
    , _videodeviceinTOPsyncinputs :: Maybe (Tree Bool)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | NdioutTOP {
    _ndioutTOParmenu :: Maybe (Tree Int)
    , _ndioutTOPresmult :: Maybe (Tree Bool)
    , _ndioutTOPaspect2 :: Maybe (Tree Float)
    , _ndioutTOPformat :: Maybe (Tree Int)
    , _ndioutTOPactive :: Maybe (Tree Bool)
    , _ndioutTOPresmenu :: Maybe (Tree Int)
    , _ndioutTOPnpasses :: Maybe (Tree Int)
    , _ndioutTOPchanmask :: Maybe (Tree Int)
    , _ndioutTOPinputfiltertype :: Maybe (Tree Int)
    , _ndioutTOPfps :: Maybe (Tree Float)
    , _ndioutTOPoutputresolution :: Maybe (Tree Int)
    , _ndioutTOPfillmode :: Maybe (Tree Int)
    , _ndioutTOPname :: Maybe (Tree ByteString)
    , _ndioutTOPresolutionh :: Maybe (Tree Int)
    , _ndioutTOPincludealpha :: Maybe (Tree Bool)
    , _ndioutTOPfailovername :: Maybe (Tree ByteString)
    , _ndioutTOPfiltertype :: Maybe (Tree Int)
    , _ndioutTOPaspect1 :: Maybe (Tree Float)
    , _ndioutTOPgrouptable :: Maybe (Tree DAT)
    , _ndioutTOPresolutionw :: Maybe (Tree Int)
    , _ndioutTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | SvgTOP {
    _svgTOPaspect2 :: Maybe (Tree Float)
    , _svgTOPformat :: Maybe (Tree Int)
    , _svgTOPfile :: Maybe (Tree ByteString)
    , _svgTOPinputfiltertype :: Maybe (Tree Int)
    , _svgTOPrord :: Maybe (Tree Int)
    , _svgTOPoutputresolution :: Maybe (Tree Int)
    , _svgTOPfillmode :: Maybe (Tree Int)
    , _svgTOPresolutionw :: Maybe (Tree Int)
    , _svgTOParmenu :: Maybe (Tree Int)
    , _svgTOPfiltertype :: Maybe (Tree Int)
    , _svgTOPbgcolor :: Vec3
    , _svgTOPantialias :: Maybe (Tree Int)
    , _svgTOPxord :: Maybe (Tree Int)
    , _svgTOPchanmask :: Maybe (Tree Int)
    , _svgTOPr :: Vec3
    , _svgTOPresmult :: Maybe (Tree Bool)
    , _svgTOPpunit :: Maybe (Tree Int)
    , _svgTOPresmenu :: Maybe (Tree Int)
    , _svgTOPs :: Vec2
    , _svgTOPbgalpha :: Maybe (Tree Float)
    , _svgTOPp :: Vec2
    , _svgTOPresolutionh :: Maybe (Tree Int)
    , _svgTOPtunit :: Maybe (Tree Int)
    , _svgTOPnpasses :: Maybe (Tree Int)
    , _svgTOPaspect1 :: Maybe (Tree Float)
    , _svgTOPt :: Vec2
    , _svgTOPdat :: Maybe (Tree DAT)
    , _svgTOPoutputaspect :: Maybe (Tree Int)
    , _svgTOPreload :: Maybe (Tree Bool)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | LeapmotionTOP {
    _leapmotionTOPresmult :: Maybe (Tree Bool)
    , _leapmotionTOPaspect2 :: Maybe (Tree Float)
    , _leapmotionTOPformat :: Maybe (Tree Int)
    , _leapmotionTOPactive :: Maybe (Tree Bool)
    , _leapmotionTOPresmenu :: Maybe (Tree Int)
    , _leapmotionTOPnpasses :: Maybe (Tree Int)
    , _leapmotionTOPhmd :: Maybe (Tree Int)
    , _leapmotionTOPinputfiltertype :: Maybe (Tree Int)
    , _leapmotionTOPchanmask :: Maybe (Tree Int)
    , _leapmotionTOPoutputresolution :: Maybe (Tree Int)
    , _leapmotionTOPfillmode :: Maybe (Tree Int)
    , _leapmotionTOPresolutionh :: Maybe (Tree Int)
    , _leapmotionTOParmenu :: Maybe (Tree Int)
    , _leapmotionTOPfiltertype :: Maybe (Tree Int)
    , _leapmotionTOPcorrection :: Maybe (Tree Bool)
    , _leapmotionTOPaspect1 :: Maybe (Tree Float)
    , _leapmotionTOPflipy :: Maybe (Tree Bool)
    , _leapmotionTOPflipx :: Maybe (Tree Bool)
    , _leapmotionTOPcamera :: Maybe (Tree ByteString)
    , _leapmotionTOPresolutionw :: Maybe (Tree Int)
    , _leapmotionTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | TouchoutTOP {
    _touchoutTOParmenu :: Maybe (Tree Int)
    , _touchoutTOPresmult :: Maybe (Tree Bool)
    , _touchoutTOPalwayscook :: Maybe (Tree Bool)
    , _touchoutTOPformat :: Maybe (Tree Int)
    , _touchoutTOPactive :: Maybe (Tree Bool)
    , _touchoutTOPresmenu :: Maybe (Tree Int)
    , _touchoutTOPnpasses :: Maybe (Tree Int)
    , _touchoutTOPresolutionw :: Maybe (Tree Int)
    , _touchoutTOPinputfiltertype :: Maybe (Tree Int)
    , _touchoutTOPfps :: Maybe (Tree Int)
    , _touchoutTOPoutputresolution :: Maybe (Tree Int)
    , _touchoutTOPfillmode :: Maybe (Tree Int)
    , _touchoutTOPresolutionh :: Maybe (Tree Int)
    , _touchoutTOPchanmask :: Maybe (Tree Int)
    , _touchoutTOPaspect2 :: Maybe (Tree Float)
    , _touchoutTOPfiltertype :: Maybe (Tree Int)
    , _touchoutTOPaspect1 :: Maybe (Tree Float)
    , _touchoutTOPvideocodec :: Maybe (Tree Int)
    , _touchoutTOPport :: Maybe (Tree Int)
    , _touchoutTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | SyphonspoutinTOP {
    _syphonspoutinTOPresmult :: Maybe (Tree Bool)
    , _syphonspoutinTOPaspect2 :: Maybe (Tree Float)
    , _syphonspoutinTOPformat :: Maybe (Tree Int)
    , _syphonspoutinTOPresmenu :: Maybe (Tree Int)
    , _syphonspoutinTOPnpasses :: Maybe (Tree Int)
    , _syphonspoutinTOPinputfiltertype :: Maybe (Tree Int)
    , _syphonspoutinTOPchanmask :: Maybe (Tree Int)
    , _syphonspoutinTOPoutputresolution :: Maybe (Tree Int)
    , _syphonspoutinTOPfillmode :: Maybe (Tree Int)
    , _syphonspoutinTOPresolutionw :: Maybe (Tree Int)
    , _syphonspoutinTOPusespoutactivesender :: Maybe (Tree Bool)
    , _syphonspoutinTOParmenu :: Maybe (Tree Int)
    , _syphonspoutinTOPsendername :: Maybe (Tree ByteString)
    , _syphonspoutinTOPaspect1 :: Maybe (Tree Float)
    , _syphonspoutinTOPresolutionh :: Maybe (Tree Int)
    , _syphonspoutinTOPoutputaspect :: Maybe (Tree Int)
    , _syphonspoutinTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | VideostreamoutTOP {
    _videostreamoutTOPquality :: Maybe (Tree Int)
    , _videostreamoutTOPaspect2 :: Maybe (Tree Float)
    , _videostreamoutTOPformat :: Maybe (Tree Int)
    , _videostreamoutTOPactive :: Maybe (Tree Bool)
    , _videostreamoutTOPinputfiltertype :: Maybe (Tree Int)
    , _videostreamoutTOPfps :: Maybe (Tree Float)
    , _videostreamoutTOPoutputresolution :: Maybe (Tree Int)
    , _videostreamoutTOPaudiochop :: Maybe (Tree CHOP)
    , _videostreamoutTOPresolutionw :: Maybe (Tree Int)
    , _videostreamoutTOPprofile :: Maybe (Tree Int)
    , _videostreamoutTOParmenu :: Maybe (Tree Int)
    , _videostreamoutTOPfiltertype :: Maybe (Tree Int)
    , _videostreamoutTOPport :: Maybe (Tree Int)
    , _videostreamoutTOPstreamname :: Maybe (Tree ByteString)
    , _videostreamoutTOPresmult :: Maybe (Tree Bool)
    , _videostreamoutTOPbitrate :: Maybe (Tree Float)
    , _videostreamoutTOPresmenu :: Maybe (Tree Int)
    , _videostreamoutTOPchanmask :: Maybe (Tree Int)
    , _videostreamoutTOPforceidr :: Maybe (Tree Bool)
    , _videostreamoutTOPfillmode :: Maybe (Tree Int)
    , _videostreamoutTOPnumslices :: Maybe (Tree Int)
    , _videostreamoutTOPresolutionh :: Maybe (Tree Int)
    , _videostreamoutTOPnpasses :: Maybe (Tree Int)
    , _videostreamoutTOPaspect1 :: Maybe (Tree Float)
    , _videostreamoutTOPmulticast :: Maybe (Tree Bool)
    , _videostreamoutTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ScalabledisplayTOP {
    _scalabledisplayTOPnear :: Maybe (Tree Float)
    , _scalabledisplayTOPresmult :: Maybe (Tree Bool)
    , _scalabledisplayTOPaspect2 :: Maybe (Tree Float)
    , _scalabledisplayTOPformat :: Maybe (Tree Int)
    , _scalabledisplayTOPresmenu :: Maybe (Tree Int)
    , _scalabledisplayTOPnpasses :: Maybe (Tree Int)
    , _scalabledisplayTOPchanmask :: Maybe (Tree Int)
    , _scalabledisplayTOPinputfiltertype :: Maybe (Tree Int)
    , _scalabledisplayTOPfar :: Maybe (Tree Float)
    , _scalabledisplayTOPoutputresolution :: Maybe (Tree Int)
    , _scalabledisplayTOPfillmode :: Maybe (Tree Int)
    , _scalabledisplayTOPresolutionh :: Maybe (Tree Int)
    , _scalabledisplayTOParmenu :: Maybe (Tree Int)
    , _scalabledisplayTOPconfigfile :: Maybe (Tree ByteString)
    , _scalabledisplayTOPaspect1 :: Maybe (Tree Float)
    , _scalabledisplayTOPresolutionw :: Maybe (Tree Int)
    , _scalabledisplayTOPoutputaspect :: Maybe (Tree Int)
    , _scalabledisplayTOPfiltertype :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | OutsideTOP {
    _outsideTOPaspect2 :: Maybe (Tree Float)
    , _outsideTOPformat :: Maybe (Tree Int)
    , _outsideTOPextend :: Maybe (Tree Int)
    , _outsideTOPchanmask :: Maybe (Tree Int)
    , _outsideTOPoutputresolution :: Maybe (Tree Int)
    , _outsideTOPfillmode :: Maybe (Tree Int)
    , _outsideTOPresolutionw :: Maybe (Tree Int)
    , _outsideTOParmenu :: Maybe (Tree Int)
    , _outsideTOPfiltertype :: Maybe (Tree Int)
    , _outsideTOPinputfiltertype :: Maybe (Tree Int)
    , _outsideTOPresmult :: Maybe (Tree Bool)
    , _outsideTOPpunit :: Maybe (Tree Int)
    , _outsideTOPs :: Vec2
    , _outsideTOPresmenu :: Maybe (Tree Int)
    , _outsideTOPp :: Vec2
    , _outsideTOPsize :: Maybe (Tree Int)
    , _outsideTOPnpasses :: Maybe (Tree Int)
    , _outsideTOPoutputaspect :: Maybe (Tree Int)
    , _outsideTOPresolutionh :: Maybe (Tree Int)
    , _outsideTOPtunit :: Maybe (Tree Int)
    , _outsideTOPprefit :: Maybe (Tree Int)
    , _outsideTOPr :: Maybe (Tree Float)
    , _outsideTOPaspect1 :: Maybe (Tree Float)
    , _outsideTOPjustifyh :: Maybe (Tree Int)
    , _outsideTOPt :: Vec2
    , _outsideTOPjustifyv :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | ResolutionTOP {
    _resolutionTOPresmult :: Maybe (Tree Bool)
    , _resolutionTOPaspect2 :: Maybe (Tree Float)
    , _resolutionTOPformat :: Maybe (Tree Int)
    , _resolutionTOPresmenu :: Maybe (Tree Int)
    , _resolutionTOPnpasses :: Maybe (Tree Int)
    , _resolutionTOPresolutionw :: Maybe (Tree Int)
    , _resolutionTOPinputfiltertype :: Maybe (Tree Int)
    , _resolutionTOPchanmask :: Maybe (Tree Int)
    , _resolutionTOPoutputresolution :: Maybe (Tree Int)
    , _resolutionTOPfillmode :: Maybe (Tree Int)
    , _resolutionTOPhighqualresize :: Maybe (Tree Bool)
    , _resolutionTOParmenu :: Maybe (Tree Int)
    , _resolutionTOPfiltertype :: Maybe (Tree Int)
    , _resolutionTOPaspect1 :: Maybe (Tree Float)
    , _resolutionTOPresolutionh :: Maybe (Tree Int)
    , _resolutionTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | DifferenceTOP {
    _differenceTOPaspect2 :: Maybe (Tree Float)
    , _differenceTOPformat :: Maybe (Tree Int)
    , _differenceTOPextend :: Maybe (Tree Int)
    , _differenceTOPchanmask :: Maybe (Tree Int)
    , _differenceTOPoutputresolution :: Maybe (Tree Int)
    , _differenceTOPfillmode :: Maybe (Tree Int)
    , _differenceTOPresolutionw :: Maybe (Tree Int)
    , _differenceTOParmenu :: Maybe (Tree Int)
    , _differenceTOPfiltertype :: Maybe (Tree Int)
    , _differenceTOPinputfiltertype :: Maybe (Tree Int)
    , _differenceTOPresmult :: Maybe (Tree Bool)
    , _differenceTOPpunit :: Maybe (Tree Int)
    , _differenceTOPs :: Vec2
    , _differenceTOPresmenu :: Maybe (Tree Int)
    , _differenceTOPp :: Vec2
    , _differenceTOPsize :: Maybe (Tree Int)
    , _differenceTOPnpasses :: Maybe (Tree Int)
    , _differenceTOPoutputaspect :: Maybe (Tree Int)
    , _differenceTOPresolutionh :: Maybe (Tree Int)
    , _differenceTOPtunit :: Maybe (Tree Int)
    , _differenceTOPprefit :: Maybe (Tree Int)
    , _differenceTOPr :: Maybe (Tree Float)
    , _differenceTOPaspect1 :: Maybe (Tree Float)
    , _differenceTOPjustifyh :: Maybe (Tree Int)
    , _differenceTOPt :: Vec2
    , _differenceTOPjustifyv :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | LevelTOP {
    _levelTOPaspect2 :: Maybe (Tree Float)
    , _levelTOPbrightness1 :: Maybe (Tree Float)
    , _levelTOPclamphigh :: Maybe (Tree Float)
    , _levelTOPinputfiltertype :: Maybe (Tree Int)
    , _levelTOPclamplow2 :: Maybe (Tree Float)
    , _levelTOPfillmode :: Maybe (Tree Int)
    , _levelTOPresolutionw :: Maybe (Tree Int)
    , _levelTOPclamp :: Maybe (Tree Bool)
    , _levelTOParmenu :: Maybe (Tree Int)
    , _levelTOPfiltertype :: Maybe (Tree Int)
    , _levelTOPclampinput :: Maybe (Tree Bool)
    , _levelTOPformat :: Maybe (Tree Int)
    , _levelTOPhighr :: Maybe (Tree Float)
    , _levelTOPlowa :: Maybe (Tree Float)
    , _levelTOPresmenu :: Maybe (Tree Int)
    , _levelTOPchanmask :: Maybe (Tree Int)
    , _levelTOPgamma1 :: Maybe (Tree Float)
    , _levelTOPhighb :: Maybe (Tree Float)
    , _levelTOPsoften :: Maybe (Tree Float)
    , _levelTOPthreshold :: Maybe (Tree Float)
    , _levelTOPresolutionh :: Maybe (Tree Int)
    , _levelTOPlowb :: Maybe (Tree Float)
    , _levelTOPbrightness2 :: Maybe (Tree Float)
    , _levelTOPstepsize :: Maybe (Tree Float)
    , _levelTOPclamplow :: Maybe (Tree Float)
    , _levelTOPinlow :: Maybe (Tree Float)
    , _levelTOPoutputaspect :: Maybe (Tree Int)
    , _levelTOPlowg :: Maybe (Tree Float)
    , _levelTOPoutlow :: Maybe (Tree Float)
    , _levelTOPblacklevel :: Maybe (Tree Float)
    , _levelTOPouthigh :: Maybe (Tree Float)
    , _levelTOPcontrast :: Maybe (Tree Float)
    , _levelTOPaspect1 :: Maybe (Tree Float)
    , _levelTOPoutputresolution :: Maybe (Tree Int)
    , _levelTOPopacity :: Maybe (Tree Float)
    , _levelTOPgamma2 :: Maybe (Tree Float)
    , _levelTOPinvert :: Maybe (Tree Float)
    , _levelTOPinhigh :: Maybe (Tree Float)
    , _levelTOPresmult :: Maybe (Tree Bool)
    , _levelTOPstepping :: Maybe (Tree Bool)
    , _levelTOPclamphigh2 :: Maybe (Tree Float)
    , _levelTOPhighg :: Maybe (Tree Float)
    , _levelTOPnpasses :: Maybe (Tree Int)
    , _levelTOPhigha :: Maybe (Tree Float)
    , _levelTOPlowr :: Maybe (Tree Float)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | RectangleTOP {
    _rectangleTOPaspect2 :: Maybe (Tree Float)
    , _rectangleTOPformat :: Maybe (Tree Int)
    , _rectangleTOPcornerradius :: Maybe (Tree Float)
    , _rectangleTOPsoftnessunit :: Maybe (Tree Int)
    , _rectangleTOPinputfiltertype :: Maybe (Tree Int)
    , _rectangleTOPchanmask :: Maybe (Tree Int)
    , _rectangleTOPoutputresolution :: Maybe (Tree Int)
    , _rectangleTOPborderoffset :: Maybe (Tree Float)
    , _rectangleTOPfillcolor :: Vec3
    , _rectangleTOPantialias :: Maybe (Tree Bool)
    , _rectangleTOParmenu :: Maybe (Tree Int)
    , _rectangleTOPfiltertype :: Maybe (Tree Int)
    , _rectangleTOPborderwidth :: Maybe (Tree Float)
    , _rectangleTOPfillalpha :: Maybe (Tree Float)
    , _rectangleTOPbgcolor :: Vec3
    , _rectangleTOPresolutionw :: Maybe (Tree Int)
    , _rectangleTOPcenterunit :: Maybe (Tree Int)
    , _rectangleTOPresmult :: Maybe (Tree Bool)
    , _rectangleTOPresmenu :: Maybe (Tree Int)
    , _rectangleTOPmultrgbbyalpha :: Maybe (Tree Bool)
    , _rectangleTOPsize :: Vec2
    , _rectangleTOPborder :: Vec3
    , _rectangleTOPbgalpha :: Maybe (Tree Float)
    , _rectangleTOPfillmode :: Maybe (Tree Int)
    , _rectangleTOPresolutionh :: Maybe (Tree Int)
    , _rectangleTOProtate :: Maybe (Tree Float)
    , _rectangleTOPcenter :: Vec2
    , _rectangleTOPsoftness :: Maybe (Tree Float)
    , _rectangleTOPborderalpha :: Maybe (Tree Float)
    , _rectangleTOPnpasses :: Maybe (Tree Int)
    , _rectangleTOPsizeunit :: Maybe (Tree Int)
    , _rectangleTOPaspect1 :: Maybe (Tree Float)
    , _rectangleTOPcornerradiusunit :: Maybe (Tree Int)
    , _rectangleTOPborderwidthunit :: Maybe (Tree Int)
    , _rectangleTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | SharedmeminTOP {
    _sharedmeminTOPresmult :: Maybe (Tree Bool)
    , _sharedmeminTOPaspect2 :: Maybe (Tree Float)
    , _sharedmeminTOPformat :: Maybe (Tree Int)
    , _sharedmeminTOPresmenu :: Maybe (Tree Int)
    , _sharedmeminTOPnpasses :: Maybe (Tree Int)
    , _sharedmeminTOPmemtype :: Maybe (Tree Int)
    , _sharedmeminTOPinputfiltertype :: Maybe (Tree Int)
    , _sharedmeminTOPchanmask :: Maybe (Tree Int)
    , _sharedmeminTOPoutputresolution :: Maybe (Tree Int)
    , _sharedmeminTOPfillmode :: Maybe (Tree Int)
    , _sharedmeminTOPname :: Maybe (Tree ByteString)
    , _sharedmeminTOPresolutionw :: Maybe (Tree Int)
    , _sharedmeminTOParmenu :: Maybe (Tree Int)
    , _sharedmeminTOPfiltertype :: Maybe (Tree Int)
    , _sharedmeminTOPaspect1 :: Maybe (Tree Float)
    , _sharedmeminTOPresolutionh :: Maybe (Tree Int)
    , _sharedmeminTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | TouchinTOP {
    _touchinTOPaspect2 :: Maybe (Tree Float)
    , _touchinTOPformat :: Maybe (Tree Int)
    , _touchinTOPactive :: Maybe (Tree Bool)
    , _touchinTOPoutputresolution :: Maybe (Tree Int)
    , _touchinTOPinputfiltertype :: Maybe (Tree Int)
    , _touchinTOPchanmask :: Maybe (Tree Int)
    , _touchinTOPaddress :: Maybe (Tree ByteString)
    , _touchinTOPfillmode :: Maybe (Tree Int)
    , _touchinTOPresolutionw :: Maybe (Tree Int)
    , _touchinTOParmenu :: Maybe (Tree Int)
    , _touchinTOPfiltertype :: Maybe (Tree Int)
    , _touchinTOPmintarget :: Maybe (Tree Float)
    , _touchinTOPmaxtarget :: Maybe (Tree Float)
    , _touchinTOPresmult :: Maybe (Tree Bool)
    , _touchinTOPport :: Maybe (Tree Int)
    , _touchinTOPresmenu :: Maybe (Tree Int)
    , _touchinTOPresolutionh :: Maybe (Tree Int)
    , _touchinTOPnpasses :: Maybe (Tree Int)
    , _touchinTOPmaxqueue :: Maybe (Tree Float)
    , _touchinTOPaspect1 :: Maybe (Tree Float)
    , _touchinTOPtargetdelay :: Maybe (Tree Float)
    , _touchinTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | CubemapTOP {
    _cubemapTOPmode :: Maybe (Tree Int)
    , _cubemapTOPresmult :: Maybe (Tree Bool)
    , _cubemapTOPaspect2 :: Maybe (Tree Float)
    , _cubemapTOPformat :: Maybe (Tree Int)
    , _cubemapTOPresmenu :: Maybe (Tree Int)
    , _cubemapTOPnpasses :: Maybe (Tree Int)
    , _cubemapTOPinputfiltertype :: Maybe (Tree Int)
    , _cubemapTOPchanmask :: Maybe (Tree Int)
    , _cubemapTOPoutputresolution :: Maybe (Tree Int)
    , _cubemapTOPfillmode :: Maybe (Tree Int)
    , _cubemapTOPresolutionw :: Maybe (Tree Int)
    , _cubemapTOParmenu :: Maybe (Tree Int)
    , _cubemapTOPfiltertype :: Maybe (Tree Int)
    , _cubemapTOPaspect1 :: Maybe (Tree Float)
    , _cubemapTOPresolutionh :: Maybe (Tree Int)
    , _cubemapTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | HsvtorgbTOP {
    _hsvtorgbTOPresmult :: Maybe (Tree Bool)
    , _hsvtorgbTOPaspect2 :: Maybe (Tree Float)
    , _hsvtorgbTOPformat :: Maybe (Tree Int)
    , _hsvtorgbTOPresmenu :: Maybe (Tree Int)
    , _hsvtorgbTOPnpasses :: Maybe (Tree Int)
    , _hsvtorgbTOPinputfiltertype :: Maybe (Tree Int)
    , _hsvtorgbTOPchanmask :: Maybe (Tree Int)
    , _hsvtorgbTOPoutputresolution :: Maybe (Tree Int)
    , _hsvtorgbTOPfillmode :: Maybe (Tree Int)
    , _hsvtorgbTOPresolutionw :: Maybe (Tree Int)
    , _hsvtorgbTOParmenu :: Maybe (Tree Int)
    , _hsvtorgbTOPfiltertype :: Maybe (Tree Int)
    , _hsvtorgbTOPaspect1 :: Maybe (Tree Float)
    , _hsvtorgbTOPresolutionh :: Maybe (Tree Int)
    , _hsvtorgbTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | TimemachineTOP {
    _timemachineTOParmenu :: Maybe (Tree Int)
    , _timemachineTOPresmult :: Maybe (Tree Bool)
    , _timemachineTOPwhiteoffsetunit :: Maybe (Tree Int)
    , _timemachineTOPformat :: Maybe (Tree Int)
    , _timemachineTOPblackoffsetunit :: Maybe (Tree Int)
    , _timemachineTOPresmenu :: Maybe (Tree Int)
    , _timemachineTOPnpasses :: Maybe (Tree Int)
    , _timemachineTOPfillmode :: Maybe (Tree Int)
    , _timemachineTOPinputfiltertype :: Maybe (Tree Int)
    , _timemachineTOPchanmask :: Maybe (Tree Int)
    , _timemachineTOPoutputresolution :: Maybe (Tree Int)
    , _timemachineTOPwhiteoffset :: Maybe (Tree Float)
    , _timemachineTOPresolutionh :: Maybe (Tree Int)
    , _timemachineTOPblackoffset :: Maybe (Tree Float)
    , _timemachineTOPaspect2 :: Maybe (Tree Float)
    , _timemachineTOPfiltertype :: Maybe (Tree Int)
    , _timemachineTOPaspect1 :: Maybe (Tree Float)
    , _timemachineTOPresolutionw :: Maybe (Tree Int)
    , _timemachineTOPoutputaspect :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | RgbkeyTOP {
    _rgbkeyTOPredmin :: Maybe (Tree Float)
    , _rgbkeyTOPaspect2 :: Maybe (Tree Float)
    , _rgbkeyTOPformat :: Maybe (Tree Int)
    , _rgbkeyTOPgreenmin :: Maybe (Tree Float)
    , _rgbkeyTOPrgbout :: Maybe (Tree Int)
    , _rgbkeyTOPinputfiltertype :: Maybe (Tree Int)
    , _rgbkeyTOPchanmask :: Maybe (Tree Int)
    , _rgbkeyTOPoutputresolution :: Maybe (Tree Int)
    , _rgbkeyTOPfillmode :: Maybe (Tree Int)
    , _rgbkeyTOPbsoftlow :: Maybe (Tree Float)
    , _rgbkeyTOPgreenmax :: Maybe (Tree Float)
    , _rgbkeyTOPfiltertype :: Maybe (Tree Int)
    , _rgbkeyTOParmenu :: Maybe (Tree Int)
    , _rgbkeyTOPredmax :: Maybe (Tree Float)
    , _rgbkeyTOPalphaout :: Maybe (Tree Int)
    , _rgbkeyTOPinvert :: Maybe (Tree Float)
    , _rgbkeyTOPresolutionw :: Maybe (Tree Int)
    , _rgbkeyTOPbsofthigh :: Maybe (Tree Float)
    , _rgbkeyTOPresmult :: Maybe (Tree Bool)
    , _rgbkeyTOPgsofthigh :: Maybe (Tree Float)
    , _rgbkeyTOPresmenu :: Maybe (Tree Int)
    , _rgbkeyTOPbluemin :: Maybe (Tree Float)
    , _rgbkeyTOPresolutionh :: Maybe (Tree Int)
    , _rgbkeyTOPrsofthigh :: Maybe (Tree Float)
    , _rgbkeyTOPrsoftlow :: Maybe (Tree Float)
    , _rgbkeyTOPnpasses :: Maybe (Tree Int)
    , _rgbkeyTOPaspect1 :: Maybe (Tree Float)
    , _rgbkeyTOPbluemax :: Maybe (Tree Float)
    , _rgbkeyTOPoutputaspect :: Maybe (Tree Int)
    , _rgbkeyTOPgsoftlow :: Maybe (Tree Float)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | CacheTOP {
    _cacheTOPinterp :: Maybe (Tree Bool)
    , _cacheTOPresetpulse :: Maybe (Tree Bool)
    , _cacheTOPreplaceindex :: Maybe (Tree Int)
    , _cacheTOPreplace :: Maybe (Tree Bool)
    , _cacheTOPactive :: Maybe (Tree Bool)
    , _cacheTOPactivepulse :: Maybe (Tree Bool)
    , _cacheTOPinputfiltertype :: Maybe (Tree Int)
    , _cacheTOPchanmask :: Maybe (Tree Int)
    , _cacheTOPoutputresolution :: Maybe (Tree Int)
    , _cacheTOPprefill :: Maybe (Tree Bool)
    , _cacheTOPresolutionw :: Maybe (Tree Int)
    , _cacheTOPalwayscook :: Maybe (Tree Bool)
    , _cacheTOPfiltertype :: Maybe (Tree Int)
    , _cacheTOPaspect2 :: Maybe (Tree Float)
    , _cacheTOPformat :: Maybe (Tree Int)
    , _cacheTOPreplacespulse :: Maybe (Tree Bool)
    , _cacheTOPstep :: Maybe (Tree Int)
    , _cacheTOPprefillpulse :: Maybe (Tree Bool)
    , _cacheTOParmenu :: Maybe (Tree Int)
    , _cacheTOPresmult :: Maybe (Tree Bool)
    , _cacheTOPoutputindex :: Maybe (Tree Float)
    , _cacheTOPresmenu :: Maybe (Tree Int)
    , _cacheTOPcachesize :: Maybe (Tree Int)
    , _cacheTOPfillmode :: Maybe (Tree Int)
    , _cacheTOPresolutionh :: Maybe (Tree Int)
    , _cacheTOPcacheonce :: Maybe (Tree Bool)
    , _cacheTOPnpasses :: Maybe (Tree Int)
    , _cacheTOPaspect1 :: Maybe (Tree Float)
    , _cacheTOPoutputaspect :: Maybe (Tree Int)
    , _cacheTOPreset :: Maybe (Tree Bool)
    , _cacheTOPoutputindexunit :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }
  | RenderpassTOP {
    _renderpassTOPaspect2 :: Maybe (Tree Float)
    , _renderpassTOPoverdraw :: Maybe (Tree Bool)
    , _renderpassTOPvalue3 :: Vec4
    , _renderpassTOPfillmode :: Maybe (Tree Int)
    , _renderpassTOPcullface :: Maybe (Tree Int)
    , _renderpassTOPresolutionw :: Maybe (Tree Int)
    , _renderpassTOParmenu :: Maybe (Tree Int)
    , _renderpassTOPsampler0 :: Maybe (Tree ByteString)
    , _renderpassTOPformat :: Maybe (Tree Int)
    , _renderpassTOPsampler3 :: Maybe (Tree ByteString)
    , _renderpassTOPresmenu :: Maybe (Tree Int)
    , _renderpassTOPtop1extendv :: Maybe (Tree Int)
    , _renderpassTOPoutputaspect :: Maybe (Tree Int)
    , _renderpassTOPuniname1 :: Maybe (Tree ByteString)
    , _renderpassTOPcropbottom :: Maybe (Tree Float)
    , _renderpassTOPsampler4 :: Maybe (Tree ByteString)
    , _renderpassTOPinputfiltertype :: Maybe (Tree Int)
    , _renderpassTOPtop4filter :: Maybe (Tree Int)
    , _renderpassTOPoverridemat :: Maybe (Tree MAT)
    , _renderpassTOPorderindtrans :: Maybe (Tree Bool)
    , _renderpassTOPtop4extendv :: Maybe (Tree Int)
    , _renderpassTOPuniname4 :: Maybe (Tree ByteString)
    , _renderpassTOPvalue2 :: Vec4
    , _renderpassTOPcropbottomunit :: Maybe (Tree Int)
    , _renderpassTOPcropleft :: Maybe (Tree Float)
    , _renderpassTOPdepthpeel :: Maybe (Tree Bool)
    , _renderpassTOPpolygonoffsetunits :: Maybe (Tree Float)
    , _renderpassTOPtop1 :: Maybe (Tree TOP)
    , _renderpassTOPtop1filter :: Maybe (Tree Int)
    , _renderpassTOPresmult :: Maybe (Tree Bool)
    , _renderpassTOPtop2extendw :: Maybe (Tree Int)
    , _renderpassTOPsampler2 :: Maybe (Tree ByteString)
    , _renderpassTOPdither :: Maybe (Tree Bool)
    , _renderpassTOPuniname2 :: Maybe (Tree ByteString)
    , _renderpassTOPtop2 :: Maybe (Tree TOP)
    , _renderpassTOPrenderinput :: Maybe (Tree TOP)
    , _renderpassTOPuniname0 :: Maybe (Tree ByteString)
    , _renderpassTOPfiltertype :: Maybe (Tree Int)
    , _renderpassTOPtop4extendw :: Maybe (Tree Int)
    , _renderpassTOPsampler1 :: Maybe (Tree ByteString)
    , _renderpassTOPrender :: Maybe (Tree Bool)
    , _renderpassTOPvalue4 :: Vec4
    , _renderpassTOPdrawdepthonly :: Maybe (Tree Bool)
    , _renderpassTOPtop0anisotropy :: Maybe (Tree Int)
    , _renderpassTOPcroprightunit :: Maybe (Tree Int)
    , _renderpassTOPtop0 :: Maybe (Tree TOP)
    , _renderpassTOPtop0extendv :: Maybe (Tree Int)
    , _renderpassTOPtop3extendw :: Maybe (Tree Int)
    , _renderpassTOPtop0filter :: Maybe (Tree Int)
    , _renderpassTOPpolygonoffsetfactor :: Maybe (Tree Float)
    , _renderpassTOPpolygonoffset :: Maybe (Tree Bool)
    , _renderpassTOPcropright :: Maybe (Tree Float)
    , _renderpassTOPtop3anisotropy :: Maybe (Tree Int)
    , _renderpassTOPtop3extendv :: Maybe (Tree Int)
    , _renderpassTOPresolutionh :: Maybe (Tree Int)
    , _renderpassTOPtop3filter :: Maybe (Tree Int)
    , _renderpassTOPallowbufblending :: Maybe (Tree Int)
    , _renderpassTOPtop3 :: Maybe (Tree TOP)
    , _renderpassTOPaspect1 :: Maybe (Tree Float)
    , _renderpassTOPtop4extendu :: Maybe (Tree Int)
    , _renderpassTOPcoloroutputneeded :: Maybe (Tree Bool)
    , _renderpassTOPtop1extendu :: Maybe (Tree Int)
    , _renderpassTOPalphatocoverage :: Maybe (Tree Bool)
    , _renderpassTOPtop3extendu :: Maybe (Tree Int)
    , _renderpassTOPcleartocamcolor :: Maybe (Tree Bool)
    , _renderpassTOPtop2anisotropy :: Maybe (Tree Int)
    , _renderpassTOPcropleftunit :: Maybe (Tree Int)
    , _renderpassTOPtop1extendw :: Maybe (Tree Int)
    , _renderpassTOPtop2extendv :: Maybe (Tree Int)
    , _renderpassTOPtop4anisotropy :: Maybe (Tree Int)
    , _renderpassTOPtop4 :: Maybe (Tree TOP)
    , _renderpassTOPtop2extendu :: Maybe (Tree Int)
    , _renderpassTOPoverdrawlimit :: Maybe (Tree Int)
    , _renderpassTOPvalue1 :: Vec4
    , _renderpassTOPtop0extendu :: Maybe (Tree Int)
    , _renderpassTOPvalue0 :: Vec4
    , _renderpassTOPtop0extendw :: Maybe (Tree Int)
    , _renderpassTOPtranspeellayers :: Maybe (Tree Int)
    , _renderpassTOPcleardepth :: Maybe (Tree Bool)
    , _renderpassTOPcroptopunit :: Maybe (Tree Int)
    , _renderpassTOPtop1anisotropy :: Maybe (Tree Int)
    , _renderpassTOPoutputresolution :: Maybe (Tree Int)
    , _renderpassTOPuniname3 :: Maybe (Tree ByteString)
    , _renderpassTOPnpasses :: Maybe (Tree Int)
    , _renderpassTOPchanmask :: Maybe (Tree Int)
    , _renderpassTOPcroptop :: Maybe (Tree Float)
    , _renderpassTOPtop2filter :: Maybe (Tree Int)
    , _topCommands :: [CommandType]
    , _topIns :: [Tree TOP]
  }


data DAT = 
  SerialDAT {
    _serialDATparity :: Maybe (Tree Bool)
    , _serialDATformat :: Maybe (Tree Int)
    , _serialDATactive :: Maybe (Tree Bool)
    , _serialDATextension :: Maybe (Tree Int)
    , _serialDATcustomext :: Maybe (Tree ByteString)
    , _serialDATbaudrate :: Maybe (Tree Bool)
    , _serialDATwordwrap :: Maybe (Tree Int)
    , _serialDATrts :: Maybe (Tree Bool)
    , _serialDATstopbits :: Maybe (Tree Bool)
    , _serialDATclamp :: Maybe (Tree Bool)
    , _serialDATdtr :: Maybe (Tree Bool)
    , _serialDATlanguage :: Maybe (Tree Int)
    , _serialDATmaxlines :: Maybe (Tree Int)
    , _serialDATexecuteloc :: Maybe (Tree Int)
    , _serialDATdatabits :: Maybe (Tree Bool)
    , _serialDATcallbacks :: Maybe (Tree DAT)
    , _serialDATclear :: Maybe (Tree Bool)
    , _serialDATport :: Maybe (Tree Bool)
    , _serialDATbytes :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | TcpipDAT {
    _tcpipDATmode :: Maybe (Tree Int)
    , _tcpipDATformat :: Maybe (Tree Int)
    , _tcpipDATactive :: Maybe (Tree Bool)
    , _tcpipDATextension :: Maybe (Tree Int)
    , _tcpipDATcustomext :: Maybe (Tree ByteString)
    , _tcpipDATwordwrap :: Maybe (Tree Int)
    , _tcpipDATaddress :: Maybe (Tree ByteString)
    , _tcpipDATshared :: Maybe (Tree Bool)
    , _tcpipDATclamp :: Maybe (Tree Bool)
    , _tcpipDATlanguage :: Maybe (Tree Int)
    , _tcpipDATlocaladdress :: Maybe (Tree ByteString)
    , _tcpipDATexecuteloc :: Maybe (Tree Int)
    , _tcpipDATclear :: Maybe (Tree Bool)
    , _tcpipDATcallbacks :: Maybe (Tree DAT)
    , _tcpipDATmaxlines :: Maybe (Tree Int)
    , _tcpipDATport :: Maybe (Tree Int)
    , _tcpipDATbytes :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | EvaluateDAT {
    _evaluateDAToutput :: Maybe (Tree ByteString)
    , _evaluateDATfromcol :: Maybe (Tree Int)
    , _evaluateDATrowindexstart :: Maybe (Tree Int)
    , _evaluateDATrownameend :: Maybe (Tree ByteString)
    , _evaluateDATcolnamestart :: Maybe (Tree ByteString)
    , _evaluateDATfromrow :: Maybe (Tree Int)
    , _evaluateDATrowexpr :: Maybe (Tree ByteString)
    , _evaluateDATrownamestart :: Maybe (Tree ByteString)
    , _evaluateDATbackslash :: Maybe (Tree Bool)
    , _evaluateDATrowindexend :: Maybe (Tree Int)
    , _evaluateDATdependency :: Maybe (Tree Bool)
    , _evaluateDATcolexpr :: Maybe (Tree ByteString)
    , _evaluateDATcolnames :: Maybe (Tree ByteString)
    , _evaluateDATdatexpr :: Maybe (Tree DAT)
    , _evaluateDATexpr :: Maybe (Tree ByteString)
    , _evaluateDATextractrows :: Maybe (Tree Int)
    , _evaluateDATextension :: Maybe (Tree Int)
    , _evaluateDATcolindexend :: Maybe (Tree Int)
    , _evaluateDAToutputsize :: Maybe (Tree Int)
    , _evaluateDATrownames :: Maybe (Tree ByteString)
    , _evaluateDATxfirstrow :: Maybe (Tree Bool)
    , _evaluateDATcustomext :: Maybe (Tree ByteString)
    , _evaluateDATlanguage :: Maybe (Tree Int)
    , _evaluateDATextractcols :: Maybe (Tree Int)
    , _evaluateDATwordwrap :: Maybe (Tree Int)
    , _evaluateDATcolnameend :: Maybe (Tree ByteString)
    , _evaluateDATdat :: Maybe (Tree DAT)
    , _evaluateDATcolindexstart :: Maybe (Tree Int)
    , _evaluateDATxfirstcol :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | ChoptoDAT {
    _choptoDATcustomext :: Maybe (Tree ByteString)
    , _choptoDATlanguage :: Maybe (Tree Int)
    , _choptoDATnames :: Maybe (Tree Bool)
    , _choptoDATextension :: Maybe (Tree Int)
    , _choptoDATwordwrap :: Maybe (Tree Int)
    , _choptoDATchop :: Maybe (Tree CHOP)
    , _choptoDATlatestsample :: Maybe (Tree Bool)
    , _choptoDAToutput :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | ChopexecuteDAT {
    _chopexecuteDATedit :: Maybe (Tree Bool)
    , _chopexecuteDATontooff :: Maybe (Tree Bool)
    , _chopexecuteDATwhileoff :: Maybe (Tree Bool)
    , _chopexecuteDATactive :: Maybe (Tree Bool)
    , _chopexecuteDATextension :: Maybe (Tree Int)
    , _chopexecuteDATwhileon :: Maybe (Tree Bool)
    , _chopexecuteDATofftoon :: Maybe (Tree Bool)
    , _chopexecuteDATchannel :: Maybe (Tree ByteString)
    , _chopexecuteDATcustomext :: Maybe (Tree ByteString)
    , _chopexecuteDATlanguage :: Maybe (Tree Int)
    , _chopexecuteDATexecuteloc :: Maybe (Tree Int)
    , _chopexecuteDATwordwrap :: Maybe (Tree Int)
    , _chopexecuteDATvaluechange :: Maybe (Tree Bool)
    , _chopexecuteDATchop :: Maybe (Tree CHOP)
    , _chopexecuteDATfreq :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | PerformDAT {
    _performDATlogcustompanel :: Maybe (Tree Bool)
    , _performDATwordwrap :: Maybe (Tree Int)
    , _performDATlogrender :: Maybe (Tree Bool)
    , _performDATactive :: Maybe (Tree Bool)
    , _performDATlogmovie :: Maybe (Tree Bool)
    , _performDATcustomext :: Maybe (Tree ByteString)
    , _performDATextension :: Maybe (Tree Int)
    , _performDATactivepulse :: Maybe (Tree Bool)
    , _performDATlogdrawchannels :: Maybe (Tree Bool)
    , _performDATtriggermode :: Maybe (Tree Int)
    , _performDATlogscript :: Maybe (Tree Bool)
    , _performDATlanguage :: Maybe (Tree Int)
    , _performDATtriggerthreshold :: Maybe (Tree Float)
    , _performDATlogcook :: Maybe (Tree Bool)
    , _performDATloggraphics :: Maybe (Tree Bool)
    , _performDATlogframelength :: Maybe (Tree Bool)
    , _performDATlogobjectview :: Maybe (Tree Bool)
    , _performDATlogmisc :: Maybe (Tree Bool)
    , _performDATlogexport :: Maybe (Tree Bool)
    , _performDATlogviewport :: Maybe (Tree Bool)
    , _performDATlogmidi :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | ClipDAT {
    _clipDATclip :: Maybe (Tree CHOP)
    , _clipDATedit :: Maybe (Tree Bool)
    , _clipDATfile :: Maybe (Tree ByteString)
    , _clipDATextension :: Maybe (Tree Int)
    , _clipDATwordwrap :: Maybe (Tree Int)
    , _clipDATcustomext :: Maybe (Tree ByteString)
    , _clipDATlanguage :: Maybe (Tree Int)
    , _clipDATreload :: Maybe (Tree Bool)
    , _clipDATexecuteloc :: Maybe (Tree Int)
    , _clipDATframefirst :: Maybe (Tree Int)
    , _clipDATframeloop :: Maybe (Tree Int)
    , _clipDATexit :: Maybe (Tree Bool)
    , _clipDATprintstate :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | TuioinDAT {
    _tuioinDATaccel :: Maybe (Tree Bool)
    , _tuioinDATactive :: Maybe (Tree Bool)
    , _tuioinDATangle :: Maybe (Tree Bool)
    , _tuioinDATsize :: Maybe (Tree Bool)
    , _tuioinDATprotocol :: Maybe (Tree Int)
    , _tuioinDATaddress :: Maybe (Tree ByteString)
    , _tuioinDATshared :: Maybe (Tree Bool)
    , _tuioinDATprofile :: Maybe (Tree Bool)
    , _tuioinDATcustomext :: Maybe (Tree ByteString)
    , _tuioinDATvelocity :: Maybe (Tree Bool)
    , _tuioinDATtimestamp :: Maybe (Tree Bool)
    , _tuioinDATexecuteloc :: Maybe (Tree Int)
    , _tuioinDATwordwrap :: Maybe (Tree Int)
    , _tuioinDATclassid :: Maybe (Tree Bool)
    , _tuioinDATlanguage :: Maybe (Tree Int)
    , _tuioinDATcallbacks :: Maybe (Tree DAT)
    , _tuioinDATport :: Maybe (Tree Int)
    , _tuioinDATextension :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | ConvertDAT {
    _convertDATcustomext :: Maybe (Tree ByteString)
    , _convertDATlanguage :: Maybe (Tree Int)
    , _convertDATremoveblank :: Maybe (Tree Bool)
    , _convertDATextension :: Maybe (Tree Int)
    , _convertDATwordwrap :: Maybe (Tree Int)
    , _convertDAThow :: Maybe (Tree Int)
    , _convertDATdelimiters :: Maybe (Tree ByteString)
    , _convertDATspacers :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | ScriptDAT {
    _scriptDATsetuppars :: Maybe (Tree Bool)
    , _scriptDATcustomext :: Maybe (Tree ByteString)
    , _scriptDATlanguage :: Maybe (Tree Int)
    , _scriptDATextension :: Maybe (Tree Int)
    , _scriptDATwordwrap :: Maybe (Tree Int)
    , _scriptDATcallbacks :: Maybe (Tree DAT)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | NullDAT {
    _nullDATcustomext :: Maybe (Tree ByteString)
    , _nullDATlanguage :: Maybe (Tree Int)
    , _nullDATextension :: Maybe (Tree Int)
    , _nullDATwordwrap :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | ReorderDAT {
    _reorderDATdelete :: Maybe (Tree Bool)
    , _reorderDATorder :: Maybe (Tree ByteString)
    , _reorderDATcustomext :: Maybe (Tree ByteString)
    , _reorderDATlanguage :: Maybe (Tree Int)
    , _reorderDATextension :: Maybe (Tree Int)
    , _reorderDATwordwrap :: Maybe (Tree Int)
    , _reorderDATmethod :: Maybe (Tree Int)
    , _reorderDATafter :: Maybe (Tree ByteString)
    , _reorderDATreorder :: Maybe (Tree Int)
    , _reorderDATbefore :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | ErrorDAT {
    _errorDATtype :: Maybe (Tree ByteString)
    , _errorDATactive :: Maybe (Tree Bool)
    , _errorDATextension :: Maybe (Tree Int)
    , _errorDATwordwrap :: Maybe (Tree Int)
    , _errorDATlogcurrent :: Maybe (Tree Bool)
    , _errorDATclamp :: Maybe (Tree Bool)
    , _errorDATlanguage :: Maybe (Tree Int)
    , _errorDATmaxlines :: Maybe (Tree Int)
    , _errorDATmessage :: Maybe (Tree ByteString)
    , _errorDATexecuteloc :: Maybe (Tree Int)
    , _errorDATclear :: Maybe (Tree Bool)
    , _errorDATcallbacks :: Maybe (Tree DAT)
    , _errorDATseverity :: Maybe (Tree ByteString)
    , _errorDATcustomext :: Maybe (Tree ByteString)
    , _errorDATsource :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | OpexecuteDAT {
    _opexecuteDATflagchange :: Maybe (Tree Bool)
    , _opexecuteDATpostcook :: Maybe (Tree Bool)
    , _opexecuteDATpathchange :: Maybe (Tree Bool)
    , _opexecuteDATextensionchange :: Maybe (Tree Bool)
    , _opexecuteDATactive :: Maybe (Tree Bool)
    , _opexecuteDATextension :: Maybe (Tree Int)
    , _opexecuteDATcurrentchildchange :: Maybe (Tree Bool)
    , _opexecuteDATedit :: Maybe (Tree Bool)
    , _opexecuteDATuichange :: Maybe (Tree Bool)
    , _opexecuteDATchildrename :: Maybe (Tree Bool)
    , _opexecuteDATopdelete :: Maybe (Tree Bool)
    , _opexecuteDATnumchildrenchange :: Maybe (Tree Bool)
    , _opexecuteDATcustomext :: Maybe (Tree ByteString)
    , _opexecuteDATwirechange :: Maybe (Tree Bool)
    , _opexecuteDATexecuteloc :: Maybe (Tree Int)
    , _opexecuteDATwordwrap :: Maybe (Tree Int)
    , _opexecuteDATlanguage :: Maybe (Tree Int)
    , _opexecuteDATnamechange :: Maybe (Tree Bool)
    , _opexecuteDATprecook :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | EtherdreamDAT {
    _etherdreamDATpoll :: Maybe (Tree Bool)
    , _etherdreamDATcustomext :: Maybe (Tree ByteString)
    , _etherdreamDATlanguage :: Maybe (Tree Int)
    , _etherdreamDATextension :: Maybe (Tree Int)
    , _etherdreamDATwordwrap :: Maybe (Tree Int)
    , _etherdreamDATcallbacks :: Maybe (Tree DAT)
    , _etherdreamDATcolumns :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | MidiinDAT {
    _midiinDATid :: Maybe (Tree ByteString)
    , _midiinDATindex :: Maybe (Tree ByteString)
    , _midiinDATbytes :: Maybe (Tree Bool)
    , _midiinDATclear :: Maybe (Tree Bool)
    , _midiinDATactive :: Maybe (Tree Bool)
    , _midiinDATskiptiming :: Maybe (Tree Bool)
    , _midiinDATcustomext :: Maybe (Tree ByteString)
    , _midiinDATvalue :: Maybe (Tree ByteString)
    , _midiinDATclamp :: Maybe (Tree Bool)
    , _midiinDATchannel :: Maybe (Tree ByteString)
    , _midiinDATlanguage :: Maybe (Tree Int)
    , _midiinDATdevice :: Maybe (Tree DAT)
    , _midiinDATmessage :: Maybe (Tree ByteString)
    , _midiinDATexecuteloc :: Maybe (Tree Int)
    , _midiinDATwordwrap :: Maybe (Tree Int)
    , _midiinDATcallbacks :: Maybe (Tree DAT)
    , _midiinDATmaxlines :: Maybe (Tree Int)
    , _midiinDATskipsense :: Maybe (Tree Bool)
    , _midiinDATextension :: Maybe (Tree Int)
    , _midiinDATfilter :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | SelectDAT {
    _selectDATcolexpr :: Maybe (Tree ByteString)
    , _selectDATfromcol :: Maybe (Tree Int)
    , _selectDATrowindexstart :: Maybe (Tree Int)
    , _selectDATrownameend :: Maybe (Tree ByteString)
    , _selectDATfirstrow :: Maybe (Tree Bool)
    , _selectDATcolnamestart :: Maybe (Tree ByteString)
    , _selectDATfromrow :: Maybe (Tree Int)
    , _selectDATrowexpr :: Maybe (Tree ByteString)
    , _selectDATrownamestart :: Maybe (Tree ByteString)
    , _selectDATrowindexend :: Maybe (Tree Int)
    , _selectDAToutput :: Maybe (Tree Int)
    , _selectDATextractrows :: Maybe (Tree Int)
    , _selectDATextension :: Maybe (Tree Int)
    , _selectDATcolindexend :: Maybe (Tree Int)
    , _selectDATrownames :: Maybe (Tree ByteString)
    , _selectDATcustomext :: Maybe (Tree ByteString)
    , _selectDATlanguage :: Maybe (Tree Int)
    , _selectDATextractcols :: Maybe (Tree Int)
    , _selectDATwordwrap :: Maybe (Tree Int)
    , _selectDATcolnameend :: Maybe (Tree ByteString)
    , _selectDATdat :: Maybe (Tree DAT)
    , _selectDATfirstcol :: Maybe (Tree Bool)
    , _selectDATcolindexstart :: Maybe (Tree Int)
    , _selectDATcolnames :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | FileoutDAT {
    _fileoutDATcustomext :: Maybe (Tree ByteString)
    , _fileoutDATlanguage :: Maybe (Tree Int)
    , _fileoutDATfile :: Maybe (Tree ByteString)
    , _fileoutDATextension :: Maybe (Tree Int)
    , _fileoutDATwordwrap :: Maybe (Tree Int)
    , _fileoutDATappend :: Maybe (Tree Bool)
    , _fileoutDATn :: Maybe (Tree Int)
    , _fileoutDATwrite :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | OscoutDAT {
    _oscoutDATbundletimestamp :: Maybe (Tree Bool)
    , _oscoutDATport :: Maybe (Tree Int)
    , _oscoutDATclear :: Maybe (Tree Bool)
    , _oscoutDATactive :: Maybe (Tree Bool)
    , _oscoutDATextension :: Maybe (Tree Int)
    , _oscoutDATprotocol :: Maybe (Tree Int)
    , _oscoutDATsplitmessage :: Maybe (Tree Bool)
    , _oscoutDATaddress :: Maybe (Tree ByteString)
    , _oscoutDATshared :: Maybe (Tree Bool)
    , _oscoutDATclamp :: Maybe (Tree Bool)
    , _oscoutDATcustomext :: Maybe (Tree ByteString)
    , _oscoutDATmaxlines :: Maybe (Tree Int)
    , _oscoutDATexecuteloc :: Maybe (Tree Int)
    , _oscoutDATwordwrap :: Maybe (Tree Int)
    , _oscoutDATcallbacks :: Maybe (Tree DAT)
    , _oscoutDATlanguage :: Maybe (Tree Int)
    , _oscoutDATtypetag :: Maybe (Tree Bool)
    , _oscoutDATaddscope :: Maybe (Tree ByteString)
    , _oscoutDATsplitbundle :: Maybe (Tree Bool)
    , _oscoutDATbytes :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | MidieventDAT {
    _midieventDATindex :: Maybe (Tree ByteString)
    , _midieventDATbytes :: Maybe (Tree Bool)
    , _midieventDATclear :: Maybe (Tree Bool)
    , _midieventDATfilter :: Maybe (Tree Bool)
    , _midieventDATskiptiming :: Maybe (Tree Bool)
    , _midieventDATcustomext :: Maybe (Tree ByteString)
    , _midieventDATvalue :: Maybe (Tree ByteString)
    , _midieventDATclamp :: Maybe (Tree Bool)
    , _midieventDATchannel :: Maybe (Tree ByteString)
    , _midieventDATlanguage :: Maybe (Tree Int)
    , _midieventDATmaxlines :: Maybe (Tree Int)
    , _midieventDATmessage :: Maybe (Tree ByteString)
    , _midieventDATexecuteloc :: Maybe (Tree Int)
    , _midieventDATwordwrap :: Maybe (Tree Int)
    , _midieventDATcallbacks :: Maybe (Tree DAT)
    , _midieventDATdir :: Maybe (Tree ByteString)
    , _midieventDATskipsense :: Maybe (Tree Bool)
    , _midieventDATextension :: Maybe (Tree Int)
    , _midieventDATactive :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | ArtnetDAT {
    _artnetDATpoll :: Maybe (Tree Bool)
    , _artnetDATcustomext :: Maybe (Tree ByteString)
    , _artnetDATlanguage :: Maybe (Tree Int)
    , _artnetDATextension :: Maybe (Tree Int)
    , _artnetDATwordwrap :: Maybe (Tree Int)
    , _artnetDATcallbacks :: Maybe (Tree DAT)
    , _artnetDATcolumns :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | SubstituteDAT {
    _substituteDATexpandto :: Maybe (Tree Bool)
    , _substituteDATcolexpr :: Maybe (Tree ByteString)
    , _substituteDATfromcol :: Maybe (Tree Int)
    , _substituteDATrowindexstart :: Maybe (Tree Int)
    , _substituteDATrownameend :: Maybe (Tree ByteString)
    , _substituteDATbefore :: Maybe (Tree ByteString)
    , _substituteDATcolnamestart :: Maybe (Tree ByteString)
    , _substituteDATfromrow :: Maybe (Tree Int)
    , _substituteDATrowexpr :: Maybe (Tree ByteString)
    , _substituteDATrownamestart :: Maybe (Tree ByteString)
    , _substituteDATfirst :: Maybe (Tree Bool)
    , _substituteDATrowindexend :: Maybe (Tree Int)
    , _substituteDATcolnames :: Maybe (Tree ByteString)
    , _substituteDATexpand :: Maybe (Tree Bool)
    , _substituteDATcase :: Maybe (Tree Bool)
    , _substituteDATextractrows :: Maybe (Tree Int)
    , _substituteDATextension :: Maybe (Tree Int)
    , _substituteDATcolindexend :: Maybe (Tree Int)
    , _substituteDATrownames :: Maybe (Tree ByteString)
    , _substituteDATmatch :: Maybe (Tree Int)
    , _substituteDATxfirstrow :: Maybe (Tree Bool)
    , _substituteDATcustomext :: Maybe (Tree ByteString)
    , _substituteDATlanguage :: Maybe (Tree Int)
    , _substituteDATxfirstcol :: Maybe (Tree Bool)
    , _substituteDATwordwrap :: Maybe (Tree Int)
    , _substituteDATcolnameend :: Maybe (Tree ByteString)
    , _substituteDATafter :: Maybe (Tree ByteString)
    , _substituteDATcolindexstart :: Maybe (Tree Int)
    , _substituteDATextractcols :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | SortDAT {
    _sortDATindex :: Maybe (Tree Int)
    , _sortDATextension :: Maybe (Tree Int)
    , _sortDATreverse :: Maybe (Tree Bool)
    , _sortDATpreservefirst :: Maybe (Tree Bool)
    , _sortDATunique :: Maybe (Tree Int)
    , _sortDATname :: Maybe (Tree ByteString)
    , _sortDATignorecase :: Maybe (Tree Bool)
    , _sortDATseed :: Maybe (Tree Float)
    , _sortDATlanguage :: Maybe (Tree Int)
    , _sortDATsortmethod :: Maybe (Tree Int)
    , _sortDATwordwrap :: Maybe (Tree Int)
    , _sortDATcustomext :: Maybe (Tree ByteString)
    , _sortDATorder :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | KeyboardinDAT {
    _keyboardinDATpanels :: Maybe (Tree COMP)
    , _keyboardinDATkeys :: Maybe (Tree ByteString)
    , _keyboardinDATclear :: Maybe (Tree Bool)
    , _keyboardinDATactive :: Maybe (Tree Bool)
    , _keyboardinDATextension :: Maybe (Tree Int)
    , _keyboardinDATclamp :: Maybe (Tree Bool)
    , _keyboardinDATcustomext :: Maybe (Tree ByteString)
    , _keyboardinDATmaxlines :: Maybe (Tree Int)
    , _keyboardinDATexecuteloc :: Maybe (Tree Int)
    , _keyboardinDATwordwrap :: Maybe (Tree Int)
    , _keyboardinDATcallbacks :: Maybe (Tree DAT)
    , _keyboardinDATlanguage :: Maybe (Tree Int)
    , _keyboardinDATshortcuts :: Maybe (Tree ByteString)
    , _keyboardinDATlrmodifiers :: Maybe (Tree Bool)
    , _keyboardinDATperform :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | ParameterexecuteDAT {
    _parameterexecuteDATexpressionchange :: Maybe (Tree Bool)
    , _parameterexecuteDATmodechange :: Maybe (Tree Bool)
    , _parameterexecuteDATvaluechange :: Maybe (Tree Bool)
    , _parameterexecuteDATactive :: Maybe (Tree Bool)
    , _parameterexecuteDATextension :: Maybe (Tree Int)
    , _parameterexecuteDATonpulse :: Maybe (Tree Bool)
    , _parameterexecuteDATcustomext :: Maybe (Tree ByteString)
    , _parameterexecuteDATedit :: Maybe (Tree Bool)
    , _parameterexecuteDATpars :: Maybe (Tree ByteString)
    , _parameterexecuteDATenablechange :: Maybe (Tree Bool)
    , _parameterexecuteDATcustom :: Maybe (Tree Bool)
    , _parameterexecuteDATexecuteloc :: Maybe (Tree Int)
    , _parameterexecuteDATwordwrap :: Maybe (Tree Int)
    , _parameterexecuteDATbuiltin :: Maybe (Tree Bool)
    , _parameterexecuteDATlanguage :: Maybe (Tree Int)
    , _parameterexecuteDATexportchange :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | FifoDAT {
    _fifoDATclamp :: Maybe (Tree Bool)
    , _fifoDATlanguage :: Maybe (Tree Int)
    , _fifoDATmaxlines :: Maybe (Tree Int)
    , _fifoDATextension :: Maybe (Tree Int)
    , _fifoDATexecuteloc :: Maybe (Tree Int)
    , _fifoDATwordwrap :: Maybe (Tree Int)
    , _fifoDATcallbacks :: Maybe (Tree DAT)
    , _fifoDATclear :: Maybe (Tree Bool)
    , _fifoDATcustomext :: Maybe (Tree ByteString)
    , _fifoDATfirstrow :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | MultitouchinDAT {
    _multitouchinDATminrows :: Maybe (Tree Int)
    , _multitouchinDATwordwrap :: Maybe (Tree Int)
    , _multitouchinDATrelativeid :: Maybe (Tree Bool)
    , _multitouchinDATactive :: Maybe (Tree Bool)
    , _multitouchinDATdoubleclickthresh :: Maybe (Tree Float)
    , _multitouchinDATclamp :: Maybe (Tree Bool)
    , _multitouchinDATextension :: Maybe (Tree Int)
    , _multitouchinDATcontactthresh :: Maybe (Tree Float)
    , _multitouchinDAToutputtype :: Maybe (Tree Int)
    , _multitouchinDATposthresh :: Maybe (Tree Float)
    , _multitouchinDATmouse :: Maybe (Tree Bool)
    , _multitouchinDATlanguage :: Maybe (Tree Int)
    , _multitouchinDATmaxlines :: Maybe (Tree Int)
    , _multitouchinDATexecuteloc :: Maybe (Tree Int)
    , _multitouchinDATpanel :: Maybe (Tree COMP)
    , _multitouchinDATcallbacks :: Maybe (Tree DAT)
    , _multitouchinDATclear :: Maybe (Tree Bool)
    , _multitouchinDATcustomext :: Maybe (Tree ByteString)
    , _multitouchinDATrelativepos :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | SwitchDAT {
    _switchDATindex :: Maybe (Tree Int)
    , _switchDATcustomext :: Maybe (Tree ByteString)
    , _switchDATlanguage :: Maybe (Tree Int)
    , _switchDATextension :: Maybe (Tree Int)
    , _switchDATwordwrap :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | FolderDAT {
    _folderDATrefreshpulse :: Maybe (Tree Bool)
    , _folderDATactive :: Maybe (Tree Bool)
    , _folderDATnameformat :: Maybe (Tree Int)
    , _folderDATsizecol :: Maybe (Tree Bool)
    , _folderDATrelpathcol :: Maybe (Tree Bool)
    , _folderDATrootfolder :: Maybe (Tree ByteString)
    , _folderDATtoxextensions :: Maybe (Tree Bool)
    , _folderDATpathcol :: Maybe (Tree Bool)
    , _folderDATimageextensions :: Maybe (Tree Bool)
    , _folderDATrefresh :: Maybe (Tree Bool)
    , _folderDATtype :: Maybe (Tree Int)
    , _folderDATdatecreatedcol :: Maybe (Tree Bool)
    , _folderDATextensioncol :: Maybe (Tree Bool)
    , _folderDATbasenamecol :: Maybe (Tree Bool)
    , _folderDATdepthcol :: Maybe (Tree Bool)
    , _folderDATfolders :: Maybe (Tree ByteString)
    , _folderDATtypecol :: Maybe (Tree Bool)
    , _folderDATdateformat :: Maybe (Tree Int)
    , _folderDATnames :: Maybe (Tree ByteString)
    , _folderDATfoldercol :: Maybe (Tree Bool)
    , _folderDATwordwrap :: Maybe (Tree Int)
    , _folderDATmaxdepth :: Maybe (Tree Int)
    , _folderDATsubfolders :: Maybe (Tree Bool)
    , _folderDATdateaccessedcol :: Maybe (Tree Bool)
    , _folderDATnamecol :: Maybe (Tree Bool)
    , _folderDATmindepth :: Maybe (Tree Int)
    , _folderDATextension :: Maybe (Tree Int)
    , _folderDATcustomext :: Maybe (Tree ByteString)
    , _folderDATextensions :: Maybe (Tree ByteString)
    , _folderDATlimitdepth :: Maybe (Tree Bool)
    , _folderDATtoeextensions :: Maybe (Tree Bool)
    , _folderDATaudioextensions :: Maybe (Tree Bool)
    , _folderDATlanguage :: Maybe (Tree Int)
    , _folderDATallextensions :: Maybe (Tree Bool)
    , _folderDATdatemodifiedcol :: Maybe (Tree Bool)
    , _folderDATmovieextensions :: Maybe (Tree Bool)
    , _folderDATasync :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | MergeDAT {
    _mergeDATcustomext :: Maybe (Tree ByteString)
    , _mergeDATlanguage :: Maybe (Tree Int)
    , _mergeDATunmatched :: Maybe (Tree Bool)
    , _mergeDATspacer :: Maybe (Tree ByteString)
    , _mergeDATwordwrap :: Maybe (Tree Int)
    , _mergeDATbyname :: Maybe (Tree Bool)
    , _mergeDAThow :: Maybe (Tree Int)
    , _mergeDATdat :: Maybe (Tree DAT)
    , _mergeDATextension :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | InfoDAT {
    _infoDATcustomext :: Maybe (Tree ByteString)
    , _infoDATlanguage :: Maybe (Tree Int)
    , _infoDATpassive :: Maybe (Tree Bool)
    , _infoDATextension :: Maybe (Tree Int)
    , _infoDATwordwrap :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | TextDAT {
    _textDATedit :: Maybe (Tree Bool)
    , _textDATcustomext :: Maybe (Tree ByteString)
    , _textDATlanguage :: Maybe (Tree Int)
    , _textDATfile :: Maybe (Tree ByteString)
    , _textDATwritepulse :: Maybe (Tree Bool)
    , _textDATloadonstartpulse :: Maybe (Tree Bool)
    , _textDATloadonstart :: Maybe (Tree Bool)
    , _textDATwordwrap :: Maybe (Tree Int)
    , _textDATextension :: Maybe (Tree Int)
    , _textDATwrite :: Maybe (Tree Bool)
    , _textBlob :: Maybe (ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | OutDAT {
    _outDATcustomext :: Maybe (Tree ByteString)
    , _outDATlabel :: Maybe (Tree ByteString)
    , _outDATlanguage :: Maybe (Tree Int)
    , _outDATextension :: Maybe (Tree Int)
    , _outDATwordwrap :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | TouchoutDAT {
    _touchoutDATcustomext :: Maybe (Tree ByteString)
    , _touchoutDATlanguage :: Maybe (Tree Int)
    , _touchoutDATactive :: Maybe (Tree Bool)
    , _touchoutDATextension :: Maybe (Tree Int)
    , _touchoutDATwordwrap :: Maybe (Tree Int)
    , _touchoutDATprotocol :: Maybe (Tree Int)
    , _touchoutDATresend :: Maybe (Tree Bool)
    , _touchoutDATport :: Maybe (Tree Int)
    , _touchoutDATaddress :: Maybe (Tree ByteString)
    , _touchoutDATshared :: Maybe (Tree Bool)
    , _touchoutDATredendantsends :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | PanelexecuteDAT {
    _panelexecuteDATedit :: Maybe (Tree Bool)
    , _panelexecuteDATontooff :: Maybe (Tree Bool)
    , _panelexecuteDATwhileoff :: Maybe (Tree Bool)
    , _panelexecuteDATactive :: Maybe (Tree Bool)
    , _panelexecuteDATextension :: Maybe (Tree Int)
    , _panelexecuteDATwordwrap :: Maybe (Tree Int)
    , _panelexecuteDATwhileon :: Maybe (Tree Bool)
    , _panelexecuteDATofftoon :: Maybe (Tree Bool)
    , _panelexecuteDATcustomext :: Maybe (Tree ByteString)
    , _panelexecuteDATlanguage :: Maybe (Tree Int)
    , _panelexecuteDATexecuteloc :: Maybe (Tree Int)
    , _panelexecuteDATpanel :: Maybe (Tree COMP)
    , _panelexecuteDATvaluechange :: Maybe (Tree Bool)
    , _panelexecuteDATpanelvalue :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | FileinDAT {
    _fileinDATwordwrap :: Maybe (Tree Int)
    , _fileinDATrefreshpulse :: Maybe (Tree Bool)
    , _fileinDATlanguage :: Maybe (Tree Int)
    , _fileinDATfile :: Maybe (Tree ByteString)
    , _fileinDATextension :: Maybe (Tree Int)
    , _fileinDATrefresh :: Maybe (Tree Bool)
    , _fileinDATconverttable :: Maybe (Tree Bool)
    , _fileinDATcustomext :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | OpfindDAT {
    _opfindDATpathcol :: Maybe (Tree Bool)
    , _opfindDATmindepth :: Maybe (Tree Int)
    , _opfindDATsops :: Maybe (Tree Bool)
    , _opfindDATmaxops :: Maybe (Tree Int)
    , _opfindDATlimitmaxops :: Maybe (Tree Bool)
    , _opfindDATexcludefilter :: Maybe (Tree ByteString)
    , _opfindDATtagscol :: Maybe (Tree Bool)
    , _opfindDATcommentfilter :: Maybe (Tree ByteString)
    , _opfindDATcooktimescol :: Maybe (Tree Bool)
    , _opfindDATparnondefaultonly :: Maybe (Tree Bool)
    , _opfindDATcallbacks :: Maybe (Tree DAT)
    , _opfindDATnamefilter :: Maybe (Tree ByteString)
    , _opfindDATcookpulse :: Maybe (Tree Bool)
    , _opfindDATwordwrap :: Maybe (Tree Int)
    , _opfindDATtypecol :: Maybe (Tree Bool)
    , _opfindDATdepthcol :: Maybe (Tree Bool)
    , _opfindDATrelpathcol :: Maybe (Tree Bool)
    , _opfindDATtypefilter :: Maybe (Tree ByteString)
    , _opfindDATnamecol :: Maybe (Tree Bool)
    , _opfindDATparnamefilter :: Maybe (Tree ByteString)
    , _opfindDATmats :: Maybe (Tree Bool)
    , _opfindDATother :: Maybe (Tree Bool)
    , _opfindDATparentpath :: Maybe (Tree Bool)
    , _opfindDATcombinefilters :: Maybe (Tree Int)
    , _opfindDATlanguage :: Maybe (Tree Int)
    , _opfindDATdats :: Maybe (Tree Bool)
    , _opfindDATpanels :: Maybe (Tree Bool)
    , _opfindDATparvaluefilter :: Maybe (Tree ByteString)
    , _opfindDATparexpressionfilter :: Maybe (Tree ByteString)
    , _opfindDATtops :: Maybe (Tree Bool)
    , _opfindDATparentfilter :: Maybe (Tree ByteString)
    , _opfindDATincludecomponent :: Maybe (Tree Bool)
    , _opfindDATcasesensitive :: Maybe (Tree Bool)
    , _opfindDATextension :: Maybe (Tree Int)
    , _opfindDATcomponent :: Maybe (Tree COMP)
    , _opfindDATconvertbool :: Maybe (Tree Bool)
    , _opfindDATpathfilter :: Maybe (Tree ByteString)
    , _opfindDATconvertnone :: Maybe (Tree Bool)
    , _opfindDATmaxdepth :: Maybe (Tree Int)
    , _opfindDATobjects :: Maybe (Tree Bool)
    , _opfindDATtagsfilter :: Maybe (Tree ByteString)
    , _opfindDATcustomext :: Maybe (Tree ByteString)
    , _opfindDATlimitmaxdepth :: Maybe (Tree Bool)
    , _opfindDATidcol :: Maybe (Tree Bool)
    , _opfindDATchops :: Maybe (Tree Bool)
    , _opfindDATactivecook :: Maybe (Tree Int)
    , _opfindDATtextfilter :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | MqttclientDAT {
    _mqttclientDATclear :: Maybe (Tree Bool)
    , _mqttclientDATactive :: Maybe (Tree Bool)
    , _mqttclientDATextension :: Maybe (Tree Int)
    , _mqttclientDATclamp :: Maybe (Tree Bool)
    , _mqttclientDATexecuteloc :: Maybe (Tree Int)
    , _mqttclientDATreconnect :: Maybe (Tree Bool)
    , _mqttclientDATspecifyid :: Maybe (Tree Bool)
    , _mqttclientDATmaxinflight :: Maybe (Tree Int)
    , _mqttclientDATcleansession :: Maybe (Tree Bool)
    , _mqttclientDATkeepalive :: Maybe (Tree Int)
    , _mqttclientDATwordwrap :: Maybe (Tree Int)
    , _mqttclientDATcallbacks :: Maybe (Tree DAT)
    , _mqttclientDATmaxlines :: Maybe (Tree Int)
    , _mqttclientDATusercid :: Maybe (Tree ByteString)
    , _mqttclientDATcustomext :: Maybe (Tree ByteString)
    , _mqttclientDATnetaddress :: Maybe (Tree ByteString)
    , _mqttclientDATlanguage :: Maybe (Tree Int)
    , _mqttclientDATbytes :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | WebsocketDAT {
    _websocketDATclear :: Maybe (Tree Bool)
    , _websocketDATactive :: Maybe (Tree Bool)
    , _websocketDATextension :: Maybe (Tree Int)
    , _websocketDATcustomext :: Maybe (Tree ByteString)
    , _websocketDATsocketio :: Maybe (Tree Bool)
    , _websocketDATclamp :: Maybe (Tree Bool)
    , _websocketDATlanguage :: Maybe (Tree Int)
    , _websocketDATmaxlines :: Maybe (Tree Int)
    , _websocketDATexecuteloc :: Maybe (Tree Int)
    , _websocketDATwordwrap :: Maybe (Tree Int)
    , _websocketDATcallbacks :: Maybe (Tree DAT)
    , _websocketDATbytes :: Maybe (Tree Bool)
    , _websocketDATport :: Maybe (Tree Int)
    , _websocketDATnetaddress :: Maybe (Tree ByteString)
    , _websocketDATsocketioaddress :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | UdpoutDAT {
    _udpoutDATbytes :: Maybe (Tree Bool)
    , _udpoutDATformat :: Maybe (Tree Int)
    , _udpoutDATactive :: Maybe (Tree Bool)
    , _udpoutDATextension :: Maybe (Tree Int)
    , _udpoutDATcustomext :: Maybe (Tree ByteString)
    , _udpoutDATprotocol :: Maybe (Tree Int)
    , _udpoutDATlocalport :: Maybe (Tree Int)
    , _udpoutDATaddress :: Maybe (Tree ByteString)
    , _udpoutDATshared :: Maybe (Tree Bool)
    , _udpoutDATclamp :: Maybe (Tree Bool)
    , _udpoutDATlanguage :: Maybe (Tree Int)
    , _udpoutDATmaxlines :: Maybe (Tree Int)
    , _udpoutDATexecuteloc :: Maybe (Tree Int)
    , _udpoutDATwordwrap :: Maybe (Tree Int)
    , _udpoutDATcallbacks :: Maybe (Tree DAT)
    , _udpoutDATclear :: Maybe (Tree Bool)
    , _udpoutDATport :: Maybe (Tree Int)
    , _udpoutDATlocalportmode :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | SoptoDAT {
    _soptoDATwordwrap :: Maybe (Tree Int)
    , _soptoDATcustomext :: Maybe (Tree ByteString)
    , _soptoDATlanguage :: Maybe (Tree Int)
    , _soptoDATsop :: Maybe (Tree SOP)
    , _soptoDATgroup :: Maybe (Tree ByteString)
    , _soptoDATextract :: Maybe (Tree Int)
    , _soptoDATattrib :: Maybe (Tree ByteString)
    , _soptoDATuvforpts :: Maybe (Tree Bool)
    , _soptoDATextension :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | RenderpickDAT {
    _renderpickDATposition :: Maybe (Tree Int)
    , _renderpickDATwordwrap :: Maybe (Tree Int)
    , _renderpickDATdepth :: Maybe (Tree Bool)
    , _renderpickDATextension :: Maybe (Tree Int)
    , _renderpickDATcolor :: Maybe (Tree Bool)
    , _renderpickDATcustomattrib2type :: Maybe (Tree Int)
    , _renderpickDATpickradstep :: Maybe (Tree Int)
    , _renderpickDATcustomattrib1 :: Maybe (Tree ByteString)
    , _renderpickDATcustomattrib2 :: Maybe (Tree ByteString)
    , _renderpickDATallowmulticamera :: Maybe (Tree Bool)
    , _renderpickDATclearprev :: Maybe (Tree Bool)
    , _renderpickDATcallbacks :: Maybe (Tree DAT)
    , _renderpickDATactivatecallbacks :: Maybe (Tree Bool)
    , _renderpickDATmergeinputdat :: Maybe (Tree Bool)
    , _renderpickDATpickradius :: Maybe (Tree Int)
    , _renderpickDATcustomattrib1type :: Maybe (Tree Int)
    , _renderpickDATlanguage :: Maybe (Tree Int)
    , _renderpickDATpickcirstep :: Maybe (Tree Int)
    , _renderpickDATcustomattrib3type :: Maybe (Tree Int)
    , _renderpickDATcustomattrib3 :: Maybe (Tree ByteString)
    , _renderpickDATstrategy :: Maybe (Tree Int)
    , _renderpickDATuv :: Maybe (Tree Bool)
    , _renderpickDATrendertop :: Maybe (Tree TOP)
    , _renderpickDATusepickableflags :: Maybe (Tree Bool)
    , _renderpickDATcustomattrib4 :: Maybe (Tree ByteString)
    , _renderpickDATinstanceid :: Maybe (Tree Bool)
    , _renderpickDATcustomattrib4type :: Maybe (Tree Int)
    , _renderpickDATresponsetime :: Maybe (Tree Int)
    , _renderpickDATincludenonpickable :: Maybe (Tree Bool)
    , _renderpickDATnormal :: Maybe (Tree Int)
    , _renderpickDATcustomext :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | TouchinDAT {
    _touchinDATcustomext :: Maybe (Tree ByteString)
    , _touchinDATlanguage :: Maybe (Tree Int)
    , _touchinDATactive :: Maybe (Tree Bool)
    , _touchinDATextension :: Maybe (Tree Int)
    , _touchinDATwordwrap :: Maybe (Tree Int)
    , _touchinDATprotocol :: Maybe (Tree Int)
    , _touchinDATport :: Maybe (Tree Int)
    , _touchinDATaddress :: Maybe (Tree ByteString)
    , _touchinDATshared :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | TransposeDAT {
    _transposeDATcustomext :: Maybe (Tree ByteString)
    , _transposeDATlanguage :: Maybe (Tree Int)
    , _transposeDATextension :: Maybe (Tree Int)
    , _transposeDATwordwrap :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | InDAT {
    _inDATcustomext :: Maybe (Tree ByteString)
    , _inDATlabel :: Maybe (Tree ByteString)
    , _inDATlanguage :: Maybe (Tree Int)
    , _inDATextension :: Maybe (Tree Int)
    , _inDATwordwrap :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | MonitorsDAT {
    _monitorsDATcustomext :: Maybe (Tree ByteString)
    , _monitorsDATlanguage :: Maybe (Tree Int)
    , _monitorsDATextension :: Maybe (Tree Int)
    , _monitorsDATwordwrap :: Maybe (Tree Int)
    , _monitorsDATcallbacks :: Maybe (Tree DAT)
    , _monitorsDATbounds :: Maybe (Tree Bool)
    , _monitorsDATunits :: Maybe (Tree Int)
    , _monitorsDATmonitors :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | UdpinDAT {
    _udpinDATformat :: Maybe (Tree Int)
    , _udpinDATactive :: Maybe (Tree Bool)
    , _udpinDATextension :: Maybe (Tree Int)
    , _udpinDATcustomext :: Maybe (Tree ByteString)
    , _udpinDATprotocol :: Maybe (Tree Int)
    , _udpinDATaddress :: Maybe (Tree ByteString)
    , _udpinDATshared :: Maybe (Tree Bool)
    , _udpinDATclamp :: Maybe (Tree Bool)
    , _udpinDATlanguage :: Maybe (Tree Int)
    , _udpinDATmaxlines :: Maybe (Tree Int)
    , _udpinDATexecuteloc :: Maybe (Tree Int)
    , _udpinDATwordwrap :: Maybe (Tree Int)
    , _udpinDATcallbacks :: Maybe (Tree DAT)
    , _udpinDATclear :: Maybe (Tree Bool)
    , _udpinDATport :: Maybe (Tree Int)
    , _udpinDATbytes :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | ExamineDAT {
    _examineDATtype :: Maybe (Tree ByteString)
    , _examineDATsubkey :: Maybe (Tree ByteString)
    , _examineDATextension :: Maybe (Tree Int)
    , _examineDAToutputkey :: Maybe (Tree Bool)
    , _examineDATvalue :: Maybe (Tree ByteString)
    , _examineDAToutputheaders :: Maybe (Tree Bool)
    , _examineDATwordwrap :: Maybe (Tree Int)
    , _examineDAToutputtype :: Maybe (Tree Bool)
    , _examineDAToutputlevel :: Maybe (Tree Bool)
    , _examineDATmaxlevels :: Maybe (Tree Int)
    , _examineDATexpandclasses :: Maybe (Tree Bool)
    , _examineDATcustomext :: Maybe (Tree ByteString)
    , _examineDATlanguage :: Maybe (Tree Int)
    , _examineDATlevel :: Maybe (Tree ByteString)
    , _examineDATformat :: Maybe (Tree Int)
    , _examineDATexpression :: Maybe (Tree ByteString)
    , _examineDATsource :: Maybe (Tree Int)
    , _examineDAToutputvalue :: Maybe (Tree Bool)
    , _examineDATkey :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | WebDAT {
    _webDATfetch :: Maybe (Tree Bool)
    , _webDATextension :: Maybe (Tree Int)
    , _webDATwordwrap :: Maybe (Tree Int)
    , _webDATurl :: Maybe (Tree ByteString)
    , _webDATdisconnect :: Maybe (Tree Bool)
    , _webDATsubmitfetch :: Maybe (Tree Bool)
    , _webDATincludeheader :: Maybe (Tree Bool)
    , _webDATcustomext :: Maybe (Tree ByteString)
    , _webDATlanguage :: Maybe (Tree Int)
    , _webDATasyncfetch :: Maybe (Tree Bool)
    , _webDATverifypeer :: Maybe (Tree Bool)
    , _webDATtimeout :: Maybe (Tree Int)
    , _webDATmethod :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | UdtoutDAT {
    _udtoutDATformat :: Maybe (Tree Int)
    , _udtoutDATactive :: Maybe (Tree Bool)
    , _udtoutDATextension :: Maybe (Tree Int)
    , _udtoutDATcustomext :: Maybe (Tree ByteString)
    , _udtoutDATprotocol :: Maybe (Tree Int)
    , _udtoutDATshared :: Maybe (Tree Bool)
    , _udtoutDATclamp :: Maybe (Tree Bool)
    , _udtoutDATlanguage :: Maybe (Tree Int)
    , _udtoutDATmaxlines :: Maybe (Tree Int)
    , _udtoutDATexecuteloc :: Maybe (Tree Int)
    , _udtoutDATwordwrap :: Maybe (Tree Int)
    , _udtoutDATcallbacks :: Maybe (Tree DAT)
    , _udtoutDATclear :: Maybe (Tree Bool)
    , _udtoutDATport :: Maybe (Tree Int)
    , _udtoutDATbytes :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | IndicesDAT {
    _indicesDATstart :: Maybe (Tree Float)
    , _indicesDATend :: Maybe (Tree Float)
    , _indicesDATcustomext :: Maybe (Tree ByteString)
    , _indicesDATlanguage :: Maybe (Tree Int)
    , _indicesDATextension :: Maybe (Tree Int)
    , _indicesDATlevel :: Maybe (Tree Int)
    , _indicesDATwordwrap :: Maybe (Tree Int)
    , _indicesDATorigin :: Maybe (Tree Float)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | DatexecuteDAT {
    _datexecuteDATrowchange :: Maybe (Tree Bool)
    , _datexecuteDATedit :: Maybe (Tree Bool)
    , _datexecuteDATactive :: Maybe (Tree Bool)
    , _datexecuteDATextension :: Maybe (Tree Int)
    , _datexecuteDATtablechange :: Maybe (Tree Bool)
    , _datexecuteDATexecute :: Maybe (Tree Int)
    , _datexecuteDATcustomext :: Maybe (Tree ByteString)
    , _datexecuteDATlanguage :: Maybe (Tree Int)
    , _datexecuteDATexecuteloc :: Maybe (Tree Int)
    , _datexecuteDATwordwrap :: Maybe (Tree Int)
    , _datexecuteDATcolchange :: Maybe (Tree Bool)
    , _datexecuteDATcellchange :: Maybe (Tree Bool)
    , _datexecuteDATdat :: Maybe (Tree DAT)
    , _datexecuteDATsizechange :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | TableDAT {
    _tableDATcols :: Maybe (Tree Int)
    , _tableDATfile :: Maybe (Tree ByteString)
    , _tableDATwritepulse :: Maybe (Tree Bool)
    , _tableDATedit :: Maybe (Tree Bool)
    , _tableDATrows :: Maybe (Tree Int)
    , _tableDATwrite :: Maybe (Tree Bool)
    , _tableDATloadonstartpulse :: Maybe (Tree Bool)
    , _tableDATcustomext :: Maybe (Tree ByteString)
    , _tableDATlanguage :: Maybe (Tree Int)
    , _tableDATwordwrap :: Maybe (Tree Int)
    , _tableDATloadonstart :: Maybe (Tree Bool)
    , _tableDATdims :: Maybe (Tree Bool)
    , _tableDATextension :: Maybe (Tree Int)
    , _tableDATremoveblank :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | XmlDAT {
    _xmlDATextension :: Maybe (Tree Int)
    , _xmlDATpvalue :: Maybe (Tree ByteString)
    , _xmlDAToavalue :: Maybe (Tree ByteString)
    , _xmlDATpname :: Maybe (Tree ByteString)
    , _xmlDATlabel :: Maybe (Tree ByteString)
    , _xmlDATplabel :: Maybe (Tree ByteString)
    , _xmlDATmlabel :: Maybe (Tree ByteString)
    , _xmlDATtext :: Maybe (Tree ByteString)
    , _xmlDATmerge :: Maybe (Tree Int)
    , _xmlDATsgml :: Maybe (Tree Bool)
    , _xmlDATtype :: Maybe (Tree ByteString)
    , _xmlDAToaname :: Maybe (Tree ByteString)
    , _xmlDATshow :: Maybe (Tree Int)
    , _xmlDATptext :: Maybe (Tree ByteString)
    , _xmlDATname :: Maybe (Tree ByteString)
    , _xmlDATlprefix :: Maybe (Tree Bool)
    , _xmlDATptype :: Maybe (Tree ByteString)
    , _xmlDATcustomext :: Maybe (Tree ByteString)
    , _xmlDATlanguage :: Maybe (Tree Int)
    , _xmlDATwordwrap :: Maybe (Tree Int)
    , _xmlDATvalue :: Maybe (Tree ByteString)
    , _xmlDAToclabel :: Maybe (Tree ByteString)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | InsertDAT {
    _insertDATindex :: Maybe (Tree Int)
    , _insertDATcustomext :: Maybe (Tree ByteString)
    , _insertDATlanguage :: Maybe (Tree Int)
    , _insertDATextension :: Maybe (Tree Int)
    , _insertDATcontents :: Maybe (Tree ByteString)
    , _insertDATinsert :: Maybe (Tree Int)
    , _insertDATwordwrap :: Maybe (Tree Int)
    , _insertDATat :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | ExecuteDAT {
    _executeDATdevicechange :: Maybe (Tree Bool)
    , _executeDATstart :: Maybe (Tree Bool)
    , _executeDATactive :: Maybe (Tree Bool)
    , _executeDATextension :: Maybe (Tree Int)
    , _executeDATplaystatechange :: Maybe (Tree Bool)
    , _executeDATedit :: Maybe (Tree Bool)
    , _executeDATwordwrap :: Maybe (Tree Int)
    , _executeDATprojectpostsave :: Maybe (Tree Bool)
    , _executeDATframeend :: Maybe (Tree Bool)
    , _executeDATprojectpresave :: Maybe (Tree Bool)
    , _executeDATcreate :: Maybe (Tree Bool)
    , _executeDATcustomext :: Maybe (Tree ByteString)
    , _executeDATexit :: Maybe (Tree Bool)
    , _executeDATexecuteloc :: Maybe (Tree Int)
    , _executeDATframestart :: Maybe (Tree Bool)
    , _executeDATlanguage :: Maybe (Tree Int)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | OscinDAT {
    _oscinDATbundletimestamp :: Maybe (Tree Bool)
    , _oscinDATport :: Maybe (Tree Int)
    , _oscinDATclear :: Maybe (Tree Bool)
    , _oscinDATactive :: Maybe (Tree Bool)
    , _oscinDATextension :: Maybe (Tree Int)
    , _oscinDATprotocol :: Maybe (Tree Int)
    , _oscinDATsplitmessage :: Maybe (Tree Bool)
    , _oscinDATaddress :: Maybe (Tree ByteString)
    , _oscinDATshared :: Maybe (Tree Bool)
    , _oscinDATclamp :: Maybe (Tree Bool)
    , _oscinDATcustomext :: Maybe (Tree ByteString)
    , _oscinDATmaxlines :: Maybe (Tree Int)
    , _oscinDATexecuteloc :: Maybe (Tree Int)
    , _oscinDATwordwrap :: Maybe (Tree Int)
    , _oscinDATcallbacks :: Maybe (Tree DAT)
    , _oscinDATlanguage :: Maybe (Tree Int)
    , _oscinDATtypetag :: Maybe (Tree Bool)
    , _oscinDATaddscope :: Maybe (Tree ByteString)
    , _oscinDATsplitbundle :: Maybe (Tree Bool)
    , _oscinDATbytes :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }
  | UdtinDAT {
    _udtinDATformat :: Maybe (Tree Int)
    , _udtinDATactive :: Maybe (Tree Bool)
    , _udtinDATextension :: Maybe (Tree Int)
    , _udtinDATcustomext :: Maybe (Tree ByteString)
    , _udtinDATprotocol :: Maybe (Tree Int)
    , _udtinDATaddress :: Maybe (Tree ByteString)
    , _udtinDATshared :: Maybe (Tree Bool)
    , _udtinDATclamp :: Maybe (Tree Bool)
    , _udtinDATlanguage :: Maybe (Tree Int)
    , _udtinDATmaxlines :: Maybe (Tree Int)
    , _udtinDATexecuteloc :: Maybe (Tree Int)
    , _udtinDATwordwrap :: Maybe (Tree Int)
    , _udtinDATcallbacks :: Maybe (Tree DAT)
    , _udtinDATclear :: Maybe (Tree Bool)
    , _udtinDATport :: Maybe (Tree Int)
    , _udtinDATbytes :: Maybe (Tree Bool)
    , _datCommands :: [CommandType]
    , _datIns :: [Tree DAT]
  }


data COMP = 
  FieldCOMP {
    _fieldCOMPtopborder :: Maybe (Tree Int)
    , _fieldCOMPfieldprotected :: Maybe (Tree Bool)
    , _fieldCOMPscrollbarthickness :: Maybe (Tree Int)
    , _fieldCOMPw :: Maybe (Tree Int)
    , _fieldCOMPalignorder :: Maybe (Tree Float)
    , _fieldCOMPloadondemand :: Maybe (Tree Bool)
    , _fieldCOMPjustifyh :: Maybe (Tree Int)
    , _fieldCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _fieldCOMPdropdestscript :: Maybe (Tree DAT)
    , _fieldCOMPrepositionxmin :: Maybe (Tree Float)
    , _fieldCOMPx :: Maybe (Tree Int)
    , _fieldCOMPnodeview :: Maybe (Tree Int)
    , _fieldCOMPrepositionymax :: Maybe (Tree Float)
    , _fieldCOMPmargint :: Maybe (Tree Float)
    , _fieldCOMPresizer :: Maybe (Tree Bool)
    , _fieldCOMPdroptypescript :: Maybe (Tree DAT)
    , _fieldCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _fieldCOMPfixedaspect :: Maybe (Tree Int)
    , _fieldCOMPextname1 :: Maybe (Tree ByteString)
    , _fieldCOMPmarginl :: Maybe (Tree Float)
    , _fieldCOMPdodisablecolor :: Maybe (Tree Bool)
    , _fieldCOMPmultitouch :: Maybe (Tree Int)
    , _fieldCOMPbgalpha :: Maybe (Tree Float)
    , _fieldCOMPfieldnoshift :: Maybe (Tree Bool)
    , _fieldCOMPhmode :: Maybe (Tree Int)
    , _fieldCOMPsavebackup :: Maybe (Tree Bool)
    , _fieldCOMPuvbuttonsmiddle :: Maybe (Tree Bool)
    , _fieldCOMPleftanchor :: Maybe (Tree Float)
    , _fieldCOMPclickthrough :: Maybe (Tree Bool)
    , _fieldCOMPdisablealpha :: Maybe (Tree Float)
    , _fieldCOMPvmode :: Maybe (Tree Int)
    , _fieldCOMPvorigin :: Maybe (Tree Float)
    , _fieldCOMPdrag :: Maybe (Tree Int)
    , _fieldCOMPdisablecolor :: Vec3
    , _fieldCOMPresizehmin :: Maybe (Tree Float)
    , _fieldCOMPextname3 :: Maybe (Tree ByteString)
    , _fieldCOMPborderaalpha :: Maybe (Tree Float)
    , _fieldCOMPoverlay :: Maybe (Tree Bool)
    , _fieldCOMPrepositionymin :: Maybe (Tree Float)
    , _fieldCOMPenablecloning :: Maybe (Tree Bool)
    , _fieldCOMPsubcompname :: Maybe (Tree ByteString)
    , _fieldCOMPalign :: Maybe (Tree Int)
    , _fieldCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _fieldCOMPreinitnet :: Maybe (Tree Bool)
    , _fieldCOMPfieldcursor :: Maybe (Tree Bool)
    , _fieldCOMPmarginr :: Maybe (Tree Float)
    , _fieldCOMPparentshortcut :: Maybe (Tree ByteString)
    , _fieldCOMPresizet :: Maybe (Tree Bool)
    , _fieldCOMPextension4 :: Maybe (Tree ByteString)
    , _fieldCOMPfieldconspaces :: Maybe (Tree Bool)
    , _fieldCOMPleftborderi :: Maybe (Tree Int)
    , _fieldCOMPrepocomp :: Maybe (Tree COMP)
    , _fieldCOMPtopanchor :: Maybe (Tree Float)
    , _fieldCOMPanchordrag :: Maybe (Tree Int)
    , _fieldCOMPbottomborderi :: Maybe (Tree Int)
    , _fieldCOMPrightborder :: Maybe (Tree Int)
    , _fieldCOMPbottomborder :: Maybe (Tree Int)
    , _fieldCOMPlayer :: Maybe (Tree Float)
    , _fieldCOMPchop :: Maybe (Tree CHOP)
    , _fieldCOMPreinitextensions :: Maybe (Tree Bool)
    , _fieldCOMPtopborderi :: Maybe (Tree Int)
    , _fieldCOMPalignallow :: Maybe (Tree Int)
    , _fieldCOMPdragdropcallbacks :: Maybe (Tree DAT)
    , _fieldCOMPrightborderi :: Maybe (Tree Int)
    , _fieldCOMPresizel :: Maybe (Tree Bool)
    , _fieldCOMPvfillweight :: Maybe (Tree Float)
    , _fieldCOMPborderover :: Maybe (Tree Bool)
    , _fieldCOMPnamedchop :: Maybe (Tree Bool)
    , _fieldCOMPmarginb :: Maybe (Tree Float)
    , _fieldCOMPrepositionxmax :: Maybe (Tree Float)
    , _fieldCOMPextension2 :: Maybe (Tree ByteString)
    , _fieldCOMPborderbalpha :: Maybe (Tree Float)
    , _fieldCOMPjustifyv :: Maybe (Tree Int)
    , _fieldCOMPpostoffset :: Vec2
    , _fieldCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _fieldCOMPtopoffset :: Maybe (Tree Float)
    , _fieldCOMPcomposite :: Maybe (Tree Int)
    , _fieldCOMPdragscript :: Maybe (Tree DAT)
    , _fieldCOMPmultrgb :: Maybe (Tree Bool)
    , _fieldCOMPextension1 :: Maybe (Tree ByteString)
    , _fieldCOMPdrop :: Maybe (Tree Int)
    , _fieldCOMPfieldfocus :: Maybe (Tree DAT)
    , _fieldCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _fieldCOMPbordera :: Vec3
    , _fieldCOMPuvbuttonsleft :: Maybe (Tree Bool)
    , _fieldCOMPbgcolor :: Vec3
    , _fieldCOMPresizehmax :: Maybe (Tree Float)
    , _fieldCOMPhelpdat :: Maybe (Tree DAT)
    , _fieldCOMPextension3 :: Maybe (Tree ByteString)
    , _fieldCOMPfieldtype :: Maybe (Tree Int)
    , _fieldCOMPexternaltox :: Maybe (Tree ByteString)
    , _fieldCOMPrightanchor :: Maybe (Tree Float)
    , _fieldCOMPextname2 :: Maybe (Tree ByteString)
    , _fieldCOMPh :: Maybe (Tree Int)
    , _fieldCOMPleftborder :: Maybe (Tree Int)
    , _fieldCOMPtopfill :: Maybe (Tree Int)
    , _fieldCOMPresizewmin :: Maybe (Tree Float)
    , _fieldCOMPmouserel :: Maybe (Tree Bool)
    , _fieldCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _fieldCOMPoffset :: Vec2
    , _fieldCOMPresizeb :: Maybe (Tree Bool)
    , _fieldCOMPleftoffset :: Maybe (Tree Float)
    , _fieldCOMPy :: Maybe (Tree Int)
    , _fieldCOMPpvscrollbar :: Maybe (Tree Int)
    , _fieldCOMPcrop :: Maybe (Tree Int)
    , _fieldCOMPbottomoffset :: Maybe (Tree Float)
    , _fieldCOMPdisplay :: Maybe (Tree Bool)
    , _fieldCOMPfit :: Maybe (Tree Int)
    , _fieldCOMPaspect :: Maybe (Tree Float)
    , _fieldCOMPextname4 :: Maybe (Tree ByteString)
    , _fieldCOMPuvbuttonsright :: Maybe (Tree Bool)
    , _fieldCOMPresizewmax :: Maybe (Tree Float)
    , _fieldCOMPborderb :: Vec3
    , _fieldCOMPbottomanchor :: Maybe (Tree Float)
    , _fieldCOMPsizefromwindow :: Maybe (Tree Bool)
    , _fieldCOMPopacity :: Maybe (Tree Float)
    , _fieldCOMPtop :: Maybe (Tree TOP)
    , _fieldCOMPmousewheel :: Maybe (Tree Bool)
    , _fieldCOMPoverridemethod :: Maybe (Tree Int)
    , _fieldCOMPreposition :: Maybe (Tree Int)
    , _fieldCOMPenable :: Maybe (Tree Bool)
    , _fieldCOMPfieldexpand :: Maybe (Tree Bool)
    , _fieldCOMPrightoffset :: Maybe (Tree Float)
    , _fieldCOMPvieweraspect :: Maybe (Tree Int)
    , _fieldCOMPalignmax :: Maybe (Tree Int)
    , _fieldCOMPscrolloverlay :: Maybe (Tree Int)
    , _fieldCOMPclone :: Maybe (Tree COMP)
    , _fieldCOMPkeepmemory :: Maybe (Tree Bool)
    , _fieldCOMPdropscript :: Maybe (Tree DAT)
    , _fieldCOMPfieldlock :: Maybe (Tree Bool)
    , _fieldCOMPhfillweight :: Maybe (Tree Float)
    , _fieldCOMPhorigin :: Maybe (Tree Float)
    , _fieldCOMPspacing :: Maybe (Tree Float)
    , _fieldCOMPscale :: Vec2
    , _fieldCOMPphscrollbar :: Maybe (Tree Int)
    , _fieldCOMPopshortcut :: Maybe (Tree ByteString)
    , _fieldCOMPcursor :: Maybe (Tree Int)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | SharedmemoutCOMP {
    _sharedmemoutCOMPinstancea :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancerotupy :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPextname1 :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancerottoz :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _sharedmemoutCOMPinstanceb :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPextension4 :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPpathorient :: Maybe (Tree Bool)
    , _sharedmemoutCOMProll :: Maybe (Tree Float)
    , _sharedmemoutCOMPnodeview :: Maybe (Tree Int)
    , _sharedmemoutCOMPinstancepx :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPpt :: Vec3
    , _sharedmemoutCOMPinstancetexanisotropy :: Maybe (Tree Int)
    , _sharedmemoutCOMPprioritymethod :: Maybe (Tree Int)
    , _sharedmemoutCOMPinstancefirstrow :: Maybe (Tree Int)
    , _sharedmemoutCOMPbank :: Maybe (Tree Float)
    , _sharedmemoutCOMPinstancety :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancery :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPp :: Vec3
    , _sharedmemoutCOMPsavebackup :: Maybe (Tree Bool)
    , _sharedmemoutCOMPpos :: Maybe (Tree Float)
    , _sharedmemoutCOMPpathsop :: Maybe (Tree SOP)
    , _sharedmemoutCOMPsubcompname :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPpickpriority :: Maybe (Tree Float)
    , _sharedmemoutCOMPinstancetexfilter :: Maybe (Tree Int)
    , _sharedmemoutCOMPpr :: Vec3
    , _sharedmemoutCOMPinstanceg :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancetexmode :: Maybe (Tree Int)
    , _sharedmemoutCOMPwcolor :: Vec3
    , _sharedmemoutCOMPinstancepy :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _sharedmemoutCOMPinstancesz :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPexternaltox :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPparentshortcut :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancesy :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPnuminstances :: Maybe (Tree Int)
    , _sharedmemoutCOMPup :: Vec3
    , _sharedmemoutCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _sharedmemoutCOMPinstrord :: Maybe (Tree Int)
    , _sharedmemoutCOMPpxord :: Maybe (Tree Int)
    , _sharedmemoutCOMPinstancetexindex :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancerottox :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPreinitextensions :: Maybe (Tree Bool)
    , _sharedmemoutCOMPinstancesx :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancing :: Maybe (Tree Bool)
    , _sharedmemoutCOMPname :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPprord :: Maybe (Tree Int)
    , _sharedmemoutCOMPlookup :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancerz :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPextension2 :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPdrawpriority :: Maybe (Tree Float)
    , _sharedmemoutCOMPinstanceu :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPrender :: Maybe (Tree Bool)
    , _sharedmemoutCOMPextension1 :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPps :: Vec3
    , _sharedmemoutCOMPinstancetexextendv :: Maybe (Tree Int)
    , _sharedmemoutCOMPextension3 :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPpxform :: Maybe (Tree Bool)
    , _sharedmemoutCOMPmaterial :: Maybe (Tree MAT)
    , _sharedmemoutCOMPinstancer :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPr :: Vec3
    , _sharedmemoutCOMPenablecloning :: Maybe (Tree Bool)
    , _sharedmemoutCOMPinstancecolormode :: Maybe (Tree Int)
    , _sharedmemoutCOMPpp :: Vec3
    , _sharedmemoutCOMPinstancew :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancerx :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPextname2 :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPopshortcut :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPpcommit :: Maybe (Tree Bool)
    , _sharedmemoutCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _sharedmemoutCOMPinstanceorder :: Maybe (Tree Int)
    , _sharedmemoutCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _sharedmemoutCOMPreinitnet :: Maybe (Tree Bool)
    , _sharedmemoutCOMPinstancetexextendu :: Maybe (Tree Int)
    , _sharedmemoutCOMPinstancemode :: Maybe (Tree Int)
    , _sharedmemoutCOMPinstancerottoorder :: Maybe (Tree Int)
    , _sharedmemoutCOMPinstancepz :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancetexs :: Maybe (Tree TOP)
    , _sharedmemoutCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _sharedmemoutCOMPactive :: Maybe (Tree Bool)
    , _sharedmemoutCOMPextname4 :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancetx :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancerotupz :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPrord :: Maybe (Tree Int)
    , _sharedmemoutCOMPpreset :: Maybe (Tree Bool)
    , _sharedmemoutCOMPxord :: Maybe (Tree Int)
    , _sharedmemoutCOMPt :: Vec3
    , _sharedmemoutCOMPs :: Vec3
    , _sharedmemoutCOMPextname3 :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPclone :: Maybe (Tree COMP)
    , _sharedmemoutCOMPinstxord :: Maybe (Tree Int)
    , _sharedmemoutCOMPinstancerotupx :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancetexextendw :: Maybe (Tree Int)
    , _sharedmemoutCOMPloadondemand :: Maybe (Tree Bool)
    , _sharedmemoutCOMPinstancerottoy :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancev :: Maybe (Tree ByteString)
    , _sharedmemoutCOMPinstancetz :: Maybe (Tree ByteString)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | TableCOMP {
    _tableCOMPtopborder :: Maybe (Tree Int)
    , _tableCOMPscrollbarthickness :: Maybe (Tree Int)
    , _tableCOMPw :: Maybe (Tree Int)
    , _tableCOMPalignorder :: Maybe (Tree Float)
    , _tableCOMPloadondemand :: Maybe (Tree Bool)
    , _tableCOMPjustifyh :: Maybe (Tree Int)
    , _tableCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _tableCOMPtablereset :: Maybe (Tree Bool)
    , _tableCOMPrepositionxmin :: Maybe (Tree Float)
    , _tableCOMPx :: Maybe (Tree Int)
    , _tableCOMPnodeview :: Maybe (Tree Int)
    , _tableCOMPrepositionymax :: Maybe (Tree Float)
    , _tableCOMPmargint :: Maybe (Tree Float)
    , _tableCOMPresizer :: Maybe (Tree Bool)
    , _tableCOMPdragscript :: Maybe (Tree DAT)
    , _tableCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _tableCOMPfixedaspect :: Maybe (Tree Int)
    , _tableCOMPextname1 :: Maybe (Tree ByteString)
    , _tableCOMPmarginl :: Maybe (Tree Float)
    , _tableCOMPdodisablecolor :: Maybe (Tree Bool)
    , _tableCOMPmultitouch :: Maybe (Tree Int)
    , _tableCOMPbgalpha :: Maybe (Tree Float)
    , _tableCOMPhmode :: Maybe (Tree Int)
    , _tableCOMPsavebackup :: Maybe (Tree Bool)
    , _tableCOMPuvbuttonsmiddle :: Maybe (Tree Bool)
    , _tableCOMPleftanchor :: Maybe (Tree Float)
    , _tableCOMPclickthrough :: Maybe (Tree Bool)
    , _tableCOMPdisablealpha :: Maybe (Tree Float)
    , _tableCOMPvmode :: Maybe (Tree Int)
    , _tableCOMPdroptypescript :: Maybe (Tree DAT)
    , _tableCOMPvorigin :: Maybe (Tree Float)
    , _tableCOMPdrag :: Maybe (Tree Int)
    , _tableCOMPdisablecolor :: Vec3
    , _tableCOMPresizehmin :: Maybe (Tree Float)
    , _tableCOMPextname3 :: Maybe (Tree ByteString)
    , _tableCOMPborderaalpha :: Maybe (Tree Float)
    , _tableCOMPoverlay :: Maybe (Tree Bool)
    , _tableCOMPrepositionymin :: Maybe (Tree Float)
    , _tableCOMPenablecloning :: Maybe (Tree Bool)
    , _tableCOMPsubcompname :: Maybe (Tree ByteString)
    , _tableCOMPrightanchor :: Maybe (Tree Float)
    , _tableCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _tableCOMPdropdestscript :: Maybe (Tree DAT)
    , _tableCOMPmarginr :: Maybe (Tree Float)
    , _tableCOMPparentshortcut :: Maybe (Tree ByteString)
    , _tableCOMPmousewheel :: Maybe (Tree Bool)
    , _tableCOMPextension4 :: Maybe (Tree ByteString)
    , _tableCOMPcolattributes :: Maybe (Tree DAT)
    , _tableCOMPphscrollbar :: Maybe (Tree Int)
    , _tableCOMPleftborderi :: Maybe (Tree Int)
    , _tableCOMPrepocomp :: Maybe (Tree COMP)
    , _tableCOMPtopanchor :: Maybe (Tree Float)
    , _tableCOMPanchordrag :: Maybe (Tree Int)
    , _tableCOMPbottomborderi :: Maybe (Tree Int)
    , _tableCOMPrightborder :: Maybe (Tree Int)
    , _tableCOMPlayer :: Maybe (Tree Float)
    , _tableCOMPreinitextensions :: Maybe (Tree Bool)
    , _tableCOMPtopborderi :: Maybe (Tree Int)
    , _tableCOMPalignallow :: Maybe (Tree Int)
    , _tableCOMPdragdropcallbacks :: Maybe (Tree DAT)
    , _tableCOMPrightborderi :: Maybe (Tree Int)
    , _tableCOMPresizel :: Maybe (Tree Bool)
    , _tableCOMPvfillweight :: Maybe (Tree Float)
    , _tableCOMPborderover :: Maybe (Tree Bool)
    , _tableCOMPnamedchop :: Maybe (Tree Bool)
    , _tableCOMPvalues :: Maybe (Tree DAT)
    , _tableCOMPrepositionxmax :: Maybe (Tree Float)
    , _tableCOMPextension2 :: Maybe (Tree ByteString)
    , _tableCOMPborderbalpha :: Maybe (Tree Float)
    , _tableCOMPjustifyv :: Maybe (Tree Int)
    , _tableCOMPpostoffset :: Vec2
    , _tableCOMPreinitnet :: Maybe (Tree Bool)
    , _tableCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _tableCOMPtopoffset :: Maybe (Tree Float)
    , _tableCOMPcomposite :: Maybe (Tree Int)
    , _tableCOMPtableoffsety :: Maybe (Tree Int)
    , _tableCOMPmultrgb :: Maybe (Tree Bool)
    , _tableCOMPextension1 :: Maybe (Tree ByteString)
    , _tableCOMPtablerows :: Maybe (Tree Int)
    , _tableCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _tableCOMPbordera :: Vec3
    , _tableCOMPuvbuttonsleft :: Maybe (Tree Bool)
    , _tableCOMPbgcolor :: Vec3
    , _tableCOMPresizehmax :: Maybe (Tree Float)
    , _tableCOMPhelpdat :: Maybe (Tree DAT)
    , _tableCOMPextension3 :: Maybe (Tree ByteString)
    , _tableCOMPdrop :: Maybe (Tree Int)
    , _tableCOMPexternaltox :: Maybe (Tree ByteString)
    , _tableCOMPattributes :: Maybe (Tree DAT)
    , _tableCOMPalign :: Maybe (Tree Int)
    , _tableCOMProwattributes :: Maybe (Tree DAT)
    , _tableCOMPextname2 :: Maybe (Tree ByteString)
    , _tableCOMPh :: Maybe (Tree Int)
    , _tableCOMPleftborder :: Maybe (Tree Int)
    , _tableCOMPtopfill :: Maybe (Tree Int)
    , _tableCOMPresizewmin :: Maybe (Tree Float)
    , _tableCOMPmouserel :: Maybe (Tree Bool)
    , _tableCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _tableCOMPoffset :: Vec2
    , _tableCOMPresizeb :: Maybe (Tree Bool)
    , _tableCOMPleftoffset :: Maybe (Tree Float)
    , _tableCOMPy :: Maybe (Tree Int)
    , _tableCOMPpvscrollbar :: Maybe (Tree Int)
    , _tableCOMPcrop :: Maybe (Tree Int)
    , _tableCOMPbottomoffset :: Maybe (Tree Float)
    , _tableCOMPdisplay :: Maybe (Tree Bool)
    , _tableCOMPfit :: Maybe (Tree Int)
    , _tableCOMPaspect :: Maybe (Tree Float)
    , _tableCOMPextname4 :: Maybe (Tree ByteString)
    , _tableCOMPuvbuttonsright :: Maybe (Tree Bool)
    , _tableCOMPresizewmax :: Maybe (Tree Float)
    , _tableCOMPborderb :: Vec3
    , _tableCOMPbottomanchor :: Maybe (Tree Float)
    , _tableCOMPsizefromwindow :: Maybe (Tree Bool)
    , _tableCOMPtableattributes :: Maybe (Tree DAT)
    , _tableCOMPopacity :: Maybe (Tree Float)
    , _tableCOMPinfoformat :: Maybe (Tree Int)
    , _tableCOMPtop :: Maybe (Tree TOP)
    , _tableCOMPcursor :: Maybe (Tree Int)
    , _tableCOMPoverridemethod :: Maybe (Tree Int)
    , _tableCOMPreposition :: Maybe (Tree Int)
    , _tableCOMPenable :: Maybe (Tree Bool)
    , _tableCOMPchop :: Maybe (Tree CHOP)
    , _tableCOMPrightoffset :: Maybe (Tree Float)
    , _tableCOMPvieweraspect :: Maybe (Tree Int)
    , _tableCOMPtablealign :: Maybe (Tree Int)
    , _tableCOMPmarginb :: Maybe (Tree Float)
    , _tableCOMPfontsizeunit :: Maybe (Tree Int)
    , _tableCOMPalignmax :: Maybe (Tree Int)
    , _tableCOMPscrolloverlay :: Maybe (Tree Int)
    , _tableCOMPclone :: Maybe (Tree COMP)
    , _tableCOMPkeepmemory :: Maybe (Tree Bool)
    , _tableCOMPdropscript :: Maybe (Tree DAT)
    , _tableCOMPhfillweight :: Maybe (Tree Float)
    , _tableCOMPhorigin :: Maybe (Tree Float)
    , _tableCOMPspacing :: Maybe (Tree Float)
    , _tableCOMPscale :: Vec2
    , _tableCOMPtableoffsetx :: Maybe (Tree Int)
    , _tableCOMPtablecols :: Maybe (Tree Int)
    , _tableCOMPopshortcut :: Maybe (Tree ByteString)
    , _tableCOMPresizet :: Maybe (Tree Bool)
    , _tableCOMPbottomborder :: Maybe (Tree Int)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | ContainerCOMP {
    _containerCOMPtopborder :: Maybe (Tree Int)
    , _containerCOMPscrollbarthickness :: Maybe (Tree Int)
    , _containerCOMPw :: Maybe (Tree Int)
    , _containerCOMPalignorder :: Maybe (Tree Float)
    , _containerCOMPloadondemand :: Maybe (Tree Bool)
    , _containerCOMPjustifyh :: Maybe (Tree Int)
    , _containerCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _containerCOMPdropdestscript :: Maybe (Tree DAT)
    , _containerCOMPrepositionxmin :: Maybe (Tree Float)
    , _containerCOMPx :: Maybe (Tree Int)
    , _containerCOMPnodeview :: Maybe (Tree Int)
    , _containerCOMPmargint :: Maybe (Tree Float)
    , _containerCOMPresizer :: Maybe (Tree Bool)
    , _containerCOMPdroptypescript :: Maybe (Tree DAT)
    , _containerCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _containerCOMPfixedaspect :: Maybe (Tree Int)
    , _containerCOMPextname1 :: Maybe (Tree ByteString)
    , _containerCOMPmarginl :: Maybe (Tree Float)
    , _containerCOMPdodisablecolor :: Maybe (Tree Bool)
    , _containerCOMPmultitouch :: Maybe (Tree Int)
    , _containerCOMPbgalpha :: Maybe (Tree Float)
    , _containerCOMPhmode :: Maybe (Tree Int)
    , _containerCOMPsavebackup :: Maybe (Tree Bool)
    , _containerCOMPuvbuttonsmiddle :: Maybe (Tree Bool)
    , _containerCOMPleftanchor :: Maybe (Tree Float)
    , _containerCOMPclickthrough :: Maybe (Tree Bool)
    , _containerCOMPdisablealpha :: Maybe (Tree Float)
    , _containerCOMPvmode :: Maybe (Tree Int)
    , _containerCOMPvorigin :: Maybe (Tree Float)
    , _containerCOMPdrag :: Maybe (Tree Int)
    , _containerCOMPdisablecolor :: Vec3
    , _containerCOMPresizehmin :: Maybe (Tree Float)
    , _containerCOMPextname3 :: Maybe (Tree ByteString)
    , _containerCOMPborderaalpha :: Maybe (Tree Float)
    , _containerCOMPoverlay :: Maybe (Tree Bool)
    , _containerCOMPrepositionymin :: Maybe (Tree Float)
    , _containerCOMPenablecloning :: Maybe (Tree Bool)
    , _containerCOMPsubcompname :: Maybe (Tree ByteString)
    , _containerCOMPalign :: Maybe (Tree Int)
    , _containerCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _containerCOMPreinitnet :: Maybe (Tree Bool)
    , _containerCOMPmarginr :: Maybe (Tree Float)
    , _containerCOMPparentshortcut :: Maybe (Tree ByteString)
    , _containerCOMPresizet :: Maybe (Tree Bool)
    , _containerCOMPextension4 :: Maybe (Tree ByteString)
    , _containerCOMPleftborderi :: Maybe (Tree Int)
    , _containerCOMPrepocomp :: Maybe (Tree COMP)
    , _containerCOMPrepositionymax :: Maybe (Tree Float)
    , _containerCOMPanchordrag :: Maybe (Tree Int)
    , _containerCOMPbottomborderi :: Maybe (Tree Int)
    , _containerCOMPrightborder :: Maybe (Tree Int)
    , _containerCOMPlayer :: Maybe (Tree Float)
    , _containerCOMPreinitextensions :: Maybe (Tree Bool)
    , _containerCOMPtopborderi :: Maybe (Tree Int)
    , _containerCOMPmousewheel :: Maybe (Tree Bool)
    , _containerCOMPalignallow :: Maybe (Tree Int)
    , _containerCOMPdragdropcallbacks :: Maybe (Tree DAT)
    , _containerCOMPtopanchor :: Maybe (Tree Float)
    , _containerCOMPrightborderi :: Maybe (Tree Int)
    , _containerCOMPresizel :: Maybe (Tree Bool)
    , _containerCOMPvfillweight :: Maybe (Tree Float)
    , _containerCOMPborderover :: Maybe (Tree Bool)
    , _containerCOMPnamedchop :: Maybe (Tree Bool)
    , _containerCOMPmarginb :: Maybe (Tree Float)
    , _containerCOMPrepositionxmax :: Maybe (Tree Float)
    , _containerCOMPextension2 :: Maybe (Tree ByteString)
    , _containerCOMPalignmax :: Maybe (Tree Int)
    , _containerCOMPjustifyv :: Maybe (Tree Int)
    , _containerCOMPpostoffset :: Vec2
    , _containerCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _containerCOMPtopoffset :: Maybe (Tree Float)
    , _containerCOMPcomposite :: Maybe (Tree Int)
    , _containerCOMPdragscript :: Maybe (Tree DAT)
    , _containerCOMPmultrgb :: Maybe (Tree Bool)
    , _containerCOMPextension1 :: Maybe (Tree ByteString)
    , _containerCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _containerCOMPbordera :: Vec3
    , _containerCOMPuvbuttonsleft :: Maybe (Tree Bool)
    , _containerCOMPbgcolor :: Vec3
    , _containerCOMPresizehmax :: Maybe (Tree Float)
    , _containerCOMPhelpdat :: Maybe (Tree DAT)
    , _containerCOMPextension3 :: Maybe (Tree ByteString)
    , _containerCOMPdrop :: Maybe (Tree Int)
    , _containerCOMPexternaltox :: Maybe (Tree ByteString)
    , _containerCOMPrightanchor :: Maybe (Tree Float)
    , _containerCOMPextname2 :: Maybe (Tree ByteString)
    , _containerCOMPh :: Maybe (Tree Int)
    , _containerCOMPleftborder :: Maybe (Tree Int)
    , _containerCOMPtopfill :: Maybe (Tree Int)
    , _containerCOMPresizewmin :: Maybe (Tree Float)
    , _containerCOMPmouserel :: Maybe (Tree Bool)
    , _containerCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _containerCOMPoffset :: Vec2
    , _containerCOMPresizeb :: Maybe (Tree Bool)
    , _containerCOMPleftoffset :: Maybe (Tree Float)
    , _containerCOMPy :: Maybe (Tree Int)
    , _containerCOMPpvscrollbar :: Maybe (Tree Int)
    , _containerCOMPcrop :: Maybe (Tree Int)
    , _containerCOMPbottomoffset :: Maybe (Tree Float)
    , _containerCOMPdisplay :: Maybe (Tree Bool)
    , _containerCOMPfit :: Maybe (Tree Int)
    , _containerCOMPaspect :: Maybe (Tree Float)
    , _containerCOMPextname4 :: Maybe (Tree ByteString)
    , _containerCOMPuvbuttonsright :: Maybe (Tree Bool)
    , _containerCOMPresizewmax :: Maybe (Tree Float)
    , _containerCOMPborderb :: Vec3
    , _containerCOMPbottomanchor :: Maybe (Tree Float)
    , _containerCOMPsizefromwindow :: Maybe (Tree Bool)
    , _containerCOMPopacity :: Maybe (Tree Float)
    , _containerCOMPtop :: Maybe (Tree TOP)
    , _containerCOMPcursor :: Maybe (Tree Int)
    , _containerCOMPoverridemethod :: Maybe (Tree Int)
    , _containerCOMPreposition :: Maybe (Tree Int)
    , _containerCOMPenable :: Maybe (Tree Bool)
    , _containerCOMPchop :: Maybe (Tree CHOP)
    , _containerCOMPrightoffset :: Maybe (Tree Float)
    , _containerCOMPvieweraspect :: Maybe (Tree Int)
    , _containerCOMPborderbalpha :: Maybe (Tree Float)
    , _containerCOMPscrolloverlay :: Maybe (Tree Int)
    , _containerCOMPclone :: Maybe (Tree COMP)
    , _containerCOMPkeepmemory :: Maybe (Tree Bool)
    , _containerCOMPdropscript :: Maybe (Tree DAT)
    , _containerCOMPhfillweight :: Maybe (Tree Float)
    , _containerCOMPhorigin :: Maybe (Tree Float)
    , _containerCOMPspacing :: Maybe (Tree Float)
    , _containerCOMPscale :: Vec2
    , _containerCOMPphscrollbar :: Maybe (Tree Int)
    , _containerCOMPopshortcut :: Maybe (Tree ByteString)
    , _containerCOMPbottomborder :: Maybe (Tree Int)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | ParameterCOMP {
    _parameterCOMPtopborder :: Maybe (Tree Int)
    , _parameterCOMPscrollbarthickness :: Maybe (Tree Int)
    , _parameterCOMPw :: Maybe (Tree Int)
    , _parameterCOMPalignorder :: Maybe (Tree Float)
    , _parameterCOMPdropscript :: Maybe (Tree DAT)
    , _parameterCOMPloadondemand :: Maybe (Tree Bool)
    , _parameterCOMPjustifyh :: Maybe (Tree Int)
    , _parameterCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _parameterCOMPdropdestscript :: Maybe (Tree DAT)
    , _parameterCOMPrepositionxmin :: Maybe (Tree Float)
    , _parameterCOMPx :: Maybe (Tree Int)
    , _parameterCOMPmarginr :: Maybe (Tree Float)
    , _parameterCOMPnodeview :: Maybe (Tree Int)
    , _parameterCOMPrepositionymax :: Maybe (Tree Float)
    , _parameterCOMPmargint :: Maybe (Tree Float)
    , _parameterCOMPresizer :: Maybe (Tree Bool)
    , _parameterCOMPdroptypescript :: Maybe (Tree DAT)
    , _parameterCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _parameterCOMPfixedaspect :: Maybe (Tree Int)
    , _parameterCOMPextname1 :: Maybe (Tree ByteString)
    , _parameterCOMPmarginl :: Maybe (Tree Float)
    , _parameterCOMPdodisablecolor :: Maybe (Tree Bool)
    , _parameterCOMPmultitouch :: Maybe (Tree Int)
    , _parameterCOMPbgalpha :: Maybe (Tree Float)
    , _parameterCOMPhmode :: Maybe (Tree Int)
    , _parameterCOMPsavebackup :: Maybe (Tree Bool)
    , _parameterCOMPuvbuttonsmiddle :: Maybe (Tree Bool)
    , _parameterCOMPleftanchor :: Maybe (Tree Float)
    , _parameterCOMPclickthrough :: Maybe (Tree Bool)
    , _parameterCOMPdisablealpha :: Maybe (Tree Float)
    , _parameterCOMPvmode :: Maybe (Tree Int)
    , _parameterCOMPvorigin :: Maybe (Tree Float)
    , _parameterCOMPinputeditor :: Maybe (Tree Bool)
    , _parameterCOMPdisablecolor :: Vec3
    , _parameterCOMPresizehmin :: Maybe (Tree Float)
    , _parameterCOMPextname3 :: Maybe (Tree ByteString)
    , _parameterCOMPborderaalpha :: Maybe (Tree Float)
    , _parameterCOMPoverlay :: Maybe (Tree Bool)
    , _parameterCOMPrepositionymin :: Maybe (Tree Float)
    , _parameterCOMPenablecloning :: Maybe (Tree Bool)
    , _parameterCOMPdrag :: Maybe (Tree Int)
    , _parameterCOMPrightanchor :: Maybe (Tree Float)
    , _parameterCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _parameterCOMPreinitnet :: Maybe (Tree Bool)
    , _parameterCOMPpagescope :: Maybe (Tree ByteString)
    , _parameterCOMPparentshortcut :: Maybe (Tree ByteString)
    , _parameterCOMPresizet :: Maybe (Tree Bool)
    , _parameterCOMPextension4 :: Maybe (Tree ByteString)
    , _parameterCOMPleftborderi :: Maybe (Tree Int)
    , _parameterCOMPrepocomp :: Maybe (Tree COMP)
    , _parameterCOMPtopanchor :: Maybe (Tree Float)
    , _parameterCOMPanchordrag :: Maybe (Tree Int)
    , _parameterCOMPbottomborderi :: Maybe (Tree Int)
    , _parameterCOMPrightborder :: Maybe (Tree Int)
    , _parameterCOMPbottomborder :: Maybe (Tree Int)
    , _parameterCOMPreinitextensions :: Maybe (Tree Bool)
    , _parameterCOMPtopborderi :: Maybe (Tree Int)
    , _parameterCOMPalignallow :: Maybe (Tree Int)
    , _parameterCOMPcombinescopes :: Maybe (Tree Int)
    , _parameterCOMPrightborderi :: Maybe (Tree Int)
    , _parameterCOMPresizel :: Maybe (Tree Bool)
    , _parameterCOMPvfillweight :: Maybe (Tree Float)
    , _parameterCOMPborderover :: Maybe (Tree Bool)
    , _parameterCOMPnamedchop :: Maybe (Tree Bool)
    , _parameterCOMPmarginb :: Maybe (Tree Float)
    , _parameterCOMPpagenames :: Maybe (Tree Bool)
    , _parameterCOMPrepositionxmax :: Maybe (Tree Float)
    , _parameterCOMPextension2 :: Maybe (Tree ByteString)
    , _parameterCOMPborderbalpha :: Maybe (Tree Float)
    , _parameterCOMPjustifyv :: Maybe (Tree Int)
    , _parameterCOMPpostoffset :: Vec2
    , _parameterCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _parameterCOMPtopoffset :: Maybe (Tree Float)
    , _parameterCOMPcomposite :: Maybe (Tree Int)
    , _parameterCOMPdragscript :: Maybe (Tree DAT)
    , _parameterCOMPmultrgb :: Maybe (Tree Bool)
    , _parameterCOMPextension1 :: Maybe (Tree ByteString)
    , _parameterCOMPdragdropcallbacks :: Maybe (Tree DAT)
    , _parameterCOMPcustom :: Maybe (Tree Bool)
    , _parameterCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _parameterCOMPbordera :: Vec3
    , _parameterCOMPuvbuttonsleft :: Maybe (Tree Bool)
    , _parameterCOMPbgcolor :: Vec3
    , _parameterCOMPresizehmax :: Maybe (Tree Float)
    , _parameterCOMPhelpdat :: Maybe (Tree DAT)
    , _parameterCOMPextension3 :: Maybe (Tree ByteString)
    , _parameterCOMPdrop :: Maybe (Tree Int)
    , _parameterCOMPexternaltox :: Maybe (Tree ByteString)
    , _parameterCOMPoverridemethod :: Maybe (Tree Int)
    , _parameterCOMPalign :: Maybe (Tree Int)
    , _parameterCOMPextname2 :: Maybe (Tree ByteString)
    , _parameterCOMPh :: Maybe (Tree Int)
    , _parameterCOMPleftborder :: Maybe (Tree Int)
    , _parameterCOMPtopfill :: Maybe (Tree Int)
    , _parameterCOMPresizewmin :: Maybe (Tree Float)
    , _parameterCOMPmouserel :: Maybe (Tree Bool)
    , _parameterCOMPoversize :: Maybe (Tree Float)
    , _parameterCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _parameterCOMPoffset :: Vec2
    , _parameterCOMPparscope :: Maybe (Tree ByteString)
    , _parameterCOMPresizeb :: Maybe (Tree Bool)
    , _parameterCOMPleftoffset :: Maybe (Tree Float)
    , _parameterCOMPy :: Maybe (Tree Int)
    , _parameterCOMPpvscrollbar :: Maybe (Tree Int)
    , _parameterCOMPcrop :: Maybe (Tree Int)
    , _parameterCOMPbottomoffset :: Maybe (Tree Float)
    , _parameterCOMPdisplay :: Maybe (Tree Bool)
    , _parameterCOMPfit :: Maybe (Tree Int)
    , _parameterCOMPaspect :: Maybe (Tree Float)
    , _parameterCOMPextname4 :: Maybe (Tree ByteString)
    , _parameterCOMPuvbuttonsright :: Maybe (Tree Bool)
    , _parameterCOMPresizewmax :: Maybe (Tree Float)
    , _parameterCOMPscopeorder :: Maybe (Tree Bool)
    , _parameterCOMPborderb :: Vec3
    , _parameterCOMPsubcompname :: Maybe (Tree ByteString)
    , _parameterCOMPbottomanchor :: Maybe (Tree Float)
    , _parameterCOMPsizefromwindow :: Maybe (Tree Bool)
    , _parameterCOMPopacity :: Maybe (Tree Float)
    , _parameterCOMPtop :: Maybe (Tree TOP)
    , _parameterCOMPmousewheel :: Maybe (Tree Bool)
    , _parameterCOMPbuiltin :: Maybe (Tree Bool)
    , _parameterCOMPreposition :: Maybe (Tree Int)
    , _parameterCOMPenable :: Maybe (Tree Bool)
    , _parameterCOMPchop :: Maybe (Tree CHOP)
    , _parameterCOMPrightoffset :: Maybe (Tree Float)
    , _parameterCOMPvieweraspect :: Maybe (Tree Int)
    , _parameterCOMPheader :: Maybe (Tree Bool)
    , _parameterCOMPalignmax :: Maybe (Tree Int)
    , _parameterCOMPscrolloverlay :: Maybe (Tree Int)
    , _parameterCOMPclone :: Maybe (Tree COMP)
    , _parameterCOMPkeepmemory :: Maybe (Tree Bool)
    , _parameterCOMPlayer :: Maybe (Tree Float)
    , _parameterCOMPhfillweight :: Maybe (Tree Float)
    , _parameterCOMPhorigin :: Maybe (Tree Float)
    , _parameterCOMPspacing :: Maybe (Tree Float)
    , _parameterCOMPscale :: Vec2
    , _parameterCOMPphscrollbar :: Maybe (Tree Int)
    , _parameterCOMPopshortcut :: Maybe (Tree ByteString)
    , _parameterCOMPcursor :: Maybe (Tree Int)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | SliderCOMP {
    _sliderCOMPtopborder :: Maybe (Tree Int)
    , _sliderCOMPscrollbarthickness :: Maybe (Tree Int)
    , _sliderCOMPw :: Maybe (Tree Int)
    , _sliderCOMPalignorder :: Maybe (Tree Float)
    , _sliderCOMPloadondemand :: Maybe (Tree Bool)
    , _sliderCOMPjustifyh :: Maybe (Tree Int)
    , _sliderCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _sliderCOMPdropdestscript :: Maybe (Tree DAT)
    , _sliderCOMPrepositionxmin :: Maybe (Tree Float)
    , _sliderCOMPx :: Maybe (Tree Int)
    , _sliderCOMPnodeview :: Maybe (Tree Int)
    , _sliderCOMPrepositionymax :: Maybe (Tree Float)
    , _sliderCOMPmargint :: Maybe (Tree Float)
    , _sliderCOMPresizer :: Maybe (Tree Bool)
    , _sliderCOMPdroptypescript :: Maybe (Tree DAT)
    , _sliderCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _sliderCOMPfixedaspect :: Maybe (Tree Int)
    , _sliderCOMPzonel :: Maybe (Tree Float)
    , _sliderCOMPmarginl :: Maybe (Tree Float)
    , _sliderCOMPdodisablecolor :: Maybe (Tree Bool)
    , _sliderCOMPmultitouch :: Maybe (Tree Int)
    , _sliderCOMPbgalpha :: Maybe (Tree Float)
    , _sliderCOMPhmode :: Maybe (Tree Int)
    , _sliderCOMPsavebackup :: Maybe (Tree Bool)
    , _sliderCOMPuvbuttonsmiddle :: Maybe (Tree Bool)
    , _sliderCOMPleftanchor :: Maybe (Tree Float)
    , _sliderCOMPmultrgb :: Maybe (Tree Bool)
    , _sliderCOMPdisablealpha :: Maybe (Tree Float)
    , _sliderCOMPvmode :: Maybe (Tree Int)
    , _sliderCOMPvorigin :: Maybe (Tree Float)
    , _sliderCOMPdrag :: Maybe (Tree Int)
    , _sliderCOMPdisablecolor :: Vec3
    , _sliderCOMPresizehmin :: Maybe (Tree Float)
    , _sliderCOMPextname3 :: Maybe (Tree ByteString)
    , _sliderCOMPborderaalpha :: Maybe (Tree Float)
    , _sliderCOMPoverlay :: Maybe (Tree Bool)
    , _sliderCOMPrepositionymin :: Maybe (Tree Float)
    , _sliderCOMPenablecloning :: Maybe (Tree Bool)
    , _sliderCOMPsubcompname :: Maybe (Tree ByteString)
    , _sliderCOMPrightanchor :: Maybe (Tree Float)
    , _sliderCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _sliderCOMPreinitnet :: Maybe (Tree Bool)
    , _sliderCOMPmarginr :: Maybe (Tree Float)
    , _sliderCOMPparentshortcut :: Maybe (Tree ByteString)
    , _sliderCOMPresizet :: Maybe (Tree Bool)
    , _sliderCOMPextension4 :: Maybe (Tree ByteString)
    , _sliderCOMPnamedchop :: Maybe (Tree Bool)
    , _sliderCOMPclampvl :: Maybe (Tree Bool)
    , _sliderCOMPrepocomp :: Maybe (Tree COMP)
    , _sliderCOMPtopanchor :: Maybe (Tree Float)
    , _sliderCOMPanchordrag :: Maybe (Tree Int)
    , _sliderCOMPbottomborderi :: Maybe (Tree Int)
    , _sliderCOMPclampul :: Maybe (Tree Bool)
    , _sliderCOMPrightborder :: Maybe (Tree Int)
    , _sliderCOMPlayer :: Maybe (Tree Float)
    , _sliderCOMPreinitextensions :: Maybe (Tree Bool)
    , _sliderCOMPtopborderi :: Maybe (Tree Int)
    , _sliderCOMPalignallow :: Maybe (Tree Int)
    , _sliderCOMPdragdropcallbacks :: Maybe (Tree DAT)
    , _sliderCOMPrightborderi :: Maybe (Tree Int)
    , _sliderCOMPresizel :: Maybe (Tree Bool)
    , _sliderCOMPalignmax :: Maybe (Tree Int)
    , _sliderCOMPvfillweight :: Maybe (Tree Float)
    , _sliderCOMPborderover :: Maybe (Tree Bool)
    , _sliderCOMPleftborderi :: Maybe (Tree Int)
    , _sliderCOMPmarginb :: Maybe (Tree Float)
    , _sliderCOMPrepositionxmax :: Maybe (Tree Float)
    , _sliderCOMPextension2 :: Maybe (Tree ByteString)
    , _sliderCOMPborderbalpha :: Maybe (Tree Float)
    , _sliderCOMPjustifyv :: Maybe (Tree Int)
    , _sliderCOMPpostoffset :: Vec2
    , _sliderCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _sliderCOMPtopoffset :: Maybe (Tree Float)
    , _sliderCOMPcomposite :: Maybe (Tree Int)
    , _sliderCOMPdragscript :: Maybe (Tree DAT)
    , _sliderCOMPzoneb :: Maybe (Tree Float)
    , _sliderCOMPclampvh :: Maybe (Tree Bool)
    , _sliderCOMPextension1 :: Maybe (Tree ByteString)
    , _sliderCOMPextname1 :: Maybe (Tree ByteString)
    , _sliderCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _sliderCOMPopshortcut :: Maybe (Tree ByteString)
    , _sliderCOMPbordera :: Vec3
    , _sliderCOMPuvbuttonsleft :: Maybe (Tree Bool)
    , _sliderCOMPbgcolor :: Vec3
    , _sliderCOMPresizehmax :: Maybe (Tree Float)
    , _sliderCOMPhelpdat :: Maybe (Tree DAT)
    , _sliderCOMPextension3 :: Maybe (Tree ByteString)
    , _sliderCOMPdrop :: Maybe (Tree Int)
    , _sliderCOMPexternaltox :: Maybe (Tree ByteString)
    , _sliderCOMPcursor :: Maybe (Tree Int)
    , _sliderCOMPalign :: Maybe (Tree Int)
    , _sliderCOMPextname2 :: Maybe (Tree ByteString)
    , _sliderCOMPh :: Maybe (Tree Int)
    , _sliderCOMPleftborder :: Maybe (Tree Int)
    , _sliderCOMPzonet :: Maybe (Tree Float)
    , _sliderCOMPtopfill :: Maybe (Tree Int)
    , _sliderCOMPresizewmin :: Maybe (Tree Float)
    , _sliderCOMPmouserel :: Maybe (Tree Bool)
    , _sliderCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _sliderCOMPoffset :: Vec2
    , _sliderCOMPresizeb :: Maybe (Tree Bool)
    , _sliderCOMPleftoffset :: Maybe (Tree Float)
    , _sliderCOMPy :: Maybe (Tree Int)
    , _sliderCOMPpvscrollbar :: Maybe (Tree Int)
    , _sliderCOMPcrop :: Maybe (Tree Int)
    , _sliderCOMPbottomoffset :: Maybe (Tree Float)
    , _sliderCOMPdisplay :: Maybe (Tree Bool)
    , _sliderCOMPfit :: Maybe (Tree Int)
    , _sliderCOMPaspect :: Maybe (Tree Float)
    , _sliderCOMPextname4 :: Maybe (Tree ByteString)
    , _sliderCOMPuvbuttonsright :: Maybe (Tree Bool)
    , _sliderCOMPresizewmax :: Maybe (Tree Float)
    , _sliderCOMPborderb :: Vec3
    , _sliderCOMPbottomanchor :: Maybe (Tree Float)
    , _sliderCOMPsizefromwindow :: Maybe (Tree Bool)
    , _sliderCOMPopacity :: Maybe (Tree Float)
    , _sliderCOMPtop :: Maybe (Tree TOP)
    , _sliderCOMPmousewheel :: Maybe (Tree Bool)
    , _sliderCOMPoverridemethod :: Maybe (Tree Int)
    , _sliderCOMPreposition :: Maybe (Tree Int)
    , _sliderCOMPenable :: Maybe (Tree Bool)
    , _sliderCOMPchop :: Maybe (Tree CHOP)
    , _sliderCOMPrightoffset :: Maybe (Tree Float)
    , _sliderCOMPvieweraspect :: Maybe (Tree Int)
    , _sliderCOMPzoner :: Maybe (Tree Float)
    , _sliderCOMPclampuh :: Maybe (Tree Bool)
    , _sliderCOMPscrolloverlay :: Maybe (Tree Int)
    , _sliderCOMPclone :: Maybe (Tree COMP)
    , _sliderCOMPkeepmemory :: Maybe (Tree Bool)
    , _sliderCOMPdropscript :: Maybe (Tree DAT)
    , _sliderCOMPclickthrough :: Maybe (Tree Bool)
    , _sliderCOMPhfillweight :: Maybe (Tree Float)
    , _sliderCOMPhorigin :: Maybe (Tree Float)
    , _sliderCOMPspacing :: Maybe (Tree Float)
    , _sliderCOMPscale :: Vec2
    , _sliderCOMPphscrollbar :: Maybe (Tree Int)
    , _sliderCOMPslidertype :: Maybe (Tree Int)
    , _sliderCOMPbottomborder :: Maybe (Tree Int)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | GeometryCOMP {
    _geometryCOMPinstancea :: Maybe (Tree ByteString)
    , _geometryCOMPinstancerotupy :: Maybe (Tree ByteString)
    , _geometryCOMPextname1 :: Maybe (Tree ByteString)
    , _geometryCOMPinstancerottoz :: Maybe (Tree ByteString)
    , _geometryCOMPinstanceb :: Maybe (Tree ByteString)
    , _geometryCOMPextension4 :: Maybe (Tree ByteString)
    , _geometryCOMPpathorient :: Maybe (Tree Bool)
    , _geometryCOMProll :: Maybe (Tree Float)
    , _geometryCOMPnodeview :: Maybe (Tree Int)
    , _geometryCOMPinstancepx :: Maybe (Tree ByteString)
    , _geometryCOMPpt :: Vec3
    , _geometryCOMPinstancetexanisotropy :: Maybe (Tree Int)
    , _geometryCOMPprioritymethod :: Maybe (Tree Int)
    , _geometryCOMPinstancefirstrow :: Maybe (Tree Int)
    , _geometryCOMPbank :: Maybe (Tree Float)
    , _geometryCOMPinstancety :: Maybe (Tree ByteString)
    , _geometryCOMPinstancery :: Maybe (Tree ByteString)
    , _geometryCOMPp :: Vec3
    , _geometryCOMPsavebackup :: Maybe (Tree Bool)
    , _geometryCOMPinstancerottox :: Maybe (Tree ByteString)
    , _geometryCOMPpos :: Maybe (Tree Float)
    , _geometryCOMPpathsop :: Maybe (Tree SOP)
    , _geometryCOMPloadondemand :: Maybe (Tree Bool)
    , _geometryCOMPextname3 :: Maybe (Tree ByteString)
    , _geometryCOMPinstancetexfilter :: Maybe (Tree Int)
    , _geometryCOMPpr :: Vec3
    , _geometryCOMPinstanceg :: Maybe (Tree ByteString)
    , _geometryCOMPinstancetexmode :: Maybe (Tree Int)
    , _geometryCOMPwcolor :: Vec3
    , _geometryCOMPinstancepy :: Maybe (Tree ByteString)
    , _geometryCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _geometryCOMPreinitnet :: Maybe (Tree Bool)
    , _geometryCOMPexternaltox :: Maybe (Tree ByteString)
    , _geometryCOMPreinitextensions :: Maybe (Tree Bool)
    , _geometryCOMPinstancesy :: Maybe (Tree ByteString)
    , _geometryCOMPnuminstances :: Maybe (Tree Int)
    , _geometryCOMPup :: Vec3
    , _geometryCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _geometryCOMPsubcompname :: Maybe (Tree ByteString)
    , _geometryCOMPinstrord :: Maybe (Tree Int)
    , _geometryCOMPpxord :: Maybe (Tree Int)
    , _geometryCOMPinstancetexindex :: Maybe (Tree ByteString)
    , _geometryCOMPpickpriority :: Maybe (Tree Float)
    , _geometryCOMPps :: Vec3
    , _geometryCOMPinstancesx :: Maybe (Tree ByteString)
    , _geometryCOMPinstancing :: Maybe (Tree Bool)
    , _geometryCOMPinstancetexextendv :: Maybe (Tree Int)
    , _geometryCOMPprord :: Maybe (Tree Int)
    , _geometryCOMPlookup :: Maybe (Tree ByteString)
    , _geometryCOMPinstancerz :: Maybe (Tree ByteString)
    , _geometryCOMPextension2 :: Maybe (Tree ByteString)
    , _geometryCOMPdrawpriority :: Maybe (Tree Float)
    , _geometryCOMPinstanceu :: Maybe (Tree ByteString)
    , _geometryCOMPrender :: Maybe (Tree Bool)
    , _geometryCOMPextension1 :: Maybe (Tree ByteString)
    , _geometryCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _geometryCOMPinstancetexs :: Maybe (Tree TOP)
    , _geometryCOMPpxform :: Maybe (Tree Bool)
    , _geometryCOMPmaterial :: Maybe (Tree MAT)
    , _geometryCOMPinstancer :: Maybe (Tree ByteString)
    , _geometryCOMPr :: Vec3
    , _geometryCOMPinstancerottoorder :: Maybe (Tree Int)
    , _geometryCOMPinstancecolormode :: Maybe (Tree Int)
    , _geometryCOMPextension3 :: Maybe (Tree ByteString)
    , _geometryCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _geometryCOMPinstancerx :: Maybe (Tree ByteString)
    , _geometryCOMPinstancesz :: Maybe (Tree ByteString)
    , _geometryCOMPopshortcut :: Maybe (Tree ByteString)
    , _geometryCOMPpcommit :: Maybe (Tree Bool)
    , _geometryCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _geometryCOMPinstanceorder :: Maybe (Tree Int)
    , _geometryCOMPinstancew :: Maybe (Tree ByteString)
    , _geometryCOMPparentshortcut :: Maybe (Tree ByteString)
    , _geometryCOMPinstancemode :: Maybe (Tree Int)
    , _geometryCOMPenablecloning :: Maybe (Tree Bool)
    , _geometryCOMPinstancepz :: Maybe (Tree ByteString)
    , _geometryCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _geometryCOMPextname4 :: Maybe (Tree ByteString)
    , _geometryCOMPinstancetx :: Maybe (Tree ByteString)
    , _geometryCOMPinstancerotupz :: Maybe (Tree ByteString)
    , _geometryCOMPrord :: Maybe (Tree Int)
    , _geometryCOMPpp :: Vec3
    , _geometryCOMPpreset :: Maybe (Tree Bool)
    , _geometryCOMPinstancetexextendu :: Maybe (Tree Int)
    , _geometryCOMPxord :: Maybe (Tree Int)
    , _geometryCOMPt :: Vec3
    , _geometryCOMPs :: Vec3
    , _geometryCOMPclone :: Maybe (Tree COMP)
    , _geometryCOMPinstxord :: Maybe (Tree Int)
    , _geometryCOMPinstancerotupx :: Maybe (Tree ByteString)
    , _geometryCOMPinstancetexextendw :: Maybe (Tree Int)
    , _geometryCOMPextname2 :: Maybe (Tree ByteString)
    , _geometryCOMPinstancerottoy :: Maybe (Tree ByteString)
    , _geometryCOMPinstancev :: Maybe (Tree ByteString)
    , _geometryCOMPinstancetz :: Maybe (Tree ByteString)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | CameraCOMP {
    _cameraCOMPprojection :: Maybe (Tree Int)
    , _cameraCOMPviewanglemethod :: Maybe (Tree Int)
    , _cameraCOMPfognear :: Maybe (Tree Float)
    , _cameraCOMPwin :: Vec2
    , _cameraCOMPextname1 :: Maybe (Tree ByteString)
    , _cameraCOMPrender :: Maybe (Tree Bool)
    , _cameraCOMPextension1 :: Maybe (Tree ByteString)
    , _cameraCOMPprioritymethod :: Maybe (Tree Int)
    , _cameraCOMPextension4 :: Maybe (Tree ByteString)
    , _cameraCOMPpathorient :: Maybe (Tree Bool)
    , _cameraCOMProll :: Maybe (Tree Float)
    , _cameraCOMPnodeview :: Maybe (Tree Int)
    , _cameraCOMPpt :: Vec3
    , _cameraCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _cameraCOMPfog :: Maybe (Tree Int)
    , _cameraCOMPcustomproj :: Maybe (Tree DAT)
    , _cameraCOMPfogfar :: Maybe (Tree Float)
    , _cameraCOMPbgcolor :: Vec4
    , _cameraCOMPpxform :: Maybe (Tree Bool)
    , _cameraCOMPmaterial :: Maybe (Tree MAT)
    , _cameraCOMPbank :: Maybe (Tree Float)
    , _cameraCOMPr :: Vec3
    , _cameraCOMPenablecloning :: Maybe (Tree Bool)
    , _cameraCOMPpp :: Vec3
    , _cameraCOMPfov :: Maybe (Tree Float)
    , _cameraCOMPextension3 :: Maybe (Tree ByteString)
    , _cameraCOMPp :: Vec3
    , _cameraCOMPextname2 :: Maybe (Tree ByteString)
    , _cameraCOMPopshortcut :: Maybe (Tree ByteString)
    , _cameraCOMPpcommit :: Maybe (Tree Bool)
    , _cameraCOMPsavebackup :: Maybe (Tree Bool)
    , _cameraCOMPreinitextensions :: Maybe (Tree Bool)
    , _cameraCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _cameraCOMPprojectionblend :: Maybe (Tree Float)
    , _cameraCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _cameraCOMPpos :: Maybe (Tree Float)
    , _cameraCOMPpathsop :: Maybe (Tree SOP)
    , _cameraCOMPloadondemand :: Maybe (Tree Bool)
    , _cameraCOMPextname3 :: Maybe (Tree ByteString)
    , _cameraCOMPfogalpha :: Maybe (Tree Float)
    , _cameraCOMPpr :: Vec3
    , _cameraCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _cameraCOMPwcolor :: Vec3
    , _cameraCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _cameraCOMPextname4 :: Maybe (Tree ByteString)
    , _cameraCOMPfocal :: Maybe (Tree Float)
    , _cameraCOMPreinitnet :: Maybe (Tree Bool)
    , _cameraCOMPfar :: Maybe (Tree Float)
    , _cameraCOMPexternaltox :: Maybe (Tree ByteString)
    , _cameraCOMPpreset :: Maybe (Tree Bool)
    , _cameraCOMPfogmap :: Maybe (Tree TOP)
    , _cameraCOMPfogdensity :: Maybe (Tree Float)
    , _cameraCOMPaperture :: Maybe (Tree Float)
    , _cameraCOMPup :: Vec3
    , _cameraCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _cameraCOMPsubcompname :: Maybe (Tree ByteString)
    , _cameraCOMPpxord :: Maybe (Tree Int)
    , _cameraCOMPxord :: Maybe (Tree Int)
    , _cameraCOMPpickpriority :: Maybe (Tree Float)
    , _cameraCOMPnear :: Maybe (Tree Float)
    , _cameraCOMPps :: Vec3
    , _cameraCOMPextension2 :: Maybe (Tree ByteString)
    , _cameraCOMPs :: Vec3
    , _cameraCOMPclone :: Maybe (Tree COMP)
    , _cameraCOMPprord :: Maybe (Tree Int)
    , _cameraCOMPlookup :: Maybe (Tree ByteString)
    , _cameraCOMPrord :: Maybe (Tree Int)
    , _cameraCOMPparentshortcut :: Maybe (Tree ByteString)
    , _cameraCOMPorthowidth :: Maybe (Tree Float)
    , _cameraCOMPt :: Vec3
    , _cameraCOMPfogcolor :: Vec3
    , _cameraCOMPdrawpriority :: Maybe (Tree Float)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | AnimationCOMP {
    _animationCOMPrangetype :: Maybe (Tree Int)
    , _animationCOMPextname1 :: Maybe (Tree ByteString)
    , _animationCOMPcuepulse :: Maybe (Tree Bool)
    , _animationCOMPinputindexunit :: Maybe (Tree Int)
    , _animationCOMPextension4 :: Maybe (Tree ByteString)
    , _animationCOMPeditrate :: Maybe (Tree Float)
    , _animationCOMPextension3 :: Maybe (Tree ByteString)
    , _animationCOMPenablecloning :: Maybe (Tree Bool)
    , _animationCOMPstart :: Maybe (Tree Float)
    , _animationCOMPtleft :: Maybe (Tree Int)
    , _animationCOMPextname4 :: Maybe (Tree ByteString)
    , _animationCOMPendunit :: Maybe (Tree Int)
    , _animationCOMPopshortcut :: Maybe (Tree ByteString)
    , _animationCOMPsavebackup :: Maybe (Tree Bool)
    , _animationCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _animationCOMPextname2 :: Maybe (Tree ByteString)
    , _animationCOMPplay :: Maybe (Tree Bool)
    , _animationCOMPtdefault :: Maybe (Tree Float)
    , _animationCOMPcuepointunit :: Maybe (Tree Int)
    , _animationCOMPloadondemand :: Maybe (Tree Bool)
    , _animationCOMPeditorigin :: Maybe (Tree Float)
    , _animationCOMPextension1 :: Maybe (Tree ByteString)
    , _animationCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _animationCOMPend :: Maybe (Tree Float)
    , _animationCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _animationCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _animationCOMPcyclic :: Maybe (Tree Int)
    , _animationCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _animationCOMPreinitnet :: Maybe (Tree Bool)
    , _animationCOMPcuepoint :: Maybe (Tree Float)
    , _animationCOMPexternaltox :: Maybe (Tree ByteString)
    , _animationCOMPparentshortcut :: Maybe (Tree ByteString)
    , _animationCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _animationCOMPsubcompname :: Maybe (Tree ByteString)
    , _animationCOMPstartunit :: Maybe (Tree Int)
    , _animationCOMPspeed :: Maybe (Tree Float)
    , _animationCOMPextname3 :: Maybe (Tree ByteString)
    , _animationCOMPtright :: Maybe (Tree Int)
    , _animationCOMPreinitextensions :: Maybe (Tree Bool)
    , _animationCOMPspecifyedit :: Maybe (Tree Bool)
    , _animationCOMPclone :: Maybe (Tree COMP)
    , _animationCOMPplaymode :: Maybe (Tree Int)
    , _animationCOMPeditanimation :: Maybe (Tree Bool)
    , _animationCOMPextension2 :: Maybe (Tree ByteString)
    , _animationCOMPcue :: Maybe (Tree Bool)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | ReplicatorCOMP {
    _replicatorCOMPreinitnet :: Maybe (Tree Bool)
    , _replicatorCOMPextname1 :: Maybe (Tree ByteString)
    , _replicatorCOMPnumreplicants :: Maybe (Tree Int)
    , _replicatorCOMPextension1 :: Maybe (Tree ByteString)
    , _replicatorCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _replicatorCOMPmaxops :: Maybe (Tree Int)
    , _replicatorCOMPcallbacks :: Maybe (Tree DAT)
    , _replicatorCOMPextension3 :: Maybe (Tree ByteString)
    , _replicatorCOMPlayoutorigin2 :: Maybe (Tree Int)
    , _replicatorCOMPenablecloning :: Maybe (Tree Bool)
    , _replicatorCOMPexternaltox :: Maybe (Tree ByteString)
    , _replicatorCOMPlayoutorigin1 :: Maybe (Tree Int)
    , _replicatorCOMPrecreateall :: Maybe (Tree Bool)
    , _replicatorCOMPrepsuffixstart :: Maybe (Tree Int)
    , _replicatorCOMPextname2 :: Maybe (Tree ByteString)
    , _replicatorCOMPopshortcut :: Maybe (Tree ByteString)
    , _replicatorCOMPsavebackup :: Maybe (Tree Bool)
    , _replicatorCOMPcolindex :: Maybe (Tree Int)
    , _replicatorCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _replicatorCOMPdoincremental :: Maybe (Tree Bool)
    , _replicatorCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _replicatorCOMPrecreatemissing :: Maybe (Tree Bool)
    , _replicatorCOMPloadondemand :: Maybe (Tree Bool)
    , _replicatorCOMPtemplate :: Maybe (Tree DAT)
    , _replicatorCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _replicatorCOMPextname4 :: Maybe (Tree ByteString)
    , _replicatorCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _replicatorCOMPnamefromtable :: Maybe (Tree Int)
    , _replicatorCOMPtscript :: Maybe (Tree ByteString)
    , _replicatorCOMPreinitextensions :: Maybe (Tree Bool)
    , _replicatorCOMPextension4 :: Maybe (Tree ByteString)
    , _replicatorCOMPscriptmenu :: Maybe (Tree Int)
    , _replicatorCOMPopprefix :: Maybe (Tree ByteString)
    , _replicatorCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _replicatorCOMPsubcompname :: Maybe (Tree ByteString)
    , _replicatorCOMPextname3 :: Maybe (Tree ByteString)
    , _replicatorCOMPdestination :: Maybe (Tree COMP)
    , _replicatorCOMPparentshortcut :: Maybe (Tree ByteString)
    , _replicatorCOMPdomaxops :: Maybe (Tree Bool)
    , _replicatorCOMPignorefirstrow :: Maybe (Tree Bool)
    , _replicatorCOMPcolname :: Maybe (Tree ByteString)
    , _replicatorCOMPlayout :: Maybe (Tree Int)
    , _replicatorCOMPclone :: Maybe (Tree COMP)
    , _replicatorCOMPincrement :: Maybe (Tree Int)
    , _replicatorCOMPmethod :: Maybe (Tree Int)
    , _replicatorCOMPextension2 :: Maybe (Tree ByteString)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | OpviewerCOMP {
    _opviewerCOMPtopborder :: Maybe (Tree Int)
    , _opviewerCOMPscrollbarthickness :: Maybe (Tree Int)
    , _opviewerCOMPw :: Maybe (Tree Int)
    , _opviewerCOMPalignorder :: Maybe (Tree Float)
    , _opviewerCOMPloadondemand :: Maybe (Tree Bool)
    , _opviewerCOMPjustifyh :: Maybe (Tree Int)
    , _opviewerCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _opviewerCOMPdropdestscript :: Maybe (Tree DAT)
    , _opviewerCOMPrepositionxmin :: Maybe (Tree Float)
    , _opviewerCOMPx :: Maybe (Tree Int)
    , _opviewerCOMPmargint :: Maybe (Tree Float)
    , _opviewerCOMPresizer :: Maybe (Tree Bool)
    , _opviewerCOMPdroptypescript :: Maybe (Tree DAT)
    , _opviewerCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _opviewerCOMPfixedaspect :: Maybe (Tree Int)
    , _opviewerCOMPextname1 :: Maybe (Tree ByteString)
    , _opviewerCOMPmarginl :: Maybe (Tree Float)
    , _opviewerCOMPdodisablecolor :: Maybe (Tree Bool)
    , _opviewerCOMPmultitouch :: Maybe (Tree Int)
    , _opviewerCOMPbgalpha :: Maybe (Tree Float)
    , _opviewerCOMPhmode :: Maybe (Tree Int)
    , _opviewerCOMPsavebackup :: Maybe (Tree Bool)
    , _opviewerCOMPuvbuttonsmiddle :: Maybe (Tree Bool)
    , _opviewerCOMPleftanchor :: Maybe (Tree Float)
    , _opviewerCOMPclickthrough :: Maybe (Tree Bool)
    , _opviewerCOMPdisablealpha :: Maybe (Tree Float)
    , _opviewerCOMPvmode :: Maybe (Tree Int)
    , _opviewerCOMPvorigin :: Maybe (Tree Float)
    , _opviewerCOMPdrag :: Maybe (Tree Int)
    , _opviewerCOMPdisablecolor :: Vec3
    , _opviewerCOMPresizehmin :: Maybe (Tree Float)
    , _opviewerCOMPextname3 :: Maybe (Tree ByteString)
    , _opviewerCOMPborderaalpha :: Maybe (Tree Float)
    , _opviewerCOMPoverlay :: Maybe (Tree Bool)
    , _opviewerCOMPrepositionymin :: Maybe (Tree Float)
    , _opviewerCOMPenablecloning :: Maybe (Tree Bool)
    , _opviewerCOMPsubcompname :: Maybe (Tree ByteString)
    , _opviewerCOMPalign :: Maybe (Tree Int)
    , _opviewerCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _opviewerCOMPreinitnet :: Maybe (Tree Bool)
    , _opviewerCOMPmarginr :: Maybe (Tree Float)
    , _opviewerCOMPparentshortcut :: Maybe (Tree ByteString)
    , _opviewerCOMPresizet :: Maybe (Tree Bool)
    , _opviewerCOMPextension4 :: Maybe (Tree ByteString)
    , _opviewerCOMPleftborderi :: Maybe (Tree Int)
    , _opviewerCOMPrepocomp :: Maybe (Tree COMP)
    , _opviewerCOMPrepositionymax :: Maybe (Tree Float)
    , _opviewerCOMPanchordrag :: Maybe (Tree Int)
    , _opviewerCOMPbottomborderi :: Maybe (Tree Int)
    , _opviewerCOMPrightborder :: Maybe (Tree Int)
    , _opviewerCOMPlayer :: Maybe (Tree Float)
    , _opviewerCOMPreinitextensions :: Maybe (Tree Bool)
    , _opviewerCOMPtopborderi :: Maybe (Tree Int)
    , _opviewerCOMPmousewheel :: Maybe (Tree Bool)
    , _opviewerCOMPalignallow :: Maybe (Tree Int)
    , _opviewerCOMPdragdropcallbacks :: Maybe (Tree DAT)
    , _opviewerCOMPtopanchor :: Maybe (Tree Float)
    , _opviewerCOMPrightborderi :: Maybe (Tree Int)
    , _opviewerCOMPresizel :: Maybe (Tree Bool)
    , _opviewerCOMPvfillweight :: Maybe (Tree Float)
    , _opviewerCOMPborderover :: Maybe (Tree Bool)
    , _opviewerCOMPnamedchop :: Maybe (Tree Bool)
    , _opviewerCOMPmarginb :: Maybe (Tree Float)
    , _opviewerCOMPrepositionxmax :: Maybe (Tree Float)
    , _opviewerCOMPextension2 :: Maybe (Tree ByteString)
    , _opviewerCOMPalignmax :: Maybe (Tree Int)
    , _opviewerCOMPjustifyv :: Maybe (Tree Int)
    , _opviewerCOMPpostoffset :: Vec2
    , _opviewerCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _opviewerCOMPtopoffset :: Maybe (Tree Float)
    , _opviewerCOMPcomposite :: Maybe (Tree Int)
    , _opviewerCOMPdragscript :: Maybe (Tree DAT)
    , _opviewerCOMPmultrgb :: Maybe (Tree Bool)
    , _opviewerCOMPextension1 :: Maybe (Tree ByteString)
    , _opviewerCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _opviewerCOMPbordera :: Vec3
    , _opviewerCOMPuvbuttonsleft :: Maybe (Tree Bool)
    , _opviewerCOMPbgcolor :: Vec3
    , _opviewerCOMPresizehmax :: Maybe (Tree Float)
    , _opviewerCOMPhelpdat :: Maybe (Tree DAT)
    , _opviewerCOMPextension3 :: Maybe (Tree ByteString)
    , _opviewerCOMPdrop :: Maybe (Tree Int)
    , _opviewerCOMPexternaltox :: Maybe (Tree ByteString)
    , _opviewerCOMPrightanchor :: Maybe (Tree Float)
    , _opviewerCOMPextname2 :: Maybe (Tree ByteString)
    , _opviewerCOMPh :: Maybe (Tree Int)
    , _opviewerCOMPleftborder :: Maybe (Tree Int)
    , _opviewerCOMPtopfill :: Maybe (Tree Int)
    , _opviewerCOMPresizewmin :: Maybe (Tree Float)
    , _opviewerCOMPmouserel :: Maybe (Tree Bool)
    , _opviewerCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _opviewerCOMPoffset :: Vec2
    , _opviewerCOMPresizeb :: Maybe (Tree Bool)
    , _opviewerCOMPleftoffset :: Maybe (Tree Float)
    , _opviewerCOMPy :: Maybe (Tree Int)
    , _opviewerCOMPpvscrollbar :: Maybe (Tree Int)
    , _opviewerCOMPcrop :: Maybe (Tree Int)
    , _opviewerCOMPbottomoffset :: Maybe (Tree Float)
    , _opviewerCOMPdisplay :: Maybe (Tree Bool)
    , _opviewerCOMPfit :: Maybe (Tree Int)
    , _opviewerCOMPaspect :: Maybe (Tree Float)
    , _opviewerCOMPextname4 :: Maybe (Tree ByteString)
    , _opviewerCOMPuvbuttonsright :: Maybe (Tree Bool)
    , _opviewerCOMPresizewmax :: Maybe (Tree Float)
    , _opviewerCOMPborderb :: Vec3
    , _opviewerCOMPbottomanchor :: Maybe (Tree Float)
    , _opviewerCOMPsizefromwindow :: Maybe (Tree Bool)
    , _opviewerCOMPopacity :: Maybe (Tree Float)
    , _opviewerCOMPtop :: Maybe (Tree TOP)
    , _opviewerCOMPcursor :: Maybe (Tree Int)
    , _opviewerCOMPoverridemethod :: Maybe (Tree Int)
    , _opviewerCOMPreposition :: Maybe (Tree Int)
    , _opviewerCOMPenable :: Maybe (Tree Bool)
    , _opviewerCOMPchop :: Maybe (Tree CHOP)
    , _opviewerCOMPrightoffset :: Maybe (Tree Float)
    , _opviewerCOMPvieweraspect :: Maybe (Tree Int)
    , _opviewerCOMPborderbalpha :: Maybe (Tree Float)
    , _opviewerCOMPscrolloverlay :: Maybe (Tree Int)
    , _opviewerCOMPclone :: Maybe (Tree COMP)
    , _opviewerCOMPkeepmemory :: Maybe (Tree Bool)
    , _opviewerCOMPdropscript :: Maybe (Tree DAT)
    , _opviewerCOMPhfillweight :: Maybe (Tree Float)
    , _opviewerCOMPhorigin :: Maybe (Tree Float)
    , _opviewerCOMPspacing :: Maybe (Tree Float)
    , _opviewerCOMPscale :: Vec2
    , _opviewerCOMPphscrollbar :: Maybe (Tree Int)
    , _opviewerCOMPopshortcut :: Maybe (Tree ByteString)
    , _opviewerCOMPbottomborder :: Maybe (Tree Int)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | AmbientlightCOMP {
    _ambientlightCOMPprojection :: Maybe (Tree Int)
    , _ambientlightCOMPviewanglemethod :: Maybe (Tree Int)
    , _ambientlightCOMPfognear :: Maybe (Tree Float)
    , _ambientlightCOMPwin :: Vec2
    , _ambientlightCOMPextname1 :: Maybe (Tree ByteString)
    , _ambientlightCOMPcustomproj :: Maybe (Tree DAT)
    , _ambientlightCOMPrender :: Maybe (Tree Bool)
    , _ambientlightCOMPextension1 :: Maybe (Tree ByteString)
    , _ambientlightCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _ambientlightCOMPextension4 :: Maybe (Tree ByteString)
    , _ambientlightCOMPpathorient :: Maybe (Tree Bool)
    , _ambientlightCOMProll :: Maybe (Tree Float)
    , _ambientlightCOMPnodeview :: Maybe (Tree Int)
    , _ambientlightCOMPpt :: Vec3
    , _ambientlightCOMPps :: Vec3
    , _ambientlightCOMPfog :: Maybe (Tree Int)
    , _ambientlightCOMPprioritymethod :: Maybe (Tree Int)
    , _ambientlightCOMPfogfar :: Maybe (Tree Float)
    , _ambientlightCOMPextension3 :: Maybe (Tree ByteString)
    , _ambientlightCOMPpxform :: Maybe (Tree Bool)
    , _ambientlightCOMPmaterial :: Maybe (Tree MAT)
    , _ambientlightCOMPreinitextensions :: Maybe (Tree Bool)
    , _ambientlightCOMPr :: Vec3
    , _ambientlightCOMPenablecloning :: Maybe (Tree Bool)
    , _ambientlightCOMPpp :: Vec3
    , _ambientlightCOMPfov :: Maybe (Tree Float)
    , _ambientlightCOMPp :: Vec3
    , _ambientlightCOMPpr :: Vec3
    , _ambientlightCOMPextname2 :: Maybe (Tree ByteString)
    , _ambientlightCOMPopshortcut :: Maybe (Tree ByteString)
    , _ambientlightCOMPpcommit :: Maybe (Tree Bool)
    , _ambientlightCOMPsavebackup :: Maybe (Tree Bool)
    , _ambientlightCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _ambientlightCOMPprojectionblend :: Maybe (Tree Float)
    , _ambientlightCOMPfocal :: Maybe (Tree Float)
    , _ambientlightCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _ambientlightCOMPfogdensity :: Maybe (Tree Float)
    , _ambientlightCOMPsubcompname :: Maybe (Tree ByteString)
    , _ambientlightCOMPpickpriority :: Maybe (Tree Float)
    , _ambientlightCOMPfogalpha :: Maybe (Tree Float)
    , _ambientlightCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _ambientlightCOMPwcolor :: Vec3
    , _ambientlightCOMPpos :: Maybe (Tree Float)
    , _ambientlightCOMPextname4 :: Maybe (Tree ByteString)
    , _ambientlightCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _ambientlightCOMPreinitnet :: Maybe (Tree Bool)
    , _ambientlightCOMPfar :: Maybe (Tree Float)
    , _ambientlightCOMPexternaltox :: Maybe (Tree ByteString)
    , _ambientlightCOMPpreset :: Maybe (Tree Bool)
    , _ambientlightCOMPfogmap :: Maybe (Tree TOP)
    , _ambientlightCOMPpathsop :: Maybe (Tree SOP)
    , _ambientlightCOMPbank :: Maybe (Tree Float)
    , _ambientlightCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _ambientlightCOMPrord :: Maybe (Tree Int)
    , _ambientlightCOMPup :: Vec3
    , _ambientlightCOMPpxord :: Maybe (Tree Int)
    , _ambientlightCOMPxord :: Maybe (Tree Int)
    , _ambientlightCOMPextname3 :: Maybe (Tree ByteString)
    , _ambientlightCOMPnear :: Maybe (Tree Float)
    , _ambientlightCOMPparentshortcut :: Maybe (Tree ByteString)
    , _ambientlightCOMPt :: Vec3
    , _ambientlightCOMPs :: Vec3
    , _ambientlightCOMPbgcolor :: Vec4
    , _ambientlightCOMPc :: Vec3
    , _ambientlightCOMPclone :: Maybe (Tree COMP)
    , _ambientlightCOMPprord :: Maybe (Tree Int)
    , _ambientlightCOMPaperture :: Maybe (Tree Float)
    , _ambientlightCOMPlookup :: Maybe (Tree ByteString)
    , _ambientlightCOMPloadondemand :: Maybe (Tree Bool)
    , _ambientlightCOMPdimmer :: Maybe (Tree Float)
    , _ambientlightCOMPorthowidth :: Maybe (Tree Float)
    , _ambientlightCOMPextension2 :: Maybe (Tree ByteString)
    , _ambientlightCOMPfogcolor :: Vec3
    , _ambientlightCOMPdrawpriority :: Maybe (Tree Float)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | SelectCOMP {
    _selectCOMPtopborder :: Maybe (Tree Int)
    , _selectCOMPscrollbarthickness :: Maybe (Tree Int)
    , _selectCOMPw :: Maybe (Tree Int)
    , _selectCOMPalignorder :: Maybe (Tree Float)
    , _selectCOMPloadondemand :: Maybe (Tree Bool)
    , _selectCOMPjustifyh :: Maybe (Tree Int)
    , _selectCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _selectCOMPdropdestscript :: Maybe (Tree DAT)
    , _selectCOMPrepositionxmin :: Maybe (Tree Float)
    , _selectCOMPselectpanel :: Maybe (Tree COMP)
    , _selectCOMPmarginr :: Maybe (Tree Float)
    , _selectCOMPnodeview :: Maybe (Tree Int)
    , _selectCOMPmargint :: Maybe (Tree Float)
    , _selectCOMPresizer :: Maybe (Tree Bool)
    , _selectCOMPdroptypescript :: Maybe (Tree DAT)
    , _selectCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _selectCOMPfixedaspect :: Maybe (Tree Int)
    , _selectCOMPextname1 :: Maybe (Tree ByteString)
    , _selectCOMPleftanchor :: Maybe (Tree Float)
    , _selectCOMPdodisablecolor :: Maybe (Tree Bool)
    , _selectCOMPmultitouch :: Maybe (Tree Int)
    , _selectCOMPbgalpha :: Maybe (Tree Float)
    , _selectCOMPfollowselection :: Maybe (Tree Bool)
    , _selectCOMPhmode :: Maybe (Tree Int)
    , _selectCOMPsavebackup :: Maybe (Tree Bool)
    , _selectCOMPuvbuttonsmiddle :: Maybe (Tree Bool)
    , _selectCOMPclickthrough :: Maybe (Tree Bool)
    , _selectCOMPdisablealpha :: Maybe (Tree Float)
    , _selectCOMPvmode :: Maybe (Tree Int)
    , _selectCOMPvorigin :: Maybe (Tree Float)
    , _selectCOMPdrag :: Maybe (Tree Int)
    , _selectCOMPdisablecolor :: Vec3
    , _selectCOMPresizehmin :: Maybe (Tree Float)
    , _selectCOMPextname3 :: Maybe (Tree ByteString)
    , _selectCOMPborderaalpha :: Maybe (Tree Float)
    , _selectCOMPoverlay :: Maybe (Tree Bool)
    , _selectCOMPrepositionymin :: Maybe (Tree Float)
    , _selectCOMPenablecloning :: Maybe (Tree Bool)
    , _selectCOMPsubcompname :: Maybe (Tree ByteString)
    , _selectCOMPrightanchor :: Maybe (Tree Float)
    , _selectCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _selectCOMPreinitnet :: Maybe (Tree Bool)
    , _selectCOMPexternaltox :: Maybe (Tree ByteString)
    , _selectCOMPparentshortcut :: Maybe (Tree ByteString)
    , _selectCOMPresizet :: Maybe (Tree Bool)
    , _selectCOMPextension4 :: Maybe (Tree ByteString)
    , _selectCOMPnamedchop :: Maybe (Tree Bool)
    , _selectCOMPx :: Maybe (Tree Int)
    , _selectCOMPrepocomp :: Maybe (Tree COMP)
    , _selectCOMPrepositionymax :: Maybe (Tree Float)
    , _selectCOMPanchordrag :: Maybe (Tree Int)
    , _selectCOMPbottomborderi :: Maybe (Tree Int)
    , _selectCOMPrightborder :: Maybe (Tree Int)
    , _selectCOMPlayer :: Maybe (Tree Float)
    , _selectCOMPreinitextensions :: Maybe (Tree Bool)
    , _selectCOMPtopborderi :: Maybe (Tree Int)
    , _selectCOMPalignallow :: Maybe (Tree Int)
    , _selectCOMPdragdropcallbacks :: Maybe (Tree DAT)
    , _selectCOMPtopanchor :: Maybe (Tree Float)
    , _selectCOMPrightborderi :: Maybe (Tree Int)
    , _selectCOMPresizel :: Maybe (Tree Bool)
    , _selectCOMPvfillweight :: Maybe (Tree Float)
    , _selectCOMPborderover :: Maybe (Tree Bool)
    , _selectCOMPleftborderi :: Maybe (Tree Int)
    , _selectCOMPmarginb :: Maybe (Tree Float)
    , _selectCOMPrepositionxmax :: Maybe (Tree Float)
    , _selectCOMPmatchsize :: Maybe (Tree Bool)
    , _selectCOMPextension2 :: Maybe (Tree ByteString)
    , _selectCOMPborderbalpha :: Maybe (Tree Float)
    , _selectCOMPdropscript :: Maybe (Tree DAT)
    , _selectCOMPpostoffset :: Vec2
    , _selectCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _selectCOMPtopoffset :: Maybe (Tree Float)
    , _selectCOMPcomposite :: Maybe (Tree Int)
    , _selectCOMPmultrgb :: Maybe (Tree Bool)
    , _selectCOMPextension1 :: Maybe (Tree ByteString)
    , _selectCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _selectCOMPbordera :: Vec3
    , _selectCOMPuvbuttonsleft :: Maybe (Tree Bool)
    , _selectCOMPbgcolor :: Vec3
    , _selectCOMPresizehmax :: Maybe (Tree Float)
    , _selectCOMPhelpdat :: Maybe (Tree DAT)
    , _selectCOMPextension3 :: Maybe (Tree ByteString)
    , _selectCOMPaspect :: Maybe (Tree Float)
    , _selectCOMPcursor :: Maybe (Tree Int)
    , _selectCOMPalign :: Maybe (Tree Int)
    , _selectCOMPextname2 :: Maybe (Tree ByteString)
    , _selectCOMPh :: Maybe (Tree Int)
    , _selectCOMPleftborder :: Maybe (Tree Int)
    , _selectCOMPtopfill :: Maybe (Tree Int)
    , _selectCOMPresizewmin :: Maybe (Tree Float)
    , _selectCOMPmouserel :: Maybe (Tree Bool)
    , _selectCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _selectCOMPoffset :: Vec2
    , _selectCOMPresizeb :: Maybe (Tree Bool)
    , _selectCOMPleftoffset :: Maybe (Tree Float)
    , _selectCOMPy :: Maybe (Tree Int)
    , _selectCOMPpvscrollbar :: Maybe (Tree Int)
    , _selectCOMPcrop :: Maybe (Tree Int)
    , _selectCOMPbottomoffset :: Maybe (Tree Float)
    , _selectCOMPdisplay :: Maybe (Tree Bool)
    , _selectCOMPfit :: Maybe (Tree Int)
    , _selectCOMPdrop :: Maybe (Tree Int)
    , _selectCOMPextname4 :: Maybe (Tree ByteString)
    , _selectCOMPmarginl :: Maybe (Tree Float)
    , _selectCOMPuvbuttonsright :: Maybe (Tree Bool)
    , _selectCOMPresizewmax :: Maybe (Tree Float)
    , _selectCOMPdragscript :: Maybe (Tree DAT)
    , _selectCOMPbottomanchor :: Maybe (Tree Float)
    , _selectCOMPsizefromwindow :: Maybe (Tree Bool)
    , _selectCOMPopacity :: Maybe (Tree Float)
    , _selectCOMPborderb :: Vec3
    , _selectCOMPmousewheel :: Maybe (Tree Bool)
    , _selectCOMPoverridemethod :: Maybe (Tree Int)
    , _selectCOMPreposition :: Maybe (Tree Int)
    , _selectCOMPenable :: Maybe (Tree Bool)
    , _selectCOMPchop :: Maybe (Tree CHOP)
    , _selectCOMPspacing :: Maybe (Tree Float)
    , _selectCOMPrightoffset :: Maybe (Tree Float)
    , _selectCOMPvieweraspect :: Maybe (Tree Int)
    , _selectCOMPalignmax :: Maybe (Tree Int)
    , _selectCOMPscrolloverlay :: Maybe (Tree Int)
    , _selectCOMPclone :: Maybe (Tree COMP)
    , _selectCOMPkeepmemory :: Maybe (Tree Bool)
    , _selectCOMPjustifyv :: Maybe (Tree Int)
    , _selectCOMPhfillweight :: Maybe (Tree Float)
    , _selectCOMPhorigin :: Maybe (Tree Float)
    , _selectCOMPtop :: Maybe (Tree TOP)
    , _selectCOMPscale :: Vec2
    , _selectCOMPphscrollbar :: Maybe (Tree Int)
    , _selectCOMPopshortcut :: Maybe (Tree ByteString)
    , _selectCOMPbottomborder :: Maybe (Tree Int)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | EnvironmentlightCOMP {
    _environmentlightCOMPprojection :: Maybe (Tree Int)
    , _environmentlightCOMPviewanglemethod :: Maybe (Tree Int)
    , _environmentlightCOMPfognear :: Maybe (Tree Float)
    , _environmentlightCOMPextname1 :: Maybe (Tree ByteString)
    , _environmentlightCOMPloadondemand :: Maybe (Tree Bool)
    , _environmentlightCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _environmentlightCOMPextension4 :: Maybe (Tree ByteString)
    , _environmentlightCOMPpathorient :: Maybe (Tree Bool)
    , _environmentlightCOMProll :: Maybe (Tree Float)
    , _environmentlightCOMPnodeview :: Maybe (Tree Int)
    , _environmentlightCOMPenvlightmapprefilter :: Maybe (Tree Int)
    , _environmentlightCOMPcustomproj :: Maybe (Tree DAT)
    , _environmentlightCOMPbank :: Maybe (Tree Float)
    , _environmentlightCOMPfov :: Maybe (Tree Float)
    , _environmentlightCOMPp :: Vec3
    , _environmentlightCOMPenvlightmap :: Maybe (Tree TOP)
    , _environmentlightCOMPsavebackup :: Maybe (Tree Bool)
    , _environmentlightCOMPprojectionblend :: Maybe (Tree Float)
    , _environmentlightCOMPpos :: Maybe (Tree Float)
    , _environmentlightCOMPfogdensity :: Maybe (Tree Float)
    , _environmentlightCOMPsubcompname :: Maybe (Tree ByteString)
    , _environmentlightCOMPpickpriority :: Maybe (Tree Float)
    , _environmentlightCOMPfogalpha :: Maybe (Tree Float)
    , _environmentlightCOMPenvlightspecmap :: Maybe (Tree TOP)
    , _environmentlightCOMPpr :: Vec3
    , _environmentlightCOMPwcolor :: Vec3
    , _environmentlightCOMPfocal :: Maybe (Tree Float)
    , _environmentlightCOMPreinitnet :: Maybe (Tree Bool)
    , _environmentlightCOMPfar :: Maybe (Tree Float)
    , _environmentlightCOMPexternaltox :: Maybe (Tree ByteString)
    , _environmentlightCOMPparentshortcut :: Maybe (Tree ByteString)
    , _environmentlightCOMPpreset :: Maybe (Tree Bool)
    , _environmentlightCOMPpathsop :: Maybe (Tree SOP)
    , _environmentlightCOMPaperture :: Maybe (Tree Float)
    , _environmentlightCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _environmentlightCOMPup :: Vec3
    , _environmentlightCOMPpxord :: Maybe (Tree Int)
    , _environmentlightCOMPextname3 :: Maybe (Tree ByteString)
    , _environmentlightCOMPreinitextensions :: Maybe (Tree Bool)
    , _environmentlightCOMPprord :: Maybe (Tree Int)
    , _environmentlightCOMPpt :: Vec3
    , _environmentlightCOMPlookup :: Maybe (Tree ByteString)
    , _environmentlightCOMPt :: Vec3
    , _environmentlightCOMPfogcolor :: Vec3
    , _environmentlightCOMPdrawpriority :: Maybe (Tree Float)
    , _environmentlightCOMPwin :: Vec2
    , _environmentlightCOMPrender :: Maybe (Tree Bool)
    , _environmentlightCOMPextension1 :: Maybe (Tree ByteString)
    , _environmentlightCOMPprioritymethod :: Maybe (Tree Int)
    , _environmentlightCOMPenvlightmapquality :: Maybe (Tree Float)
    , _environmentlightCOMPps :: Vec3
    , _environmentlightCOMPfog :: Maybe (Tree Int)
    , _environmentlightCOMPfogfar :: Maybe (Tree Float)
    , _environmentlightCOMPextension3 :: Maybe (Tree ByteString)
    , _environmentlightCOMPpxform :: Maybe (Tree Bool)
    , _environmentlightCOMPmaterial :: Maybe (Tree MAT)
    , _environmentlightCOMPbgcolor :: Vec4
    , _environmentlightCOMPr :: Vec3
    , _environmentlightCOMPenablecloning :: Maybe (Tree Bool)
    , _environmentlightCOMPenvlightmaprotate :: Vec3
    , _environmentlightCOMPpp :: Vec3
    , _environmentlightCOMPextname2 :: Maybe (Tree ByteString)
    , _environmentlightCOMPopshortcut :: Maybe (Tree ByteString)
    , _environmentlightCOMPpcommit :: Maybe (Tree Bool)
    , _environmentlightCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _environmentlightCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _environmentlightCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _environmentlightCOMPenvlightdiffusemap :: Maybe (Tree TOP)
    , _environmentlightCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _environmentlightCOMPextname4 :: Maybe (Tree ByteString)
    , _environmentlightCOMPfogmap :: Maybe (Tree TOP)
    , _environmentlightCOMPxord :: Maybe (Tree Int)
    , _environmentlightCOMPorthowidth :: Maybe (Tree Float)
    , _environmentlightCOMPnear :: Maybe (Tree Float)
    , _environmentlightCOMPextension2 :: Maybe (Tree ByteString)
    , _environmentlightCOMPs :: Vec3
    , _environmentlightCOMPc :: Vec3
    , _environmentlightCOMPclone :: Maybe (Tree COMP)
    , _environmentlightCOMPenvlightmaptype2d :: Maybe (Tree Int)
    , _environmentlightCOMPrord :: Maybe (Tree Int)
    , _environmentlightCOMPdimmer :: Maybe (Tree Float)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | WindowCOMP {
    _windowCOMPdpiscaling :: Maybe (Tree Int)
    , _windowCOMPextname1 :: Maybe (Tree ByteString)
    , _windowCOMPjustifyh :: Maybe (Tree Int)
    , _windowCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _windowCOMPwinw :: Maybe (Tree Int)
    , _windowCOMPextension4 :: Maybe (Tree ByteString)
    , _windowCOMPsavebackup :: Maybe (Tree Bool)
    , _windowCOMPbordersinsize :: Maybe (Tree Bool)
    , _windowCOMPborders :: Maybe (Tree Bool)
    , _windowCOMPsingle :: Maybe (Tree Int)
    , _windowCOMPextension3 :: Maybe (Tree ByteString)
    , _windowCOMPparentshortcut :: Maybe (Tree ByteString)
    , _windowCOMPenablecloning :: Maybe (Tree Bool)
    , _windowCOMPwinoffsety :: Maybe (Tree Int)
    , _windowCOMPhwframelock :: Maybe (Tree Bool)
    , _windowCOMPextname2 :: Maybe (Tree ByteString)
    , _windowCOMPopshortcut :: Maybe (Tree ByteString)
    , _windowCOMPincludedialog :: Maybe (Tree Bool)
    , _windowCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _windowCOMPcloseescape :: Maybe (Tree Bool)
    , _windowCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _windowCOMPperformance :: Maybe (Tree Bool)
    , _windowCOMPloadondemand :: Maybe (Tree Bool)
    , _windowCOMPextension1 :: Maybe (Tree ByteString)
    , _windowCOMPwinoffsetx :: Maybe (Tree Int)
    , _windowCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _windowCOMPwinh :: Maybe (Tree Int)
    , _windowCOMPalwaysontop :: Maybe (Tree Bool)
    , _windowCOMPextname4 :: Maybe (Tree ByteString)
    , _windowCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _windowCOMPreinitnet :: Maybe (Tree Bool)
    , _windowCOMPexternaltox :: Maybe (Tree ByteString)
    , _windowCOMPmonitor :: Maybe (Tree Int)
    , _windowCOMPinteract :: Maybe (Tree Bool)
    , _windowCOMPwinclose :: Maybe (Tree Bool)
    , _windowCOMPupdate :: Maybe (Tree Bool)
    , _windowCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _windowCOMPsubcompname :: Maybe (Tree ByteString)
    , _windowCOMPtitle :: Maybe (Tree ByteString)
    , _windowCOMPwinopen :: Maybe (Tree Bool)
    , _windowCOMPextname3 :: Maybe (Tree ByteString)
    , _windowCOMPjustifyoffsetto :: Maybe (Tree Int)
    , _windowCOMPreinitextensions :: Maybe (Tree Bool)
    , _windowCOMPignoretaskbar :: Maybe (Tree Bool)
    , _windowCOMPopendialog :: Maybe (Tree Bool)
    , _windowCOMPsize :: Maybe (Tree Int)
    , _windowCOMPsetperform :: Maybe (Tree Bool)
    , _windowCOMPclone :: Maybe (Tree COMP)
    , _windowCOMPdrawwindow :: Maybe (Tree Bool)
    , _windowCOMPcursorvisible :: Maybe (Tree Int)
    , _windowCOMPopenglstereo :: Maybe (Tree Bool)
    , _windowCOMPvsyncmode :: Maybe (Tree Int)
    , _windowCOMPextension2 :: Maybe (Tree ByteString)
    , _windowCOMPjustifyv :: Maybe (Tree Int)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | ButtonCOMP {
    _buttonCOMPtopborder :: Maybe (Tree Int)
    , _buttonCOMPscrollbarthickness :: Maybe (Tree Int)
    , _buttonCOMPw :: Maybe (Tree Int)
    , _buttonCOMPalignorder :: Maybe (Tree Float)
    , _buttonCOMPloadondemand :: Maybe (Tree Bool)
    , _buttonCOMPjustifyh :: Maybe (Tree Int)
    , _buttonCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _buttonCOMPdropdestscript :: Maybe (Tree DAT)
    , _buttonCOMPrepositionxmin :: Maybe (Tree Float)
    , _buttonCOMPx :: Maybe (Tree Int)
    , _buttonCOMPnodeview :: Maybe (Tree Int)
    , _buttonCOMPmargint :: Maybe (Tree Float)
    , _buttonCOMPresizer :: Maybe (Tree Bool)
    , _buttonCOMPdroptypescript :: Maybe (Tree DAT)
    , _buttonCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _buttonCOMPfixedaspect :: Maybe (Tree Int)
    , _buttonCOMPextname1 :: Maybe (Tree ByteString)
    , _buttonCOMPmarginl :: Maybe (Tree Float)
    , _buttonCOMPdodisablecolor :: Maybe (Tree Bool)
    , _buttonCOMPmultitouch :: Maybe (Tree Int)
    , _buttonCOMPbgalpha :: Maybe (Tree Float)
    , _buttonCOMPhmode :: Maybe (Tree Int)
    , _buttonCOMPsavebackup :: Maybe (Tree Bool)
    , _buttonCOMPuvbuttonsmiddle :: Maybe (Tree Bool)
    , _buttonCOMPleftanchor :: Maybe (Tree Float)
    , _buttonCOMPclickthrough :: Maybe (Tree Bool)
    , _buttonCOMPdisablealpha :: Maybe (Tree Float)
    , _buttonCOMPvmode :: Maybe (Tree Int)
    , _buttonCOMPvorigin :: Maybe (Tree Float)
    , _buttonCOMPdrag :: Maybe (Tree Int)
    , _buttonCOMPdisablecolor :: Vec3
    , _buttonCOMPresizehmin :: Maybe (Tree Float)
    , _buttonCOMPextname3 :: Maybe (Tree ByteString)
    , _buttonCOMPborderaalpha :: Maybe (Tree Float)
    , _buttonCOMPoverlay :: Maybe (Tree Bool)
    , _buttonCOMPbuttongroupdat :: Maybe (Tree DAT)
    , _buttonCOMPrepositionymin :: Maybe (Tree Float)
    , _buttonCOMPenablecloning :: Maybe (Tree Bool)
    , _buttonCOMPsubcompname :: Maybe (Tree ByteString)
    , _buttonCOMPalign :: Maybe (Tree Int)
    , _buttonCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _buttonCOMPreinitnet :: Maybe (Tree Bool)
    , _buttonCOMPmarginr :: Maybe (Tree Float)
    , _buttonCOMPparentshortcut :: Maybe (Tree ByteString)
    , _buttonCOMPresizet :: Maybe (Tree Bool)
    , _buttonCOMPextension4 :: Maybe (Tree ByteString)
    , _buttonCOMPleftborderi :: Maybe (Tree Int)
    , _buttonCOMPrepocomp :: Maybe (Tree COMP)
    , _buttonCOMPrepositionymax :: Maybe (Tree Float)
    , _buttonCOMPanchordrag :: Maybe (Tree Int)
    , _buttonCOMPbottomborderi :: Maybe (Tree Int)
    , _buttonCOMPrightborder :: Maybe (Tree Int)
    , _buttonCOMPbottomborder :: Maybe (Tree Int)
    , _buttonCOMPlayer :: Maybe (Tree Float)
    , _buttonCOMPreinitextensions :: Maybe (Tree Bool)
    , _buttonCOMPtopborderi :: Maybe (Tree Int)
    , _buttonCOMPalignallow :: Maybe (Tree Int)
    , _buttonCOMPdragdropcallbacks :: Maybe (Tree DAT)
    , _buttonCOMPtopanchor :: Maybe (Tree Float)
    , _buttonCOMPrightborderi :: Maybe (Tree Int)
    , _buttonCOMPresizel :: Maybe (Tree Bool)
    , _buttonCOMPvfillweight :: Maybe (Tree Float)
    , _buttonCOMPborderover :: Maybe (Tree Bool)
    , _buttonCOMPnamedchop :: Maybe (Tree Bool)
    , _buttonCOMPmarginb :: Maybe (Tree Float)
    , _buttonCOMPrepositionxmax :: Maybe (Tree Float)
    , _buttonCOMPextension2 :: Maybe (Tree ByteString)
    , _buttonCOMPalignmax :: Maybe (Tree Int)
    , _buttonCOMPjustifyv :: Maybe (Tree Int)
    , _buttonCOMPpostoffset :: Vec2
    , _buttonCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _buttonCOMPtopoffset :: Maybe (Tree Float)
    , _buttonCOMPcomposite :: Maybe (Tree Int)
    , _buttonCOMPdragscript :: Maybe (Tree DAT)
    , _buttonCOMPmultrgb :: Maybe (Tree Bool)
    , _buttonCOMPextension1 :: Maybe (Tree ByteString)
    , _buttonCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _buttonCOMPbordera :: Vec3
    , _buttonCOMPuvbuttonsleft :: Maybe (Tree Bool)
    , _buttonCOMPbgcolor :: Vec3
    , _buttonCOMPresizehmax :: Maybe (Tree Float)
    , _buttonCOMPhelpdat :: Maybe (Tree DAT)
    , _buttonCOMPextension3 :: Maybe (Tree ByteString)
    , _buttonCOMPdrop :: Maybe (Tree Int)
    , _buttonCOMPexternaltox :: Maybe (Tree ByteString)
    , _buttonCOMPbuttontype :: Maybe (Tree Int)
    , _buttonCOMPrightanchor :: Maybe (Tree Float)
    , _buttonCOMPextname2 :: Maybe (Tree ByteString)
    , _buttonCOMPh :: Maybe (Tree Int)
    , _buttonCOMPleftborder :: Maybe (Tree Int)
    , _buttonCOMPtopfill :: Maybe (Tree Int)
    , _buttonCOMPresizewmin :: Maybe (Tree Float)
    , _buttonCOMPmouserel :: Maybe (Tree Bool)
    , _buttonCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _buttonCOMPoffset :: Vec2
    , _buttonCOMPresizeb :: Maybe (Tree Bool)
    , _buttonCOMPleftoffset :: Maybe (Tree Float)
    , _buttonCOMPy :: Maybe (Tree Int)
    , _buttonCOMPpvscrollbar :: Maybe (Tree Int)
    , _buttonCOMPcrop :: Maybe (Tree Int)
    , _buttonCOMPbottomoffset :: Maybe (Tree Float)
    , _buttonCOMPdisplay :: Maybe (Tree Bool)
    , _buttonCOMPfit :: Maybe (Tree Int)
    , _buttonCOMPaspect :: Maybe (Tree Float)
    , _buttonCOMPextname4 :: Maybe (Tree ByteString)
    , _buttonCOMPuvbuttonsright :: Maybe (Tree Bool)
    , _buttonCOMPresizewmax :: Maybe (Tree Float)
    , _buttonCOMPborderb :: Vec3
    , _buttonCOMPbottomanchor :: Maybe (Tree Float)
    , _buttonCOMPsizefromwindow :: Maybe (Tree Bool)
    , _buttonCOMPopacity :: Maybe (Tree Float)
    , _buttonCOMPbuttongroup :: Maybe (Tree ByteString)
    , _buttonCOMPtop :: Maybe (Tree TOP)
    , _buttonCOMPmousewheel :: Maybe (Tree Bool)
    , _buttonCOMPoverridemethod :: Maybe (Tree Int)
    , _buttonCOMPreposition :: Maybe (Tree Int)
    , _buttonCOMPenable :: Maybe (Tree Bool)
    , _buttonCOMPchop :: Maybe (Tree CHOP)
    , _buttonCOMPrightoffset :: Maybe (Tree Float)
    , _buttonCOMPvieweraspect :: Maybe (Tree Int)
    , _buttonCOMPborderbalpha :: Maybe (Tree Float)
    , _buttonCOMPscrolloverlay :: Maybe (Tree Int)
    , _buttonCOMPclone :: Maybe (Tree COMP)
    , _buttonCOMPkeepmemory :: Maybe (Tree Bool)
    , _buttonCOMPdropscript :: Maybe (Tree DAT)
    , _buttonCOMPhfillweight :: Maybe (Tree Float)
    , _buttonCOMPhorigin :: Maybe (Tree Float)
    , _buttonCOMPspacing :: Maybe (Tree Float)
    , _buttonCOMPscale :: Vec2
    , _buttonCOMPphscrollbar :: Maybe (Tree Int)
    , _buttonCOMPopshortcut :: Maybe (Tree ByteString)
    , _buttonCOMPcursor :: Maybe (Tree Int)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | BlendCOMP {
    _blendCOMPinstancea :: Maybe (Tree ByteString)
    , _blendCOMPparenttype :: Maybe (Tree Int)
    , _blendCOMPinstancerotupy :: Maybe (Tree ByteString)
    , _blendCOMPextname1 :: Maybe (Tree ByteString)
    , _blendCOMPinstancerottoz :: Maybe (Tree ByteString)
    , _blendCOMPinstancesz :: Maybe (Tree ByteString)
    , _blendCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _blendCOMPinstanceb :: Maybe (Tree ByteString)
    , _blendCOMPextension4 :: Maybe (Tree ByteString)
    , _blendCOMPpathorient :: Maybe (Tree Bool)
    , _blendCOMProll :: Maybe (Tree Float)
    , _blendCOMPnodeview :: Maybe (Tree Int)
    , _blendCOMPinstancepx :: Maybe (Tree ByteString)
    , _blendCOMPpt :: Vec3
    , _blendCOMPinstancetexanisotropy :: Maybe (Tree Int)
    , _blendCOMPblendm3 :: Maybe (Tree Int)
    , _blendCOMPprioritymethod :: Maybe (Tree Int)
    , _blendCOMPblendw3 :: Maybe (Tree Float)
    , _blendCOMPinstancefirstrow :: Maybe (Tree Int)
    , _blendCOMPbank :: Maybe (Tree Float)
    , _blendCOMPinstancety :: Maybe (Tree ByteString)
    , _blendCOMPinstxord :: Maybe (Tree Int)
    , _blendCOMPp :: Vec3
    , _blendCOMPshortrot :: Maybe (Tree Bool)
    , _blendCOMPsavebackup :: Maybe (Tree Bool)
    , _blendCOMPinstancerottox :: Maybe (Tree ByteString)
    , _blendCOMPaxesorient :: Maybe (Tree Bool)
    , _blendCOMPpos :: Maybe (Tree Float)
    , _blendCOMPpathsop :: Maybe (Tree SOP)
    , _blendCOMPsubcompname :: Maybe (Tree ByteString)
    , _blendCOMPpickpriority :: Maybe (Tree Float)
    , _blendCOMPinstancetexfilter :: Maybe (Tree Int)
    , _blendCOMPpr :: Vec3
    , _blendCOMPinstanceg :: Maybe (Tree ByteString)
    , _blendCOMPinstancetexmode :: Maybe (Tree Int)
    , _blendCOMPwcolor :: Vec3
    , _blendCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _blendCOMPinstancew :: Maybe (Tree ByteString)
    , _blendCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _blendCOMPreinitnet :: Maybe (Tree Bool)
    , _blendCOMPexternaltox :: Maybe (Tree ByteString)
    , _blendCOMPreinitextensions :: Maybe (Tree Bool)
    , _blendCOMPpreset :: Maybe (Tree Bool)
    , _blendCOMPnuminstances :: Maybe (Tree Int)
    , _blendCOMPup :: Vec3
    , _blendCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _blendCOMPinstrord :: Maybe (Tree Int)
    , _blendCOMPpxord :: Maybe (Tree Int)
    , _blendCOMPinstancetexindex :: Maybe (Tree ByteString)
    , _blendCOMPextname3 :: Maybe (Tree ByteString)
    , _blendCOMPparentshortcut :: Maybe (Tree ByteString)
    , _blendCOMPinstancesx :: Maybe (Tree ByteString)
    , _blendCOMPinstancing :: Maybe (Tree Bool)
    , _blendCOMPinstancepy :: Maybe (Tree ByteString)
    , _blendCOMPprord :: Maybe (Tree Int)
    , _blendCOMPblendm1 :: Maybe (Tree Int)
    , _blendCOMPinstancerz :: Maybe (Tree ByteString)
    , _blendCOMPextension2 :: Maybe (Tree ByteString)
    , _blendCOMPps :: Vec3
    , _blendCOMPreset :: Maybe (Tree Float)
    , _blendCOMPinstanceu :: Maybe (Tree ByteString)
    , _blendCOMPblendw2 :: Maybe (Tree Float)
    , _blendCOMPrender :: Maybe (Tree Bool)
    , _blendCOMPextension1 :: Maybe (Tree ByteString)
    , _blendCOMPinstancetexextendv :: Maybe (Tree Int)
    , _blendCOMPextension3 :: Maybe (Tree ByteString)
    , _blendCOMPpxform :: Maybe (Tree Bool)
    , _blendCOMPmaterial :: Maybe (Tree MAT)
    , _blendCOMPinstancer :: Maybe (Tree ByteString)
    , _blendCOMPr :: Vec3
    , _blendCOMPenablecloning :: Maybe (Tree Bool)
    , _blendCOMPinstancecolormode :: Maybe (Tree Int)
    , _blendCOMPblendm4 :: Maybe (Tree Int)
    , _blendCOMPblendm2 :: Maybe (Tree Int)
    , _blendCOMPinstancerx :: Maybe (Tree ByteString)
    , _blendCOMPextname2 :: Maybe (Tree ByteString)
    , _blendCOMPopshortcut :: Maybe (Tree ByteString)
    , _blendCOMPinstancetx :: Maybe (Tree ByteString)
    , _blendCOMPpcommit :: Maybe (Tree Bool)
    , _blendCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _blendCOMPblendw4 :: Maybe (Tree Float)
    , _blendCOMPinstanceorder :: Maybe (Tree Int)
    , _blendCOMPsequence :: Maybe (Tree Float)
    , _blendCOMPinstancetexextendu :: Maybe (Tree Int)
    , _blendCOMPinstancemode :: Maybe (Tree Int)
    , _blendCOMPinstancerottoorder :: Maybe (Tree Int)
    , _blendCOMPinstancepz :: Maybe (Tree ByteString)
    , _blendCOMPinstancetexs :: Maybe (Tree TOP)
    , _blendCOMPlookup :: Maybe (Tree ByteString)
    , _blendCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _blendCOMPextname4 :: Maybe (Tree ByteString)
    , _blendCOMPblendw1 :: Maybe (Tree Float)
    , _blendCOMPinstancerotupz :: Maybe (Tree ByteString)
    , _blendCOMPrord :: Maybe (Tree Int)
    , _blendCOMPpp :: Vec3
    , _blendCOMPinstancesy :: Maybe (Tree ByteString)
    , _blendCOMPxord :: Maybe (Tree Int)
    , _blendCOMPinstancery :: Maybe (Tree ByteString)
    , _blendCOMPt :: Vec3
    , _blendCOMPnoffset :: Maybe (Tree Float)
    , _blendCOMPs :: Vec3
    , _blendCOMPclone :: Maybe (Tree COMP)
    , _blendCOMPdrawpriority :: Maybe (Tree Float)
    , _blendCOMPinstancetexextendw :: Maybe (Tree Int)
    , _blendCOMPinstancerotupx :: Maybe (Tree ByteString)
    , _blendCOMPloadondemand :: Maybe (Tree Bool)
    , _blendCOMPinstancerottoy :: Maybe (Tree ByteString)
    , _blendCOMPinstancev :: Maybe (Tree ByteString)
    , _blendCOMPinstancetz :: Maybe (Tree ByteString)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | CamerablendCOMP {
    _camerablendCOMPprojection :: Maybe (Tree Int)
    , _camerablendCOMPviewanglemethod :: Maybe (Tree Int)
    , _camerablendCOMPparenttype :: Maybe (Tree Int)
    , _camerablendCOMPextname1 :: Maybe (Tree ByteString)
    , _camerablendCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _camerablendCOMPfognear :: Maybe (Tree Float)
    , _camerablendCOMPpathorient :: Maybe (Tree Bool)
    , _camerablendCOMProll :: Maybe (Tree Float)
    , _camerablendCOMPnodeview :: Maybe (Tree Int)
    , _camerablendCOMPpt :: Vec3
    , _camerablendCOMPblendm3 :: Maybe (Tree Int)
    , _camerablendCOMPprioritymethod :: Maybe (Tree Int)
    , _camerablendCOMPblendw3 :: Maybe (Tree Float)
    , _camerablendCOMPblendm4 :: Maybe (Tree Int)
    , _camerablendCOMPbank :: Maybe (Tree Float)
    , _camerablendCOMPfov :: Maybe (Tree Float)
    , _camerablendCOMPp :: Vec3
    , _camerablendCOMPshortrot :: Maybe (Tree Bool)
    , _camerablendCOMPsavebackup :: Maybe (Tree Bool)
    , _camerablendCOMPprojectionblend :: Maybe (Tree Float)
    , _camerablendCOMPaxesorient :: Maybe (Tree Bool)
    , _camerablendCOMPpos :: Maybe (Tree Float)
    , _camerablendCOMPpathsop :: Maybe (Tree SOP)
    , _camerablendCOMPloadondemand :: Maybe (Tree Bool)
    , _camerablendCOMPpickpriority :: Maybe (Tree Float)
    , _camerablendCOMPfogalpha :: Maybe (Tree Float)
    , _camerablendCOMPpr :: Vec3
    , _camerablendCOMPwcolor :: Vec3
    , _camerablendCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _camerablendCOMPfocal :: Maybe (Tree Float)
    , _camerablendCOMPreinitnet :: Maybe (Tree Bool)
    , _camerablendCOMPfar :: Maybe (Tree Float)
    , _camerablendCOMPexternaltox :: Maybe (Tree ByteString)
    , _camerablendCOMPps :: Vec3
    , _camerablendCOMPpreset :: Maybe (Tree Bool)
    , _camerablendCOMPextension4 :: Maybe (Tree ByteString)
    , _camerablendCOMPfogdensity :: Maybe (Tree Float)
    , _camerablendCOMPaperture :: Maybe (Tree Float)
    , _camerablendCOMPup :: Vec3
    , _camerablendCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _camerablendCOMPsubcompname :: Maybe (Tree ByteString)
    , _camerablendCOMPpxord :: Maybe (Tree Int)
    , _camerablendCOMPextname3 :: Maybe (Tree ByteString)
    , _camerablendCOMPreinitextensions :: Maybe (Tree Bool)
    , _camerablendCOMPprord :: Maybe (Tree Int)
    , _camerablendCOMPblendm1 :: Maybe (Tree Int)
    , _camerablendCOMPextension2 :: Maybe (Tree ByteString)
    , _camerablendCOMPfogcolor :: Vec3
    , _camerablendCOMPdrawpriority :: Maybe (Tree Float)
    , _camerablendCOMPreset :: Maybe (Tree Float)
    , _camerablendCOMPwin :: Vec2
    , _camerablendCOMPblendw2 :: Maybe (Tree Float)
    , _camerablendCOMPrender :: Maybe (Tree Bool)
    , _camerablendCOMPextension1 :: Maybe (Tree ByteString)
    , _camerablendCOMPcustomproj :: Maybe (Tree DAT)
    , _camerablendCOMPfog :: Maybe (Tree Int)
    , _camerablendCOMPfogfar :: Maybe (Tree Float)
    , _camerablendCOMPbgcolor :: Vec4
    , _camerablendCOMPpxform :: Maybe (Tree Bool)
    , _camerablendCOMPmaterial :: Maybe (Tree MAT)
    , _camerablendCOMPextension3 :: Maybe (Tree ByteString)
    , _camerablendCOMPr :: Vec3
    , _camerablendCOMPenablecloning :: Maybe (Tree Bool)
    , _camerablendCOMPpp :: Vec3
    , _camerablendCOMPblendm2 :: Maybe (Tree Int)
    , _camerablendCOMPextname2 :: Maybe (Tree ByteString)
    , _camerablendCOMPopshortcut :: Maybe (Tree ByteString)
    , _camerablendCOMPpcommit :: Maybe (Tree Bool)
    , _camerablendCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _camerablendCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _camerablendCOMPblendw4 :: Maybe (Tree Float)
    , _camerablendCOMPsequence :: Maybe (Tree Float)
    , _camerablendCOMPparentshortcut :: Maybe (Tree ByteString)
    , _camerablendCOMPlookup :: Maybe (Tree ByteString)
    , _camerablendCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _camerablendCOMPextname4 :: Maybe (Tree ByteString)
    , _camerablendCOMPblendw1 :: Maybe (Tree Float)
    , _camerablendCOMPfogmap :: Maybe (Tree TOP)
    , _camerablendCOMPxord :: Maybe (Tree Int)
    , _camerablendCOMPnear :: Maybe (Tree Float)
    , _camerablendCOMPt :: Vec3
    , _camerablendCOMPnoffset :: Maybe (Tree Float)
    , _camerablendCOMPs :: Vec3
    , _camerablendCOMPclone :: Maybe (Tree COMP)
    , _camerablendCOMPrord :: Maybe (Tree Int)
    , _camerablendCOMPorthowidth :: Maybe (Tree Float)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | BoneCOMP {
    _boneCOMPinstancea :: Maybe (Tree ByteString)
    , _boneCOMPendxrange :: Maybe (Tree Float)
    , _boneCOMPinstancerotupy :: Maybe (Tree ByteString)
    , _boneCOMPextname1 :: Maybe (Tree ByteString)
    , _boneCOMPinstancerottoz :: Maybe (Tree ByteString)
    , _boneCOMPloadondemand :: Maybe (Tree Bool)
    , _boneCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _boneCOMPikdamp :: Maybe (Tree Float)
    , _boneCOMPextension4 :: Maybe (Tree ByteString)
    , _boneCOMPpathorient :: Maybe (Tree Bool)
    , _boneCOMProll :: Maybe (Tree Float)
    , _boneCOMPcrbotheight :: Maybe (Tree Float)
    , _boneCOMPinstancepx :: Maybe (Tree ByteString)
    , _boneCOMPpt :: Vec3
    , _boneCOMPinstancetexanisotropy :: Maybe (Tree Int)
    , _boneCOMPinstancetexfilter :: Maybe (Tree Int)
    , _boneCOMPprioritymethod :: Maybe (Tree Int)
    , _boneCOMPinstancefirstrow :: Maybe (Tree Int)
    , _boneCOMPbank :: Maybe (Tree Float)
    , _boneCOMPinstancety :: Maybe (Tree ByteString)
    , _boneCOMPinstxord :: Maybe (Tree Int)
    , _boneCOMPp :: Vec3
    , _boneCOMPcrtopcap :: Vec3
    , _boneCOMPsavebackup :: Maybe (Tree Bool)
    , _boneCOMPinstancev :: Maybe (Tree ByteString)
    , _boneCOMPinstancerottox :: Maybe (Tree ByteString)
    , _boneCOMPpos :: Maybe (Tree Float)
    , _boneCOMPendyrange :: Maybe (Tree Float)
    , _boneCOMPpathsop :: Maybe (Tree SOP)
    , _boneCOMPsubcompname :: Maybe (Tree ByteString)
    , _boneCOMPpickpriority :: Maybe (Tree Float)
    , _boneCOMPextension1 :: Maybe (Tree ByteString)
    , _boneCOMPinstanceorder :: Maybe (Tree Int)
    , _boneCOMPpr :: Vec3
    , _boneCOMPinstanceg :: Maybe (Tree ByteString)
    , _boneCOMPinstancetexmode :: Maybe (Tree Int)
    , _boneCOMPwcolor :: Vec3
    , _boneCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _boneCOMPinstanceb :: Maybe (Tree ByteString)
    , _boneCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _boneCOMPreinitnet :: Maybe (Tree Bool)
    , _boneCOMPexternaltox :: Maybe (Tree ByteString)
    , _boneCOMPreinitextensions :: Maybe (Tree Bool)
    , _boneCOMPpreset :: Maybe (Tree Bool)
    , _boneCOMPnuminstances :: Maybe (Tree Int)
    , _boneCOMPrestangles :: Vec3
    , _boneCOMPup :: Vec3
    , _boneCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _boneCOMPinstrord :: Maybe (Tree Int)
    , _boneCOMPpxord :: Maybe (Tree Int)
    , _boneCOMPinstancetexindex :: Maybe (Tree ByteString)
    , _boneCOMPextname3 :: Maybe (Tree ByteString)
    , _boneCOMPparentshortcut :: Maybe (Tree ByteString)
    , _boneCOMPnodeview :: Maybe (Tree Int)
    , _boneCOMPinstancesx :: Maybe (Tree ByteString)
    , _boneCOMPinstancing :: Maybe (Tree Bool)
    , _boneCOMPinstancepy :: Maybe (Tree ByteString)
    , _boneCOMPprord :: Maybe (Tree Int)
    , _boneCOMPinstancer :: Maybe (Tree ByteString)
    , _boneCOMPlookup :: Maybe (Tree ByteString)
    , _boneCOMPinstancerz :: Maybe (Tree ByteString)
    , _boneCOMPt :: Vec3
    , _boneCOMPdrawpriority :: Maybe (Tree Float)
    , _boneCOMPdisplaylink :: Maybe (Tree Bool)
    , _boneCOMPinstanceu :: Maybe (Tree ByteString)
    , _boneCOMPinstancepz :: Maybe (Tree ByteString)
    , _boneCOMPrender :: Maybe (Tree Bool)
    , _boneCOMPbeginyrange :: Maybe (Tree Float)
    , _boneCOMPps :: Vec3
    , _boneCOMPinstancetexextendv :: Maybe (Tree Int)
    , _boneCOMPextension3 :: Maybe (Tree ByteString)
    , _boneCOMPpxform :: Maybe (Tree Bool)
    , _boneCOMPdisplaycapture :: Maybe (Tree Bool)
    , _boneCOMPyrolloff :: Maybe (Tree Float)
    , _boneCOMPr :: Vec3
    , _boneCOMPenablecloning :: Maybe (Tree Bool)
    , _boneCOMPinstancecolormode :: Maybe (Tree Int)
    , _boneCOMPxdamp :: Maybe (Tree Float)
    , _boneCOMPpp :: Vec3
    , _boneCOMPinstancew :: Maybe (Tree ByteString)
    , _boneCOMPinstancerx :: Maybe (Tree ByteString)
    , _boneCOMPmaterial :: Maybe (Tree MAT)
    , _boneCOMPopshortcut :: Maybe (Tree ByteString)
    , _boneCOMPinstancetx :: Maybe (Tree ByteString)
    , _boneCOMPpcommit :: Maybe (Tree Bool)
    , _boneCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _boneCOMPcrcenter :: Vec3
    , _boneCOMPydamp :: Maybe (Tree Float)
    , _boneCOMPinstancetexextendu :: Maybe (Tree Int)
    , _boneCOMPinstancemode :: Maybe (Tree Int)
    , _boneCOMPinstancerottoorder :: Maybe (Tree Int)
    , _boneCOMPinstancesz :: Maybe (Tree ByteString)
    , _boneCOMPinstancetexs :: Maybe (Tree TOP)
    , _boneCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _boneCOMPextname4 :: Maybe (Tree ByteString)
    , _boneCOMPcrbotcap :: Vec3
    , _boneCOMPinstancerotupz :: Maybe (Tree ByteString)
    , _boneCOMPrord :: Maybe (Tree Int)
    , _boneCOMPinstancesy :: Maybe (Tree ByteString)
    , _boneCOMPxord :: Maybe (Tree Int)
    , _boneCOMPlength :: Maybe (Tree Float)
    , _boneCOMPinstancery :: Maybe (Tree ByteString)
    , _boneCOMPextension2 :: Maybe (Tree ByteString)
    , _boneCOMPs :: Vec3
    , _boneCOMPxrolloff :: Maybe (Tree Float)
    , _boneCOMPclone :: Maybe (Tree COMP)
    , _boneCOMPinstancerotupx :: Maybe (Tree ByteString)
    , _boneCOMPinstancetexextendw :: Maybe (Tree Int)
    , _boneCOMPextname2 :: Maybe (Tree ByteString)
    , _boneCOMPinstancerottoy :: Maybe (Tree ByteString)
    , _boneCOMPbeginxrange :: Maybe (Tree Float)
    , _boneCOMPcrtopheight :: Maybe (Tree Float)
    , _boneCOMPinstancetz :: Maybe (Tree ByteString)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | ListCOMP {
    _listCOMPtopborder :: Maybe (Tree Int)
    , _listCOMProws :: Maybe (Tree Int)
    , _listCOMPscrollbarthickness :: Maybe (Tree Int)
    , _listCOMPw :: Maybe (Tree Int)
    , _listCOMPalignorder :: Maybe (Tree Float)
    , _listCOMPloadondemand :: Maybe (Tree Bool)
    , _listCOMPjustifyh :: Maybe (Tree Int)
    , _listCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _listCOMPdropdestscript :: Maybe (Tree DAT)
    , _listCOMPrepositionxmin :: Maybe (Tree Float)
    , _listCOMPx :: Maybe (Tree Int)
    , _listCOMPnodeview :: Maybe (Tree Int)
    , _listCOMPrepositionymax :: Maybe (Tree Float)
    , _listCOMPmargint :: Maybe (Tree Float)
    , _listCOMPresizer :: Maybe (Tree Bool)
    , _listCOMPdroptypescript :: Maybe (Tree DAT)
    , _listCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _listCOMPfixedaspect :: Maybe (Tree Int)
    , _listCOMPextname1 :: Maybe (Tree ByteString)
    , _listCOMPmarginl :: Maybe (Tree Float)
    , _listCOMPdodisablecolor :: Maybe (Tree Bool)
    , _listCOMPmultitouch :: Maybe (Tree Int)
    , _listCOMPbgalpha :: Maybe (Tree Float)
    , _listCOMPhmode :: Maybe (Tree Int)
    , _listCOMPsavebackup :: Maybe (Tree Bool)
    , _listCOMPuvbuttonsmiddle :: Maybe (Tree Bool)
    , _listCOMPleftanchor :: Maybe (Tree Float)
    , _listCOMPclickthrough :: Maybe (Tree Bool)
    , _listCOMPdisablealpha :: Maybe (Tree Float)
    , _listCOMPvmode :: Maybe (Tree Int)
    , _listCOMPvorigin :: Maybe (Tree Float)
    , _listCOMPdrag :: Maybe (Tree Int)
    , _listCOMPdisablecolor :: Vec3
    , _listCOMPresizehmin :: Maybe (Tree Float)
    , _listCOMPextname3 :: Maybe (Tree ByteString)
    , _listCOMPborderaalpha :: Maybe (Tree Float)
    , _listCOMPoffcellcallbacks :: Maybe (Tree Bool)
    , _listCOMPrepositionymin :: Maybe (Tree Float)
    , _listCOMPenablecloning :: Maybe (Tree Bool)
    , _listCOMPsubcompname :: Maybe (Tree ByteString)
    , _listCOMPrightanchor :: Maybe (Tree Float)
    , _listCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _listCOMPreinitnet :: Maybe (Tree Bool)
    , _listCOMPhscrollbar :: Maybe (Tree Bool)
    , _listCOMPmarginr :: Maybe (Tree Float)
    , _listCOMPparentshortcut :: Maybe (Tree ByteString)
    , _listCOMPresizet :: Maybe (Tree Bool)
    , _listCOMPextension4 :: Maybe (Tree ByteString)
    , _listCOMPleftborderi :: Maybe (Tree Int)
    , _listCOMPrepocomp :: Maybe (Tree COMP)
    , _listCOMPtopanchor :: Maybe (Tree Float)
    , _listCOMPanchordrag :: Maybe (Tree Int)
    , _listCOMPbottomborderi :: Maybe (Tree Int)
    , _listCOMPrightborder :: Maybe (Tree Int)
    , _listCOMPbottomborder :: Maybe (Tree Int)
    , _listCOMPlayer :: Maybe (Tree Float)
    , _listCOMPchop :: Maybe (Tree CHOP)
    , _listCOMPreinitextensions :: Maybe (Tree Bool)
    , _listCOMPtopborderi :: Maybe (Tree Int)
    , _listCOMPalignallow :: Maybe (Tree Int)
    , _listCOMPdragdropcallbacks :: Maybe (Tree DAT)
    , _listCOMPrightborderi :: Maybe (Tree Int)
    , _listCOMPresizel :: Maybe (Tree Bool)
    , _listCOMPvfillweight :: Maybe (Tree Float)
    , _listCOMPborderover :: Maybe (Tree Bool)
    , _listCOMPnamedchop :: Maybe (Tree Bool)
    , _listCOMPmarginb :: Maybe (Tree Float)
    , _listCOMPrepositionxmax :: Maybe (Tree Float)
    , _listCOMPextension2 :: Maybe (Tree ByteString)
    , _listCOMPborderbalpha :: Maybe (Tree Float)
    , _listCOMPjustifyv :: Maybe (Tree Int)
    , _listCOMPreset :: Maybe (Tree Bool)
    , _listCOMPcols :: Maybe (Tree Int)
    , _listCOMPtopoffset :: Maybe (Tree Float)
    , _listCOMPcomposite :: Maybe (Tree Int)
    , _listCOMPdragscript :: Maybe (Tree DAT)
    , _listCOMPoverlay :: Maybe (Tree Bool)
    , _listCOMPmultrgb :: Maybe (Tree Bool)
    , _listCOMPextension1 :: Maybe (Tree ByteString)
    , _listCOMPvscrollbar :: Maybe (Tree Bool)
    , _listCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _listCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _listCOMPbordera :: Vec3
    , _listCOMPcallbacks :: Maybe (Tree DAT)
    , _listCOMPuvbuttonsleft :: Maybe (Tree Bool)
    , _listCOMPbgcolor :: Vec3
    , _listCOMPresizehmax :: Maybe (Tree Float)
    , _listCOMPhelpdat :: Maybe (Tree DAT)
    , _listCOMPextension3 :: Maybe (Tree ByteString)
    , _listCOMPdrop :: Maybe (Tree Int)
    , _listCOMPexternaltox :: Maybe (Tree ByteString)
    , _listCOMPalign :: Maybe (Tree Int)
    , _listCOMPextname2 :: Maybe (Tree ByteString)
    , _listCOMPh :: Maybe (Tree Int)
    , _listCOMPleftborder :: Maybe (Tree Int)
    , _listCOMPtopfill :: Maybe (Tree Int)
    , _listCOMPresizewmin :: Maybe (Tree Float)
    , _listCOMPmouserel :: Maybe (Tree Bool)
    , _listCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _listCOMPoffset :: Vec2
    , _listCOMPresizeb :: Maybe (Tree Bool)
    , _listCOMPleftoffset :: Maybe (Tree Float)
    , _listCOMPy :: Maybe (Tree Int)
    , _listCOMPpvscrollbar :: Maybe (Tree Int)
    , _listCOMPcrop :: Maybe (Tree Int)
    , _listCOMPbottomoffset :: Maybe (Tree Float)
    , _listCOMPdisplay :: Maybe (Tree Bool)
    , _listCOMPfit :: Maybe (Tree Int)
    , _listCOMPaspect :: Maybe (Tree Float)
    , _listCOMPextname4 :: Maybe (Tree ByteString)
    , _listCOMPuvbuttonsright :: Maybe (Tree Bool)
    , _listCOMPresizewmax :: Maybe (Tree Float)
    , _listCOMPborderb :: Vec3
    , _listCOMPlockfirstrow :: Maybe (Tree Bool)
    , _listCOMPsizefromwindow :: Maybe (Tree Bool)
    , _listCOMPopacity :: Maybe (Tree Float)
    , _listCOMPtop :: Maybe (Tree TOP)
    , _listCOMPmousewheel :: Maybe (Tree Bool)
    , _listCOMPoverridemethod :: Maybe (Tree Int)
    , _listCOMPreposition :: Maybe (Tree Int)
    , _listCOMPenable :: Maybe (Tree Bool)
    , _listCOMPbottomanchor :: Maybe (Tree Float)
    , _listCOMPrightoffset :: Maybe (Tree Float)
    , _listCOMPvieweraspect :: Maybe (Tree Int)
    , _listCOMPlockfirstcol :: Maybe (Tree Bool)
    , _listCOMPalignmax :: Maybe (Tree Int)
    , _listCOMPscrolloverlay :: Maybe (Tree Int)
    , _listCOMPclone :: Maybe (Tree COMP)
    , _listCOMPkeepmemory :: Maybe (Tree Bool)
    , _listCOMPdropscript :: Maybe (Tree DAT)
    , _listCOMPhfillweight :: Maybe (Tree Float)
    , _listCOMPpostoffset :: Vec2
    , _listCOMPhorigin :: Maybe (Tree Float)
    , _listCOMPspacing :: Maybe (Tree Float)
    , _listCOMPscale :: Vec2
    , _listCOMPphscrollbar :: Maybe (Tree Int)
    , _listCOMPopshortcut :: Maybe (Tree ByteString)
    , _listCOMPcursor :: Maybe (Tree Int)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | HandleCOMP {
    _handleCOMPinstancea :: Maybe (Tree ByteString)
    , _handleCOMPinstancerotupy :: Maybe (Tree ByteString)
    , _handleCOMPextname1 :: Maybe (Tree ByteString)
    , _handleCOMPinstancerottoz :: Maybe (Tree ByteString)
    , _handleCOMPinstancesz :: Maybe (Tree ByteString)
    , _handleCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _handleCOMPinstanceb :: Maybe (Tree ByteString)
    , _handleCOMPextension4 :: Maybe (Tree ByteString)
    , _handleCOMPpathorient :: Maybe (Tree Bool)
    , _handleCOMProll :: Maybe (Tree Float)
    , _handleCOMPnodeview :: Maybe (Tree Int)
    , _handleCOMPinstancepx :: Maybe (Tree ByteString)
    , _handleCOMPpt :: Vec3
    , _handleCOMPinstancetexanisotropy :: Maybe (Tree Int)
    , _handleCOMPprioritymethod :: Maybe (Tree Int)
    , _handleCOMPlrxmax :: Maybe (Tree Float)
    , _handleCOMPinstancefirstrow :: Maybe (Tree Int)
    , _handleCOMPbank :: Maybe (Tree Float)
    , _handleCOMPinstancety :: Maybe (Tree ByteString)
    , _handleCOMPinstancery :: Maybe (Tree ByteString)
    , _handleCOMPp :: Vec3
    , _handleCOMPlrxmin :: Maybe (Tree Float)
    , _handleCOMPsavebackup :: Maybe (Tree Bool)
    , _handleCOMPextname2 :: Maybe (Tree ByteString)
    , _handleCOMPinstancerottox :: Maybe (Tree ByteString)
    , _handleCOMPpos :: Maybe (Tree Float)
    , _handleCOMPpathsop :: Maybe (Tree SOP)
    , _handleCOMPsubcompname :: Maybe (Tree ByteString)
    , _handleCOMPextname3 :: Maybe (Tree ByteString)
    , _handleCOMPinstancetexfilter :: Maybe (Tree Int)
    , _handleCOMPpr :: Vec3
    , _handleCOMPinstanceg :: Maybe (Tree ByteString)
    , _handleCOMPinstancetexmode :: Maybe (Tree Int)
    , _handleCOMPwcolor :: Vec3
    , _handleCOMPinstancepy :: Maybe (Tree ByteString)
    , _handleCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _handleCOMPreinitnet :: Maybe (Tree Bool)
    , _handleCOMPexternaltox :: Maybe (Tree ByteString)
    , _handleCOMPreinitextensions :: Maybe (Tree Bool)
    , _handleCOMPpreset :: Maybe (Tree Bool)
    , _handleCOMPnuminstances :: Maybe (Tree Int)
    , _handleCOMPup :: Vec3
    , _handleCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _handleCOMPinstrord :: Maybe (Tree Int)
    , _handleCOMPpxord :: Maybe (Tree Int)
    , _handleCOMPinstancetexindex :: Maybe (Tree ByteString)
    , _handleCOMPpickpriority :: Maybe (Tree Float)
    , _handleCOMPtwistonly :: Maybe (Tree Bool)
    , _handleCOMPps :: Vec3
    , _handleCOMPfalloff :: Maybe (Tree Float)
    , _handleCOMPinstancing :: Maybe (Tree Bool)
    , _handleCOMPinstancetexextendu :: Maybe (Tree Int)
    , _handleCOMPprord :: Maybe (Tree Int)
    , _handleCOMPlookup :: Maybe (Tree ByteString)
    , _handleCOMPinstancerz :: Maybe (Tree ByteString)
    , _handleCOMPlrzmax :: Maybe (Tree Float)
    , _handleCOMPdrawpriority :: Maybe (Tree Float)
    , _handleCOMPinstanceu :: Maybe (Tree ByteString)
    , _handleCOMPrender :: Maybe (Tree Bool)
    , _handleCOMPextension1 :: Maybe (Tree ByteString)
    , _handleCOMPinstancetexextendv :: Maybe (Tree Int)
    , _handleCOMPlrymax :: Maybe (Tree Float)
    , _handleCOMPextension3 :: Maybe (Tree ByteString)
    , _handleCOMPpxform :: Maybe (Tree Bool)
    , _handleCOMPmaterial :: Maybe (Tree MAT)
    , _handleCOMPinstancer :: Maybe (Tree ByteString)
    , _handleCOMPr :: Vec3
    , _handleCOMPenablecloning :: Maybe (Tree Bool)
    , _handleCOMPinstancecolormode :: Maybe (Tree Int)
    , _handleCOMPpp :: Vec3
    , _handleCOMPinstancew :: Maybe (Tree ByteString)
    , _handleCOMPinstancerx :: Maybe (Tree ByteString)
    , _handleCOMPloadondemand :: Maybe (Tree Bool)
    , _handleCOMPopshortcut :: Maybe (Tree ByteString)
    , _handleCOMPpcommit :: Maybe (Tree Bool)
    , _handleCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _handleCOMPlrzmin :: Maybe (Tree Float)
    , _handleCOMPinstanceorder :: Maybe (Tree Int)
    , _handleCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _handleCOMPparentshortcut :: Maybe (Tree ByteString)
    , _handleCOMPinstancemode :: Maybe (Tree Int)
    , _handleCOMPinstancerottoorder :: Maybe (Tree Int)
    , _handleCOMPinstancepz :: Maybe (Tree ByteString)
    , _handleCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _handleCOMPinstancesx :: Maybe (Tree ByteString)
    , _handleCOMPextname4 :: Maybe (Tree ByteString)
    , _handleCOMPinstancetx :: Maybe (Tree ByteString)
    , _handleCOMPinstancerotupz :: Maybe (Tree ByteString)
    , _handleCOMPweight :: Maybe (Tree Float)
    , _handleCOMPinstancesy :: Maybe (Tree ByteString)
    , _handleCOMPxord :: Maybe (Tree Int)
    , _handleCOMPextension2 :: Maybe (Tree ByteString)
    , _handleCOMPlrymin :: Maybe (Tree Float)
    , _handleCOMPdorzlimit :: Maybe (Tree Bool)
    , _handleCOMPs :: Vec3
    , _handleCOMPdorylimit :: Maybe (Tree Bool)
    , _handleCOMPclone :: Maybe (Tree COMP)
    , _handleCOMPdorxlimit :: Maybe (Tree Bool)
    , _handleCOMPinstxord :: Maybe (Tree Int)
    , _handleCOMPt :: Vec3
    , _handleCOMPinstancetexextendw :: Maybe (Tree Int)
    , _handleCOMPinstancerotupx :: Maybe (Tree ByteString)
    , _handleCOMPrord :: Maybe (Tree Int)
    , _handleCOMPinstancerottoy :: Maybe (Tree ByteString)
    , _handleCOMPinstancev :: Maybe (Tree ByteString)
    , _handleCOMPinstancetexs :: Maybe (Tree TOP)
    , _handleCOMPinstancetz :: Maybe (Tree ByteString)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | NullCOMP {
    _nullCOMPinstancea :: Maybe (Tree ByteString)
    , _nullCOMPinstancerotupy :: Maybe (Tree ByteString)
    , _nullCOMPextname1 :: Maybe (Tree ByteString)
    , _nullCOMPinstancerottoz :: Maybe (Tree ByteString)
    , _nullCOMPpickpriority :: Maybe (Tree Float)
    , _nullCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _nullCOMPinstanceb :: Maybe (Tree ByteString)
    , _nullCOMPextension4 :: Maybe (Tree ByteString)
    , _nullCOMPpathorient :: Maybe (Tree Bool)
    , _nullCOMProll :: Maybe (Tree Float)
    , _nullCOMPnodeview :: Maybe (Tree Int)
    , _nullCOMPinstancepx :: Maybe (Tree ByteString)
    , _nullCOMPpt :: Vec3
    , _nullCOMPinstancetexanisotropy :: Maybe (Tree Int)
    , _nullCOMPprioritymethod :: Maybe (Tree Int)
    , _nullCOMPinstancefirstrow :: Maybe (Tree Int)
    , _nullCOMPbank :: Maybe (Tree Float)
    , _nullCOMPinstancety :: Maybe (Tree ByteString)
    , _nullCOMPinstancery :: Maybe (Tree ByteString)
    , _nullCOMPp :: Vec3
    , _nullCOMPsavebackup :: Maybe (Tree Bool)
    , _nullCOMPpos :: Maybe (Tree Float)
    , _nullCOMPpathsop :: Maybe (Tree SOP)
    , _nullCOMPsubcompname :: Maybe (Tree ByteString)
    , _nullCOMPextname3 :: Maybe (Tree ByteString)
    , _nullCOMPinstancetexfilter :: Maybe (Tree Int)
    , _nullCOMPpr :: Vec3
    , _nullCOMPinstanceg :: Maybe (Tree ByteString)
    , _nullCOMPinstancetexmode :: Maybe (Tree Int)
    , _nullCOMPwcolor :: Vec3
    , _nullCOMPinstancepy :: Maybe (Tree ByteString)
    , _nullCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _nullCOMPinstancesz :: Maybe (Tree ByteString)
    , _nullCOMPexternaltox :: Maybe (Tree ByteString)
    , _nullCOMPreinitextensions :: Maybe (Tree Bool)
    , _nullCOMPinstancesy :: Maybe (Tree ByteString)
    , _nullCOMPnuminstances :: Maybe (Tree Int)
    , _nullCOMPup :: Vec3
    , _nullCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _nullCOMPinstrord :: Maybe (Tree Int)
    , _nullCOMPpxord :: Maybe (Tree Int)
    , _nullCOMPinstancetexindex :: Maybe (Tree ByteString)
    , _nullCOMPinstancerottox :: Maybe (Tree ByteString)
    , _nullCOMPparentshortcut :: Maybe (Tree ByteString)
    , _nullCOMPinstancesx :: Maybe (Tree ByteString)
    , _nullCOMPinstancing :: Maybe (Tree Bool)
    , _nullCOMPinstancetexextendu :: Maybe (Tree Int)
    , _nullCOMPprord :: Maybe (Tree Int)
    , _nullCOMPlookup :: Maybe (Tree ByteString)
    , _nullCOMPinstancerz :: Maybe (Tree ByteString)
    , _nullCOMPt :: Vec3
    , _nullCOMPps :: Vec3
    , _nullCOMPinstanceu :: Maybe (Tree ByteString)
    , _nullCOMPrender :: Maybe (Tree Bool)
    , _nullCOMPextension1 :: Maybe (Tree ByteString)
    , _nullCOMPinstancetexextendv :: Maybe (Tree Int)
    , _nullCOMPextension3 :: Maybe (Tree ByteString)
    , _nullCOMPpxform :: Maybe (Tree Bool)
    , _nullCOMPmaterial :: Maybe (Tree MAT)
    , _nullCOMPinstancer :: Maybe (Tree ByteString)
    , _nullCOMPr :: Vec3
    , _nullCOMPenablecloning :: Maybe (Tree Bool)
    , _nullCOMPinstancecolormode :: Maybe (Tree Int)
    , _nullCOMPpp :: Vec3
    , _nullCOMPinstancew :: Maybe (Tree ByteString)
    , _nullCOMPinstancerx :: Maybe (Tree ByteString)
    , _nullCOMPextname2 :: Maybe (Tree ByteString)
    , _nullCOMPopshortcut :: Maybe (Tree ByteString)
    , _nullCOMPpcommit :: Maybe (Tree Bool)
    , _nullCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _nullCOMPinstanceorder :: Maybe (Tree Int)
    , _nullCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _nullCOMPreinitnet :: Maybe (Tree Bool)
    , _nullCOMPinstancemode :: Maybe (Tree Int)
    , _nullCOMPinstancerottoorder :: Maybe (Tree Int)
    , _nullCOMPinstancepz :: Maybe (Tree ByteString)
    , _nullCOMPinstancetexs :: Maybe (Tree TOP)
    , _nullCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _nullCOMPextname4 :: Maybe (Tree ByteString)
    , _nullCOMPinstancetx :: Maybe (Tree ByteString)
    , _nullCOMPinstancerotupz :: Maybe (Tree ByteString)
    , _nullCOMPrord :: Maybe (Tree Int)
    , _nullCOMPpreset :: Maybe (Tree Bool)
    , _nullCOMPxord :: Maybe (Tree Int)
    , _nullCOMPextension2 :: Maybe (Tree ByteString)
    , _nullCOMPs :: Vec3
    , _nullCOMPclone :: Maybe (Tree COMP)
    , _nullCOMPdrawpriority :: Maybe (Tree Float)
    , _nullCOMPinstxord :: Maybe (Tree Int)
    , _nullCOMPinstancerotupx :: Maybe (Tree ByteString)
    , _nullCOMPinstancetexextendw :: Maybe (Tree Int)
    , _nullCOMPloadondemand :: Maybe (Tree Bool)
    , _nullCOMPinstancerottoy :: Maybe (Tree ByteString)
    , _nullCOMPinstancev :: Maybe (Tree ByteString)
    , _nullCOMPinstancetz :: Maybe (Tree ByteString)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | SharedmeminCOMP {
    _sharedmeminCOMPinstancea :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancerotupy :: Maybe (Tree ByteString)
    , _sharedmeminCOMPextname1 :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancerottoz :: Maybe (Tree ByteString)
    , _sharedmeminCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _sharedmeminCOMPinstanceb :: Maybe (Tree ByteString)
    , _sharedmeminCOMPextension4 :: Maybe (Tree ByteString)
    , _sharedmeminCOMPpathorient :: Maybe (Tree Bool)
    , _sharedmeminCOMProll :: Maybe (Tree Float)
    , _sharedmeminCOMPnodeview :: Maybe (Tree Int)
    , _sharedmeminCOMPinstancepx :: Maybe (Tree ByteString)
    , _sharedmeminCOMPpt :: Vec3
    , _sharedmeminCOMPinstancetexanisotropy :: Maybe (Tree Int)
    , _sharedmeminCOMPprioritymethod :: Maybe (Tree Int)
    , _sharedmeminCOMPinstancefirstrow :: Maybe (Tree Int)
    , _sharedmeminCOMPbank :: Maybe (Tree Float)
    , _sharedmeminCOMPinstancety :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancery :: Maybe (Tree ByteString)
    , _sharedmeminCOMPp :: Vec3
    , _sharedmeminCOMPsavebackup :: Maybe (Tree Bool)
    , _sharedmeminCOMPpos :: Maybe (Tree Float)
    , _sharedmeminCOMPpathsop :: Maybe (Tree SOP)
    , _sharedmeminCOMPsubcompname :: Maybe (Tree ByteString)
    , _sharedmeminCOMPpickpriority :: Maybe (Tree Float)
    , _sharedmeminCOMPinstancetexfilter :: Maybe (Tree Int)
    , _sharedmeminCOMPpr :: Vec3
    , _sharedmeminCOMPinstanceg :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancetexmode :: Maybe (Tree Int)
    , _sharedmeminCOMPwcolor :: Vec3
    , _sharedmeminCOMPinstancepy :: Maybe (Tree ByteString)
    , _sharedmeminCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _sharedmeminCOMPinstancesz :: Maybe (Tree ByteString)
    , _sharedmeminCOMPexternaltox :: Maybe (Tree ByteString)
    , _sharedmeminCOMPparentshortcut :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancesy :: Maybe (Tree ByteString)
    , _sharedmeminCOMPnuminstances :: Maybe (Tree Int)
    , _sharedmeminCOMPup :: Vec3
    , _sharedmeminCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _sharedmeminCOMPinstrord :: Maybe (Tree Int)
    , _sharedmeminCOMPpxord :: Maybe (Tree Int)
    , _sharedmeminCOMPinstancetexindex :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancerottox :: Maybe (Tree ByteString)
    , _sharedmeminCOMPreinitextensions :: Maybe (Tree Bool)
    , _sharedmeminCOMPinstancesx :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancing :: Maybe (Tree Bool)
    , _sharedmeminCOMPname :: Maybe (Tree ByteString)
    , _sharedmeminCOMPprord :: Maybe (Tree Int)
    , _sharedmeminCOMPlookup :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancerz :: Maybe (Tree ByteString)
    , _sharedmeminCOMPextension2 :: Maybe (Tree ByteString)
    , _sharedmeminCOMPdrawpriority :: Maybe (Tree Float)
    , _sharedmeminCOMPinstanceu :: Maybe (Tree ByteString)
    , _sharedmeminCOMPrender :: Maybe (Tree Bool)
    , _sharedmeminCOMPextension1 :: Maybe (Tree ByteString)
    , _sharedmeminCOMPps :: Vec3
    , _sharedmeminCOMPinstancetexextendv :: Maybe (Tree Int)
    , _sharedmeminCOMPextension3 :: Maybe (Tree ByteString)
    , _sharedmeminCOMPpxform :: Maybe (Tree Bool)
    , _sharedmeminCOMPmaterial :: Maybe (Tree MAT)
    , _sharedmeminCOMPinstancer :: Maybe (Tree ByteString)
    , _sharedmeminCOMPr :: Vec3
    , _sharedmeminCOMPenablecloning :: Maybe (Tree Bool)
    , _sharedmeminCOMPinstancecolormode :: Maybe (Tree Int)
    , _sharedmeminCOMPpp :: Vec3
    , _sharedmeminCOMPinstancew :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancerx :: Maybe (Tree ByteString)
    , _sharedmeminCOMPextname2 :: Maybe (Tree ByteString)
    , _sharedmeminCOMPopshortcut :: Maybe (Tree ByteString)
    , _sharedmeminCOMPpcommit :: Maybe (Tree Bool)
    , _sharedmeminCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _sharedmeminCOMPinstanceorder :: Maybe (Tree Int)
    , _sharedmeminCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _sharedmeminCOMPreinitnet :: Maybe (Tree Bool)
    , _sharedmeminCOMPinstancetexextendu :: Maybe (Tree Int)
    , _sharedmeminCOMPinstancemode :: Maybe (Tree Int)
    , _sharedmeminCOMPinstancerottoorder :: Maybe (Tree Int)
    , _sharedmeminCOMPinstancepz :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancetexs :: Maybe (Tree TOP)
    , _sharedmeminCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _sharedmeminCOMPextname4 :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancetx :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancerotupz :: Maybe (Tree ByteString)
    , _sharedmeminCOMPrord :: Maybe (Tree Int)
    , _sharedmeminCOMPpreset :: Maybe (Tree Bool)
    , _sharedmeminCOMPxord :: Maybe (Tree Int)
    , _sharedmeminCOMPt :: Vec3
    , _sharedmeminCOMPs :: Vec3
    , _sharedmeminCOMPextname3 :: Maybe (Tree ByteString)
    , _sharedmeminCOMPclone :: Maybe (Tree COMP)
    , _sharedmeminCOMPinstxord :: Maybe (Tree Int)
    , _sharedmeminCOMPinstancerotupx :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancetexextendw :: Maybe (Tree Int)
    , _sharedmeminCOMPloadondemand :: Maybe (Tree Bool)
    , _sharedmeminCOMPinstancerottoy :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancev :: Maybe (Tree ByteString)
    , _sharedmeminCOMPinstancetz :: Maybe (Tree ByteString)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | LightCOMP {
    _lightCOMPprojection :: Maybe (Tree Int)
    , _lightCOMPviewanglemethod :: Maybe (Tree Int)
    , _lightCOMPprojmap :: Maybe (Tree TOP)
    , _lightCOMPlightsize2 :: Maybe (Tree Float)
    , _lightCOMPfogcolor :: Vec3
    , _lightCOMPextname1 :: Maybe (Tree ByteString)
    , _lightCOMPbackfacelit :: Maybe (Tree Int)
    , _lightCOMPattenuationexp :: Maybe (Tree Float)
    , _lightCOMPzbounds2 :: Maybe (Tree Float)
    , _lightCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _lightCOMPextension4 :: Maybe (Tree ByteString)
    , _lightCOMPpathorient :: Maybe (Tree Bool)
    , _lightCOMProll :: Maybe (Tree Float)
    , _lightCOMPnodeview :: Maybe (Tree Int)
    , _lightCOMPpt :: Vec3
    , _lightCOMPclone :: Maybe (Tree COMP)
    , _lightCOMPprioritymethod :: Maybe (Tree Int)
    , _lightCOMPbank :: Maybe (Tree Float)
    , _lightCOMPaspectcorrect :: Maybe (Tree Bool)
    , _lightCOMPprojectionblend :: Maybe (Tree Float)
    , _lightCOMPfov :: Maybe (Tree Float)
    , _lightCOMPp :: Vec3
    , _lightCOMPprojmapextendw :: Maybe (Tree Int)
    , _lightCOMPsavebackup :: Maybe (Tree Bool)
    , _lightCOMPpolygonoffsetunits :: Maybe (Tree Float)
    , _lightCOMPshadowresolution1 :: Maybe (Tree Int)
    , _lightCOMPpos :: Maybe (Tree Float)
    , _lightCOMPpathsop :: Maybe (Tree SOP)
    , _lightCOMPuseconeforfov :: Maybe (Tree Bool)
    , _lightCOMPmaxshadowsoftness :: Maybe (Tree Float)
    , _lightCOMPextname3 :: Maybe (Tree ByteString)
    , _lightCOMPfogalpha :: Maybe (Tree Float)
    , _lightCOMPpr :: Vec3
    , _lightCOMPwcolor :: Vec3
    , _lightCOMPfocal :: Maybe (Tree Float)
    , _lightCOMPattenuationend :: Maybe (Tree Float)
    , _lightCOMPxbounds1 :: Maybe (Tree Float)
    , _lightCOMPfar :: Maybe (Tree Float)
    , _lightCOMPprojmapextendv :: Maybe (Tree Int)
    , _lightCOMPreinitextensions :: Maybe (Tree Bool)
    , _lightCOMPfogdensity :: Maybe (Tree Float)
    , _lightCOMPaperture :: Maybe (Tree Float)
    , _lightCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _lightCOMPsubcompname :: Maybe (Tree ByteString)
    , _lightCOMPxbounds2 :: Maybe (Tree Float)
    , _lightCOMPup :: Vec3
    , _lightCOMPpxord :: Maybe (Tree Int)
    , _lightCOMPshadowresolution2 :: Maybe (Tree Int)
    , _lightCOMPpickpriority :: Maybe (Tree Float)
    , _lightCOMPconedelta :: Maybe (Tree Float)
    , _lightCOMPps :: Vec3
    , _lightCOMPzbounds1 :: Maybe (Tree Float)
    , _lightCOMPs :: Vec3
    , _lightCOMPfiltersamples :: Maybe (Tree Int)
    , _lightCOMPshadowmap :: Maybe (Tree TOP)
    , _lightCOMPprojmapanisotropy :: Maybe (Tree Int)
    , _lightCOMPprord :: Maybe (Tree Int)
    , _lightCOMPybounds2 :: Maybe (Tree Float)
    , _lightCOMPlookup :: Maybe (Tree ByteString)
    , _lightCOMPc :: Vec3
    , _lightCOMPattenuationstart :: Maybe (Tree Float)
    , _lightCOMPt :: Vec3
    , _lightCOMPconeroll :: Maybe (Tree Float)
    , _lightCOMPdrawpriority :: Maybe (Tree Float)
    , _lightCOMPsearchsteps :: Maybe (Tree Int)
    , _lightCOMPreinitnet :: Maybe (Tree Bool)
    , _lightCOMPwin :: Vec2
    , _lightCOMPprojangle :: Maybe (Tree Float)
    , _lightCOMPrender :: Maybe (Tree Bool)
    , _lightCOMPextension1 :: Maybe (Tree ByteString)
    , _lightCOMPcustomproj :: Maybe (Tree DAT)
    , _lightCOMPconeangle :: Maybe (Tree Float)
    , _lightCOMPfog :: Maybe (Tree Int)
    , _lightCOMPfogfar :: Maybe (Tree Float)
    , _lightCOMPbgcolor :: Vec4
    , _lightCOMPpxform :: Maybe (Tree Bool)
    , _lightCOMPmaterial :: Maybe (Tree MAT)
    , _lightCOMPextension3 :: Maybe (Tree ByteString)
    , _lightCOMPr :: Vec3
    , _lightCOMPenablecloning :: Maybe (Tree Bool)
    , _lightCOMPshadowtype :: Maybe (Tree Int)
    , _lightCOMPpp :: Vec3
    , _lightCOMPlightsize1 :: Maybe (Tree Float)
    , _lightCOMPextname2 :: Maybe (Tree ByteString)
    , _lightCOMPpcommit :: Maybe (Tree Bool)
    , _lightCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _lightCOMPprojmapextendu :: Maybe (Tree Int)
    , _lightCOMPattenuated :: Maybe (Tree Bool)
    , _lightCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _lightCOMPparentshortcut :: Maybe (Tree ByteString)
    , _lightCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _lightCOMPextname4 :: Maybe (Tree ByteString)
    , _lightCOMPexternaltox :: Maybe (Tree ByteString)
    , _lightCOMPpolygonoffsetfactor :: Maybe (Tree Float)
    , _lightCOMPfogmap :: Maybe (Tree TOP)
    , _lightCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _lightCOMPprojmapmode :: Maybe (Tree Int)
    , _lightCOMPpreset :: Maybe (Tree Bool)
    , _lightCOMPfognear :: Maybe (Tree Float)
    , _lightCOMPxord :: Maybe (Tree Int)
    , _lightCOMPorthowidth :: Maybe (Tree Float)
    , _lightCOMPnear :: Maybe (Tree Float)
    , _lightCOMPextension2 :: Maybe (Tree ByteString)
    , _lightCOMPfrontfacelit :: Maybe (Tree Int)
    , _lightCOMPybounds1 :: Maybe (Tree Float)
    , _lightCOMPprojmapfilter :: Maybe (Tree Int)
    , _lightCOMPrord :: Maybe (Tree Int)
    , _lightCOMPloadondemand :: Maybe (Tree Bool)
    , _lightCOMPdimmer :: Maybe (Tree Float)
    , _lightCOMPlighttype :: Maybe (Tree Int)
    , _lightCOMPopshortcut :: Maybe (Tree ByteString)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | BaseCOMP {
    _baseCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _baseCOMPextname1 :: Maybe (Tree ByteString)
    , _baseCOMPextname4 :: Maybe (Tree ByteString)
    , _baseCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _baseCOMPreinitnet :: Maybe (Tree Bool)
    , _baseCOMPextension1 :: Maybe (Tree ByteString)
    , _baseCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _baseCOMPexternaltox :: Maybe (Tree ByteString)
    , _baseCOMPextension4 :: Maybe (Tree ByteString)
    , _baseCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _baseCOMPextname3 :: Maybe (Tree ByteString)
    , _baseCOMPextension3 :: Maybe (Tree ByteString)
    , _baseCOMPparentshortcut :: Maybe (Tree ByteString)
    , _baseCOMPenablecloning :: Maybe (Tree Bool)
    , _baseCOMPreinitextensions :: Maybe (Tree Bool)
    , _baseCOMPextname2 :: Maybe (Tree ByteString)
    , _baseCOMPopshortcut :: Maybe (Tree ByteString)
    , _baseCOMPclone :: Maybe (Tree COMP)
    , _baseCOMPsavebackup :: Maybe (Tree Bool)
    , _baseCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _baseCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _baseCOMPloadondemand :: Maybe (Tree Bool)
    , _baseCOMPsubcompname :: Maybe (Tree ByteString)
    , _baseCOMPextension2 :: Maybe (Tree ByteString)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }
  | TimeCOMP {
    _timeCOMPpromoteextension3 :: Maybe (Tree Bool)
    , _timeCOMPenablecloning :: Maybe (Tree Bool)
    , _timeCOMPend :: Maybe (Tree Int)
    , _timeCOMPrangeend :: Maybe (Tree Int)
    , _timeCOMPrangestart :: Maybe (Tree Int)
    , _timeCOMPextname4 :: Maybe (Tree ByteString)
    , _timeCOMPreloadtoxonstart :: Maybe (Tree Bool)
    , _timeCOMPexternaltox :: Maybe (Tree ByteString)
    , _timeCOMPextension1 :: Maybe (Tree ByteString)
    , _timeCOMPpromoteextension4 :: Maybe (Tree Bool)
    , _timeCOMPextname1 :: Maybe (Tree ByteString)
    , _timeCOMPextension4 :: Maybe (Tree ByteString)
    , _timeCOMPreinitnet :: Maybe (Tree Bool)
    , _timeCOMPpromoteextension1 :: Maybe (Tree Bool)
    , _timeCOMPsubcompname :: Maybe (Tree ByteString)
    , _timeCOMPrangelimit :: Maybe (Tree Int)
    , _timeCOMPtempo :: Maybe (Tree Float)
    , _timeCOMPextension3 :: Maybe (Tree ByteString)
    , _timeCOMPindependent :: Maybe (Tree Bool)
    , _timeCOMPparentshortcut :: Maybe (Tree ByteString)
    , _timeCOMPextname3 :: Maybe (Tree ByteString)
    , _timeCOMPstart :: Maybe (Tree Int)
    , _timeCOMPreinitextensions :: Maybe (Tree Bool)
    , _timeCOMPresetframe :: Maybe (Tree Int)
    , _timeCOMPsignature1 :: Maybe (Tree Int)
    , _timeCOMPsignature2 :: Maybe (Tree Int)
    , _timeCOMPrate :: Maybe (Tree Float)
    , _timeCOMPclone :: Maybe (Tree COMP)
    , _timeCOMPsavebackup :: Maybe (Tree Bool)
    , _timeCOMPpromoteextension2 :: Maybe (Tree Bool)
    , _timeCOMPplay :: Maybe (Tree Int)
    , _timeCOMPenablecloningpulse :: Maybe (Tree Bool)
    , _timeCOMPextname2 :: Maybe (Tree ByteString)
    , _timeCOMPloadondemand :: Maybe (Tree Bool)
    , _timeCOMPextension2 :: Maybe (Tree ByteString)
    , _timeCOMPopshortcut :: Maybe (Tree ByteString)
    , _compCommands :: [CommandType]
    , _compIns :: [Tree COMP]
  }

-- instances 

instance Op CHOP where 
  pars (MouseinCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _mouseinCHOPexportmethod]
    , ["left" <$$> _mouseinCHOPleft]
    , ["active" <$$> _mouseinCHOPactive]
    , ["mbuttonname" <$$> _mouseinCHOPmbuttonname]
    , ["posxname" <$$> _mouseinCHOPposxname]
    , ["rate" <$$> _mouseinCHOPrate]
    , ["monitor" <$$> _mouseinCHOPmonitor]
    , [("exporttable",) . ResolveP <$> _mouseinCHOPexporttable]
    , ["rbuttonname" <$$> _mouseinCHOPrbuttonname]
    , ["defval" <$$> _mouseinCHOPdefval]
    , ["wheel" <$$> _mouseinCHOPwheel]
    , ["srselect" <$$> _mouseinCHOPsrselect]
    , ["scope" <$$> _mouseinCHOPscope]
    , ["right" <$$> _mouseinCHOPright]
    , ["output" <$$> _mouseinCHOPoutput]
    , ["posyname" <$$> _mouseinCHOPposyname]
    , ["lbuttonname" <$$> _mouseinCHOPlbuttonname]
    , ["timeslice" <$$> _mouseinCHOPtimeslice]
    , ["wheelinc" <$$> _mouseinCHOPwheelinc]]
  pars (NatnetinCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _natnetinCHOPresetpulse]
    , ["active" <$$> _natnetinCHOPactive]
    , ["exportmethod" <$$> _natnetinCHOPexportmethod]
    , [("exporttable",) . ResolveP <$> _natnetinCHOPexporttable]
    , ["rate" <$$> _natnetinCHOPrate]
    , ["scope" <$$> _natnetinCHOPscope]
    , ["dataport" <$$> _natnetinCHOPdataport]
    , ["localaddress" <$$> _natnetinCHOPlocaladdress]
    , ["commandport" <$$> _natnetinCHOPcommandport]
    , ["srselect" <$$> _natnetinCHOPsrselect]
    , ["timeslice" <$$> _natnetinCHOPtimeslice]
    , ["netaddress" <$$> _natnetinCHOPnetaddress]
    , ["connectiontype" <$$> _natnetinCHOPconnectiontype]]
  pars (AudiofilterCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _audiofilterCHOPexportmethod]
    , ["filter" <$$> _audiofilterCHOPfilter]
    , ["units" <$$> _audiofilterCHOPunits]
    , ["drywet" <$$> _audiofilterCHOPdrywet]
    , ["resonance" <$$> _audiofilterCHOPresonance]
    , ["scope" <$$> _audiofilterCHOPscope]
    , [("exporttable",) . ResolveP <$> _audiofilterCHOPexporttable]
    , ["cutofffrequency" <$$> _audiofilterCHOPcutofffrequency]
    , ["srselect" <$$> _audiofilterCHOPsrselect]
    , ["rolloff" <$$> _audiofilterCHOProlloff]
    , ["timeslice" <$$> _audiofilterCHOPtimeslice]
    , ["cutofflog" <$$> _audiofilterCHOPcutofflog]]
  pars (ScriptCHOP {..}) = catMaybes . mconcat $ [ ["setuppars" <$$> _scriptCHOPsetuppars]
    , ["srselect" <$$> _scriptCHOPsrselect]
    , ["exportmethod" <$$> _scriptCHOPexportmethod]
    , [("callbacks",) . ResolveP <$> _scriptCHOPcallbacks]
    , [("exporttable",) . ResolveP <$> _scriptCHOPexporttable]
    , ["timeslice" <$$> _scriptCHOPtimeslice]
    , ["scope" <$$> _scriptCHOPscope]]
  pars (PipeinCHOP {..}) = catMaybes . mconcat $ [ ["mode" <$$> _pipeinCHOPmode]
    , ["maxtargetunit" <$$> _pipeinCHOPmaxtargetunit]
    , ["active" <$$> _pipeinCHOPactive]
    , ["maxqueueunit" <$$> _pipeinCHOPmaxqueueunit]
    , ["address" <$$> _pipeinCHOPaddress]
    , [("callbacks",) . ResolveP <$> _pipeinCHOPcallbacks]
    , ["echo" <$$> _pipeinCHOPecho]
    , [("exporttable",) . ResolveP <$> _pipeinCHOPexporttable]
    , ["reset" <$$> _pipeinCHOPreset]
    , ["maxtarget" <$$> _pipeinCHOPmaxtarget]
    , ["exportmethod" <$$> _pipeinCHOPexportmethod]
    , ["queued" <$$> _pipeinCHOPqueued]
    , ["port" <$$> _pipeinCHOPport]
    , ["scope" <$$> _pipeinCHOPscope]
    , ["mintarget" <$$> _pipeinCHOPmintarget]
    , ["adjusttimeunit" <$$> _pipeinCHOPadjusttimeunit]
    , ["srselect" <$$> _pipeinCHOPsrselect]
    , ["mintargetunit" <$$> _pipeinCHOPmintargetunit]
    , ["adjusttime" <$$> _pipeinCHOPadjusttime]
    , ["timeslice" <$$> _pipeinCHOPtimeslice]
    , ["allowscripts" <$$> _pipeinCHOPallowscripts]
    , ["maxqueue" <$$> _pipeinCHOPmaxqueue]]
  pars (FunctionCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _functionCHOPexportmethod]
    , ["baseval" <$$> _functionCHOPbaseval]
    , ["divval" <$$> _functionCHOPdivval]
    , ["pinfval" <$$> _functionCHOPpinfval]
    , [("exporttable",) . ResolveP <$> _functionCHOPexporttable]
    , ["ninfval" <$$> _functionCHOPninfval]
    , ["expval" <$$> _functionCHOPexpval]
    , ["scope" <$$> _functionCHOPscope]
    , ["match" <$$> _functionCHOPmatch]
    , ["angunit" <$$> _functionCHOPangunit]
    , ["domval" <$$> _functionCHOPdomval]
    , ["srselect" <$$> _functionCHOPsrselect]
    , ["func" <$$> _functionCHOPfunc]
    , ["error" <$$> _functionCHOPerror]
    , ["timeslice" <$$> _functionCHOPtimeslice]]
  pars (AudiodynamicsCHOP {..}) = catMaybes . mconcat $ [ ["chanlinkingcomp" <$$> _audiodynamicsCHOPchanlinkingcomp]
    , ["drywet" <$$> _audiodynamicsCHOPdrywet]
    , ["chanlinkinglim" <$$> _audiodynamicsCHOPchanlinkinglim]
    , ["ratiocompressor" <$$> _audiodynamicsCHOPratiocompressor]
    , ["enablecompressor" <$$> _audiodynamicsCHOPenablecompressor]
    , ["compressiontype" <$$> _audiodynamicsCHOPcompressiontype]
    , [("exporttable",) . ResolveP <$> _audiodynamicsCHOPexporttable]
    , ["exportmethod" <$$> _audiodynamicsCHOPexportmethod]
    , ["releasecompressor" <$$> _audiodynamicsCHOPreleasecompressor]
    , ["kneelimiter" <$$> _audiodynamicsCHOPkneelimiter]
    , ["scope" <$$> _audiodynamicsCHOPscope]
    , ["gaincompressor" <$$> _audiodynamicsCHOPgaincompressor]
    , ["thresholdlimiter" <$$> _audiodynamicsCHOPthresholdlimiter]
    , ["thresholdcompressor" <$$> _audiodynamicsCHOPthresholdcompressor]
    , ["releaselimiter" <$$> _audiodynamicsCHOPreleaselimiter]
    , ["srselect" <$$> _audiodynamicsCHOPsrselect]
    , ["kneecompressor" <$$> _audiodynamicsCHOPkneecompressor]
    , ["inputgain" <$$> _audiodynamicsCHOPinputgain]
    , ["enablelimiter" <$$> _audiodynamicsCHOPenablelimiter]
    , ["attackcompressor" <$$> _audiodynamicsCHOPattackcompressor]
    , ["timeslice" <$$> _audiodynamicsCHOPtimeslice]]
  pars (CompositeCHOP {..}) = catMaybes . mconcat $ [ ["end" <$$> _compositeCHOPend]
    , ["peak" <$$> _compositeCHOPpeak]
    , ["shortrot" <$$> _compositeCHOPshortrot]
    , ["releaseunit" <$$> _compositeCHOPreleaseunit]
    , ["quatrot" <$$> _compositeCHOPquatrot]
    , ["relative" <$$> _compositeCHOPrelative]
    , ["base" <$$> _compositeCHOPbase]
    , ["endunit" <$$> _compositeCHOPendunit]
    , ["start" <$$> _compositeCHOPstart]
    , ["risefunc" <$$> _compositeCHOPrisefunc]
    , ["exportmethod" <$$> _compositeCHOPexportmethod]
    , ["effect" <$$> _compositeCHOPeffect]
    , ["rotscope" <$$> _compositeCHOProtscope]
    , ["startunit" <$$> _compositeCHOPstartunit]
    , ["fallfunc" <$$> _compositeCHOPfallfunc]
    , ["scope" <$$> _compositeCHOPscope]
    , [("exporttable",) . ResolveP <$> _compositeCHOPexporttable]
    , ["match" <$$> _compositeCHOPmatch]
    , ["cyclelen" <$$> _compositeCHOPcyclelen]
    , ["release" <$$> _compositeCHOPrelease]
    , ["srselect" <$$> _compositeCHOPsrselect]
    , ["peakunit" <$$> _compositeCHOPpeakunit]
    , ["timeslice" <$$> _compositeCHOPtimeslice]]
  pars (ReorderCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _reorderCHOPexportmethod]
    , ["rempos" <$$> _reorderCHOPrempos]
    , ["charpattern" <$$> _reorderCHOPcharpattern]
    , ["numpattern" <$$> _reorderCHOPnumpattern]
    , [("exporttable",) . ResolveP <$> _reorderCHOPexporttable]
    , ["scope" <$$> _reorderCHOPscope]
    , ["seed" <$$> _reorderCHOPseed]
    , ["srselect" <$$> _reorderCHOPsrselect]
    , ["nvalue" <$$> _reorderCHOPnvalue]
    , ["method" <$$> _reorderCHOPmethod]
    , ["remorder" <$$> _reorderCHOPremorder]
    , ["timeslice" <$$> _reorderCHOPtimeslice]
    , ["orderref" <$$> _reorderCHOPorderref]]
  pars (FileinCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _fileinCHOPexportmethod]
    , ["left" <$$> _fileinCHOPleft]
    , ["file" <$$> _fileinCHOPfile]
    , ["nameoption" <$$> _fileinCHOPnameoption]
    , ["overridevalue" <$$> _fileinCHOPoverridevalue]
    , ["rate" <$$> _fileinCHOPrate]
    , ["scope" <$$> _fileinCHOPscope]
    , ["overridpattern" <$$> _fileinCHOPoverridpattern]
    , ["timeslice" <$$> _fileinCHOPtimeslice]
    , ["defval" <$$> _fileinCHOPdefval]
    , [("exporttable",) . ResolveP <$> _fileinCHOPexporttable]
    , ["refreshpulse" <$$> _fileinCHOPrefreshpulse]
    , ["renamefrom" <$$> _fileinCHOPrenamefrom]
    , ["name" <$$> _fileinCHOPname]
    , ["renameto" <$$> _fileinCHOPrenameto]
    , ["refresh" <$$> _fileinCHOPrefresh]
    , ["srselect" <$$> _fileinCHOPsrselect]
    , ["right" <$$> _fileinCHOPright]
    , ["rateoption" <$$> _fileinCHOPrateoption]]
  pars (ClipblenderCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _clipblenderCHOPresetpulse]
    , ["timechannel" <$$> _clipblenderCHOPtimechannel]
    , ["qenable" <$$> _clipblenderCHOPqenable]
    , ["stepforward" <$$> _clipblenderCHOPstepforward]
    , [("datlist",) . ResolveP <$> _clipblenderCHOPdatlist]
    , ["xrot" <$$> _clipblenderCHOPxrot]
    , ["ztrans" <$$> _clipblenderCHOPztrans]
    , ["aend" <$$> _clipblenderCHOPaend]
    , ["timeremaining" <$$> _clipblenderCHOPtimeremaining]
    , ["scope" <$$> _clipblenderCHOPscope]
    , ["xtrans" <$$> _clipblenderCHOPxtrans]
    , [("exporttable",) . ResolveP <$> _clipblenderCHOPexporttable]
    , Just <$> vec3Map' "r" _clipblenderCHOPr
    , ["playspeed" <$$> _clipblenderCHOPplayspeed]
    , ["fixjump" <$$> _clipblenderCHOPfixjump]
    , ["exportmethod" <$$> _clipblenderCHOPexportmethod]
    , [("default",) . ResolveP <$> _clipblenderCHOPdefault]
    , ["yrot" <$$> _clipblenderCHOPyrot]
    , ["timeslice" <$$> _clipblenderCHOPtimeslice]
    , ["logjumps" <$$> _clipblenderCHOPlogjumps]
    , ["prerotate" <$$> _clipblenderCHOPprerotate]
    , ["ytrans" <$$> _clipblenderCHOPytrans]
    , ["qtrigger" <$$> _clipblenderCHOPqtrigger]
    , ["delay" <$$> _clipblenderCHOPdelay]
    , ["doxform" <$$> _clipblenderCHOPdoxform]
    , ["srselect" <$$> _clipblenderCHOPsrselect]
    , ["reset" <$$> _clipblenderCHOPreset]
    , ["printstate" <$$> _clipblenderCHOPprintstate]
    , ["zrot" <$$> _clipblenderCHOPzrot]
    , Just <$> vec3Map' "t" _clipblenderCHOPt
    , ["logpulse" <$$> _clipblenderCHOPlogpulse]
    , Just <$> vec3Map' "target" _clipblenderCHOPtarget
    , ["stepbackward" <$$> _clipblenderCHOPstepbackward]]
  pars (LagCHOP {..}) = catMaybes . mconcat $ [ ["lagmethod" <$$> _lagCHOPlagmethod]
    , ["resetpulse" <$$> _lagCHOPresetpulse]
    , ["aclamp" <$$> _lagCHOPaclamp]
    , ["slope2" <$$> _lagCHOPslope2]
    , ["slope1" <$$> _lagCHOPslope1]
    , ["clamp" <$$> _lagCHOPclamp]
    , ["lagsamples" <$$> _lagCHOPlagsamples]
    , [("exporttable",) . ResolveP <$> _lagCHOPexporttable]
    , ["accel1" <$$> _lagCHOPaccel1]
    , ["exportmethod" <$$> _lagCHOPexportmethod]
    , ["overshootunit" <$$> _lagCHOPovershootunit]
    , ["overshoot2" <$$> _lagCHOPovershoot2]
    , ["timeslice" <$$> _lagCHOPtimeslice]
    , ["scope" <$$> _lagCHOPscope]
    , ["lag1" <$$> _lagCHOPlag1]
    , ["lagunit" <$$> _lagCHOPlagunit]
    , ["srselect" <$$> _lagCHOPsrselect]
    , ["overshoot1" <$$> _lagCHOPovershoot1]
    , ["accel2" <$$> _lagCHOPaccel2]
    , ["lag2" <$$> _lagCHOPlag2]
    , ["reset" <$$> _lagCHOPreset]]
  pars (SelectCHOP {..}) = catMaybes . mconcat $ [ ["autoprefix" <$$> _selectCHOPautoprefix]
    , ["exportmethod" <$$> _selectCHOPexportmethod]
    , ["align" <$$> _selectCHOPalign]
    , [("exporttable",) . ResolveP <$> _selectCHOPexporttable]
    , ["scope" <$$> _selectCHOPscope]
    , ["channames" <$$> _selectCHOPchannames]
    , ["renamefrom" <$$> _selectCHOPrenamefrom]
    , ["renameto" <$$> _selectCHOPrenameto]
    , ["srselect" <$$> _selectCHOPsrselect]
    , [("chop",) . ResolveP <$> _selectCHOPchop]
    , ["timeslice" <$$> _selectCHOPtimeslice]]
  pars (LogicCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _logicCHOPexportmethod]
    , ["align" <$$> _logicCHOPalign]
    , ["chopop" <$$> _logicCHOPchopop]
    , [("exporttable",) . ResolveP <$> _logicCHOPexporttable]
    , ["boundmin" <$$> _logicCHOPboundmin]
    , ["scope" <$$> _logicCHOPscope]
    , ["chanop" <$$> _logicCHOPchanop]
    , ["boundmax" <$$> _logicCHOPboundmax]
    , ["srselect" <$$> _logicCHOPsrselect]
    , ["convert" <$$> _logicCHOPconvert]
    , ["match" <$$> _logicCHOPmatch]
    , ["timeslice" <$$> _logicCHOPtimeslice]
    , ["preop" <$$> _logicCHOPpreop]]
  pars (PerformCHOP {..}) = catMaybes . mconcat $ [ ["gputemp" <$$> _performCHOPgputemp]
    , ["aclinestatus" <$$> _performCHOPaclinestatus]
    , ["performmode" <$$> _performCHOPperformmode]
    , ["optimizedexpression" <$$> _performCHOPoptimizedexpression]
    , ["timeslicemsec" <$$> _performCHOPtimeslicemsec]
    , ["fps" <$$> _performCHOPfps]
    , ["mvreadahead" <$$> _performCHOPmvreadahead]
    , ["cookstate" <$$> _performCHOPcookstate]
    , [("exporttable",) . ResolveP <$> _performCHOPexporttable]
    , ["cachedexpressions" <$$> _performCHOPcachedexpressions]
    , ["batterytime" <$$> _performCHOPbatterytime]
    , ["cookrealtime" <$$> _performCHOPcookrealtime]
    , ["exportmethod" <$$> _performCHOPexportmethod]
    , ["cookrate" <$$> _performCHOPcookrate]
    , ["msec" <$$> _performCHOPmsec]
    , ["timeslicestep" <$$> _performCHOPtimeslicestep]
    , ["activeops" <$$> _performCHOPactiveops]
    , ["cook" <$$> _performCHOPcook]
    , ["totalgpumem" <$$> _performCHOPtotalgpumem]
    , ["gpumemused" <$$> _performCHOPgpumemused]
    , ["scope" <$$> _performCHOPscope]
    , ["cpumemused" <$$> _performCHOPcpumemused]
    , ["activeexpressions" <$$> _performCHOPactiveexpressions]
    , ["performfocus" <$$> _performCHOPperformfocus]
    , ["srselect" <$$> _performCHOPsrselect]
    , ["batterylife" <$$> _performCHOPbatterylife]
    , ["totalops" <$$> _performCHOPtotalops]
    , ["batterycharging" <$$> _performCHOPbatterycharging]
    , ["timeslice" <$$> _performCHOPtimeslice]
    , ["deactivatedops" <$$> _performCHOPdeactivatedops]
    , ["droppedframes" <$$> _performCHOPdroppedframes]]
  pars (KeyboardinCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _keyboardinCHOPexportmethod]
    , ["left" <$$> _keyboardinCHOPleft]
    , ["active" <$$> _keyboardinCHOPactive]
    , ["firstkey" <$$> _keyboardinCHOPfirstkey]
    , ["rate" <$$> _keyboardinCHOPrate]
    , ["right" <$$> _keyboardinCHOPright]
    , ["number" <$$> _keyboardinCHOPnumber]
    , ["scope" <$$> _keyboardinCHOPscope]
    , ["defval" <$$> _keyboardinCHOPdefval]
    , [("exporttable",) . ResolveP <$> _keyboardinCHOPexporttable]
    , ["modifiers" <$$> _keyboardinCHOPmodifiers]
    , ["srselect" <$$> _keyboardinCHOPsrselect]
    , ["channelnames" <$$> _keyboardinCHOPchannelnames]
    , ["timeslice" <$$> _keyboardinCHOPtimeslice]
    , ["order" <$$> _keyboardinCHOPorder]]
  pars (DmxinCHOP {..}) = catMaybes . mconcat $ [ ["queuesize" <$$> _dmxinCHOPqueuesize]
    , ["format" <$$> _dmxinCHOPformat]
    , ["active" <$$> _dmxinCHOPactive]
    , ["subnet" <$$> _dmxinCHOPsubnet]
    , ["exportmethod" <$$> _dmxinCHOPexportmethod]
    , ["universename" <$$> _dmxinCHOPuniversename]
    , ["serialport" <$$> _dmxinCHOPserialport]
    , ["scope" <$$> _dmxinCHOPscope]
    , ["netname" <$$> _dmxinCHOPnetname]
    , [("exporttable",) . ResolveP <$> _dmxinCHOPexporttable]
    , ["interface" <$$> _dmxinCHOPinterface]
    , [("filterdat",) . ResolveP <$> _dmxinCHOPfilterdat]
    , ["timeslice" <$$> _dmxinCHOPtimeslice]
    , ["rate" <$$> _dmxinCHOPrate]
    , ["startcodes" <$$> _dmxinCHOPstartcodes]
    , ["net" <$$> _dmxinCHOPnet]
    , ["subnetname" <$$> _dmxinCHOPsubnetname]
    , ["device" <$$> _dmxinCHOPdevice]
    , ["multicast" <$$> _dmxinCHOPmulticast]
    , ["srselect" <$$> _dmxinCHOPsrselect]
    , ["universe" <$$> _dmxinCHOPuniverse]]
  pars (InversekinCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _inversekinCHOPexportmethod]
    , ["iktwist" <$$> _inversekinCHOPiktwist]
    , ["ikdampen" <$$> _inversekinCHOPikdampen]
    , ["scope" <$$> _inversekinCHOPscope]
    , ["srselect" <$$> _inversekinCHOPsrselect]
    , [("exporttable",) . ResolveP <$> _inversekinCHOPexporttable]
    , ["solvertype" <$$> _inversekinCHOPsolvertype]
    , [("curve",) . ResolveP <$> _inversekinCHOPcurve]
    , ["timeslice" <$$> _inversekinCHOPtimeslice]]
  pars (SequencerCHOP {..}) = catMaybes . mconcat $ [ ["queue" <$$> _sequencerCHOPqueue]
    , ["resetpulse" <$$> _sequencerCHOPresetpulse]
    , ["exportmethod" <$$> _sequencerCHOPexportmethod]
    , [("exporttable",) . ResolveP <$> _sequencerCHOPexporttable]
    , ["scope" <$$> _sequencerCHOPscope]
    , [("datlist",) . ResolveP <$> _sequencerCHOPdatlist]
    , ["srselect" <$$> _sequencerCHOPsrselect]
    , ["blendscope" <$$> _sequencerCHOPblendscope]
    , ["trigger" <$$> _sequencerCHOPtrigger]
    , ["addscope" <$$> _sequencerCHOPaddscope]
    , ["timeslice" <$$> _sequencerCHOPtimeslice]
    , ["reset" <$$> _sequencerCHOPreset]]
  pars (BeatCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _beatCHOPresetpulse]
    , ["resetbarvalue" <$$> _beatCHOPresetbarvalue]
    , ["randoffset" <$$> _beatCHOPrandoffset]
    , ["exportmethod" <$$> _beatCHOPexportmethod]
    , ["bpm" <$$> _beatCHOPbpm]
    , ["resetwait" <$$> _beatCHOPresetwait]
    , ["scope" <$$> _beatCHOPscope]
    , ["ramp" <$$> _beatCHOPramp]
    , ["beat" <$$> _beatCHOPbeat]
    , ["sixteenths" <$$> _beatCHOPsixteenths]
    , [("exporttable",) . ResolveP <$> _beatCHOPexporttable]
    , ["multiples" <$$> _beatCHOPmultiples]
    , ["countramp" <$$> _beatCHOPcountramp]
    , ["randseed" <$$> _beatCHOPrandseed]
    , ["setperiod" <$$> _beatCHOPsetperiod]
    , ["shiftoffset" <$$> _beatCHOPshiftoffset]
    , ["resetcondition" <$$> _beatCHOPresetcondition]
    , ["updateglobal" <$$> _beatCHOPupdateglobal]
    , ["count" <$$> _beatCHOPcount]
    , ["rampbeat" <$$> _beatCHOPrampbeat]
    , ["period" <$$> _beatCHOPperiod]
    , ["shiftstep" <$$> _beatCHOPshiftstep]
    , ["pulse" <$$> _beatCHOPpulse]
    , ["bar" <$$> _beatCHOPbar]
    , ["srselect" <$$> _beatCHOPsrselect]
    , ["playmode" <$$> _beatCHOPplaymode]
    , ["rampbar" <$$> _beatCHOPrampbar]
    , ["reftimeslice" <$$> _beatCHOPreftimeslice]
    , ["sine" <$$> _beatCHOPsine]
    , ["timeslice" <$$> _beatCHOPtimeslice]
    , ["reset" <$$> _beatCHOPreset]]
  pars (LtcoutCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _ltcoutCHOPresetpulse]
    , ["audiorate" <$$> _ltcoutCHOPaudiorate]
    , ["hour" <$$> _ltcoutCHOPhour]
    , ["user8" <$$> _ltcoutCHOPuser8]
    , ["exportmethod" <$$> _ltcoutCHOPexportmethod]
    , ["user4" <$$> _ltcoutCHOPuser4]
    , ["user7" <$$> _ltcoutCHOPuser7]
    , ["framerate" <$$> _ltcoutCHOPframerate]
    , ["second" <$$> _ltcoutCHOPsecond]
    , ["frame" <$$> _ltcoutCHOPframe]
    , [("exporttable",) . ResolveP <$> _ltcoutCHOPexporttable]
    , ["dropframe" <$$> _ltcoutCHOPdropframe]
    , ["user2" <$$> _ltcoutCHOPuser2]
    , ["user5" <$$> _ltcoutCHOPuser5]
    , ["user1" <$$> _ltcoutCHOPuser1]
    , ["minute" <$$> _ltcoutCHOPminute]
    , ["fielduser" <$$> _ltcoutCHOPfielduser]
    , ["scope" <$$> _ltcoutCHOPscope]
    , ["play" <$$> _ltcoutCHOPplay]
    , ["srselect" <$$> _ltcoutCHOPsrselect]
    , ["reset" <$$> _ltcoutCHOPreset]
    , ["timeslice" <$$> _ltcoutCHOPtimeslice]
    , ["user6" <$$> _ltcoutCHOPuser6]
    , ["user3" <$$> _ltcoutCHOPuser3]]
  pars (TouchoutCHOP {..}) = catMaybes . mconcat $ [ ["maxsize" <$$> _touchoutCHOPmaxsize]
    , ["cookalways" <$$> _touchoutCHOPcookalways]
    , ["active" <$$> _touchoutCHOPactive]
    , ["maxsizeunit" <$$> _touchoutCHOPmaxsizeunit]
    , ["resendnames" <$$> _touchoutCHOPresendnames]
    , [("exporttable",) . ResolveP <$> _touchoutCHOPexporttable]
    , ["syncports" <$$> _touchoutCHOPsyncports]
    , ["address" <$$> _touchoutCHOPaddress]
    , ["scope" <$$> _touchoutCHOPscope]
    , ["protocol" <$$> _touchoutCHOPprotocol]
    , ["srselect" <$$> _touchoutCHOPsrselect]
    , ["exportmethod" <$$> _touchoutCHOPexportmethod]
    , ["port" <$$> _touchoutCHOPport]
    , ["timeslice" <$$> _touchoutCHOPtimeslice]]
  pars (NullCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _nullCHOPexportmethod]
    , ["srselect" <$$> _nullCHOPsrselect]
    , ["checkrange" <$$> _nullCHOPcheckrange]
    , ["checknames" <$$> _nullCHOPchecknames]
    , ["cooktype" <$$> _nullCHOPcooktype]
    , ["timeslice" <$$> _nullCHOPtimeslice]
    , ["scope" <$$> _nullCHOPscope]
    , [("exporttable",) . ResolveP <$> _nullCHOPexporttable]
    , ["checkvalues" <$$> _nullCHOPcheckvalues]]
  pars (RecordCHOP {..}) = catMaybes . mconcat $ [ ["interp" <$$> _recordCHOPinterp]
    , ["exportmethod" <$$> _recordCHOPexportmethod]
    , ["segment1" <$$> _recordCHOPsegment1]
    , ["output" <$$> _recordCHOPoutput]
    , ["segmentunit" <$$> _recordCHOPsegmentunit]
    , ["resetcondition" <$$> _recordCHOPresetcondition]
    , [("exporttable",) . ResolveP <$> _recordCHOPexporttable]
    , ["scope" <$$> _recordCHOPscope]
    , ["srselect" <$$> _recordCHOPsrselect]
    , ["record" <$$> _recordCHOPrecord]
    , ["sample" <$$> _recordCHOPsample]
    , ["timeslice" <$$> _recordCHOPtimeslice]
    , ["reset" <$$> _recordCHOPreset]
    , ["segment2" <$$> _recordCHOPsegment2]]
  pars (AttributeCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _attributeCHOPexportmethod]
    , ["srselect" <$$> _attributeCHOPsrselect]
    , ["rord" <$$> _attributeCHOPrord]
    , [("exporttable",) . ResolveP <$> _attributeCHOPexporttable]
    , ["slerp" <$$> _attributeCHOPslerp]
    , ["timeslice" <$$> _attributeCHOPtimeslice]
    , ["scope" <$$> _attributeCHOPscope]]
  pars (FanCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _fanCHOPexportmethod]
    , [("exporttable",) . ResolveP <$> _fanCHOPexporttable]
    , ["srselect" <$$> _fanCHOPsrselect]
    , ["quantize" <$$> _fanCHOPquantize]
    , ["fanop" <$$> _fanCHOPfanop]
    , ["range" <$$> _fanCHOPrange]
    , ["timeslice" <$$> _fanCHOPtimeslice]
    , ["channame" <$$> _fanCHOPchanname]
    , ["alloff" <$$> _fanCHOPalloff]
    , ["scope" <$$> _fanCHOPscope]]
  pars (CrossCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _crossCHOPexportmethod]
    , ["srselect" <$$> _crossCHOPsrselect]
    , [("exporttable",) . ResolveP <$> _crossCHOPexporttable]
    , ["cross" <$$> _crossCHOPcross]
    , ["timeslice" <$$> _crossCHOPtimeslice]
    , ["scope" <$$> _crossCHOPscope]]
  pars (PosistagenetCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _posistagenetCHOPexportmethod]
    , ["accel" <$$> _posistagenetCHOPaccel]
    , ["active" <$$> _posistagenetCHOPactive]
    , [("exporttable",) . ResolveP <$> _posistagenetCHOPexporttable]
    , ["scope" <$$> _posistagenetCHOPscope]
    , ["netaddress" <$$> _posistagenetCHOPnetaddress]
    , ["targetpos" <$$> _posistagenetCHOPtargetpos]
    , ["srselect" <$$> _posistagenetCHOPsrselect]
    , ["pos" <$$> _posistagenetCHOPpos]
    , ["ori" <$$> _posistagenetCHOPori]
    , ["port" <$$> _posistagenetCHOPport]
    , ["timeslice" <$$> _posistagenetCHOPtimeslice]
    , ["speed" <$$> _posistagenetCHOPspeed]
    , ["reset" <$$> _posistagenetCHOPreset]
    , ["samplerate" <$$> _posistagenetCHOPsamplerate]]
  pars (RealsenseCHOP {..}) = catMaybes . mconcat $ [ ["mode" <$$> _realsenseCHOPmode]
    , ["smoothtype" <$$> _realsenseCHOPsmoothtype]
    , ["fist" <$$> _realsenseCHOPfist]
    , ["handsrotation" <$$> _realsenseCHOPhandsrotation]
    , ["click" <$$> _realsenseCHOPclick]
    , ["personscolorbounds" <$$> _realsenseCHOPpersonscolorbounds]
    , ["smoothing" <$$> _realsenseCHOPsmoothing]
    , [("markertop",) . ResolveP <$> _realsenseCHOPmarkertop]
    , ["smoothrad" <$$> _realsenseCHOPsmoothrad]
    , ["smoothstrength" <$$> _realsenseCHOPsmoothstrength]
    , ["fullpinch" <$$> _realsenseCHOPfullpinch]
    , ["swipe" <$$> _realsenseCHOPswipe]
    , ["exportmethod" <$$> _realsenseCHOPexportmethod]
    , ["tap" <$$> _realsenseCHOPtap]
    , ["handscolorpos" <$$> _realsenseCHOPhandscolorpos]
    , ["weights" <$$> _realsenseCHOPweights]
    , ["active" <$$> _realsenseCHOPactive]
    , ["faceexpressions" <$$> _realsenseCHOPfaceexpressions]
    , [("exporttable",) . ResolveP <$> _realsenseCHOPexporttable]
    , ["maxperson" <$$> _realsenseCHOPmaxperson]
    , ["facelandmarkscolor" <$$> _realsenseCHOPfacelandmarkscolor]
    , ["personsworldcenterpos" <$$> _realsenseCHOPpersonsworldcenterpos]
    , ["separatehands" <$$> _realsenseCHOPseparatehands]
    , ["sensor" <$$> _realsenseCHOPsensor]
    , ["facebounds" <$$> _realsenseCHOPfacebounds]
    , ["personsskelcolorpos" <$$> _realsenseCHOPpersonsskelcolorpos]
    , ["faceworldpos" <$$> _realsenseCHOPfaceworldpos]
    , ["timeslice" <$$> _realsenseCHOPtimeslice]
    , ["handsworldpos" <$$> _realsenseCHOPhandsworldpos]
    , ["personscolorcenterpos" <$$> _realsenseCHOPpersonscolorcenterpos]
    , ["facelandmarksworld" <$$> _realsenseCHOPfacelandmarksworld]
    , ["scope" <$$> _realsenseCHOPscope]
    , ["thumbs" <$$> _realsenseCHOPthumbs]
    , ["srselect" <$$> _realsenseCHOPsrselect]
    , ["vsign" <$$> _realsenseCHOPvsign]
    , ["wave" <$$> _realsenseCHOPwave]
    , ["model" <$$> _realsenseCHOPmodel]
    , ["twofingerpinch" <$$> _realsenseCHOPtwofingerpinch]
    , ["spreadfingers" <$$> _realsenseCHOPspreadfingers]
    , ["facerotation" <$$> _realsenseCHOPfacerotation]
    , ["personsskelworldpos" <$$> _realsenseCHOPpersonsskelworldpos]]
  pars (SlopeCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _slopeCHOPexportmethod]
    , ["type" <$$> _slopeCHOPtype]
    , ["srselect" <$$> _slopeCHOPsrselect]
    , ["method" <$$> _slopeCHOPmethod]
    , ["timeslice" <$$> _slopeCHOPtimeslice]
    , ["scope" <$$> _slopeCHOPscope]
    , [("exporttable",) . ResolveP <$> _slopeCHOPexporttable]]
  pars (MouseoutCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _mouseoutCHOPexportmethod]
    , ["cookalways" <$$> _mouseoutCHOPcookalways]
    , ["mbuttonname" <$$> _mouseoutCHOPmbuttonname]
    , ["timeslice" <$$> _mouseoutCHOPtimeslice]
    , ["scope" <$$> _mouseoutCHOPscope]
    , [("exporttable",) . ResolveP <$> _mouseoutCHOPexporttable]
    , ["rbuttonname" <$$> _mouseoutCHOPrbuttonname]
    , ["posu" <$$> _mouseoutCHOPposu]
    , ["srselect" <$$> _mouseoutCHOPsrselect]
    , ["posv" <$$> _mouseoutCHOPposv]
    , ["lbuttonname" <$$> _mouseoutCHOPlbuttonname]]
  pars (LimitCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _limitCHOPexportmethod]
    , ["type" <$$> _limitCHOPtype]
    , ["ioffsetunit" <$$> _limitCHOPioffsetunit]
    , ["timeslice" <$$> _limitCHOPtimeslice]
    , ["ioffset" <$$> _limitCHOPioffset]
    , ["min" <$$> _limitCHOPmin]
    , ["norm" <$$> _limitCHOPnorm]
    , ["underflow" <$$> _limitCHOPunderflow]
    , ["scope" <$$> _limitCHOPscope]
    , ["vstep" <$$> _limitCHOPvstep]
    , [("exporttable",) . ResolveP <$> _limitCHOPexporttable]
    , ["srselect" <$$> _limitCHOPsrselect]
    , ["voffset" <$$> _limitCHOPvoffset]
    , ["istep" <$$> _limitCHOPistep]
    , ["quantvalue" <$$> _limitCHOPquantvalue]
    , ["istepunit" <$$> _limitCHOPistepunit]
    , ["positive" <$$> _limitCHOPpositive]
    , ["quantindex" <$$> _limitCHOPquantindex]
    , ["max" <$$> _limitCHOPmax]]
  pars (EnvelopeCHOP {..}) = catMaybes . mconcat $ [ ["interp" <$$> _envelopeCHOPinterp]
    , ["resample" <$$> _envelopeCHOPresample]
    , ["exportmethod" <$$> _envelopeCHOPexportmethod]
    , [("exporttable",) . ResolveP <$> _envelopeCHOPexporttable]
    , ["scope" <$$> _envelopeCHOPscope]
    , ["norm" <$$> _envelopeCHOPnorm]
    , ["width" <$$> _envelopeCHOPwidth]
    , ["widthunit" <$$> _envelopeCHOPwidthunit]
    , ["srselect" <$$> _envelopeCHOPsrselect]
    , ["method" <$$> _envelopeCHOPmethod]
    , ["timeslice" <$$> _envelopeCHOPtimeslice]
    , ["bounds" <$$> _envelopeCHOPbounds]
    , ["samplerate" <$$> _envelopeCHOPsamplerate]]
  pars (PipeoutCHOP {..}) = catMaybes . mconcat $ [ ["mode" <$$> _pipeoutCHOPmode]
    , ["exportmethod" <$$> _pipeoutCHOPexportmethod]
    , ["sendinput" <$$> _pipeoutCHOPsendinput]
    , ["active" <$$> _pipeoutCHOPactive]
    , ["echo" <$$> _pipeoutCHOPecho]
    , ["address" <$$> _pipeoutCHOPaddress]
    , ["script" <$$> _pipeoutCHOPscript]
    , ["sendsingle" <$$> _pipeoutCHOPsendsingle]
    , ["pulse" <$$> _pipeoutCHOPpulse]
    , [("exporttable",) . ResolveP <$> _pipeoutCHOPexporttable]
    , ["sample" <$$> _pipeoutCHOPsample]
    , [("callbacks",) . ResolveP <$> _pipeoutCHOPcallbacks]
    , ["srselect" <$$> _pipeoutCHOPsrselect]
    , ["scope" <$$> _pipeoutCHOPscope]
    , ["sendscript" <$$> _pipeoutCHOPsendscript]
    , ["cookalways" <$$> _pipeoutCHOPcookalways]
    , ["port" <$$> _pipeoutCHOPport]
    , ["timeslice" <$$> _pipeoutCHOPtimeslice]
    , ["upload" <$$> _pipeoutCHOPupload]]
  pars (LeapmotionCHOP {..}) = catMaybes . mconcat $ [ ["debugchannels" <$$> _leapmotionCHOPdebugchannels]
    , ["fingerrotation" <$$> _leapmotionCHOPfingerrotation]
    , ["hands" <$$> _leapmotionCHOPhands]
    , ["active" <$$> _leapmotionCHOPactive]
    , ["exportmethod" <$$> _leapmotionCHOPexportmethod]
    , ["keytapgestures" <$$> _leapmotionCHOPkeytapgestures]
    , ["pinchstrength" <$$> _leapmotionCHOPpinchstrength]
    , ["hmd" <$$> _leapmotionCHOPhmd]
    , ["scope" <$$> _leapmotionCHOPscope]
    , ["namedfingers" <$$> _leapmotionCHOPnamedfingers]
    , ["handvelocity" <$$> _leapmotionCHOPhandvelocity]
    , ["circlegestures" <$$> _leapmotionCHOPcirclegestures]
    , ["statuschannels" <$$> _leapmotionCHOPstatuschannels]
    , ["tools" <$$> _leapmotionCHOPtools]
    , ["righthands" <$$> _leapmotionCHOPrighthands]
    , [("exporttable",) . ResolveP <$> _leapmotionCHOPexporttable]
    , ["grabstrength" <$$> _leapmotionCHOPgrabstrength]
    , ["fingerextended" <$$> _leapmotionCHOPfingerextended]
    , ["fingerjoints" <$$> _leapmotionCHOPfingerjoints]
    , ["lefthands" <$$> _leapmotionCHOPlefthands]
    , ["namedhands" <$$> _leapmotionCHOPnamedhands]
    , ["swipegestures" <$$> _leapmotionCHOPswipegestures]
    , ["srselect" <$$> _leapmotionCHOPsrselect]
    , ["handsphere" <$$> _leapmotionCHOPhandsphere]
    , ["screentapgestures" <$$> _leapmotionCHOPscreentapgestures]
    , ["timeslice" <$$> _leapmotionCHOPtimeslice]
    , ["fingersize" <$$> _leapmotionCHOPfingersize]
    , ["fingersperhand" <$$> _leapmotionCHOPfingersperhand]]
  pars (SwitchCHOP {..}) = catMaybes . mconcat $ [ ["index" <$$> _switchCHOPindex]
    , ["srselect" <$$> _switchCHOPsrselect]
    , ["exportmethod" <$$> _switchCHOPexportmethod]
    , ["indexfirst" <$$> _switchCHOPindexfirst]
    , [("exporttable",) . ResolveP <$> _switchCHOPexporttable]
    , ["timeslice" <$$> _switchCHOPtimeslice]
    , ["scope" <$$> _switchCHOPscope]]
  pars (Leuzerod4CHOP {..}) = catMaybes . mconcat $ [ ["active" <$$> _leuzerod4CHOPactive]
    , ["exportmethod" <$$> _leuzerod4CHOPexportmethod]
    , ["outputmode" <$$> _leuzerod4CHOPoutputmode]
    , ["upperright1" <$$> _leuzerod4CHOPupperright1]
    , ["upperright2" <$$> _leuzerod4CHOPupperright2]
    , ["maxdistance" <$$> _leuzerod4CHOPmaxdistance]
    , ["maxblobs" <$$> _leuzerod4CHOPmaxblobs]
    , ["port" <$$> _leuzerod4CHOPport]
    , [("exporttable",) . ResolveP <$> _leuzerod4CHOPexporttable]
    , ["lowerleft1" <$$> _leuzerod4CHOPlowerleft1]
    , [("boundingboxmask",) . ResolveP <$> _leuzerod4CHOPboundingboxmask]
    , ["rod4porotocol" <$$> _leuzerod4CHOProd4porotocol]
    , ["maxblobmovement" <$$> _leuzerod4CHOPmaxblobmovement]
    , ["scope" <$$> _leuzerod4CHOPscope]
    , ["maxpointdistance" <$$> _leuzerod4CHOPmaxpointdistance]
    , ["rotate" <$$> _leuzerod4CHOProtate]
    , ["srselect" <$$> _leuzerod4CHOPsrselect]
    , ["areaofinterest" <$$> _leuzerod4CHOPareaofinterest]
    , ["allowmovementoutside" <$$> _leuzerod4CHOPallowmovementoutside]
    , ["lowerleft2" <$$> _leuzerod4CHOPlowerleft2]
    , ["timeslice" <$$> _leuzerod4CHOPtimeslice]
    , ["netaddress" <$$> _leuzerod4CHOPnetaddress]
    , ["inputcoordinate" <$$> _leuzerod4CHOPinputcoordinate]]
  pars (ToptoCHOP {..}) = catMaybes . mconcat $ [ ["interp" <$$> _toptoCHOPinterp]
    , ["vend" <$$> _toptoCHOPvend]
    , ["downloadtype" <$$> _toptoCHOPdownloadtype]
    , ["exportmethod" <$$> _toptoCHOPexportmethod]
    , ["crop" <$$> _toptoCHOPcrop]
    , ["imageright" <$$> _toptoCHOPimageright]
    , ["defval" <$$> _toptoCHOPdefval]
    , ["vstart" <$$> _toptoCHOPvstart]
    , [("top",) . ResolveP <$> _toptoCHOPtop]
    , ["rgbaunit" <$$> _toptoCHOPrgbaunit]
    , ["uvunits" <$$> _toptoCHOPuvunits]
    , ["startunit" <$$> _toptoCHOPstartunit]
    , ["r" <$$> _toptoCHOPr]
    , ["g" <$$> _toptoCHOPg]
    , ["uend" <$$> _toptoCHOPuend]
    , ["start" <$$> _toptoCHOPstart]
    , ["left" <$$> _toptoCHOPleft]
    , ["ustart" <$$> _toptoCHOPustart]
    , ["b" <$$> _toptoCHOPb]
    , ["timeslice" <$$> _toptoCHOPtimeslice]
    , ["rate" <$$> _toptoCHOPrate]
    , ["scope" <$$> _toptoCHOPscope]
    , ["a" <$$> _toptoCHOPa]
    , ["imageleft" <$$> _toptoCHOPimageleft]
    , ["srselect" <$$> _toptoCHOPsrselect]
    , [("exporttable",) . ResolveP <$> _toptoCHOPexporttable]
    , ["imagetop" <$$> _toptoCHOPimagetop]
    , ["imagebottom" <$$> _toptoCHOPimagebottom]
    , Just <$> rgbaMap "defcolor" _toptoCHOPdefcolor
    , ["right" <$$> _toptoCHOPright]]
  pars (AbletonlinkCHOP {..}) = catMaybes . mconcat $ [ ["active" <$$> _abletonlinkCHOPactive]
    , ["scope" <$$> _abletonlinkCHOPscope]
    , ["ramp" <$$> _abletonlinkCHOPramp]
    , ["phase" <$$> _abletonlinkCHOPphase]
    , ["beat" <$$> _abletonlinkCHOPbeat]
    , ["sixteenths" <$$> _abletonlinkCHOPsixteenths]
    , [("callbacks",) . ResolveP <$> _abletonlinkCHOPcallbacks]
    , ["tempo" <$$> _abletonlinkCHOPtempo]
    , ["enable" <$$> _abletonlinkCHOPenable]
    , [("exporttable",) . ResolveP <$> _abletonlinkCHOPexporttable]
    , ["signature1" <$$> _abletonlinkCHOPsignature1]
    , ["exportmethod" <$$> _abletonlinkCHOPexportmethod]
    , ["countramp" <$$> _abletonlinkCHOPcountramp]
    , ["status" <$$> _abletonlinkCHOPstatus]
    , ["count" <$$> _abletonlinkCHOPcount]
    , ["rampbeat" <$$> _abletonlinkCHOPrampbeat]
    , ["signature2" <$$> _abletonlinkCHOPsignature2]
    , ["beats" <$$> _abletonlinkCHOPbeats]
    , ["pulse" <$$> _abletonlinkCHOPpulse]
    , ["bar" <$$> _abletonlinkCHOPbar]
    , ["srselect" <$$> _abletonlinkCHOPsrselect]
    , ["rampbar" <$$> _abletonlinkCHOPrampbar]
    , ["sine" <$$> _abletonlinkCHOPsine]
    , ["timeslice" <$$> _abletonlinkCHOPtimeslice]]
  pars (ConstantCHOP {..}) = catMaybes . mconcat $ [ ["name1" <$$> _constantCHOPname1]
    , ["name17" <$$> _constantCHOPname17]
    , ["value3" <$$> _constantCHOPvalue3]
    , ["value29" <$$> _constantCHOPvalue29]
    , ["value14" <$$> _constantCHOPvalue14]
    , ["name21" <$$> _constantCHOPname21]
    , ["startunit" <$$> _constantCHOPstartunit]
    , ["value20" <$$> _constantCHOPvalue20]
    , ["value25" <$$> _constantCHOPvalue25]
    , ["value24" <$$> _constantCHOPvalue24]
    , ["name12" <$$> _constantCHOPname12]
    , [("exporttable",) . ResolveP <$> _constantCHOPexporttable]
    , ["name15" <$$> _constantCHOPname15]
    , ["left" <$$> _constantCHOPleft]
    , ["name0" <$$> _constantCHOPname0]
    , ["name23" <$$> _constantCHOPname23]
    , ["name27" <$$> _constantCHOPname27]
    , ["name39" <$$> _constantCHOPname39]
    , ["name2" <$$> _constantCHOPname2]
    , ["srselect" <$$> _constantCHOPsrselect]
    , ["value36" <$$> _constantCHOPvalue36]
    , ["value23" <$$> _constantCHOPvalue23]
    , ["name33" <$$> _constantCHOPname33]
    , ["value19" <$$> _constantCHOPvalue19]
    , ["name34" <$$> _constantCHOPname34]
    , ["name38" <$$> _constantCHOPname38]
    , ["name5" <$$> _constantCHOPname5]
    , ["value2" <$$> _constantCHOPvalue2]
    , ["name37" <$$> _constantCHOPname37]
    , ["defval" <$$> _constantCHOPdefval]
    , ["value11" <$$> _constantCHOPvalue11]
    , ["value13" <$$> _constantCHOPvalue13]
    , ["scope" <$$> _constantCHOPscope]
    , ["exportmethod" <$$> _constantCHOPexportmethod]
    , ["name10" <$$> _constantCHOPname10]
    , ["value5" <$$> _constantCHOPvalue5]
    , ["value37" <$$> _constantCHOPvalue37]
    , ["snap" <$$> _constantCHOPsnap]
    , ["value0" <$$> _constantCHOPvalue0]
    , ["value9" <$$> _constantCHOPvalue9]
    , ["value17" <$$> _constantCHOPvalue17]
    , ["name7" <$$> _constantCHOPname7]
    , ["name6" <$$> _constantCHOPname6]
    , ["value32" <$$> _constantCHOPvalue32]
    , ["timeslice" <$$> _constantCHOPtimeslice]
    , ["value10" <$$> _constantCHOPvalue10]
    , ["name29" <$$> _constantCHOPname29]
    , ["first" <$$> _constantCHOPfirst]
    , ["name36" <$$> _constantCHOPname36]
    , ["value6" <$$> _constantCHOPvalue6]
    , ["name35" <$$> _constantCHOPname35]
    , ["name30" <$$> _constantCHOPname30]
    , ["value33" <$$> _constantCHOPvalue33]
    , ["current" <$$> _constantCHOPcurrent]
    , ["value21" <$$> _constantCHOPvalue21]
    , ["value8" <$$> _constantCHOPvalue8]
    , ["value4" <$$> _constantCHOPvalue4]
    , ["value15" <$$> _constantCHOPvalue15]
    , ["name26" <$$> _constantCHOPname26]
    , ["name4" <$$> _constantCHOPname4]
    , ["name11" <$$> _constantCHOPname11]
    , ["name8" <$$> _constantCHOPname8]
    , ["name28" <$$> _constantCHOPname28]
    , ["value26" <$$> _constantCHOPvalue26]
    , ["single" <$$> _constantCHOPsingle]
    , ["name19" <$$> _constantCHOPname19]
    , ["value28" <$$> _constantCHOPvalue28]
    , ["name13" <$$> _constantCHOPname13]
    , ["name20" <$$> _constantCHOPname20]
    , ["endunit" <$$> _constantCHOPendunit]
    , ["rate" <$$> _constantCHOPrate]
    , ["value27" <$$> _constantCHOPvalue27]
    , ["value18" <$$> _constantCHOPvalue18]
    , ["value39" <$$> _constantCHOPvalue39]
    , ["end" <$$> _constantCHOPend]
    , ["value7" <$$> _constantCHOPvalue7]
    , ["value22" <$$> _constantCHOPvalue22]
    , ["value12" <$$> _constantCHOPvalue12]
    , ["name18" <$$> _constantCHOPname18]
    , ["value34" <$$> _constantCHOPvalue34]
    , ["name32" <$$> _constantCHOPname32]
    , ["name25" <$$> _constantCHOPname25]
    , ["value35" <$$> _constantCHOPvalue35]
    , ["start" <$$> _constantCHOPstart]
    , ["value1" <$$> _constantCHOPvalue1]
    , ["name14" <$$> _constantCHOPname14]
    , ["value16" <$$> _constantCHOPvalue16]
    , ["value31" <$$> _constantCHOPvalue31]
    , ["name31" <$$> _constantCHOPname31]
    , ["name24" <$$> _constantCHOPname24]
    , ["name16" <$$> _constantCHOPname16]
    , ["value30" <$$> _constantCHOPvalue30]
    , ["name9" <$$> _constantCHOPname9]
    , ["name3" <$$> _constantCHOPname3]
    , ["name22" <$$> _constantCHOPname22]
    , ["value38" <$$> _constantCHOPvalue38]
    , ["right" <$$> _constantCHOPright]]
  pars (ObjectCHOP {..}) = catMaybes . mconcat $ [ ["tscopez" <$$> _objectCHOPtscopez]
    , ["nameformat" <$$> _objectCHOPnameformat]
    , ["compute" <$$> _objectCHOPcompute]
    , ["cookpast" <$$> _objectCHOPcookpast]
    , ["appendattribs" <$$> _objectCHOPappendattribs]
    , ["end" <$$> _objectCHOPend]
    , ["scope" <$$> _objectCHOPscope]
    , ["tscopey" <$$> _objectCHOPtscopey]
    , ["tscopex" <$$> _objectCHOPtscopex]
    , ["defval" <$$> _objectCHOPdefval]
    , ["exportmethod" <$$> _objectCHOPexportmethod]
    , ["outputrange" <$$> _objectCHOPoutputrange]
    , ["smoothrotate" <$$> _objectCHOPsmoothrotate]
    , ["startunit" <$$> _objectCHOPstartunit]
    , ["start" <$$> _objectCHOPstart]
    , ["left" <$$> _objectCHOPleft]
    , Just <$> vec3Map' "bearing" _objectCHOPbearing
    , ["endunit" <$$> _objectCHOPendunit]
    , ["xord" <$$> _objectCHOPxord]
    , ["right" <$$> _objectCHOPright]
    , [("exporttable",) . ResolveP <$> _objectCHOPexporttable]
    , ["timeslice" <$$> _objectCHOPtimeslice]
    , ["srselect" <$$> _objectCHOPsrselect]
    , ["bearingref" <$$> _objectCHOPbearingref]
    , ["rord" <$$> _objectCHOPrord]
    , [("dat",) . ResolveP <$> _objectCHOPdat]]
  pars (JoinCHOP {..}) = catMaybes . mconcat $ [ ["blendbyinput" <$$> _joinCHOPblendbyinput]
    , ["transscopex" <$$> _joinCHOPtransscopex]
    , ["shortrot" <$$> _joinCHOPshortrot]
    , ["blendmethod" <$$> _joinCHOPblendmethod]
    , ["step" <$$> _joinCHOPstep]
    , ["transscopey" <$$> _joinCHOPtransscopey]
    , ["scope" <$$> _joinCHOPscope]
    , ["blendscope" <$$> _joinCHOPblendscope]
    , ["transscopez" <$$> _joinCHOPtransscopez]
    , [("exporttable",) . ResolveP <$> _joinCHOPexporttable]
    , ["exportmethod" <$$> _joinCHOPexportmethod]
    , ["rotscope" <$$> _joinCHOProtscope]
    , ["blendbias" <$$> _joinCHOPblendbias]
    , ["blendregionunit" <$$> _joinCHOPblendregionunit]
    , ["match" <$$> _joinCHOPmatch]
    , ["cyclelen" <$$> _joinCHOPcyclelen]
    , ["quatrot" <$$> _joinCHOPquatrot]
    , ["stepscope" <$$> _joinCHOPstepscope]
    , ["srselect" <$$> _joinCHOPsrselect]
    , ["timeslice" <$$> _joinCHOPtimeslice]
    , ["blendregion" <$$> _joinCHOPblendregion]
    , ["blendfunc" <$$> _joinCHOPblendfunc]]
  pars (CycleCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _cycleCHOPexportmethod]
    , ["before" <$$> _cycleCHOPbefore]
    , [("exporttable",) . ResolveP <$> _cycleCHOPexporttable]
    , ["blendmethod" <$$> _cycleCHOPblendmethod]
    , ["blendbias" <$$> _cycleCHOPblendbias]
    , ["blendregionunit" <$$> _cycleCHOPblendregionunit]
    , ["step" <$$> _cycleCHOPstep]
    , ["mirror" <$$> _cycleCHOPmirror]
    , ["blendregion" <$$> _cycleCHOPblendregion]
    , ["extremes" <$$> _cycleCHOPextremes]
    , ["srselect" <$$> _cycleCHOPsrselect]
    , ["scope" <$$> _cycleCHOPscope]
    , ["after" <$$> _cycleCHOPafter]
    , ["timeslice" <$$> _cycleCHOPtimeslice]
    , ["stepscope" <$$> _cycleCHOPstepscope]
    , ["blendfunc" <$$> _cycleCHOPblendfunc]]
  pars (FeedbackCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _feedbackCHOPresetpulse]
    , ["srselect" <$$> _feedbackCHOPsrselect]
    , ["output" <$$> _feedbackCHOPoutput]
    , ["exportmethod" <$$> _feedbackCHOPexportmethod]
    , [("exporttable",) . ResolveP <$> _feedbackCHOPexporttable]
    , ["timeslice" <$$> _feedbackCHOPtimeslice]
    , ["scope" <$$> _feedbackCHOPscope]
    , ["reset" <$$> _feedbackCHOPreset]
    , ["delta" <$$> _feedbackCHOPdelta]]
  pars (OculusriftCHOP {..}) = catMaybes . mconcat $ [ ["near" <$$> _oculusriftCHOPnear]
    , ["recenter" <$$> _oculusriftCHOPrecenter]
    , ["active" <$$> _oculusriftCHOPactive]
    , ["deviceinfo" <$$> _oculusriftCHOPdeviceinfo]
    , ["exportmethod" <$$> _oculusriftCHOPexportmethod]
    , [("exporttable",) . ResolveP <$> _oculusriftCHOPexporttable]
    , ["far" <$$> _oculusriftCHOPfar]
    , ["scope" <$$> _oculusriftCHOPscope]
    , ["srselect" <$$> _oculusriftCHOPsrselect]
    , ["acceleration" <$$> _oculusriftCHOPacceleration]
    , ["velocity" <$$> _oculusriftCHOPvelocity]
    , ["orientation" <$$> _oculusriftCHOPorientation]
    , ["controllerbuttons" <$$> _oculusriftCHOPcontrollerbuttons]
    , ["timeslice" <$$> _oculusriftCHOPtimeslice]
    , ["output" <$$> _oculusriftCHOPoutput]]
  pars (MathCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _mathCHOPexportmethod]
    , ["gain" <$$> _mathCHOPgain]
    , ["postoff" <$$> _mathCHOPpostoff]
    , ["align" <$$> _mathCHOPalign]
    , ["torange1" <$$> _mathCHOPtorange1]
    , ["fromrange2" <$$> _mathCHOPfromrange2]
    , ["postop" <$$> _mathCHOPpostop]
    , ["chopop" <$$> _mathCHOPchopop]
    , ["chanop" <$$> _mathCHOPchanop]
    , ["match" <$$> _mathCHOPmatch]
    , [("exporttable",) . ResolveP <$> _mathCHOPexporttable]
    , ["scope" <$$> _mathCHOPscope]
    , ["torange2" <$$> _mathCHOPtorange2]
    , ["preoff" <$$> _mathCHOPpreoff]
    , ["fromrange1" <$$> _mathCHOPfromrange1]
    , ["srselect" <$$> _mathCHOPsrselect]
    , ["timeslice" <$$> _mathCHOPtimeslice]
    , ["preop" <$$> _mathCHOPpreop]
    , ["integer" <$$> _mathCHOPinteger]]
  pars (ScanCHOP {..}) = catMaybes . mconcat $ [ ["vertexrepeat" <$$> _scanCHOPvertexrepeat]
    , ["layered" <$$> _scanCHOPlayered]
    , ["color" <$$> _scanCHOPcolor]
    , ["xscale" <$$> _scanCHOPxscale]
    , ["srselect" <$$> _scanCHOPsrselect]
    , ["scope" <$$> _scanCHOPscope]
    , ["limitstep" <$$> _scanCHOPlimitstep]
    , [("top",) . ResolveP <$> _scanCHOPtop]
    , ["greenscale" <$$> _scanCHOPgreenscale]
    , ["level" <$$> _scanCHOPlevel]
    , ["height" <$$> _scanCHOPheight]
    , ["vertexorder" <$$> _scanCHOPvertexorder]
    , [("sop",) . ResolveP <$> _scanCHOPsop]
    , ["bluescale" <$$> _scanCHOPbluescale]
    , ["source" <$$> _scanCHOPsource]
    , ["limit" <$$> _scanCHOPlimit]
    , ["exportmethod" <$$> _scanCHOPexportmethod]
    , ["randomize" <$$> _scanCHOPrandomize]
    , [("exporttable",) . ResolveP <$> _scanCHOPexporttable]
    , ["rate" <$$> _scanCHOPrate]
    , ["interleave" <$$> _scanCHOPinterleave]
    , ["trim" <$$> _scanCHOPtrim]
    , ["trimval" <$$> _scanCHOPtrimval]
    , ["rotate" <$$> _scanCHOProtate]
    , ["triggerval" <$$> _scanCHOPtriggerval]
    , ["width" <$$> _scanCHOPwidth]
    , ["blankingcount" <$$> _scanCHOPblankingcount]
    , ["trimunits" <$$> _scanCHOPtrimunits]
    , ["stepsize" <$$> _scanCHOPstepsize]
    , [("chop",) . ResolveP <$> _scanCHOPchop]
    , ["yscale" <$$> _scanCHOPyscale]
    , ["trigger" <$$> _scanCHOPtrigger]
    , ["timeslice" <$$> _scanCHOPtimeslice]
    , ["redscale" <$$> _scanCHOPredscale]
    , ["swap" <$$> _scanCHOPswap]]
  pars (AudiostreaminCHOP {..}) = catMaybes . mconcat $ [ [("videostreamintop",) . ResolveP <$> _audiostreaminCHOPvideostreamintop]
    , ["play" <$$> _audiostreaminCHOPplay]
    , ["srselect" <$$> _audiostreaminCHOPsrselect]
    , ["volume" <$$> _audiostreaminCHOPvolume]
    , ["exportmethod" <$$> _audiostreaminCHOPexportmethod]
    , ["timeslice" <$$> _audiostreaminCHOPtimeslice]
    , ["opentimeout" <$$> _audiostreaminCHOPopentimeout]
    , ["url" <$$> _audiostreaminCHOPurl]
    , ["scope" <$$> _audiostreaminCHOPscope]
    , [("exporttable",) . ResolveP <$> _audiostreaminCHOPexporttable]]
  pars (WaveCHOP {..}) = catMaybes . mconcat $ [ ["end" <$$> _waveCHOPend]
    , ["decay" <$$> _waveCHOPdecay]
    , ["exportmethod" <$$> _waveCHOPexportmethod]
    , ["offset" <$$> _waveCHOPoffset]
    , ["scope" <$$> _waveCHOPscope]
    , ["defval" <$$> _waveCHOPdefval]
    , ["wavetype" <$$> _waveCHOPwavetype]
    , ["ramp" <$$> _waveCHOPramp]
    , ["phase" <$$> _waveCHOPphase]
    , ["rampunit" <$$> _waveCHOPrampunit]
    , ["periodunit" <$$> _waveCHOPperiodunit]
    , ["endunit" <$$> _waveCHOPendunit]
    , ["start" <$$> _waveCHOPstart]
    , ["left" <$$> _waveCHOPleft]
    , ["period" <$$> _waveCHOPperiod]
    , ["startunit" <$$> _waveCHOPstartunit]
    , ["rate" <$$> _waveCHOPrate]
    , ["channelname" <$$> _waveCHOPchannelname]
    , ["exprs" <$$> _waveCHOPexprs]
    , [("exporttable",) . ResolveP <$> _waveCHOPexporttable]
    , ["timeslice" <$$> _waveCHOPtimeslice]
    , ["decayunit" <$$> _waveCHOPdecayunit]
    , ["bias" <$$> _waveCHOPbias]
    , ["srselect" <$$> _waveCHOPsrselect]
    , ["amp" <$$> _waveCHOPamp]
    , ["right" <$$> _waveCHOPright]]
  pars (AudiobandeqCHOP {..}) = catMaybes . mconcat $ [ ["band12" <$$> _audiobandeqCHOPband12]
    , ["drywet" <$$> _audiobandeqCHOPdrywet]
    , ["band13" <$$> _audiobandeqCHOPband13]
    , ["scope" <$$> _audiobandeqCHOPscope]
    , ["band10" <$$> _audiobandeqCHOPband10]
    , ["band14" <$$> _audiobandeqCHOPband14]
    , ["band5" <$$> _audiobandeqCHOPband5]
    , ["band1" <$$> _audiobandeqCHOPband1]
    , ["band3" <$$> _audiobandeqCHOPband3]
    , ["band16" <$$> _audiobandeqCHOPband16]
    , [("exporttable",) . ResolveP <$> _audiobandeqCHOPexporttable]
    , ["band2" <$$> _audiobandeqCHOPband2]
    , ["exportmethod" <$$> _audiobandeqCHOPexportmethod]
    , ["band4" <$$> _audiobandeqCHOPband4]
    , ["band6" <$$> _audiobandeqCHOPband6]
    , ["band7" <$$> _audiobandeqCHOPband7]
    , ["srselect" <$$> _audiobandeqCHOPsrselect]
    , ["band9" <$$> _audiobandeqCHOPband9]
    , ["band11" <$$> _audiobandeqCHOPband11]
    , ["band15" <$$> _audiobandeqCHOPband15]
    , ["timeslice" <$$> _audiobandeqCHOPtimeslice]
    , ["band8" <$$> _audiobandeqCHOPband8]]
  pars (ShuffleCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _shuffleCHOPexportmethod]
    , ["srselect" <$$> _shuffleCHOPsrselect]
    , ["firstsample" <$$> _shuffleCHOPfirstsample]
    , ["method" <$$> _shuffleCHOPmethod]
    , ["timeslice" <$$> _shuffleCHOPtimeslice]
    , ["nval" <$$> _shuffleCHOPnval]
    , [("exporttable",) . ResolveP <$> _shuffleCHOPexporttable]
    , ["scope" <$$> _shuffleCHOPscope]]
  pars (TimelineCHOP {..}) = catMaybes . mconcat $ [ ["start" <$$> _timelineCHOPstart]
    , ["end" <$$> _timelineCHOPend]
    , ["signature1" <$$> _timelineCHOPsignature1]
    , ["exportmethod" <$$> _timelineCHOPexportmethod]
    , ["bpm" <$$> _timelineCHOPbpm]
    , ["rate" <$$> _timelineCHOPrate]
    , ["scope" <$$> _timelineCHOPscope]
    , [("exporttable",) . ResolveP <$> _timelineCHOPexporttable]
    , ["play" <$$> _timelineCHOPplay]
    , ["srselect" <$$> _timelineCHOPsrselect]
    , ["signature2" <$$> _timelineCHOPsignature2]
    , ["frame" <$$> _timelineCHOPframe]
    , ["timeslice" <$$> _timelineCHOPtimeslice]
    , ["rangeend" <$$> _timelineCHOPrangeend]
    , ["rangestart" <$$> _timelineCHOPrangestart]]
  pars (LfoCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _lfoCHOPresetpulse]
    , ["resetcondition" <$$> _lfoCHOPresetcondition]
    , ["bias" <$$> _lfoCHOPbias]
    , ["rate" <$$> _lfoCHOPrate]
    , ["channelname" <$$> _lfoCHOPchannelname]
    , ["scope" <$$> _lfoCHOPscope]
    , [("exporttable",) . ResolveP <$> _lfoCHOPexporttable]
    , ["wavetype" <$$> _lfoCHOPwavetype]
    , ["play" <$$> _lfoCHOPplay]
    , ["phase" <$$> _lfoCHOPphase]
    , ["exportmethod" <$$> _lfoCHOPexportmethod]
    , ["frequency" <$$> _lfoCHOPfrequency]
    , ["offset" <$$> _lfoCHOPoffset]
    , ["srselect" <$$> _lfoCHOPsrselect]
    , ["amp" <$$> _lfoCHOPamp]
    , ["timeslice" <$$> _lfoCHOPtimeslice]
    , ["reset" <$$> _lfoCHOPreset]]
  pars (TriggerCHOP {..}) = catMaybes . mconcat $ [ ["peaklenunit" <$$> _triggerCHOPpeaklenunit]
    , ["threshdown" <$$> _triggerCHOPthreshdown]
    , ["decay" <$$> _triggerCHOPdecay]
    , ["peak" <$$> _triggerCHOPpeak]
    , ["exportmethod" <$$> _triggerCHOPexportmethod]
    , ["ashape" <$$> _triggerCHOPashape]
    , ["minsustain" <$$> _triggerCHOPminsustain]
    , ["specifyrate" <$$> _triggerCHOPspecifyrate]
    , ["clamppeak" <$$> _triggerCHOPclamppeak]
    , ["minsustainunit" <$$> _triggerCHOPminsustainunit]
    , ["delayunit" <$$> _triggerCHOPdelayunit]
    , ["scope" <$$> _triggerCHOPscope]
    , ["srselect" <$$> _triggerCHOPsrselect]
    , [("exporttable",) . ResolveP <$> _triggerCHOPexporttable]
    , ["retriggerunit" <$$> _triggerCHOPretriggerunit]
    , ["multitriggeradd" <$$> _triggerCHOPmultitriggeradd]
    , ["retrigger" <$$> _triggerCHOPretrigger]
    , ["triggeron" <$$> _triggerCHOPtriggeron]
    , ["sustain" <$$> _triggerCHOPsustain]
    , ["threshup" <$$> _triggerCHOPthreshup]
    , ["remainder" <$$> _triggerCHOPremainder]
    , ["rate" <$$> _triggerCHOPrate]
    , ["mintriggerunit" <$$> _triggerCHOPmintriggerunit]
    , ["threshold" <$$> _triggerCHOPthreshold]
    , ["dshape" <$$> _triggerCHOPdshape]
    , ["delay" <$$> _triggerCHOPdelay]
    , ["rshape" <$$> _triggerCHOPrshape]
    , ["release" <$$> _triggerCHOPrelease]
    , ["complete" <$$> _triggerCHOPcomplete]
    , ["decayunit" <$$> _triggerCHOPdecayunit]
    , ["releaseunit" <$$> _triggerCHOPreleaseunit]
    , ["attackunit" <$$> _triggerCHOPattackunit]
    , ["attack" <$$> _triggerCHOPattack]
    , ["peaklen" <$$> _triggerCHOPpeaklen]
    , ["mintrigger" <$$> _triggerCHOPmintrigger]
    , ["timeslice" <$$> _triggerCHOPtimeslice]
    , ["channame" <$$> _triggerCHOPchanname]
    , ["triggerpulse" <$$> _triggerCHOPtriggerpulse]]
  pars (StretchCHOP {..}) = catMaybes . mconcat $ [ ["interp" <$$> _stretchCHOPinterp]
    , ["start" <$$> _stretchCHOPstart]
    , ["end" <$$> _stretchCHOPend]
    , ["exportmethod" <$$> _stretchCHOPexportmethod]
    , ["reverse" <$$> _stretchCHOPreverse]
    , ["startunit" <$$> _stretchCHOPstartunit]
    , ["scope" <$$> _stretchCHOPscope]
    , ["constarea" <$$> _stretchCHOPconstarea]
    , ["timeslice" <$$> _stretchCHOPtimeslice]
    , ["srselect" <$$> _stretchCHOPsrselect]
    , ["relative" <$$> _stretchCHOPrelative]
    , [("exporttable",) . ResolveP <$> _stretchCHOPexporttable]
    , ["scale" <$$> _stretchCHOPscale]
    , ["endunit" <$$> _stretchCHOPendunit]]
  pars (CplusplusCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _cplusplusCHOPexportmethod]
    , ["reinitpulse" <$$> _cplusplusCHOPreinitpulse]
    , ["srselect" <$$> _cplusplusCHOPsrselect]
    , ["unloadplugin" <$$> _cplusplusCHOPunloadplugin]
    , [("exporttable",) . ResolveP <$> _cplusplusCHOPexporttable]
    , ["plugin" <$$> _cplusplusCHOPplugin]
    , ["timeslice" <$$> _cplusplusCHOPtimeslice]
    , ["scope" <$$> _cplusplusCHOPscope]
    , ["reinit" <$$> _cplusplusCHOPreinit]]
  pars (OscinCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _oscinCHOPresetpulse]
    , ["maxtargetunit" <$$> _oscinCHOPmaxtargetunit]
    , ["active" <$$> _oscinCHOPactive]
    , ["maxqueueunit" <$$> _oscinCHOPmaxqueueunit]
    , ["mintargetunit" <$$> _oscinCHOPmintargetunit]
    , ["port" <$$> _oscinCHOPport]
    , [("exporttable",) . ResolveP <$> _oscinCHOPexporttable]
    , ["maxtarget" <$$> _oscinCHOPmaxtarget]
    , ["exportmethod" <$$> _oscinCHOPexportmethod]
    , ["queued" <$$> _oscinCHOPqueued]
    , ["stripsegments" <$$> _oscinCHOPstripsegments]
    , ["protocol" <$$> _oscinCHOPprotocol]
    , ["scope" <$$> _oscinCHOPscope]
    , ["oscaddressscope" <$$> _oscinCHOPoscaddressscope]
    , ["mintarget" <$$> _oscinCHOPmintarget]
    , ["adjusttimeunit" <$$> _oscinCHOPadjusttimeunit]
    , ["useglobalrate" <$$> _oscinCHOPuseglobalrate]
    , ["srselect" <$$> _oscinCHOPsrselect]
    , ["maxqueue" <$$> _oscinCHOPmaxqueue]
    , ["adjusttime" <$$> _oscinCHOPadjusttime]
    , ["timeslice" <$$> _oscinCHOPtimeslice]
    , ["netaddress" <$$> _oscinCHOPnetaddress]
    , ["reset" <$$> _oscinCHOPreset]
    , ["samplerate" <$$> _oscinCHOPsamplerate]]
  pars (LtcinCHOP {..}) = catMaybes . mconcat $ [ ["debugchans" <$$> _ltcinCHOPdebugchans]
    , ["exportmethod" <$$> _ltcinCHOPexportmethod]
    , ["srselect" <$$> _ltcinCHOPsrselect]
    , ["inputrate" <$$> _ltcinCHOPinputrate]
    , [("exporttable",) . ResolveP <$> _ltcinCHOPexporttable]
    , ["timeslice" <$$> _ltcinCHOPtimeslice]
    , ["scope" <$$> _ltcinCHOPscope]
    , ["userfields" <$$> _ltcinCHOPuserfields]]
  pars (TabletCHOP {..}) = catMaybes . mconcat $ [ ["button22" <$$> _tabletCHOPbutton22]
    , ["exportmethod" <$$> _tabletCHOPexportmethod]
    , ["tanpressure" <$$> _tabletCHOPtanpressure]
    , ["xcoord" <$$> _tabletCHOPxcoord]
    , ["button2" <$$> _tabletCHOPbutton2]
    , ["rotation2" <$$> _tabletCHOProtation2]
    , ["button1" <$$> _tabletCHOPbutton1]
    , ["tanpressure2" <$$> _tabletCHOPtanpressure2]
    , ["zcoord" <$$> _tabletCHOPzcoord]
    , ["left" <$$> _tabletCHOPleft]
    , ["pressure" <$$> _tabletCHOPpressure]
    , ["button25" <$$> _tabletCHOPbutton25]
    , ["pressure2" <$$> _tabletCHOPpressure2]
    , ["ycoord2" <$$> _tabletCHOPycoord2]
    , ["active" <$$> _tabletCHOPactive]
    , ["xtilt2" <$$> _tabletCHOPxtilt2]
    , [("exporttable",) . ResolveP <$> _tabletCHOPexporttable]
    , ["ytilt" <$$> _tabletCHOPytilt]
    , ["button3" <$$> _tabletCHOPbutton3]
    , ["zcoord2" <$$> _tabletCHOPzcoord2]
    , ["defval" <$$> _tabletCHOPdefval]
    , ["xtilt" <$$> _tabletCHOPxtilt]
    , ["button21" <$$> _tabletCHOPbutton21]
    , ["button5" <$$> _tabletCHOPbutton5]
    , ["timeslice" <$$> _tabletCHOPtimeslice]
    , ["rate" <$$> _tabletCHOPrate]
    , ["ytilt2" <$$> _tabletCHOPytilt2]
    , ["button24" <$$> _tabletCHOPbutton24]
    , ["ycoord" <$$> _tabletCHOPycoord]
    , ["rotation" <$$> _tabletCHOProtation]
    , ["srselect" <$$> _tabletCHOPsrselect]
    , ["button4" <$$> _tabletCHOPbutton4]
    , ["xcoord2" <$$> _tabletCHOPxcoord2]
    , ["button23" <$$> _tabletCHOPbutton23]
    , ["scope" <$$> _tabletCHOPscope]
    , ["right" <$$> _tabletCHOPright]]
  pars (EventCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _eventCHOPresetpulse]
    , ["speed" <$$> _eventCHOPspeed]
    , ["active" <$$> _eventCHOPactive]
    , ["exportmethod" <$$> _eventCHOPexportmethod]
    , ["decaytime" <$$> _eventCHOPdecaytime]
    , ["releasetunit" <$$> _eventCHOPreleasetunit]
    , ["adsr" <$$> _eventCHOPadsr]
    , ["sustainmin" <$$> _eventCHOPsustainmin]
    , [("callbacks",) . ResolveP <$> _eventCHOPcallbacks]
    , ["releaselevel" <$$> _eventCHOPreleaselevel]
    , ["releasetime" <$$> _eventCHOPreleasetime]
    , ["sustaintunit" <$$> _eventCHOPsustaintunit]
    , ["id" <$$> _eventCHOPid]
    , ["index" <$$> _eventCHOPindex]
    , ["attacktime" <$$> _eventCHOPattacktime]
    , ["sustaintime" <$$> _eventCHOPsustaintime]
    , ["sustainmax" <$$> _eventCHOPsustainmax]
    , ["resetcondition" <$$> _eventCHOPresetcondition]
    , ["attacklevel" <$$> _eventCHOPattacklevel]
    , ["state" <$$> _eventCHOPstate]
    , ["scope" <$$> _eventCHOPscope]
    , ["globalspeed" <$$> _eventCHOPglobalspeed]
    , ["time" <$$> _eventCHOPtime]
    , ["srselect" <$$> _eventCHOPsrselect]
    , ["reset" <$$> _eventCHOPreset]
    , ["attacktunit" <$$> _eventCHOPattacktunit]
    , [("exporttable",) . ResolveP <$> _eventCHOPexporttable]
    , ["decaytunit" <$$> _eventCHOPdecaytunit]
    , ["timeslice" <$$> _eventCHOPtimeslice]
    , ["input" <$$> _eventCHOPinput]]
  pars (TouchinCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _touchinCHOPexportmethod]
    , ["active" <$$> _touchinCHOPactive]
    , ["recover" <$$> _touchinCHOPrecover]
    , ["protocol" <$$> _touchinCHOPprotocol]
    , ["queuevarianceunit" <$$> _touchinCHOPqueuevarianceunit]
    , ["maxqueueunit" <$$> _touchinCHOPmaxqueueunit]
    , ["address" <$$> _touchinCHOPaddress]
    , ["scope" <$$> _touchinCHOPscope]
    , [("exporttable",) . ResolveP <$> _touchinCHOPexporttable]
    , ["adjusttimeunit" <$$> _touchinCHOPadjusttimeunit]
    , ["queuetarget" <$$> _touchinCHOPqueuetarget]
    , ["queuetargetunit" <$$> _touchinCHOPqueuetargetunit]
    , ["srselect" <$$> _touchinCHOPsrselect]
    , ["maxqueue" <$$> _touchinCHOPmaxqueue]
    , ["adjusttime" <$$> _touchinCHOPadjusttime]
    , ["port" <$$> _touchinCHOPport]
    , ["timeslice" <$$> _touchinCHOPtimeslice]
    , ["syncports" <$$> _touchinCHOPsyncports]
    , ["queuevariance" <$$> _touchinCHOPqueuevariance]]
  pars (HogCHOP {..}) = catMaybes . mconcat $ [ ["delay" <$$> _hogCHOPdelay]
    , ["exportmethod" <$$> _hogCHOPexportmethod]
    , ["delayunit" <$$> _hogCHOPdelayunit]
    , ["active" <$$> _hogCHOPactive]
    , ["srselect" <$$> _hogCHOPsrselect]
    , ["cookalways" <$$> _hogCHOPcookalways]
    , ["timeslice" <$$> _hogCHOPtimeslice]
    , ["scope" <$$> _hogCHOPscope]
    , [("exporttable",) . ResolveP <$> _hogCHOPexporttable]]
  pars (PatternCHOP {..}) = catMaybes . mconcat $ [ ["reverse" <$$> _patternCHOPreverse]
    , ["phasestep" <$$> _patternCHOPphasestep]
    , ["integer" <$$> _patternCHOPinteger]
    , ["bias" <$$> _patternCHOPbias]
    , ["taper1" <$$> _patternCHOPtaper1]
    , ["timeslice" <$$> _patternCHOPtimeslice]
    , ["defval" <$$> _patternCHOPdefval]
    , ["wavetype" <$$> _patternCHOPwavetype]
    , ["phase" <$$> _patternCHOPphase]
    , ["fromrange1" <$$> _patternCHOPfromrange1]
    , [("exporttable",) . ResolveP <$> _patternCHOPexporttable]
    , ["taper2" <$$> _patternCHOPtaper2]
    , ["exportmethod" <$$> _patternCHOPexportmethod]
    , ["left" <$$> _patternCHOPleft]
    , ["torange1" <$$> _patternCHOPtorange1]
    , ["fromrange2" <$$> _patternCHOPfromrange2]
    , ["combine" <$$> _patternCHOPcombine]
    , ["channelname" <$$> _patternCHOPchannelname]
    , ["scope" <$$> _patternCHOPscope]
    , ["length" <$$> _patternCHOPlength]
    , ["seed" <$$> _patternCHOPseed]
    , ["srselect" <$$> _patternCHOPsrselect]
    , ["offset" <$$> _patternCHOPoffset]
    , ["numcycles" <$$> _patternCHOPnumcycles]
    , ["amp" <$$> _patternCHOPamp]
    , ["taperdecay" <$$> _patternCHOPtaperdecay]
    , ["right" <$$> _patternCHOPright]
    , ["rate" <$$> _patternCHOPrate]
    , ["torange2" <$$> _patternCHOPtorange2]]
  pars (AudiorenderCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _audiorenderCHOPexportmethod]
    , ["outputformat" <$$> _audiorenderCHOPoutputformat]
    , ["active" <$$> _audiorenderCHOPactive]
    , ["timeslice" <$$> _audiorenderCHOPtimeslice]
    , ["scope" <$$> _audiorenderCHOPscope]
    , [("exporttable",) . ResolveP <$> _audiorenderCHOPexporttable]
    , [("mappingtable",) . ResolveP <$> _audiorenderCHOPmappingtable]
    , ["srselect" <$$> _audiorenderCHOPsrselect]
    , ["attenuation" <$$> _audiorenderCHOPattenuation]]
  pars (MidioutCHOP {..}) = catMaybes . mconcat $ [ ["autonoteoff" <$$> _midioutCHOPautonoteoff]
    , ["cookalways" <$$> _midioutCHOPcookalways]
    , ["active" <$$> _midioutCHOPactive]
    , ["exportmethod" <$$> _midioutCHOPexportmethod]
    , ["volumeon" <$$> _midioutCHOPvolumeon]
    , ["controlnorm" <$$> _midioutCHOPcontrolnorm]
    , ["onebased" <$$> _midioutCHOPonebased]
    , ["file" <$$> _midioutCHOPfile]
    , ["notename" <$$> _midioutCHOPnotename]
    , ["controlname" <$$> _midioutCHOPcontrolname]
    , ["controlformat" <$$> _midioutCHOPcontrolformat]
    , ["notenorm" <$$> _midioutCHOPnotenorm]
    , ["pressname" <$$> _midioutCHOPpressname]
    , [("exporttable",) . ResolveP <$> _midioutCHOPexporttable]
    , ["volumeoff" <$$> _midioutCHOPvolumeoff]
    , ["id" <$$> _midioutCHOPid]
    , ["destination" <$$> _midioutCHOPdestination]
    , ["barticks" <$$> _midioutCHOPbarticks]
    , ["pitchname" <$$> _midioutCHOPpitchname]
    , ["scope" <$$> _midioutCHOPscope]
    , ["barname" <$$> _midioutCHOPbarname]
    , ["progname" <$$> _midioutCHOPprogname]
    , [("device",) . ResolveP <$> _midioutCHOPdevice]
    , ["reset" <$$> _midioutCHOPreset]
    , ["writefile" <$$> _midioutCHOPwritefile]
    , ["srselect" <$$> _midioutCHOPsrselect]
    , ["aftername" <$$> _midioutCHOPaftername]
    , ["timeslice" <$$> _midioutCHOPtimeslice]
    , ["startstop" <$$> _midioutCHOPstartstop]
    , ["prefix" <$$> _midioutCHOPprefix]]
  pars (AudiodeviceoutCHOP {..}) = catMaybes . mconcat $ [ ["errormissing" <$$> _audiodeviceoutCHOPerrormissing]
    , ["frontleftcenter" <$$> _audiodeviceoutCHOPfrontleftcenter]
    , ["topfrontright" <$$> _audiodeviceoutCHOPtopfrontright]
    , ["cookalways" <$$> _audiodeviceoutCHOPcookalways]
    , ["active" <$$> _audiodeviceoutCHOPactive]
    , ["topbackcenter" <$$> _audiodeviceoutCHOPtopbackcenter]
    , ["driver" <$$> _audiodeviceoutCHOPdriver]
    , ["topbackleft" <$$> _audiodeviceoutCHOPtopbackleft]
    , ["pan" <$$> _audiodeviceoutCHOPpan]
    , ["bufferlength" <$$> _audiodeviceoutCHOPbufferlength]
    , ["frontright" <$$> _audiodeviceoutCHOPfrontright]
    , ["frontcenter" <$$> _audiodeviceoutCHOPfrontcenter]
    , ["sideright" <$$> _audiodeviceoutCHOPsideright]
    , ["sideleft" <$$> _audiodeviceoutCHOPsideleft]
    , ["frontrightcenter" <$$> _audiodeviceoutCHOPfrontrightcenter]
    , [("exporttable",) . ResolveP <$> _audiodeviceoutCHOPexporttable]
    , ["clampoutput" <$$> _audiodeviceoutCHOPclampoutput]
    , ["exportmethod" <$$> _audiodeviceoutCHOPexportmethod]
    , ["backcenter" <$$> _audiodeviceoutCHOPbackcenter]
    , ["topcenter" <$$> _audiodeviceoutCHOPtopcenter]
    , ["topbackright" <$$> _audiodeviceoutCHOPtopbackright]
    , ["lowfrequency" <$$> _audiodeviceoutCHOPlowfrequency]
    , ["topfrontcenter" <$$> _audiodeviceoutCHOPtopfrontcenter]
    , ["backleft" <$$> _audiodeviceoutCHOPbackleft]
    , ["scope" <$$> _audiodeviceoutCHOPscope]
    , ["frontleft" <$$> _audiodeviceoutCHOPfrontleft]
    , ["topfrontleft" <$$> _audiodeviceoutCHOPtopfrontleft]
    , ["device" <$$> _audiodeviceoutCHOPdevice]
    , ["volume" <$$> _audiodeviceoutCHOPvolume]
    , ["srselect" <$$> _audiodeviceoutCHOPsrselect]
    , ["outputs" <$$> _audiodeviceoutCHOPoutputs]
    , ["timeslice" <$$> _audiodeviceoutCHOPtimeslice]
    , ["backright" <$$> _audiodeviceoutCHOPbackright]]
  pars (SpringCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _springCHOPexportmethod]
    , ["dampingk" <$$> _springCHOPdampingk]
    , [("exporttable",) . ResolveP <$> _springCHOPexporttable]
    , ["initspeed" <$$> _springCHOPinitspeed]
    , ["springk" <$$> _springCHOPspringk]
    , ["scope" <$$> _springCHOPscope]
    , ["srselect" <$$> _springCHOPsrselect]
    , ["condfromchan" <$$> _springCHOPcondfromchan]
    , ["mass" <$$> _springCHOPmass]
    , ["method" <$$> _springCHOPmethod]
    , ["initpos" <$$> _springCHOPinitpos]
    , ["timeslice" <$$> _springCHOPtimeslice]]
  pars (ParameterCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _parameterCHOPexportmethod]
    , ["builtin" <$$> _parameterCHOPbuiltin]
    , ["nameformat" <$$> _parameterCHOPnameformat]
    , [("exporttable",) . ResolveP <$> _parameterCHOPexporttable]
    , ["custom" <$$> _parameterCHOPcustom]
    , ["scope" <$$> _parameterCHOPscope]
    , ["renamefrom" <$$> _parameterCHOPrenamefrom]
    , ["renameto" <$$> _parameterCHOPrenameto]
    , ["srselect" <$$> _parameterCHOPsrselect]
    , ["timeslice" <$$> _parameterCHOPtimeslice]
    , ["parameters" <$$> _parameterCHOPparameters]]
  pars (InterpolateCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _interpolateCHOPexportmethod]
    , ["srselect" <$$> _interpolateCHOPsrselect]
    , ["overlap" <$$> _interpolateCHOPoverlap]
    , [("exporttable",) . ResolveP <$> _interpolateCHOPexporttable]
    , ["blendfunc" <$$> _interpolateCHOPblendfunc]
    , ["timeslice" <$$> _interpolateCHOPtimeslice]
    , ["scope" <$$> _interpolateCHOPscope]
    , ["match" <$$> _interpolateCHOPmatch]]
  pars (OscoutCHOP {..}) = catMaybes . mconcat $ [ ["maxsize" <$$> _oscoutCHOPmaxsize]
    , ["numericformat" <$$> _oscoutCHOPnumericformat]
    , ["cookalways" <$$> _oscoutCHOPcookalways]
    , ["active" <$$> _oscoutCHOPactive]
    , ["sendevents" <$$> _oscoutCHOPsendevents]
    , ["maxsizeunit" <$$> _oscoutCHOPmaxsizeunit]
    , ["protocol" <$$> _oscoutCHOPprotocol]
    , ["maxbytes" <$$> _oscoutCHOPmaxbytes]
    , ["scope" <$$> _oscoutCHOPscope]
    , [("exporttable",) . ResolveP <$> _oscoutCHOPexporttable]
    , ["srselect" <$$> _oscoutCHOPsrselect]
    , ["exportmethod" <$$> _oscoutCHOPexportmethod]
    , ["format" <$$> _oscoutCHOPformat]
    , ["port" <$$> _oscoutCHOPport]
    , ["timeslice" <$$> _oscoutCHOPtimeslice]
    , ["netaddress" <$$> _oscoutCHOPnetaddress]]
  pars (GestureCHOP {..}) = catMaybes . mconcat $ [ ["interp" <$$> _gestureCHOPinterp]
    , ["resetpulse" <$$> _gestureCHOPresetpulse]
    , ["blendunit" <$$> _gestureCHOPblendunit]
    , ["resetcondition" <$$> _gestureCHOPresetcondition]
    , [("exporttable",) . ResolveP <$> _gestureCHOPexporttable]
    , ["speedunit" <$$> _gestureCHOPspeedunit]
    , ["scope" <$$> _gestureCHOPscope]
    , ["blend" <$$> _gestureCHOPblend]
    , ["step" <$$> _gestureCHOPstep]
    , ["numbeats" <$$> _gestureCHOPnumbeats]
    , ["exportmethod" <$$> _gestureCHOPexportmethod]
    , ["playmode" <$$> _gestureCHOPplaymode]
    , ["fitmethod" <$$> _gestureCHOPfitmethod]
    , ["srselect" <$$> _gestureCHOPsrselect]
    , ["stepreset" <$$> _gestureCHOPstepreset]
    , ["timeslice" <$$> _gestureCHOPtimeslice]
    , ["speed" <$$> _gestureCHOPspeed]
    , ["reset" <$$> _gestureCHOPreset]]
  pars (ExtendCHOP {..}) = catMaybes . mconcat $ [ ["defval" <$$> _extendCHOPdefval]
    , ["exportmethod" <$$> _extendCHOPexportmethod]
    , ["left" <$$> _extendCHOPleft]
    , ["srselect" <$$> _extendCHOPsrselect]
    , ["right" <$$> _extendCHOPright]
    , ["timeslice" <$$> _extendCHOPtimeslice]
    , ["scope" <$$> _extendCHOPscope]
    , [("exporttable",) . ResolveP <$> _extendCHOPexporttable]]
  pars (AudioparaeqCHOP {..}) = catMaybes . mconcat $ [ ["frequencyhz3" <$$> _audioparaeqCHOPfrequencyhz3]
    , ["bandwidth1" <$$> _audioparaeqCHOPbandwidth1]
    , ["enableeq3" <$$> _audioparaeqCHOPenableeq3]
    , ["frequencylog2" <$$> _audioparaeqCHOPfrequencylog2]
    , ["frequencyhz2" <$$> _audioparaeqCHOPfrequencyhz2]
    , ["enableeq2" <$$> _audioparaeqCHOPenableeq2]
    , ["enableeq1" <$$> _audioparaeqCHOPenableeq1]
    , [("exporttable",) . ResolveP <$> _audioparaeqCHOPexporttable]
    , ["exportmethod" <$$> _audioparaeqCHOPexportmethod]
    , ["boost3" <$$> _audioparaeqCHOPboost3]
    , ["boost1" <$$> _audioparaeqCHOPboost1]
    , ["bandwidth2" <$$> _audioparaeqCHOPbandwidth2]
    , ["scope" <$$> _audioparaeqCHOPscope]
    , ["bandwidth3" <$$> _audioparaeqCHOPbandwidth3]
    , ["boost2" <$$> _audioparaeqCHOPboost2]
    , ["units" <$$> _audioparaeqCHOPunits]
    , ["frequencyhz1" <$$> _audioparaeqCHOPfrequencyhz1]
    , ["srselect" <$$> _audioparaeqCHOPsrselect]
    , ["frequencylog1" <$$> _audioparaeqCHOPfrequencylog1]
    , ["timeslice" <$$> _audioparaeqCHOPtimeslice]
    , ["drywet" <$$> _audioparaeqCHOPdrywet]
    , ["frequencylog3" <$$> _audioparaeqCHOPfrequencylog3]]
  pars (JoystickCHOP {..}) = catMaybes . mconcat $ [ ["yaxis" <$$> _joystickCHOPyaxis]
    , ["scope" <$$> _joystickCHOPscope]
    , ["defval" <$$> _joystickCHOPdefval]
    , ["axisrange" <$$> _joystickCHOPaxisrange]
    , ["yrotinvert" <$$> _joystickCHOPyrotinvert]
    , ["xaxis" <$$> _joystickCHOPxaxis]
    , [("exporttable",) . ResolveP <$> _joystickCHOPexporttable]
    , ["povarrray" <$$> _joystickCHOPpovarrray]
    , ["slider0" <$$> _joystickCHOPslider0]
    , ["exportmethod" <$$> _joystickCHOPexportmethod]
    , ["left" <$$> _joystickCHOPleft]
    , ["yrot" <$$> _joystickCHOPyrot]
    , ["timeslice" <$$> _joystickCHOPtimeslice]
    , ["rate" <$$> _joystickCHOPrate]
    , ["buttonarray" <$$> _joystickCHOPbuttonarray]
    , ["xrot" <$$> _joystickCHOPxrot]
    , ["zaxis" <$$> _joystickCHOPzaxis]
    , ["povstatearray" <$$> _joystickCHOPpovstatearray]
    , ["slider1" <$$> _joystickCHOPslider1]
    , ["srselect" <$$> _joystickCHOPsrselect]
    , ["connected" <$$> _joystickCHOPconnected]
    , ["axisdeadzone" <$$> _joystickCHOPaxisdeadzone]
    , ["zrot" <$$> _joystickCHOPzrot]
    , ["source" <$$> _joystickCHOPsource]
    , ["right" <$$> _joystickCHOPright]
    , ["yaxisinvert" <$$> _joystickCHOPyaxisinvert]]
  pars (FilterCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _filterCHOPresetpulse]
    , ["type" <$$> _filterCHOPtype]
    , ["effect" <$$> _filterCHOPeffect]
    , [("exporttable",) . ResolveP <$> _filterCHOPexporttable]
    , ["spike" <$$> _filterCHOPspike]
    , ["scope" <$$> _filterCHOPscope]
    , ["width" <$$> _filterCHOPwidth]
    , ["widthunit" <$$> _filterCHOPwidthunit]
    , ["srselect" <$$> _filterCHOPsrselect]
    , ["exportmethod" <$$> _filterCHOPexportmethod]
    , ["ramptolerance" <$$> _filterCHOPramptolerance]
    , ["passes" <$$> _filterCHOPpasses]
    , ["ramprate" <$$> _filterCHOPramprate]
    , ["filterpersample" <$$> _filterCHOPfilterpersample]
    , ["timeslice" <$$> _filterCHOPtimeslice]
    , ["reset" <$$> _filterCHOPreset]]
  pars (AudiofileinCHOP {..}) = catMaybes . mconcat $ [ ["file" <$$> _audiofileinCHOPfile]
    , ["prereadlength" <$$> _audiofileinCHOPprereadlength]
    , ["repeat" <$$> _audiofileinCHOPrepeat]
    , ["cuepulse" <$$> _audiofileinCHOPcuepulse]
    , ["cuepoint" <$$> _audiofileinCHOPcuepoint]
    , ["trim" <$$> _audiofileinCHOPtrim]
    , ["prereadlengthunit" <$$> _audiofileinCHOPprereadlengthunit]
    , ["trimendunit" <$$> _audiofileinCHOPtrimendunit]
    , ["trimstartunit" <$$> _audiofileinCHOPtrimstartunit]
    , ["volume" <$$> _audiofileinCHOPvolume]
    , [("exporttable",) . ResolveP <$> _audiofileinCHOPexporttable]
    , ["speed" <$$> _audiofileinCHOPspeed]
    , ["opentimeout" <$$> _audiofileinCHOPopentimeout]
    , ["index" <$$> _audiofileinCHOPindex]
    , ["exportmethod" <$$> _audiofileinCHOPexportmethod]
    , ["reloadpulse" <$$> _audiofileinCHOPreloadpulse]
    , ["indexunit" <$$> _audiofileinCHOPindexunit]
    , ["scope" <$$> _audiofileinCHOPscope]
    , ["trimend" <$$> _audiofileinCHOPtrimend]
    , ["play" <$$> _audiofileinCHOPplay]
    , ["srselect" <$$> _audiofileinCHOPsrselect]
    , ["trimstart" <$$> _audiofileinCHOPtrimstart]
    , ["playmode" <$$> _audiofileinCHOPplaymode]
    , ["cuepointunit" <$$> _audiofileinCHOPcuepointunit]
    , ["timeslice" <$$> _audiofileinCHOPtimeslice]
    , ["mono" <$$> _audiofileinCHOPmono]
    , ["cue" <$$> _audiofileinCHOPcue]]
  pars (AngleCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _angleCHOPexportmethod]
    , ["inorder" <$$> _angleCHOPinorder]
    , ["srselect" <$$> _angleCHOPsrselect]
    , ["inunit" <$$> _angleCHOPinunit]
    , ["outorder" <$$> _angleCHOPoutorder]
    , ["outunit" <$$> _angleCHOPoutunit]
    , ["timeslice" <$$> _angleCHOPtimeslice]
    , ["scope" <$$> _angleCHOPscope]
    , [("exporttable",) . ResolveP <$> _angleCHOPexporttable]]
  pars (DmxoutCHOP {..}) = catMaybes . mconcat $ [ ["format" <$$> _dmxoutCHOPformat]
    , ["active" <$$> _dmxoutCHOPactive]
    , ["subnet" <$$> _dmxoutCHOPsubnet]
    , ["exportmethod" <$$> _dmxoutCHOPexportmethod]
    , ["serialport" <$$> _dmxoutCHOPserialport]
    , ["scope" <$$> _dmxoutCHOPscope]
    , ["customport" <$$> _dmxoutCHOPcustomport]
    , ["localaddress" <$$> _dmxoutCHOPlocaladdress]
    , ["priority" <$$> _dmxoutCHOPpriority]
    , [("exporttable",) . ResolveP <$> _dmxoutCHOPexporttable]
    , ["source" <$$> _dmxoutCHOPsource]
    , ["interface" <$$> _dmxoutCHOPinterface]
    , ["cid" <$$> _dmxoutCHOPcid]
    , ["rate" <$$> _dmxoutCHOPrate]
    , ["localport" <$$> _dmxoutCHOPlocalport]
    , ["net" <$$> _dmxoutCHOPnet]
    , ["netport" <$$> _dmxoutCHOPnetport]
    , ["universe" <$$> _dmxoutCHOPuniverse]
    , ["sendartsync" <$$> _dmxoutCHOPsendartsync]
    , ["device" <$$> _dmxoutCHOPdevice]
    , ["multicast" <$$> _dmxoutCHOPmulticast]
    , ["srselect" <$$> _dmxoutCHOPsrselect]
    , [("routingtable",) . ResolveP <$> _dmxoutCHOProutingtable]
    , ["timeslice" <$$> _dmxoutCHOPtimeslice]
    , ["netaddress" <$$> _dmxoutCHOPnetaddress]]
  pars (TransformCHOP {..}) = catMaybes . mconcat $ [ ["outrord" <$$> _transformCHOPoutrord]
    , ["usehint" <$$> _transformCHOPusehint]
    , ["custinputorders" <$$> _transformCHOPcustinputorders]
    , ["invertoutput" <$$> _transformCHOPinvertoutput]
    , Just <$> vec3Map' "s" _transformCHOPs
    , ["invertinput" <$$> _transformCHOPinvertinput]
    , ["invert" <$$> _transformCHOPinvert]
    , ["xord" <$$> _transformCHOPxord]
    , Just <$> vec3Map' "r" _transformCHOPr
    , ["exportmethod" <$$> _transformCHOPexportmethod]
    , ["out" <$$> _transformCHOPout]
    , ["matop" <$$> _transformCHOPmatop]
    , ["custoutputorders" <$$> _transformCHOPcustoutputorders]
    , Just <$> vec3Map' "p" _transformCHOPp
    , [("exporttable",) . ResolveP <$> _transformCHOPexporttable]
    , ["scope" <$$> _transformCHOPscope]
    , ["inrord" <$$> _transformCHOPinrord]
    , ["outxord" <$$> _transformCHOPoutxord]
    , ["srselect" <$$> _transformCHOPsrselect]
    , ["rord" <$$> _transformCHOPrord]
    , Just <$> vec3Map' "t" _transformCHOPt
    , ["timeslice" <$$> _transformCHOPtimeslice]
    , Just <$> vec3Map' "hint" _transformCHOPhint
    , ["inxord" <$$> _transformCHOPinxord]]
  pars (OutCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _outCHOPexportmethod]
    , ["label" <$$> _outCHOPlabel]
    , ["srselect" <$$> _outCHOPsrselect]
    , [("exporttable",) . ResolveP <$> _outCHOPexporttable]
    , ["timeslice" <$$> _outCHOPtimeslice]
    , ["scope" <$$> _outCHOPscope]]
  pars (TimesliceCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _timesliceCHOPexportmethod]
    , ["srselect" <$$> _timesliceCHOPsrselect]
    , [("exporttable",) . ResolveP <$> _timesliceCHOPexporttable]
    , ["method" <$$> _timesliceCHOPmethod]
    , ["quatrot" <$$> _timesliceCHOPquatrot]
    , ["timeslice" <$$> _timesliceCHOPtimeslice]
    , ["scope" <$$> _timesliceCHOPscope]]
  pars (SpliceCHOP {..}) = catMaybes . mconcat $ [ ["trimmethod" <$$> _spliceCHOPtrimmethod]
    , ["start" <$$> _spliceCHOPstart]
    , ["timeslice" <$$> _spliceCHOPtimeslice]
    , ["insertlength" <$$> _spliceCHOPinsertlength]
    , ["exportmethod" <$$> _spliceCHOPexportmethod]
    , ["insertunits" <$$> _spliceCHOPinsertunits]
    , ["insertinterp" <$$> _spliceCHOPinsertinterp]
    , ["scope" <$$> _spliceCHOPscope]
    , [("exporttable",) . ResolveP <$> _spliceCHOPexporttable]
    , ["match" <$$> _spliceCHOPmatch]
    , ["outputtrimmed" <$$> _spliceCHOPoutputtrimmed]
    , ["insertmethod" <$$> _spliceCHOPinsertmethod]
    , ["srselect" <$$> _spliceCHOPsrselect]
    , ["direction" <$$> _spliceCHOPdirection]
    , ["trimlength" <$$> _spliceCHOPtrimlength]
    , ["units" <$$> _spliceCHOPunits]
    , ["unmatchedinterp" <$$> _spliceCHOPunmatchedinterp]
    , ["trimlengthunits" <$$> _spliceCHOPtrimlengthunits]]
  pars (SpeedCHOP {..}) = catMaybes . mconcat $ [ ["resetvalue" <$$> _speedCHOPresetvalue]
    , ["resetpulse" <$$> _speedCHOPresetpulse]
    , ["limittype" <$$> _speedCHOPlimittype]
    , ["resetcondition" <$$> _speedCHOPresetcondition]
    , [("exporttable",) . ResolveP <$> _speedCHOPexporttable]
    , ["exportmethod" <$$> _speedCHOPexportmethod]
    , ["scope" <$$> _speedCHOPscope]
    , ["resetonstart" <$$> _speedCHOPresetonstart]
    , ["constant2" <$$> _speedCHOPconstant2]
    , ["srselect" <$$> _speedCHOPsrselect]
    , ["max" <$$> _speedCHOPmax]
    , ["constant3" <$$> _speedCHOPconstant3]
    , ["min" <$$> _speedCHOPmin]
    , ["timeslice" <$$> _speedCHOPtimeslice]
    , ["order" <$$> _speedCHOPorder]
    , ["reset" <$$> _speedCHOPreset]
    , ["constant1" <$$> _speedCHOPconstant1]]
  pars (FileoutCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _fileoutCHOPexportmethod]
    , ["file" <$$> _fileoutCHOPfile]
    , ["srselect" <$$> _fileoutCHOPsrselect]
    , ["active" <$$> _fileoutCHOPactive]
    , [("exporttable",) . ResolveP <$> _fileoutCHOPexporttable]
    , ["interval" <$$> _fileoutCHOPinterval]
    , ["timeslice" <$$> _fileoutCHOPtimeslice]
    , ["scope" <$$> _fileoutCHOPscope]
    , ["write" <$$> _fileoutCHOPwrite]]
  pars (AudioplayCHOP {..}) = catMaybes . mconcat $ [ ["errormissing" <$$> _audioplayCHOPerrormissing]
    , ["mode" <$$> _audioplayCHOPmode]
    , ["cookalways" <$$> _audioplayCHOPcookalways]
    , ["file" <$$> _audioplayCHOPfile]
    , ["frontleftcenter" <$$> _audioplayCHOPfrontleftcenter]
    , ["stereo" <$$> _audioplayCHOPstereo]
    , ["topfrontright" <$$> _audioplayCHOPtopfrontright]
    , ["topbackleft" <$$> _audioplayCHOPtopbackleft]
    , ["frontright" <$$> _audioplayCHOPfrontright]
    , [("datlist",) . ResolveP <$> _audioplayCHOPdatlist]
    , ["frontcenter" <$$> _audioplayCHOPfrontcenter]
    , ["sideright" <$$> _audioplayCHOPsideright]
    , ["sideleft" <$$> _audioplayCHOPsideleft]
    , ["frontrightcenter" <$$> _audioplayCHOPfrontrightcenter]
    , [("exporttable",) . ResolveP <$> _audioplayCHOPexporttable]
    , ["exportmethod" <$$> _audioplayCHOPexportmethod]
    , ["backcenter" <$$> _audioplayCHOPbackcenter]
    , ["topcenter" <$$> _audioplayCHOPtopcenter]
    , ["topbackright" <$$> _audioplayCHOPtopbackright]
    , ["lowfrequency" <$$> _audioplayCHOPlowfrequency]
    , ["specifydevice" <$$> _audioplayCHOPspecifydevice]
    , ["topfrontcenter" <$$> _audioplayCHOPtopfrontcenter]
    , ["backleft" <$$> _audioplayCHOPbackleft]
    , ["scope" <$$> _audioplayCHOPscope]
    , ["frontleft" <$$> _audioplayCHOPfrontleft]
    , ["topbackcenter" <$$> _audioplayCHOPtopbackcenter]
    , ["topfrontleft" <$$> _audioplayCHOPtopfrontleft]
    , ["device" <$$> _audioplayCHOPdevice]
    , ["volume" <$$> _audioplayCHOPvolume]
    , ["srselect" <$$> _audioplayCHOPsrselect]
    , ["trigger" <$$> _audioplayCHOPtrigger]
    , ["outputs" <$$> _audioplayCHOPoutputs]
    , ["timeslice" <$$> _audioplayCHOPtimeslice]
    , ["backright" <$$> _audioplayCHOPbackright]]
  pars (ClockCHOP {..}) = catMaybes . mconcat $ [ ["yday" <$$> _clockCHOPyday]
    , ["longitude2" <$$> _clockCHOPlongitude2]
    , ["output" <$$> _clockCHOPoutput]
    , ["longitude1" <$$> _clockCHOPlongitude1]
    , ["sunphase" <$$> _clockCHOPsunphase]
    , ["wday" <$$> _clockCHOPwday]
    , ["min" <$$> _clockCHOPmin]
    , ["week" <$$> _clockCHOPweek]
    , ["sunrise" <$$> _clockCHOPsunrise]
    , ["sunset" <$$> _clockCHOPsunset]
    , ["houradjust" <$$> _clockCHOPhouradjust]
    , ["eastwest" <$$> _clockCHOPeastwest]
    , ["hourformat" <$$> _clockCHOPhourformat]
    , [("exporttable",) . ResolveP <$> _clockCHOPexporttable]
    , ["sec" <$$> _clockCHOPsec]
    , ["hour" <$$> _clockCHOPhour]
    , ["exportmethod" <$$> _clockCHOPexportmethod]
    , ["declination" <$$> _clockCHOPdeclination]
    , ["year" <$$> _clockCHOPyear]
    , ["timeslice" <$$> _clockCHOPtimeslice]
    , ["latitude1" <$$> _clockCHOPlatitude1]
    , ["scope" <$$> _clockCHOPscope]
    , ["month" <$$> _clockCHOPmonth]
    , ["northsouth" <$$> _clockCHOPnorthsouth]
    , ["startref" <$$> _clockCHOPstartref]
    , ["srselect" <$$> _clockCHOPsrselect]
    , ["latitude2" <$$> _clockCHOPlatitude2]
    , ["day" <$$> _clockCHOPday]
    , ["msec" <$$> _clockCHOPmsec]
    , ["ampm" <$$> _clockCHOPampm]
    , ["moonphase" <$$> _clockCHOPmoonphase]]
  pars (ScurveCHOP {..}) = catMaybes . mconcat $ [ ["bias" <$$> _scurveCHOPbias]
    , ["append" <$$> _scurveCHOPappend]
    , ["prepend" <$$> _scurveCHOPprepend]
    , ["defval" <$$> _scurveCHOPdefval]
    , ["fromrange1" <$$> _scurveCHOPfromrange1]
    , ["linearize" <$$> _scurveCHOPlinearize]
    , [("exporttable",) . ResolveP <$> _scurveCHOPexporttable]
    , ["length" <$$> _scurveCHOPlength]
    , ["exportmethod" <$$> _scurveCHOPexportmethod]
    , ["left" <$$> _scurveCHOPleft]
    , ["type" <$$> _scurveCHOPtype]
    , ["torange1" <$$> _scurveCHOPtorange1]
    , ["fromrange2" <$$> _scurveCHOPfromrange2]
    , ["right" <$$> _scurveCHOPright]
    , ["channelname" <$$> _scurveCHOPchannelname]
    , ["scope" <$$> _scurveCHOPscope]
    , ["srselect" <$$> _scurveCHOPsrselect]
    , ["steepness" <$$> _scurveCHOPsteepness]
    , ["timeslice" <$$> _scurveCHOPtimeslice]
    , ["rate" <$$> _scurveCHOPrate]
    , ["torange2" <$$> _scurveCHOPtorange2]]
  pars (HandleCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _handleCHOPexportmethod]
    , ["preroll" <$$> _handleCHOPpreroll]
    , [("exporttable",) . ResolveP <$> _handleCHOPexporttable]
    , ["iterations" <$$> _handleCHOPiterations]
    , ["scope" <$$> _handleCHOPscope]
    , ["init" <$$> _handleCHOPinit]
    , ["srselect" <$$> _handleCHOPsrselect]
    , ["timeslice" <$$> _handleCHOPtimeslice]
    , ["delta" <$$> _handleCHOPdelta]]
  pars (ShiftCHOP {..}) = catMaybes . mconcat $ [ ["start" <$$> _shiftCHOPstart]
    , ["end" <$$> _shiftCHOPend]
    , ["exportmethod" <$$> _shiftCHOPexportmethod]
    , ["startunit" <$$> _shiftCHOPstartunit]
    , ["reference" <$$> _shiftCHOPreference]
    , ["scope" <$$> _shiftCHOPscope]
    , [("exporttable",) . ResolveP <$> _shiftCHOPexporttable]
    , ["timeslice" <$$> _shiftCHOPtimeslice]
    , ["srselect" <$$> _shiftCHOPsrselect]
    , ["relative" <$$> _shiftCHOPrelative]
    , ["scrollunit" <$$> _shiftCHOPscrollunit]
    , ["endunit" <$$> _shiftCHOPendunit]
    , ["scroll" <$$> _shiftCHOPscroll]]
  pars (ExpressionCHOP {..}) = catMaybes . mconcat $ [ ["expr4" <$$> _expressionCHOPexpr4]
    , ["exportmethod" <$$> _expressionCHOPexportmethod]
    , ["expr2" <$$> _expressionCHOPexpr2]
    , ["chanperexpr" <$$> _expressionCHOPchanperexpr]
    , ["expr3" <$$> _expressionCHOPexpr3]
    , ["numexpr" <$$> _expressionCHOPnumexpr]
    , ["expr1" <$$> _expressionCHOPexpr1]
    , ["scope" <$$> _expressionCHOPscope]
    , [("exporttable",) . ResolveP <$> _expressionCHOPexporttable]
    , ["expr5" <$$> _expressionCHOPexpr5]
    , ["srselect" <$$> _expressionCHOPsrselect]
    , ["limitexpr" <$$> _expressionCHOPlimitexpr]
    , ["limitnum" <$$> _expressionCHOPlimitnum]
    , ["timeslice" <$$> _expressionCHOPtimeslice]
    , ["expr0" <$$> _expressionCHOPexpr0]]
  pars (MergeCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _mergeCHOPexportmethod]
    , ["srselect" <$$> _mergeCHOPsrselect]
    , ["duplicate" <$$> _mergeCHOPduplicate]
    , ["align" <$$> _mergeCHOPalign]
    , [("exporttable",) . ResolveP <$> _mergeCHOPexporttable]
    , ["timeslice" <$$> _mergeCHOPtimeslice]
    , ["scope" <$$> _mergeCHOPscope]]
  pars (CopyCHOP {..}) = catMaybes . mconcat $ [ ["output" <$$> _copyCHOPoutput]
    , ["param4" <$$> _copyCHOPparam4]
    , ["val1" <$$> _copyCHOPval1]
    , ["param8" <$$> _copyCHOPparam8]
    , ["val6" <$$> _copyCHOPval6]
    , ["param10" <$$> _copyCHOPparam10]
    , ["scope" <$$> _copyCHOPscope]
    , ["remainder" <$$> _copyCHOPremainder]
    , ["keep" <$$> _copyCHOPkeep]
    , ["param2" <$$> _copyCHOPparam2]
    , ["val9" <$$> _copyCHOPval9]
    , ["val3" <$$> _copyCHOPval3]
    , ["param1" <$$> _copyCHOPparam1]
    , ["param3" <$$> _copyCHOPparam3]
    , [("exporttable",) . ResolveP <$> _copyCHOPexporttable]
    , ["val5" <$$> _copyCHOPval5]
    , ["exportmethod" <$$> _copyCHOPexportmethod]
    , ["param5" <$$> _copyCHOPparam5]
    , ["cook" <$$> _copyCHOPcook]
    , ["param6" <$$> _copyCHOPparam6]
    , ["val10" <$$> _copyCHOPval10]
    , ["threshold" <$$> _copyCHOPthreshold]
    , ["param9" <$$> _copyCHOPparam9]
    , ["val7" <$$> _copyCHOPval7]
    , ["val8" <$$> _copyCHOPval8]
    , ["param7" <$$> _copyCHOPparam7]
    , ["val4" <$$> _copyCHOPval4]
    , ["val2" <$$> _copyCHOPval2]
    , ["srselect" <$$> _copyCHOPsrselect]
    , ["method" <$$> _copyCHOPmethod]
    , ["timeslice" <$$> _copyCHOPtimeslice]]
  pars (KinectCHOP {..}) = catMaybes . mconcat $ [ ["prediction" <$$> _kinectCHOPprediction]
    , ["active" <$$> _kinectCHOPactive]
    , ["smoothing" <$$> _kinectCHOPsmoothing]
    , ["colorspace" <$$> _kinectCHOPcolorspace]
    , ["jointsmoothing" <$$> _kinectCHOPjointsmoothing]
    , ["flipfaceu" <$$> _kinectCHOPflipfaceu]
    , ["worldspace" <$$> _kinectCHOPworldspace]
    , ["rotationsmoothing" <$$> _kinectCHOProtationsmoothing]
    , ["scope" <$$> _kinectCHOPscope]
    , ["correction" <$$> _kinectCHOPcorrection]
    , ["skeleton" <$$> _kinectCHOPskeleton]
    , ["maxplayers" <$$> _kinectCHOPmaxplayers]
    , ["interactions" <$$> _kinectCHOPinteractions]
    , [("exporttable",) . ResolveP <$> _kinectCHOPexporttable]
    , ["facetracking" <$$> _kinectCHOPfacetracking]
    , ["sensor" <$$> _kinectCHOPsensor]
    , ["exportmethod" <$$> _kinectCHOPexportmethod]
    , ["depthspace" <$$> _kinectCHOPdepthspace]
    , ["unrollbones" <$$> _kinectCHOPunrollbones]
    , ["jitterrad" <$$> _kinectCHOPjitterrad]
    , ["hwversion" <$$> _kinectCHOPhwversion]
    , ["relbonerotations" <$$> _kinectCHOPrelbonerotations]
    , ["maxdevrad" <$$> _kinectCHOPmaxdevrad]
    , ["absbonerotations" <$$> _kinectCHOPabsbonerotations]
    , ["srselect" <$$> _kinectCHOPsrselect]
    , ["flipskelu" <$$> _kinectCHOPflipskelu]
    , ["bonelengths" <$$> _kinectCHOPbonelengths]
    , ["statuschans" <$$> _kinectCHOPstatuschans]
    , ["timeslice" <$$> _kinectCHOPtimeslice]
    , ["neardepthmode" <$$> _kinectCHOPneardepthmode]]
  pars (InCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _inCHOPexportmethod]
    , ["specifynum" <$$> _inCHOPspecifynum]
    , ["label" <$$> _inCHOPlabel]
    , ["srselect" <$$> _inCHOPsrselect]
    , ["numchannels" <$$> _inCHOPnumchannels]
    , [("exporttable",) . ResolveP <$> _inCHOPexporttable]
    , ["timeslice" <$$> _inCHOPtimeslice]
    , ["scope" <$$> _inCHOPscope]
    , ["channames" <$$> _inCHOPchannames]]
  pars (TimerCHOP {..}) = catMaybes . mconcat $ [ ["outdonepulse" <$$> _timerCHOPoutdonepulse]
    , ["outtimerpulse" <$$> _timerCHOPouttimerpulse]
    , ["outcyclepulse" <$$> _timerCHOPoutcyclepulse]
    , ["outdelayfraction" <$$> _timerCHOPoutdelayfraction]
    , ["cueunits" <$$> _timerCHOPcueunits]
    , ["outfraction" <$$> _timerCHOPoutfraction]
    , ["outdone" <$$> _timerCHOPoutdone]
    , ["outsegplusfraction" <$$> _timerCHOPoutsegplusfraction]
    , ["cycle" <$$> _timerCHOPcycle]
    , ["cyclelimit" <$$> _timerCHOPcyclelimit]
    , ["outsegpulse" <$$> _timerCHOPoutsegpulse]
    , ["infocolumns" <$$> _timerCHOPinfocolumns]
    , ["outready" <$$> _timerCHOPoutready]
    , ["outseg" <$$> _timerCHOPoutseg]
    , ["delay" <$$> _timerCHOPdelay]
    , ["cycleendalert" <$$> _timerCHOPcycleendalert]
    , ["delayunits" <$$> _timerCHOPdelayunits]
    , ["outtimeractive" <$$> _timerCHOPouttimeractive]
    , ["initialize" <$$> _timerCHOPinitialize]
    , ["outcycle" <$$> _timerCHOPoutcycle]
    , ["outrunningcount" <$$> _timerCHOPoutrunningcount]
    , ["rate" <$$> _timerCHOPrate]
    , ["channelcolumns" <$$> _timerCHOPchannelcolumns]
    , ["lengthunits" <$$> _timerCHOPlengthunits]
    , ["length" <$$> _timerCHOPlength]
    , ["play" <$$> _timerCHOPplay]
    , ["srselect" <$$> _timerCHOPsrselect]
    , ["outinit" <$$> _timerCHOPoutinit]
    , ["notifyunits" <$$> _timerCHOPnotifyunits]
    , ["segunits" <$$> _timerCHOPsegunits]
    , ["timeslice" <$$> _timerCHOPtimeslice]
    , ["cuepulse" <$$> _timerCHOPcuepulse]
    , ["ondone" <$$> _timerCHOPondone]
    , ["speed" <$$> _timerCHOPspeed]
    , ["active" <$$> _timerCHOPactive]
    , ["exitendcycle" <$$> _timerCHOPexitendcycle]
    , ["cuepoint" <$$> _timerCHOPcuepoint]
    , ["interpolation" <$$> _timerCHOPinterpolation]
    , ["gotonextseg" <$$> _timerCHOPgotonextseg]
    , ["scope" <$$> _timerCHOPscope]
    , ["start" <$$> _timerCHOPstart]
    , ["outrunning" <$$> _timerCHOPoutrunning]
    , ["outcycleplusfraction" <$$> _timerCHOPoutcycleplusfraction]
    , ["outcumulativecount" <$$> _timerCHOPoutcumulativecount]
    , [("segdat",) . ResolveP <$> _timerCHOPsegdat]
    , ["gotoprevseg" <$$> _timerCHOPgotoprevseg]
    , ["outtimercount" <$$> _timerCHOPouttimercount]
    , ["datoutput" <$$> _timerCHOPdatoutput]
    , ["exportmethod" <$$> _timerCHOPexportmethod]
    , ["gotoendcycle" <$$> _timerCHOPgotoendcycle]
    , [("exporttable",) . ResolveP <$> _timerCHOPexporttable]
    , ["outreadypulse" <$$> _timerCHOPoutreadypulse]
    , ["maxcycles" <$$> _timerCHOPmaxcycles]
    , ["segmethod" <$$> _timerCHOPsegmethod]
    , ["gotodone" <$$> _timerCHOPgotodone]
    , ["playmode" <$$> _timerCHOPplaymode]
    , [("callbacks",) . ResolveP <$> _timerCHOPcallbacks]
    , ["outdelaycount" <$$> _timerCHOPoutdelaycount]
    , ["cue" <$$> _timerCHOPcue]]
  pars (SharedmeminCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _sharedmeminCHOPexportmethod]
    , ["srselect" <$$> _sharedmeminCHOPsrselect]
    , ["active" <$$> _sharedmeminCHOPactive]
    , ["memtype" <$$> _sharedmeminCHOPmemtype]
    , [("exporttable",) . ResolveP <$> _sharedmeminCHOPexporttable]
    , ["timeslice" <$$> _sharedmeminCHOPtimeslice]
    , ["scope" <$$> _sharedmeminCHOPscope]
    , ["name" <$$> _sharedmeminCHOPname]]
  pars (KeyframeCHOP {..}) = catMaybes . mconcat $ [ ["defval" <$$> _keyframeCHOPdefval]
    , [("animation",) . ResolveP <$> _keyframeCHOPanimation]
    , ["left" <$$> _keyframeCHOPleft]
    , ["srselect" <$$> _keyframeCHOPsrselect]
    , ["exportmethod" <$$> _keyframeCHOPexportmethod]
    , ["timeslice" <$$> _keyframeCHOPtimeslice]
    , ["rate" <$$> _keyframeCHOPrate]
    , ["right" <$$> _keyframeCHOPright]
    , ["scope" <$$> _keyframeCHOPscope]
    , [("exporttable",) . ResolveP <$> _keyframeCHOPexporttable]]
  pars (MidiinCHOP {..}) = catMaybes . mconcat $ [ ["exmsg9" <$$> _midiinCHOPexmsg9]
    , ["exname2" <$$> _midiinCHOPexname2]
    , ["exmsg12" <$$> _midiinCHOPexmsg12]
    , ["notenorm" <$$> _midiinCHOPnotenorm]
    , ["exportmethod" <$$> _midiinCHOPexportmethod]
    , ["exname4" <$$> _midiinCHOPexname4]
    , ["active" <$$> _midiinCHOPactive]
    , ["exmsg10" <$$> _midiinCHOPexmsg10]
    , ["onebased" <$$> _midiinCHOPonebased]
    , ["exname1" <$$> _midiinCHOPexname1]
    , ["scope" <$$> _midiinCHOPscope]
    , ["file" <$$> _midiinCHOPfile]
    , ["prefix" <$$> _midiinCHOPprefix]
    , ["format" <$$> _midiinCHOPformat]
    , ["pressname" <$$> _midiinCHOPpressname]
    , [("exporttable",) . ResolveP <$> _midiinCHOPexporttable]
    , ["exmsg8" <$$> _midiinCHOPexmsg8]
    , ["simplified" <$$> _midiinCHOPsimplified]
    , ["recordtype" <$$> _midiinCHOPrecordtype]
    , ["exmsg4" <$$> _midiinCHOPexmsg4]
    , ["exmsg5" <$$> _midiinCHOPexmsg5]
    , ["left" <$$> _midiinCHOPleft]
    , ["exname10" <$$> _midiinCHOPexname10]
    , ["endunit" <$$> _midiinCHOPendunit]
    , ["exmsg11" <$$> _midiinCHOPexmsg11]
    , ["exname5" <$$> _midiinCHOPexname5]
    , ["right" <$$> _midiinCHOPright]
    , ["songpos" <$$> _midiinCHOPsongpos]
    , ["timeslice" <$$> _midiinCHOPtimeslice]
    , ["barname" <$$> _midiinCHOPbarname]
    , ["exmsg2" <$$> _midiinCHOPexmsg2]
    , ["srselect" <$$> _midiinCHOPsrselect]
    , ["notemeth" <$$> _midiinCHOPnotemeth]
    , ["exname12" <$$> _midiinCHOPexname12]
    , ["exmsg1" <$$> _midiinCHOPexmsg1]
    , ["exname11" <$$> _midiinCHOPexname11]
    , ["velname" <$$> _midiinCHOPvelname]
    , ["rate" <$$> _midiinCHOPrate]
    , ["exmsg7" <$$> _midiinCHOPexmsg7]
    , ["resetpulse" <$$> _midiinCHOPresetpulse]
    , ["end" <$$> _midiinCHOPend]
    , ["exname3" <$$> _midiinCHOPexname3]
    , ["timerperiod" <$$> _midiinCHOPtimerperiod]
    , ["pulsename" <$$> _midiinCHOPpulsename]
    , ["exmsg3" <$$> _midiinCHOPexmsg3]
    , ["start" <$$> _midiinCHOPstart]
    , ["exname9" <$$> _midiinCHOPexname9]
    , ["notescope" <$$> _midiinCHOPnotescope]
    , ["controltype" <$$> _midiinCHOPcontroltype]
    , ["defval" <$$> _midiinCHOPdefval]
    , ["exmsg6" <$$> _midiinCHOPexmsg6]
    , ["notename" <$$> _midiinCHOPnotename]
    , ["controlname" <$$> _midiinCHOPcontrolname]
    , ["ticks" <$$> _midiinCHOPticks]
    , ["barmsg" <$$> _midiinCHOPbarmsg]
    , ["startunit" <$$> _midiinCHOPstartunit]
    , ["velocity" <$$> _midiinCHOPvelocity]
    , ["source" <$$> _midiinCHOPsource]
    , ["id" <$$> _midiinCHOPid]
    , ["exname8" <$$> _midiinCHOPexname8]
    , ["barperiod" <$$> _midiinCHOPbarperiod]
    , ["pitchname" <$$> _midiinCHOPpitchname]
    , ["exname7" <$$> _midiinCHOPexname7]
    , ["entire" <$$> _midiinCHOPentire]
    , ["barstart" <$$> _midiinCHOPbarstart]
    , ["controlind" <$$> _midiinCHOPcontrolind]
    , ["norm" <$$> _midiinCHOPnorm]
    , ["rampname" <$$> _midiinCHOPrampname]
    , ["progname" <$$> _midiinCHOPprogname]
    , ["channel" <$$> _midiinCHOPchannel]
    , [("device",) . ResolveP <$> _midiinCHOPdevice]
    , ["record" <$$> _midiinCHOPrecord]
    , ["aftername" <$$> _midiinCHOPaftername]
    , ["timerstart" <$$> _midiinCHOPtimerstart]
    , ["unwrap" <$$> _midiinCHOPunwrap]
    , ["reset" <$$> _midiinCHOPreset]
    , ["exname6" <$$> _midiinCHOPexname6]]
  pars (DelayCHOP {..}) = catMaybes . mconcat $ [ ["delay" <$$> _delayCHOPdelay]
    , ["exportmethod" <$$> _delayCHOPexportmethod]
    , ["delayunit" <$$> _delayCHOPdelayunit]
    , [("exporttable",) . ResolveP <$> _delayCHOPexporttable]
    , ["srselect" <$$> _delayCHOPsrselect]
    , ["maxdelay" <$$> _delayCHOPmaxdelay]
    , ["timeslice" <$$> _delayCHOPtimeslice]
    , ["scope" <$$> _delayCHOPscope]
    , ["maxdelayunit" <$$> _delayCHOPmaxdelayunit]]
  pars (RenderpickCHOP {..}) = catMaybes . mconcat $ [ ["position" <$$> _renderpickCHOPposition]
    , ["depth" <$$> _renderpickCHOPdepth]
    , ["picku" <$$> _renderpickCHOPpicku]
    , ["exportmethod" <$$> _renderpickCHOPexportmethod]
    , ["color" <$$> _renderpickCHOPcolor]
    , ["customattrib2type" <$$> _renderpickCHOPcustomattrib2type]
    , ["pickradstep" <$$> _renderpickCHOPpickradstep]
    , ["customattrib1" <$$> _renderpickCHOPcustomattrib1]
    , ["customattrib2" <$$> _renderpickCHOPcustomattrib2]
    , ["pickv" <$$> _renderpickCHOPpickv]
    , ["clearprev" <$$> _renderpickCHOPclearprev]
    , ["path" <$$> _renderpickCHOPpath]
    , ["select" <$$> _renderpickCHOPselect]
    , ["activatecallbacks" <$$> _renderpickCHOPactivatecallbacks]
    , ["scope" <$$> _renderpickCHOPscope]
    , ["panel" <$$> _renderpickCHOPpanel]
    , [("callbacks",) . ResolveP <$> _renderpickCHOPcallbacks]
    , ["pickradius" <$$> _renderpickCHOPpickradius]
    , ["customattrib1type" <$$> _renderpickCHOPcustomattrib1type]
    , ["panelvalue" <$$> _renderpickCHOPpanelvalue]
    , ["pickcirstep" <$$> _renderpickCHOPpickcirstep]
    , ["customattrib3type" <$$> _renderpickCHOPcustomattrib3type]
    , ["customattrib3" <$$> _renderpickCHOPcustomattrib3]
    , ["timeslice" <$$> _renderpickCHOPtimeslice]
    , ["strategy" <$$> _renderpickCHOPstrategy]
    , ["uv" <$$> _renderpickCHOPuv]
    , [("exporttable",) . ResolveP <$> _renderpickCHOPexporttable]
    , [("rendertop",) . ResolveP <$> _renderpickCHOPrendertop]
    , ["usepickableflags" <$$> _renderpickCHOPusepickableflags]
    , ["srselect" <$$> _renderpickCHOPsrselect]
    , ["customattrib4" <$$> _renderpickCHOPcustomattrib4]
    , ["instanceid" <$$> _renderpickCHOPinstanceid]
    , ["customattrib4type" <$$> _renderpickCHOPcustomattrib4type]
    , ["responsetime" <$$> _renderpickCHOPresponsetime]
    , ["includenonpickable" <$$> _renderpickCHOPincludenonpickable]
    , ["normal" <$$> _renderpickCHOPnormal]
    , ["pickingby" <$$> _renderpickCHOPpickingby]]
  pars (ReplaceCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _replaceCHOPexportmethod]
    , ["srselect" <$$> _replaceCHOPsrselect]
    , ["notify" <$$> _replaceCHOPnotify]
    , [("exporttable",) . ResolveP <$> _replaceCHOPexporttable]
    , ["timeslice" <$$> _replaceCHOPtimeslice]
    , ["length" <$$> _replaceCHOPlength]
    , ["scope" <$$> _replaceCHOPscope]]
  pars (CountCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _countCHOPresetpulse]
    , ["threshdown" <$$> _countCHOPthreshdown]
    , ["ontooff" <$$> _countCHOPontooff]
    , ["output" <$$> _countCHOPoutput]
    , ["limitmin" <$$> _countCHOPlimitmin]
    , ["offtoon" <$$> _countCHOPofftoon]
    , ["scope" <$$> _countCHOPscope]
    , ["exportmethod" <$$> _countCHOPexportmethod]
    , ["limitmax" <$$> _countCHOPlimitmax]
    , [("exporttable",) . ResolveP <$> _countCHOPexporttable]
    , ["retriggerunit" <$$> _countCHOPretriggerunit]
    , ["resetvalue" <$$> _countCHOPresetvalue]
    , ["retrigger" <$$> _countCHOPretrigger]
    , ["triggeron" <$$> _countCHOPtriggeron]
    , ["threshup" <$$> _countCHOPthreshup]
    , ["resetcondition" <$$> _countCHOPresetcondition]
    , ["on" <$$> _countCHOPon]
    , ["off" <$$> _countCHOPoff]
    , ["threshold" <$$> _countCHOPthreshold]
    , ["srselect" <$$> _countCHOPsrselect]
    , ["timeslice" <$$> _countCHOPtimeslice]
    , ["reset" <$$> _countCHOPreset]]
  pars (OculusaudioCHOP {..}) = catMaybes . mconcat $ [ Just <$> vec3Map' "roomsize" _oculusaudioCHOProomsize
    , ["active" <$$> _oculusaudioCHOPactive]
    , ["exportmethod" <$$> _oculusaudioCHOPexportmethod]
    , ["bandhint" <$$> _oculusaudioCHOPbandhint]
    , ["maxrange" <$$> _oculusaudioCHOPmaxrange]
    , ["attenuation" <$$> _oculusaudioCHOPattenuation]
    , ["reflectrevert" <$$> _oculusaudioCHOPreflectrevert]
    , [("exporttable",) . ResolveP <$> _oculusaudioCHOPexporttable]
    , ["roomleftrelfect" <$$> _oculusaudioCHOProomleftrelfect]
    , ["boxroommode" <$$> _oculusaudioCHOPboxroommode]
    , ["attenuationscale" <$$> _oculusaudioCHOPattenuationscale]
    , ["roomrightrelfect" <$$> _oculusaudioCHOProomrightrelfect]
    , ["roombackrelfect" <$$> _oculusaudioCHOProombackrelfect]
    , ["scope" <$$> _oculusaudioCHOPscope]
    , ["roomtoprelfect" <$$> _oculusaudioCHOProomtoprelfect]
    , ["srselect" <$$> _oculusaudioCHOPsrselect]
    , ["minrange" <$$> _oculusaudioCHOPminrange]
    , ["roomfrontrelfect" <$$> _oculusaudioCHOProomfrontrelfect]
    , ["timeslice" <$$> _oculusaudioCHOPtimeslice]
    , ["diameter" <$$> _oculusaudioCHOPdiameter]
    , ["roombottomrelfect" <$$> _oculusaudioCHOProombottomrelfect]]
  pars (ClipCHOP {..}) = catMaybes . mconcat $ [ ["transtion" <$$> _clipCHOPtranstion]
    , ["blendtime" <$$> _clipCHOPblendtime]
    , ["exportmethod" <$$> _clipCHOPexportmethod]
    , ["rord" <$$> _clipCHOPrord]
    , ["nblendtimeunit" <$$> _clipCHOPnblendtimeunit]
    , [("callbacks",) . ResolveP <$> _clipCHOPcallbacks]
    , ["indexchannel" <$$> _clipCHOPindexchannel]
    , ["pauseend" <$$> _clipCHOPpauseend]
    , [("exporttable",) . ResolveP <$> _clipCHOPexporttable]
    , [("rdat",) . ResolveP <$> _clipCHOPrdat]
    , ["next" <$$> _clipCHOPnext]
    , ["nblendtime" <$$> _clipCHOPnblendtime]
    , ["abspos" <$$> _clipCHOPabspos]
    , ["scope" <$$> _clipCHOPscope]
    , ["looprelease" <$$> _clipCHOPlooprelease]
    , ["srselect" <$$> _clipCHOPsrselect]
    , ["blendtimeunit" <$$> _clipCHOPblendtimeunit]
    , ["loopactive" <$$> _clipCHOPloopactive]
    , ["rottype" <$$> _clipCHOProttype]
    , ["timeslice" <$$> _clipCHOPtimeslice]
    , ["reload" <$$> _clipCHOPreload]]
  pars (AudiospectrumCHOP {..}) = catMaybes . mconcat $ [ ["mode" <$$> _audiospectrumCHOPmode]
    , ["outputmenu" <$$> _audiospectrumCHOPoutputmenu]
    , ["exportmethod" <$$> _audiospectrumCHOPexportmethod]
    , ["highfreqboost" <$$> _audiospectrumCHOPhighfreqboost]
    , [("exporttable",) . ResolveP <$> _audiospectrumCHOPexporttable]
    , ["fftsize" <$$> _audiospectrumCHOPfftsize]
    , ["scope" <$$> _audiospectrumCHOPscope]
    , ["outlength" <$$> _audiospectrumCHOPoutlength]
    , ["srselect" <$$> _audiospectrumCHOPsrselect]
    , ["frequencylog" <$$> _audiospectrumCHOPfrequencylog]
    , ["timeslice" <$$> _audiospectrumCHOPtimeslice]]
  pars (DeleteCHOP {..}) = catMaybes . mconcat $ [ ["selrange2" <$$> _deleteCHOPselrange2]
    , ["deletecomp" <$$> _deleteCHOPdeletecomp]
    , ["onesample" <$$> _deleteCHOPonesample]
    , ["selconst" <$$> _deleteCHOPselconst]
    , ["value1" <$$> _deleteCHOPvalue1]
    , ["value2" <$$> _deleteCHOPvalue2]
    , ["inclvalue1" <$$> _deleteCHOPinclvalue1]
    , ["scope" <$$> _deleteCHOPscope]
    , ["delsamples" <$$> _deleteCHOPdelsamples]
    , ["select" <$$> _deleteCHOPselect]
    , ["compnums" <$$> _deleteCHOPcompnums]
    , ["inclvalue2" <$$> _deleteCHOPinclvalue2]
    , [("exporttable",) . ResolveP <$> _deleteCHOPexporttable]
    , ["discard" <$$> _deleteCHOPdiscard]
    , ["delscope" <$$> _deleteCHOPdelscope]
    , ["exportmethod" <$$> _deleteCHOPexportmethod]
    , ["compchans" <$$> _deleteCHOPcompchans]
    , ["selrange1" <$$> _deleteCHOPselrange1]
    , ["delchannels" <$$> _deleteCHOPdelchannels]
    , ["selnumbers" <$$> _deleteCHOPselnumbers]
    , ["timeslice" <$$> _deleteCHOPtimeslice]
    , ["compmulti" <$$> _deleteCHOPcompmulti]
    , ["srselect" <$$> _deleteCHOPsrselect]
    , ["condition" <$$> _deleteCHOPcondition]
    , ["chanvalue" <$$> _deleteCHOPchanvalue]
    , ["compnames" <$$> _deleteCHOPcompnames]]
  pars (PulseCHOP {..}) = catMaybes . mconcat $ [ ["pulse7" <$$> _pulseCHOPpulse7]
    , ["pulse9" <$$> _pulseCHOPpulse9]
    , ["pulse11" <$$> _pulseCHOPpulse11]
    , ["pulse2" <$$> _pulseCHOPpulse2]
    , ["pulse0" <$$> _pulseCHOPpulse0]
    , ["scope" <$$> _pulseCHOPscope]
    , [("exporttable",) . ResolveP <$> _pulseCHOPexporttable]
    , ["pulse26" <$$> _pulseCHOPpulse26]
    , ["limit" <$$> _pulseCHOPlimit]
    , ["start" <$$> _pulseCHOPstart]
    , ["left" <$$> _pulseCHOPleft]
    , ["endunit" <$$> _pulseCHOPendunit]
    , ["pulse21" <$$> _pulseCHOPpulse21]
    , ["rate" <$$> _pulseCHOPrate]
    , ["pulse16" <$$> _pulseCHOPpulse16]
    , ["pulse28" <$$> _pulseCHOPpulse28]
    , ["number" <$$> _pulseCHOPnumber]
    , ["width" <$$> _pulseCHOPwidth]
    , ["pulse19" <$$> _pulseCHOPpulse19]
    , ["srselect" <$$> _pulseCHOPsrselect]
    , ["pulse13" <$$> _pulseCHOPpulse13]
    , ["timeslice" <$$> _pulseCHOPtimeslice]
    , ["pulse30" <$$> _pulseCHOPpulse30]
    , ["interp" <$$> _pulseCHOPinterp]
    , ["end" <$$> _pulseCHOPend]
    , ["pulse20" <$$> _pulseCHOPpulse20]
    , ["exportmethod" <$$> _pulseCHOPexportmethod]
    , ["pulse29" <$$> _pulseCHOPpulse29]
    , ["pulse1" <$$> _pulseCHOPpulse1]
    , ["pulse3" <$$> _pulseCHOPpulse3]
    , ["defval" <$$> _pulseCHOPdefval]
    , ["pulse6" <$$> _pulseCHOPpulse6]
    , ["widthunit" <$$> _pulseCHOPwidthunit]
    , ["pulse15" <$$> _pulseCHOPpulse15]
    , ["min" <$$> _pulseCHOPmin]
    , ["pulse10" <$$> _pulseCHOPpulse10]
    , ["pulse31" <$$> _pulseCHOPpulse31]
    , ["startunit" <$$> _pulseCHOPstartunit]
    , ["pulse14" <$$> _pulseCHOPpulse14]
    , ["pulse4" <$$> _pulseCHOPpulse4]
    , ["pulse5" <$$> _pulseCHOPpulse5]
    , ["right" <$$> _pulseCHOPright]
    , ["channelname" <$$> _pulseCHOPchannelname]
    , ["pulse24" <$$> _pulseCHOPpulse24]
    , ["pulse8" <$$> _pulseCHOPpulse8]
    , ["pulse17" <$$> _pulseCHOPpulse17]
    , ["pulse25" <$$> _pulseCHOPpulse25]
    , ["lastpulse" <$$> _pulseCHOPlastpulse]
    , ["pulse27" <$$> _pulseCHOPpulse27]
    , ["pulse22" <$$> _pulseCHOPpulse22]
    , ["pulse23" <$$> _pulseCHOPpulse23]
    , ["pulse18" <$$> _pulseCHOPpulse18]
    , ["pulse12" <$$> _pulseCHOPpulse12]
    , ["max" <$$> _pulseCHOPmax]]
  pars (NoiseCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _noiseCHOPresetpulse]
    , ["rough" <$$> _noiseCHOPrough]
    , ["channelname" <$$> _noiseCHOPchannelname]
    , ["constraint" <$$> _noiseCHOPconstraint]
    , ["harmon" <$$> _noiseCHOPharmon]
    , ["end" <$$> _noiseCHOPend]
    , ["scope" <$$> _noiseCHOPscope]
    , ["defval" <$$> _noiseCHOPdefval]
    , [("exporttable",) . ResolveP <$> _noiseCHOPexporttable]
    , ["exportmethod" <$$> _noiseCHOPexportmethod]
    , ["constrstart" <$$> _noiseCHOPconstrstart]
    , ["periodunit" <$$> _noiseCHOPperiodunit]
    , ["xord" <$$> _noiseCHOPxord]
    , Just <$> vec3Map' "r" _noiseCHOPr
    , ["startunit" <$$> _noiseCHOPstartunit]
    , ["start" <$$> _noiseCHOPstart]
    , ["left" <$$> _noiseCHOPleft]
    , ["type" <$$> _noiseCHOPtype]
    , Just <$> vec3Map' "s" _noiseCHOPs
    , ["period" <$$> _noiseCHOPperiod]
    , ["endunit" <$$> _noiseCHOPendunit]
    , ["normal" <$$> _noiseCHOPnormal]
    , ["rate" <$$> _noiseCHOPrate]
    , Just <$> vec3Map' "p" _noiseCHOPp
    , ["right" <$$> _noiseCHOPright]
    , ["spread" <$$> _noiseCHOPspread]
    , ["timeslice" <$$> _noiseCHOPtimeslice]
    , ["seed" <$$> _noiseCHOPseed]
    , ["srselect" <$$> _noiseCHOPsrselect]
    , ["numint" <$$> _noiseCHOPnumint]
    , ["rord" <$$> _noiseCHOPrord]
    , ["constrend" <$$> _noiseCHOPconstrend]
    , ["amp" <$$> _noiseCHOPamp]
    , Just <$> vec3Map' "t" _noiseCHOPt
    , ["exp" <$$> _noiseCHOPexp]
    , ["constrmean" <$$> _noiseCHOPconstrmean]
    , ["reset" <$$> _noiseCHOPreset]]
  pars (TrailCHOP {..}) = catMaybes . mconcat $ [ ["resample" <$$> _trailCHOPresample]
    , ["resetpulse" <$$> _trailCHOPresetpulse]
    , ["growlength" <$$> _trailCHOPgrowlength]
    , ["active" <$$> _trailCHOPactive]
    , ["samples" <$$> _trailCHOPsamples]
    , ["exportmethod" <$$> _trailCHOPexportmethod]
    , [("exporttable",) . ResolveP <$> _trailCHOPexporttable]
    , ["rate" <$$> _trailCHOPrate]
    , ["setrate" <$$> _trailCHOPsetrate]
    , ["wlength" <$$> _trailCHOPwlength]
    , ["scope" <$$> _trailCHOPscope]
    , ["wlengthunit" <$$> _trailCHOPwlengthunit]
    , ["capture" <$$> _trailCHOPcapture]
    , ["srselect" <$$> _trailCHOPsrselect]
    , ["timeslice" <$$> _trailCHOPtimeslice]
    , ["reset" <$$> _trailCHOPreset]]
  pars (SoptoCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _soptoCHOPexportmethod]
    , [("sop",) . ResolveP <$> _soptoCHOPsop]
    , [("exporttable",) . ResolveP <$> _soptoCHOPexporttable]
    , ["rate" <$$> _soptoCHOPrate]
    , ["scope" <$$> _soptoCHOPscope]
    , ["srselect" <$$> _soptoCHOPsrselect]
    , ["attribscope" <$$> _soptoCHOPattribscope]
    , ["group" <$$> _soptoCHOPgroup]
    , ["organize" <$$> _soptoCHOPorganize]
    , ["method" <$$> _soptoCHOPmethod]
    , ["timeslice" <$$> _soptoCHOPtimeslice]
    , ["renamescope" <$$> _soptoCHOPrenamescope]]
  pars (SyncinCHOP {..}) = catMaybes . mconcat $ [ ["multicastaddress" <$$> _syncinCHOPmulticastaddress]
    , ["srselect" <$$> _syncinCHOPsrselect]
    , ["active" <$$> _syncinCHOPactive]
    , ["exportmethod" <$$> _syncinCHOPexportmethod]
    , ["timeout" <$$> _syncinCHOPtimeout]
    , [("exporttable",) . ResolveP <$> _syncinCHOPexporttable]
    , ["port" <$$> _syncinCHOPport]
    , ["timeslice" <$$> _syncinCHOPtimeslice]
    , ["scope" <$$> _syncinCHOPscope]]
  pars (BlacktraxCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _blacktraxCHOPresetpulse]
    , ["leds" <$$> _blacktraxCHOPleds]
    , ["active" <$$> _blacktraxCHOPactive]
    , ["exportmethod" <$$> _blacktraxCHOPexportmethod]
    , ["protocol" <$$> _blacktraxCHOPprotocol]
    , ["maxbeacons" <$$> _blacktraxCHOPmaxbeacons]
    , ["scope" <$$> _blacktraxCHOPscope]
    , [("exporttable",) . ResolveP <$> _blacktraxCHOPexporttable]
    , ["timeslice" <$$> _blacktraxCHOPtimeslice]
    , ["acceleration" <$$> _blacktraxCHOPacceleration]
    , [("mappingtable",) . ResolveP <$> _blacktraxCHOPmappingtable]
    , ["velocity" <$$> _blacktraxCHOPvelocity]
    , ["srselect" <$$> _blacktraxCHOPsrselect]
    , ["outputformat" <$$> _blacktraxCHOPoutputformat]
    , ["port" <$$> _blacktraxCHOPport]
    , ["centroid" <$$> _blacktraxCHOPcentroid]
    , ["netaddress" <$$> _blacktraxCHOPnetaddress]
    , ["reset" <$$> _blacktraxCHOPreset]
    , ["samplerate" <$$> _blacktraxCHOPsamplerate]]
  pars (SharedmemoutCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _sharedmemoutCHOPexportmethod]
    , ["srselect" <$$> _sharedmemoutCHOPsrselect]
    , ["active" <$$> _sharedmemoutCHOPactive]
    , ["memtype" <$$> _sharedmemoutCHOPmemtype]
    , [("exporttable",) . ResolveP <$> _sharedmemoutCHOPexporttable]
    , ["timeslice" <$$> _sharedmemoutCHOPtimeslice]
    , ["scope" <$$> _sharedmemoutCHOPscope]
    , ["name" <$$> _sharedmemoutCHOPname]]
  pars (OpenvrCHOP {..}) = catMaybes . mconcat $ [ ["near" <$$> _openvrCHOPnear]
    , ["active" <$$> _openvrCHOPactive]
    , ["unitscale" <$$> _openvrCHOPunitscale]
    , [("exporttable",) . ResolveP <$> _openvrCHOPexporttable]
    , ["exportmethod" <$$> _openvrCHOPexportmethod]
    , ["far" <$$> _openvrCHOPfar]
    , ["buttons" <$$> _openvrCHOPbuttons]
    , ["scope" <$$> _openvrCHOPscope]
    , ["firstcontroller" <$$> _openvrCHOPfirstcontroller]
    , ["srselect" <$$> _openvrCHOPsrselect]
    , ["maxcontrollers" <$$> _openvrCHOPmaxcontrollers]
    , ["maxbuttons" <$$> _openvrCHOPmaxbuttons]
    , ["generalinfo" <$$> _openvrCHOPgeneralinfo]
    , ["orientation" <$$> _openvrCHOPorientation]
    , ["maxanalogs" <$$> _openvrCHOPmaxanalogs]
    , ["timeslice" <$$> _openvrCHOPtimeslice]
    , ["output" <$$> _openvrCHOPoutput]]
  pars (AudiomovieCHOP {..}) = catMaybes . mconcat $ [ ["index" <$$> _audiomovieCHOPindex]
    , ["exportmethod" <$$> _audiomovieCHOPexportmethod]
    , ["prereadlength" <$$> _audiomovieCHOPprereadlength]
    , [("exporttable",) . ResolveP <$> _audiomovieCHOPexporttable]
    , ["opentimeout" <$$> _audiomovieCHOPopentimeout]
    , ["scope" <$$> _audiomovieCHOPscope]
    , ["syncoffsetunit" <$$> _audiomovieCHOPsyncoffsetunit]
    , ["play" <$$> _audiomovieCHOPplay]
    , ["srselect" <$$> _audiomovieCHOPsrselect]
    , ["prereadlengthunit" <$$> _audiomovieCHOPprereadlengthunit]
    , ["syncoffset" <$$> _audiomovieCHOPsyncoffset]
    , [("moviefileintop",) . ResolveP <$> _audiomovieCHOPmoviefileintop]
    , ["timeslice" <$$> _audiomovieCHOPtimeslice]]
  pars (LookupCHOP {..}) = catMaybes . mconcat $ [ ["interp" <$$> _lookupCHOPinterp]
    , ["exportmethod" <$$> _lookupCHOPexportmethod]
    , ["index1" <$$> _lookupCHOPindex1]
    , ["cyclic" <$$> _lookupCHOPcyclic]
    , [("exporttable",) . ResolveP <$> _lookupCHOPexporttable]
    , ["scope" <$$> _lookupCHOPscope]
    , ["index2" <$$> _lookupCHOPindex2]
    , ["match" <$$> _lookupCHOPmatch]
    , ["srselect" <$$> _lookupCHOPsrselect]
    , ["timeslice" <$$> _lookupCHOPtimeslice]
    , ["chanmatch" <$$> _lookupCHOPchanmatch]]
  pars (AudiooscillatorCHOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _audiooscillatorCHOPresetpulse]
    , ["smooth" <$$> _audiooscillatorCHOPsmooth]
    , ["resetcondition" <$$> _audiooscillatorCHOPresetcondition]
    , ["octave" <$$> _audiooscillatorCHOPoctave]
    , ["bias" <$$> _audiooscillatorCHOPbias]
    , ["rate" <$$> _audiooscillatorCHOPrate]
    , ["scope" <$$> _audiooscillatorCHOPscope]
    , [("exporttable",) . ResolveP <$> _audiooscillatorCHOPexporttable]
    , ["wavetype" <$$> _audiooscillatorCHOPwavetype]
    , ["phase" <$$> _audiooscillatorCHOPphase]
    , ["exportmethod" <$$> _audiooscillatorCHOPexportmethod]
    , ["frequency" <$$> _audiooscillatorCHOPfrequency]
    , ["offset" <$$> _audiooscillatorCHOPoffset]
    , ["srselect" <$$> _audiooscillatorCHOPsrselect]
    , ["amp" <$$> _audiooscillatorCHOPamp]
    , ["timeslice" <$$> _audiooscillatorCHOPtimeslice]
    , ["reset" <$$> _audiooscillatorCHOPreset]]
  pars (SyncoutCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _syncoutCHOPexportmethod]
    , ["active" <$$> _syncoutCHOPactive]
    , ["clearstats" <$$> _syncoutCHOPclearstats]
    , ["banclients" <$$> _syncoutCHOPbanclients]
    , ["scope" <$$> _syncoutCHOPscope]
    , [("exporttable",) . ResolveP <$> _syncoutCHOPexporttable]
    , ["multicastaddress" <$$> _syncoutCHOPmulticastaddress]
    , ["srselect" <$$> _syncoutCHOPsrselect]
    , ["timeout" <$$> _syncoutCHOPtimeout]
    , ["port" <$$> _syncoutCHOPport]
    , ["timeslice" <$$> _syncoutCHOPtimeslice]
    , ["banclienttimeouts" <$$> _syncoutCHOPbanclienttimeouts]
    , ["clienttimeouts" <$$> _syncoutCHOPclienttimeouts]]
  pars (EtherdreamCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _etherdreamCHOPexportmethod]
    , ["active" <$$> _etherdreamCHOPactive]
    , [("exporttable",) . ResolveP <$> _etherdreamCHOPexporttable]
    , ["xscale" <$$> _etherdreamCHOPxscale]
    , ["scope" <$$> _etherdreamCHOPscope]
    , ["netaddress" <$$> _etherdreamCHOPnetaddress]
    , ["queuetime" <$$> _etherdreamCHOPqueuetime]
    , ["yscale" <$$> _etherdreamCHOPyscale]
    , ["queueunits" <$$> _etherdreamCHOPqueueunits]
    , ["srselect" <$$> _etherdreamCHOPsrselect]
    , ["port" <$$> _etherdreamCHOPport]
    , ["timeslice" <$$> _etherdreamCHOPtimeslice]
    , ["bluescale" <$$> _etherdreamCHOPbluescale]
    , ["redscale" <$$> _etherdreamCHOPredscale]
    , ["greenscale" <$$> _etherdreamCHOPgreenscale]]
  pars (SortCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _sortCHOPexportmethod]
    , ["names" <$$> _sortCHOPnames]
    , [("exporttable",) . ResolveP <$> _sortCHOPexporttable]
    , ["scope" <$$> _sortCHOPscope]
    , ["select" <$$> _sortCHOPselect]
    , ["seed" <$$> _sortCHOPseed]
    , ["srselect" <$$> _sortCHOPsrselect]
    , ["indices" <$$> _sortCHOPindices]
    , ["indexchannel" <$$> _sortCHOPindexchannel]
    , ["method" <$$> _sortCHOPmethod]
    , ["timeslice" <$$> _sortCHOPtimeslice]]
  pars (HoldCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _holdCHOPexportmethod]
    , ["srselect" <$$> _holdCHOPsrselect]
    , [("exporttable",) . ResolveP <$> _holdCHOPexporttable]
    , ["sample" <$$> _holdCHOPsample]
    , ["timeslice" <$$> _holdCHOPtimeslice]
    , ["scope" <$$> _holdCHOPscope]
    , ["pulse" <$$> _holdCHOPpulse]]
  pars (WarpCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _warpCHOPexportmethod]
    , ["srselect" <$$> _warpCHOPsrselect]
    , [("exporttable",) . ResolveP <$> _warpCHOPexporttable]
    , ["method" <$$> _warpCHOPmethod]
    , ["scaleindex" <$$> _warpCHOPscaleindex]
    , ["timeslice" <$$> _warpCHOPtimeslice]
    , ["scope" <$$> _warpCHOPscope]]
  pars (AudiostreamoutCHOP {..}) = catMaybes . mconcat $ [ ["streamname" <$$> _audiostreamoutCHOPstreamname]
    , ["exportmethod" <$$> _audiostreamoutCHOPexportmethod]
    , ["srselect" <$$> _audiostreamoutCHOPsrselect]
    , ["active" <$$> _audiostreamoutCHOPactive]
    , [("exporttable",) . ResolveP <$> _audiostreamoutCHOPexporttable]
    , ["port" <$$> _audiostreamoutCHOPport]
    , ["timeslice" <$$> _audiostreamoutCHOPtimeslice]
    , ["scope" <$$> _audiostreamoutCHOPscope]]
  pars (MidiinmapCHOP {..}) = catMaybes . mconcat $ [ ["id" <$$> _midiinmapCHOPid]
    , ["bvelocity" <$$> _midiinmapCHOPbvelocity]
    , ["squeue" <$$> _midiinmapCHOPsqueue]
    , ["left" <$$> _midiinmapCHOPleft]
    , ["exportmethod" <$$> _midiinmapCHOPexportmethod]
    , ["sliders" <$$> _midiinmapCHOPsliders]
    , ["timeslice" <$$> _midiinmapCHOPtimeslice]
    , ["rate" <$$> _midiinmapCHOPrate]
    , ["buttons" <$$> _midiinmapCHOPbuttons]
    , ["scope" <$$> _midiinmapCHOPscope]
    , [("exporttable",) . ResolveP <$> _midiinmapCHOPexporttable]
    , ["defval" <$$> _midiinmapCHOPdefval]
    , [("device",) . ResolveP <$> _midiinmapCHOPdevice]
    , ["srselect" <$$> _midiinmapCHOPsrselect]
    , ["right" <$$> _midiinmapCHOPright]]
  pars (OverrideCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _overrideCHOPexportmethod]
    , ["makeindex" <$$> _overrideCHOPmakeindex]
    , ["srselect" <$$> _overrideCHOPsrselect]
    , ["timeslice" <$$> _overrideCHOPtimeslice]
    , ["match" <$$> _overrideCHOPmatch]
    , ["indexname" <$$> _overrideCHOPindexname]
    , ["scope" <$$> _overrideCHOPscope]
    , [("exporttable",) . ResolveP <$> _overrideCHOPexporttable]
    , ["cookmonitor" <$$> _overrideCHOPcookmonitor]]
  pars (RenameCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _renameCHOPexportmethod]
    , ["renamefrom" <$$> _renameCHOPrenamefrom]
    , ["renameto" <$$> _renameCHOPrenameto]
    , ["srselect" <$$> _renameCHOPsrselect]
    , ["timeslice" <$$> _renameCHOPtimeslice]
    , ["scope" <$$> _renameCHOPscope]
    , [("exporttable",) . ResolveP <$> _renameCHOPexporttable]]
  pars (AudiodeviceinCHOP {..}) = catMaybes . mconcat $ [ ["errormissing" <$$> _audiodeviceinCHOPerrormissing]
    , ["frontleftcenter" <$$> _audiodeviceinCHOPfrontleftcenter]
    , ["topfrontright" <$$> _audiodeviceinCHOPtopfrontright]
    , ["format" <$$> _audiodeviceinCHOPformat]
    , ["active" <$$> _audiodeviceinCHOPactive]
    , ["topbackcenter" <$$> _audiodeviceinCHOPtopbackcenter]
    , ["driver" <$$> _audiodeviceinCHOPdriver]
    , ["topbackleft" <$$> _audiodeviceinCHOPtopbackleft]
    , ["frontcenter" <$$> _audiodeviceinCHOPfrontcenter]
    , ["bufferlength" <$$> _audiodeviceinCHOPbufferlength]
    , ["frontright" <$$> _audiodeviceinCHOPfrontright]
    , ["frontleft" <$$> _audiodeviceinCHOPfrontleft]
    , ["sideright" <$$> _audiodeviceinCHOPsideright]
    , ["sideleft" <$$> _audiodeviceinCHOPsideleft]
    , ["frontrightcenter" <$$> _audiodeviceinCHOPfrontrightcenter]
    , [("exporttable",) . ResolveP <$> _audiodeviceinCHOPexporttable]
    , ["exportmethod" <$$> _audiodeviceinCHOPexportmethod]
    , ["backcenter" <$$> _audiodeviceinCHOPbackcenter]
    , ["topcenter" <$$> _audiodeviceinCHOPtopcenter]
    , ["topbackright" <$$> _audiodeviceinCHOPtopbackright]
    , ["lowfrequency" <$$> _audiodeviceinCHOPlowfrequency]
    , ["rate" <$$> _audiodeviceinCHOPrate]
    , ["topfrontcenter" <$$> _audiodeviceinCHOPtopfrontcenter]
    , ["backleft" <$$> _audiodeviceinCHOPbackleft]
    , ["scope" <$$> _audiodeviceinCHOPscope]
    , ["inputs" <$$> _audiodeviceinCHOPinputs]
    , ["topfrontleft" <$$> _audiodeviceinCHOPtopfrontleft]
    , ["device" <$$> _audiodeviceinCHOPdevice]
    , ["srselect" <$$> _audiodeviceinCHOPsrselect]
    , ["timeslice" <$$> _audiodeviceinCHOPtimeslice]
    , ["backright" <$$> _audiodeviceinCHOPbackright]]
  pars (InversecurveCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _inversecurveCHOPexportmethod]
    , [("exporttable",) . ResolveP <$> _inversecurveCHOPexporttable]
    , Just <$> vec3Map' "upvector" _inversecurveCHOPupvector
    , ["scope" <$$> _inversecurveCHOPscope]
    , ["interpolation" <$$> _inversecurveCHOPinterpolation]
    , ["mapexports" <$$> _inversecurveCHOPmapexports]
    , ["span1" <$$> _inversecurveCHOPspan1]
    , ["srselect" <$$> _inversecurveCHOPsrselect]
    , ["timeslice" <$$> _inversecurveCHOPtimeslice]
    , ["order" <$$> _inversecurveCHOPorder]
    , ["span2" <$$> _inversecurveCHOPspan2]]
  pars (PanelCHOP {..}) = catMaybes . mconcat $ [ ["queue" <$$> _panelCHOPqueue]
    , ["exportmethod" <$$> _panelCHOPexportmethod]
    , ["select" <$$> _panelCHOPselect]
    , ["queuesize" <$$> _panelCHOPqueuesize]
    , ["rename" <$$> _panelCHOPrename]
    , ["srselect" <$$> _panelCHOPsrselect]
    , ["timeslice" <$$> _panelCHOPtimeslice]
    , ["scope" <$$> _panelCHOPscope]
    , [("exporttable",) . ResolveP <$> _panelCHOPexporttable]
    , ["component" <$$> _panelCHOPcomponent]]
  pars (DattoCHOP {..}) = catMaybes . mconcat $ [ ["colexpr" <$$> _dattoCHOPcolexpr]
    , ["fromcol" <$$> _dattoCHOPfromcol]
    , ["rowindexstart" <$$> _dattoCHOProwindexstart]
    , ["rownameend" <$$> _dattoCHOPrownameend]
    , ["rownamestart" <$$> _dattoCHOPrownamestart]
    , ["firstrow" <$$> _dattoCHOPfirstrow]
    , ["fromrow" <$$> _dattoCHOPfromrow]
    , ["rowexpr" <$$> _dattoCHOProwexpr]
    , ["colnamestart" <$$> _dattoCHOPcolnamestart]
    , ["rowindexend" <$$> _dattoCHOProwindexend]
    , ["colnames" <$$> _dattoCHOPcolnames]
    , [("exporttable",) . ResolveP <$> _dattoCHOPexporttable]
    , ["output" <$$> _dattoCHOPoutput]
    , ["extractrows" <$$> _dattoCHOPextractrows]
    , ["exportmethod" <$$> _dattoCHOPexportmethod]
    , ["timeslice" <$$> _dattoCHOPtimeslice]
    , ["colindexend" <$$> _dattoCHOPcolindexend]
    , ["scope" <$$> _dattoCHOPscope]
    , ["rownames" <$$> _dattoCHOPrownames]
    , ["srselect" <$$> _dattoCHOPsrselect]
    , ["firstcolumn" <$$> _dattoCHOPfirstcolumn]
    , ["colnameend" <$$> _dattoCHOPcolnameend]
    , [("dat",) . ResolveP <$> _dattoCHOPdat]
    , ["colindexstart" <$$> _dattoCHOPcolindexstart]
    , ["extractcols" <$$> _dattoCHOPextractcols]]
  pars (HokuyoCHOP {..}) = catMaybes . mconcat $ [ ["interface" <$$> _hokuyoCHOPinterface]
    , ["endstep" <$$> _hokuyoCHOPendstep]
    , ["active" <$$> _hokuyoCHOPactive]
    , ["exportmethod" <$$> _hokuyoCHOPexportmethod]
    , ["startstep" <$$> _hokuyoCHOPstartstep]
    , [("exporttable",) . ResolveP <$> _hokuyoCHOPexporttable]
    , ["scope" <$$> _hokuyoCHOPscope]
    , ["highsensitivity" <$$> _hokuyoCHOPhighsensitivity]
    , ["srselect" <$$> _hokuyoCHOPsrselect]
    , ["motorspeed" <$$> _hokuyoCHOPmotorspeed]
    , ["port" <$$> _hokuyoCHOPport]
    , ["timeslice" <$$> _hokuyoCHOPtimeslice]
    , ["netaddress" <$$> _hokuyoCHOPnetaddress]
    , ["output" <$$> _hokuyoCHOPoutput]]
  pars (AnalyzeCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _analyzeCHOPexportmethod]
    , ["nopeakvalue" <$$> _analyzeCHOPnopeakvalue]
    , ["srselect" <$$> _analyzeCHOPsrselect]
    , ["scope" <$$> _analyzeCHOPscope]
    , ["valleys" <$$> _analyzeCHOPvalleys]
    , [("exporttable",) . ResolveP <$> _analyzeCHOPexporttable]
    , ["allowend" <$$> _analyzeCHOPallowend]
    , ["timeslice" <$$> _analyzeCHOPtimeslice]
    , ["allowstart" <$$> _analyzeCHOPallowstart]
    , ["function" <$$> _analyzeCHOPfunction]]
  pars (SerialCHOP {..}) = catMaybes . mconcat $ [ ["script1" <$$> _serialCHOPscript1]
    , ["parity" <$$> _serialCHOPparity]
    , ["script6" <$$> _serialCHOPscript6]
    , ["script9" <$$> _serialCHOPscript9]
    , ["active" <$$> _serialCHOPactive]
    , ["exportmethod" <$$> _serialCHOPexportmethod]
    , ["script8" <$$> _serialCHOPscript8]
    , ["script14" <$$> _serialCHOPscript14]
    , ["stopbits" <$$> _serialCHOPstopbits]
    , ["script0" <$$> _serialCHOPscript0]
    , ["script3" <$$> _serialCHOPscript3]
    , ["script7" <$$> _serialCHOPscript7]
    , ["script10" <$$> _serialCHOPscript10]
    , ["port" <$$> _serialCHOPport]
    , [("exporttable",) . ResolveP <$> _serialCHOPexporttable]
    , ["script12" <$$> _serialCHOPscript12]
    , ["baudrate" <$$> _serialCHOPbaudrate]
    , ["script13" <$$> _serialCHOPscript13]
    , ["script2" <$$> _serialCHOPscript2]
    , ["state" <$$> _serialCHOPstate]
    , ["scope" <$$> _serialCHOPscope]
    , ["script5" <$$> _serialCHOPscript5]
    , ["srselect" <$$> _serialCHOPsrselect]
    , ["databits" <$$> _serialCHOPdatabits]
    , ["script11" <$$> _serialCHOPscript11]
    , ["timeslice" <$$> _serialCHOPtimeslice]
    , ["script4" <$$> _serialCHOPscript4]
    , ["script15" <$$> _serialCHOPscript15]]
  pars (InfoCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _infoCHOPexportmethod]
    , ["passive" <$$> _infoCHOPpassive]
    , [("exporttable",) . ResolveP <$> _infoCHOPexporttable]
    , ["iscope" <$$> _infoCHOPiscope]
    , ["scope" <$$> _infoCHOPscope]
    , ["srselect" <$$> _infoCHOPsrselect]
    , ["range1" <$$> _infoCHOPrange1]
    , ["values" <$$> _infoCHOPvalues]
    , ["timeslice" <$$> _infoCHOPtimeslice]
    , ["range2" <$$> _infoCHOPrange2]]
  pars (TrimCHOP {..}) = catMaybes . mconcat $ [ ["start" <$$> _trimCHOPstart]
    , ["end" <$$> _trimCHOPend]
    , ["exportmethod" <$$> _trimCHOPexportmethod]
    , ["endunit" <$$> _trimCHOPendunit]
    , ["scope" <$$> _trimCHOPscope]
    , [("exporttable",) . ResolveP <$> _trimCHOPexporttable]
    , ["timeslice" <$$> _trimCHOPtimeslice]
    , ["srselect" <$$> _trimCHOPsrselect]
    , ["relative" <$$> _trimCHOPrelative]
    , ["startunit" <$$> _trimCHOPstartunit]
    , ["discard" <$$> _trimCHOPdiscard]]
  pars (ResampleCHOP {..}) = catMaybes . mconcat $ [ ["interp" <$$> _resampleCHOPinterp]
    , ["start" <$$> _resampleCHOPstart]
    , ["end" <$$> _resampleCHOPend]
    , ["exportmethod" <$$> _resampleCHOPexportmethod]
    , ["startunit" <$$> _resampleCHOPstartunit]
    , ["rate" <$$> _resampleCHOPrate]
    , ["quatrot" <$$> _resampleCHOPquatrot]
    , ["scope" <$$> _resampleCHOPscope]
    , ["constarea" <$$> _resampleCHOPconstarea]
    , ["timeslice" <$$> _resampleCHOPtimeslice]
    , ["cyclelen" <$$> _resampleCHOPcyclelen]
    , ["srselect" <$$> _resampleCHOPsrselect]
    , ["relative" <$$> _resampleCHOPrelative]
    , [("exporttable",) . ResolveP <$> _resampleCHOPexporttable]
    , ["method" <$$> _resampleCHOPmethod]
    , ["endunit" <$$> _resampleCHOPendunit]
    , ["correct" <$$> _resampleCHOPcorrect]]
  pars (BlendCHOP {..}) = catMaybes . mconcat $ [ ["firstweight" <$$> _blendCHOPfirstweight]
    , ["exportmethod" <$$> _blendCHOPexportmethod]
    , ["srselect" <$$> _blendCHOPsrselect]
    , [("exporttable",) . ResolveP <$> _blendCHOPexporttable]
    , ["method" <$$> _blendCHOPmethod]
    , ["timeslice" <$$> _blendCHOPtimeslice]
    , ["scope" <$$> _blendCHOPscope]
    , ["underflow" <$$> _blendCHOPunderflow]]
  pars (HeliosdacCHOP {..}) = catMaybes . mconcat $ [ ["exportmethod" <$$> _heliosdacCHOPexportmethod]
    , ["active" <$$> _heliosdacCHOPactive]
    , [("exporttable",) . ResolveP <$> _heliosdacCHOPexporttable]
    , ["xscale" <$$> _heliosdacCHOPxscale]
    , ["scope" <$$> _heliosdacCHOPscope]
    , ["bluescale" <$$> _heliosdacCHOPbluescale]
    , ["queuetime" <$$> _heliosdacCHOPqueuetime]
    , ["greenscale" <$$> _heliosdacCHOPgreenscale]
    , ["srselect" <$$> _heliosdacCHOPsrselect]
    , ["device" <$$> _heliosdacCHOPdevice]
    , ["timeslice" <$$> _heliosdacCHOPtimeslice]
    , ["intensityscale" <$$> _heliosdacCHOPintensityscale]
    , ["redscale" <$$> _heliosdacCHOPredscale]
    , ["yscale" <$$> _heliosdacCHOPyscale]]
  pars _ = []
  opType (MouseinCHOP {}) = "mouseinCHOP"
  opType (NatnetinCHOP {}) = "natnetinCHOP"
  opType (AudiofilterCHOP {}) = "audiofilterCHOP"
  opType (ScriptCHOP {}) = "scriptCHOP"
  opType (PipeinCHOP {}) = "pipeinCHOP"
  opType (FunctionCHOP {}) = "functionCHOP"
  opType (AudiodynamicsCHOP {}) = "audiodynamicsCHOP"
  opType (CompositeCHOP {}) = "compositeCHOP"
  opType (ReorderCHOP {}) = "reorderCHOP"
  opType (FileinCHOP {}) = "fileinCHOP"
  opType (ClipblenderCHOP {}) = "clipblenderCHOP"
  opType (LagCHOP {}) = "lagCHOP"
  opType (SelectCHOP {}) = "selectCHOP"
  opType (LogicCHOP {}) = "logicCHOP"
  opType (PerformCHOP {}) = "performCHOP"
  opType (KeyboardinCHOP {}) = "keyboardinCHOP"
  opType (DmxinCHOP {}) = "dmxinCHOP"
  opType (InversekinCHOP {}) = "inversekinCHOP"
  opType (SequencerCHOP {}) = "sequencerCHOP"
  opType (BeatCHOP {}) = "beatCHOP"
  opType (LtcoutCHOP {}) = "ltcoutCHOP"
  opType (TouchoutCHOP {}) = "touchoutCHOP"
  opType (NullCHOP {}) = "nullCHOP"
  opType (RecordCHOP {}) = "recordCHOP"
  opType (AttributeCHOP {}) = "attributeCHOP"
  opType (FanCHOP {}) = "fanCHOP"
  opType (CrossCHOP {}) = "crossCHOP"
  opType (PosistagenetCHOP {}) = "posistagenetCHOP"
  opType (RealsenseCHOP {}) = "realsenseCHOP"
  opType (SlopeCHOP {}) = "slopeCHOP"
  opType (MouseoutCHOP {}) = "mouseoutCHOP"
  opType (LimitCHOP {}) = "limitCHOP"
  opType (EnvelopeCHOP {}) = "envelopeCHOP"
  opType (PipeoutCHOP {}) = "pipeoutCHOP"
  opType (LeapmotionCHOP {}) = "leapmotionCHOP"
  opType (SwitchCHOP {}) = "switchCHOP"
  opType (Leuzerod4CHOP {}) = "leuzerod4CHOP"
  opType (ToptoCHOP {}) = "toptoCHOP"
  opType (AbletonlinkCHOP {}) = "abletonlinkCHOP"
  opType (ConstantCHOP {}) = "constantCHOP"
  opType (ObjectCHOP {}) = "objectCHOP"
  opType (JoinCHOP {}) = "joinCHOP"
  opType (CycleCHOP {}) = "cycleCHOP"
  opType (FeedbackCHOP {}) = "feedbackCHOP"
  opType (OculusriftCHOP {}) = "oculusriftCHOP"
  opType (MathCHOP {}) = "mathCHOP"
  opType (ScanCHOP {}) = "scanCHOP"
  opType (AudiostreaminCHOP {}) = "audiostreaminCHOP"
  opType (WaveCHOP {}) = "waveCHOP"
  opType (AudiobandeqCHOP {}) = "audiobandeqCHOP"
  opType (ShuffleCHOP {}) = "shuffleCHOP"
  opType (TimelineCHOP {}) = "timelineCHOP"
  opType (LfoCHOP {}) = "lfoCHOP"
  opType (TriggerCHOP {}) = "triggerCHOP"
  opType (StretchCHOP {}) = "stretchCHOP"
  opType (CplusplusCHOP {}) = "cplusplusCHOP"
  opType (OscinCHOP {}) = "oscinCHOP"
  opType (LtcinCHOP {}) = "ltcinCHOP"
  opType (TabletCHOP {}) = "tabletCHOP"
  opType (EventCHOP {}) = "eventCHOP"
  opType (TouchinCHOP {}) = "touchinCHOP"
  opType (HogCHOP {}) = "hogCHOP"
  opType (PatternCHOP {}) = "patternCHOP"
  opType (AudiorenderCHOP {}) = "audiorenderCHOP"
  opType (MidioutCHOP {}) = "midioutCHOP"
  opType (AudiodeviceoutCHOP {}) = "audiodeviceoutCHOP"
  opType (SpringCHOP {}) = "springCHOP"
  opType (ParameterCHOP {}) = "parameterCHOP"
  opType (InterpolateCHOP {}) = "interpolateCHOP"
  opType (OscoutCHOP {}) = "oscoutCHOP"
  opType (GestureCHOP {}) = "gestureCHOP"
  opType (ExtendCHOP {}) = "extendCHOP"
  opType (AudioparaeqCHOP {}) = "audioparaeqCHOP"
  opType (JoystickCHOP {}) = "joystickCHOP"
  opType (FilterCHOP {}) = "filterCHOP"
  opType (AudiofileinCHOP {}) = "audiofileinCHOP"
  opType (AngleCHOP {}) = "angleCHOP"
  opType (DmxoutCHOP {}) = "dmxoutCHOP"
  opType (TransformCHOP {}) = "transformCHOP"
  opType (OutCHOP {}) = "outCHOP"
  opType (TimesliceCHOP {}) = "timesliceCHOP"
  opType (SpliceCHOP {}) = "spliceCHOP"
  opType (SpeedCHOP {}) = "speedCHOP"
  opType (FileoutCHOP {}) = "fileoutCHOP"
  opType (AudioplayCHOP {}) = "audioplayCHOP"
  opType (ClockCHOP {}) = "clockCHOP"
  opType (ScurveCHOP {}) = "scurveCHOP"
  opType (HandleCHOP {}) = "handleCHOP"
  opType (ShiftCHOP {}) = "shiftCHOP"
  opType (ExpressionCHOP {}) = "expressionCHOP"
  opType (MergeCHOP {}) = "mergeCHOP"
  opType (CopyCHOP {}) = "copyCHOP"
  opType (KinectCHOP {}) = "kinectCHOP"
  opType (InCHOP {}) = "inCHOP"
  opType (TimerCHOP {}) = "timerCHOP"
  opType (SharedmeminCHOP {}) = "sharedmeminCHOP"
  opType (KeyframeCHOP {}) = "keyframeCHOP"
  opType (MidiinCHOP {}) = "midiinCHOP"
  opType (DelayCHOP {}) = "delayCHOP"
  opType (RenderpickCHOP {}) = "renderpickCHOP"
  opType (ReplaceCHOP {}) = "replaceCHOP"
  opType (CountCHOP {}) = "countCHOP"
  opType (OculusaudioCHOP {}) = "oculusaudioCHOP"
  opType (ClipCHOP {}) = "clipCHOP"
  opType (AudiospectrumCHOP {}) = "audiospectrumCHOP"
  opType (DeleteCHOP {}) = "deleteCHOP"
  opType (PulseCHOP {}) = "pulseCHOP"
  opType (NoiseCHOP {}) = "noiseCHOP"
  opType (TrailCHOP {}) = "trailCHOP"
  opType (SoptoCHOP {}) = "soptoCHOP"
  opType (SyncinCHOP {}) = "syncinCHOP"
  opType (BlacktraxCHOP {}) = "blacktraxCHOP"
  opType (SharedmemoutCHOP {}) = "sharedmemoutCHOP"
  opType (OpenvrCHOP {}) = "openvrCHOP"
  opType (AudiomovieCHOP {}) = "audiomovieCHOP"
  opType (LookupCHOP {}) = "lookupCHOP"
  opType (AudiooscillatorCHOP {}) = "audiooscillatorCHOP"
  opType (SyncoutCHOP {}) = "syncoutCHOP"
  opType (EtherdreamCHOP {}) = "etherdreamCHOP"
  opType (SortCHOP {}) = "sortCHOP"
  opType (HoldCHOP {}) = "holdCHOP"
  opType (WarpCHOP {}) = "warpCHOP"
  opType (AudiostreamoutCHOP {}) = "audiostreamoutCHOP"
  opType (MidiinmapCHOP {}) = "midiinmapCHOP"
  opType (OverrideCHOP {}) = "overrideCHOP"
  opType (RenameCHOP {}) = "renameCHOP"
  opType (AudiodeviceinCHOP {}) = "audiodeviceinCHOP"
  opType (InversecurveCHOP {}) = "inversecurveCHOP"
  opType (PanelCHOP {}) = "panelCHOP"
  opType (DattoCHOP {}) = "dattoCHOP"
  opType (HokuyoCHOP {}) = "hokuyoCHOP"
  opType (AnalyzeCHOP {}) = "analyzeCHOP"
  opType (SerialCHOP {}) = "serialCHOP"
  opType (InfoCHOP {}) = "infoCHOP"
  opType (TrimCHOP {}) = "trimCHOP"
  opType (ResampleCHOP {}) = "resampleCHOP"
  opType (BlendCHOP {}) = "blendCHOP"
  opType (HeliosdacCHOP {}) = "heliosdacCHOP"
  text _ = Nothing
  commands = view chopCommands
  connections = view chopIns


instance Op MAT where 
  pars (InMAT {..}) = catMaybes . mconcat $ [ ["pcaptpath" <$$> _inMATpcaptpath]
    , ["wireframe" <$$> _inMATwireframe]
    , ["destblenda" <$$> _inMATdestblenda]
    , [("mat",) . ResolveP <$> _inMATmat]
    , ["depthfunc" <$$> _inMATdepthfunc]
    , ["cullface" <$$> _inMATcullface]
    , ["skelrootpath" <$$> _inMATskelrootpath]
    , ["destblend" <$$> _inMATdestblend]
    , ["label" <$$> _inMATlabel]
    , ["alphafunc" <$$> _inMATalphafunc]
    , ["depthtest" <$$> _inMATdepthtest]
    , ["polygonoffsetunits" <$$> _inMATpolygonoffsetunits]
    , ["polygonoffsetfactor" <$$> _inMATpolygonoffsetfactor]
    , ["polygonoffset" <$$> _inMATpolygonoffset]
    , ["separatealphafunc" <$$> _inMATseparatealphafunc]
    , ["depthwriting" <$$> _inMATdepthwriting]
    , ["alphathreshold" <$$> _inMATalphathreshold]
    , ["pcaptdata" <$$> _inMATpcaptdata]
    , ["dodeform" <$$> _inMATdodeform]
    , ["deformdata" <$$> _inMATdeformdata]
    , ["wirewidth" <$$> _inMATwirewidth]
    , [("targetsop",) . ResolveP <$> _inMATtargetsop]
    , ["srcblend" <$$> _inMATsrcblend]
    , ["blending" <$$> _inMATblending]
    , ["alphatest" <$$> _inMATalphatest]
    , ["srcblenda" <$$> _inMATsrcblenda]]
  pars (PointspriteMAT {..}) = catMaybes . mconcat $ [ ["offsettop" <$$> _pointspriteMAToffsettop]
    , ["colormapanisotropy" <$$> _pointspriteMATcolormapanisotropy]
    , ["alpha" <$$> _pointspriteMATalpha]
    , ["offsetbottom" <$$> _pointspriteMAToffsetbottom]
    , ["cullface" <$$> _pointspriteMATcullface]
    , ["skelrootpath" <$$> _pointspriteMATskelrootpath]
    , ["wireframe" <$$> _pointspriteMATwireframe]
    , ["alphafunc" <$$> _pointspriteMATalphafunc]
    , ["pointscale" <$$> _pointspriteMATpointscale]
    , ["polygonoffsetfactor" <$$> _pointspriteMATpolygonoffsetfactor]
    , ["polygonoffset" <$$> _pointspriteMATpolygonoffset]
    , ["separatealphafunc" <$$> _pointspriteMATseparatealphafunc]
    , ["depthwriting" <$$> _pointspriteMATdepthwriting]
    , ["offsetleft" <$$> _pointspriteMAToffsetleft]
    , ["colormapextendv" <$$> _pointspriteMATcolormapextendv]
    , ["pcaptdata" <$$> _pointspriteMATpcaptdata]
    , ["dodeform" <$$> _pointspriteMATdodeform]
    , ["postmultalpha" <$$> _pointspriteMATpostmultalpha]
    , Just <$> rgbMap "color" _pointspriteMATcolor
    , ["deformdata" <$$> _pointspriteMATdeformdata]
    , ["destblenda" <$$> _pointspriteMATdestblenda]
    , ["colormapextendu" <$$> _pointspriteMATcolormapextendu]
    , ["blending" <$$> _pointspriteMATblending]
    , ["pcaptpath" <$$> _pointspriteMATpcaptpath]
    , [("colormap",) . ResolveP <$> _pointspriteMATcolormap]
    , [("mat",) . ResolveP <$> _pointspriteMATmat]
    , ["colormapextendw" <$$> _pointspriteMATcolormapextendw]
    , ["attenfar" <$$> _pointspriteMATattenfar]
    , ["destblend" <$$> _pointspriteMATdestblend]
    , ["attensizenear" <$$> _pointspriteMATattensizenear]
    , ["polygonoffsetunits" <$$> _pointspriteMATpolygonoffsetunits]
    , ["attenpscale" <$$> _pointspriteMATattenpscale]
    , ["depthtest" <$$> _pointspriteMATdepthtest]
    , ["colormapfilter" <$$> _pointspriteMATcolormapfilter]
    , ["attennear" <$$> _pointspriteMATattennear]
    , ["alphathreshold" <$$> _pointspriteMATalphathreshold]
    , ["depthfunc" <$$> _pointspriteMATdepthfunc]
    , ["offsetright" <$$> _pointspriteMAToffsetright]
    , ["wirewidth" <$$> _pointspriteMATwirewidth]
    , ["srcblend" <$$> _pointspriteMATsrcblend]
    , [("targetsop",) . ResolveP <$> _pointspriteMATtargetsop]
    , ["attensizefar" <$$> _pointspriteMATattensizefar]
    , ["alphatest" <$$> _pointspriteMATalphatest]
    , ["srcblenda" <$$> _pointspriteMATsrcblenda]]
  pars (OutMAT {..}) = catMaybes . mconcat $ [ ["pcaptpath" <$$> _outMATpcaptpath]
    , ["wireframe" <$$> _outMATwireframe]
    , ["destblenda" <$$> _outMATdestblenda]
    , [("mat",) . ResolveP <$> _outMATmat]
    , ["depthfunc" <$$> _outMATdepthfunc]
    , ["cullface" <$$> _outMATcullface]
    , ["skelrootpath" <$$> _outMATskelrootpath]
    , ["destblend" <$$> _outMATdestblend]
    , ["label" <$$> _outMATlabel]
    , ["alphafunc" <$$> _outMATalphafunc]
    , ["depthtest" <$$> _outMATdepthtest]
    , ["polygonoffsetunits" <$$> _outMATpolygonoffsetunits]
    , ["polygonoffsetfactor" <$$> _outMATpolygonoffsetfactor]
    , ["polygonoffset" <$$> _outMATpolygonoffset]
    , ["separatealphafunc" <$$> _outMATseparatealphafunc]
    , ["depthwriting" <$$> _outMATdepthwriting]
    , ["alphathreshold" <$$> _outMATalphathreshold]
    , ["pcaptdata" <$$> _outMATpcaptdata]
    , ["dodeform" <$$> _outMATdodeform]
    , ["deformdata" <$$> _outMATdeformdata]
    , ["wirewidth" <$$> _outMATwirewidth]
    , [("targetsop",) . ResolveP <$> _outMATtargetsop]
    , ["srcblend" <$$> _outMATsrcblend]
    , ["blending" <$$> _outMATblending]
    , ["alphatest" <$$> _outMATalphatest]
    , ["srcblenda" <$$> _outMATsrcblenda]]
  pars (PhongMAT {..}) = catMaybes . mconcat $ [ ["applypointcolor" <$$> _phongMATapplypointcolor]
    , ["darknessemitmapextendu" <$$> _phongMATdarknessemitmapextendu]
    , ["colormapcoord" <$$> _phongMATcolormapcoord]
    , ["backfacelit" <$$> _phongMATbackfacelit]
    , ["normalmapextendw" <$$> _phongMATnormalmapextendw]
    , ["emitmapextendw" <$$> _phongMATemitmapextendw]
    , ["texture1mapfilter" <$$> _phongMATtexture1mapfilter]
    , ["colorbuffer7rgb" <$$> _phongMATcolorbuffer7rgb]
    , ["diffusemapanisotropy" <$$> _phongMATdiffusemapanisotropy]
    , ["alphafunc" <$$> _phongMATalphafunc]
    , ["rolloff" <$$> _phongMATrolloff]
    , ["alphamapcoord" <$$> _phongMATalphamapcoord]
    , ["writecameradepthtoalpha" <$$> _phongMATwritecameradepthtoalpha]
    , ["darknessemit" <$$> _phongMATdarknessemit]
    , ["rim1mapcoordinterp" <$$> _phongMATrim1mapcoordinterp]
    , ["depthwriting" <$$> _phongMATdepthwriting]
    , ["normalmapanisotropy" <$$> _phongMATnormalmapanisotropy]
    , ["dodeform" <$$> _phongMATdodeform]
    , ["specmapanisotropy" <$$> _phongMATspecmapanisotropy]
    , ["darknessemitmapfilter" <$$> _phongMATdarknessemitmapfilter]
    , ["texture3coord" <$$> _phongMATtexture3coord]
    , ["deformdata" <$$> _phongMATdeformdata]
    , ["emitmapcoord" <$$> _phongMATemitmapcoord]
    , ["rim1mapextendw" <$$> _phongMATrim1mapextendw]
    , ["emitmapcoordinterp" <$$> _phongMATemitmapcoordinterp]
    , ["bumpscale" <$$> _phongMATbumpscale]
    , ["colorbuffer5rgb" <$$> _phongMATcolorbuffer5rgb]
    , ["darknessemitmapextendv" <$$> _phongMATdarknessemitmapextendv]
    , ["texture2mapfilter" <$$> _phongMATtexture2mapfilter]
    , ["destblenda" <$$> _phongMATdestblenda]
    , ["specmapcoord" <$$> _phongMATspecmapcoord]
    , ["texture4coord" <$$> _phongMATtexture4coord]
    , ["rim2enable" <$$> _phongMATrim2enable]
    , ["alphamultlight" <$$> _phongMATalphamultlight]
    , ["colormapextendu" <$$> _phongMATcolormapextendu]
    , ["alphathreshold" <$$> _phongMATalphathreshold]
    , ["alphamapcoordinterp" <$$> _phongMATalphamapcoordinterp]
    , [("normalmap",) . ResolveP <$> _phongMATnormalmap]
    , ["multitexturing" <$$> _phongMATmultitexturing]
    , ["colormapanisotropy" <$$> _phongMATcolormapanisotropy]
    , [("texture4",) . ResolveP <$> _phongMATtexture4]
    , ["depthtest" <$$> _phongMATdepthtest]
    , Just <$> rgbMap "emit" _phongMATemit
    , ["depthfunc" <$$> _phongMATdepthfunc]
    , ["emitmapextendu" <$$> _phongMATemitmapextendu]
    , ["texture1mapextendw" <$$> _phongMATtexture1mapextendw]
    , ["alphafront" <$$> _phongMATalphafront]
    , ["rim2strength" <$$> _phongMATrim2strength]
    , ["texture3mapextendv" <$$> _phongMATtexture3mapextendv]
    , ["texture1coord" <$$> _phongMATtexture1coord]
    , ["texture4mapextendv" <$$> _phongMATtexture4mapextendv]
    , ["specmapfilter" <$$> _phongMATspecmapfilter]
    , ["normalmapextendv" <$$> _phongMATnormalmapextendv]
    , ["normalmapcoordinterp" <$$> _phongMATnormalmapcoordinterp]
    , ["skelrootpath" <$$> _phongMATskelrootpath]
    , ["texture4mapextendu" <$$> _phongMATtexture4mapextendu]
    , ["rim1mapanisotropy" <$$> _phongMATrim1mapanisotropy]
    , ["envmapanisotropy" <$$> _phongMATenvmapanisotropy]
    , ["diffusemapcoordinterp" <$$> _phongMATdiffusemapcoordinterp]
    , ["polygonoffset" <$$> _phongMATpolygonoffset]
    , ["separatealphafunc" <$$> _phongMATseparatealphafunc]
    , ["pcaptdata" <$$> _phongMATpcaptdata]
    , [("darknessemitmap",) . ResolveP <$> _phongMATdarknessemitmap]
    , ["alphaside" <$$> _phongMATalphaside]
    , [("texture3",) . ResolveP <$> _phongMATtexture3]
    , ["envmapfilter" <$$> _phongMATenvmapfilter]
    , ["shadowstrength" <$$> _phongMATshadowstrength]
    , ["specmapextendu" <$$> _phongMATspecmapextendu]
    , Just <$> rgbMap "envmapcolor" _phongMATenvmapcolor
    , ["pcaptpath" <$$> _phongMATpcaptpath]
    , ["envmapextendw" <$$> _phongMATenvmapextendw]
    , ["darknessemitmapextendw" <$$> _phongMATdarknessemitmapextendw]
    , ["rim1width" <$$> _phongMATrim1width]
    , ["envmapextendu" <$$> _phongMATenvmapextendu]
    , ["rim1mapfilter" <$$> _phongMATrim1mapfilter]
    , ["texture1coordinterp" <$$> _phongMATtexture1coordinterp]
    , Just <$> rgbMap "spec2" _phongMATspec2
    , ["ambdiff" <$$> _phongMATambdiff]
    , ["instancetexture" <$$> _phongMATinstancetexture]
    , Just <$> vec3Map' "envmaprotate" _phongMATenvmaprotate
    , ["texture4coordnterp" <$$> _phongMATtexture4coordnterp]
    , ["alphatest" <$$> _phongMATalphatest]
    , ["texture2mapanisotropy" <$$> _phongMATtexture2mapanisotropy]
    , ["colormapfilter" <$$> _phongMATcolormapfilter]
    , ["frontfacelit" <$$> _phongMATfrontfacelit]
    , ["destblend" <$$> _phongMATdestblend]
    , ["rim1mapcoord" <$$> _phongMATrim1mapcoord]
    , ["rim2mapanisotropy" <$$> _phongMATrim2mapanisotropy]
    , ["texture2mapextendw" <$$> _phongMATtexture2mapextendw]
    , Just <$> rgbMap "rim1color" _phongMATrim1color
    , [("texture2",) . ResolveP <$> _phongMATtexture2]
    , ["alphamapextendw" <$$> _phongMATalphamapextendw]
    , Just <$> rgbMap "amb" _phongMATamb
    , ["colorbuffer1rgb" <$$> _phongMATcolorbuffer1rgb]
    , [("rim1strengthramp",) . ResolveP <$> _phongMATrim1strengthramp]
    , ["rim2mapextendv" <$$> _phongMATrim2mapextendv]
    , ["texture2coordinterp" <$$> _phongMATtexture2coordinterp]
    , ["colorbuffer3rgb" <$$> _phongMATcolorbuffer3rgb]
    , [("diffusemap",) . ResolveP <$> _phongMATdiffusemap]
    , ["envmaptype2d" <$$> _phongMATenvmaptype2d]
    , ["rim2center" <$$> _phongMATrim2center]
    , ["cullface" <$$> _phongMATcullface]
    , ["outputshader" <$$> _phongMAToutputshader]
    , [("texture1",) . ResolveP <$> _phongMATtexture1]
    , ["colormapcoordinterp" <$$> _phongMATcolormapcoordinterp]
    , ["postmultalpha" <$$> _phongMATpostmultalpha]
    , ["normalmapfilter" <$$> _phongMATnormalmapfilter]
    , ["diffusemapextendw" <$$> _phongMATdiffusemapextendw]
    , ["diffusemapextendu" <$$> _phongMATdiffusemapextendu]
    , ["rim1strength" <$$> _phongMATrim1strength]
    , ["colormapextendv" <$$> _phongMATcolormapextendv]
    , ["specmapcoordinterp" <$$> _phongMATspecmapcoordinterp]
    , ["rim2mapfilter" <$$> _phongMATrim2mapfilter]
    , ["rim1enable" <$$> _phongMATrim1enable]
    , ["darknessemitmapcoord" <$$> _phongMATdarknessemitmapcoord]
    , [("rim2map",) . ResolveP <$> _phongMATrim2map]
    , [("specmap",) . ResolveP <$> _phongMATspecmap]
    , ["normalmapextendu" <$$> _phongMATnormalmapextendu]
    , [("colormap",) . ResolveP <$> _phongMATcolormap]
    , ["texture3mapextendu" <$$> _phongMATtexture3mapextendu]
    , [("mat",) . ResolveP <$> _phongMATmat]
    , ["rim1mapextendu" <$$> _phongMATrim1mapextendu]
    , ["rim2mapextendu" <$$> _phongMATrim2mapextendu]
    , ["rim2width" <$$> _phongMATrim2width]
    , ["emitmapanisotropy" <$$> _phongMATemitmapanisotropy]
    , ["diffusemapcoord" <$$> _phongMATdiffusemapcoord]
    , Just <$> rgbMap "diff" _phongMATdiff
    , ["diffusemapextendv" <$$> _phongMATdiffusemapextendv]
    , ["texture3coordinterp" <$$> _phongMATtexture3coordinterp]
    , [("emitmap",) . ResolveP <$> _phongMATemitmap]
    , ["texture3mapanisotropy" <$$> _phongMATtexture3mapanisotropy]
    , ["polygonoffsetunits" <$$> _phongMATpolygonoffsetunits]
    , ["colorbuffer2rgb" <$$> _phongMATcolorbuffer2rgb]
    , ["multitexexpr" <$$> _phongMATmultitexexpr]
    , ["texture2coord" <$$> _phongMATtexture2coord]
    , ["colorbuffer4rgb" <$$> _phongMATcolorbuffer4rgb]
    , ["wirewidth" <$$> _phongMATwirewidth]
    , [("rim2strengthramp",) . ResolveP <$> _phongMATrim2strengthramp]
    , ["blending" <$$> _phongMATblending]
    , [("envmap",) . ResolveP <$> _phongMATenvmap]
    , ["alphamapfilter" <$$> _phongMATalphamapfilter]
    , ["texture3mapfilter" <$$> _phongMATtexture3mapfilter]
    , ["texture4mapfilter" <$$> _phongMATtexture4mapfilter]
    , ["texture1mapextendu" <$$> _phongMATtexture1mapextendu]
    , ["envmapextendv" <$$> _phongMATenvmapextendv]
    , ["texture1mapanisotropy" <$$> _phongMATtexture1mapanisotropy]
    , ["diffusemapfilter" <$$> _phongMATdiffusemapfilter]
    , ["rim2mapextendw" <$$> _phongMATrim2mapextendw]
    , Just <$> rgbMap "shadowcolor" _phongMATshadowcolor
    , ["emitmapextendv" <$$> _phongMATemitmapextendv]
    , ["texture4mapanisotropy" <$$> _phongMATtexture4mapanisotropy]
    , ["texture2mapextendv" <$$> _phongMATtexture2mapextendv]
    , ["polygonoffsetfactor" <$$> _phongMATpolygonoffsetfactor]
    , Just <$> rgbMap "rim2color" _phongMATrim2color
    , ["texture1mapextendv" <$$> _phongMATtexture1mapextendv]
    , ["parallaxmapping" <$$> _phongMATparallaxmapping]
    , ["colorbuffer6rgb" <$$> _phongMATcolorbuffer6rgb]
    , ["shininess" <$$> _phongMATshininess]
    , ["colormapextendw" <$$> _phongMATcolormapextendw]
    , ["darknessemitmapcoordinterp" <$$> _phongMATdarknessemitmapcoordinterp]
    , ["rim1mapextendv" <$$> _phongMATrim1mapextendv]
    , ["rim1center" <$$> _phongMATrim1center]
    , ["texture2mapextendu" <$$> _phongMATtexture2mapextendu]
    , ["wireframe" <$$> _phongMATwireframe]
    , ["alphamode" <$$> _phongMATalphamode]
    , [("rim1map",) . ResolveP <$> _phongMATrim1map]
    , Just <$> rgbMap "constant" _phongMATconstant
    , Just <$> rgbMap "darknessemitcolor" _phongMATdarknessemitcolor
    , [("targetsop",) . ResolveP <$> _phongMATtargetsop]
    , ["shininess2" <$$> _phongMATshininess2]
    , ["alphamapanisotropy" <$$> _phongMATalphamapanisotropy]
    , ["normalmapcoord" <$$> _phongMATnormalmapcoord]
    , ["texture4mapextendw" <$$> _phongMATtexture4mapextendw]
    , ["darknessemitmapanisotropy" <$$> _phongMATdarknessemitmapanisotropy]
    , ["specmapextendw" <$$> _phongMATspecmapextendw]
    , ["alphamapextendv" <$$> _phongMATalphamapextendv]
    , ["texture3mapextendw" <$$> _phongMATtexture3mapextendw]
    , Just <$> rgbMap "spec" _phongMATspec
    , ["rim2mapcoord" <$$> _phongMATrim2mapcoord]
    , ["emitmapfilter" <$$> _phongMATemitmapfilter]
    , ["alphamapextendu" <$$> _phongMATalphamapextendu]
    , ["rim2mapcoordinterp" <$$> _phongMATrim2mapcoordinterp]
    , ["srcblend" <$$> _phongMATsrcblend]
    , [("alphamap",) . ResolveP <$> _phongMATalphamap]
    , ["parallaxclamp" <$$> _phongMATparallaxclamp]
    , ["srcblenda" <$$> _phongMATsrcblenda]
    , ["specmapextendv" <$$> _phongMATspecmapextendv]]
  pars (SwitchMAT {..}) = catMaybes . mconcat $ [ ["pcaptpath" <$$> _switchMATpcaptpath]
    , ["wireframe" <$$> _switchMATwireframe]
    , ["destblenda" <$$> _switchMATdestblenda]
    , [("mat",) . ResolveP <$> _switchMATmat]
    , ["depthfunc" <$$> _switchMATdepthfunc]
    , ["cullface" <$$> _switchMATcullface]
    , ["skelrootpath" <$$> _switchMATskelrootpath]
    , ["alphathreshold" <$$> _switchMATalphathreshold]
    , ["alphafunc" <$$> _switchMATalphafunc]
    , ["depthtest" <$$> _switchMATdepthtest]
    , ["polygonoffsetunits" <$$> _switchMATpolygonoffsetunits]
    , ["index" <$$> _switchMATindex]
    , ["polygonoffsetfactor" <$$> _switchMATpolygonoffsetfactor]
    , ["polygonoffset" <$$> _switchMATpolygonoffset]
    , ["separatealphafunc" <$$> _switchMATseparatealphafunc]
    , ["depthwriting" <$$> _switchMATdepthwriting]
    , ["destblend" <$$> _switchMATdestblend]
    , ["pcaptdata" <$$> _switchMATpcaptdata]
    , ["dodeform" <$$> _switchMATdodeform]
    , ["deformdata" <$$> _switchMATdeformdata]
    , ["wirewidth" <$$> _switchMATwirewidth]
    , [("targetsop",) . ResolveP <$> _switchMATtargetsop]
    , ["srcblend" <$$> _switchMATsrcblend]
    , ["blending" <$$> _switchMATblending]
    , ["alphatest" <$$> _switchMATalphatest]
    , ["srcblenda" <$$> _switchMATsrcblenda]]
  pars (DepthMAT {..}) = catMaybes . mconcat $ [ ["pcaptpath" <$$> _depthMATpcaptpath]
    , ["wireframe" <$$> _depthMATwireframe]
    , ["destblenda" <$$> _depthMATdestblenda]
    , [("mat",) . ResolveP <$> _depthMATmat]
    , ["depthfunc" <$$> _depthMATdepthfunc]
    , ["cullface" <$$> _depthMATcullface]
    , ["skelrootpath" <$$> _depthMATskelrootpath]
    , ["destblend" <$$> _depthMATdestblend]
    , ["alphafunc" <$$> _depthMATalphafunc]
    , ["depthtest" <$$> _depthMATdepthtest]
    , ["polygonoffsetunits" <$$> _depthMATpolygonoffsetunits]
    , ["polygonoffsetfactor" <$$> _depthMATpolygonoffsetfactor]
    , ["polygonoffset" <$$> _depthMATpolygonoffset]
    , ["separatealphafunc" <$$> _depthMATseparatealphafunc]
    , ["depthwriting" <$$> _depthMATdepthwriting]
    , ["alphathreshold" <$$> _depthMATalphathreshold]
    , ["pcaptdata" <$$> _depthMATpcaptdata]
    , ["dodeform" <$$> _depthMATdodeform]
    , ["deformdata" <$$> _depthMATdeformdata]
    , ["wirewidth" <$$> _depthMATwirewidth]
    , [("targetsop",) . ResolveP <$> _depthMATtargetsop]
    , ["srcblend" <$$> _depthMATsrcblend]
    , ["blending" <$$> _depthMATblending]
    , ["alphatest" <$$> _depthMATalphatest]
    , ["srcblenda" <$$> _depthMATsrcblenda]]
  pars (SelectMAT {..}) = catMaybes . mconcat $ [ ["pcaptpath" <$$> _selectMATpcaptpath]
    , ["wireframe" <$$> _selectMATwireframe]
    , ["destblenda" <$$> _selectMATdestblenda]
    , [("mat",) . ResolveP <$> _selectMATmat]
    , ["depthfunc" <$$> _selectMATdepthfunc]
    , [("selectmat",) . ResolveP <$> _selectMATselectmat]
    , ["skelrootpath" <$$> _selectMATskelrootpath]
    , ["destblend" <$$> _selectMATdestblend]
    , ["alphafunc" <$$> _selectMATalphafunc]
    , ["cullface" <$$> _selectMATcullface]
    , ["depthtest" <$$> _selectMATdepthtest]
    , ["polygonoffsetunits" <$$> _selectMATpolygonoffsetunits]
    , ["polygonoffsetfactor" <$$> _selectMATpolygonoffsetfactor]
    , ["polygonoffset" <$$> _selectMATpolygonoffset]
    , ["separatealphafunc" <$$> _selectMATseparatealphafunc]
    , ["depthwriting" <$$> _selectMATdepthwriting]
    , ["alphathreshold" <$$> _selectMATalphathreshold]
    , ["pcaptdata" <$$> _selectMATpcaptdata]
    , ["dodeform" <$$> _selectMATdodeform]
    , ["deformdata" <$$> _selectMATdeformdata]
    , ["wirewidth" <$$> _selectMATwirewidth]
    , [("targetsop",) . ResolveP <$> _selectMATtargetsop]
    , ["srcblend" <$$> _selectMATsrcblend]
    , ["blending" <$$> _selectMATblending]
    , ["alphatest" <$$> _selectMATalphatest]
    , ["srcblenda" <$$> _selectMATsrcblenda]]
  pars (ConstantMAT {..}) = catMaybes . mconcat $ [ ["pcaptpath" <$$> _constantMATpcaptpath]
    , [("colormap",) . ResolveP <$> _constantMATcolormap]
    , ["destblenda" <$$> _constantMATdestblenda]
    , [("mat",) . ResolveP <$> _constantMATmat]
    , ["alpha" <$$> _constantMATalpha]
    , ["colormapextendu" <$$> _constantMATcolormapextendu]
    , ["colormapcoord" <$$> _constantMATcolormapcoord]
    , ["cullface" <$$> _constantMATcullface]
    , ["skelrootpath" <$$> _constantMATskelrootpath]
    , ["wireframe" <$$> _constantMATwireframe]
    , ["colormapcoordinterp" <$$> _constantMATcolormapcoordinterp]
    , ["alphafunc" <$$> _constantMATalphafunc]
    , ["alphathreshold" <$$> _constantMATalphathreshold]
    , ["depthtest" <$$> _constantMATdepthtest]
    , ["applyprojmaps" <$$> _constantMATapplyprojmaps]
    , ["colormapfilter" <$$> _constantMATcolormapfilter]
    , ["polygonoffsetfactor" <$$> _constantMATpolygonoffsetfactor]
    , ["polygonoffset" <$$> _constantMATpolygonoffset]
    , ["separatealphafunc" <$$> _constantMATseparatealphafunc]
    , ["colormapanisotropy" <$$> _constantMATcolormapanisotropy]
    , ["polygonoffsetunits" <$$> _constantMATpolygonoffsetunits]
    , ["destblend" <$$> _constantMATdestblend]
    , ["colormapextendv" <$$> _constantMATcolormapextendv]
    , ["pcaptdata" <$$> _constantMATpcaptdata]
    , ["dodeform" <$$> _constantMATdodeform]
    , ["srcblend" <$$> _constantMATsrcblend]
    , ["postmultalpha" <$$> _constantMATpostmultalpha]
    , ["wirewidth" <$$> _constantMATwirewidth]
    , Just <$> rgbMap "color" _constantMATcolor
    , ["deformdata" <$$> _constantMATdeformdata]
    , [("targetsop",) . ResolveP <$> _constantMATtargetsop]
    , ["colormapextendw" <$$> _constantMATcolormapextendw]
    , ["blending" <$$> _constantMATblending]
    , ["alphatest" <$$> _constantMATalphatest]
    , ["depthfunc" <$$> _constantMATdepthfunc]
    , ["depthwriting" <$$> _constantMATdepthwriting]
    , ["srcblenda" <$$> _constantMATsrcblenda]]
  pars (WireframeMAT {..}) = catMaybes . mconcat $ [ ["pcaptpath" <$$> _wireframeMATpcaptpath]
    , ["wireframe" <$$> _wireframeMATwireframe]
    , ["destblenda" <$$> _wireframeMATdestblenda]
    , [("mat",) . ResolveP <$> _wireframeMATmat]
    , ["alpha" <$$> _wireframeMATalpha]
    , ["wireframemode" <$$> _wireframeMATwireframemode]
    , ["linewidth" <$$> _wireframeMATlinewidth]
    , ["cullface" <$$> _wireframeMATcullface]
    , ["skelrootpath" <$$> _wireframeMATskelrootpath]
    , ["destblend" <$$> _wireframeMATdestblend]
    , ["alphafunc" <$$> _wireframeMATalphafunc]
    , ["alphathreshold" <$$> _wireframeMATalphathreshold]
    , ["depthtest" <$$> _wireframeMATdepthtest]
    , Just <$> rgbMap "color" _wireframeMATcolor
    , ["polygonoffsetunits" <$$> _wireframeMATpolygonoffsetunits]
    , ["polygonoffsetfactor" <$$> _wireframeMATpolygonoffsetfactor]
    , ["polygonoffset" <$$> _wireframeMATpolygonoffset]
    , ["separatealphafunc" <$$> _wireframeMATseparatealphafunc]
    , ["depthwriting" <$$> _wireframeMATdepthwriting]
    , ["depthfunc" <$$> _wireframeMATdepthfunc]
    , ["pcaptdata" <$$> _wireframeMATpcaptdata]
    , ["dodeform" <$$> _wireframeMATdodeform]
    , ["deformdata" <$$> _wireframeMATdeformdata]
    , ["wirewidth" <$$> _wireframeMATwirewidth]
    , [("targetsop",) . ResolveP <$> _wireframeMATtargetsop]
    , ["srcblend" <$$> _wireframeMATsrcblend]
    , ["blending" <$$> _wireframeMATblending]
    , ["alphatest" <$$> _wireframeMATalphatest]
    , ["srcblenda" <$$> _wireframeMATsrcblenda]]
  pars (NullMAT {..}) = catMaybes . mconcat $ [ ["pcaptpath" <$$> _nullMATpcaptpath]
    , ["wireframe" <$$> _nullMATwireframe]
    , ["destblenda" <$$> _nullMATdestblenda]
    , [("mat",) . ResolveP <$> _nullMATmat]
    , ["depthfunc" <$$> _nullMATdepthfunc]
    , ["cullface" <$$> _nullMATcullface]
    , ["skelrootpath" <$$> _nullMATskelrootpath]
    , ["destblend" <$$> _nullMATdestblend]
    , ["alphafunc" <$$> _nullMATalphafunc]
    , ["depthtest" <$$> _nullMATdepthtest]
    , ["polygonoffsetunits" <$$> _nullMATpolygonoffsetunits]
    , ["polygonoffsetfactor" <$$> _nullMATpolygonoffsetfactor]
    , ["polygonoffset" <$$> _nullMATpolygonoffset]
    , ["separatealphafunc" <$$> _nullMATseparatealphafunc]
    , ["depthwriting" <$$> _nullMATdepthwriting]
    , ["alphathreshold" <$$> _nullMATalphathreshold]
    , ["pcaptdata" <$$> _nullMATpcaptdata]
    , ["dodeform" <$$> _nullMATdodeform]
    , ["deformdata" <$$> _nullMATdeformdata]
    , ["wirewidth" <$$> _nullMATwirewidth]
    , [("targetsop",) . ResolveP <$> _nullMATtargetsop]
    , ["srcblend" <$$> _nullMATsrcblend]
    , ["blending" <$$> _nullMATblending]
    , ["alphatest" <$$> _nullMATalphatest]
    , ["srcblenda" <$$> _nullMATsrcblenda]]
  pars (PbrMAT {..}) = catMaybes . mconcat $ [ ["applypointcolor" <$$> _pbrMATapplypointcolor]
    , ["darknessemitmapextendu" <$$> _pbrMATdarknessemitmapextendu]
    , ["roughnessmapextendu" <$$> _pbrMATroughnessmapextendu]
    , ["backfacelit" <$$> _pbrMATbackfacelit]
    , ["normalmapextendw" <$$> _pbrMATnormalmapextendw]
    , ["emitmapextendw" <$$> _pbrMATemitmapextendw]
    , ["colorbuffer7rgb" <$$> _pbrMATcolorbuffer7rgb]
    , ["alphafunc" <$$> _pbrMATalphafunc]
    , ["rolloff" <$$> _pbrMATrolloff]
    , ["roughnessmapfilter" <$$> _pbrMATroughnessmapfilter]
    , ["writecameradepthtoalpha" <$$> _pbrMATwritecameradepthtoalpha]
    , ["darknessemit" <$$> _pbrMATdarknessemit]
    , ["rim1mapfilter" <$$> _pbrMATrim1mapfilter]
    , ["depthwriting" <$$> _pbrMATdepthwriting]
    , ["ambientocclusionmapfilter" <$$> _pbrMATambientocclusionmapfilter]
    , ["normalmapanisotropy" <$$> _pbrMATnormalmapanisotropy]
    , ["dodeform" <$$> _pbrMATdodeform]
    , ["darknessemitmapfilter" <$$> _pbrMATdarknessemitmapfilter]
    , ["deformdata" <$$> _pbrMATdeformdata]
    , ["specularlevelmapextendu" <$$> _pbrMATspecularlevelmapextendu]
    , ["rim1mapextendw" <$$> _pbrMATrim1mapextendw]
    , ["emitmapcoordinterp" <$$> _pbrMATemitmapcoordinterp]
    , ["bumpscale" <$$> _pbrMATbumpscale]
    , ["metallicmapcoord" <$$> _pbrMATmetallicmapcoord]
    , ["darknessemitmapextendv" <$$> _pbrMATdarknessemitmapextendv]
    , ["destblenda" <$$> _pbrMATdestblenda]
    , ["outputshader" <$$> _pbrMAToutputshader]
    , ["rim2enable" <$$> _pbrMATrim2enable]
    , ["alphamultlight" <$$> _pbrMATalphamultlight]
    , ["envlightquality" <$$> _pbrMATenvlightquality]
    , ["alphathreshold" <$$> _pbrMATalphathreshold]
    , ["alphamapcoordinterp" <$$> _pbrMATalphamapcoordinterp]
    , ["specularlevelmapchannelsource" <$$> _pbrMATspecularlevelmapchannelsource]
    , [("normalmap",) . ResolveP <$> _pbrMATnormalmap]
    , ["depthtest" <$$> _pbrMATdepthtest]
    , ["ambientocclusionmapextendu" <$$> _pbrMATambientocclusionmapextendu]
    , Just <$> rgbMap "emit" _pbrMATemit
    , ["depthfunc" <$$> _pbrMATdepthfunc]
    , ["emitmapextendu" <$$> _pbrMATemitmapextendu]
    , [("ambientocclusionmap",) . ResolveP <$> _pbrMATambientocclusionmap]
    , [("roughnessmap",) . ResolveP <$> _pbrMATroughnessmap]
    , ["alphafront" <$$> _pbrMATalphafront]
    , ["specularlevelmapextendw" <$$> _pbrMATspecularlevelmapextendw]
    , ["alphatest" <$$> _pbrMATalphatest]
    , ["specularlevelmapfilter" <$$> _pbrMATspecularlevelmapfilter]
    , ["heightmapcoord" <$$> _pbrMATheightmapcoord]
    , ["normalmapextendv" <$$> _pbrMATnormalmapextendv]
    , ["normalmapcoordinterp" <$$> _pbrMATnormalmapcoordinterp]
    , ["skelrootpath" <$$> _pbrMATskelrootpath]
    , ["roughnessmapcoord" <$$> _pbrMATroughnessmapcoord]
    , ["heightmapextendv" <$$> _pbrMATheightmapextendv]
    , ["alphamapcoord" <$$> _pbrMATalphamapcoord]
    , ["rim1mapanisotropy" <$$> _pbrMATrim1mapanisotropy]
    , ["wirewidth" <$$> _pbrMATwirewidth]
    , ["roughnessmapchannelsource" <$$> _pbrMATroughnessmapchannelsource]
    , ["separatealphafunc" <$$> _pbrMATseparatealphafunc]
    , ["rim2mapfilter" <$$> _pbrMATrim2mapfilter]
    , ["pcaptdata" <$$> _pbrMATpcaptdata]
    , [("darknessemitmap",) . ResolveP <$> _pbrMATdarknessemitmap]
    , ["alphaside" <$$> _pbrMATalphaside]
    , ["heightmapanisotropy" <$$> _pbrMATheightmapanisotropy]
    , ["shadowstrength" <$$> _pbrMATshadowstrength]
    , ["roughness" <$$> _pbrMATroughness]
    , ["pcaptpath" <$$> _pbrMATpcaptpath]
    , Just <$> rgbMap "basecolor" _pbrMATbasecolor
    , ["rim1width" <$$> _pbrMATrim1width]
    , ["roughnessmapanisotropy" <$$> _pbrMATroughnessmapanisotropy]
    , ["metalnessmapfilter" <$$> _pbrMATmetalnessmapfilter]
    , ["rim1mapcoordinterp" <$$> _pbrMATrim1mapcoordinterp]
    , ["basecolormapextendw" <$$> _pbrMATbasecolormapextendw]
    , ["heightmapextendu" <$$> _pbrMATheightmapextendu]
    , ["roughnessmapcoordinterp" <$$> _pbrMATroughnessmapcoordinterp]
    , ["ambientocclusionmapcoordinterp" <$$> _pbrMATambientocclusionmapcoordinterp]
    , ["instancetexture" <$$> _pbrMATinstancetexture]
    , ["normalmapcoord" <$$> _pbrMATnormalmapcoord]
    , ["rim2strength" <$$> _pbrMATrim2strength]
    , ["heightmapextendw" <$$> _pbrMATheightmapextendw]
    , ["frontfacelit" <$$> _pbrMATfrontfacelit]
    , ["destblend" <$$> _pbrMATdestblend]
    , ["rim1mapcoord" <$$> _pbrMATrim1mapcoord]
    , ["rim2mapanisotropy" <$$> _pbrMATrim2mapanisotropy]
    , [("metallicmap",) . ResolveP <$> _pbrMATmetallicmap]
    , Just <$> rgbMap "rim1color" _pbrMATrim1color
    , ["metalnessmapextendu" <$$> _pbrMATmetalnessmapextendu]
    , ["specularlevel" <$$> _pbrMATspecularlevel]
    , ["alphamapextendw" <$$> _pbrMATalphamapextendw]
    , Just <$> rgbMap "constant" _pbrMATconstant
    , ["colorbuffer1rgb" <$$> _pbrMATcolorbuffer1rgb]
    , ["rim2mapextendv" <$$> _pbrMATrim2mapextendv]
    , ["colorbuffer3rgb" <$$> _pbrMATcolorbuffer3rgb]
    , [("substance",) . ResolveP <$> _pbrMATsubstance]
    , ["basecolormapcoord" <$$> _pbrMATbasecolormapcoord]
    , ["ambientocclusionmapextendv" <$$> _pbrMATambientocclusionmapextendv]
    , ["rim2center" <$$> _pbrMATrim2center]
    , ["cullface" <$$> _pbrMATcullface]
    , ["specularlevelmapcoordinterp" <$$> _pbrMATspecularlevelmapcoordinterp]
    , ["metallicmapcoordinterp" <$$> _pbrMATmetallicmapcoordinterp]
    , ["ambientocclusionmapcoord" <$$> _pbrMATambientocclusionmapcoord]
    , ["parallaxmapping" <$$> _pbrMATparallaxmapping]
    , ["postmultalpha" <$$> _pbrMATpostmultalpha]
    , ["normalmapfilter" <$$> _pbrMATnormalmapfilter]
    , ["darknessemitmapextendw" <$$> _pbrMATdarknessemitmapextendw]
    , ["rim1strength" <$$> _pbrMATrim1strength]
    , [("heightmap",) . ResolveP <$> _pbrMATheightmap]
    , ["rim1enable" <$$> _pbrMATrim1enable]
    , ["darknessemitmapcoord" <$$> _pbrMATdarknessemitmapcoord]
    , ["metallic" <$$> _pbrMATmetallic]
    , [("rim2map",) . ResolveP <$> _pbrMATrim2map]
    , ["heightmapcoordinterp" <$$> _pbrMATheightmapcoordinterp]
    , ["normalmapextendu" <$$> _pbrMATnormalmapextendu]
    , ["roughnessmapextendw" <$$> _pbrMATroughnessmapextendw]
    , ["specularlevelmapextendv" <$$> _pbrMATspecularlevelmapextendv]
    , [("mat",) . ResolveP <$> _pbrMATmat]
    , ["rim1mapextendu" <$$> _pbrMATrim1mapextendu]
    , ["rim2mapextendu" <$$> _pbrMATrim2mapextendu]
    , ["basecolormapanisotropy" <$$> _pbrMATbasecolormapanisotropy]
    , ["rim2width" <$$> _pbrMATrim2width]
    , ["emitmapanisotropy" <$$> _pbrMATemitmapanisotropy]
    , ["heightmapfilter" <$$> _pbrMATheightmapfilter]
    , ["basecolormapextendv" <$$> _pbrMATbasecolormapextendv]
    , [("emitmap",) . ResolveP <$> _pbrMATemitmap]
    , ["polygonoffsetunits" <$$> _pbrMATpolygonoffsetunits]
    , ["colorbuffer2rgb" <$$> _pbrMATcolorbuffer2rgb]
    , ["colorbuffer4rgb" <$$> _pbrMATcolorbuffer4rgb]
    , [("basecolormap",) . ResolveP <$> _pbrMATbasecolormap]
    , ["specularlevelmapcoord" <$$> _pbrMATspecularlevelmapcoord]
    , [("rim2strengthramp",) . ResolveP <$> _pbrMATrim2strengthramp]
    , ["blending" <$$> _pbrMATblending]
    , ["colorbuffer5rgb" <$$> _pbrMATcolorbuffer5rgb]
    , ["alphamapfilter" <$$> _pbrMATalphamapfilter]
    , ["basecolormapfilter" <$$> _pbrMATbasecolormapfilter]
    , ["basecolormapextendu" <$$> _pbrMATbasecolormapextendu]
    , ["rim2mapextendw" <$$> _pbrMATrim2mapextendw]
    , ["heightmapchannelsource" <$$> _pbrMATheightmapchannelsource]
    , Just <$> rgbMap "shadowcolor" _pbrMATshadowcolor
    , ["emitmapextendv" <$$> _pbrMATemitmapextendv]
    , ["ambientocclusionmapextendw" <$$> _pbrMATambientocclusionmapextendw]
    , ["ambientocclusionmapanisotropy" <$$> _pbrMATambientocclusionmapanisotropy]
    , ["polygonoffsetfactor" <$$> _pbrMATpolygonoffsetfactor]
    , ["metallicmapchannelsource" <$$> _pbrMATmetallicmapchannelsource]
    , Just <$> rgbMap "rim2color" _pbrMATrim2color
    , ["roughnessmapextendv" <$$> _pbrMATroughnessmapextendv]
    , ["ambientocclusion" <$$> _pbrMATambientocclusion]
    , ["colorbuffer6rgb" <$$> _pbrMATcolorbuffer6rgb]
    , ["darknessemitmapcoordinterp" <$$> _pbrMATdarknessemitmapcoordinterp]
    , ["rim1mapextendv" <$$> _pbrMATrim1mapextendv]
    , ["rim1center" <$$> _pbrMATrim1center]
    , ["metalnessmapextendv" <$$> _pbrMATmetalnessmapextendv]
    , ["emitmapcoord" <$$> _pbrMATemitmapcoord]
    , ["wireframe" <$$> _pbrMATwireframe]
    , ["alphamode" <$$> _pbrMATalphamode]
    , [("rim1map",) . ResolveP <$> _pbrMATrim1map]
    , Just <$> rgbMap "darknessemitcolor" _pbrMATdarknessemitcolor
    , [("targetsop",) . ResolveP <$> _pbrMATtargetsop]
    , ["alphamapanisotropy" <$$> _pbrMATalphamapanisotropy]
    , ["metalnessmapanisotropy" <$$> _pbrMATmetalnessmapanisotropy]
    , ["polygonoffset" <$$> _pbrMATpolygonoffset]
    , [("rim1strengthramp",) . ResolveP <$> _pbrMATrim1strengthramp]
    , ["darknessemitmapanisotropy" <$$> _pbrMATdarknessemitmapanisotropy]
    , ["metalnessmapextendw" <$$> _pbrMATmetalnessmapextendw]
    , [("specularlevelmap",) . ResolveP <$> _pbrMATspecularlevelmap]
    , ["alphamapextendv" <$$> _pbrMATalphamapextendv]
    , ["specularlevelmapanisotropy" <$$> _pbrMATspecularlevelmapanisotropy]
    , ["rim2mapcoord" <$$> _pbrMATrim2mapcoord]
    , ["emitmapfilter" <$$> _pbrMATemitmapfilter]
    , ["basecolormapcoordinterp" <$$> _pbrMATbasecolormapcoordinterp]
    , ["alphamapextendu" <$$> _pbrMATalphamapextendu]
    , ["rim2mapcoordinterp" <$$> _pbrMATrim2mapcoordinterp]
    , ["srcblend" <$$> _pbrMATsrcblend]
    , [("alphamap",) . ResolveP <$> _pbrMATalphamap]
    , ["parallaxclamp" <$$> _pbrMATparallaxclamp]
    , ["ambientocclusionmapchannelsource" <$$> _pbrMATambientocclusionmapchannelsource]
    , ["srcblenda" <$$> _pbrMATsrcblenda]]
  pars (GlslMAT {..}) = catMaybes . mconcat $ [ Just <$> vec4Map' "value3" _glslMATvalue3
    , ["top15extendw" <$$> _glslMATtop15extendw]
    , ["glslversion" <$$> _glslMATglslversion]
    , ["top3extendv" <$$> _glslMATtop3extendv]
    , ["top5extendv" <$$> _glslMATtop5extendv]
    , ["cullface" <$$> _glslMATcullface]
    , ["top9filter" <$$> _glslMATtop9filter]
    , ["alphafunc" <$$> _glslMATalphafunc]
    , [("gdat",) . ResolveP <$> _glslMATgdat]
    , ["sampler7" <$$> _glslMATsampler7]
    , ["sampler3" <$$> _glslMATsampler3]
    , ["top13extendw" <$$> _glslMATtop13extendw]
    , Just <$> vec4Map' "value10" _glslMATvalue10
    , ["top12anisotropy" <$$> _glslMATtop12anisotropy]
    , ["uniname12" <$$> _glslMATuniname12]
    , ["top1extendv" <$$> _glslMATtop1extendv]
    , ["chanscope8" <$$> _glslMATchanscope8]
    , ["chanscope7" <$$> _glslMATchanscope7]
    , ["top6extendu" <$$> _glslMATtop6extendu]
    , ["top11extendw" <$$> _glslMATtop11extendw]
    , ["top0filter" <$$> _glslMATtop0filter]
    , ["uniname10" <$$> _glslMATuniname10]
    , ["chopuniname7" <$$> _glslMATchopuniname7]
    , ["uniname11" <$$> _glslMATuniname11]
    , Just <$> vec4Map' "value19" _glslMATvalue19
    , [("chop6",) . ResolveP <$> _glslMATchop6]
    , ["chopunitype2" <$$> _glslMATchopunitype2]
    , ["clearuniformnames" <$$> _glslMATclearuniformnames]
    , ["uniname5" <$$> _glslMATuniname5]
    , Just <$> vec4Map' "value9" _glslMATvalue9
    , ["uniname4" <$$> _glslMATuniname4]
    , ["sampler11" <$$> _glslMATsampler11]
    , ["chopuniname9" <$$> _glslMATchopuniname9]
    , [("top6",) . ResolveP <$> _glslMATtop6]
    , ["top11filter" <$$> _glslMATtop11filter]
    , ["top4extendu" <$$> _glslMATtop4extendu]
    , Just <$> vec4Map' "value13" _glslMATvalue13
    , ["chopunitype8" <$$> _glslMATchopunitype8]
    , ["sampler1" <$$> _glslMATsampler1]
    , ["sampler13" <$$> _glslMATsampler13]
    , [("vdat",) . ResolveP <$> _glslMATvdat]
    , ["top6anisotropy" <$$> _glslMATtop6anisotropy]
    , ["uniname14" <$$> _glslMATuniname14]
    , ["choparraytype8" <$$> _glslMATchoparraytype8]
    , Just <$> vec4Map' "value17" _glslMATvalue17
    , ["top2extendu" <$$> _glslMATtop2extendu]
    , ["chopuniname8" <$$> _glslMATchopuniname8]
    , ["top14anisotropy" <$$> _glslMATtop14anisotropy]
    , ["top5anisotropy" <$$> _glslMATtop5anisotropy]
    , ["chopunitype3" <$$> _glslMATchopunitype3]
    , ["chopunitype7" <$$> _glslMATchopunitype7]
    , ["uniname2" <$$> _glslMATuniname2]
    , Just <$> vec4Map' "value6" _glslMATvalue6
    , ["top13extendu" <$$> _glslMATtop13extendu]
    , ["top7extendw" <$$> _glslMATtop7extendw]
    , ["top5extendu" <$$> _glslMATtop5extendu]
    , ["uniname0" <$$> _glslMATuniname0]
    , ["chopunitype5" <$$> _glslMATchopunitype5]
    , Just <$> vec4Map' "value21" _glslMATvalue21
    , ["depthtest" <$$> _glslMATdepthtest]
    , ["top4extendw" <$$> _glslMATtop4extendw]
    , ["sampler8" <$$> _glslMATsampler8]
    , ["chopunitype6" <$$> _glslMATchopunitype6]
    , Just <$> vec4Map' "value4" _glslMATvalue4
    , ["top10anisotropy" <$$> _glslMATtop10anisotropy]
    , Just <$> vec4Map' "value15" _glslMATvalue15
    , ["skelrootpath" <$$> _glslMATskelrootpath]
    , [("chop3",) . ResolveP <$> _glslMATchop3]
    , ["top6filter" <$$> _glslMATtop6filter]
    , ["unimatrixname4" <$$> _glslMATunimatrixname4]
    , [("top15",) . ResolveP <$> _glslMATtop15]
    , ["uniname20" <$$> _glslMATuniname20]
    , [("top7",) . ResolveP <$> _glslMATtop7]
    , ["uniname3" <$$> _glslMATuniname3]
    , [("top12",) . ResolveP <$> _glslMATtop12]
    , ["polygonoffset" <$$> _glslMATpolygonoffset]
    , ["separatealphafunc" <$$> _glslMATseparatealphafunc]
    , ["chopuniname2" <$$> _glslMATchopuniname2]
    , ["sampler14" <$$> _glslMATsampler14]
    , ["uniname9" <$$> _glslMATuniname9]
    , ["top3anisotropy" <$$> _glslMATtop3anisotropy]
    , [("chop5",) . ResolveP <$> _glslMATchop5]
    , ["chopuniname0" <$$> _glslMATchopuniname0]
    , ["choparraytype6" <$$> _glslMATchoparraytype6]
    , [("top3",) . ResolveP <$> _glslMATtop3]
    , ["chanscope1" <$$> _glslMATchanscope1]
    , [("top10",) . ResolveP <$> _glslMATtop10]
    , ["loaduniformnames" <$$> _glslMATloaduniformnames]
    , ["chopuniname4" <$$> _glslMATchopuniname4]
    , ["chopuniname1" <$$> _glslMATchopuniname1]
    , ["top1extendu" <$$> _glslMATtop1extendu]
    , ["top7filter" <$$> _glslMATtop7filter]
    , Just <$> vec4Map' "value8" _glslMATvalue8
    , ["top9extendv" <$$> _glslMATtop9extendv]
    , ["top7extendu" <$$> _glslMATtop7extendu]
    , ["choparraytype1" <$$> _glslMATchoparraytype1]
    , ["top2anisotropy" <$$> _glslMATtop2anisotropy]
    , ["top1extendw" <$$> _glslMATtop1extendw]
    , ["uniname13" <$$> _glslMATuniname13]
    , ["top2extendv" <$$> _glslMATtop2extendv]
    , ["top7anisotropy" <$$> _glslMATtop7anisotropy]
    , ["chopunitype0" <$$> _glslMATchopunitype0]
    , ["destblend" <$$> _glslMATdestblend]
    , [("top4",) . ResolveP <$> _glslMATtop4]
    , ["top0extendu" <$$> _glslMATtop0extendu]
    , ["chanscope0" <$$> _glslMATchanscope0]
    , ["top13anisotropy" <$$> _glslMATtop13anisotropy]
    , ["alphatest" <$$> _glslMATalphatest]
    , Just <$> vec4Map' "value0" _glslMATvalue0
    , ["top12extendu" <$$> _glslMATtop12extendu]
    , ["choparraytype4" <$$> _glslMATchoparraytype4]
    , ["chopunitype4" <$$> _glslMATchopunitype4]
    , ["top8anisotropy" <$$> _glslMATtop8anisotropy]
    , ["top1anisotropy" <$$> _glslMATtop1anisotropy]
    , ["top15extendu" <$$> _glslMATtop15extendu]
    , ["top14extendu" <$$> _glslMATtop14extendu]
    , [("chop8",) . ResolveP <$> _glslMATchop8]
    , ["unimatrixname3" <$$> _glslMATunimatrixname3]
    , ["top15filter" <$$> _glslMATtop15filter]
    , ["chopunitype9" <$$> _glslMATchopunitype9]
    , ["top11extendv" <$$> _glslMATtop11extendv]
    , ["top14extendv" <$$> _glslMATtop14extendv]
    , ["dodeform" <$$> _glslMATdodeform]
    , ["top10extendw" <$$> _glslMATtop10extendw]
    , ["top11anisotropy" <$$> _glslMATtop11anisotropy]
    , ["top13extendv" <$$> _glslMATtop13extendv]
    , ["outprim" <$$> _glslMAToutprim]
    , ["chopuniname3" <$$> _glslMATchopuniname3]
    , ["top0extendw" <$$> _glslMATtop0extendw]
    , [("top11",) . ResolveP <$> _glslMATtop11]
    , Just <$> vec4Map' "value1" _glslMATvalue1
    , ["top9anisotropy" <$$> _glslMATtop9anisotropy]
    , ["chopuniname6" <$$> _glslMATchopuniname6]
    , ["alphathreshold" <$$> _glslMATalphathreshold]
    , ["sampler0" <$$> _glslMATsampler0]
    , ["top10filter" <$$> _glslMATtop10filter]
    , ["top13filter" <$$> _glslMATtop13filter]
    , ["choparraytype9" <$$> _glslMATchoparraytype9]
    , ["chanscope6" <$$> _glslMATchanscope6]
    , ["top9extendw" <$$> _glslMATtop9extendw]
    , Just <$> vec4Map' "value20" _glslMATvalue20
    , ["uniname1" <$$> _glslMATuniname1]
    , ["numout" <$$> _glslMATnumout]
    , ["uniname17" <$$> _glslMATuniname17]
    , ["chanscope9" <$$> _glslMATchanscope9]
    , ["unimatrixname2" <$$> _glslMATunimatrixname2]
    , ["uniname8" <$$> _glslMATuniname8]
    , ["chanscope2" <$$> _glslMATchanscope2]
    , ["sampler4" <$$> _glslMATsampler4]
    , ["depthfunc" <$$> _glslMATdepthfunc]
    , ["chopuniname5" <$$> _glslMATchopuniname5]
    , ["top8extendw" <$$> _glslMATtop8extendw]
    , ["top4filter" <$$> _glslMATtop4filter]
    , [("chop2",) . ResolveP <$> _glslMATchop2]
    , ["top8filter" <$$> _glslMATtop8filter]
    , [("mat",) . ResolveP <$> _glslMATmat]
    , ["blending" <$$> _glslMATblending]
    , [("top13",) . ResolveP <$> _glslMATtop13]
    , [("chop9",) . ResolveP <$> _glslMATchop9]
    , [("chop0",) . ResolveP <$> _glslMATchop0]
    , ["uniname19" <$$> _glslMATuniname19]
    , ["sampler6" <$$> _glslMATsampler6]
    , Just <$> vec4Map' "value11" _glslMATvalue11
    , ["deformdata" <$$> _glslMATdeformdata]
    , ["top2filter" <$$> _glslMATtop2filter]
    , ["uniname7" <$$> _glslMATuniname7]
    , ["top14filter" <$$> _glslMATtop14filter]
    , ["pcaptpath" <$$> _glslMATpcaptpath]
    , Just <$> vec4Map' "value5" _glslMATvalue5
    , [("chop1",) . ResolveP <$> _glslMATchop1]
    , ["polygonoffsetunits" <$$> _glslMATpolygonoffsetunits]
    , ["top5extendw" <$$> _glslMATtop5extendw]
    , [("top1",) . ResolveP <$> _glslMATtop1]
    , ["top1filter" <$$> _glslMATtop1filter]
    , ["chanscope3" <$$> _glslMATchanscope3]
    , ["sampler9" <$$> _glslMATsampler9]
    , [("chop4",) . ResolveP <$> _glslMATchop4]
    , ["sampler12" <$$> _glslMATsampler12]
    , ["sampler2" <$$> _glslMATsampler2]
    , ["wirewidth" <$$> _glslMATwirewidth]
    , [("top2",) . ResolveP <$> _glslMATtop2]
    , ["top10extendv" <$$> _glslMATtop10extendv]
    , ["top7extendv" <$$> _glslMATtop7extendv]
    , [("top8",) . ResolveP <$> _glslMATtop8]
    , ["unimatrixname0" <$$> _glslMATunimatrixname0]
    , ["top12filter" <$$> _glslMATtop12filter]
    , ["destblenda" <$$> _glslMATdestblenda]
    , ["choparraytype7" <$$> _glslMATchoparraytype7]
    , [("chop7",) . ResolveP <$> _glslMATchop7]
    , ["top14extendw" <$$> _glslMATtop14extendw]
    , ["top15extendv" <$$> _glslMATtop15extendv]
    , ["depthwriting" <$$> _glslMATdepthwriting]
    , ["sampler15" <$$> _glslMATsampler15]
    , ["chopunitype1" <$$> _glslMATchopunitype1]
    , ["unimatrixname1" <$$> _glslMATunimatrixname1]
    , ["top0anisotropy" <$$> _glslMATtop0anisotropy]
    , ["top6extendv" <$$> _glslMATtop6extendv]
    , ["top0extendv" <$$> _glslMATtop0extendv]
    , ["top3extendw" <$$> _glslMATtop3extendw]
    , ["polygonoffsetfactor" <$$> _glslMATpolygonoffsetfactor]
    , ["top4anisotropy" <$$> _glslMATtop4anisotropy]
    , ["inprim" <$$> _glslMATinprim]
    , ["twocolor" <$$> _glslMATtwocolor]
    , ["choparraytype0" <$$> _glslMATchoparraytype0]
    , ["top4extendv" <$$> _glslMATtop4extendv]
    , ["uniname16" <$$> _glslMATuniname16]
    , ["choparraytype3" <$$> _glslMATchoparraytype3]
    , ["top3filter" <$$> _glslMATtop3filter]
    , [("pdat",) . ResolveP <$> _glslMATpdat]
    , ["top10extendu" <$$> _glslMATtop10extendu]
    , ["uniname6" <$$> _glslMATuniname6]
    , ["sampler5" <$$> _glslMATsampler5]
    , [("top14",) . ResolveP <$> _glslMATtop14]
    , ["top8extendu" <$$> _glslMATtop8extendu]
    , ["wireframe" <$$> _glslMATwireframe]
    , ["top3extendu" <$$> _glslMATtop3extendu]
    , [("targetsop",) . ResolveP <$> _glslMATtargetsop]
    , Just <$> vec4Map' "value2" _glslMATvalue2
    , [("top9",) . ResolveP <$> _glslMATtop9]
    , ["top9extendu" <$$> _glslMATtop9extendu]
    , ["top2extendw" <$$> _glslMATtop2extendw]
    , ["uniname21" <$$> _glslMATuniname21]
    , ["uniname15" <$$> _glslMATuniname15]
    , [("top0",) . ResolveP <$> _glslMATtop0]
    , Just <$> vec4Map' "value14" _glslMATvalue14
    , ["top12extendw" <$$> _glslMATtop12extendw]
    , Just <$> vec4Map' "value16" _glslMATvalue16
    , [("top5",) . ResolveP <$> _glslMATtop5]
    , ["pcaptdata" <$$> _glslMATpcaptdata]
    , ["top6extendw" <$$> _glslMATtop6extendw]
    , ["top8extendv" <$$> _glslMATtop8extendv]
    , ["choparraytype2" <$$> _glslMATchoparraytype2]
    , ["lightingspace" <$$> _glslMATlightingspace]
    , ["uniname18" <$$> _glslMATuniname18]
    , [("inherit",) . ResolveP <$> _glslMATinherit]
    , ["top5filter" <$$> _glslMATtop5filter]
    , ["choparraytype5" <$$> _glslMATchoparraytype5]
    , ["top12extendv" <$$> _glslMATtop12extendv]
    , Just <$> vec4Map' "value7" _glslMATvalue7
    , ["srcblend" <$$> _glslMATsrcblend]
    , ["top11extendu" <$$> _glslMATtop11extendu]
    , Just <$> vec4Map' "value18" _glslMATvalue18
    , ["chanscope4" <$$> _glslMATchanscope4]
    , Just <$> vec4Map' "value12" _glslMATvalue12
    , ["srcblenda" <$$> _glslMATsrcblenda]
    , ["chanscope5" <$$> _glslMATchanscope5]
    , ["top15anisotropy" <$$> _glslMATtop15anisotropy]
    , ["sampler10" <$$> _glslMATsampler10]]
  pars _ = []
  opType (InMAT {}) = "inMAT"
  opType (PointspriteMAT {}) = "pointspriteMAT"
  opType (OutMAT {}) = "outMAT"
  opType (PhongMAT {}) = "phongMAT"
  opType (SwitchMAT {}) = "switchMAT"
  opType (DepthMAT {}) = "depthMAT"
  opType (SelectMAT {}) = "selectMAT"
  opType (ConstantMAT {}) = "constantMAT"
  opType (WireframeMAT {}) = "wireframeMAT"
  opType (NullMAT {}) = "nullMAT"
  opType (PbrMAT {}) = "pbrMAT"
  opType (GlslMAT {}) = "glslMAT"
  text _ = Nothing
  commands = view matCommands
  connections = view matIns


instance Op SOP where 
  pars (ForceSOP {..}) = catMaybes . mconcat $ [ ["vortex" <$$> _forceSOPvortex]
    , ["doradial" <$$> _forceSOPdoradial]
    , ["spiral" <$$> _forceSOPspiral]
    , Just <$> vec3Map' "dir" _forceSOPdir
    , ["doaxis" <$$> _forceSOPdoaxis]
    , ["axial" <$$> _forceSOPaxial]
    , ["radial" <$$> _forceSOPradial]]
  pars (ParticleSOP {..}) = catMaybes . mconcat $ [ ["splittype" <$$> _particleSOPsplittype]
    , ["resetpulse" <$$> _particleSOPresetpulse]
    , ["attractmode" <$$> _particleSOPattractmode]
    , ["drag" <$$> _particleSOPdrag]
    , ["gaintan" <$$> _particleSOPgaintan]
    , ["rmunused" <$$> _particleSOPrmunused]
    , ["splitmin" <$$> _particleSOPsplitmin]
    , ["doid" <$$> _particleSOPdoid]
    , Just <$> vec3Map' "splitvar" _particleSOPsplitvar
    , ["mass" <$$> _particleSOPmass]
    , ["domass" <$$> _particleSOPdomass]
    , ["gainnorm" <$$> _particleSOPgainnorm]
    , ["splitmax" <$$> _particleSOPsplitmax]
    , ["birth" <$$> _particleSOPbirth]
    , ["timeinc" <$$> _particleSOPtimeinc]
    , Just <$> vec3Map' "external" _particleSOPexternal
    , ["dodrag" <$$> _particleSOPdodrag]
    , ["jitter" <$$> _particleSOPjitter]
    , Just <$> vec3Map' "limitpos" _particleSOPlimitpos
    , ["prtype" <$$> _particleSOPprtype]
    , ["behave" <$$> _particleSOPbehave]
    , ["normals" <$$> _particleSOPnormals]
    , ["period" <$$> _particleSOPperiod]
    , ["accurate" <$$> _particleSOPaccurate]
    , Just <$> vec3Map' "turb" _particleSOPturb
    , ["ptreuse" <$$> _particleSOPptreuse]
    , ["timepreroll" <$$> _particleSOPtimepreroll]
    , ["hit" <$$> _particleSOPhit]
    , ["seed" <$$> _particleSOPseed]
    , ["life" <$$> _particleSOPlife]
    , Just <$> vec3Map' "splitvel" _particleSOPsplitvel
    , ["sourcegrp" <$$> _particleSOPsourcegrp]
    , ["maxsteps" <$$> _particleSOPmaxsteps]
    , ["lifevar" <$$> _particleSOPlifevar]
    , Just <$> vec3Map' "limitneg" _particleSOPlimitneg
    , ["alpha" <$$> _particleSOPalpha]
    , ["reset" <$$> _particleSOPreset]
    , Just <$> vec3Map' "wind" _particleSOPwind]
  pars (RailsSOP {..}) = catMaybes . mconcat $ [ ["newg" <$$> _railsSOPnewg]
    , ["cycle" <$$> _railsSOPcycle]
    , ["xsectgrp" <$$> _railsSOPxsectgrp]
    , ["firstl" <$$> _railsSOPfirstl]
    , ["railname" <$$> _railsSOPrailname]
    , ["usedir" <$$> _railsSOPusedir]
    , ["roll" <$$> _railsSOProll]
    , ["stretch" <$$> _railsSOPstretch]
    , ["noflip" <$$> _railsSOPnoflip]
    , ["vertex1" <$$> _railsSOPvertex1]
    , ["usevtx" <$$> _railsSOPusevtx]
    , Just <$> vec3Map' "dir" _railsSOPdir
    , ["vertex2" <$$> _railsSOPvertex2]
    , ["scale" <$$> _railsSOPscale]
    , ["railgrp" <$$> _railsSOPrailgrp]
    , ["pairs" <$$> _railsSOPpairs]]
  pars (CacheSOP {..}) = catMaybes . mconcat $ [ ["blendpos" <$$> _cacheSOPblendpos]
    , ["outputindex" <$$> _cacheSOPoutputindex]
    , ["active" <$$> _cacheSOPactive]
    , ["resetpulse" <$$> _cacheSOPresetpulse]
    , ["cachesize" <$$> _cacheSOPcachesize]
    , ["cachepoints" <$$> _cacheSOPcachepoints]
    , ["prefill" <$$> _cacheSOPprefill]
    , ["reset" <$$> _cacheSOPreset]
    , ["step" <$$> _cacheSOPstep]]
  pars (CircleSOP {..}) = catMaybes . mconcat $ [ ["type" <$$> _circleSOPtype]
    , ["normals" <$$> _circleSOPnormals]
    , ["divs" <$$> _circleSOPdivs]
    , ["texture" <$$> _circleSOPtexture]
    , ["modifybounds" <$$> _circleSOPmodifybounds]
    , ["beginangle" <$$> _circleSOPbeginangle]
    , ["imperfect" <$$> _circleSOPimperfect]
    , ["arc" <$$> _circleSOParc]
    , ["orient" <$$> _circleSOPorient]
    , Just <$> vec2Map' "rad" _circleSOPrad
    , Just <$> vec3Map' "t" _circleSOPt
    , ["endangle" <$$> _circleSOPendangle]
    , ["order" <$$> _circleSOPorder]]
  pars (CarveSOP {..}) = catMaybes . mconcat $ [ ["domainv2" <$$> _carveSOPdomainv2]
    , ["firstv" <$$> _carveSOPfirstv]
    , ["keepout" <$$> _carveSOPkeepout]
    , ["firstu" <$$> _carveSOPfirstu]
    , ["secondv" <$$> _carveSOPsecondv]
    , ["keeporiginal" <$$> _carveSOPkeeporiginal]
    , ["domainu2" <$$> _carveSOPdomainu2]
    , ["domainu1" <$$> _carveSOPdomainu1]
    , ["divsu" <$$> _carveSOPdivsu]
    , ["domainv1" <$$> _carveSOPdomainv1]
    , ["keepin" <$$> _carveSOPkeepin]
    , ["allvbreakpoints" <$$> _carveSOPallvbreakpoints]
    , ["group" <$$> _carveSOPgroup]
    , ["extractop" <$$> _carveSOPextractop]
    , ["secondu" <$$> _carveSOPsecondu]
    , ["allubreakpoints" <$$> _carveSOPallubreakpoints]
    , ["divsv" <$$> _carveSOPdivsv]]
  pars (PrimitiveSOP {..}) = catMaybes . mconcat $ [ ["doweight" <$$> _primitiveSOPdoweight]
    , ["custom2val1" <$$> _primitiveSOPcustom2val1]
    , ["alpha" <$$> _primitiveSOPalpha]
    , ["doclr" <$$> _primitiveSOPdoclr]
    , ["docrease" <$$> _primitiveSOPdocrease]
    , ["templategrp" <$$> _primitiveSOPtemplategrp]
    , ["custom2" <$$> _primitiveSOPcustom2]
    , ["prtype" <$$> _primitiveSOPprtype]
    , ["custom1" <$$> _primitiveSOPcustom1]
    , Just <$> rgbMap "diff" _primitiveSOPdiff
    , ["vtxuoff" <$$> _primitiveSOPvtxuoff]
    , ["dorot" <$$> _primitiveSOPdorot]
    , ["pshapeu" <$$> _primitiveSOPpshapeu]
    , ["custom1val3" <$$> _primitiveSOPcustom1val3]
    , ["xord" <$$> _primitiveSOPxord]
    , ["crease" <$$> _primitiveSOPcrease]
    , Just <$> vec3Map' "r" _primitiveSOPr
    , ["custom1val2" <$$> _primitiveSOPcustom1val2]
    , ["doprender" <$$> _primitiveSOPdoprender]
    , ["custom2val3" <$$> _primitiveSOPcustom2val3]
    , Just <$> vec3Map' "s" _primitiveSOPs
    , Just <$> vec3Map' "p" _primitiveSOPp
    , ["custom2val4" <$$> _primitiveSOPcustom2val4]
    , ["vtxsort" <$$> _primitiveSOPvtxsort]
    , ["vtxvoff" <$$> _primitiveSOPvtxvoff]
    , ["doxform" <$$> _primitiveSOPdoxform]
    , ["closeu" <$$> _primitiveSOPcloseu]
    , ["custom1val4" <$$> _primitiveSOPcustom1val4]
    , ["clampu" <$$> _primitiveSOPclampu]
    , ["custom1size" <$$> _primitiveSOPcustom1size]
    , ["custom1val1" <$$> _primitiveSOPcustom1val1]
    , ["clampv" <$$> _primitiveSOPclampv]
    , ["group" <$$> _primitiveSOPgroup]
    , ["rord" <$$> _primitiveSOPrord]
    , ["metaweight" <$$> _primitiveSOPmetaweight]
    , Just <$> vec3Map' "upvector" _primitiveSOPupvector
    , ["custom2val2" <$$> _primitiveSOPcustom2val2]
    , Just <$> vec3Map' "t" _primitiveSOPt
    , ["closev" <$$> _primitiveSOPclosev]
    , ["pshapev" <$$> _primitiveSOPpshapev]
    , ["custom2size" <$$> _primitiveSOPcustom2size]]
  pars (NoiseSOP {..}) = catMaybes . mconcat $ [ ["rough" <$$> _noiseSOPrough]
    , ["type" <$$> _noiseSOPtype]
    , Just <$> vec3Map' "s" _noiseSOPs
    , ["attribute" <$$> _noiseSOPattribute]
    , ["period" <$$> _noiseSOPperiod]
    , ["harmon" <$$> _noiseSOPharmon]
    , ["xord" <$$> _noiseSOPxord]
    , Just <$> vec3Map' "p" _noiseSOPp
    , ["spread" <$$> _noiseSOPspread]
    , ["seed" <$$> _noiseSOPseed]
    , ["keepnormals" <$$> _noiseSOPkeepnormals]
    , ["numint" <$$> _noiseSOPnumint]
    , ["group" <$$> _noiseSOPgroup]
    , ["rord" <$$> _noiseSOPrord]
    , ["amp" <$$> _noiseSOPamp]
    , Just <$> vec3Map' "t" _noiseSOPt
    , ["exp" <$$> _noiseSOPexp]
    , Just <$> vec3Map' "r" _noiseSOPr]
  
  pars (FitSOP {..}) = catMaybes . mconcat $ [ ["surftype" <$$> _fitSOPsurftype]
    , ["type" <$$> _fitSOPtype]
    , ["group" <$$> _fitSOPgroup]
    , ["dataparmv" <$$> _fitSOPdataparmv]
    , ["dataparmu" <$$> _fitSOPdataparmu]
    , ["closev" <$$> _fitSOPclosev]
    , ["multiplev" <$$> _fitSOPmultiplev]
    , ["scope" <$$> _fitSOPscope]
    , ["smooth" <$$> _fitSOPsmooth]
    , ["closeu" <$$> _fitSOPcloseu]
    , ["corners" <$$> _fitSOPcorners]
    , ["multipleu" <$$> _fitSOPmultipleu]
    , ["tol" <$$> _fitSOPtol]
    , ["orderv" <$$> _fitSOPorderv]
    , ["method" <$$> _fitSOPmethod]
    , ["orderu" <$$> _fitSOPorderu]]
  pars (JointSOP {..}) = catMaybes . mconcat $ [ ["smoothtwist" <$$> _jointSOPsmoothtwist]
    , ["divs" <$$> _jointSOPdivs]
    , ["mintwist" <$$> _jointSOPmintwist]
    , ["lrscale2" <$$> _jointSOPlrscale2]
    , ["lroffset2" <$$> _jointSOPlroffset2]
    , ["lroffset1" <$$> _jointSOPlroffset1]
    , ["preserve1" <$$> _jointSOPpreserve1]
    , ["group" <$$> _jointSOPgroup]
    , ["smoothpath" <$$> _jointSOPsmoothpath]
    , ["orient" <$$> _jointSOPorient]
    , ["lrscale1" <$$> _jointSOPlrscale1]
    , ["preserve2" <$$> _jointSOPpreserve2]
    , ["majoraxes" <$$> _jointSOPmajoraxes]]
  pars (SwitchSOP {..}) = catMaybes . mconcat $ [ ["input" <$$> _switchSOPinput]]
  pars (InSOP {..}) = catMaybes . mconcat $ [ ["label" <$$> _inSOPlabel]]
  pars (BoxSOP {..}) = catMaybes . mconcat $ [ ["modifybounds" <$$> _boxSOPmodifybounds]
    , ["dodivs" <$$> _boxSOPdodivs]
    , ["normals" <$$> _boxSOPnormals]
    , ["s" <$$> _boxSOPs]
    , Just <$> vec3Map' "size" _boxSOPsize
    , ["divsz" <$$> _boxSOPdivsz]
    , ["divsy" <$$> _boxSOPdivsy]
    , ["divsx" <$$> _boxSOPdivsx]
    , ["rebar" <$$> _boxSOPrebar]
    , ["consolidatepts" <$$> _boxSOPconsolidatepts]
    , Just <$> vec3Map' "t" _boxSOPt
    , ["texture" <$$> _boxSOPtexture]]
  pars (ChoptoSOP {..}) = catMaybes . mconcat $ [ ["compnml" <$$> _choptoSOPcompnml]
    , ["mapping" <$$> _choptoSOPmapping]
    , Just <$> vec3Map' "endpos" _choptoSOPendpos
    , ["group" <$$> _choptoSOPgroup]
    , ["organize" <$$> _choptoSOPorganize]
    , Just <$> vec3Map' "startpos" _choptoSOPstartpos
    , [("chop",) . ResolveP <$> _choptoSOPchop]
    , ["comptang" <$$> _choptoSOPcomptang]
    , ["method" <$$> _choptoSOPmethod]
    , ["chanscope" <$$> _choptoSOPchanscope]
    , ["attscope" <$$> _choptoSOPattscope]]
  pars (StitchSOP {..}) = catMaybes . mconcat $ [ ["fixed" <$$> _stitchSOPfixed]
    , ["lrwidth2" <$$> _stitchSOPlrwidth2]
    , ["leftuv1" <$$> _stitchSOPleftuv1]
    , ["rightuv2" <$$> _stitchSOPrightuv2]
    , ["sharp" <$$> _stitchSOPsharp]
    , ["bias" <$$> _stitchSOPbias]
    , ["dotangent" <$$> _stitchSOPdotangent]
    , ["stitchop" <$$> _stitchSOPstitchop]
    , ["loop" <$$> _stitchSOPloop]
    , ["inc" <$$> _stitchSOPinc]
    , ["leftuv2" <$$> _stitchSOPleftuv2]
    , ["lrwidth1" <$$> _stitchSOPlrwidth1]
    , ["rightuv1" <$$> _stitchSOPrightuv1]
    , ["group" <$$> _stitchSOPgroup]
    , ["lrscale2" <$$> _stitchSOPlrscale2]
    , ["dir" <$$> _stitchSOPdir]
    , ["lrscale1" <$$> _stitchSOPlrscale1]
    , ["dostitch" <$$> _stitchSOPdostitch]
    , ["tolerance" <$$> _stitchSOPtolerance]]
  pars (ExtrudeSOP {..}) = catMaybes . mconcat $ [ ["dofuse" <$$> _extrudeSOPdofuse]
    , ["backtype" <$$> _extrudeSOPbacktype]
    , ["frontgrp" <$$> _extrudeSOPfrontgrp]
    , ["initextrude" <$$> _extrudeSOPinitextrude]
    , ["newg" <$$> _extrudeSOPnewg]
    , ["xsectiongrp" <$$> _extrudeSOPxsectiongrp]
    , ["thickxlate" <$$> _extrudeSOPthickxlate]
    , ["depthscale" <$$> _extrudeSOPdepthscale]
    , ["backgrp" <$$> _extrudeSOPbackgrp]
    , ["depthxlate" <$$> _extrudeSOPdepthxlate]
    , ["docusp" <$$> _extrudeSOPdocusp]
    , ["sidetype" <$$> _extrudeSOPsidetype]
    , ["sidegrp" <$$> _extrudeSOPsidegrp]
    , ["thickscale" <$$> _extrudeSOPthickscale]
    , ["sourcegrp" <$$> _extrudeSOPsourcegrp]
    , ["fronttype" <$$> _extrudeSOPfronttype]
    , ["sharefaces" <$$> _extrudeSOPsharefaces]
    , ["removesharedsides" <$$> _extrudeSOPremovesharedsides]
    , ["vertex" <$$> _extrudeSOPvertex]
    , ["cuspangle" <$$> _extrudeSOPcuspangle]]
  pars (CaptureSOP {..}) = catMaybes . mconcat $ [ ["savesel" <$$> _captureSOPsavesel]
    , ["savefile" <$$> _captureSOPsavefile]
    , ["weightfrom" <$$> _captureSOPweightfrom]
    , ["autoincr" <$$> _captureSOPautoincr]
    , ["group" <$$> _captureSOPgroup]
    , ["color" <$$> _captureSOPcolor]
    , ["captframe" <$$> _captureSOPcaptframe]
    , ["savecaptfile" <$$> _captureSOPsavecaptfile]
    , ["captfile" <$$> _captureSOPcaptfile]]
  pars (MetaballSOP {..}) = catMaybes . mconcat $ [ ["kernel" <$$> _metaballSOPkernel]
    , Just <$> vec3Map' "t" _metaballSOPt
    , ["normals" <$$> _metaballSOPnormals]
    , ["metaweight" <$$> _metaballSOPmetaweight]
    , Just <$> vec3Map' "rad" _metaballSOPrad
    , ["expxy" <$$> _metaballSOPexpxy]
    , ["modifybounds" <$$> _metaballSOPmodifybounds]
    , ["expz" <$$> _metaballSOPexpz]]
  pars (PointSOP {..}) = catMaybes . mconcat $ [ ["custom3" <$$> _pointSOPcustom3]
    , ["custom3val1" <$$> _pointSOPcustom3val1]
    , ["custom4type" <$$> _pointSOPcustom4type]
    , ["alpha" <$$> _pointSOPalpha]
    , ["radiusf" <$$> _pointSOPradiusf]
    , ["scalef" <$$> _pointSOPscalef]
    , ["springk" <$$> _pointSOPspringk]
    , ["dotension" <$$> _pointSOPdotension]
    , ["donml" <$$> _pointSOPdonml]
    , ["custom1type" <$$> _pointSOPcustom1type]
    , ["custom1val3" <$$> _pointSOPcustom1val3]
    , ["custom4val4" <$$> _pointSOPcustom4val4]
    , ["radialf" <$$> _pointSOPradialf]
    , ["domass" <$$> _pointSOPdomass]
    , ["custom2val4" <$$> _pointSOPcustom2val4]
    , ["doedgef" <$$> _pointSOPdoedgef]
    , ["custom1val4" <$$> _pointSOPcustom1val4]
    , ["dodirf" <$$> _pointSOPdodirf]
    , ["drag" <$$> _pointSOPdrag]
    , ["donormalf" <$$> _pointSOPdonormalf]
    , ["mass" <$$> _pointSOPmass]
    , ["dovel" <$$> _pointSOPdovel]
    , ["doweight" <$$> _pointSOPdoweight]
    , ["dopscale" <$$> _pointSOPdopscale]
    , ["group" <$$> _pointSOPgroup]
    , ["custom2val1" <$$> _pointSOPcustom2val1]
    , Just <$> vec3Map' "v" _pointSOPv
    , ["doup" <$$> _pointSOPdoup]
    , ["doclr" <$$> _pointSOPdoclr]
    , ["custom3type" <$$> _pointSOPcustom3type]
    , ["custom4val2" <$$> _pointSOPcustom4val2]
    , ["weight" <$$> _pointSOPweight]
    , ["custom2" <$$> _pointSOPcustom2]
    , ["custom1" <$$> _pointSOPcustom1]
    , Just <$> rgbMap "diff" _pointSOPdiff
    , ["doradius" <$$> _pointSOPdoradius]
    , Just <$> vec3Map' "dirf" _pointSOPdirf
    , Just <$> vec3Map' "up" _pointSOPup
    , ["custom4val3" <$$> _pointSOPcustom4val3]
    , ["custom3val3" <$$> _pointSOPcustom3val3]
    , ["custom2val2" <$$> _pointSOPcustom2val2]
    , ["doscale" <$$> _pointSOPdoscale]
    , ["custom1val2" <$$> _pointSOPcustom1val2]
    , ["edgef" <$$> _pointSOPedgef]
    , ["tension" <$$> _pointSOPtension]
    , Just <$> vec3Map' "t" _pointSOPt
    , ["doradialf" <$$> _pointSOPdoradialf]
    , ["custom4" <$$> _pointSOPcustom4]
    , Just <$> uvwMap "map" _pointSOPmap
    , ["custom3val2" <$$> _pointSOPcustom3val2]
    , ["custom4val1" <$$> _pointSOPcustom4val1]
    , ["custom1val1" <$$> _pointSOPcustom1val1]
    , ["custom2type" <$$> _pointSOPcustom2type]
    , ["douvw" <$$> _pointSOPdouvw]
    , ["normalf" <$$> _pointSOPnormalf]
    , ["pscale" <$$> _pointSOPpscale]
    , ["custom3val4" <$$> _pointSOPcustom3val4]
    , ["custom2val3" <$$> _pointSOPcustom2val3]
    , ["dospringk" <$$> _pointSOPdospringk]
    , Just <$> vec3Map' "n" _pointSOPn]
  pars (ConvertSOP {..}) = catMaybes . mconcat $ [ ["lodtrim" <$$> _convertSOPlodtrim]
    , ["fromtype" <$$> _convertSOPfromtype]
    , ["surftype" <$$> _convertSOPsurftype]
    , ["divu" <$$> _convertSOPdivu]
    , ["divtrim" <$$> _convertSOPdivtrim]
    , ["interphull" <$$> _convertSOPinterphull]
    , ["lodu" <$$> _convertSOPlodu]
    , ["lodv" <$$> _convertSOPlodv]
    , ["group" <$$> _convertSOPgroup]
    , ["orderv" <$$> _convertSOPorderv]
    , ["prtype" <$$> _convertSOPprtype]
    , ["divv" <$$> _convertSOPdivv]
    , ["orderu" <$$> _convertSOPorderu]
    , ["totype" <$$> _convertSOPtotype]
    , ["new" <$$> _convertSOPnew]]
  pars (LimitSOP {..}) = catMaybes . mconcat $ [ ["chanz" <$$> _limitSOPchanz]
    , ["chanb" <$$> _limitSOPchanb]
    , ["chanrad" <$$> _limitSOPchanrad]
    , ["zlimitmin" <$$> _limitSOPzlimitmin]
    , ["customattrib0chan1" <$$> _limitSOPcustomattrib0chan1]
    , ["customattrib1chan2" <$$> _limitSOPcustomattrib1chan2]
    , ["chanrz" <$$> _limitSOPchanrz]
    , ["texturew" <$$> _limitSOPtexturew]
    , ["rad" <$$> _limitSOPrad]
    , ["texture" <$$> _limitSOPtexture]
    , ["output" <$$> _limitSOPoutput]
    , ["customattrib1chan0" <$$> _limitSOPcustomattrib1chan0]
    , ["texoffset2" <$$> _limitSOPtexoffset2]
    , ["zlimitmax" <$$> _limitSOPzlimitmax]
    , ["customattrib1chan3" <$$> _limitSOPcustomattrib1chan3]
    , ["chanry" <$$> _limitSOPchanry]
    , ["customattrib0chan2" <$$> _limitSOPcustomattrib0chan2]
    , Just <$> vec3Map' "rotate" _limitSOProtate
    , ["chanrx" <$$> _limitSOPchanrx]
    , ["dorotate" <$$> _limitSOPdorotate]
    , ["customattrib1chan1" <$$> _limitSOPcustomattrib1chan1]
    , ["flipsmooth" <$$> _limitSOPflipsmooth]
    , ["chanalpha" <$$> _limitSOPchanalpha]
    , [("chop",) . ResolveP <$> _limitSOPchop]
    , ["chanx" <$$> _limitSOPchanx]
    , ["xlimitmax" <$$> _limitSOPxlimitmax]
    , ["ylimitmin" <$$> _limitSOPylimitmin]
    , ["chanradx" <$$> _limitSOPchanradx]
    , ["texscale1" <$$> _limitSOPtexscale1]
    , ["chang" <$$> _limitSOPchang]
    , ["chanradz" <$$> _limitSOPchanradz]
    , ["customattrib1" <$$> _limitSOPcustomattrib1]
    , ["customattrib0chan0" <$$> _limitSOPcustomattrib0chan0]
    , ["chanr" <$$> _limitSOPchanr]
    , ["customattrib0" <$$> _limitSOPcustomattrib0]
    , ["texoffset1" <$$> _limitSOPtexoffset1]
    , ["divisions" <$$> _limitSOPdivisions]
    , ["texscale2" <$$> _limitSOPtexscale2]
    , ["customattrib0chan3" <$$> _limitSOPcustomattrib0chan3]
    , ["normals" <$$> _limitSOPnormals]
    , ["ylimitmax" <$$> _limitSOPylimitmax]
    , ["xlimitmin" <$$> _limitSOPxlimitmin]
    , ["chany" <$$> _limitSOPchany]
    , ["rord" <$$> _limitSOPrord]
    , ["chanrady" <$$> _limitSOPchanrady]
    , ["orient" <$$> _limitSOPorient]
    , ["dolimit" <$$> _limitSOPdolimit]]
  pars (BooleanSOP {..}) = catMaybes . mconcat $ [ ["creategroup" <$$> _booleanSOPcreategroup]
    , ["groupa" <$$> _booleanSOPgroupa]
    , ["accattrib" <$$> _booleanSOPaccattrib]
    , ["booleanop" <$$> _booleanSOPbooleanop]
    , ["groupb" <$$> _booleanSOPgroupb]]
  pars (KinectSOP {..}) = catMaybes . mconcat $ [ ["normals" <$$> _kinectSOPnormals]
    , ["skeleton" <$$> _kinectSOPskeleton]
    , ["hwversion" <$$> _kinectSOPhwversion]
    , ["neardepthmode" <$$> _kinectSOPneardepthmode]
    , ["sensor" <$$> _kinectSOPsensor]]
  pars (MaterialSOP {..}) = catMaybes . mconcat $ [ [("mat",) . ResolveP <$> _materialSOPmat]]
  pars (SweepSOP {..}) = catMaybes . mconcat $ [ ["cycle" <$$> _sweepSOPcycle]
    , ["pathgrp" <$$> _sweepSOPpathgrp]
    , ["angle" <$$> _sweepSOPangle]
    , ["refgrp" <$$> _sweepSOPrefgrp]
    , ["aimatref" <$$> _sweepSOPaimatref]
    , ["fast" <$$> _sweepSOPfast]
    , ["roll" <$$> _sweepSOProll]
    , ["twist" <$$> _sweepSOPtwist]
    , ["noflip" <$$> _sweepSOPnoflip]
    , ["skin" <$$> _sweepSOPskin]
    , ["sweepgrp" <$$> _sweepSOPsweepgrp]
    , ["newg" <$$> _sweepSOPnewg]
    , ["usevtx" <$$> _sweepSOPusevtx]
    , ["xgrp" <$$> _sweepSOPxgrp]
    , ["scale" <$$> _sweepSOPscale]
    , ["vertex" <$$> _sweepSOPvertex]
    , ["skipcoin" <$$> _sweepSOPskipcoin]]
  pars (TrimSOP {..}) = catMaybes . mconcat $ [ ["optype" <$$> _trimSOPoptype]
    , ["trimtol" <$$> _trimSOPtrimtol]
    , ["group" <$$> _trimSOPgroup]
    , ["altitude" <$$> _trimSOPaltitude]
    , ["bigloop" <$$> _trimSOPbigloop]
    , ["individual" <$$> _trimSOPindividual]]
  pars (OutSOP {..}) = catMaybes . mconcat $ [ ["label" <$$> _outSOPlabel]]
  pars (BridgeSOP {..}) = catMaybes . mconcat $ [ ["rotatet3" <$$> _bridgeSOProtatet3]
    , ["isodivs" <$$> _bridgeSOPisodivs]
    , ["csharp" <$$> _bridgeSOPcsharp]
    , ["circular" <$$> _bridgeSOPcircular]
    , ["scalet3" <$$> _bridgeSOPscalet3]
    , ["sdivs" <$$> _bridgeSOPsdivs]
    , ["inc" <$$> _bridgeSOPinc]
    , ["frenet" <$$> _bridgeSOPfrenet]
    , ["scalet1" <$$> _bridgeSOPscalet1]
    , ["scalec2" <$$> _bridgeSOPscalec2]
    , ["rotatet2" <$$> _bridgeSOProtatet2]
    , ["tolerance" <$$> _bridgeSOPtolerance]
    , ["group" <$$> _bridgeSOPgroup]
    , ["bridge" <$$> _bridgeSOPbridge]
    , ["rotatet1" <$$> _bridgeSOProtatet1]
    , ["scalec3" <$$> _bridgeSOPscalec3]
    , ["scalet2" <$$> _bridgeSOPscalet2]
    , ["curvature" <$$> _bridgeSOPcurvature]
    , ["order" <$$> _bridgeSOPorder]
    , ["scalec1" <$$> _bridgeSOPscalec1]]
  pars (FacetSOP {..}) = catMaybes . mconcat $ [ ["inline" <$$> _facetSOPinline]
    , ["remove" <$$> _facetSOPremove]
    , ["angle" <$$> _facetSOPangle]
    , ["prenml" <$$> _facetSOPprenml]
    , ["cusp" <$$> _facetSOPcusp]
    , ["inlinedist" <$$> _facetSOPinlinedist]
    , ["postnml" <$$> _facetSOPpostnml]
    , ["dist" <$$> _facetSOPdist]
    , ["unit" <$$> _facetSOPunit]
    , ["orientpolys" <$$> _facetSOPorientpolys]
    , ["group" <$$> _facetSOPgroup]
    , ["unique" <$$> _facetSOPunique]
    , ["cons" <$$> _facetSOPcons]]
  pars (SurfsectSOP {..}) = catMaybes . mconcat $ [ ["step" <$$> _surfsectSOPstep]
    , ["tol2d" <$$> _surfsectSOPtol2d]
    , ["insidea" <$$> _surfsectSOPinsidea]
    , ["mindholes" <$$> _surfsectSOPmindholes]
    , ["boolop" <$$> _surfsectSOPboolop]
    , ["join" <$$> _surfsectSOPjoin]
    , ["profilesa" <$$> _surfsectSOPprofilesa]
    , ["insideb" <$$> _surfsectSOPinsideb]
    , ["creategroupa" <$$> _surfsectSOPcreategroupa]
    , ["outsideb" <$$> _surfsectSOPoutsideb]
    , ["creategroupb" <$$> _surfsectSOPcreategroupb]
    , ["outsidea" <$$> _surfsectSOPoutsidea]
    , ["profilesb" <$$> _surfsectSOPprofilesb]
    , ["groupb" <$$> _surfsectSOPgroupb]
    , ["tol3d" <$$> _surfsectSOPtol3d]
    , ["groupa" <$$> _surfsectSOPgroupa]
    , ["target" <$$> _surfsectSOPtarget]]
  pars (RaySOP {..}) = catMaybes . mconcat $ [ ["hitgrp" <$$> _raySOPhitgrp]
    , ["newgrp" <$$> _raySOPnewgrp]
    , ["dotrans" <$$> _raySOPdotrans]
    , ["putdist" <$$> _raySOPputdist]
    , ["lift" <$$> _raySOPlift]
    , ["seed" <$$> _raySOPseed]
    , ["lookfar" <$$> _raySOPlookfar]
    , ["group" <$$> _raySOPgroup]
    , ["bounces" <$$> _raySOPbounces]
    , ["bouncegeo" <$$> _raySOPbouncegeo]
    , ["scale" <$$> _raySOPscale]
    , ["normal" <$$> _raySOPnormal]
    , ["method" <$$> _raySOPmethod]
    , ["jitter" <$$> _raySOPjitter]
    , ["sample" <$$> _raySOPsample]]
  pars (BonegroupSOP {..}) = catMaybes . mconcat $ [ ["bonesperpoint" <$$> _bonegroupSOPbonesperpoint]
    , ["bonespergroup" <$$> _bonegroupSOPbonespergroup]]
  pars (TorusSOP {..}) = catMaybes . mconcat $ [ ["cols" <$$> _torusSOPcols]
    , ["surftype" <$$> _torusSOPsurftype]
    , ["endanglev" <$$> _torusSOPendanglev]
    , ["closev" <$$> _torusSOPclosev]
    , ["beginangleu" <$$> _torusSOPbeginangleu]
    , ["orderv" <$$> _torusSOPorderv]
    , Just <$> vec2Map' "rad" _torusSOPrad
    , ["texture" <$$> _torusSOPtexture]
    , ["angleoffset" <$$> _torusSOPangleoffset]
    , ["capu" <$$> _torusSOPcapu]
    , ["endangleu" <$$> _torusSOPendangleu]
    , ["type" <$$> _torusSOPtype]
    , ["normals" <$$> _torusSOPnormals]
    , ["beginanglev" <$$> _torusSOPbeginanglev]
    , ["orderu" <$$> _torusSOPorderu]
    , ["capv" <$$> _torusSOPcapv]
    , ["rows" <$$> _torusSOProws]
    , ["imperfect" <$$> _torusSOPimperfect]
    , ["closeu" <$$> _torusSOPcloseu]
    , ["modifybounds" <$$> _torusSOPmodifybounds]
    , ["orient" <$$> _torusSOPorient]
    , Just <$> vec3Map' "t" _torusSOPt]
  pars (WireframeSOP {..}) = catMaybes . mconcat $ [ ["fast" <$$> _wireframeSOPfast]
    , ["radius" <$$> _wireframeSOPradius]
    , ["group" <$$> _wireframeSOPgroup]
    , ["corners" <$$> _wireframeSOPcorners]
    , ["remove" <$$> _wireframeSOPremove]
    , ["caps" <$$> _wireframeSOPcaps]]
  pars (AddSOP {..}) = catMaybes . mconcat $ [ ["usept0" <$$> _addSOPusept0]
    , Just <$> vec3Map' "pt4" _addSOPpt4
    , [("pointdat",) . ResolveP <$> _addSOPpointdat]
    , ["usept3" <$$> _addSOPusept3]
    , ["add" <$$> _addSOPadd]
    , ["closed3" <$$> _addSOPclosed3]
    , ["prim4" <$$> _addSOPprim4]
    , ["closed4" <$$> _addSOPclosed4]
    , ["prim0" <$$> _addSOPprim0]
    , ["usept4" <$$> _addSOPusept4]
    , Just <$> vec3Map' "pt1" _addSOPpt1
    , ["keep" <$$> _addSOPkeep]
    , ["prim3" <$$> _addSOPprim3]
    , ["weight2" <$$> _addSOPweight2]
    , ["usept2" <$$> _addSOPusept2]
    , ["closed1" <$$> _addSOPclosed1]
    , ["weight5" <$$> _addSOPweight5]
    , Just <$> vec3Map' "pt3" _addSOPpt3
    , ["weight3" <$$> _addSOPweight3]
    , ["remove" <$$> _addSOPremove]
    , ["namedattribs" <$$> _addSOPnamedattribs]
    , ["prim5" <$$> _addSOPprim5]
    , ["closed5" <$$> _addSOPclosed5]
    , Just <$> vec3Map' "pt2" _addSOPpt2
    , ["normals" <$$> _addSOPnormals]
    , ["usept5" <$$> _addSOPusept5]
    , [("polydat",) . ResolveP <$> _addSOPpolydat]
    , ["closed0" <$$> _addSOPclosed0]
    , Just <$> vec3Map' "pt5" _addSOPpt5
    , ["weight1" <$$> _addSOPweight1]
    , ["weight4" <$$> _addSOPweight4]
    , ["inc" <$$> _addSOPinc]
    , ["closedall" <$$> _addSOPclosedall]
    , ["closed2" <$$> _addSOPclosed2]
    , ["group" <$$> _addSOPgroup]
    , ["prim1" <$$> _addSOPprim1]
    , ["usept1" <$$> _addSOPusept1]
    , Just <$> vec3Map' "pt0" _addSOPpt0
    , ["prim2" <$$> _addSOPprim2]
    , ["weight0" <$$> _addSOPweight0]]
  pars (TextureSOP {..}) = catMaybes . mconcat $ [ ["xord" <$$> _textureSOPxord]
    , ["type" <$$> _textureSOPtype]
    , ["angle" <$$> _textureSOPangle]
    , Just <$> uvwMap "s" _textureSOPs
    , Just <$> vec3Map' "p" _textureSOPp
    , Just <$> uvwMap "offset" _textureSOPoffset
    , ["rord" <$$> _textureSOPrord]
    , ["coord" <$$> _textureSOPcoord]
    , Just <$> vec3Map' "scaletwo" _textureSOPscaletwo
    , ["group" <$$> _textureSOPgroup]
    , ["fixseams" <$$> _textureSOPfixseams]
    , ["texlayer" <$$> _textureSOPtexlayer]
    , Just <$> vec3Map' "t" _textureSOPt
    , ["axis" <$$> _textureSOPaxis]
    , Just <$> vec3Map' "r" _textureSOPr]
  pars (DeformSOP {..}) = catMaybes . mconcat $ [ ["delcaptatr" <$$> _deformSOPdelcaptatr]
    , ["delcolatr" <$$> _deformSOPdelcolatr]
    , ["donormal" <$$> _deformSOPdonormal]
    , ["group" <$$> _deformSOPgroup]]
  pars (OpenvrSOP {..}) = catMaybes . mconcat $ [ ["model" <$$> _openvrSOPmodel]]
  pars (CurvesectSOP {..}) = catMaybes . mconcat $ [ ["extractpt" <$$> _curvesectSOPextractpt]
    , ["left" <$$> _curvesectSOPleft]
    , ["keeporiginal" <$$> _curvesectSOPkeeporiginal]
    , ["leftgroup" <$$> _curvesectSOPleftgroup]
    , ["rightgroup" <$$> _curvesectSOPrightgroup]
    , ["xsect" <$$> _curvesectSOPxsect]
    , ["right" <$$> _curvesectSOPright]
    , ["tolerance" <$$> _curvesectSOPtolerance]
    , ["affect" <$$> _curvesectSOPaffect]]
  pars (LsystemSOP {..}) = catMaybes . mconcat $ [ ["vertinc" <$$> _lsystemSOPvertinc]
    , ["cols" <$$> _lsystemSOPcols]
    , [("colormap",) . ResolveP <$> _lsystemSOPcolormap]
    , ["contangl" <$$> _lsystemSOPcontangl]
    , ["contwidth" <$$> _lsystemSOPcontwidth]
    , ["thickinit" <$$> _lsystemSOPthickinit]
    , ["pointwidth" <$$> _lsystemSOPpointwidth]
    , ["generations" <$$> _lsystemSOPgenerations]
    , ["stampa" <$$> _lsystemSOPstampa]
    , Just <$> uvMap "inc" _lsystemSOPinc
    , ["varc" <$$> _lsystemSOPvarc]
    , ["grpprefix" <$$> _lsystemSOPgrpprefix]
    , ["stampb" <$$> _lsystemSOPstampb]
    , ["smooth" <$$> _lsystemSOPsmooth]
    , ["docolor" <$$> _lsystemSOPdocolor]
    , ["rows" <$$> _lsystemSOProws]
    , ["varb" <$$> _lsystemSOPvarb]
    , ["contlength" <$$> _lsystemSOPcontlength]
    , ["randseed" <$$> _lsystemSOPrandseed]
    , ["tension" <$$> _lsystemSOPtension]
    , ["type" <$$> _lsystemSOPtype]
    , ["gravity" <$$> _lsystemSOPgravity]
    , [("rules",) . ResolveP <$> _lsystemSOPrules]
    , [("pictop",) . ResolveP <$> _lsystemSOPpictop]
    , ["stepscale" <$$> _lsystemSOPstepscale]
    , ["anglescale" <$$> _lsystemSOPanglescale]
    , ["randscale" <$$> _lsystemSOPrandscale]
    , ["chanprefix" <$$> _lsystemSOPchanprefix]
    , ["stepinit" <$$> _lsystemSOPstepinit]
    , ["thickscale" <$$> _lsystemSOPthickscale]
    , ["stampc" <$$> _lsystemSOPstampc]
    , ["angleinit" <$$> _lsystemSOPangleinit]
    , ["dotexture" <$$> _lsystemSOPdotexture]
    , ["vard" <$$> _lsystemSOPvard]]
  pars (FractalSOP {..}) = catMaybes . mconcat $ [ ["vtxnms" <$$> _fractalSOPvtxnms]
    , ["smooth" <$$> _fractalSOPsmooth]
    , ["fixed" <$$> _fractalSOPfixed]
    , ["seed" <$$> _fractalSOPseed]
    , ["group" <$$> _fractalSOPgroup]
    , ["divs" <$$> _fractalSOPdivs]
    , Just <$> vec3Map' "dir" _fractalSOPdir
    , ["scale" <$$> _fractalSOPscale]]
  pars (CopySOP {..}) = catMaybes . mconcat $ [ ["mulvtx" <$$> _copySOPmulvtx]
    , ["nprims" <$$> _copySOPnprims]
    , ["param8" <$$> _copySOPparam8]
    , ["val6" <$$> _copySOPval6]
    , ["vlength" <$$> _copySOPvlength]
    , ["val3" <$$> _copySOPval3]
    , ["subprim" <$$> _copySOPsubprim]
    , ["ncy" <$$> _copySOPncy]
    , Just <$> vec3Map' "r" _copySOPr
    , ["val5" <$$> _copySOPval5]
    , ["setpt" <$$> _copySOPsetpt]
    , ["subvtx" <$$> _copySOPsubvtx]
    , Just <$> vec3Map' "p" _copySOPp
    , ["val7" <$$> _copySOPval7]
    , ["val4" <$$> _copySOPval4]
    , ["val2" <$$> _copySOPval2]
    , ["val1" <$$> _copySOPval1]
    , ["copyg" <$$> _copySOPcopyg]
    , ["addprim" <$$> _copySOPaddprim]
    , ["addpt" <$$> _copySOPaddpt]
    , ["cum" <$$> _copySOPcum]
    , ["setprim" <$$> _copySOPsetprim]
    , ["param4" <$$> _copySOPparam4]
    , ["param10" <$$> _copySOPparam10]
    , ["templategrp" <$$> _copySOPtemplategrp]
    , ["param2" <$$> _copySOPparam2]
    , Just <$> vec3Map' "upvector" _copySOPupvector
    , ["val9" <$$> _copySOPval9]
    , ["newg" <$$> _copySOPnewg]
    , ["param1" <$$> _copySOPparam1]
    , ["nml" <$$> _copySOPnml]
    , ["param3" <$$> _copySOPparam3]
    , ["xord" <$$> _copySOPxord]
    , ["scale" <$$> _copySOPscale]
    , ["setvtx" <$$> _copySOPsetvtx]
    , ["param5" <$$> _copySOPparam5]
    , ["addvtx" <$$> _copySOPaddvtx]
    , Just <$> vec3Map' "s" _copySOPs
    , ["val10" <$$> _copySOPval10]
    , ["param6" <$$> _copySOPparam6]
    , ["stamp" <$$> _copySOPstamp]
    , ["param9" <$$> _copySOPparam9]
    , ["mulpt" <$$> _copySOPmulpt]
    , ["val8" <$$> _copySOPval8]
    , ["param7" <$$> _copySOPparam7]
    , ["sourcegrp" <$$> _copySOPsourcegrp]
    , ["rord" <$$> _copySOPrord]
    , ["subpt" <$$> _copySOPsubpt]
    , ["doattr" <$$> _copySOPdoattr]
    , Just <$> vec3Map' "t" _copySOPt
    , ["mulprim" <$$> _copySOPmulprim]]
  pars (TristripSOP {..}) = catMaybes . mconcat $ [ ["maxstriplength" <$$> _tristripSOPmaxstriplength]
    , ["constrainstriplength" <$$> _tristripSOPconstrainstriplength]
    , ["group" <$$> _tristripSOPgroup]]
  pars (CplusplusSOP {..}) = catMaybes . mconcat $ [ ["plugin" <$$> _cplusplusSOPplugin]
    , ["reinitpulse" <$$> _cplusplusSOPreinitpulse]
    , ["unloadplugin" <$$> _cplusplusSOPunloadplugin]
    , ["reinit" <$$> _cplusplusSOPreinit]]
  pars (MagnetSOP {..}) = catMaybes . mconcat $ [ ["deformgrp" <$$> _magnetSOPdeformgrp]
    , ["position" <$$> _magnetSOPposition]
    , Just <$> vec3Map' "s" _magnetSOPs
    , Just <$> vec3Map' "p" _magnetSOPp
    , ["color" <$$> _magnetSOPcolor]
    , ["velocity" <$$> _magnetSOPvelocity]
    , ["magnetgrp" <$$> _magnetSOPmagnetgrp]
    , ["rord" <$$> _magnetSOPrord]
    , ["nml" <$$> _magnetSOPnml]
    , Just <$> vec3Map' "t" _magnetSOPt
    , ["xord" <$$> _magnetSOPxord]
    , Just <$> vec3Map' "r" _magnetSOPr]
  pars (RectangleSOP {..}) = catMaybes . mconcat $ [ Just <$> vec3Map' "t" _rectangleSOPt
    , ["normals" <$$> _rectangleSOPnormals]
    , ["camz" <$$> _rectangleSOPcamz]
    , Just <$> vec2Map' "size" _rectangleSOPsize
    , ["orient" <$$> _rectangleSOPorient]
    , ["modifybounds" <$$> _rectangleSOPmodifybounds]
    , ["texture" <$$> _rectangleSOPtexture]]
  pars (SphereSOP {..}) = catMaybes . mconcat $ [ ["cols" <$$> _sphereSOPcols]
    , ["surftype" <$$> _sphereSOPsurftype]
    , ["type" <$$> _sphereSOPtype]
    , ["normals" <$$> _sphereSOPnormals]
    , ["texture" <$$> _sphereSOPtexture]
    , ["accurate" <$$> _sphereSOPaccurate]
    , ["freq" <$$> _sphereSOPfreq]
    , ["modifybounds" <$$> _sphereSOPmodifybounds]
    , ["imperfect" <$$> _sphereSOPimperfect]
    , ["rows" <$$> _sphereSOProws]
    , Just <$> vec3Map' "rad" _sphereSOPrad
    , ["orderv" <$$> _sphereSOPorderv]
    , ["orient" <$$> _sphereSOPorient]
    , Just <$> vec3Map' "t" _sphereSOPt
    , ["orderu" <$$> _sphereSOPorderu]
    , ["upole" <$$> _sphereSOPupole]]
  pars (DattoSOP {..}) = catMaybes . mconcat $ [ [("detaildat",) . ResolveP <$> _dattoSOPdetaildat]
    , ["prtype" <$$> _dattoSOPprtype]
    , [("verticesdat",) . ResolveP <$> _dattoSOPverticesdat]
    , [("primsdat",) . ResolveP <$> _dattoSOPprimsdat]
    , ["closedv" <$$> _dattoSOPclosedv]
    , ["float" <$$> _dattoSOPfloat]
    , ["string" <$$> _dattoSOPstring]
    , ["closed" <$$> _dattoSOPclosed]
    , ["int" <$$> _dattoSOPint]
    , ["build" <$$> _dattoSOPbuild]
    , [("pointsdat",) . ResolveP <$> _dattoSOPpointsdat]
    , ["n" <$$> _dattoSOPn]
    , ["merge" <$$> _dattoSOPmerge]
    , ["connect" <$$> _dattoSOPconnect]]
  pars (TextSOP {..}) = catMaybes . mconcat $ [ ["readingdirection" <$$> _textSOPreadingdirection]
    , ["wordwrap" <$$> _textSOPwordwrap]
    , ["italic" <$$> _textSOPitalic]
    , ["fontfile" <$$> _textSOPfontfile]
    , ["alignx" <$$> _textSOPalignx]
    , ["text" <$$> _textSOPtext]
    , ["xord" <$$> _textSOPxord]
    , Just <$> vec3Map' "r" _textSOPr
    , ["legacyparsing" <$$> _textSOPlegacyparsing]
    , ["fontsizey" <$$> _textSOPfontsizey]
    , ["linespacing" <$$> _textSOPlinespacing]
    , ["keepfontratio" <$$> _textSOPkeepfontratio]
    , Just <$> vec3Map' "s" _textSOPs
    , Just <$> vec3Map' "p" _textSOPp
    , ["levelofdetail" <$$> _textSOPlevelofdetail]
    , ["fontsizex" <$$> _textSOPfontsizex]
    , ["kerning1" <$$> _textSOPkerning1]
    , ["font" <$$> _textSOPfont]
    , ["wordwrapsize" <$$> _textSOPwordwrapsize]
    , ["language" <$$> _textSOPlanguage]
    , ["bold" <$$> _textSOPbold]
    , ["rord" <$$> _textSOPrord]
    , Just <$> vec3Map' "t" _textSOPt
    , ["kerning2" <$$> _textSOPkerning2]]
  pars (LinethickSOP {..}) = catMaybes . mconcat $ [ ["startwidth2" <$$> _linethickSOPstartwidth2]
    , ["domain2" <$$> _linethickSOPdomain2]
    , ["shape" <$$> _linethickSOPshape]
    , ["group" <$$> _linethickSOPgroup]
    , ["startwidth1" <$$> _linethickSOPstartwidth1]
    , ["symmetric" <$$> _linethickSOPsymmetric]
    , ["divisions" <$$> _linethickSOPdivisions]
    , ["rows" <$$> _linethickSOProws]
    , ["domain1" <$$> _linethickSOPdomain1]
    , ["endwidth2" <$$> _linethickSOPendwidth2]
    , ["endwidth1" <$$> _linethickSOPendwidth1]]
  pars (TraceSOP {..}) = catMaybes . mconcat $ [ ["addtexture" <$$> _traceSOPaddtexture]
    , ["normals" <$$> _traceSOPnormals]
    , ["fitcurve" <$$> _traceSOPfitcurve]
    , ["delborder" <$$> _traceSOPdelborder]
    , ["convpoly" <$$> _traceSOPconvpoly]
    , ["step" <$$> _traceSOPstep]
    , ["bordwidth" <$$> _traceSOPbordwidth]
    , [("top",) . ResolveP <$> _traceSOPtop]
    , ["lod" <$$> _traceSOPlod]
    , ["doresample" <$$> _traceSOPdoresample]
    , ["dosmooth" <$$> _traceSOPdosmooth]
    , ["thresh" <$$> _traceSOPthresh]
    , ["error" <$$> _traceSOPerror]
    , ["hole" <$$> _traceSOPhole]
    , ["corner" <$$> _traceSOPcorner]]
  pars (SortSOP {..}) = catMaybes . mconcat $ [ ["ptsort" <$$> _sortSOPptsort]
    , ["pointoffset" <$$> _sortSOPpointoffset]
    , ["primsort" <$$> _sortSOPprimsort]
    , Just <$> vec3Map' "pointdir" _sortSOPpointdir
    , Just <$> vec3Map' "partdir" _sortSOPpartdir
    , ["primseed" <$$> _sortSOPprimseed]
    , Just <$> vec3Map' "pointprox" _sortSOPpointprox
    , ["partreverse" <$$> _sortSOPpartreverse]
    , ["partoffset" <$$> _sortSOPpartoffset]
    , ["primoffset" <$$> _sortSOPprimoffset]
    , ["pointseed" <$$> _sortSOPpointseed]
    , Just <$> vec3Map' "primprox" _sortSOPprimprox
    , ["partsort" <$$> _sortSOPpartsort]
    , Just <$> vec3Map' "partprox" _sortSOPpartprox
    , Just <$> vec3Map' "primdir" _sortSOPprimdir]
  pars (JoinSOP {..}) = catMaybes . mconcat $ [ ["knotmult" <$$> _joinSOPknotmult]
    , ["blend" <$$> _joinSOPblend]
    , ["group" <$$> _joinSOPgroup]
    , ["dir" <$$> _joinSOPdir]
    , ["bias" <$$> _joinSOPbias]
    , ["prim" <$$> _joinSOPprim]
    , ["joinop" <$$> _joinSOPjoinop]
    , ["inc" <$$> _joinSOPinc]
    , ["loop" <$$> _joinSOPloop]
    , ["tolerance" <$$> _joinSOPtolerance]
    , ["proximity" <$$> _joinSOPproximity]]
  pars (PolystitchSOP {..}) = catMaybes . mconcat $ [ ["angle" <$$> _polystitchSOPangle]
    , ["stitch" <$$> _polystitchSOPstitch]
    , ["consolidate" <$$> _polystitchSOPconsolidate]
    , ["findcorner" <$$> _polystitchSOPfindcorner]
    , ["corners" <$$> _polystitchSOPcorners]
    , ["tol3d" <$$> _polystitchSOPtol3d]]
  pars (BlendSOP {..}) = catMaybes . mconcat $ [ ["blend1v4" <$$> _blendSOPblend1v4]
    , ["blend4v3" <$$> _blendSOPblend4v3]
    , ["blend4v1" <$$> _blendSOPblend4v1]
    , ["blend1v3" <$$> _blendSOPblend1v3]
    , ["doup" <$$> _blendSOPdoup]
    , ["blend3v2" <$$> _blendSOPblend3v2]
    , ["doclr" <$$> _blendSOPdoclr]
    , ["blend2v2" <$$> _blendSOPblend2v2]
    , ["blend1v2" <$$> _blendSOPblend1v2]
    , ["donml" <$$> _blendSOPdonml]
    , ["diff" <$$> _blendSOPdiff]
    , ["blend3v3" <$$> _blendSOPblend3v3]
    , ["blend3v1" <$$> _blendSOPblend3v1]
    , ["blend2v3" <$$> _blendSOPblend2v3]
    , ["douvw" <$$> _blendSOPdouvw]
    , ["dopos" <$$> _blendSOPdopos]
    , ["blend4v2" <$$> _blendSOPblend4v2]
    , ["blend4v4" <$$> _blendSOPblend4v4]
    , ["blend3v4" <$$> _blendSOPblend3v4]
    , ["group" <$$> _blendSOPgroup]
    , ["blend1v1" <$$> _blendSOPblend1v1]
    , ["blend2v4" <$$> _blendSOPblend2v4]
    , ["blend2v1" <$$> _blendSOPblend2v1]]
  pars (LodSOP {..}) = catMaybes . mconcat $ [ ["polysonly" <$$> _lodSOPpolysonly]
    , ["triangulate" <$$> _lodSOPtriangulate]
    , ["tstrips" <$$> _lodSOPtstrips]
    , ["steppercent" <$$> _lodSOPsteppercent]
    , ["minpercent" <$$> _lodSOPminpercent]
    , ["distance" <$$> _lodSOPdistance]
    , ["lengthweight" <$$> _lodSOPlengthweight]
    , ["borderweight" <$$> _lodSOPborderweight]]
  pars (CreepSOP {..}) = catMaybes . mconcat $ [ Just <$> vec3Map' "s" _creepSOPs
    , Just <$> vec3Map' "t" _creepSOPt
    , Just <$> vec3Map' "r" _creepSOPr
    , ["reset" <$$> _creepSOPreset]
    , ["resetmethod" <$$> _creepSOPresetmethod]]
  pars (PolysplineSOP {..}) = catMaybes . mconcat $ [ ["tension" <$$> _polysplineSOPtension]
    , ["edgedivs" <$$> _polysplineSOPedgedivs]
    , ["closure" <$$> _polysplineSOPclosure]
    , ["group" <$$> _polysplineSOPgroup]
    , ["segsize" <$$> _polysplineSOPsegsize]
    , ["divide" <$$> _polysplineSOPdivide]
    , ["basis" <$$> _polysplineSOPbasis]
    , ["polydivs" <$$> _polysplineSOPpolydivs]
    , ["first" <$$> _polysplineSOPfirst]
    , ["last" <$$> _polysplineSOPlast]]
  pars (CurveclaySOP {..}) = catMaybes . mconcat $ [ ["sharp" <$$> _curveclaySOPsharp]
    , ["facegroup" <$$> _curveclaySOPfacegroup]
    , ["divs" <$$> _curveclaySOPdivs]
    , ["projop" <$$> _curveclaySOPprojop]
    , ["individual" <$$> _curveclaySOPindividual]
    , ["projdir3" <$$> _curveclaySOPprojdir3]
    , ["surfgroup" <$$> _curveclaySOPsurfgroup]
    , ["refine" <$$> _curveclaySOPrefine]
    , ["projdir2" <$$> _curveclaySOPprojdir2]
    , ["deformdir1" <$$> _curveclaySOPdeformdir1]
    , ["deformdir3" <$$> _curveclaySOPdeformdir3]
    , ["deformlen" <$$> _curveclaySOPdeformlen]
    , ["deforminside" <$$> _curveclaySOPdeforminside]
    , ["projdir1" <$$> _curveclaySOPprojdir1]
    , ["deformdir2" <$$> _curveclaySOPdeformdir2]
    , ["deformop" <$$> _curveclaySOPdeformop]]
  pars (ProjectSOP {..}) = catMaybes . mconcat $ [ ["maptype" <$$> _projectSOPmaptype]
    , ["vector3" <$$> _projectSOPvector3]
    , ["projside" <$$> _projectSOPprojside]
    , ["uvgap" <$$> _projectSOPuvgap]
    , ["vrange1" <$$> _projectSOPvrange1]
    , ["axis" <$$> _projectSOPaxis]
    , ["urange2" <$$> _projectSOPurange2]
    , ["ufrom" <$$> _projectSOPufrom]
    , ["ftolerance" <$$> _projectSOPftolerance]
    , ["cycle" <$$> _projectSOPcycle]
    , ["csharp" <$$> _projectSOPcsharp]
    , ["userange" <$$> _projectSOPuserange]
    , ["facegroup" <$$> _projectSOPfacegroup]
    , ["surfgroup" <$$> _projectSOPsurfgroup]
    , ["accurate" <$$> _projectSOPaccurate]
    , ["sdivs" <$$> _projectSOPsdivs]
    , ["vector1" <$$> _projectSOPvector1]
    , ["vfrom" <$$> _projectSOPvfrom]
    , ["vector2" <$$> _projectSOPvector2]
    , ["rtolerance" <$$> _projectSOPrtolerance]
    , ["vrange2" <$$> _projectSOPvrange2]
    , ["order" <$$> _projectSOPorder]
    , ["urange1" <$$> _projectSOPurange1]]
  pars (FileinSOP {..}) = catMaybes . mconcat $ [ ["flipfacing" <$$> _fileinSOPflipfacing]
    , ["refreshpulse" <$$> _fileinSOPrefreshpulse]
    , ["file" <$$> _fileinSOPfile]
    , ["normals" <$$> _fileinSOPnormals]
    , ["refresh" <$$> _fileinSOPrefresh]]
  pars (SequenceblendSOP {..}) = catMaybes . mconcat $ [ ["dopos" <$$> _sequenceblendSOPdopos]
    , ["doup" <$$> _sequenceblendSOPdoup]
    , ["douvw" <$$> _sequenceblendSOPdouvw]
    , ["doclr" <$$> _sequenceblendSOPdoclr]
    , ["donml" <$$> _sequenceblendSOPdonml]
    , ["blend" <$$> _sequenceblendSOPblend]]
  pars (CapSOP {..}) = catMaybes . mconcat $ [ ["firstv" <$$> _capSOPfirstv]
    , ["firstu" <$$> _capSOPfirstu]
    , ["group" <$$> _capSOPgroup]
    , ["divsv2" <$$> _capSOPdivsv2]
    , ["lastv" <$$> _capSOPlastv]
    , ["scaleu2" <$$> _capSOPscaleu2]
    , ["divsv1" <$$> _capSOPdivsv1]
    , ["scaleu1" <$$> _capSOPscaleu1]
    , ["lastu" <$$> _capSOPlastu]
    , ["divsu2" <$$> _capSOPdivsu2]
    , ["divsu1" <$$> _capSOPdivsu1]
    , ["pshapeu" <$$> _capSOPpshapeu]
    , ["scalev2" <$$> _capSOPscalev2]
    , ["pshapev" <$$> _capSOPpshapev]
    , ["scalev1" <$$> _capSOPscalev1]]
  pars (AlembicSOP {..}) = catMaybes . mconcat $ [ ["interp" <$$> _alembicSOPinterp]
    , ["compnml" <$$> _alembicSOPcompnml]
    , ["xform" <$$> _alembicSOPxform]
    , ["timeunit" <$$> _alembicSOPtimeunit]
    , ["file" <$$> _alembicSOPfile]
    , ["loadfile" <$$> _alembicSOPloadfile]
    , ["straightgpu" <$$> _alembicSOPstraightgpu]
    , ["objectpath" <$$> _alembicSOPobjectpath]
    , ["time" <$$> _alembicSOPtime]]
  pars (ObjectmergeSOP {..}) = catMaybes . mconcat $ [ [("sop4",) . ResolveP <$> _objectmergeSOPsop4]
    , [("sop1",) . ResolveP <$> _objectmergeSOPsop1]
    , [("sop6",) . ResolveP <$> _objectmergeSOPsop6]
    , [("sop9",) . ResolveP <$> _objectmergeSOPsop9]
    , [("sop10",) . ResolveP <$> _objectmergeSOPsop10]
    , [("sop3",) . ResolveP <$> _objectmergeSOPsop3]
    , [("sop5",) . ResolveP <$> _objectmergeSOPsop5]
    , [("sop8",) . ResolveP <$> _objectmergeSOPsop8]
    , [("sop7",) . ResolveP <$> _objectmergeSOPsop7]
    , [("sop2",) . ResolveP <$> _objectmergeSOPsop2]]
  
  pars (BasisSOP {..}) = catMaybes . mconcat $ [ ["ulength" <$$> _basisSOPulength]
    , ["uraise" <$$> _basisSOPuraise]
    , ["vbasis" <$$> _basisSOPvbasis]
    , ["vparmtype" <$$> _basisSOPvparmtype]
    , ["uorigin" <$$> _basisSOPuorigin]
    , ["uread" <$$> _basisSOPuread]
    , ["vrange1" <$$> _basisSOPvrange1]
    , ["vlength" <$$> _basisSOPvlength]
    , ["uconcat" <$$> _basisSOPuconcat]
    , ["urange2" <$$> _basisSOPurange2]
    , ["orderv" <$$> _basisSOPorderv]
    , ["uknots" <$$> _basisSOPuknots]
    , ["vread" <$$> _basisSOPvread]
    , ["vdoscale" <$$> _basisSOPvdoscale]
    , ["ubasis" <$$> _basisSOPubasis]
    , ["udoscale" <$$> _basisSOPudoscale]
    , ["vdoorigin" <$$> _basisSOPvdoorigin]
    , ["vbias" <$$> _basisSOPvbias]
    , ["vraise" <$$> _basisSOPvraise]
    , ["orderu" <$$> _basisSOPorderu]
    , ["vscale" <$$> _basisSOPvscale]
    , ["ubias" <$$> _basisSOPubias]
    , ["uscale" <$$> _basisSOPuscale]
    , ["vknots" <$$> _basisSOPvknots]
    , ["vconcat" <$$> _basisSOPvconcat]
    , ["group" <$$> _basisSOPgroup]
    , ["udolength" <$$> _basisSOPudolength]
    , ["udoorigin" <$$> _basisSOPudoorigin]
    , ["vdolength" <$$> _basisSOPvdolength]
    , ["uparmtype" <$$> _basisSOPuparmtype]
    , ["vrange2" <$$> _basisSOPvrange2]
    , ["urange1" <$$> _basisSOPurange1]
    , ["vorigin" <$$> _basisSOPvorigin]]
  pars (AttributeSOP {..}) = catMaybes . mconcat $ [ ["frompt1" <$$> _attributeSOPfrompt1]
    , ["topt1" <$$> _attributeSOPtopt1]
    , ["todtl2" <$$> _attributeSOPtodtl2]
    , ["primdel" <$$> _attributeSOPprimdel]
    , ["topt2" <$$> _attributeSOPtopt2]
    , ["tovtx4" <$$> _attributeSOPtovtx4]
    , ["fromvtx1" <$$> _attributeSOPfromvtx1]
    , ["tovtx2" <$$> _attributeSOPtovtx2]
    , ["todtl3" <$$> _attributeSOPtodtl3]
    , ["tovtx0" <$$> _attributeSOPtovtx0]
    , ["fromvtx3" <$$> _attributeSOPfromvtx3]
    , ["topt4" <$$> _attributeSOPtopt4]
    , ["topr3" <$$> _attributeSOPtopr3]
    , ["todtl0" <$$> _attributeSOPtodtl0]
    , ["tovtx3" <$$> _attributeSOPtovtx3]
    , ["frompt0" <$$> _attributeSOPfrompt0]
    , ["fromdtl1" <$$> _attributeSOPfromdtl1]
    , ["ptdel" <$$> _attributeSOPptdel]
    , ["frompr2" <$$> _attributeSOPfrompr2]
    , ["fromdtl4" <$$> _attributeSOPfromdtl4]
    , ["frompr1" <$$> _attributeSOPfrompr1]
    , ["frompt2" <$$> _attributeSOPfrompt2]
    , ["topr2" <$$> _attributeSOPtopr2]
    , ["tovtx1" <$$> _attributeSOPtovtx1]
    , ["frompr3" <$$> _attributeSOPfrompr3]
    , ["todtl4" <$$> _attributeSOPtodtl4]
    , ["topr1" <$$> _attributeSOPtopr1]
    , ["topt0" <$$> _attributeSOPtopt0]
    , ["topr4" <$$> _attributeSOPtopr4]
    , ["frompt4" <$$> _attributeSOPfrompt4]
    , ["dtldel" <$$> _attributeSOPdtldel]
    , ["frompt3" <$$> _attributeSOPfrompt3]
    , ["topt3" <$$> _attributeSOPtopt3]
    , ["fromvtx0" <$$> _attributeSOPfromvtx0]
    , ["fromvtx4" <$$> _attributeSOPfromvtx4]
    , ["vtxdel" <$$> _attributeSOPvtxdel]
    , ["todtl1" <$$> _attributeSOPtodtl1]
    , ["fromdtl3" <$$> _attributeSOPfromdtl3]
    , ["fromdtl0" <$$> _attributeSOPfromdtl0]
    , ["frompr0" <$$> _attributeSOPfrompr0]
    , ["fromdtl2" <$$> _attributeSOPfromdtl2]
    , ["topr0" <$$> _attributeSOPtopr0]
    , ["fromvtx2" <$$> _attributeSOPfromvtx2]
    , ["frompr4" <$$> _attributeSOPfrompr4]]
  pars (SelectSOP {..}) = catMaybes . mconcat $ [ [("sop",) . ResolveP <$> _selectSOPsop]]
  pars (AlignSOP {..}) = catMaybes . mconcat $ [ ["leftuv1" <$$> _alignSOPleftuv1]
    , ["rightuv2" <$$> _alignSOPrightuv2]
    , Just <$> vec3Map' "s" _alignSOPs
    , ["align" <$$> _alignSOPalign]
    , Just <$> vec3Map' "p" _alignSOPp
    , ["bias" <$$> _alignSOPbias]
    , ["inc" <$$> _alignSOPinc]
    , ["individual" <$$> _alignSOPindividual]
    , ["dotrans" <$$> _alignSOPdotrans]
    , ["leftuv2" <$$> _alignSOPleftuv2]
    , ["rightuv1" <$$> _alignSOPrightuv1]
    , Just <$> vec3Map' "r" _alignSOPr
    , ["group" <$$> _alignSOPgroup]
    , ["rord" <$$> _alignSOPrord]
    , ["rightuvend2" <$$> _alignSOPrightuvend2]
    , ["dorotate" <$$> _alignSOPdorotate]
    , Just <$> vec3Map' "t" _alignSOPt
    , ["xord" <$$> _alignSOPxord]
    , ["rightuvend1" <$$> _alignSOPrightuvend1]]
  pars (FontSOP {..}) = catMaybes . mconcat $ [ ["type" <$$> _fontSOPtype]
    , ["file" <$$> _fontSOPfile]
    , Just <$> vec2Map' "s" _fontSOPs
    , ["vcenter" <$$> _fontSOPvcenter]
    , ["texture" <$$> _fontSOPtexture]
    , ["italic" <$$> _fontSOPitalic]
    , Just <$> vec2Map' "kern" _fontSOPkern
    , ["hcenter" <$$> _fontSOPhcenter]
    , ["lod" <$$> _fontSOPlod]
    , ["text" <$$> _fontSOPtext]
    , Just <$> vec3Map' "t" _fontSOPt
    , ["hole" <$$> _fontSOPhole]]
  pars (TwistSOP {..}) = catMaybes . mconcat $ [ ["strength" <$$> _twistSOPstrength]
    , ["group" <$$> _twistSOPgroup]
    , Just <$> vec3Map' "p" _twistSOPp
    , ["roll" <$$> _twistSOProll]
    , ["saxis" <$$> _twistSOPsaxis]
    , ["paxis" <$$> _twistSOPpaxis]
    , ["op" <$$> _twistSOPop]]
  pars (RevolveSOP {..}) = catMaybes . mconcat $ [ ["cap" <$$> _revolveSOPcap]
    , ["surftype" <$$> _revolveSOPsurftype]
    , ["type" <$$> _revolveSOPtype]
    , ["polys" <$$> _revolveSOPpolys]
    , ["divs" <$$> _revolveSOPdivs]
    , Just <$> vec3Map' "origin" _revolveSOPorigin
    , ["beginangle" <$$> _revolveSOPbeginangle]
    , ["imperfect" <$$> _revolveSOPimperfect]
    , ["group" <$$> _revolveSOPgroup]
    , Just <$> vec3Map' "dir" _revolveSOPdir
    , ["endangle" <$$> _revolveSOPendangle]
    , ["order" <$$> _revolveSOPorder]]
  pars (PolyloftSOP {..}) = catMaybes . mconcat $ [ ["pointgroup4" <$$> _polyloftSOPpointgroup4]
    , ["pointgroup2" <$$> _polyloftSOPpointgroup2]
    , ["pointgroup1" <$$> _polyloftSOPpointgroup1]
    , ["consolidate" <$$> _polyloftSOPconsolidate]
    , ["closev" <$$> _polyloftSOPclosev]
    , ["pointgroup0" <$$> _polyloftSOPpointgroup0]
    , ["closeu" <$$> _polyloftSOPcloseu]
    , ["pointgroup3" <$$> _polyloftSOPpointgroup3]
    , ["group" <$$> _polyloftSOPgroup]
    , ["polygroup" <$$> _polyloftSOPpolygroup]
    , ["creategroup" <$$> _polyloftSOPcreategroup]
    , ["prim" <$$> _polyloftSOPprim]
    , ["pointgroup5" <$$> _polyloftSOPpointgroup5]
    , ["minimize" <$$> _polyloftSOPminimize]
    , ["dist" <$$> _polyloftSOPdist]
    , ["proximity" <$$> _polyloftSOPproximity]]
  pars (PolypatchSOP {..}) = catMaybes . mconcat $ [ ["connecttype" <$$> _polypatchSOPconnecttype]
    , ["lastvclamp" <$$> _polypatchSOPlastvclamp]
    , ["polys" <$$> _polypatchSOPpolys]
    , ["divisionsx" <$$> _polypatchSOPdivisionsx]
    , ["firstvclamp" <$$> _polypatchSOPfirstvclamp]
    , ["lastuclamp" <$$> _polypatchSOPlastuclamp]
    , ["firstuclamp" <$$> _polypatchSOPfirstuclamp]
    , ["closeu" <$$> _polypatchSOPcloseu]
    , ["basis" <$$> _polypatchSOPbasis]
    , ["group" <$$> _polypatchSOPgroup]
    , ["closev" <$$> _polypatchSOPclosev]
    , ["divisionsy" <$$> _polypatchSOPdivisionsy]]
  
  pars (FilletSOP {..}) = catMaybes . mconcat $ [ ["lrwidth2" <$$> _filletSOPlrwidth2]
    , ["leftuv1" <$$> _filletSOPleftuv1]
    , ["rightuv2" <$$> _filletSOPrightuv2]
    , ["primtype" <$$> _filletSOPprimtype]
    , ["lrscale2" <$$> _filletSOPlrscale2]
    , ["seamless" <$$> _filletSOPseamless]
    , ["inc" <$$> _filletSOPinc]
    , ["fillet" <$$> _filletSOPfillet]
    , ["loop" <$$> _filletSOPloop]
    , ["lroffset1" <$$> _filletSOPlroffset1]
    , ["fillettype" <$$> _filletSOPfillettype]
    , ["leftuv2" <$$> _filletSOPleftuv2]
    , ["lrwidth1" <$$> _filletSOPlrwidth1]
    , ["rightuv1" <$$> _filletSOPrightuv1]
    , ["cut" <$$> _filletSOPcut]
    , ["group" <$$> _filletSOPgroup]
    , ["lroffset2" <$$> _filletSOPlroffset2]
    , ["dir" <$$> _filletSOPdir]
    , ["lrscale1" <$$> _filletSOPlrscale1]
    , ["order" <$$> _filletSOPorder]]
  pars (InversecurveSOP {..}) = catMaybes . mconcat $ [ [("chop",) . ResolveP <$> _inversecurveSOPchop]]
  pars (TrailSOP {..}) = catMaybes . mconcat $ [ ["reset" <$$> _trailSOPreset]
    , ["resetpulse" <$$> _trailSOPresetpulse]
    , ["surftype" <$$> _trailSOPsurftype]
    , ["result" <$$> _trailSOPresult]
    , ["cache" <$$> _trailSOPcache]
    , ["accurate" <$$> _trailSOPaccurate]
    , ["evalframe" <$$> _trailSOPevalframe]
    , ["inc" <$$> _trailSOPinc]
    , ["length" <$$> _trailSOPlength]
    , ["velscale" <$$> _trailSOPvelscale]
    , ["close" <$$> _trailSOPclose]]
  pars (AttributecreateSOP {..}) = catMaybes . mconcat $ [ ["compnml" <$$> _attributecreateSOPcompnml]
    , ["comptang" <$$> _attributecreateSOPcomptang]]
  pars (LatticeSOP {..}) = catMaybes . mconcat $ [ ["kernel" <$$> _latticeSOPkernel]
    , ["divsx" <$$> _latticeSOPdivsx]
    , ["radius" <$$> _latticeSOPradius]
    , ["group" <$$> _latticeSOPgroup]
    , ["divsy" <$$> _latticeSOPdivsy]
    , ["divsz" <$$> _latticeSOPdivsz]]
  pars (TubeSOP {..}) = catMaybes . mconcat $ [ ["cols" <$$> _tubeSOPcols]
    , ["orderv" <$$> _tubeSOPorderv]
    , ["surftype" <$$> _tubeSOPsurftype]
    , ["type" <$$> _tubeSOPtype]
    , ["normals" <$$> _tubeSOPnormals]
    , ["texture" <$$> _tubeSOPtexture]
    , ["modifybounds" <$$> _tubeSOPmodifybounds]
    , ["cap" <$$> _tubeSOPcap]
    , ["imperfect" <$$> _tubeSOPimperfect]
    , ["rad2" <$$> _tubeSOPrad2]
    , ["rows" <$$> _tubeSOProws]
    , ["orient" <$$> _tubeSOPorient]
    , ["rad1" <$$> _tubeSOPrad1]
    , ["height" <$$> _tubeSOPheight]
    , Just <$> vec3Map' "t" _tubeSOPt
    , ["orderu" <$$> _tubeSOPorderu]]
  pars (ArmSOP {..}) = catMaybes . mconcat $ [ Just <$> vec3Map' "shoulder3t" _armSOPshoulder3t
    , Just <$> vec3Map' "wrist1t" _armSOPwrist1t
    , ["shoulder" <$$> _armSOPshoulder]
    , Just <$> vec3Map' "elbow3t" _armSOPelbow3t
    , ["flipelbow" <$$> _armSOPflipelbow]
    , Just <$> vec3Map' "shoulder1t" _armSOPshoulder1t
    , ["axis" <$$> _armSOPaxis]
    , Just <$> vec3Map' "wrist5t" _armSOPwrist5t
    , ["capttype" <$$> _armSOPcapttype]
    , ["elbow" <$$> _armSOPelbow]
    , ["rotatehand" <$$> _armSOProtatehand]
    , Just <$> vec3Map' "elbow1t" _armSOPelbow1t
    , Just <$> vec3Map' "wrist3t" _armSOPwrist3t
    , ["clavlength" <$$> _armSOPclavlength]
    , Just <$> vec3Map' "elbow4t" _armSOPelbow4t
    , ["wrist" <$$> _armSOPwrist]
    , Just <$> vec3Map' "s" _armSOPs
    , Just <$> vec3Map' "shoulder2t" _armSOPshoulder2t
    , Just <$> vec3Map' "shoulder4t" _armSOPshoulder4t
    , Just <$> vec3Map' "wrist4t" _armSOPwrist4t
    , ["handlength" <$$> _armSOPhandlength]
    , ["humlength" <$$> _armSOPhumlength]
    , ["elbowtwist" <$$> _armSOPelbowtwist]
    , ["ulnalength" <$$> _armSOPulnalength]
    , Just <$> vec3Map' "elbow2t" _armSOPelbow2t
    , ["bonerad" <$$> _armSOPbonerad]
    , Just <$> vec3Map' "r" _armSOPr
    , Just <$> vec3Map' "wrist2t" _armSOPwrist2t
    , Just <$> vec3Map' "shoulder5t" _armSOPshoulder5t
    , Just <$> vec3Map' "t" _armSOPt
    , ["autoelbow" <$$> _armSOPautoelbow]
    , Just <$> vec3Map' "elbow5t" _armSOPelbow5t]
  pars (TransformSOP {..}) = catMaybes . mconcat $ [ ["fromy" <$$> _transformSOPfromy]
    , ["posttx" <$$> _transformSOPposttx]
    , ["postscalez" <$$> _transformSOPpostscalez]
    , ["postscalex" <$$> _transformSOPpostscalex]
    , ["vlength" <$$> _transformSOPvlength]
    , Just <$> vec3Map' "upvector" _transformSOPupvector
    , ["posttz" <$$> _transformSOPposttz]
    , ["toy" <$$> _transformSOPtoy]
    , ["xord" <$$> _transformSOPxord]
    , Just <$> vec3Map' "r" _transformSOPr
    , ["fromz" <$$> _transformSOPfromz]
    , ["fromx" <$$> _transformSOPfromx]
    , ["tox" <$$> _transformSOPtox]
    , ["postscaley" <$$> _transformSOPpostscaley]
    , Just <$> vec3Map' "s" _transformSOPs
    , Just <$> vec3Map' "p" _transformSOPp
    , ["postscale" <$$> _transformSOPpostscale]
    , ["postty" <$$> _transformSOPpostty]
    , ["toz" <$$> _transformSOPtoz]
    , ["group" <$$> _transformSOPgroup]
    , ["rord" <$$> _transformSOPrord]
    , ["scale" <$$> _transformSOPscale]
    , Just <$> vec3Map' "t" _transformSOPt]
  pars (VertexSOP {..}) = catMaybes . mconcat $ [ ["custom3val2" <$$> _vertexSOPcustom3val2]
    , ["custom2val1" <$$> _vertexSOPcustom2val1]
    , ["custom4type" <$$> _vertexSOPcustom4type]
    , ["alpha" <$$> _vertexSOPalpha]
    , ["doclr" <$$> _vertexSOPdoclr]
    , ["docrease" <$$> _vertexSOPdocrease]
    , ["custom4val2" <$$> _vertexSOPcustom4val2]
    , ["custom3val4" <$$> _vertexSOPcustom3val4]
    , ["custom2" <$$> _vertexSOPcustom2]
    , ["custom1" <$$> _vertexSOPcustom1]
    , Just <$> rgbMap "diff" _vertexSOPdiff
    , ["custom1val3" <$$> _vertexSOPcustom1val3]
    , ["custom2val4" <$$> _vertexSOPcustom2val4]
    , ["custom4val3" <$$> _vertexSOPcustom4val3]
    , ["custom3val3" <$$> _vertexSOPcustom3val3]
    , ["crease" <$$> _vertexSOPcrease]
    , ["custom3val1" <$$> _vertexSOPcustom3val1]
    , ["custom1val2" <$$> _vertexSOPcustom1val2]
    , ["custom4val1" <$$> _vertexSOPcustom4val1]
    , ["custom3type" <$$> _vertexSOPcustom3type]
    , ["custom4" <$$> _vertexSOPcustom4]
    , Just <$> uvwMap "map" _vertexSOPmap
    , ["custom3" <$$> _vertexSOPcustom3]
    , ["group" <$$> _vertexSOPgroup]
    , ["custom4val4" <$$> _vertexSOPcustom4val4]
    , ["custom1val4" <$$> _vertexSOPcustom1val4]
    , ["custom1val1" <$$> _vertexSOPcustom1val1]
    , ["custom2type" <$$> _vertexSOPcustom2type]
    , ["douvw" <$$> _vertexSOPdouvw]
    , ["custom1type" <$$> _vertexSOPcustom1type]
    , ["custom2val2" <$$> _vertexSOPcustom2val2]
    , ["custom2val3" <$$> _vertexSOPcustom2val3]]
  pars (GroupSOP {..}) = catMaybes . mconcat $ [ ["select2" <$$> _groupSOPselect2]
    , ["not1" <$$> _groupSOPnot1]
    , ["usenumber" <$$> _groupSOPusenumber]
    , ["preserve" <$$> _groupSOPpreserve]
    , ["op1" <$$> _groupSOPop1]
    , ["grp4" <$$> _groupSOPgrp4]
    , ["grp3" <$$> _groupSOPgrp3]
    , ["grp1" <$$> _groupSOPgrp1]
    , ["not4" <$$> _groupSOPnot4]
    , ["transfer" <$$> _groupSOPtransfer]
    , ["edgestep" <$$> _groupSOPedgestep]
    , Just <$> vec3Map' "dir" _groupSOPdir
    , ["doangle" <$$> _groupSOPdoangle]
    , ["destroyname" <$$> _groupSOPdestroyname]
    , ["boundarygroups" <$$> _groupSOPboundarygroups]
    , ["entity" <$$> _groupSOPentity]
    , ["usenormal" <$$> _groupSOPusenormal]
    , ["select1" <$$> _groupSOPselect1]
    , ["useedges" <$$> _groupSOPuseedges]
    , ["rangeend" <$$> _groupSOPrangeend]
    , ["geotype" <$$> _groupSOPgeotype]
    , ["op2" <$$> _groupSOPop2]
    , ["grp2" <$$> _groupSOPgrp2]
    , ["rangestart" <$$> _groupSOPrangestart]
    , ["angle" <$$> _groupSOPangle]
    , ["newname" <$$> _groupSOPnewname]
    , ["crname" <$$> _groupSOPcrname]
    , ["not3" <$$> _groupSOPnot3]
    , ["cnvtname" <$$> _groupSOPcnvtname]
    , ["usebounds" <$$> _groupSOPusebounds]
    , ["ordered" <$$> _groupSOPordered]
    , ["pattern" <$$> _groupSOPpattern]
    , ["boundtype" <$$> _groupSOPboundtype]
    , ["groupop" <$$> _groupSOPgroupop]
    , ["dodepth" <$$> _groupSOPdodepth]
    , ["op3" <$$> _groupSOPop3]
    , ["filter" <$$> _groupSOPfilter]
    , Just <$> vec3Map' "size" _groupSOPsize
    , ["edgeangle" <$$> _groupSOPedgeangle]
    , ["oldname" <$$> _groupSOPoldname]
    , ["grpequal" <$$> _groupSOPgrpequal]
    , ["not2" <$$> _groupSOPnot2]
    , ["cnvtype" <$$> _groupSOPcnvtype]
    , ["convertg" <$$> _groupSOPconvertg]
    , ["unshared" <$$> _groupSOPunshared]
    , Just <$> vec3Map' "t" _groupSOPt
    , ["point" <$$> _groupSOPpoint]]
  pars (RefineSOP {..}) = catMaybes . mconcat $ [ ["domainv2" <$$> _refineSOPdomainv2]
    , ["firstv" <$$> _refineSOPfirstv]
    , ["refinev" <$$> _refineSOPrefinev]
    , ["firstu" <$$> _refineSOPfirstu]
    , ["secondv" <$$> _refineSOPsecondv]
    , ["unrefinev" <$$> _refineSOPunrefinev]
    , ["tolv" <$$> _refineSOPtolv]
    , ["domainu2" <$$> _refineSOPdomainu2]
    , ["domainu1" <$$> _refineSOPdomainu1]
    , ["unrefineu" <$$> _refineSOPunrefineu]
    , ["divsu" <$$> _refineSOPdivsu]
    , ["domainv1" <$$> _refineSOPdomainv1]
    , ["tolu" <$$> _refineSOPtolu]
    , ["group" <$$> _refineSOPgroup]
    , ["subdivspace" <$$> _refineSOPsubdivspace]
    , ["secondu" <$$> _refineSOPsecondu]
    , ["refineu" <$$> _refineSOPrefineu]
    , ["refinespace" <$$> _refineSOPrefinespace]
    , ["divsv" <$$> _refineSOPdivsv]]
  pars (DivideSOP {..}) = catMaybes . mconcat $ [ ["planar" <$$> _divideSOPplanar]
    , Just <$> vec3Map' "angle" _divideSOPangle
    , ["divs" <$$> _divideSOPdivs]
    , ["convex" <$$> _divideSOPconvex]
    , Just <$> vec3Map' "offset" _divideSOPoffset
    , Just <$> vec3Map' "size" _divideSOPsize
    , ["weight1" <$$> _divideSOPweight1]
    , ["smooth" <$$> _divideSOPsmooth]
    , ["dual" <$$> _divideSOPdual]
    , ["group" <$$> _divideSOPgroup]
    , ["brick" <$$> _divideSOPbrick]
    , ["weight2" <$$> _divideSOPweight2]
    , ["removesh" <$$> _divideSOPremovesh]
    , ["numsides" <$$> _divideSOPnumsides]]
  pars (ResampleSOP {..}) = catMaybes . mconcat $ [ ["measure" <$$> _resampleSOPmeasure]
    , ["segs" <$$> _resampleSOPsegs]
    , ["group" <$$> _resampleSOPgroup]
    , ["lod" <$$> _resampleSOPlod]
    , ["last" <$$> _resampleSOPlast]
    , ["method" <$$> _resampleSOPmethod]
    , ["dosegs" <$$> _resampleSOPdosegs]
    , ["dolength" <$$> _resampleSOPdolength]
    , ["edge" <$$> _resampleSOPedge]
    , ["length" <$$> _resampleSOPlength]]
  pars (ClipSOP {..}) = catMaybes . mconcat $ [ ["below" <$$> _clipSOPbelow]
    , ["group" <$$> _clipSOPgroup]
    , ["newg" <$$> _clipSOPnewg]
    , ["clipop" <$$> _clipSOPclipop]
    , Just <$> vec3Map' "dir" _clipSOPdir
    , ["dist" <$$> _clipSOPdist]
    , ["above" <$$> _clipSOPabove]]
  pars (SpringSOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _springSOPresetpulse]
    , ["fixed" <$$> _springSOPfixed]
    , ["attractmode" <$$> _springSOPattractmode]
    , ["gaintan" <$$> _springSOPgaintan]
    , ["springk" <$$> _springSOPspringk]
    , ["gainnorm" <$$> _springSOPgainnorm]
    , ["timeinc" <$$> _springSOPtimeinc]
    , ["copygroups" <$$> _springSOPcopygroups]
    , ["revertfixed" <$$> _springSOPrevertfixed]
    , Just <$> vec3Map' "external" _springSOPexternal
    , ["dodrag" <$$> _springSOPdodrag]
    , Just <$> vec3Map' "limitpos" _springSOPlimitpos
    , ["tension" <$$> _springSOPtension]
    , ["domass" <$$> _springSOPdomass]
    , ["period" <$$> _springSOPperiod]
    , ["accurate" <$$> _springSOPaccurate]
    , Just <$> vec3Map' "turb" _springSOPturb
    , ["timepreroll" <$$> _springSOPtimepreroll]
    , ["hit" <$$> _springSOPhit]
    , ["seed" <$$> _springSOPseed]
    , ["drag" <$$> _springSOPdrag]
    , ["mass" <$$> _springSOPmass]
    , Just <$> vec3Map' "limitneg" _springSOPlimitneg
    , ["springbehavior" <$$> _springSOPspringbehavior]
    , ["reset" <$$> _springSOPreset]
    , Just <$> vec3Map' "wind" _springSOPwind]
  pars (SuperquadSOP {..}) = catMaybes . mconcat $ [ ["cols" <$$> _superquadSOPcols]
    , ["surftype" <$$> _superquadSOPsurftype]
    , ["type" <$$> _superquadSOPtype]
    , ["normals" <$$> _superquadSOPnormals]
    , ["angle" <$$> _superquadSOPangle]
    , ["expxy" <$$> _superquadSOPexpxy]
    , ["modifybounds" <$$> _superquadSOPmodifybounds]
    , ["expz" <$$> _superquadSOPexpz]
    , ["rows" <$$> _superquadSOProws]
    , Just <$> vec3Map' "rad" _superquadSOPrad
    , ["orient" <$$> _superquadSOPorient]
    , Just <$> vec3Map' "t" _superquadSOPt
    , ["texture" <$$> _superquadSOPtexture]
    , ["cusp" <$$> _superquadSOPcusp]
    , ["upole" <$$> _superquadSOPupole]]
  pars (ProfileSOP {..}) = catMaybes . mconcat $ [ ["vrange1" <$$> _profileSOPvrange1]
    , ["csharp" <$$> _profileSOPcsharp]
    , ["sdivs" <$$> _profileSOPsdivs]
    , ["urange2" <$$> _profileSOPurange2]
    , ["delprof" <$$> _profileSOPdelprof]
    , ["maptype" <$$> _profileSOPmaptype]
    , ["smooth" <$$> _profileSOPsmooth]
    , ["keepsurf" <$$> _profileSOPkeepsurf]
    , ["tolerance" <$$> _profileSOPtolerance]
    , ["group" <$$> _profileSOPgroup]
    , ["parametric" <$$> _profileSOPparametric]
    , ["vrange2" <$$> _profileSOPvrange2]
    , ["order" <$$> _profileSOPorder]
    , ["urange1" <$$> _profileSOPurange1]]
  pars (GridSOP {..}) = catMaybes . mconcat $ [ ["interpu" <$$> _gridSOPinterpu]
    , ["cols" <$$> _gridSOPcols]
    , ["surftype" <$$> _gridSOPsurftype]
    , ["type" <$$> _gridSOPtype]
    , ["normals" <$$> _gridSOPnormals]
    , Just <$> vec2Map' "size" _gridSOPsize
    , ["texture" <$$> _gridSOPtexture]
    , ["rows" <$$> _gridSOProws]
    , ["interpv" <$$> _gridSOPinterpv]
    , ["modifybounds" <$$> _gridSOPmodifybounds]
    , ["orderv" <$$> _gridSOPorderv]
    , ["orient" <$$> _gridSOPorient]
    , Just <$> vec3Map' "t" _gridSOPt
    , ["orderu" <$$> _gridSOPorderu]]
  pars (HoleSOP {..}) = catMaybes . mconcat $ [ ["angle" <$$> _holeSOPangle]
    , ["unbridge" <$$> _holeSOPunbridge]
    , ["snap" <$$> _holeSOPsnap]
    , ["dist" <$$> _holeSOPdist]
    , ["group" <$$> _holeSOPgroup]]
  pars (SkinSOP {..}) = catMaybes . mconcat $ [ ["surftype" <$$> _skinSOPsurftype]
    , ["vprims" <$$> _skinSOPvprims]
    , ["polys" <$$> _skinSOPpolys]
    , ["prim" <$$> _skinSOPprim]
    , ["orderv" <$$> _skinSOPorderv]
    , ["inc" <$$> _skinSOPinc]
    , ["uprims" <$$> _skinSOPuprims]
    , ["skinops" <$$> _skinSOPskinops]
    , ["force" <$$> _skinSOPforce]
    , ["closev" <$$> _skinSOPclosev]
    , ["keepshape" <$$> _skinSOPkeepshape]]
  pars (LineSOP {..}) = catMaybes . mconcat $ [ ["points" <$$> _lineSOPpoints]
    , Just <$> vec3Map' "pb" _lineSOPpb
    , ["texture" <$$> _lineSOPtexture]
    , Just <$> vec3Map' "pa" _lineSOPpa]
  pars (DeleteSOP {..}) = catMaybes . mconcat $ [ ["select2" <$$> _deleteSOPselect2]
    , ["usenumber" <$$> _deleteSOPusenumber]
    , ["rangestart" <$$> _deleteSOPrangestart]
    , ["removegrp" <$$> _deleteSOPremovegrp]
    , ["usebounds" <$$> _deleteSOPusebounds]
    , Just <$> vec3Map' "dir" _deleteSOPdir
    , ["entity" <$$> _deleteSOPentity]
    , ["pattern" <$$> _deleteSOPpattern]
    , ["rangeend" <$$> _deleteSOPrangeend]
    , ["usenormal" <$$> _deleteSOPusenormal]
    , ["filter" <$$> _deleteSOPfilter]
    , ["keeppoints" <$$> _deleteSOPkeeppoints]
    , ["angle" <$$> _deleteSOPangle]
    , ["select1" <$$> _deleteSOPselect1]
    , Just <$> vec3Map' "size" _deleteSOPsize
    , ["negate" <$$> _deleteSOPnegate]
    , ["groupop" <$$> _deleteSOPgroupop]
    , ["boundtype" <$$> _deleteSOPboundtype]
    , ["group" <$$> _deleteSOPgroup]
    , Just <$> vec3Map' "t" _deleteSOPt
    , ["geotype" <$$> _deleteSOPgeotype]]
  pars (PolyreduceSOP {..}) = catMaybes . mconcat $ [ ["reduce" <$$> _polyreduceSOPreduce]
    , ["meshinvert" <$$> _polyreduceSOPmeshinvert]
    , ["percentage" <$$> _polyreduceSOPpercentage]
    , ["distance" <$$> _polyreduceSOPdistance]
    , ["lengthweight" <$$> _polyreduceSOPlengthweight]
    , ["creaseweight" <$$> _polyreduceSOPcreaseweight]
    , ["borderweight" <$$> _polyreduceSOPborderweight]
    , ["keepedges" <$$> _polyreduceSOPkeepedges]
    , ["triangulate" <$$> _polyreduceSOPtriangulate]
    , ["originalpoints" <$$> _polyreduceSOPoriginalpoints]
    , ["numpolys" <$$> _polyreduceSOPnumpolys]
    , ["minpercent" <$$> _polyreduceSOPminpercent]
    , ["creases" <$$> _polyreduceSOPcreases]]
  pars (SpriteSOP {..}) = catMaybes . mconcat $ [ [("xyzchop",) . ResolveP <$> _spriteSOPxyzchop]
    , ["falloffend" <$$> _spriteSOPfalloffend]
    , [("alphachop",) . ResolveP <$> _spriteSOPalphachop]
    , [("widthchop",) . ResolveP <$> _spriteSOPwidthchop]
    , [("colorchop",) . ResolveP <$> _spriteSOPcolorchop]
    , ["constantwidthnear" <$$> _spriteSOPconstantwidthnear]
    , ["perspectivewidth" <$$> _spriteSOPperspectivewidth]
    , ["falloffstart" <$$> _spriteSOPfalloffstart]
    , ["constantwidth" <$$> _spriteSOPconstantwidth]
    , ["constantwitdhfar" <$$> _spriteSOPconstantwitdhfar]]
  pars (SubdivideSOP {..}) = catMaybes . mconcat $ [ ["closeholes" <$$> _subdivideSOPcloseholes]
    , ["subdivide" <$$> _subdivideSOPsubdivide]
    , ["overridecrease" <$$> _subdivideSOPoverridecrease]
    , ["bias" <$$> _subdivideSOPbias]
    , ["surroundpoly" <$$> _subdivideSOPsurroundpoly]
    , ["outputcrease" <$$> _subdivideSOPoutputcrease]
    , ["outcreasegroup" <$$> _subdivideSOPoutcreasegroup]
    , ["iterations" <$$> _subdivideSOPiterations]
    , ["creaseweight" <$$> _subdivideSOPcreaseweight]
    , ["creases" <$$> _subdivideSOPcreases]]
  pars (IsosurfaceSOP {..}) = catMaybes . mconcat $ [ ["normals" <$$> _isosurfaceSOPnormals]
    , Just <$> vec3Map' "min" _isosurfaceSOPmin
    , ["func" <$$> _isosurfaceSOPfunc]
    , ["divsz" <$$> _isosurfaceSOPdivsz]
    , ["divsy" <$$> _isosurfaceSOPdivsy]
    , Just <$> vec3Map' "max" _isosurfaceSOPmax
    , ["divsx" <$$> _isosurfaceSOPdivsx]]
  pars (CaptureregionSOP {..}) = catMaybes . mconcat $ [ Just <$> rgbMap "color" _captureregionSOPcolor
    , ["bheight" <$$> _captureregionSOPbheight]
    , Just <$> vec3Map' "bcap" _captureregionSOPbcap
    , Just <$> vec3Map' "tcap" _captureregionSOPtcap
    , ["weight2" <$$> _captureregionSOPweight2]
    , ["orient" <$$> _captureregionSOPorient]
    , Just <$> vec3Map' "t" _captureregionSOPt
    , ["theight" <$$> _captureregionSOPtheight]
    , ["weight1" <$$> _captureregionSOPweight1]]
  pars (ScriptSOP {..}) = catMaybes . mconcat $ [ [("callbacks",) . ResolveP <$> _scriptSOPcallbacks]
    , ["setuppars" <$$> _scriptSOPsetuppars]]
  pars (ClaySOP {..}) = catMaybes . mconcat $ [ ["vsharp" <$$> _claySOPvsharp]
    , ["uvsnap1" <$$> _claySOPuvsnap1]
    , ["v" <$$> _claySOPv]
    , ["u" <$$> _claySOPu]
    , ["vusebias" <$$> _claySOPvusebias]
    , ["ubias" <$$> _claySOPubias]
    , Just <$> vec3Map' "dir" _claySOPdir
    , ["vwarp" <$$> _claySOPvwarp]
    , ["xord" <$$> _claySOPxord]
    , ["dist" <$$> _claySOPdist]
    , Just <$> vec3Map' "r" _claySOPr
    , Just <$> vec3Map' "s" _claySOPs
    , Just <$> vec3Map' "p" _claySOPp
    , ["vbias" <$$> _claySOPvbias]
    , ["usharp" <$$> _claySOPusharp]
    , ["uwarp" <$$> _claySOPuwarp]
    , Just <$> vec3Map' "coord" _claySOPcoord
    , ["group" <$$> _claySOPgroup]
    , ["rord" <$$> _claySOPrord]
    , ["uvsnap2" <$$> _claySOPuvsnap2]
    , Just <$> vec3Map' "t" _claySOPt
    , ["normal" <$$> _claySOPnormal]
    , ["uusebias" <$$> _claySOPuusebias]]
  pars _ = []
  opType (ForceSOP {}) = "forceSOP"
  opType (ParticleSOP {}) = "particleSOP"
  opType (RailsSOP {}) = "railsSOP"
  opType (CacheSOP {}) = "cacheSOP"
  opType (CircleSOP {}) = "circleSOP"
  opType (CarveSOP {}) = "carveSOP"
  opType (PrimitiveSOP {}) = "primitiveSOP"
  opType (NoiseSOP {}) = "noiseSOP"
  opType (ModelSOP {}) = "modelSOP"
  opType (FitSOP {}) = "fitSOP"
  opType (JointSOP {}) = "jointSOP"
  opType (SwitchSOP {}) = "switchSOP"
  opType (InSOP {}) = "inSOP"
  opType (BoxSOP {}) = "boxSOP"
  opType (ChoptoSOP {}) = "choptoSOP"
  opType (StitchSOP {}) = "stitchSOP"
  opType (ExtrudeSOP {}) = "extrudeSOP"
  opType (CaptureSOP {}) = "captureSOP"
  opType (MetaballSOP {}) = "metaballSOP"
  opType (PointSOP {}) = "pointSOP"
  opType (ConvertSOP {}) = "convertSOP"
  opType (LimitSOP {}) = "limitSOP"
  opType (BooleanSOP {}) = "booleanSOP"
  opType (KinectSOP {}) = "kinectSOP"
  opType (MaterialSOP {}) = "materialSOP"
  opType (SweepSOP {}) = "sweepSOP"
  opType (TrimSOP {}) = "trimSOP"
  opType (OutSOP {}) = "outSOP"
  opType (BridgeSOP {}) = "bridgeSOP"
  opType (FacetSOP {}) = "facetSOP"
  opType (SurfsectSOP {}) = "surfsectSOP"
  opType (RaySOP {}) = "raySOP"
  opType (BonegroupSOP {}) = "bonegroupSOP"
  opType (TorusSOP {}) = "torusSOP"
  opType (WireframeSOP {}) = "wireframeSOP"
  opType (AddSOP {}) = "addSOP"
  opType (TextureSOP {}) = "textureSOP"
  opType (DeformSOP {}) = "deformSOP"
  opType (OpenvrSOP {}) = "openvrSOP"
  opType (CurvesectSOP {}) = "curvesectSOP"
  opType (LsystemSOP {}) = "lsystemSOP"
  opType (FractalSOP {}) = "fractalSOP"
  opType (CopySOP {}) = "copySOP"
  opType (TristripSOP {}) = "tristripSOP"
  opType (CplusplusSOP {}) = "cplusplusSOP"
  opType (MagnetSOP {}) = "magnetSOP"
  opType (RectangleSOP {}) = "rectangleSOP"
  opType (SphereSOP {}) = "sphereSOP"
  opType (DattoSOP {}) = "dattoSOP"
  opType (TextSOP {}) = "textSOP"
  opType (LinethickSOP {}) = "linethickSOP"
  opType (TraceSOP {}) = "traceSOP"
  opType (SortSOP {}) = "sortSOP"
  opType (JoinSOP {}) = "joinSOP"
  opType (PolystitchSOP {}) = "polystitchSOP"
  opType (BlendSOP {}) = "blendSOP"
  opType (LodSOP {}) = "lodSOP"
  opType (CreepSOP {}) = "creepSOP"
  opType (PolysplineSOP {}) = "polysplineSOP"
  opType (CurveclaySOP {}) = "curveclaySOP"
  opType (ProjectSOP {}) = "projectSOP"
  opType (FileinSOP {}) = "fileinSOP"
  opType (SequenceblendSOP {}) = "sequenceblendSOP"
  opType (CapSOP {}) = "capSOP"
  opType (AlembicSOP {}) = "alembicSOP"
  opType (ObjectmergeSOP {}) = "objectmergeSOP"
  opType (MergeSOP {}) = "mergeSOP"
  opType (BasisSOP {}) = "basisSOP"
  opType (AttributeSOP {}) = "attributeSOP"
  opType (SelectSOP {}) = "selectSOP"
  opType (AlignSOP {}) = "alignSOP"
  opType (FontSOP {}) = "fontSOP"
  opType (TwistSOP {}) = "twistSOP"
  opType (RevolveSOP {}) = "revolveSOP"
  opType (PolyloftSOP {}) = "polyloftSOP"
  opType (PolypatchSOP {}) = "polypatchSOP"
  opType (NullSOP {}) = "nullSOP"
  opType (FilletSOP {}) = "filletSOP"
  opType (InversecurveSOP {}) = "inversecurveSOP"
  opType (TrailSOP {}) = "trailSOP"
  opType (AttributecreateSOP {}) = "attributecreateSOP"
  opType (LatticeSOP {}) = "latticeSOP"
  opType (TubeSOP {}) = "tubeSOP"
  opType (ArmSOP {}) = "armSOP"
  opType (TransformSOP {}) = "transformSOP"
  opType (VertexSOP {}) = "vertexSOP"
  opType (GroupSOP {}) = "groupSOP"
  opType (RefineSOP {}) = "refineSOP"
  opType (DivideSOP {}) = "divideSOP"
  opType (ResampleSOP {}) = "resampleSOP"
  opType (ClipSOP {}) = "clipSOP"
  opType (SpringSOP {}) = "springSOP"
  opType (SuperquadSOP {}) = "superquadSOP"
  opType (ProfileSOP {}) = "profileSOP"
  opType (GridSOP {}) = "gridSOP"
  opType (HoleSOP {}) = "holeSOP"
  opType (SkinSOP {}) = "skinSOP"
  opType (LineSOP {}) = "lineSOP"
  opType (DeleteSOP {}) = "deleteSOP"
  opType (PolyreduceSOP {}) = "polyreduceSOP"
  opType (SpriteSOP {}) = "spriteSOP"
  opType (SubdivideSOP {}) = "subdivideSOP"
  opType (IsosurfaceSOP {}) = "isosurfaceSOP"
  opType (CaptureregionSOP {}) = "captureregionSOP"
  opType (ScriptSOP {}) = "scriptSOP"
  opType (ClaySOP {}) = "claySOP"
  text _ = Nothing
  commands = view sopCommands
  connections = view sopIns


instance Op TOP where 
  pars (RemapTOP {..}) = catMaybes . mconcat $ [ ["fillmode" <$$> _remapTOPfillmode]
    , ["resmult" <$$> _remapTOPresmult]
    , ["aspect2" <$$> _remapTOPaspect2]
    , ["format" <$$> _remapTOPformat]
    , ["resmenu" <$$> _remapTOPresmenu]
    , ["npasses" <$$> _remapTOPnpasses]
    , ["resolutionw" <$$> _remapTOPresolutionw]
    , ["extend" <$$> _remapTOPextend]
    , ["aspect1" <$$> _remapTOPaspect1]
    , ["outputresolution" <$$> _remapTOPoutputresolution]
    , ["fliphorz" <$$> _remapTOPfliphorz]
    , ["resolutionh" <$$> _remapTOPresolutionh]
    , ["chanmask" <$$> _remapTOPchanmask]
    , ["armenu" <$$> _remapTOParmenu]
    , ["vertsource" <$$> _remapTOPvertsource]
    , ["filtertype" <$$> _remapTOPfiltertype]
    , ["horzsource" <$$> _remapTOPhorzsource]
    , ["flipvert" <$$> _remapTOPflipvert]
    , ["outputaspect" <$$> _remapTOPoutputaspect]
    , ["inputfiltertype" <$$> _remapTOPinputfiltertype]]
  pars (MoviefileoutTOP {..}) = catMaybes . mconcat $ [ ["quality" <$$> _moviefileoutTOPquality]
    , ["keyframeinterval" <$$> _moviefileoutTOPkeyframeinterval]
    , ["addframe" <$$> _moviefileoutTOPaddframe]
    , ["format" <$$> _moviefileoutTOPformat]
    , ["file" <$$> _moviefileoutTOPfile]
    , ["hapsecondarycompression" <$$> _moviefileoutTOPhapsecondarycompression]
    , ["inputfiltertype" <$$> _moviefileoutTOPinputfiltertype]
    , ["fps" <$$> _moviefileoutTOPfps]
    , ["outputresolution" <$$> _moviefileoutTOPoutputresolution]
    , ["fillmode" <$$> _moviefileoutTOPfillmode]
    , ["resolutionw" <$$> _moviefileoutTOPresolutionw]
    , ["audiobitrate" <$$> _moviefileoutTOPaudiobitrate]
    , ["profile" <$$> _moviefileoutTOPprofile]
    , ["bitratemode" <$$> _moviefileoutTOPbitratemode]
    , ["moviepixelformat" <$$> _moviefileoutTOPmoviepixelformat]
    , ["n" <$$> _moviefileoutTOPn]
    , ["videocodec" <$$> _moviefileoutTOPvideocodec]
    , ["aspect2" <$$> _moviefileoutTOPaspect2]
    , ["imagefiletype" <$$> _moviefileoutTOPimagefiletype]
    , ["avgbitrate" <$$> _moviefileoutTOPavgbitrate]
    , ["audiocodec" <$$> _moviefileoutTOPaudiocodec]
    , ["peakbitrate" <$$> _moviefileoutTOPpeakbitrate]
    , ["resmult" <$$> _moviefileoutTOPresmult]
    , ["type" <$$> _moviefileoutTOPtype]
    , ["resmenu" <$$> _moviefileoutTOPresmenu]
    , ["encodetestmode" <$$> _moviefileoutTOPencodetestmode]
    , ["chanmask" <$$> _moviefileoutTOPchanmask]
    , [("audiochop",) . ResolveP <$> _moviefileoutTOPaudiochop]
    , ["mipmaps" <$$> _moviefileoutTOPmipmaps]
    , ["npasses" <$$> _moviefileoutTOPnpasses]
    , ["outputaspect" <$$> _moviefileoutTOPoutputaspect]
    , ["resolutionh" <$$> _moviefileoutTOPresolutionh]
    , ["armenu" <$$> _moviefileoutTOParmenu]
    , ["maxthread" <$$> _moviefileoutTOPmaxthread]
    , ["stallforopen" <$$> _moviefileoutTOPstallforopen]
    , ["aspect1" <$$> _moviefileoutTOPaspect1]
    , ["record" <$$> _moviefileoutTOPrecord]
    , ["pause" <$$> _moviefileoutTOPpause]
    , ["entropymode" <$$> _moviefileoutTOPentropymode]
    , ["filtertype" <$$> _moviefileoutTOPfiltertype]]
  pars (GlslmultiTOP {..}) = catMaybes . mconcat $ [ ["depth" <$$> _glslmultiTOPdepth]
    , Just <$> vec4Map' "value3" _glslmultiTOPvalue3
    , ["glslversion" <$$> _glslmultiTOPglslversion]
    , ["fillmode" <$$> _glslmultiTOPfillmode]
    , ["resolutionw" <$$> _glslmultiTOPresolutionw]
    , ["acsize0" <$$> _glslmultiTOPacsize0]
    , Just <$> rgbaMap "clearvalue" _glslmultiTOPclearvalue
    , Just <$> vec4Map' "value24" _glslmultiTOPvalue24
    , ["dispatchsizey" <$$> _glslmultiTOPdispatchsizey]
    , Just <$> vec4Map' "value10" _glslmultiTOPvalue10
    , ["resmenu" <$$> _glslmultiTOPresmenu]
    , ["uniname12" <$$> _glslmultiTOPuniname12]
    , ["uniname25" <$$> _glslmultiTOPuniname25]
    , ["chopunitype9" <$$> _glslmultiTOPchopunitype9]
    , ["acinitval0" <$$> _glslmultiTOPacinitval0]
    , ["uniname1" <$$> _glslmultiTOPuniname1]
    , ["matuniname2" <$$> _glslmultiTOPmatuniname2]
    , ["uniname10" <$$> _glslmultiTOPuniname10]
    , ["chopuniname7" <$$> _glslmultiTOPchopuniname7]
    , ["uniname11" <$$> _glslmultiTOPuniname11]
    , Just <$> vec4Map' "value23" _glslmultiTOPvalue23
    , ["outputaspect" <$$> _glslmultiTOPoutputaspect]
    , Just <$> vec4Map' "value19" _glslmultiTOPvalue19
    , ["chopunitype2" <$$> _glslmultiTOPchopunitype2]
    , ["uniname5" <$$> _glslmultiTOPuniname5]
    , ["uniname4" <$$> _glslmultiTOPuniname4]
    , ["uniname23" <$$> _glslmultiTOPuniname23]
    , Just <$> vec4Map' "value2" _glslmultiTOPvalue2
    , ["resmult" <$$> _glslmultiTOPresmult]
    , ["chopuniname9" <$$> _glslmultiTOPchopuniname9]
    , ["acsize1" <$$> _glslmultiTOPacsize1]
    , Just <$> vec4Map' "value13" _glslmultiTOPvalue13
    , ["acsingleval1" <$$> _glslmultiTOPacsingleval1]
    , ["acinitval1" <$$> _glslmultiTOPacinitval1]
    , ["chopuniname4" <$$> _glslmultiTOPchopuniname4]
    , [("chop6",) . ResolveP <$> _glslmultiTOPchop6]
    , ["uniname14" <$$> _glslmultiTOPuniname14]
    , ["choparraytype8" <$$> _glslmultiTOPchoparraytype8]
    , Just <$> vec4Map' "value17" _glslmultiTOPvalue17
    , ["chopunitype4" <$$> _glslmultiTOPchopunitype4]
    , ["chopuniname8" <$$> _glslmultiTOPchopuniname8]
    , ["chanmask" <$$> _glslmultiTOPchanmask]
    , ["chopuniname1" <$$> _glslmultiTOPchopuniname1]
    , ["outputaccess" <$$> _glslmultiTOPoutputaccess]
    , ["uniname2" <$$> _glslmultiTOPuniname2]
    , Just <$> vec4Map' "value6" _glslmultiTOPvalue6
    , ["armenu" <$$> _glslmultiTOParmenu]
    , ["uniname3" <$$> _glslmultiTOPuniname3]
    , Just <$> vec4Map' "value21" _glslmultiTOPvalue21
    , ["chopunitype3" <$$> _glslmultiTOPchopunitype3]
    , ["chopunitype6" <$$> _glslmultiTOPchopunitype6]
    , Just <$> vec4Map' "value4" _glslmultiTOPvalue4
    , Just <$> vec4Map' "value15" _glslmultiTOPvalue15
    , [("chop3",) . ResolveP <$> _glslmultiTOPchop3]
    , ["clearoutputs" <$$> _glslmultiTOPclearoutputs]
    , ["filtertype" <$$> _glslmultiTOPfiltertype]
    , ["uniname20" <$$> _glslmultiTOPuniname20]
    , ["matuniname1" <$$> _glslmultiTOPmatuniname1]
    , ["chopuniname2" <$$> _glslmultiTOPchopuniname2]
    , ["uniname9" <$$> _glslmultiTOPuniname9]
    , ["choparraytype1" <$$> _glslmultiTOPchoparraytype1]
    , ["chopuniname0" <$$> _glslmultiTOPchopuniname0]
    , ["resolutionh" <$$> _glslmultiTOPresolutionh]
    , ["uniname27" <$$> _glslmultiTOPuniname27]
    , ["aspect1" <$$> _glslmultiTOPaspect1]
    , ["numcolorbufs" <$$> _glslmultiTOPnumcolorbufs]
    , ["inputmapping" <$$> _glslmultiTOPinputmapping]
    , Just <$> vec4Map' "value27" _glslmultiTOPvalue27
    , [("chop2",) . ResolveP <$> _glslmultiTOPchop2]
    , Just <$> vec4Map' "value8" _glslmultiTOPvalue8
    , [("chop5",) . ResolveP <$> _glslmultiTOPchop5]
    , ["uniname13" <$$> _glslmultiTOPuniname13]
    , ["chopunitype0" <$$> _glslmultiTOPchopunitype0]
    , ["acinitval2" <$$> _glslmultiTOPacinitval2]
    , ["acbinding3" <$$> _glslmultiTOPacbinding3]
    , ["uniname28" <$$> _glslmultiTOPuniname28]
    , Just <$> vec4Map' "value0" _glslmultiTOPvalue0
    , [("acchopval2",) . ResolveP <$> _glslmultiTOPacchopval2]
    , ["choparraytype4" <$$> _glslmultiTOPchoparraytype4]
    , ["chopunitype8" <$$> _glslmultiTOPchopunitype8]
    , ["inputextendw" <$$> _glslmultiTOPinputextendw]
    , ["uniname0" <$$> _glslmultiTOPuniname0]
    , ["uniname26" <$$> _glslmultiTOPuniname26]
    , ["acsize3" <$$> _glslmultiTOPacsize3]
    , ["customdepth" <$$> _glslmultiTOPcustomdepth]
    , ["matuniname3" <$$> _glslmultiTOPmatuniname3]
    , ["acbinding2" <$$> _glslmultiTOPacbinding2]
    , ["choparraytype5" <$$> _glslmultiTOPchoparraytype5]
    , ["nval" <$$> _glslmultiTOPnval]
    , ["mode" <$$> _glslmultiTOPmode]
    , ["aspect2" <$$> _glslmultiTOPaspect2]
    , ["format" <$$> _glslmultiTOPformat]
    , Just <$> vec4Map' "value29" _glslmultiTOPvalue29
    , ["acinitval3" <$$> _glslmultiTOPacinitval3]
    , ["chopuniname3" <$$> _glslmultiTOPchopuniname3]
    , [("computedat",) . ResolveP <$> _glslmultiTOPcomputedat]
    , [("acchopval0",) . ResolveP <$> _glslmultiTOPacchopval0]
    , [("pixeldat",) . ResolveP <$> _glslmultiTOPpixeldat]
    , Just <$> vec4Map' "value20" _glslmultiTOPvalue20
    , Just <$> vec4Map' "value25" _glslmultiTOPvalue25
    , ["choparraytype6" <$$> _glslmultiTOPchoparraytype6]
    , ["choparraytype9" <$$> _glslmultiTOPchoparraytype9]
    , ["type" <$$> _glslmultiTOPtype]
    , ["acsingleval0" <$$> _glslmultiTOPacsingleval0]
    , ["chopuniname6" <$$> _glslmultiTOPchopuniname6]
    , ["uniname17" <$$> _glslmultiTOPuniname17]
    , ["uniname8" <$$> _glslmultiTOPuniname8]
    , ["chopuniname5" <$$> _glslmultiTOPchopuniname5]
    , ["matuniname7" <$$> _glslmultiTOPmatuniname7]
    , [("chop7",) . ResolveP <$> _glslmultiTOPchop7]
    , [("chop9",) . ResolveP <$> _glslmultiTOPchop9]
    , ["enablevectorpage3" <$$> _glslmultiTOPenablevectorpage3]
    , [("chop0",) . ResolveP <$> _glslmultiTOPchop0]
    , ["uniname19" <$$> _glslmultiTOPuniname19]
    , Just <$> vec4Map' "value11" _glslmultiTOPvalue11
    , ["uniname7" <$$> _glslmultiTOPuniname7]
    , ["loaduniformnames" <$$> _glslmultiTOPloaduniformnames]
    , ["uniname29" <$$> _glslmultiTOPuniname29]
    , Just <$> vec4Map' "value5" _glslmultiTOPvalue5
    , [("chop1",) . ResolveP <$> _glslmultiTOPchop1]
    , Just <$> vec4Map' "value9" _glslmultiTOPvalue9
    , [("chop4",) . ResolveP <$> _glslmultiTOPchop4]
    , ["matuniname9" <$$> _glslmultiTOPmatuniname9]
    , ["dispatchsizez" <$$> _glslmultiTOPdispatchsizez]
    , ["chopunitype5" <$$> _glslmultiTOPchopunitype5]
    , ["choparraytype7" <$$> _glslmultiTOPchoparraytype7]
    , ["inputfiltertype" <$$> _glslmultiTOPinputfiltertype]
    , ["matuniname4" <$$> _glslmultiTOPmatuniname4]
    , ["chopunitype1" <$$> _glslmultiTOPchopunitype1]
    , ["matuniname8" <$$> _glslmultiTOPmatuniname8]
    , Just <$> vec4Map' "value26" _glslmultiTOPvalue26
    , ["uniname21" <$$> _glslmultiTOPuniname21]
    , Just <$> vec4Map' "value28" _glslmultiTOPvalue28
    , ["acsingleval2" <$$> _glslmultiTOPacsingleval2]
    , Just <$> vec4Map' "value14" _glslmultiTOPvalue14
    , ["uniname24" <$$> _glslmultiTOPuniname24]
    , ["acbinding0" <$$> _glslmultiTOPacbinding0]
    , ["uniname16" <$$> _glslmultiTOPuniname16]
    , ["choparraytype3" <$$> _glslmultiTOPchoparraytype3]
    , ["npasses" <$$> _glslmultiTOPnpasses]
    , [("chop8",) . ResolveP <$> _glslmultiTOPchop8]
    , [("acchopval1",) . ResolveP <$> _glslmultiTOPacchopval1]
    , [("acchopval3",) . ResolveP <$> _glslmultiTOPacchopval3]
    , ["inputextenduv" <$$> _glslmultiTOPinputextenduv]
    , Just <$> vec4Map' "value22" _glslmultiTOPvalue22
    , ["outputresolution" <$$> _glslmultiTOPoutputresolution]
    , ["acsize2" <$$> _glslmultiTOPacsize2]
    , ["matuniname0" <$$> _glslmultiTOPmatuniname0]
    , ["matuniname6" <$$> _glslmultiTOPmatuniname6]
    , ["acbinding1" <$$> _glslmultiTOPacbinding1]
    , ["uniname15" <$$> _glslmultiTOPuniname15]
    , Just <$> vec4Map' "value1" _glslmultiTOPvalue1
    , Just <$> vec4Map' "value16" _glslmultiTOPvalue16
    , ["matuniname5" <$$> _glslmultiTOPmatuniname5]
    , ["dispatchsizex" <$$> _glslmultiTOPdispatchsizex]
    , [("vertexdat",) . ResolveP <$> _glslmultiTOPvertexdat]
    , ["choparraytype2" <$$> _glslmultiTOPchoparraytype2]
    , ["uniname18" <$$> _glslmultiTOPuniname18]
    , ["chopunitype7" <$$> _glslmultiTOPchopunitype7]
    , ["uniname6" <$$> _glslmultiTOPuniname6]
    , Just <$> vec4Map' "value7" _glslmultiTOPvalue7
    , ["uniname22" <$$> _glslmultiTOPuniname22]
    , Just <$> vec4Map' "value18" _glslmultiTOPvalue18
    , ["acsingleval3" <$$> _glslmultiTOPacsingleval3]
    , Just <$> vec4Map' "value12" _glslmultiTOPvalue12
    , ["choparraytype0" <$$> _glslmultiTOPchoparraytype0]]
  pars (SubstanceselectTOP {..}) = catMaybes . mconcat $ [ [("substance",) . ResolveP <$> _substanceselectTOPsubstance]
    , ["resmult" <$$> _substanceselectTOPresmult]
    , ["aspect2" <$$> _substanceselectTOPaspect2]
    , ["format" <$$> _substanceselectTOPformat]
    , ["output" <$$> _substanceselectTOPoutput]
    , ["resmenu" <$$> _substanceselectTOPresmenu]
    , ["npasses" <$$> _substanceselectTOPnpasses]
    , ["inputfiltertype" <$$> _substanceselectTOPinputfiltertype]
    , ["chanmask" <$$> _substanceselectTOPchanmask]
    , ["outputresolution" <$$> _substanceselectTOPoutputresolution]
    , ["fillmode" <$$> _substanceselectTOPfillmode]
    , ["resolutionw" <$$> _substanceselectTOPresolutionw]
    , ["armenu" <$$> _substanceselectTOParmenu]
    , ["filtertype" <$$> _substanceselectTOPfiltertype]
    , ["aspect1" <$$> _substanceselectTOPaspect1]
    , ["resolutionh" <$$> _substanceselectTOPresolutionh]
    , ["outputaspect" <$$> _substanceselectTOPoutputaspect]]
  pars (PhotoshopinTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _photoshopinTOPaspect2]
    , ["format" <$$> _photoshopinTOPformat]
    , ["active" <$$> _photoshopinTOPactive]
    , ["outputresolution" <$$> _photoshopinTOPoutputresolution]
    , ["inputfiltertype" <$$> _photoshopinTOPinputfiltertype]
    , ["chanmask" <$$> _photoshopinTOPchanmask]
    , ["address" <$$> _photoshopinTOPaddress]
    , ["fillmode" <$$> _photoshopinTOPfillmode]
    , ["resolutionw" <$$> _photoshopinTOPresolutionw]
    , ["armenu" <$$> _photoshopinTOParmenu]
    , ["filtertype" <$$> _photoshopinTOPfiltertype]
    , ["imageformat" <$$> _photoshopinTOPimageformat]
    , ["lockeddocument" <$$> _photoshopinTOPlockeddocument]
    , ["resmult" <$$> _photoshopinTOPresmult]
    , ["resmenu" <$$> _photoshopinTOPresmenu]
    , ["unlock" <$$> _photoshopinTOPunlock]
    , ["password" <$$> _photoshopinTOPpassword]
    , ["resolutionh" <$$> _photoshopinTOPresolutionh]
    , ["npasses" <$$> _photoshopinTOPnpasses]
    , ["locktocurrent" <$$> _photoshopinTOPlocktocurrent]
    , ["updatemode" <$$> _photoshopinTOPupdatemode]
    , ["aspect1" <$$> _photoshopinTOPaspect1]
    , ["update" <$$> _photoshopinTOPupdate]
    , ["maxupdaterate" <$$> _photoshopinTOPmaxupdaterate]
    , ["outputaspect" <$$> _photoshopinTOPoutputaspect]]
  pars (OutTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _outTOPresmult]
    , ["aspect2" <$$> _outTOPaspect2]
    , ["format" <$$> _outTOPformat]
    , ["resmenu" <$$> _outTOPresmenu]
    , ["npasses" <$$> _outTOPnpasses]
    , ["inputfiltertype" <$$> _outTOPinputfiltertype]
    , ["chanmask" <$$> _outTOPchanmask]
    , ["outputresolution" <$$> _outTOPoutputresolution]
    , ["fillmode" <$$> _outTOPfillmode]
    , ["resolutionw" <$$> _outTOPresolutionw]
    , ["armenu" <$$> _outTOParmenu]
    , ["filtertype" <$$> _outTOPfiltertype]
    , ["aspect1" <$$> _outTOPaspect1]
    , ["label" <$$> _outTOPlabel]
    , ["resolutionh" <$$> _outTOPresolutionh]
    , ["outputaspect" <$$> _outTOPoutputaspect]]
  pars (SyphonspoutoutTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _syphonspoutoutTOPresmult]
    , ["aspect2" <$$> _syphonspoutoutTOPaspect2]
    , ["format" <$$> _syphonspoutoutTOPformat]
    , ["active" <$$> _syphonspoutoutTOPactive]
    , ["resmenu" <$$> _syphonspoutoutTOPresmenu]
    , ["npasses" <$$> _syphonspoutoutTOPnpasses]
    , ["inputfiltertype" <$$> _syphonspoutoutTOPinputfiltertype]
    , ["chanmask" <$$> _syphonspoutoutTOPchanmask]
    , ["outputresolution" <$$> _syphonspoutoutTOPoutputresolution]
    , ["fillmode" <$$> _syphonspoutoutTOPfillmode]
    , ["resolutionh" <$$> _syphonspoutoutTOPresolutionh]
    , ["armenu" <$$> _syphonspoutoutTOParmenu]
    , ["sendername" <$$> _syphonspoutoutTOPsendername]
    , ["aspect1" <$$> _syphonspoutoutTOPaspect1]
    , ["resolutionw" <$$> _syphonspoutoutTOPresolutionw]
    , ["outputaspect" <$$> _syphonspoutoutTOPoutputaspect]
    , ["filtertype" <$$> _syphonspoutoutTOPfiltertype]]
  pars (LumablurTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _lumablurTOPaspect2]
    , ["format" <$$> _lumablurTOPformat]
    , ["extend" <$$> _lumablurTOPextend]
    , ["aspect1" <$$> _lumablurTOPaspect1]
    , ["outputresolution" <$$> _lumablurTOPoutputresolution]
    , ["fillmode" <$$> _lumablurTOPfillmode]
    , ["resolutionw" <$$> _lumablurTOPresolutionw]
    , ["armenu" <$$> _lumablurTOParmenu]
    , ["filtertype" <$$> _lumablurTOPfiltertype]
    , ["type" <$$> _lumablurTOPtype]
    , ["widthchan" <$$> _lumablurTOPwidthchan]
    , ["inputfiltertype" <$$> _lumablurTOPinputfiltertype]
    , ["resmult" <$$> _lumablurTOPresmult]
    , ["blackvalue" <$$> _lumablurTOPblackvalue]
    , ["resmenu" <$$> _lumablurTOPresmenu]
    , ["blackwidth" <$$> _lumablurTOPblackwidth]
    , ["whitewidth" <$$> _lumablurTOPwhitewidth]
    , ["resolutionh" <$$> _lumablurTOPresolutionh]
    , ["npasses" <$$> _lumablurTOPnpasses]
    , ["chanmask" <$$> _lumablurTOPchanmask]
    , ["outputaspect" <$$> _lumablurTOPoutputaspect]
    , ["whitevalue" <$$> _lumablurTOPwhitevalue]]
  pars (BlobtrackTOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _blobtrackTOPresetpulse]
    , ["aspect2" <$$> _blobtrackTOPaspect2]
    , ["revivetime" <$$> _blobtrackTOPrevivetime]
    , ["monosource" <$$> _blobtrackTOPmonosource]
    , ["deleteoverlap" <$$> _blobtrackTOPdeleteoverlap]
    , ["chanmask" <$$> _blobtrackTOPchanmask]
    , ["outputresolution" <$$> _blobtrackTOPoutputresolution]
    , ["fillmode" <$$> _blobtrackTOPfillmode]
    , ["resolutionw" <$$> _blobtrackTOPresolutionw]
    , ["deletenearby" <$$> _blobtrackTOPdeletenearby]
    , ["filtertype" <$$> _blobtrackTOPfiltertype]
    , ["deleteoverlaptol" <$$> _blobtrackTOPdeleteoverlaptol]
    , ["maxblobsize" <$$> _blobtrackTOPmaxblobsize]
    , ["maxmovedistance" <$$> _blobtrackTOPmaxmovedistance]
    , ["inputfiltertype" <$$> _blobtrackTOPinputfiltertype]
    , ["resmult" <$$> _blobtrackTOPresmult]
    , Just <$> rgbMap "blobcolor" _blobtrackTOPblobcolor
    , ["resmenu" <$$> _blobtrackTOPresmenu]
    , ["format" <$$> _blobtrackTOPformat]
    , ["deletenearbytol" <$$> _blobtrackTOPdeletenearbytol]
    , ["resolutionh" <$$> _blobtrackTOPresolutionh]
    , ["revivearea" <$$> _blobtrackTOPrevivearea]
    , ["minblobsize" <$$> _blobtrackTOPminblobsize]
    , ["armenu" <$$> _blobtrackTOParmenu]
    , ["npasses" <$$> _blobtrackTOPnpasses]
    , ["aspect1" <$$> _blobtrackTOPaspect1]
    , ["revivedistance" <$$> _blobtrackTOPrevivedistance]
    , ["drawblobs" <$$> _blobtrackTOPdrawblobs]
    , ["reviveblobs" <$$> _blobtrackTOPreviveblobs]
    , ["outputaspect" <$$> _blobtrackTOPoutputaspect]
    , ["reset" <$$> _blobtrackTOPreset]
    , ["deletedist" <$$> _blobtrackTOPdeletedist]]
  pars (TileTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _tileTOPaspect2]
    , ["format" <$$> _tileTOPformat]
    , ["outputresolution" <$$> _tileTOPoutputresolution]
    , ["inputfiltertype" <$$> _tileTOPinputfiltertype]
    , ["overlapuunit" <$$> _tileTOPoverlapuunit]
    , ["cropleftunit" <$$> _tileTOPcropleftunit]
    , ["fillmode" <$$> _tileTOPfillmode]
    , ["overlapvunit" <$$> _tileTOPoverlapvunit]
    , ["resolutionw" <$$> _tileTOPresolutionw]
    , ["cropbottomunit" <$$> _tileTOPcropbottomunit]
    , ["cropbottom" <$$> _tileTOPcropbottom]
    , ["repeatx" <$$> _tileTOPrepeatx]
    , ["croprightunit" <$$> _tileTOPcroprightunit]
    , ["flipx" <$$> _tileTOPflipx]
    , ["repeaty" <$$> _tileTOPrepeaty]
    , ["armenu" <$$> _tileTOParmenu]
    , ["resmult" <$$> _tileTOPresmult]
    , ["resmenu" <$$> _tileTOPresmenu]
    , ["overlapu" <$$> _tileTOPoverlapu]
    , ["chanmask" <$$> _tileTOPchanmask]
    , ["overlapv" <$$> _tileTOPoverlapv]
    , ["reflecty" <$$> _tileTOPreflecty]
    , ["npasses" <$$> _tileTOPnpasses]
    , ["outputaspect" <$$> _tileTOPoutputaspect]
    , ["flop" <$$> _tileTOPflop]
    , ["resolutionh" <$$> _tileTOPresolutionh]
    , ["cropleft" <$$> _tileTOPcropleft]
    , ["reflectx" <$$> _tileTOPreflectx]
    , ["croptopunit" <$$> _tileTOPcroptopunit]
    , ["aspect1" <$$> _tileTOPaspect1]
    , ["flipy" <$$> _tileTOPflipy]
    , ["croptop" <$$> _tileTOPcroptop]
    , ["cropright" <$$> _tileTOPcropright]
    , ["filtertype" <$$> _tileTOPfiltertype]]
  pars (BlurTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _blurTOPaspect2]
    , ["format" <$$> _blurTOPformat]
    , ["preshrink" <$$> _blurTOPpreshrink]
    , ["offset2" <$$> _blurTOPoffset2]
    , ["extend" <$$> _blurTOPextend]
    , ["chanmask" <$$> _blurTOPchanmask]
    , ["outputresolution" <$$> _blurTOPoutputresolution]
    , ["fillmode" <$$> _blurTOPfillmode]
    , ["resolutionw" <$$> _blurTOPresolutionw]
    , ["armenu" <$$> _blurTOParmenu]
    , ["filtertype" <$$> _blurTOPfiltertype]
    , ["resolutionh" <$$> _blurTOPresolutionh]
    , ["inputfiltertype" <$$> _blurTOPinputfiltertype]
    , ["offset1" <$$> _blurTOPoffset1]
    , ["resmult" <$$> _blurTOPresmult]
    , ["type" <$$> _blurTOPtype]
    , ["resmenu" <$$> _blurTOPresmenu]
    , ["size" <$$> _blurTOPsize]
    , ["offsetunit" <$$> _blurTOPoffsetunit]
    , ["dither" <$$> _blurTOPdither]
    , ["rotate" <$$> _blurTOProtate]
    , ["npasses" <$$> _blurTOPnpasses]
    , ["aspect1" <$$> _blurTOPaspect1]
    , ["method" <$$> _blurTOPmethod]
    , ["outputaspect" <$$> _blurTOPoutputaspect]]
  pars (HsvadjustTOP {..}) = catMaybes . mconcat $ [ Just <$> rgbMap "startcolor" _hsvadjustTOPstartcolor
    , ["aspect2" <$$> _hsvadjustTOPaspect2]
    , ["format" <$$> _hsvadjustTOPformat]
    , ["hueoffset" <$$> _hsvadjustTOPhueoffset]
    , ["valuerange" <$$> _hsvadjustTOPvaluerange]
    , ["inputfiltertype" <$$> _hsvadjustTOPinputfiltertype]
    , ["chanmask" <$$> _hsvadjustTOPchanmask]
    , ["outputresolution" <$$> _hsvadjustTOPoutputresolution]
    , ["fillmode" <$$> _hsvadjustTOPfillmode]
    , ["resolutionw" <$$> _hsvadjustTOPresolutionw]
    , ["huerange" <$$> _hsvadjustTOPhuerange]
    , ["armenu" <$$> _hsvadjustTOParmenu]
    , ["filtertype" <$$> _hsvadjustTOPfiltertype]
    , ["saturationmult" <$$> _hsvadjustTOPsaturationmult]
    , ["saturationrange" <$$> _hsvadjustTOPsaturationrange]
    , ["valuefalloff" <$$> _hsvadjustTOPvaluefalloff]
    , ["huefalloff" <$$> _hsvadjustTOPhuefalloff]
    , ["valuemult" <$$> _hsvadjustTOPvaluemult]
    , ["resmult" <$$> _hsvadjustTOPresmult]
    , ["resmenu" <$$> _hsvadjustTOPresmenu]
    , ["resolutionh" <$$> _hsvadjustTOPresolutionh]
    , ["saturationfalloff" <$$> _hsvadjustTOPsaturationfalloff]
    , ["npasses" <$$> _hsvadjustTOPnpasses]
    , ["aspect1" <$$> _hsvadjustTOPaspect1]
    , ["outputaspect" <$$> _hsvadjustTOPoutputaspect]]
  pars (RenderselectTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _renderselectTOPresmult]
    , ["aspect2" <$$> _renderselectTOPaspect2]
    , ["format" <$$> _renderselectTOPformat]
    , ["resmenu" <$$> _renderselectTOPresmenu]
    , ["npasses" <$$> _renderselectTOPnpasses]
    , ["inputfiltertype" <$$> _renderselectTOPinputfiltertype]
    , ["chanmask" <$$> _renderselectTOPchanmask]
    , ["outputresolution" <$$> _renderselectTOPoutputresolution]
    , ["fillmode" <$$> _renderselectTOPfillmode]
    , ["resolutionh" <$$> _renderselectTOPresolutionh]
    , ["peellayerindex" <$$> _renderselectTOPpeellayerindex]
    , ["armenu" <$$> _renderselectTOParmenu]
    , [("top",) . ResolveP <$> _renderselectTOPtop]
    , ["colorbufindex" <$$> _renderselectTOPcolorbufindex]
    , ["aspect1" <$$> _renderselectTOPaspect1]
    , ["cameraindex" <$$> _renderselectTOPcameraindex]
    , ["resolutionw" <$$> _renderselectTOPresolutionw]
    , ["outputaspect" <$$> _renderselectTOPoutputaspect]
    , ["filtertype" <$$> _renderselectTOPfiltertype]]
  pars (FitTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _fitTOPaspect2]
    , ["fit" <$$> _fitTOPfit]
    , ["inputfiltertype" <$$> _fitTOPinputfiltertype]
    , ["chanmask" <$$> _fitTOPchanmask]
    , ["outputresolution" <$$> _fitTOPoutputresolution]
    , ["fillmode" <$$> _fitTOPfillmode]
    , ["resolutionw" <$$> _fitTOPresolutionw]
    , ["armenu" <$$> _fitTOParmenu]
    , ["filtertype" <$$> _fitTOPfiltertype]
    , ["format" <$$> _fitTOPformat]
    , Just <$> rgbaMap "bgcolor" _fitTOPbgcolor
    , ["xord" <$$> _fitTOPxord]
    , ["resmult" <$$> _fitTOPresmult]
    , ["punit" <$$> _fitTOPpunit]
    , Just <$> vec2Map' "s" _fitTOPs
    , ["resmenu" <$$> _fitTOPresmenu]
    , Just <$> vec2Map' "p" _fitTOPp
    , ["resolutionh" <$$> _fitTOPresolutionh]
    , ["tunit" <$$> _fitTOPtunit]
    , ["npasses" <$$> _fitTOPnpasses]
    , ["aspect1" <$$> _fitTOPaspect1]
    , Just <$> vec2Map' "t" _fitTOPt
    , ["outputaspect" <$$> _fitTOPoutputaspect]]
  pars (NdiinTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _ndiinTOPresmult]
    , ["aspect2" <$$> _ndiinTOPaspect2]
    , ["format" <$$> _ndiinTOPformat]
    , ["active" <$$> _ndiinTOPactive]
    , ["resmenu" <$$> _ndiinTOPresmenu]
    , ["bandwidth" <$$> _ndiinTOPbandwidth]
    , ["npasses" <$$> _ndiinTOPnpasses]
    , ["inputfiltertype" <$$> _ndiinTOPinputfiltertype]
    , ["aspect1" <$$> _ndiinTOPaspect1]
    , ["outputresolution" <$$> _ndiinTOPoutputresolution]
    , ["fillmode" <$$> _ndiinTOPfillmode]
    , ["name" <$$> _ndiinTOPname]
    , ["resolutionh" <$$> _ndiinTOPresolutionh]
    , ["chanmask" <$$> _ndiinTOPchanmask]
    , ["armenu" <$$> _ndiinTOParmenu]
    , ["filtertype" <$$> _ndiinTOPfiltertype]
    , [("grouptable",) . ResolveP <$> _ndiinTOPgrouptable]
    , ["extraips" <$$> _ndiinTOPextraips]
    , ["resolutionw" <$$> _ndiinTOPresolutionw]
    , ["outputaspect" <$$> _ndiinTOPoutputaspect]]
  pars (EmbossTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _embossTOPaspect2]
    , ["format" <$$> _embossTOPformat]
    , ["offset2" <$$> _embossTOPoffset2]
    , ["inputfiltertype" <$$> _embossTOPinputfiltertype]
    , ["chanmask" <$$> _embossTOPchanmask]
    , ["outputresolution" <$$> _embossTOPoutputresolution]
    , ["fillmode" <$$> _embossTOPfillmode]
    , ["resolutionw" <$$> _embossTOPresolutionw]
    , ["select" <$$> _embossTOPselect]
    , ["armenu" <$$> _embossTOParmenu]
    , ["filtertype" <$$> _embossTOPfiltertype]
    , ["direction" <$$> _embossTOPdirection]
    , ["offset1" <$$> _embossTOPoffset1]
    , ["resmult" <$$> _embossTOPresmult]
    , ["resmenu" <$$> _embossTOPresmenu]
    , ["offsetunit" <$$> _embossTOPoffsetunit]
    , ["strength" <$$> _embossTOPstrength]
    , ["resolutionh" <$$> _embossTOPresolutionh]
    , ["npasses" <$$> _embossTOPnpasses]
    , ["aspect1" <$$> _embossTOPaspect1]
    , ["method" <$$> _embossTOPmethod]
    , ["midpoint" <$$> _embossTOPmidpoint]
    , ["outputaspect" <$$> _embossTOPoutputaspect]]
  pars (DisplaceTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _displaceTOPaspect2]
    , ["format" <$$> _displaceTOPformat]
    , ["offset2" <$$> _displaceTOPoffset2]
    , ["inputfiltertype" <$$> _displaceTOPinputfiltertype]
    , ["horzsource" <$$> _displaceTOPhorzsource]
    , ["outputresolution" <$$> _displaceTOPoutputresolution]
    , ["fillmode" <$$> _displaceTOPfillmode]
    , ["displaceweight2" <$$> _displaceTOPdisplaceweight2]
    , ["midpoint1" <$$> _displaceTOPmidpoint1]
    , ["armenu" <$$> _displaceTOParmenu]
    , ["vertsource" <$$> _displaceTOPvertsource]
    , ["filtertype" <$$> _displaceTOPfiltertype]
    , ["resolutionw" <$$> _displaceTOPresolutionw]
    , ["displaceweight1" <$$> _displaceTOPdisplaceweight1]
    , ["offset1" <$$> _displaceTOPoffset1]
    , ["resmult" <$$> _displaceTOPresmult]
    , ["resmenu" <$$> _displaceTOPresmenu]
    , ["chanmask" <$$> _displaceTOPchanmask]
    , ["midpoint2" <$$> _displaceTOPmidpoint2]
    , ["outputaspect" <$$> _displaceTOPoutputaspect]
    , ["resolutionh" <$$> _displaceTOPresolutionh]
    , ["offsetweight" <$$> _displaceTOPoffsetweight]
    , ["npasses" <$$> _displaceTOPnpasses]
    , ["aspect1" <$$> _displaceTOPaspect1]
    , ["uvweight" <$$> _displaceTOPuvweight]
    , ["extend" <$$> _displaceTOPextend]]
  pars (MultiplyTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _multiplyTOPaspect2]
    , ["format" <$$> _multiplyTOPformat]
    , ["extend" <$$> _multiplyTOPextend]
    , ["chanmask" <$$> _multiplyTOPchanmask]
    , ["outputresolution" <$$> _multiplyTOPoutputresolution]
    , ["fillmode" <$$> _multiplyTOPfillmode]
    , ["resolutionw" <$$> _multiplyTOPresolutionw]
    , ["armenu" <$$> _multiplyTOParmenu]
    , ["filtertype" <$$> _multiplyTOPfiltertype]
    , ["inputfiltertype" <$$> _multiplyTOPinputfiltertype]
    , ["resmult" <$$> _multiplyTOPresmult]
    , ["punit" <$$> _multiplyTOPpunit]
    , Just <$> vec2Map' "s" _multiplyTOPs
    , ["resmenu" <$$> _multiplyTOPresmenu]
    , Just <$> vec2Map' "p" _multiplyTOPp
    , ["size" <$$> _multiplyTOPsize]
    , ["npasses" <$$> _multiplyTOPnpasses]
    , ["outputaspect" <$$> _multiplyTOPoutputaspect]
    , ["resolutionh" <$$> _multiplyTOPresolutionh]
    , ["tunit" <$$> _multiplyTOPtunit]
    , ["prefit" <$$> _multiplyTOPprefit]
    , ["r" <$$> _multiplyTOPr]
    , ["aspect1" <$$> _multiplyTOPaspect1]
    , ["justifyh" <$$> _multiplyTOPjustifyh]
    , Just <$> vec2Map' "t" _multiplyTOPt
    , ["justifyv" <$$> _multiplyTOPjustifyv]]
  pars (InsideTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _insideTOPaspect2]
    , ["format" <$$> _insideTOPformat]
    , ["extend" <$$> _insideTOPextend]
    , ["chanmask" <$$> _insideTOPchanmask]
    , ["outputresolution" <$$> _insideTOPoutputresolution]
    , ["fillmode" <$$> _insideTOPfillmode]
    , ["resolutionw" <$$> _insideTOPresolutionw]
    , ["armenu" <$$> _insideTOParmenu]
    , ["filtertype" <$$> _insideTOPfiltertype]
    , ["inputfiltertype" <$$> _insideTOPinputfiltertype]
    , ["resmult" <$$> _insideTOPresmult]
    , ["punit" <$$> _insideTOPpunit]
    , Just <$> vec2Map' "s" _insideTOPs
    , ["resmenu" <$$> _insideTOPresmenu]
    , Just <$> vec2Map' "p" _insideTOPp
    , ["size" <$$> _insideTOPsize]
    , ["npasses" <$$> _insideTOPnpasses]
    , ["outputaspect" <$$> _insideTOPoutputaspect]
    , ["resolutionh" <$$> _insideTOPresolutionh]
    , ["tunit" <$$> _insideTOPtunit]
    , ["prefit" <$$> _insideTOPprefit]
    , ["r" <$$> _insideTOPr]
    , ["aspect1" <$$> _insideTOPaspect1]
    , ["justifyh" <$$> _insideTOPjustifyh]
    , Just <$> vec2Map' "t" _insideTOPt
    , ["justifyv" <$$> _insideTOPjustifyv]]
  pars (NullTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _nullTOPresmult]
    , ["aspect2" <$$> _nullTOPaspect2]
    , ["format" <$$> _nullTOPformat]
    , ["resmenu" <$$> _nullTOPresmenu]
    , ["npasses" <$$> _nullTOPnpasses]
    , ["inputfiltertype" <$$> _nullTOPinputfiltertype]
    , ["chanmask" <$$> _nullTOPchanmask]
    , ["outputresolution" <$$> _nullTOPoutputresolution]
    , ["fillmode" <$$> _nullTOPfillmode]
    , ["resolutionw" <$$> _nullTOPresolutionw]
    , ["armenu" <$$> _nullTOParmenu]
    , ["filtertype" <$$> _nullTOPfiltertype]
    , ["aspect1" <$$> _nullTOPaspect1]
    , ["resolutionh" <$$> _nullTOPresolutionh]
    , ["outputaspect" <$$> _nullTOPoutputaspect]]
  pars (SsaoTOP {..}) = catMaybes . mconcat $ [ ["samplesteps" <$$> _ssaoTOPsamplesteps]
    , ["quality" <$$> _ssaoTOPquality]
    , ["ssaopassres" <$$> _ssaoTOPssaopassres]
    , ["surfaceavoid" <$$> _ssaoTOPsurfaceavoid]
    , ["combinewithcolor" <$$> _ssaoTOPcombinewithcolor]
    , ["contrast" <$$> _ssaoTOPcontrast]
    , ["chanmask" <$$> _ssaoTOPchanmask]
    , ["outputresolution" <$$> _ssaoTOPoutputresolution]
    , ["resmult" <$$> _ssaoTOPresmult]
    , ["resolutionw" <$$> _ssaoTOPresolutionw]
    , ["aspect2" <$$> _ssaoTOPaspect2]
    , ["attenuation" <$$> _ssaoTOPattenuation]
    , ["filtertype" <$$> _ssaoTOPfiltertype]
    , ["format" <$$> _ssaoTOPformat]
    , ["inputfiltertype" <$$> _ssaoTOPinputfiltertype]
    , ["sampledirs" <$$> _ssaoTOPsampledirs]
    , ["resmenu" <$$> _ssaoTOPresmenu]
    , ["npasses" <$$> _ssaoTOPnpasses]
    , ["edgethresh" <$$> _ssaoTOPedgethresh]
    , ["fillmode" <$$> _ssaoTOPfillmode]
    , ["resolutionh" <$$> _ssaoTOPresolutionh]
    , ["ssaoradius" <$$> _ssaoTOPssaoradius]
    , ["armenu" <$$> _ssaoTOParmenu]
    , ["blursharpness" <$$> _ssaoTOPblursharpness]
    , ["blurradius" <$$> _ssaoTOPblurradius]
    , ["aspect1" <$$> _ssaoTOPaspect1]
    , ["outputaspect" <$$> _ssaoTOPoutputaspect]]
  pars (OpencolorioTOP {..}) = catMaybes . mconcat $ [ Just <$> vec3Map' "power" _opencolorioTOPpower
    , ["display" <$$> _opencolorioTOPdisplay]
    , ["incolorspace" <$$> _opencolorioTOPincolorspace]
    , ["precision" <$$> _opencolorioTOPprecision]
    , ["format" <$$> _opencolorioTOPformat]
    , ["cdlmode" <$$> _opencolorioTOPcdlmode]
    , ["cdldirection" <$$> _opencolorioTOPcdldirection]
    , Just <$> vec3Map' "offset" _opencolorioTOPoffset
    , ["inputfiltertype" <$$> _opencolorioTOPinputfiltertype]
    , ["config" <$$> _opencolorioTOPconfig]
    , ["outputresolution" <$$> _opencolorioTOPoutputresolution]
    , ["interpolation" <$$> _opencolorioTOPinterpolation]
    , ["resolutionw" <$$> _opencolorioTOPresolutionw]
    , ["outcolorspace" <$$> _opencolorioTOPoutcolorspace]
    , ["reloadconfig" <$$> _opencolorioTOPreloadconfig]
    , ["gain" <$$> _opencolorioTOPgain]
    , ["filtertype" <$$> _opencolorioTOPfiltertype]
    , ["saturation" <$$> _opencolorioTOPsaturation]
    , ["colorspace" <$$> _opencolorioTOPcolorspace]
    , ["useoutput" <$$> _opencolorioTOPuseoutput]
    , ["lutsize" <$$> _opencolorioTOPlutsize]
    , ["chanmask" <$$> _opencolorioTOPchanmask]
    , ["resmult" <$$> _opencolorioTOPresmult]
    , ["usecolorspacetransform" <$$> _opencolorioTOPusecolorspacetransform]
    , ["filedirection" <$$> _opencolorioTOPfiledirection]
    , ["resmenu" <$$> _opencolorioTOPresmenu]
    , ["filesource" <$$> _opencolorioTOPfilesource]
    , ["npasses" <$$> _opencolorioTOPnpasses]
    , ["gamma" <$$> _opencolorioTOPgamma]
    , ["ccfile" <$$> _opencolorioTOPccfile]
    , ["fillmode" <$$> _opencolorioTOPfillmode]
    , ["resolutionh" <$$> _opencolorioTOPresolutionh]
    , Just <$> vec3Map' "slope" _opencolorioTOPslope
    , ["aspect2" <$$> _opencolorioTOPaspect2]
    , ["armenu" <$$> _opencolorioTOParmenu]
    , ["view" <$$> _opencolorioTOPview]
    , ["aspect1" <$$> _opencolorioTOPaspect1]
    , ["outputaspect" <$$> _opencolorioTOPoutputaspect]
    , ["usefiletransform" <$$> _opencolorioTOPusefiletransform]]
  pars (CircleTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _circleTOPaspect2]
    , ["format" <$$> _circleTOPformat]
    , ["softnessunit" <$$> _circleTOPsoftnessunit]
    , ["endarcangle" <$$> _circleTOPendarcangle]
    , ["chanmask" <$$> _circleTOPchanmask]
    , ["outputresolution" <$$> _circleTOPoutputresolution]
    , ["borderoffset" <$$> _circleTOPborderoffset]
    , Just <$> rgbMap "fillcolor" _circleTOPfillcolor
    , ["antialias" <$$> _circleTOPantialias]
    , ["resolutionw" <$$> _circleTOPresolutionw]
    , ["armenu" <$$> _circleTOParmenu]
    , Just <$> vec2Map' "radius" _circleTOPradius
    , ["borderwidth" <$$> _circleTOPborderwidth]
    , ["fillalpha" <$$> _circleTOPfillalpha]
    , Just <$> rgbMap "bgcolor" _circleTOPbgcolor
    , ["radiusunit" <$$> _circleTOPradiusunit]
    , ["inputfiltertype" <$$> _circleTOPinputfiltertype]
    , ["beginarcangle" <$$> _circleTOPbeginarcangle]
    , ["centerunit" <$$> _circleTOPcenterunit]
    , ["resmult" <$$> _circleTOPresmult]
    , ["ispolygon" <$$> _circleTOPispolygon]
    , ["resmenu" <$$> _circleTOPresmenu]
    , ["multrgbbyalpha" <$$> _circleTOPmultrgbbyalpha]
    , ["bgalpha" <$$> _circleTOPbgalpha]
    , Just <$> rgbMap "border" _circleTOPborder
    , ["fillmode" <$$> _circleTOPfillmode]
    , ["resolutionh" <$$> _circleTOPresolutionh]
    , ["rotate" <$$> _circleTOProtate]
    , Just <$> vec2Map' "center" _circleTOPcenter
    , ["softness" <$$> _circleTOPsoftness]
    , ["borderalpha" <$$> _circleTOPborderalpha]
    , ["npasses" <$$> _circleTOPnpasses]
    , ["aspect1" <$$> _circleTOPaspect1]
    , ["sides" <$$> _circleTOPsides]
    , ["borderwidthunit" <$$> _circleTOPborderwidthunit]
    , ["outputaspect" <$$> _circleTOPoutputaspect]
    , ["filtertype" <$$> _circleTOPfiltertype]]
  pars (SubstanceTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _substanceTOPresmult]
    , ["aspect2" <$$> _substanceTOPaspect2]
    , ["format" <$$> _substanceTOPformat]
    , ["file" <$$> _substanceTOPfile]
    , ["resmenu" <$$> _substanceTOPresmenu]
    , ["npasses" <$$> _substanceTOPnpasses]
    , ["inputfiltertype" <$$> _substanceTOPinputfiltertype]
    , ["chanmask" <$$> _substanceTOPchanmask]
    , ["outputresolution" <$$> _substanceTOPoutputresolution]
    , ["fillmode" <$$> _substanceTOPfillmode]
    , ["resolutionw" <$$> _substanceTOPresolutionw]
    , ["graph" <$$> _substanceTOPgraph]
    , ["reloadconfig" <$$> _substanceTOPreloadconfig]
    , ["armenu" <$$> _substanceTOParmenu]
    , ["filtertype" <$$> _substanceTOPfiltertype]
    , ["aspect1" <$$> _substanceTOPaspect1]
    , ["resolutionh" <$$> _substanceTOPresolutionh]
    , ["outputaspect" <$$> _substanceTOPoutputaspect]
    , ["output" <$$> _substanceTOPoutput]]
  pars (SubtractTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _subtractTOPaspect2]
    , ["format" <$$> _subtractTOPformat]
    , ["extend" <$$> _subtractTOPextend]
    , ["chanmask" <$$> _subtractTOPchanmask]
    , ["outputresolution" <$$> _subtractTOPoutputresolution]
    , ["fillmode" <$$> _subtractTOPfillmode]
    , ["resolutionw" <$$> _subtractTOPresolutionw]
    , ["armenu" <$$> _subtractTOParmenu]
    , ["filtertype" <$$> _subtractTOPfiltertype]
    , ["inputfiltertype" <$$> _subtractTOPinputfiltertype]
    , ["resmult" <$$> _subtractTOPresmult]
    , ["punit" <$$> _subtractTOPpunit]
    , Just <$> vec2Map' "s" _subtractTOPs
    , ["resmenu" <$$> _subtractTOPresmenu]
    , Just <$> vec2Map' "p" _subtractTOPp
    , ["size" <$$> _subtractTOPsize]
    , ["npasses" <$$> _subtractTOPnpasses]
    , ["outputaspect" <$$> _subtractTOPoutputaspect]
    , ["resolutionh" <$$> _subtractTOPresolutionh]
    , ["tunit" <$$> _subtractTOPtunit]
    , ["prefit" <$$> _subtractTOPprefit]
    , ["r" <$$> _subtractTOPr]
    , ["aspect1" <$$> _subtractTOPaspect1]
    , ["justifyh" <$$> _subtractTOPjustifyh]
    , Just <$> vec2Map' "t" _subtractTOPt
    , ["justifyv" <$$> _subtractTOPjustifyv]]
  pars (ProjectionTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _projectionTOPresmult]
    , ["aspect2" <$$> _projectionTOPaspect2]
    , ["fov" <$$> _projectionTOPfov]
    , ["output" <$$> _projectionTOPoutput]
    , ["resmenu" <$$> _projectionTOPresmenu]
    , ["npasses" <$$> _projectionTOPnpasses]
    , ["inputfiltertype" <$$> _projectionTOPinputfiltertype]
    , ["chanmask" <$$> _projectionTOPchanmask]
    , ["outputresolution" <$$> _projectionTOPoutputresolution]
    , ["fillmode" <$$> _projectionTOPfillmode]
    , ["resolutionh" <$$> _projectionTOPresolutionh]
    , ["armenu" <$$> _projectionTOParmenu]
    , Just <$> vec3Map' "r" _projectionTOPr
    , ["aspect1" <$$> _projectionTOPaspect1]
    , ["format" <$$> _projectionTOPformat]
    , ["resolutionw" <$$> _projectionTOPresolutionw]
    , ["outputaspect" <$$> _projectionTOPoutputaspect]
    , ["input" <$$> _projectionTOPinput]
    , ["filtertype" <$$> _projectionTOPfiltertype]]
  pars (Texture3dTOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _texture3dTOPresetpulse]
    , ["replaceindex" <$$> _texture3dTOPreplaceindex]
    , ["format" <$$> _texture3dTOPformat]
    , ["active" <$$> _texture3dTOPactive]
    , ["inputfiltertype" <$$> _texture3dTOPinputfiltertype]
    , ["replacesingle" <$$> _texture3dTOPreplacesingle]
    , ["outputresolution" <$$> _texture3dTOPoutputresolution]
    , ["prefill" <$$> _texture3dTOPprefill]
    , ["resolutionw" <$$> _texture3dTOPresolutionw]
    , ["armenu" <$$> _texture3dTOParmenu]
    , ["filtertype" <$$> _texture3dTOPfiltertype]
    , ["aspect2" <$$> _texture3dTOPaspect2]
    , ["step" <$$> _texture3dTOPstep]
    , ["prefillpulse" <$$> _texture3dTOPprefillpulse]
    , ["resmult" <$$> _texture3dTOPresmult]
    , ["type" <$$> _texture3dTOPtype]
    , ["resmenu" <$$> _texture3dTOPresmenu]
    , ["cachesize" <$$> _texture3dTOPcachesize]
    , ["chanmask" <$$> _texture3dTOPchanmask]
    , ["fillmode" <$$> _texture3dTOPfillmode]
    , ["resolutionh" <$$> _texture3dTOPresolutionh]
    , ["npasses" <$$> _texture3dTOPnpasses]
    , ["aspect1" <$$> _texture3dTOPaspect1]
    , ["resetsinglepulse" <$$> _texture3dTOPresetsinglepulse]
    , ["outputaspect" <$$> _texture3dTOPoutputaspect]
    , ["reset" <$$> _texture3dTOPreset]]
  pars (PackTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _packTOPresmult]
    , ["aspect2" <$$> _packTOPaspect2]
    , ["format" <$$> _packTOPformat]
    , ["resmenu" <$$> _packTOPresmenu]
    , ["npasses" <$$> _packTOPnpasses]
    , ["fillmode" <$$> _packTOPfillmode]
    , ["inputfiltertype" <$$> _packTOPinputfiltertype]
    , ["chanmask" <$$> _packTOPchanmask]
    , ["outputresolution" <$$> _packTOPoutputresolution]
    , ["resolutionh" <$$> _packTOPresolutionh]
    , ["resolutionw" <$$> _packTOPresolutionw]
    , ["armenu" <$$> _packTOParmenu]
    , ["filtertype" <$$> _packTOPfiltertype]
    , ["aspect1" <$$> _packTOPaspect1]
    , ["packtype" <$$> _packTOPpacktype]
    , ["outputaspect" <$$> _packTOPoutputaspect]]
  pars (MoviefileinTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _moviefileinTOPaspect2]
    , ["format" <$$> _moviefileinTOPformat]
    , ["highperfread" <$$> _moviefileinTOPhighperfread]
    , ["cuepulse" <$$> _moviefileinTOPcuepulse]
    , ["bottomhalfalpha" <$$> _moviefileinTOPbottomhalfalpha]
    , ["fillmode" <$$> _moviefileinTOPfillmode]
    , ["resolutionw" <$$> _moviefileinTOPresolutionw]
    , ["trim" <$$> _moviefileinTOPtrim]
    , ["armenu" <$$> _moviefileinTOParmenu]
    , ["deinterlace" <$$> _moviefileinTOPdeinterlace]
    , ["precedence" <$$> _moviefileinTOPprecedence]
    , ["asyncupload" <$$> _moviefileinTOPasyncupload]
    , ["resolutionh" <$$> _moviefileinTOPresolutionh]
    , ["tendunit" <$$> _moviefileinTOPtendunit]
    , ["loadingerrorimage" <$$> _moviefileinTOPloadingerrorimage]
    , ["index" <$$> _moviefileinTOPindex]
    , ["audioloop" <$$> _moviefileinTOPaudioloop]
    , ["playmode" <$$> _moviefileinTOPplaymode]
    , ["resmenu" <$$> _moviefileinTOPresmenu]
    , ["tstartunit" <$$> _moviefileinTOPtstartunit]
    , ["speed" <$$> _moviefileinTOPspeed]
    , ["imageindexing" <$$> _moviefileinTOPimageindexing]
    , ["play" <$$> _moviefileinTOPplay]
    , ["npasses" <$$> _moviefileinTOPnpasses]
    , ["loopcrossfadeunit" <$$> _moviefileinTOPloopcrossfadeunit]
    , ["stepsize" <$$> _moviefileinTOPstepsize]
    , ["cuepointunit" <$$> _moviefileinTOPcuepointunit]
    , ["opentimeout" <$$> _moviefileinTOPopentimeout]
    , ["reload" <$$> _moviefileinTOPreload]
    , ["samplerate" <$$> _moviefileinTOPsamplerate]
    , ["interp" <$$> _moviefileinTOPinterp]
    , ["file" <$$> _moviefileinTOPfile]
    , ["outputresolution" <$$> _moviefileinTOPoutputresolution]
    , ["cuepoint" <$$> _moviefileinTOPcuepoint]
    , ["prereadframes" <$$> _moviefileinTOPprereadframes]
    , ["aspect1" <$$> _moviefileinTOPaspect1]
    , ["updateimage" <$$> _moviefileinTOPupdateimage]
    , ["filtertype" <$$> _moviefileinTOPfiltertype]
    , ["highperfreadfactor" <$$> _moviefileinTOPhighperfreadfactor]
    , ["tend" <$$> _moviefileinTOPtend]
    , ["cuebehavior" <$$> _moviefileinTOPcuebehavior]
    , ["inputsrgb" <$$> _moviefileinTOPinputsrgb]
    , ["textendright" <$$> _moviefileinTOPtextendright]
    , ["inputfiltertype" <$$> _moviefileinTOPinputfiltertype]
    , ["tstart" <$$> _moviefileinTOPtstart]
    , ["resmult" <$$> _moviefileinTOPresmult]
    , ["frametimeoutstrat" <$$> _moviefileinTOPframetimeoutstrat]
    , ["reloadpulse" <$$> _moviefileinTOPreloadpulse]
    , ["indexunit" <$$> _moviefileinTOPindexunit]
    , ["loopcrossfade" <$$> _moviefileinTOPloopcrossfade]
    , ["overridesample" <$$> _moviefileinTOPoverridesample]
    , ["outputaspect" <$$> _moviefileinTOPoutputaspect]
    , ["multalpha" <$$> _moviefileinTOPmultalpha]
    , ["textendleft" <$$> _moviefileinTOPtextendleft]
    , ["chanmask" <$$> _moviefileinTOPchanmask]
    , ["frametimeout" <$$> _moviefileinTOPframetimeout]
    , ["cue" <$$> _moviefileinTOPcue]
    , ["maxdecodecpus" <$$> _moviefileinTOPmaxdecodecpus]
    , ["alwaysloadinitial" <$$> _moviefileinTOPalwaysloadinitial]
    , ["usecpucache" <$$> _moviefileinTOPusecpucache]]
  pars (SelectTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _selectTOPresmult]
    , ["aspect2" <$$> _selectTOPaspect2]
    , ["format" <$$> _selectTOPformat]
    , ["resmenu" <$$> _selectTOPresmenu]
    , ["npasses" <$$> _selectTOPnpasses]
    , ["inputfiltertype" <$$> _selectTOPinputfiltertype]
    , ["chanmask" <$$> _selectTOPchanmask]
    , ["outputresolution" <$$> _selectTOPoutputresolution]
    , ["fillmode" <$$> _selectTOPfillmode]
    , ["resolutionw" <$$> _selectTOPresolutionw]
    , ["armenu" <$$> _selectTOParmenu]
    , [("top",) . ResolveP <$> _selectTOPtop]
    , ["filtertype" <$$> _selectTOPfiltertype]
    , ["aspect1" <$$> _selectTOPaspect1]
    , ["resolutionh" <$$> _selectTOPresolutionh]
    , ["outputaspect" <$$> _selectTOPoutputaspect]]
  pars (FeedbackTOP {..}) = catMaybes . mconcat $ [ ["resetpulse" <$$> _feedbackTOPresetpulse]
    , ["resmult" <$$> _feedbackTOPresmult]
    , ["aspect2" <$$> _feedbackTOPaspect2]
    , ["format" <$$> _feedbackTOPformat]
    , ["resmenu" <$$> _feedbackTOPresmenu]
    , ["npasses" <$$> _feedbackTOPnpasses]
    , ["inputfiltertype" <$$> _feedbackTOPinputfiltertype]
    , ["chanmask" <$$> _feedbackTOPchanmask]
    , ["outputresolution" <$$> _feedbackTOPoutputresolution]
    , ["fillmode" <$$> _feedbackTOPfillmode]
    , ["resolutionh" <$$> _feedbackTOPresolutionh]
    , ["armenu" <$$> _feedbackTOParmenu]
    , [("top",) . ResolveP <$> _feedbackTOPtop]
    , ["filtertype" <$$> _feedbackTOPfiltertype]
    , ["aspect1" <$$> _feedbackTOPaspect1]
    , ["resolutionw" <$$> _feedbackTOPresolutionw]
    , ["outputaspect" <$$> _feedbackTOPoutputaspect]
    , ["reset" <$$> _feedbackTOPreset]]
  pars (RampTOP {..}) = catMaybes . mconcat $ [ ["interp" <$$> _rampTOPinterp]
    , ["aspect2" <$$> _rampTOPaspect2]
    , ["format" <$$> _rampTOPformat]
    , ["color4" <$$> _rampTOPcolor4]
    , ["color1" <$$> _rampTOPcolor1]
    , ["inputfiltertype" <$$> _rampTOPinputfiltertype]
    , ["chanmask" <$$> _rampTOPchanmask]
    , ["outputresolution" <$$> _rampTOPoutputresolution]
    , ["resmult" <$$> _rampTOPresmult]
    , ["antialias" <$$> _rampTOPantialias]
    , ["armenu" <$$> _rampTOParmenu]
    , ["phase" <$$> _rampTOPphase]
    , ["filtertype" <$$> _rampTOPfiltertype]
    , ["position2" <$$> _rampTOPposition2]
    , ["color3" <$$> _rampTOPcolor3]
    , ["resolutionw" <$$> _rampTOPresolutionw]
    , ["position1" <$$> _rampTOPposition1]
    , ["extendleft" <$$> _rampTOPextendleft]
    , ["tension" <$$> _rampTOPtension]
    , ["type" <$$> _rampTOPtype]
    , ["resmenu" <$$> _rampTOPresmenu]
    , ["multrgbbyalpha" <$$> _rampTOPmultrgbbyalpha]
    , ["period" <$$> _rampTOPperiod]
    , ["extendright" <$$> _rampTOPextendright]
    , ["fillmode" <$$> _rampTOPfillmode]
    , ["dither" <$$> _rampTOPdither]
    , ["resolutionh" <$$> _rampTOPresolutionh]
    , ["fitaspect" <$$> _rampTOPfitaspect]
    , ["npasses" <$$> _rampTOPnpasses]
    , ["aspect1" <$$> _rampTOPaspect1]
    , ["color2" <$$> _rampTOPcolor2]
    , [("dat",) . ResolveP <$> _rampTOPdat]
    , ["outputaspect" <$$> _rampTOPoutputaspect]]
  pars (AnalyzeTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _analyzeTOPresmult]
    , ["aspect2" <$$> _analyzeTOPaspect2]
    , ["format" <$$> _analyzeTOPformat]
    , ["resmenu" <$$> _analyzeTOPresmenu]
    , ["npasses" <$$> _analyzeTOPnpasses]
    , ["fillmode" <$$> _analyzeTOPfillmode]
    , ["inputfiltertype" <$$> _analyzeTOPinputfiltertype]
    , ["chanmask" <$$> _analyzeTOPchanmask]
    , ["outputresolution" <$$> _analyzeTOPoutputresolution]
    , ["scope" <$$> _analyzeTOPscope]
    , ["resolutionh" <$$> _analyzeTOPresolutionh]
    , ["select" <$$> _analyzeTOPselect]
    , ["armenu" <$$> _analyzeTOParmenu]
    , ["filtertype" <$$> _analyzeTOPfiltertype]
    , ["aspect1" <$$> _analyzeTOPaspect1]
    , ["resolutionw" <$$> _analyzeTOPresolutionw]
    , ["outputaspect" <$$> _analyzeTOPoutputaspect]
    , ["op" <$$> _analyzeTOPop]]
  pars (AddTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _addTOPaspect2]
    , ["format" <$$> _addTOPformat]
    , ["extend" <$$> _addTOPextend]
    , ["chanmask" <$$> _addTOPchanmask]
    , ["outputresolution" <$$> _addTOPoutputresolution]
    , ["fillmode" <$$> _addTOPfillmode]
    , ["resolutionw" <$$> _addTOPresolutionw]
    , ["armenu" <$$> _addTOParmenu]
    , ["filtertype" <$$> _addTOPfiltertype]
    , ["inputfiltertype" <$$> _addTOPinputfiltertype]
    , ["resmult" <$$> _addTOPresmult]
    , ["punit" <$$> _addTOPpunit]
    , Just <$> vec2Map' "s" _addTOPs
    , ["resmenu" <$$> _addTOPresmenu]
    , Just <$> vec2Map' "p" _addTOPp
    , ["size" <$$> _addTOPsize]
    , ["npasses" <$$> _addTOPnpasses]
    , ["outputaspect" <$$> _addTOPoutputaspect]
    , ["resolutionh" <$$> _addTOPresolutionh]
    , ["tunit" <$$> _addTOPtunit]
    , ["prefit" <$$> _addTOPprefit]
    , ["r" <$$> _addTOPr]
    , ["aspect1" <$$> _addTOPaspect1]
    , ["justifyh" <$$> _addTOPjustifyh]
    , Just <$> vec2Map' "t" _addTOPt
    , ["justifyv" <$$> _addTOPjustifyv]]
  pars (TextTOP {..}) = catMaybes . mconcat $ [ Just <$> rgbMap "fontcolor" _textTOPfontcolor
    , ["leftborder" <$$> _textTOPleftborder]
    , ["readingdirection" <$$> _textTOPreadingdirection]
    , ["dispmethod" <$$> _textTOPdispmethod]
    , ["resmenu" <$$> _textTOPresmenu]
    , ["topborder" <$$> _textTOPtopborder]
    , Just <$> rgbMap "bordera" _textTOPbordera
    , ["inputfiltertype" <$$> _textTOPinputfiltertype]
    , ["aligny" <$$> _textTOPaligny]
    , ["italic" <$$> _textTOPitalic]
    , ["fillmode" <$$> _textTOPfillmode]
    , ["rightborderi" <$$> _textTOPrightborderi]
    , ["antialias" <$$> _textTOPantialias]
    , ["fontalpha" <$$> _textTOPfontalpha]
    , ["charset" <$$> _textTOPcharset]
    , ["filtertype" <$$> _textTOPfiltertype]
    , ["fontsizeyunit" <$$> _textTOPfontsizeyunit]
    , ["position2" <$$> _textTOPposition2]
    , Just <$> rgbMap "bgcolor" _textTOPbgcolor
    , ["posttext" <$$> _textTOPposttext]
    , ["field" <$$> _textTOPfield]
    , ["position1" <$$> _textTOPposition1]
    , ["legacyparsing" <$$> _textTOPlegacyparsing]
    , ["armenu" <$$> _textTOParmenu]
    , ["linespacing" <$$> _textTOPlinespacing]
    , ["keepfontratio" <$$> _textTOPkeepfontratio]
    , ["valuetouse" <$$> _textTOPvaluetouse]
    , ["borderspace1" <$$> _textTOPborderspace1]
    , ["rowindex" <$$> _textTOProwindex]
    , ["resolutionh" <$$> _textTOPresolutionh]
    , ["colindex" <$$> _textTOPcolindex]
    , ["kerning1" <$$> _textTOPkerning1]
    , ["npasses" <$$> _textTOPnpasses]
    , ["language" <$$> _textTOPlanguage]
    , ["compoverinput" <$$> _textTOPcompoverinput]
    , ["wordwrap" <$$> _textTOPwordwrap]
    , ["resolutionw" <$$> _textTOPresolutionw]
    , [("chop",) . ResolveP <$> _textTOPchop]
    , ["linespacingunit" <$$> _textTOPlinespacingunit]
    , ["outputaspect" <$$> _textTOPoutputaspect]
    , ["borderaalpha" <$$> _textTOPborderaalpha]
    , ["chopvaluereplace" <$$> _textTOPchopvaluereplace]
    , ["format" <$$> _textTOPformat]
    , ["strokewidth" <$$> _textTOPstrokewidth]
    , ["outputresolution" <$$> _textTOPoutputresolution]
    , ["bottomborderi" <$$> _textTOPbottomborderi]
    , ["aspect1" <$$> _textTOPaspect1]
    , Just <$> rgbMap "borderb" _textTOPborderb
    , ["resmult" <$$> _textTOPresmult]
    , ["fontfile" <$$> _textTOPfontfile]
    , ["topborderi" <$$> _textTOPtopborderi]
    , ["fontsizexunit" <$$> _textTOPfontsizexunit]
    , ["leftborderi" <$$> _textTOPleftborderi]
    , ["appendvalue" <$$> _textTOPappendvalue]
    , ["text" <$$> _textTOPtext]
    , ["aspect2" <$$> _textTOPaspect2]
    , ["leadingzero" <$$> _textTOPleadingzero]
    , ["borderspace2" <$$> _textTOPborderspace2]
    , ["rightborder" <$$> _textTOPrightborder]
    , ["bottomborder" <$$> _textTOPbottomborder]
    , ["totaldigits" <$$> _textTOPtotaldigits]
    , [("specdat",) . ResolveP <$> _textTOPspecdat]
    , ["fontsizey" <$$> _textTOPfontsizey]
    , ["decimaldigits" <$$> _textTOPdecimaldigits]
    , ["multrgbbyalpha" <$$> _textTOPmultrgbbyalpha]
    , ["borderbalpha" <$$> _textTOPborderbalpha]
    , ["fontautosize" <$$> _textTOPfontautosize]
    , ["bgalpha" <$$> _textTOPbgalpha]
    , ["font" <$$> _textTOPfont]
    , ["alignx" <$$> _textTOPalignx]
    , ["bold" <$$> _textTOPbold]
    , ["chanmask" <$$> _textTOPchanmask]
    , [("dat",) . ResolveP <$> _textTOPdat]
    , ["fontsizex" <$$> _textTOPfontsizex]
    , ["positionunit" <$$> _textTOPpositionunit]
    , ["kerning2" <$$> _textTOPkerning2]]
  pars (KinectTOP {..}) = catMaybes . mconcat $ [ ["toofarvalue" <$$> _kinectTOPtoofarvalue]
    , ["aspect2" <$$> _kinectTOPaspect2]
    , ["format" <$$> _kinectTOPformat]
    , ["active" <$$> _kinectTOPactive]
    , ["image" <$$> _kinectTOPimage]
    , ["inputfiltertype" <$$> _kinectTOPinputfiltertype]
    , ["chanmask" <$$> _kinectTOPchanmask]
    , ["outputresolution" <$$> _kinectTOPoutputresolution]
    , ["fillmode" <$$> _kinectTOPfillmode]
    , ["tooclosevalue" <$$> _kinectTOPtooclosevalue]
    , ["remap" <$$> _kinectTOPremap]
    , ["armenu" <$$> _kinectTOParmenu]
    , ["filtertype" <$$> _kinectTOPfiltertype]
    , ["skeleton" <$$> _kinectTOPskeleton]
    , ["resolutionw" <$$> _kinectTOPresolutionw]
    , ["mirrorimage" <$$> _kinectTOPmirrorimage]
    , ["unknownpointvalue" <$$> _kinectTOPunknownpointvalue]
    , ["resmult" <$$> _kinectTOPresmult]
    , ["sensor" <$$> _kinectTOPsensor]
    , ["resmenu" <$$> _kinectTOPresmenu]
    , ["unknownvalue" <$$> _kinectTOPunknownvalue]
    , ["hwversion" <$$> _kinectTOPhwversion]
    , ["camerares" <$$> _kinectTOPcamerares]
    , ["resolutionh" <$$> _kinectTOPresolutionh]
    , ["npasses" <$$> _kinectTOPnpasses]
    , ["aspect1" <$$> _kinectTOPaspect1]
    , ["outputaspect" <$$> _kinectTOPoutputaspect]
    , ["neardepthmode" <$$> _kinectTOPneardepthmode]]
  pars (CropTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _cropTOPaspect2]
    , ["format" <$$> _cropTOPformat]
    , ["outputresolution" <$$> _cropTOPoutputresolution]
    , ["extend" <$$> _cropTOPextend]
    , ["chanmask" <$$> _cropTOPchanmask]
    , ["cropleftunit" <$$> _cropTOPcropleftunit]
    , ["fillmode" <$$> _cropTOPfillmode]
    , ["resolutionw" <$$> _cropTOPresolutionw]
    , ["armenu" <$$> _cropTOParmenu]
    , ["cropleft" <$$> _cropTOPcropleft]
    , ["cropbottom" <$$> _cropTOPcropbottom]
    , ["croprightunit" <$$> _cropTOPcroprightunit]
    , ["inputfiltertype" <$$> _cropTOPinputfiltertype]
    , ["resmult" <$$> _cropTOPresmult]
    , ["cropright" <$$> _cropTOPcropright]
    , ["resmenu" <$$> _cropTOPresmenu]
    , ["resolutionh" <$$> _cropTOPresolutionh]
    , ["cropbottomunit" <$$> _cropTOPcropbottomunit]
    , ["npasses" <$$> _cropTOPnpasses]
    , ["croptopunit" <$$> _cropTOPcroptopunit]
    , ["aspect1" <$$> _cropTOPaspect1]
    , ["croptop" <$$> _cropTOPcroptop]
    , ["outputaspect" <$$> _cropTOPoutputaspect]
    , ["filtertype" <$$> _cropTOPfiltertype]]
  pars (PrefiltermapTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _prefiltermapTOPresmult]
    , ["aspect2" <$$> _prefiltermapTOPaspect2]
    , ["format" <$$> _prefiltermapTOPformat]
    , ["output" <$$> _prefiltermapTOPoutput]
    , ["resmenu" <$$> _prefiltermapTOPresmenu]
    , ["npasses" <$$> _prefiltermapTOPnpasses]
    , ["inputfiltertype" <$$> _prefiltermapTOPinputfiltertype]
    , ["chanmask" <$$> _prefiltermapTOPchanmask]
    , ["outputresolution" <$$> _prefiltermapTOPoutputresolution]
    , ["fillmode" <$$> _prefiltermapTOPfillmode]
    , ["resolutionw" <$$> _prefiltermapTOPresolutionw]
    , ["armenu" <$$> _prefiltermapTOParmenu]
    , ["filtertype" <$$> _prefiltermapTOPfiltertype]
    , ["aspect1" <$$> _prefiltermapTOPaspect1]
    , ["resolutionh" <$$> _prefiltermapTOPresolutionh]
    , ["outputaspect" <$$> _prefiltermapTOPoutputaspect]]
  pars (OverTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _overTOPaspect2]
    , ["format" <$$> _overTOPformat]
    , ["extend" <$$> _overTOPextend]
    , ["chanmask" <$$> _overTOPchanmask]
    , ["outputresolution" <$$> _overTOPoutputresolution]
    , ["fillmode" <$$> _overTOPfillmode]
    , ["resolutionw" <$$> _overTOPresolutionw]
    , ["armenu" <$$> _overTOParmenu]
    , ["filtertype" <$$> _overTOPfiltertype]
    , ["inputfiltertype" <$$> _overTOPinputfiltertype]
    , ["resmult" <$$> _overTOPresmult]
    , ["punit" <$$> _overTOPpunit]
    , Just <$> vec2Map' "s" _overTOPs
    , ["resmenu" <$$> _overTOPresmenu]
    , Just <$> vec2Map' "p" _overTOPp
    , ["size" <$$> _overTOPsize]
    , ["npasses" <$$> _overTOPnpasses]
    , ["outputaspect" <$$> _overTOPoutputaspect]
    , ["resolutionh" <$$> _overTOPresolutionh]
    , ["tunit" <$$> _overTOPtunit]
    , ["prefit" <$$> _overTOPprefit]
    , ["r" <$$> _overTOPr]
    , ["aspect1" <$$> _overTOPaspect1]
    , ["justifyh" <$$> _overTOPjustifyh]
    , Just <$> vec2Map' "t" _overTOPt
    , ["justifyv" <$$> _overTOPjustifyv]]
  pars (CompositeTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _compositeTOPaspect2]
    , ["format" <$$> _compositeTOPformat]
    , ["previewgrid" <$$> _compositeTOPpreviewgrid]
    , ["extend" <$$> _compositeTOPextend]
    , ["chanmask" <$$> _compositeTOPchanmask]
    , ["outputresolution" <$$> _compositeTOPoutputresolution]
    , ["fillmode" <$$> _compositeTOPfillmode]
    , ["resolutionw" <$$> _compositeTOPresolutionw]
    , ["inputindex" <$$> _compositeTOPinputindex]
    , ["prefit" <$$> _compositeTOPprefit]
    , [("top",) . ResolveP <$> _compositeTOPtop]
    , ["filtertype" <$$> _compositeTOPfiltertype]
    , ["punit" <$$> _compositeTOPpunit]
    , Just <$> vec2Map' "tstep" _compositeTOPtstep
    , ["r" <$$> _compositeTOPr]
    , ["resmult" <$$> _compositeTOPresmult]
    , ["operand" <$$> _compositeTOPoperand]
    , ["resmenu" <$$> _compositeTOPresmenu]
    , Just <$> vec2Map' "s" _compositeTOPs
    , ["size" <$$> _compositeTOPsize]
    , ["tstepunit" <$$> _compositeTOPtstepunit]
    , Just <$> vec2Map' "p" _compositeTOPp
    , ["outputaspect" <$$> _compositeTOPoutputaspect]
    , ["resolutionh" <$$> _compositeTOPresolutionh]
    , ["tunit" <$$> _compositeTOPtunit]
    , ["armenu" <$$> _compositeTOParmenu]
    , ["selectinput" <$$> _compositeTOPselectinput]
    , ["npasses" <$$> _compositeTOPnpasses]
    , ["aspect1" <$$> _compositeTOPaspect1]
    , ["inputfiltertype" <$$> _compositeTOPinputfiltertype]
    , ["justifyh" <$$> _compositeTOPjustifyh]
    , Just <$> vec2Map' "t" _compositeTOPt
    , ["justifyv" <$$> _compositeTOPjustifyv]
    , ["swaporder" <$$> _compositeTOPswaporder]]
  pars (WebrenderTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _webrenderTOPaspect2]
    , ["format" <$$> _webrenderTOPformat]
    , ["transparent" <$$> _webrenderTOPtransparent]
    , ["active" <$$> _webrenderTOPactive]
    , ["chanmask" <$$> _webrenderTOPchanmask]
    , ["outputresolution" <$$> _webrenderTOPoutputresolution]
    , ["autorestart" <$$> _webrenderTOPautorestart]
    , ["usedat" <$$> _webrenderTOPusedat]
    , ["resolutionw" <$$> _webrenderTOPresolutionw]
    , ["armenu" <$$> _webrenderTOParmenu]
    , ["filtertype" <$$> _webrenderTOPfiltertype]
    , ["resetcount" <$$> _webrenderTOPresetcount]
    , ["audio" <$$> _webrenderTOPaudio]
    , ["inputfiltertype" <$$> _webrenderTOPinputfiltertype]
    , ["options" <$$> _webrenderTOPoptions]
    , ["fillmode" <$$> _webrenderTOPfillmode]
    , ["resmult" <$$> _webrenderTOPresmult]
    , ["resmenu" <$$> _webrenderTOPresmenu]
    , ["maxrenderrate" <$$> _webrenderTOPmaxrenderrate]
    , ["url" <$$> _webrenderTOPurl]
    , ["resolutionh" <$$> _webrenderTOPresolutionh]
    , ["npasses" <$$> _webrenderTOPnpasses]
    , ["aspect1" <$$> _webrenderTOPaspect1]
    , ["autorestartpulse" <$$> _webrenderTOPautorestartpulse]
    , ["updatewhenloaded" <$$> _webrenderTOPupdatewhenloaded]
    , [("dat",) . ResolveP <$> _webrenderTOPdat]
    , ["outputaspect" <$$> _webrenderTOPoutputaspect]
    , ["reload" <$$> _webrenderTOPreload]]
  pars (AntialiasTOP {..}) = catMaybes . mconcat $ [ ["quality" <$$> _antialiasTOPquality]
    , ["aspect2" <$$> _antialiasTOPaspect2]
    , ["format" <$$> _antialiasTOPformat]
    , ["outputresolution" <$$> _antialiasTOPoutputresolution]
    , ["inputfiltertype" <$$> _antialiasTOPinputfiltertype]
    , ["edgethreshold" <$$> _antialiasTOPedgethreshold]
    , ["maxsearchsteps" <$$> _antialiasTOPmaxsearchsteps]
    , ["fillmode" <$$> _antialiasTOPfillmode]
    , ["cornerrounding" <$$> _antialiasTOPcornerrounding]
    , ["resolutionw" <$$> _antialiasTOPresolutionw]
    , ["armenu" <$$> _antialiasTOParmenu]
    , ["filtertype" <$$> _antialiasTOPfiltertype]
    , ["maxdiagsearchsteps" <$$> _antialiasTOPmaxdiagsearchsteps]
    , ["resmult" <$$> _antialiasTOPresmult]
    , ["resmenu" <$$> _antialiasTOPresmenu]
    , ["aspect1" <$$> _antialiasTOPaspect1]
    , ["resolutionh" <$$> _antialiasTOPresolutionh]
    , ["outputedges" <$$> _antialiasTOPoutputedges]
    , ["npasses" <$$> _antialiasTOPnpasses]
    , ["chanmask" <$$> _antialiasTOPchanmask]
    , ["edgedetectsource" <$$> _antialiasTOPedgedetectsource]
    , ["outputaspect" <$$> _antialiasTOPoutputaspect]]
  pars (RgbtohsvTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _rgbtohsvTOPresmult]
    , ["aspect2" <$$> _rgbtohsvTOPaspect2]
    , ["format" <$$> _rgbtohsvTOPformat]
    , ["resmenu" <$$> _rgbtohsvTOPresmenu]
    , ["npasses" <$$> _rgbtohsvTOPnpasses]
    , ["inputfiltertype" <$$> _rgbtohsvTOPinputfiltertype]
    , ["chanmask" <$$> _rgbtohsvTOPchanmask]
    , ["outputresolution" <$$> _rgbtohsvTOPoutputresolution]
    , ["fillmode" <$$> _rgbtohsvTOPfillmode]
    , ["resolutionw" <$$> _rgbtohsvTOPresolutionw]
    , ["armenu" <$$> _rgbtohsvTOParmenu]
    , ["filtertype" <$$> _rgbtohsvTOPfiltertype]
    , ["aspect1" <$$> _rgbtohsvTOPaspect1]
    , ["resolutionh" <$$> _rgbtohsvTOPresolutionh]
    , ["outputaspect" <$$> _rgbtohsvTOPoutputaspect]]
  pars (ConvolveTOP {..}) = catMaybes . mconcat $ [ ["fillmode" <$$> _convolveTOPfillmode]
    , ["applytoalpha" <$$> _convolveTOPapplytoalpha]
    , ["aspect2" <$$> _convolveTOPaspect2]
    , ["format" <$$> _convolveTOPformat]
    , ["resmenu" <$$> _convolveTOPresmenu]
    , ["npasses" <$$> _convolveTOPnpasses]
    , ["normalize" <$$> _convolveTOPnormalize]
    , ["offset" <$$> _convolveTOPoffset]
    , ["inputfiltertype" <$$> _convolveTOPinputfiltertype]
    , ["chanmask" <$$> _convolveTOPchanmask]
    , ["outputresolution" <$$> _convolveTOPoutputresolution]
    , ["resmult" <$$> _convolveTOPresmult]
    , ["resolutionh" <$$> _convolveTOPresolutionh]
    , ["armenu" <$$> _convolveTOParmenu]
    , ["filtertype" <$$> _convolveTOPfiltertype]
    , ["aspect1" <$$> _convolveTOPaspect1]
    , ["resolutionw" <$$> _convolveTOPresolutionw]
    , [("dat",) . ResolveP <$> _convolveTOPdat]
    , ["outputaspect" <$$> _convolveTOPoutputaspect]]
  pars (EdgeTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _edgeTOPaspect2]
    , ["format" <$$> _edgeTOPformat]
    , ["offset2" <$$> _edgeTOPoffset2]
    , ["inputfiltertype" <$$> _edgeTOPinputfiltertype]
    , ["chanmask" <$$> _edgeTOPchanmask]
    , ["outputresolution" <$$> _edgeTOPoutputresolution]
    , ["fillmode" <$$> _edgeTOPfillmode]
    , ["resolutionw" <$$> _edgeTOPresolutionw]
    , Just <$> rgbaMap "edgecolor" _edgeTOPedgecolor
    , ["select" <$$> _edgeTOPselect]
    , ["armenu" <$$> _edgeTOParmenu]
    , ["filtertype" <$$> _edgeTOPfiltertype]
    , ["offset1" <$$> _edgeTOPoffset1]
    , ["blacklevel" <$$> _edgeTOPblacklevel]
    , ["resmult" <$$> _edgeTOPresmult]
    , ["resmenu" <$$> _edgeTOPresmenu]
    , ["offsetunit" <$$> _edgeTOPoffsetunit]
    , ["strength" <$$> _edgeTOPstrength]
    , ["alphaoutputmenu" <$$> _edgeTOPalphaoutputmenu]
    , ["resolutionh" <$$> _edgeTOPresolutionh]
    , ["compinput" <$$> _edgeTOPcompinput]
    , ["npasses" <$$> _edgeTOPnpasses]
    , ["aspect1" <$$> _edgeTOPaspect1]
    , ["outputaspect" <$$> _edgeTOPoutputaspect]]
  pars (SlopeTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _slopeTOPaspect2]
    , ["green" <$$> _slopeTOPgreen]
    , ["blue" <$$> _slopeTOPblue]
    , ["alpha" <$$> _slopeTOPalpha]
    , ["chanmask" <$$> _slopeTOPchanmask]
    , ["outputresolution" <$$> _slopeTOPoutputresolution]
    , ["fillmode" <$$> _slopeTOPfillmode]
    , ["resolutionw" <$$> _slopeTOPresolutionw]
    , ["armenu" <$$> _slopeTOParmenu]
    , ["filtertype" <$$> _slopeTOPfiltertype]
    , ["format" <$$> _slopeTOPformat]
    , ["inputfiltertype" <$$> _slopeTOPinputfiltertype]
    , ["offset1" <$$> _slopeTOPoffset1]
    , ["resmult" <$$> _slopeTOPresmult]
    , ["zeropoint" <$$> _slopeTOPzeropoint]
    , ["resmenu" <$$> _slopeTOPresmenu]
    , ["offsetunit" <$$> _slopeTOPoffsetunit]
    , ["strength" <$$> _slopeTOPstrength]
    , ["resolutionh" <$$> _slopeTOPresolutionh]
    , ["red" <$$> _slopeTOPred]
    , ["npasses" <$$> _slopeTOPnpasses]
    , ["aspect1" <$$> _slopeTOPaspect1]
    , ["method" <$$> _slopeTOPmethod]
    , ["outputaspect" <$$> _slopeTOPoutputaspect]
    , ["offset2" <$$> _slopeTOPoffset2]]
  pars (NormalmapTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _normalmapTOPresmult]
    , ["aspect2" <$$> _normalmapTOPaspect2]
    , ["format" <$$> _normalmapTOPformat]
    , ["offset2" <$$> _normalmapTOPoffset2]
    , ["resmenu" <$$> _normalmapTOPresmenu]
    , ["npasses" <$$> _normalmapTOPnpasses]
    , ["offsetunit" <$$> _normalmapTOPoffsetunit]
    , ["inputfiltertype" <$$> _normalmapTOPinputfiltertype]
    , ["heightmap" <$$> _normalmapTOPheightmap]
    , ["outputresolution" <$$> _normalmapTOPoutputresolution]
    , ["fillmode" <$$> _normalmapTOPfillmode]
    , ["resolutionw" <$$> _normalmapTOPresolutionw]
    , ["chanmask" <$$> _normalmapTOPchanmask]
    , ["armenu" <$$> _normalmapTOParmenu]
    , ["filtertype" <$$> _normalmapTOPfiltertype]
    , ["aspect1" <$$> _normalmapTOPaspect1]
    , ["method" <$$> _normalmapTOPmethod]
    , ["resolutionh" <$$> _normalmapTOPresolutionh]
    , ["outputaspect" <$$> _normalmapTOPoutputaspect]
    , ["offset1" <$$> _normalmapTOPoffset1]
    , ["source" <$$> _normalmapTOPsource]]
  pars (ThresholdTOP {..}) = catMaybes . mconcat $ [ ["armenu" <$$> _thresholdTOParmenu]
    , ["resmult" <$$> _thresholdTOPresmult]
    , ["comparator" <$$> _thresholdTOPcomparator]
    , ["format" <$$> _thresholdTOPformat]
    , ["resmenu" <$$> _thresholdTOPresmenu]
    , ["npasses" <$$> _thresholdTOPnpasses]
    , ["fillmode" <$$> _thresholdTOPfillmode]
    , ["soften" <$$> _thresholdTOPsoften]
    , ["alpha" <$$> _thresholdTOPalpha]
    , ["chanmask" <$$> _thresholdTOPchanmask]
    , ["outputresolution" <$$> _thresholdTOPoutputresolution]
    , ["threshold" <$$> _thresholdTOPthreshold]
    , ["resolutionh" <$$> _thresholdTOPresolutionh]
    , ["aspect2" <$$> _thresholdTOPaspect2]
    , ["filtertype" <$$> _thresholdTOPfiltertype]
    , ["aspect1" <$$> _thresholdTOPaspect1]
    , ["rgb" <$$> _thresholdTOPrgb]
    , ["resolutionw" <$$> _thresholdTOPresolutionw]
    , ["outputaspect" <$$> _thresholdTOPoutputaspect]
    , ["inputfiltertype" <$$> _thresholdTOPinputfiltertype]]
  pars (CplusplusTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _cplusplusTOPaspect2]
    , ["format" <$$> _cplusplusTOPformat]
    , ["inputfiltertype" <$$> _cplusplusTOPinputfiltertype]
    , ["chanmask" <$$> _cplusplusTOPchanmask]
    , ["outputresolution" <$$> _cplusplusTOPoutputresolution]
    , ["fillmode" <$$> _cplusplusTOPfillmode]
    , ["antialias" <$$> _cplusplusTOPantialias]
    , ["armenu" <$$> _cplusplusTOParmenu]
    , ["stencilbuffer" <$$> _cplusplusTOPstencilbuffer]
    , ["resolutionw" <$$> _cplusplusTOPresolutionw]
    , ["resmult" <$$> _cplusplusTOPresmult]
    , ["unloadplugin" <$$> _cplusplusTOPunloadplugin]
    , ["resmenu" <$$> _cplusplusTOPresmenu]
    , ["plugin" <$$> _cplusplusTOPplugin]
    , ["resolutionh" <$$> _cplusplusTOPresolutionh]
    , ["npasses" <$$> _cplusplusTOPnpasses]
    , ["numcolorbufs" <$$> _cplusplusTOPnumcolorbufs]
    , ["reinitpulse" <$$> _cplusplusTOPreinitpulse]
    , ["aspect1" <$$> _cplusplusTOPaspect1]
    , ["depthbuffer" <$$> _cplusplusTOPdepthbuffer]
    , ["outputaspect" <$$> _cplusplusTOPoutputaspect]
    , ["reinit" <$$> _cplusplusTOPreinit]
    , ["filtertype" <$$> _cplusplusTOPfiltertype]]
  pars (SwitchTOP {..}) = catMaybes . mconcat $ [ ["index" <$$> _switchTOPindex]
    , ["resmult" <$$> _switchTOPresmult]
    , ["aspect2" <$$> _switchTOPaspect2]
    , ["format" <$$> _switchTOPformat]
    , ["resmenu" <$$> _switchTOPresmenu]
    , ["npasses" <$$> _switchTOPnpasses]
    , ["inputfiltertype" <$$> _switchTOPinputfiltertype]
    , ["chanmask" <$$> _switchTOPchanmask]
    , ["outputresolution" <$$> _switchTOPoutputresolution]
    , ["fillmode" <$$> _switchTOPfillmode]
    , ["blend" <$$> _switchTOPblend]
    , ["resolutionw" <$$> _switchTOPresolutionw]
    , ["armenu" <$$> _switchTOParmenu]
    , ["filtertype" <$$> _switchTOPfiltertype]
    , ["aspect1" <$$> _switchTOPaspect1]
    , ["resolutionh" <$$> _switchTOPresolutionh]
    , ["outputaspect" <$$> _switchTOPoutputaspect]]
  pars (MatteTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _matteTOPresmult]
    , ["aspect2" <$$> _matteTOPaspect2]
    , ["format" <$$> _matteTOPformat]
    , ["resmenu" <$$> _matteTOPresmenu]
    , ["npasses" <$$> _matteTOPnpasses]
    , ["inputfiltertype" <$$> _matteTOPinputfiltertype]
    , ["chanmask" <$$> _matteTOPchanmask]
    , ["outputresolution" <$$> _matteTOPoutputresolution]
    , ["fillmode" <$$> _matteTOPfillmode]
    , ["resolutionh" <$$> _matteTOPresolutionh]
    , ["armenu" <$$> _matteTOParmenu]
    , ["switchinputs" <$$> _matteTOPswitchinputs]
    , ["filtertype" <$$> _matteTOPfiltertype]
    , ["aspect1" <$$> _matteTOPaspect1]
    , ["resolutionw" <$$> _matteTOPresolutionw]
    , ["outputaspect" <$$> _matteTOPoutputaspect]
    , ["mattechannel" <$$> _matteTOPmattechannel]]
  pars (LumalevelTOP {..}) = catMaybes . mconcat $ [ ["outlow" <$$> _lumalevelTOPoutlow]
    , ["aspect2" <$$> _lumalevelTOPaspect2]
    , ["brightness1" <$$> _lumalevelTOPbrightness1]
    , ["clamphigh" <$$> _lumalevelTOPclamphigh]
    , ["outhigh" <$$> _lumalevelTOPouthigh]
    , ["contrast" <$$> _lumalevelTOPcontrast]
    , ["aspect1" <$$> _lumalevelTOPaspect1]
    , ["outputresolution" <$$> _lumalevelTOPoutputresolution]
    , ["fillmode" <$$> _lumalevelTOPfillmode]
    , ["resolutionw" <$$> _lumalevelTOPresolutionw]
    , ["opacity" <$$> _lumalevelTOPopacity]
    , ["armenu" <$$> _lumalevelTOParmenu]
    , ["gamma2" <$$> _lumalevelTOPgamma2]
    , ["filtertype" <$$> _lumalevelTOPfiltertype]
    , ["invert" <$$> _lumalevelTOPinvert]
    , ["inhigh" <$$> _lumalevelTOPinhigh]
    , ["inputfiltertype" <$$> _lumalevelTOPinputfiltertype]
    , ["source" <$$> _lumalevelTOPsource]
    , ["blacklevel" <$$> _lumalevelTOPblacklevel]
    , ["resmult" <$$> _lumalevelTOPresmult]
    , ["resmenu" <$$> _lumalevelTOPresmenu]
    , ["chanmask" <$$> _lumalevelTOPchanmask]
    , ["gamma1" <$$> _lumalevelTOPgamma1]
    , ["soften" <$$> _lumalevelTOPsoften]
    , ["threshold" <$$> _lumalevelTOPthreshold]
    , ["format" <$$> _lumalevelTOPformat]
    , ["resolutionh" <$$> _lumalevelTOPresolutionh]
    , ["brightness2" <$$> _lumalevelTOPbrightness2]
    , ["npasses" <$$> _lumalevelTOPnpasses]
    , ["stepsize" <$$> _lumalevelTOPstepsize]
    , ["clamplow" <$$> _lumalevelTOPclamplow]
    , ["inlow" <$$> _lumalevelTOPinlow]
    , ["outputaspect" <$$> _lumalevelTOPoutputaspect]]
  pars (CacheselectTOP {..}) = catMaybes . mconcat $ [ ["index" <$$> _cacheselectTOPindex]
    , ["resmult" <$$> _cacheselectTOPresmult]
    , ["aspect2" <$$> _cacheselectTOPaspect2]
    , ["format" <$$> _cacheselectTOPformat]
    , ["resmenu" <$$> _cacheselectTOPresmenu]
    , ["npasses" <$$> _cacheselectTOPnpasses]
    , ["inputfiltertype" <$$> _cacheselectTOPinputfiltertype]
    , ["chanmask" <$$> _cacheselectTOPchanmask]
    , ["outputresolution" <$$> _cacheselectTOPoutputresolution]
    , ["fillmode" <$$> _cacheselectTOPfillmode]
    , ["resolutionw" <$$> _cacheselectTOPresolutionw]
    , [("cachetop",) . ResolveP <$> _cacheselectTOPcachetop]
    , ["armenu" <$$> _cacheselectTOParmenu]
    , ["filtertype" <$$> _cacheselectTOPfiltertype]
    , ["aspect1" <$$> _cacheselectTOPaspect1]
    , ["resolutionh" <$$> _cacheselectTOPresolutionh]
    , ["outputaspect" <$$> _cacheselectTOPoutputaspect]]
  pars (UnderTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _underTOPaspect2]
    , ["format" <$$> _underTOPformat]
    , ["extend" <$$> _underTOPextend]
    , ["chanmask" <$$> _underTOPchanmask]
    , ["outputresolution" <$$> _underTOPoutputresolution]
    , ["fillmode" <$$> _underTOPfillmode]
    , ["resolutionw" <$$> _underTOPresolutionw]
    , ["armenu" <$$> _underTOParmenu]
    , ["filtertype" <$$> _underTOPfiltertype]
    , ["inputfiltertype" <$$> _underTOPinputfiltertype]
    , ["resmult" <$$> _underTOPresmult]
    , ["punit" <$$> _underTOPpunit]
    , Just <$> vec2Map' "s" _underTOPs
    , ["resmenu" <$$> _underTOPresmenu]
    , Just <$> vec2Map' "p" _underTOPp
    , ["size" <$$> _underTOPsize]
    , ["npasses" <$$> _underTOPnpasses]
    , ["outputaspect" <$$> _underTOPoutputaspect]
    , ["resolutionh" <$$> _underTOPresolutionh]
    , ["tunit" <$$> _underTOPtunit]
    , ["prefit" <$$> _underTOPprefit]
    , ["r" <$$> _underTOPr]
    , ["aspect1" <$$> _underTOPaspect1]
    , ["justifyh" <$$> _underTOPjustifyh]
    , Just <$> vec2Map' "t" _underTOPt
    , ["justifyv" <$$> _underTOPjustifyv]]
  pars (RenderTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _renderTOPaspect2]
    , ["overdraw" <$$> _renderTOPoverdraw]
    , Just <$> vec4Map' "value3" _renderTOPvalue3
    , ["fillmode" <$$> _renderTOPfillmode]
    , ["cullface" <$$> _renderTOPcullface]
    , ["resolutionw" <$$> _renderTOPresolutionw]
    , ["numcolorbufs" <$$> _renderTOPnumcolorbufs]
    , ["armenu" <$$> _renderTOParmenu]
    , ["sampler0" <$$> _renderTOPsampler0]
    , ["format" <$$> _renderTOPformat]
    , ["sampler3" <$$> _renderTOPsampler3]
    , ["resmenu" <$$> _renderTOPresmenu]
    , ["top1extendv" <$$> _renderTOPtop1extendv]
    , ["uniname1" <$$> _renderTOPuniname1]
    , ["cropbottom" <$$> _renderTOPcropbottom]
    , ["sampler4" <$$> _renderTOPsampler4]
    , ["outputaspect" <$$> _renderTOPoutputaspect]
    , ["multicamerahint" <$$> _renderTOPmulticamerahint]
    , ["top4filter" <$$> _renderTOPtop4filter]
    , [("overridemat",) . ResolveP <$> _renderTOPoverridemat]
    , ["orderindtrans" <$$> _renderTOPorderindtrans]
    , ["top4extendv" <$$> _renderTOPtop4extendv]
    , ["uniname4" <$$> _renderTOPuniname4]
    , Just <$> vec4Map' "value2" _renderTOPvalue2
    , ["cropbottomunit" <$$> _renderTOPcropbottomunit]
    , ["cropleft" <$$> _renderTOPcropleft]
    , ["top2extendu" <$$> _renderTOPtop2extendu]
    , ["polygonoffsetunits" <$$> _renderTOPpolygonoffsetunits]
    , ["inputfiltertype" <$$> _renderTOPinputfiltertype]
    , [("top1",) . ResolveP <$> _renderTOPtop1]
    , ["top1filter" <$$> _renderTOPtop1filter]
    , ["resmult" <$$> _renderTOPresmult]
    , ["top2extendw" <$$> _renderTOPtop2extendw]
    , ["sampler2" <$$> _renderTOPsampler2]
    , ["dither" <$$> _renderTOPdither]
    , ["uniname2" <$$> _renderTOPuniname2]
    , [("top2",) . ResolveP <$> _renderTOPtop2]
    , ["croptopunit" <$$> _renderTOPcroptopunit]
    , ["uniname0" <$$> _renderTOPuniname0]
    , ["filtertype" <$$> _renderTOPfiltertype]
    , ["top4extendw" <$$> _renderTOPtop4extendw]
    , ["sampler1" <$$> _renderTOPsampler1]
    , ["render" <$$> _renderTOPrender]
    , Just <$> vec4Map' "value4" _renderTOPvalue4
    , ["antialias" <$$> _renderTOPantialias]
    , ["drawdepthonly" <$$> _renderTOPdrawdepthonly]
    , ["depthformat" <$$> _renderTOPdepthformat]
    , ["croprightunit" <$$> _renderTOPcroprightunit]
    , ["top0anisotropy" <$$> _renderTOPtop0anisotropy]
    , ["rendermode" <$$> _renderTOPrendermode]
    , ["top0extendv" <$$> _renderTOPtop0extendv]
    , [("top0",) . ResolveP <$> _renderTOPtop0]
    , ["top3extendw" <$$> _renderTOPtop3extendw]
    , ["top0filter" <$$> _renderTOPtop0filter]
    , ["polygonoffsetfactor" <$$> _renderTOPpolygonoffsetfactor]
    , ["polygonoffset" <$$> _renderTOPpolygonoffset]
    , ["cropright" <$$> _renderTOPcropright]
    , ["top3anisotropy" <$$> _renderTOPtop3anisotropy]
    , ["top3extendv" <$$> _renderTOPtop3extendv]
    , ["resolutionh" <$$> _renderTOPresolutionh]
    , ["top3filter" <$$> _renderTOPtop3filter]
    , ["allowbufblending" <$$> _renderTOPallowbufblending]
    , [("top3",) . ResolveP <$> _renderTOPtop3]
    , ["aspect1" <$$> _renderTOPaspect1]
    , ["top4extendu" <$$> _renderTOPtop4extendu]
    , ["coloroutputneeded" <$$> _renderTOPcoloroutputneeded]
    , ["top1extendu" <$$> _renderTOPtop1extendu]
    , ["alphatocoverage" <$$> _renderTOPalphatocoverage]
    , ["top3extendu" <$$> _renderTOPtop3extendu]
    , ["top2anisotropy" <$$> _renderTOPtop2anisotropy]
    , ["cropleftunit" <$$> _renderTOPcropleftunit]
    , ["top1extendw" <$$> _renderTOPtop1extendw]
    , ["top2extendv" <$$> _renderTOPtop2extendv]
    , ["top4anisotropy" <$$> _renderTOPtop4anisotropy]
    , [("top4",) . ResolveP <$> _renderTOPtop4]
    , ["overdrawlimit" <$$> _renderTOPoverdrawlimit]
    , Just <$> vec4Map' "value1" _renderTOPvalue1
    , ["top0extendu" <$$> _renderTOPtop0extendu]
    , Just <$> vec4Map' "value0" _renderTOPvalue0
    , ["depthpeel" <$$> _renderTOPdepthpeel]
    , ["top0extendw" <$$> _renderTOPtop0extendw]
    , ["transpeellayers" <$$> _renderTOPtranspeellayers]
    , ["top1anisotropy" <$$> _renderTOPtop1anisotropy]
    , ["outputresolution" <$$> _renderTOPoutputresolution]
    , ["uniname3" <$$> _renderTOPuniname3]
    , ["npasses" <$$> _renderTOPnpasses]
    , ["chanmask" <$$> _renderTOPchanmask]
    , ["croptop" <$$> _renderTOPcroptop]
    , ["top2filter" <$$> _renderTOPtop2filter]]
  pars (ConstantTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _constantTOPresmult]
    , ["aspect2" <$$> _constantTOPaspect2]
    , ["format" <$$> _constantTOPformat]
    , ["rgbaunit" <$$> _constantTOPrgbaunit]
    , ["multrgbbyalpha" <$$> _constantTOPmultrgbbyalpha]
    , ["npasses" <$$> _constantTOPnpasses]
    , Just <$> rgbMap "color" _constantTOPcolor
    , ["alpha" <$$> _constantTOPalpha]
    , ["resmenu" <$$> _constantTOPresmenu]
    , ["outputresolution" <$$> _constantTOPoutputresolution]
    , ["fillmode" <$$> _constantTOPfillmode]
    , ["resolutionh" <$$> _constantTOPresolutionh]
    , ["chanmask" <$$> _constantTOPchanmask]
    , ["armenu" <$$> _constantTOParmenu]
    , ["filtertype" <$$> _constantTOPfiltertype]
    , ["aspect1" <$$> _constantTOPaspect1]
    , ["resolutionw" <$$> _constantTOPresolutionw]
    , ["outputaspect" <$$> _constantTOPoutputaspect]
    , ["inputfiltertype" <$$> _constantTOPinputfiltertype]]
  pars (ScreengrabTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _screengrabTOPaspect2]
    , ["format" <$$> _screengrabTOPformat]
    , ["active" <$$> _screengrabTOPactive]
    , ["bottomunit" <$$> _screengrabTOPbottomunit]
    , ["activepulse" <$$> _screengrabTOPactivepulse]
    , ["inputfiltertype" <$$> _screengrabTOPinputfiltertype]
    , ["chanmask" <$$> _screengrabTOPchanmask]
    , ["outputresolution" <$$> _screengrabTOPoutputresolution]
    , ["resmult" <$$> _screengrabTOPresmult]
    , ["resolutionw" <$$> _screengrabTOPresolutionw]
    , ["armenu" <$$> _screengrabTOParmenu]
    , ["top" <$$> _screengrabTOPtop]
    , ["filtertype" <$$> _screengrabTOPfiltertype]
    , ["bottom" <$$> _screengrabTOPbottom]
    , ["leftunit" <$$> _screengrabTOPleftunit]
    , ["left" <$$> _screengrabTOPleft]
    , ["resmenu" <$$> _screengrabTOPresmenu]
    , ["delayed" <$$> _screengrabTOPdelayed]
    , ["rightunit" <$$> _screengrabTOPrightunit]
    , ["fillmode" <$$> _screengrabTOPfillmode]
    , ["resolutionh" <$$> _screengrabTOPresolutionh]
    , ["topunit" <$$> _screengrabTOPtopunit]
    , ["npasses" <$$> _screengrabTOPnpasses]
    , ["aspect1" <$$> _screengrabTOPaspect1]
    , ["right" <$$> _screengrabTOPright]
    , ["outputaspect" <$$> _screengrabTOPoutputaspect]]
  pars (RealsenseTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _realsenseTOPaspect2]
    , ["format" <$$> _realsenseTOPformat]
    , ["active" <$$> _realsenseTOPactive]
    , ["image" <$$> _realsenseTOPimage]
    , ["inputfiltertype" <$$> _realsenseTOPinputfiltertype]
    , ["chanmask" <$$> _realsenseTOPchanmask]
    , ["outputresolution" <$$> _realsenseTOPoutputresolution]
    , ["fillmode" <$$> _realsenseTOPfillmode]
    , ["colorres" <$$> _realsenseTOPcolorres]
    , ["api" <$$> _realsenseTOPapi]
    , ["armenu" <$$> _realsenseTOParmenu]
    , ["tradeoff" <$$> _realsenseTOPtradeoff]
    , ["resolutionw" <$$> _realsenseTOPresolutionw]
    , ["mirrorimage" <$$> _realsenseTOPmirrorimage]
    , ["resmult" <$$> _realsenseTOPresmult]
    , ["sensor" <$$> _realsenseTOPsensor]
    , ["resmenu" <$$> _realsenseTOPresmenu]
    , ["maxdepth" <$$> _realsenseTOPmaxdepth]
    , ["resolutionh" <$$> _realsenseTOPresolutionh]
    , ["npasses" <$$> _realsenseTOPnpasses]
    , ["aspect1" <$$> _realsenseTOPaspect1]
    , ["model" <$$> _realsenseTOPmodel]
    , ["defaulttradeoff" <$$> _realsenseTOPdefaulttradeoff]
    , ["outputaspect" <$$> _realsenseTOPoutputaspect]
    , ["filtertype" <$$> _realsenseTOPfiltertype]]
  pars (ReorderTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _reorderTOPaspect2]
    , ["format" <$$> _reorderTOPformat]
    , ["outputgreenchan" <$$> _reorderTOPoutputgreenchan]
    , ["outputred" <$$> _reorderTOPoutputred]
    , ["chanmask" <$$> _reorderTOPchanmask]
    , ["outputresolution" <$$> _reorderTOPoutputresolution]
    , ["fillmode" <$$> _reorderTOPfillmode]
    , ["resolutionw" <$$> _reorderTOPresolutionw]
    , ["armenu" <$$> _reorderTOParmenu]
    , ["filtertype" <$$> _reorderTOPfiltertype]
    , ["outputblue" <$$> _reorderTOPoutputblue]
    , ["inputfiltertype" <$$> _reorderTOPinputfiltertype]
    , ["resmult" <$$> _reorderTOPresmult]
    , ["outputgreen" <$$> _reorderTOPoutputgreen]
    , ["resmenu" <$$> _reorderTOPresmenu]
    , ["outputalpha" <$$> _reorderTOPoutputalpha]
    , ["resolutionh" <$$> _reorderTOPresolutionh]
    , ["npasses" <$$> _reorderTOPnpasses]
    , ["outputbluechan" <$$> _reorderTOPoutputbluechan]
    , ["outputredchan" <$$> _reorderTOPoutputredchan]
    , ["aspect1" <$$> _reorderTOPaspect1]
    , ["outputalphachan" <$$> _reorderTOPoutputalphachan]
    , ["outputaspect" <$$> _reorderTOPoutputaspect]]
  pars (MonochromeTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _monochromeTOPresmult]
    , ["aspect2" <$$> _monochromeTOPaspect2]
    , ["format" <$$> _monochromeTOPformat]
    , ["resmenu" <$$> _monochromeTOPresmenu]
    , ["npasses" <$$> _monochromeTOPnpasses]
    , ["chanmask" <$$> _monochromeTOPchanmask]
    , ["alpha" <$$> _monochromeTOPalpha]
    , ["mono" <$$> _monochromeTOPmono]
    , ["outputresolution" <$$> _monochromeTOPoutputresolution]
    , ["fillmode" <$$> _monochromeTOPfillmode]
    , ["resolutionh" <$$> _monochromeTOPresolutionh]
    , ["armenu" <$$> _monochromeTOParmenu]
    , ["filtertype" <$$> _monochromeTOPfiltertype]
    , ["aspect1" <$$> _monochromeTOPaspect1]
    , ["rgb" <$$> _monochromeTOPrgb]
    , ["resolutionw" <$$> _monochromeTOPresolutionw]
    , ["outputaspect" <$$> _monochromeTOPoutputaspect]
    , ["inputfiltertype" <$$> _monochromeTOPinputfiltertype]]
  pars (GlslTOP {..}) = catMaybes . mconcat $ [ ["depth" <$$> _glslTOPdepth]
    , Just <$> vec4Map' "value3" _glslTOPvalue3
    , ["glslversion" <$$> _glslTOPglslversion]
    , ["fillmode" <$$> _glslTOPfillmode]
    , ["resolutionw" <$$> _glslTOPresolutionw]
    , ["acsize0" <$$> _glslTOPacsize0]
    , Just <$> rgbaMap "clearvalue" _glslTOPclearvalue
    , Just <$> vec4Map' "value24" _glslTOPvalue24
    , ["dispatchsizey" <$$> _glslTOPdispatchsizey]
    , Just <$> vec4Map' "value10" _glslTOPvalue10
    , ["resmenu" <$$> _glslTOPresmenu]
    , ["uniname12" <$$> _glslTOPuniname12]
    , ["uniname25" <$$> _glslTOPuniname25]
    , ["chopunitype9" <$$> _glslTOPchopunitype9]
    , ["acinitval0" <$$> _glslTOPacinitval0]
    , ["uniname1" <$$> _glslTOPuniname1]
    , ["matuniname2" <$$> _glslTOPmatuniname2]
    , ["uniname10" <$$> _glslTOPuniname10]
    , ["chopuniname7" <$$> _glslTOPchopuniname7]
    , ["uniname11" <$$> _glslTOPuniname11]
    , Just <$> vec4Map' "value23" _glslTOPvalue23
    , ["outputaspect" <$$> _glslTOPoutputaspect]
    , Just <$> vec4Map' "value19" _glslTOPvalue19
    , ["chopunitype2" <$$> _glslTOPchopunitype2]
    , ["uniname5" <$$> _glslTOPuniname5]
    , ["uniname4" <$$> _glslTOPuniname4]
    , ["uniname23" <$$> _glslTOPuniname23]
    , Just <$> vec4Map' "value2" _glslTOPvalue2
    , ["resmult" <$$> _glslTOPresmult]
    , ["chopuniname9" <$$> _glslTOPchopuniname9]
    , ["acsize1" <$$> _glslTOPacsize1]
    , Just <$> vec4Map' "value13" _glslTOPvalue13
    , ["acsingleval1" <$$> _glslTOPacsingleval1]
    , ["acinitval1" <$$> _glslTOPacinitval1]
    , ["chopuniname4" <$$> _glslTOPchopuniname4]
    , [("chop6",) . ResolveP <$> _glslTOPchop6]
    , ["uniname14" <$$> _glslTOPuniname14]
    , ["choparraytype8" <$$> _glslTOPchoparraytype8]
    , Just <$> vec4Map' "value17" _glslTOPvalue17
    , ["chopunitype4" <$$> _glslTOPchopunitype4]
    , ["chopuniname8" <$$> _glslTOPchopuniname8]
    , ["chanmask" <$$> _glslTOPchanmask]
    , ["chopuniname1" <$$> _glslTOPchopuniname1]
    , ["outputaccess" <$$> _glslTOPoutputaccess]
    , ["uniname2" <$$> _glslTOPuniname2]
    , Just <$> vec4Map' "value6" _glslTOPvalue6
    , ["armenu" <$$> _glslTOParmenu]
    , ["uniname3" <$$> _glslTOPuniname3]
    , Just <$> vec4Map' "value21" _glslTOPvalue21
    , ["chopunitype3" <$$> _glslTOPchopunitype3]
    , ["chopunitype6" <$$> _glslTOPchopunitype6]
    , Just <$> vec4Map' "value4" _glslTOPvalue4
    , Just <$> vec4Map' "value15" _glslTOPvalue15
    , [("chop3",) . ResolveP <$> _glslTOPchop3]
    , ["clearoutputs" <$$> _glslTOPclearoutputs]
    , ["filtertype" <$$> _glslTOPfiltertype]
    , ["uniname20" <$$> _glslTOPuniname20]
    , ["matuniname1" <$$> _glslTOPmatuniname1]
    , ["chopuniname2" <$$> _glslTOPchopuniname2]
    , ["uniname9" <$$> _glslTOPuniname9]
    , ["choparraytype1" <$$> _glslTOPchoparraytype1]
    , ["chopuniname0" <$$> _glslTOPchopuniname0]
    , ["resolutionh" <$$> _glslTOPresolutionh]
    , ["uniname27" <$$> _glslTOPuniname27]
    , ["aspect1" <$$> _glslTOPaspect1]
    , ["numcolorbufs" <$$> _glslTOPnumcolorbufs]
    , ["inputmapping" <$$> _glslTOPinputmapping]
    , Just <$> vec4Map' "value27" _glslTOPvalue27
    , [("chop2",) . ResolveP <$> _glslTOPchop2]
    , Just <$> vec4Map' "value8" _glslTOPvalue8
    , [("chop5",) . ResolveP <$> _glslTOPchop5]
    , ["uniname13" <$$> _glslTOPuniname13]
    , ["chopunitype0" <$$> _glslTOPchopunitype0]
    , ["acinitval2" <$$> _glslTOPacinitval2]
    , ["acbinding3" <$$> _glslTOPacbinding3]
    , ["uniname28" <$$> _glslTOPuniname28]
    , Just <$> vec4Map' "value0" _glslTOPvalue0
    , [("acchopval2",) . ResolveP <$> _glslTOPacchopval2]
    , ["choparraytype4" <$$> _glslTOPchoparraytype4]
    , ["chopunitype8" <$$> _glslTOPchopunitype8]
    , ["inputextendw" <$$> _glslTOPinputextendw]
    , ["uniname0" <$$> _glslTOPuniname0]
    , ["uniname26" <$$> _glslTOPuniname26]
    , ["acsize3" <$$> _glslTOPacsize3]
    , ["customdepth" <$$> _glslTOPcustomdepth]
    , ["matuniname3" <$$> _glslTOPmatuniname3]
    , ["acbinding2" <$$> _glslTOPacbinding2]
    , ["choparraytype5" <$$> _glslTOPchoparraytype5]
    , ["nval" <$$> _glslTOPnval]
    , ["mode" <$$> _glslTOPmode]
    , ["aspect2" <$$> _glslTOPaspect2]
    , ["format" <$$> _glslTOPformat]
    , Just <$> vec4Map' "value29" _glslTOPvalue29
    , ["acinitval3" <$$> _glslTOPacinitval3]
    , ["chopuniname3" <$$> _glslTOPchopuniname3]
    , [("computedat",) . ResolveP <$> _glslTOPcomputedat]
    , [("acchopval0",) . ResolveP <$> _glslTOPacchopval0]
    , [("pixeldat",) . ResolveP <$> _glslTOPpixeldat]
    , Just <$> vec4Map' "value20" _glslTOPvalue20
    , Just <$> vec4Map' "value25" _glslTOPvalue25
    , ["choparraytype6" <$$> _glslTOPchoparraytype6]
    , ["choparraytype9" <$$> _glslTOPchoparraytype9]
    , ["type" <$$> _glslTOPtype]
    , ["acsingleval0" <$$> _glslTOPacsingleval0]
    , ["chopuniname6" <$$> _glslTOPchopuniname6]
    , ["uniname17" <$$> _glslTOPuniname17]
    , ["uniname8" <$$> _glslTOPuniname8]
    , ["chopuniname5" <$$> _glslTOPchopuniname5]
    , ["matuniname7" <$$> _glslTOPmatuniname7]
    , [("chop7",) . ResolveP <$> _glslTOPchop7]
    , [("chop9",) . ResolveP <$> _glslTOPchop9]
    , ["enablevectorpage3" <$$> _glslTOPenablevectorpage3]
    , [("chop0",) . ResolveP <$> _glslTOPchop0]
    , ["uniname19" <$$> _glslTOPuniname19]
    , Just <$> vec4Map' "value11" _glslTOPvalue11
    , ["uniname7" <$$> _glslTOPuniname7]
    , ["loaduniformnames" <$$> _glslTOPloaduniformnames]
    , ["uniname29" <$$> _glslTOPuniname29]
    , Just <$> vec4Map' "value5" _glslTOPvalue5
    , [("chop1",) . ResolveP <$> _glslTOPchop1]
    , Just <$> vec4Map' "value9" _glslTOPvalue9
    , [("chop4",) . ResolveP <$> _glslTOPchop4]
    , ["matuniname9" <$$> _glslTOPmatuniname9]
    , ["dispatchsizez" <$$> _glslTOPdispatchsizez]
    , ["chopunitype5" <$$> _glslTOPchopunitype5]
    , ["choparraytype7" <$$> _glslTOPchoparraytype7]
    , ["inputfiltertype" <$$> _glslTOPinputfiltertype]
    , ["matuniname4" <$$> _glslTOPmatuniname4]
    , ["chopunitype1" <$$> _glslTOPchopunitype1]
    , ["matuniname8" <$$> _glslTOPmatuniname8]
    , Just <$> vec4Map' "value26" _glslTOPvalue26
    , ["uniname21" <$$> _glslTOPuniname21]
    , Just <$> vec4Map' "value28" _glslTOPvalue28
    , ["acsingleval2" <$$> _glslTOPacsingleval2]
    , Just <$> vec4Map' "value14" _glslTOPvalue14
    , ["uniname24" <$$> _glslTOPuniname24]
    , ["acbinding0" <$$> _glslTOPacbinding0]
    , ["uniname16" <$$> _glslTOPuniname16]
    , ["choparraytype3" <$$> _glslTOPchoparraytype3]
    , ["npasses" <$$> _glslTOPnpasses]
    , [("chop8",) . ResolveP <$> _glslTOPchop8]
    , [("acchopval1",) . ResolveP <$> _glslTOPacchopval1]
    , [("acchopval3",) . ResolveP <$> _glslTOPacchopval3]
    , ["inputextenduv" <$$> _glslTOPinputextenduv]
    , Just <$> vec4Map' "value22" _glslTOPvalue22
    , ["outputresolution" <$$> _glslTOPoutputresolution]
    , ["acsize2" <$$> _glslTOPacsize2]
    , ["matuniname0" <$$> _glslTOPmatuniname0]
    , ["matuniname6" <$$> _glslTOPmatuniname6]
    , ["acbinding1" <$$> _glslTOPacbinding1]
    , ["uniname15" <$$> _glslTOPuniname15]
    , Just <$> vec4Map' "value1" _glslTOPvalue1
    , Just <$> vec4Map' "value16" _glslTOPvalue16
    , ["matuniname5" <$$> _glslTOPmatuniname5]
    , ["dispatchsizex" <$$> _glslTOPdispatchsizex]
    , [("vertexdat",) . ResolveP <$> _glslTOPvertexdat]
    , ["choparraytype2" <$$> _glslTOPchoparraytype2]
    , ["uniname18" <$$> _glslTOPuniname18]
    , ["chopunitype7" <$$> _glslTOPchopunitype7]
    , ["uniname6" <$$> _glslTOPuniname6]
    , Just <$> vec4Map' "value7" _glslTOPvalue7
    , ["uniname22" <$$> _glslTOPuniname22]
    , Just <$> vec4Map' "value18" _glslTOPvalue18
    , ["acsingleval3" <$$> _glslTOPacsingleval3]
    , Just <$> vec4Map' "value12" _glslTOPvalue12
    , ["choparraytype0" <$$> _glslTOPchoparraytype0]]
  pars (CrossTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _crossTOPaspect2]
    , ["format" <$$> _crossTOPformat]
    , ["inputfiltertype" <$$> _crossTOPinputfiltertype]
    , ["chanmask" <$$> _crossTOPchanmask]
    , ["outputresolution" <$$> _crossTOPoutputresolution]
    , ["fillmode" <$$> _crossTOPfillmode]
    , ["resolutionw" <$$> _crossTOPresolutionw]
    , ["armenu" <$$> _crossTOParmenu]
    , ["filtertype" <$$> _crossTOPfiltertype]
    , ["r" <$$> _crossTOPr]
    , ["extend" <$$> _crossTOPextend]
    , ["resmult" <$$> _crossTOPresmult]
    , ["punit" <$$> _crossTOPpunit]
    , Just <$> vec2Map' "s" _crossTOPs
    , ["resmenu" <$$> _crossTOPresmenu]
    , Just <$> vec2Map' "p" _crossTOPp
    , ["cross" <$$> _crossTOPcross]
    , ["size" <$$> _crossTOPsize]
    , ["resolutionh" <$$> _crossTOPresolutionh]
    , ["tunit" <$$> _crossTOPtunit]
    , ["prefit" <$$> _crossTOPprefit]
    , ["npasses" <$$> _crossTOPnpasses]
    , ["aspect1" <$$> _crossTOPaspect1]
    , Just <$> vec2Map' "t" _crossTOPt
    , ["outputaspect" <$$> _crossTOPoutputaspect]]
  pars (InTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _inTOPresmult]
    , ["aspect2" <$$> _inTOPaspect2]
    , ["format" <$$> _inTOPformat]
    , ["resmenu" <$$> _inTOPresmenu]
    , ["npasses" <$$> _inTOPnpasses]
    , ["inputfiltertype" <$$> _inTOPinputfiltertype]
    , ["chanmask" <$$> _inTOPchanmask]
    , ["outputresolution" <$$> _inTOPoutputresolution]
    , ["fillmode" <$$> _inTOPfillmode]
    , ["resolutionw" <$$> _inTOPresolutionw]
    , ["armenu" <$$> _inTOParmenu]
    , ["filtertype" <$$> _inTOPfiltertype]
    , ["aspect1" <$$> _inTOPaspect1]
    , ["label" <$$> _inTOPlabel]
    , ["resolutionh" <$$> _inTOPresolutionh]
    , ["outputaspect" <$$> _inTOPoutputaspect]]
  pars (LayoutTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _layoutTOPaspect2]
    , ["fit" <$$> _layoutTOPfit]
    , ["align" <$$> _layoutTOPalign]
    , ["scaleres" <$$> _layoutTOPscaleres]
    , ["inputfiltertype" <$$> _layoutTOPinputfiltertype]
    , ["chanmask" <$$> _layoutTOPchanmask]
    , ["outputresolution" <$$> _layoutTOPoutputresolution]
    , ["fillmode" <$$> _layoutTOPfillmode]
    , ["resolutionw" <$$> _layoutTOPresolutionw]
    , ["armenu" <$$> _layoutTOParmenu]
    , [("top",) . ResolveP <$> _layoutTOPtop]
    , ["filtertype" <$$> _layoutTOPfiltertype]
    , ["format" <$$> _layoutTOPformat]
    , Just <$> rgbaMap "bgcolor" _layoutTOPbgcolor
    , ["maxcols" <$$> _layoutTOPmaxcols]
    , ["resmult" <$$> _layoutTOPresmult]
    , ["resmenu" <$$> _layoutTOPresmenu]
    , ["resolutionh" <$$> _layoutTOPresolutionh]
    , ["npasses" <$$> _layoutTOPnpasses]
    , ["fillbg" <$$> _layoutTOPfillbg]
    , ["aspect1" <$$> _layoutTOPaspect1]
    , ["maxrows" <$$> _layoutTOPmaxrows]
    , ["outputaspect" <$$> _layoutTOPoutputaspect]]
  pars (ScreenTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _screenTOPaspect2]
    , ["format" <$$> _screenTOPformat]
    , ["extend" <$$> _screenTOPextend]
    , ["chanmask" <$$> _screenTOPchanmask]
    , ["outputresolution" <$$> _screenTOPoutputresolution]
    , ["fillmode" <$$> _screenTOPfillmode]
    , ["resolutionw" <$$> _screenTOPresolutionw]
    , ["armenu" <$$> _screenTOParmenu]
    , ["filtertype" <$$> _screenTOPfiltertype]
    , ["inputfiltertype" <$$> _screenTOPinputfiltertype]
    , ["resmult" <$$> _screenTOPresmult]
    , ["punit" <$$> _screenTOPpunit]
    , Just <$> vec2Map' "s" _screenTOPs
    , ["resmenu" <$$> _screenTOPresmenu]
    , Just <$> vec2Map' "p" _screenTOPp
    , ["size" <$$> _screenTOPsize]
    , ["npasses" <$$> _screenTOPnpasses]
    , ["outputaspect" <$$> _screenTOPoutputaspect]
    , ["resolutionh" <$$> _screenTOPresolutionh]
    , ["tunit" <$$> _screenTOPtunit]
    , ["prefit" <$$> _screenTOPprefit]
    , ["r" <$$> _screenTOPr]
    , ["aspect1" <$$> _screenTOPaspect1]
    , ["justifyh" <$$> _screenTOPjustifyh]
    , Just <$> vec2Map' "t" _screenTOPt
    , ["justifyv" <$$> _screenTOPjustifyv]]
  pars (FlipTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _flipTOPresmult]
    , ["aspect2" <$$> _flipTOPaspect2]
    , ["format" <$$> _flipTOPformat]
    , ["resmenu" <$$> _flipTOPresmenu]
    , ["npasses" <$$> _flipTOPnpasses]
    , ["inputfiltertype" <$$> _flipTOPinputfiltertype]
    , ["chanmask" <$$> _flipTOPchanmask]
    , ["outputresolution" <$$> _flipTOPoutputresolution]
    , ["fillmode" <$$> _flipTOPfillmode]
    , ["flop" <$$> _flipTOPflop]
    , ["resolutionh" <$$> _flipTOPresolutionh]
    , ["armenu" <$$> _flipTOParmenu]
    , ["filtertype" <$$> _flipTOPfiltertype]
    , ["aspect1" <$$> _flipTOPaspect1]
    , ["flipy" <$$> _flipTOPflipy]
    , ["flipx" <$$> _flipTOPflipx]
    , ["resolutionw" <$$> _flipTOPresolutionw]
    , ["outputaspect" <$$> _flipTOPoutputaspect]]
  pars (DirectxinTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _directxinTOPresmult]
    , ["aspect2" <$$> _directxinTOPaspect2]
    , ["format" <$$> _directxinTOPformat]
    , ["resmenu" <$$> _directxinTOPresmenu]
    , ["npasses" <$$> _directxinTOPnpasses]
    , ["inputfiltertype" <$$> _directxinTOPinputfiltertype]
    , ["chanmask" <$$> _directxinTOPchanmask]
    , ["outputresolution" <$$> _directxinTOPoutputresolution]
    , ["fillmode" <$$> _directxinTOPfillmode]
    , ["resolutionw" <$$> _directxinTOPresolutionw]
    , ["handle" <$$> _directxinTOPhandle]
    , ["armenu" <$$> _directxinTOParmenu]
    , ["filtertype" <$$> _directxinTOPfiltertype]
    , ["aspect1" <$$> _directxinTOPaspect1]
    , ["resolutionh" <$$> _directxinTOPresolutionh]
    , ["outputaspect" <$$> _directxinTOPoutputaspect]]
  pars (CornerpinTOP {..}) = catMaybes . mconcat $ [ ["extractp42" <$$> _cornerpinTOPextractp42]
    , ["gridrefine" <$$> _cornerpinTOPgridrefine]
    , ["aspect2" <$$> _cornerpinTOPaspect2]
    , ["inputfiltertype" <$$> _cornerpinTOPinputfiltertype]
    , ["format" <$$> _cornerpinTOPformat]
    , ["extractp22" <$$> _cornerpinTOPextractp22]
    , ["extractp12" <$$> _cornerpinTOPextractp12]
    , ["extractp11" <$$> _cornerpinTOPextractp11]
    , ["outputresolution" <$$> _cornerpinTOPoutputresolution]
    , ["resmult" <$$> _cornerpinTOPresmult]
    , ["resolutionw" <$$> _cornerpinTOPresolutionw]
    , ["filtertype" <$$> _cornerpinTOPfiltertype]
    , ["armenu" <$$> _cornerpinTOParmenu]
    , ["pinp12" <$$> _cornerpinTOPpinp12]
    , ["pinp32" <$$> _cornerpinTOPpinp32]
    , ["pinp2unit" <$$> _cornerpinTOPpinp2unit]
    , Just <$> rgbaMap "bgcolor" _cornerpinTOPbgcolor
    , ["chanmask" <$$> _cornerpinTOPchanmask]
    , ["extractp2unit" <$$> _cornerpinTOPextractp2unit]
    , ["pinp4unit" <$$> _cornerpinTOPpinp4unit]
    , ["extractp3unit" <$$> _cornerpinTOPextractp3unit]
    , ["extractp41" <$$> _cornerpinTOPextractp41]
    , ["resmenu" <$$> _cornerpinTOPresmenu]
    , ["npasses" <$$> _cornerpinTOPnpasses]
    , ["pinp41" <$$> _cornerpinTOPpinp41]
    , ["pinp11" <$$> _cornerpinTOPpinp11]
    , ["pinp21" <$$> _cornerpinTOPpinp21]
    , ["fillmode" <$$> _cornerpinTOPfillmode]
    , ["pinp3unit" <$$> _cornerpinTOPpinp3unit]
    , ["extractp4unit" <$$> _cornerpinTOPextractp4unit]
    , ["resolutionh" <$$> _cornerpinTOPresolutionh]
    , ["pinp42" <$$> _cornerpinTOPpinp42]
    , ["extractp1unit" <$$> _cornerpinTOPextractp1unit]
    , ["outputaspect" <$$> _cornerpinTOPoutputaspect]
    , ["extractp32" <$$> _cornerpinTOPextractp32]
    , ["pinp31" <$$> _cornerpinTOPpinp31]
    , ["aspect1" <$$> _cornerpinTOPaspect1]
    , ["extractp21" <$$> _cornerpinTOPextractp21]
    , ["extractp31" <$$> _cornerpinTOPextractp31]
    , ["pinp1unit" <$$> _cornerpinTOPpinp1unit]
    , ["extend" <$$> _cornerpinTOPextend]
    , ["pinp22" <$$> _cornerpinTOPpinp22]]
  pars (OpviewerTOP {..}) = catMaybes . mconcat $ [ ["preservealpha" <$$> _opviewerTOPpreservealpha]
    , ["resmult" <$$> _opviewerTOPresmult]
    , ["aspect2" <$$> _opviewerTOPaspect2]
    , ["armenu" <$$> _opviewerTOParmenu]
    , ["resmenu" <$$> _opviewerTOPresmenu]
    , ["npasses" <$$> _opviewerTOPnpasses]
    , ["inputfiltertype" <$$> _opviewerTOPinputfiltertype]
    , ["chanmask" <$$> _opviewerTOPchanmask]
    , ["outputresolution" <$$> _opviewerTOPoutputresolution]
    , ["fillmode" <$$> _opviewerTOPfillmode]
    , ["format" <$$> _opviewerTOPformat]
    , ["resolutionh" <$$> _opviewerTOPresolutionh]
    , ["filtertype" <$$> _opviewerTOPfiltertype]
    , ["aspect1" <$$> _opviewerTOPaspect1]
    , ["allowpanel" <$$> _opviewerTOPallowpanel]
    , ["resolutionw" <$$> _opviewerTOPresolutionw]
    , ["outputaspect" <$$> _opviewerTOPoutputaspect]]
  pars (ViosoTOP {..}) = catMaybes . mconcat $ [ ["armenu" <$$> _viosoTOParmenu]
    , ["resmult" <$$> _viosoTOPresmult]
    , ["aspect2" <$$> _viosoTOPaspect2]
    , ["format" <$$> _viosoTOPformat]
    , ["filter" <$$> _viosoTOPfilter]
    , ["resmenu" <$$> _viosoTOPresmenu]
    , ["npasses" <$$> _viosoTOPnpasses]
    , ["inputfiltertype" <$$> _viosoTOPinputfiltertype]
    , ["chanmask" <$$> _viosoTOPchanmask]
    , ["outputresolution" <$$> _viosoTOPoutputresolution]
    , ["fillmode" <$$> _viosoTOPfillmode]
    , ["resolutionh" <$$> _viosoTOPresolutionh]
    , ["projectorindex" <$$> _viosoTOPprojectorindex]
    , ["configfile" <$$> _viosoTOPconfigfile]
    , ["aspect1" <$$> _viosoTOPaspect1]
    , ["resolutionw" <$$> _viosoTOPresolutionw]
    , ["outputaspect" <$$> _viosoTOPoutputaspect]
    , ["filtertype" <$$> _viosoTOPfiltertype]]
  pars (LookupTOP {..}) = catMaybes . mconcat $ [ ["darkuvunit" <$$> _lookupTOPdarkuvunit]
    , ["aspect2" <$$> _lookupTOPaspect2]
    , ["clampchopvalues" <$$> _lookupTOPclampchopvalues]
    , ["format" <$$> _lookupTOPformat]
    , ["lightuv2" <$$> _lookupTOPlightuv2]
    , ["inputfiltertype" <$$> _lookupTOPinputfiltertype]
    , ["darkuv2" <$$> _lookupTOPdarkuv2]
    , ["outputresolution" <$$> _lookupTOPoutputresolution]
    , ["fillmode" <$$> _lookupTOPfillmode]
    , ["resolutionw" <$$> _lookupTOPresolutionw]
    , ["armenu" <$$> _lookupTOParmenu]
    , ["usesourceluminance" <$$> _lookupTOPusesourceluminance]
    , ["displaylookup" <$$> _lookupTOPdisplaylookup]
    , ["lightuv1" <$$> _lookupTOPlightuv1]
    , [("chop",) . ResolveP <$> _lookupTOPchop]
    , ["darkuv1" <$$> _lookupTOPdarkuv1]
    , ["resmult" <$$> _lookupTOPresmult]
    , ["resmenu" <$$> _lookupTOPresmenu]
    , ["chanmask" <$$> _lookupTOPchanmask]
    , ["resolutionh" <$$> _lookupTOPresolutionh]
    , ["npasses" <$$> _lookupTOPnpasses]
    , ["lightuvunit" <$$> _lookupTOPlightuvunit]
    , ["aspect1" <$$> _lookupTOPaspect1]
    , ["method" <$$> _lookupTOPmethod]
    , ["outputaspect" <$$> _lookupTOPoutputaspect]
    , ["filtertype" <$$> _lookupTOPfiltertype]]
  pars (VideodeviceoutTOP {..}) = catMaybes . mconcat $ [ ["firstfield" <$$> _videodeviceoutTOPfirstfield]
    , ["transfermode" <$$> _videodeviceoutTOPtransfermode]
    , ["active" <$$> _videodeviceoutTOPactive]
    , ["inputfiltertype" <$$> _videodeviceoutTOPinputfiltertype]
    , ["chanmask" <$$> _videodeviceoutTOPchanmask]
    , ["outputresolution" <$$> _videodeviceoutTOPoutputresolution]
    , ["fillmode" <$$> _videodeviceoutTOPfillmode]
    , ["bufferlength" <$$> _videodeviceoutTOPbufferlength]
    , ["resolutionw" <$$> _videodeviceoutTOPresolutionw]
    , ["manualfield" <$$> _videodeviceoutTOPmanualfield]
    , ["armenu" <$$> _videodeviceoutTOParmenu]
    , ["filtertype" <$$> _videodeviceoutTOPfiltertype]
    , ["aspect2" <$$> _videodeviceoutTOPaspect2]
    , ["format" <$$> _videodeviceoutTOPformat]
    , ["signalformat" <$$> _videodeviceoutTOPsignalformat]
    , ["resmult" <$$> _videodeviceoutTOPresmult]
    , ["library" <$$> _videodeviceoutTOPlibrary]
    , ["resmenu" <$$> _videodeviceoutTOPresmenu]
    , ["outputpixelformat" <$$> _videodeviceoutTOPoutputpixelformat]
    , ["audiobitdepth" <$$> _videodeviceoutTOPaudiobitdepth]
    , ["resolutionh" <$$> _videodeviceoutTOPresolutionh]
    , ["npasses" <$$> _videodeviceoutTOPnpasses]
    , ["device" <$$> _videodeviceoutTOPdevice]
    , ["aspect1" <$$> _videodeviceoutTOPaspect1]
    , [("chop",) . ResolveP <$> _videodeviceoutTOPchop]
    , ["outputaspect" <$$> _videodeviceoutTOPoutputaspect]]
  pars (DepthTOP {..}) = catMaybes . mconcat $ [ ["rangefrom1" <$$> _depthTOPrangefrom1]
    , ["aspect2" <$$> _depthTOPaspect2]
    , ["format" <$$> _depthTOPformat]
    , ["inputfiltertype" <$$> _depthTOPinputfiltertype]
    , ["pixelformat" <$$> _depthTOPpixelformat]
    , ["outputresolution" <$$> _depthTOPoutputresolution]
    , ["fillmode" <$$> _depthTOPfillmode]
    , ["resolutionw" <$$> _depthTOPresolutionw]
    , ["clamp" <$$> _depthTOPclamp]
    , ["armenu" <$$> _depthTOParmenu]
    , ["filtertype" <$$> _depthTOPfiltertype]
    , ["cameraindex" <$$> _depthTOPcameraindex]
    , ["resmult" <$$> _depthTOPresmult]
    , ["depthspace" <$$> _depthTOPdepthspace]
    , ["resmenu" <$$> _depthTOPresmenu]
    , ["chanmask" <$$> _depthTOPchanmask]
    , ["gamma" <$$> _depthTOPgamma]
    , ["rangeto1" <$$> _depthTOPrangeto1]
    , ["resolutionh" <$$> _depthTOPresolutionh]
    , ["peellayerindex" <$$> _depthTOPpeellayerindex]
    , ["rangeto2" <$$> _depthTOPrangeto2]
    , ["npasses" <$$> _depthTOPnpasses]
    , ["rangefrom2" <$$> _depthTOPrangefrom2]
    , ["aspect1" <$$> _depthTOPaspect1]
    , ["outputaspect" <$$> _depthTOPoutputaspect]]
  pars (VideostreaminTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _videostreaminTOPaspect2]
    , ["format" <$$> _videostreaminTOPformat]
    , ["prereadframes" <$$> _videostreaminTOPprereadframes]
    , ["inputfiltertype" <$$> _videostreaminTOPinputfiltertype]
    , ["chanmask" <$$> _videostreaminTOPchanmask]
    , ["bottomhalfalpha" <$$> _videostreaminTOPbottomhalfalpha]
    , ["fillmode" <$$> _videostreaminTOPfillmode]
    , ["resolutionw" <$$> _videostreaminTOPresolutionw]
    , ["armenu" <$$> _videostreaminTOParmenu]
    , ["deinterlace" <$$> _videostreaminTOPdeinterlace]
    , ["precedence" <$$> _videostreaminTOPprecedence]
    , ["asyncupload" <$$> _videostreaminTOPasyncupload]
    , ["networkqueuesize" <$$> _videostreaminTOPnetworkqueuesize]
    , ["resmult" <$$> _videostreaminTOPresmult]
    , ["resmenu" <$$> _videostreaminTOPresmenu]
    , ["reloadpulse" <$$> _videostreaminTOPreloadpulse]
    , ["url" <$$> _videostreaminTOPurl]
    , ["resolutionh" <$$> _videostreaminTOPresolutionh]
    , ["outputresolution" <$$> _videostreaminTOPoutputresolution]
    , ["play" <$$> _videostreaminTOPplay]
    , ["npasses" <$$> _videostreaminTOPnpasses]
    , ["networkbuffersize" <$$> _videostreaminTOPnetworkbuffersize]
    , ["aspect1" <$$> _videostreaminTOPaspect1]
    , ["maxdecodecpus" <$$> _videostreaminTOPmaxdecodecpus]
    , ["outputaspect" <$$> _videostreaminTOPoutputaspect]
    , ["reload" <$$> _videostreaminTOPreload]
    , ["filtertype" <$$> _videostreaminTOPfiltertype]]
  pars (SharedmemoutTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _sharedmemoutTOPresmult]
    , ["aspect2" <$$> _sharedmemoutTOPaspect2]
    , ["format" <$$> _sharedmemoutTOPformat]
    , ["active" <$$> _sharedmemoutTOPactive]
    , ["downloadtype" <$$> _sharedmemoutTOPdownloadtype]
    , ["npasses" <$$> _sharedmemoutTOPnpasses]
    , ["memtype" <$$> _sharedmemoutTOPmemtype]
    , ["inputfiltertype" <$$> _sharedmemoutTOPinputfiltertype]
    , ["resmenu" <$$> _sharedmemoutTOPresmenu]
    , ["outputresolution" <$$> _sharedmemoutTOPoutputresolution]
    , ["fillmode" <$$> _sharedmemoutTOPfillmode]
    , ["name" <$$> _sharedmemoutTOPname]
    , ["resolutionh" <$$> _sharedmemoutTOPresolutionh]
    , ["chanmask" <$$> _sharedmemoutTOPchanmask]
    , ["armenu" <$$> _sharedmemoutTOParmenu]
    , ["filtertype" <$$> _sharedmemoutTOPfiltertype]
    , ["aspect1" <$$> _sharedmemoutTOPaspect1]
    , ["resolutionw" <$$> _sharedmemoutTOPresolutionw]
    , ["outputaspect" <$$> _sharedmemoutTOPoutputaspect]]
  pars (ChoptoTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _choptoTOPresmult]
    , ["aspect2" <$$> _choptoTOPaspect2]
    , ["format" <$$> _choptoTOPformat]
    , ["resmenu" <$$> _choptoTOPresmenu]
    , ["dataformat" <$$> _choptoTOPdataformat]
    , ["chanmask" <$$> _choptoTOPchanmask]
    , ["inputfiltertype" <$$> _choptoTOPinputfiltertype]
    , ["npasses" <$$> _choptoTOPnpasses]
    , ["outputresolution" <$$> _choptoTOPoutputresolution]
    , ["fillmode" <$$> _choptoTOPfillmode]
    , ["resolutionh" <$$> _choptoTOPresolutionh]
    , ["clamp" <$$> _choptoTOPclamp]
    , ["armenu" <$$> _choptoTOParmenu]
    , ["filtertype" <$$> _choptoTOPfiltertype]
    , ["aspect1" <$$> _choptoTOPaspect1]
    , [("chop",) . ResolveP <$> _choptoTOPchop]
    , ["resolutionw" <$$> _choptoTOPresolutionw]
    , ["outputaspect" <$$> _choptoTOPoutputaspect]]
  pars (OpenvrTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _openvrTOPresmult]
    , ["aspect2" <$$> _openvrTOPaspect2]
    , ["format" <$$> _openvrTOPformat]
    , ["active" <$$> _openvrTOPactive]
    , ["resmenu" <$$> _openvrTOPresmenu]
    , ["npasses" <$$> _openvrTOPnpasses]
    , ["inputfiltertype" <$$> _openvrTOPinputfiltertype]
    , ["chanmask" <$$> _openvrTOPchanmask]
    , ["outputresolution" <$$> _openvrTOPoutputresolution]
    , ["fillmode" <$$> _openvrTOPfillmode]
    , ["resolutionw" <$$> _openvrTOPresolutionw]
    , ["armenu" <$$> _openvrTOParmenu]
    , ["filtertype" <$$> _openvrTOPfiltertype]
    , ["aspect1" <$$> _openvrTOPaspect1]
    , ["resolutionh" <$$> _openvrTOPresolutionh]
    , ["outputaspect" <$$> _openvrTOPoutputaspect]]
  pars (ChannelmixTOP {..}) = catMaybes . mconcat $ [ ["red3" <$$> _channelmixTOPred3]
    , ["aspect2" <$$> _channelmixTOPaspect2]
    , ["format" <$$> _channelmixTOPformat]
    , ["blue2" <$$> _channelmixTOPblue2]
    , ["alpha4" <$$> _channelmixTOPalpha4]
    , ["inputfiltertype" <$$> _channelmixTOPinputfiltertype]
    , ["aspect1" <$$> _channelmixTOPaspect1]
    , ["outputresolution" <$$> _channelmixTOPoutputresolution]
    , ["resmult" <$$> _channelmixTOPresmult]
    , ["alpha3" <$$> _channelmixTOPalpha3]
    , ["resolutionw" <$$> _channelmixTOPresolutionw]
    , ["green2" <$$> _channelmixTOPgreen2]
    , ["constant2" <$$> _channelmixTOPconstant2]
    , ["green1" <$$> _channelmixTOPgreen1]
    , ["armenu" <$$> _channelmixTOParmenu]
    , ["constant1" <$$> _channelmixTOPconstant1]
    , ["constant3" <$$> _channelmixTOPconstant3]
    , ["red4" <$$> _channelmixTOPred4]
    , ["green3" <$$> _channelmixTOPgreen3]
    , ["resolutionh" <$$> _channelmixTOPresolutionh]
    , ["chanmask" <$$> _channelmixTOPchanmask]
    , ["alpha1" <$$> _channelmixTOPalpha1]
    , ["blue1" <$$> _channelmixTOPblue1]
    , ["alpha2" <$$> _channelmixTOPalpha2]
    , ["resmenu" <$$> _channelmixTOPresmenu]
    , ["constant4" <$$> _channelmixTOPconstant4]
    , ["fillmode" <$$> _channelmixTOPfillmode]
    , ["blue3" <$$> _channelmixTOPblue3]
    , ["green4" <$$> _channelmixTOPgreen4]
    , ["npasses" <$$> _channelmixTOPnpasses]
    , ["red2" <$$> _channelmixTOPred2]
    , ["red1" <$$> _channelmixTOPred1]
    , ["blue4" <$$> _channelmixTOPblue4]
    , ["outputaspect" <$$> _channelmixTOPoutputaspect]
    , ["filtertype" <$$> _channelmixTOPfiltertype]]
  pars (NoiseTOP {..}) = catMaybes . mconcat $ [ ["outputaspect" <$$> _noiseTOPoutputaspect]
    , ["rough" <$$> _noiseTOPrough]
    , ["aspect2" <$$> _noiseTOPaspect2]
    , ["format" <$$> _noiseTOPformat]
    , ["inputscale" <$$> _noiseTOPinputscale]
    , ["harmon" <$$> _noiseTOPharmon]
    , ["offset" <$$> _noiseTOPoffset]
    , ["alpha" <$$> _noiseTOPalpha]
    , ["resmenu" <$$> _noiseTOPresmenu]
    , ["outputresolution" <$$> _noiseTOPoutputresolution]
    , ["aspect1" <$$> _noiseTOPaspect1]
    , ["resolutionw" <$$> _noiseTOPresolutionw]
    , ["armenu" <$$> _noiseTOParmenu]
    , ["filtertype" <$$> _noiseTOPfiltertype]
    , ["rgb" <$$> _noiseTOPrgb]
    , ["xord" <$$> _noiseTOPxord]
    , ["chanmask" <$$> _noiseTOPchanmask]
    , Just <$> vec3Map' "r" _noiseTOPr
    , ["aspectcorrect" <$$> _noiseTOPaspectcorrect]
    , ["resmult" <$$> _noiseTOPresmult]
    , ["gain" <$$> _noiseTOPgain]
    , ["type" <$$> _noiseTOPtype]
    , ["noisescale" <$$> _noiseTOPnoisescale]
    , Just <$> vec3Map' "s" _noiseTOPs
    , ["period" <$$> _noiseTOPperiod]
    , ["t4d" <$$> _noiseTOPt4d]
    , Just <$> vec3Map' "p" _noiseTOPp
    , ["fillmode" <$$> _noiseTOPfillmode]
    , ["dither" <$$> _noiseTOPdither]
    , ["spread" <$$> _noiseTOPspread]
    , ["resolutionh" <$$> _noiseTOPresolutionh]
    , ["s4d" <$$> _noiseTOPs4d]
    , ["seed" <$$> _noiseTOPseed]
    , ["npasses" <$$> _noiseTOPnpasses]
    , ["rord" <$$> _noiseTOPrord]
    , ["inputfiltertype" <$$> _noiseTOPinputfiltertype]
    , ["amp" <$$> _noiseTOPamp]
    , Just <$> vec3Map' "t" _noiseTOPt
    , ["exp" <$$> _noiseTOPexp]
    , ["mono" <$$> _noiseTOPmono]]
  pars (OculusriftTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _oculusriftTOPresmult]
    , ["aspect2" <$$> _oculusriftTOPaspect2]
    , ["format" <$$> _oculusriftTOPformat]
    , ["active" <$$> _oculusriftTOPactive]
    , ["resmenu" <$$> _oculusriftTOPresmenu]
    , ["npasses" <$$> _oculusriftTOPnpasses]
    , ["inputfiltertype" <$$> _oculusriftTOPinputfiltertype]
    , ["chanmask" <$$> _oculusriftTOPchanmask]
    , ["outputresolution" <$$> _oculusriftTOPoutputresolution]
    , ["fillmode" <$$> _oculusriftTOPfillmode]
    , ["debugperfhud" <$$> _oculusriftTOPdebugperfhud]
    , ["resolutionw" <$$> _oculusriftTOPresolutionw]
    , ["armenu" <$$> _oculusriftTOParmenu]
    , ["filtertype" <$$> _oculusriftTOPfiltertype]
    , ["aspect1" <$$> _oculusriftTOPaspect1]
    , ["resolutionh" <$$> _oculusriftTOPresolutionh]
    , ["outputaspect" <$$> _oculusriftTOPoutputaspect]]
  pars (TransformTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _transformTOPaspect2]
    , ["format" <$$> _transformTOPformat]
    , ["extend" <$$> _transformTOPextend]
    , ["chanmask" <$$> _transformTOPchanmask]
    , ["outputresolution" <$$> _transformTOPoutputresolution]
    , ["fillmode" <$$> _transformTOPfillmode]
    , Just <$> vec2Map' "growshrink" _transformTOPgrowshrink
    , ["resolutionw" <$$> _transformTOPresolutionw]
    , ["mipmapbias" <$$> _transformTOPmipmapbias]
    , ["armenu" <$$> _transformTOParmenu]
    , ["limittiles" <$$> _transformTOPlimittiles]
    , ["tileu2" <$$> _transformTOPtileu2]
    , ["tileu1" <$$> _transformTOPtileu1]
    , Just <$> rgbaMap "bgcolor" _transformTOPbgcolor
    , ["rotate" <$$> _transformTOProtate]
    , ["xord" <$$> _transformTOPxord]
    , ["inputfiltertype" <$$> _transformTOPinputfiltertype]
    , ["resmult" <$$> _transformTOPresmult]
    , ["punit" <$$> _transformTOPpunit]
    , Just <$> vec2Map' "s" _transformTOPs
    , ["resmenu" <$$> _transformTOPresmenu]
    , Just <$> vec2Map' "p" _transformTOPp
    , ["tilev2" <$$> _transformTOPtilev2]
    , ["resolutionh" <$$> _transformTOPresolutionh]
    , ["tunit" <$$> _transformTOPtunit]
    , ["compover" <$$> _transformTOPcompover]
    , ["npasses" <$$> _transformTOPnpasses]
    , ["aspect1" <$$> _transformTOPaspect1]
    , Just <$> vec2Map' "t" _transformTOPt
    , ["tilev1" <$$> _transformTOPtilev1]
    , ["outputaspect" <$$> _transformTOPoutputaspect]
    , ["filtertype" <$$> _transformTOPfiltertype]]
  pars (MathTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _mathTOPaspect2]
    , ["format" <$$> _mathTOPformat]
    , ["postoff" <$$> _mathTOPpostoff]
    , ["inputfiltertype" <$$> _mathTOPinputfiltertype]
    , ["chanmask" <$$> _mathTOPchanmask]
    , ["outputresolution" <$$> _mathTOPoutputresolution]
    , ["fillmode" <$$> _mathTOPfillmode]
    , ["resolutionw" <$$> _mathTOPresolutionw]
    , ["armenu" <$$> _mathTOParmenu]
    , ["filtertype" <$$> _mathTOPfiltertype]
    , ["fromrange1" <$$> _mathTOPfromrange1]
    , ["integer" <$$> _mathTOPinteger]
    , ["resmult" <$$> _mathTOPresmult]
    , ["gain" <$$> _mathTOPgain]
    , ["inputmask" <$$> _mathTOPinputmask]
    , ["resmenu" <$$> _mathTOPresmenu]
    , ["torange1" <$$> _mathTOPtorange1]
    , ["fromrange2" <$$> _mathTOPfromrange2]
    , ["postop" <$$> _mathTOPpostop]
    , ["outputchannels" <$$> _mathTOPoutputchannels]
    , ["chanop" <$$> _mathTOPchanop]
    , ["resolutionh" <$$> _mathTOPresolutionh]
    , ["npasses" <$$> _mathTOPnpasses]
    , ["preop" <$$> _mathTOPpreop]
    , ["preoff" <$$> _mathTOPpreoff]
    , ["aspect1" <$$> _mathTOPaspect1]
    , ["op" <$$> _mathTOPop]
    , ["outputaspect" <$$> _mathTOPoutputaspect]
    , ["torange2" <$$> _mathTOPtorange2]]
  pars (DirectxoutTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _directxoutTOPresmult]
    , ["queuesize" <$$> _directxoutTOPqueuesize]
    , ["format" <$$> _directxoutTOPformat]
    , ["active" <$$> _directxoutTOPactive]
    , ["resmenu" <$$> _directxoutTOPresmenu]
    , ["npasses" <$$> _directxoutTOPnpasses]
    , ["inputfiltertype" <$$> _directxoutTOPinputfiltertype]
    , ["chanmask" <$$> _directxoutTOPchanmask]
    , ["outputresolution" <$$> _directxoutTOPoutputresolution]
    , ["fillmode" <$$> _directxoutTOPfillmode]
    , ["resolutionw" <$$> _directxoutTOPresolutionw]
    , ["armenu" <$$> _directxoutTOParmenu]
    , ["filtertype" <$$> _directxoutTOPfiltertype]
    , ["aspect1" <$$> _directxoutTOPaspect1]
    , ["aspect2" <$$> _directxoutTOPaspect2]
    , ["resolutionh" <$$> _directxoutTOPresolutionh]
    , ["outputaspect" <$$> _directxoutTOPoutputaspect]]
  pars (ChromakeyTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _chromakeyTOPaspect2]
    , ["format" <$$> _chromakeyTOPformat]
    , ["rgbout" <$$> _chromakeyTOPrgbout]
    , ["huemax" <$$> _chromakeyTOPhuemax]
    , ["aspect1" <$$> _chromakeyTOPaspect1]
    , ["outputresolution" <$$> _chromakeyTOPoutputresolution]
    , ["fillmode" <$$> _chromakeyTOPfillmode]
    , ["resolutionw" <$$> _chromakeyTOPresolutionw]
    , ["valmin" <$$> _chromakeyTOPvalmin]
    , ["armenu" <$$> _chromakeyTOParmenu]
    , ["filtertype" <$$> _chromakeyTOPfiltertype]
    , ["alphaout" <$$> _chromakeyTOPalphaout]
    , ["invert" <$$> _chromakeyTOPinvert]
    , ["resolutionh" <$$> _chromakeyTOPresolutionh]
    , ["ssofthigh" <$$> _chromakeyTOPssofthigh]
    , ["inputfiltertype" <$$> _chromakeyTOPinputfiltertype]
    , ["huemin" <$$> _chromakeyTOPhuemin]
    , ["resmult" <$$> _chromakeyTOPresmult]
    , ["ssoftlow" <$$> _chromakeyTOPssoftlow]
    , ["resmenu" <$$> _chromakeyTOPresmenu]
    , ["chanmask" <$$> _chromakeyTOPchanmask]
    , ["hsofthigh" <$$> _chromakeyTOPhsofthigh]
    , ["satmax" <$$> _chromakeyTOPsatmax]
    , ["vsofthigh" <$$> _chromakeyTOPvsofthigh]
    , ["satmin" <$$> _chromakeyTOPsatmin]
    , ["valmax" <$$> _chromakeyTOPvalmax]
    , ["npasses" <$$> _chromakeyTOPnpasses]
    , ["vsoftlow" <$$> _chromakeyTOPvsoftlow]
    , ["outputaspect" <$$> _chromakeyTOPoutputaspect]
    , ["hsoftlow" <$$> _chromakeyTOPhsoftlow]]
  pars (VideodeviceinTOP {..}) = catMaybes . mconcat $ [ ["lgamma" <$$> _videodeviceinTOPlgamma]
    , ["aspect2" <$$> _videodeviceinTOPaspect2]
    , ["format" <$$> _videodeviceinTOPformat]
    , ["exposure" <$$> _videodeviceinTOPexposure]
    , ["inputfiltertype" <$$> _videodeviceinTOPinputfiltertype]
    , ["fillmode" <$$> _videodeviceinTOPfillmode]
    , ["resolutionw" <$$> _videodeviceinTOPresolutionw]
    , ["precedence" <$$> _videodeviceinTOPprecedence]
    , ["armenu" <$$> _videodeviceinTOParmenu]
    , ["inputpixelformat" <$$> _videodeviceinTOPinputpixelformat]
    , ["filtertype" <$$> _videodeviceinTOPfiltertype]
    , ["autogebias" <$$> _videodeviceinTOPautogebias]
    , ["active" <$$> _videodeviceinTOPactive]
    , ["gain" <$$> _videodeviceinTOPgain]
    , ["cgamma" <$$> _videodeviceinTOPcgamma]
    , ["library" <$$> _videodeviceinTOPlibrary]
    , ["resmenu" <$$> _videodeviceinTOPresmenu]
    , ["channel" <$$> _videodeviceinTOPchannel]
    , ["resolutionh" <$$> _videodeviceinTOPresolutionh]
    , ["npasses" <$$> _videodeviceinTOPnpasses]
    , ["aspect1" <$$> _videodeviceinTOPaspect1]
    , ["limitedfps" <$$> _videodeviceinTOPlimitedfps]
    , ["outputaspect" <$$> _videodeviceinTOPoutputaspect]
    , ["maxsyncoffset" <$$> _videodeviceinTOPmaxsyncoffset]
    , ["transfermode" <$$> _videodeviceinTOPtransfermode]
    , ["options" <$$> _videodeviceinTOPoptions]
    , ["synctimeout" <$$> _videodeviceinTOPsynctimeout]
    , ["specifyip" <$$> _videodeviceinTOPspecifyip]
    , ["outputresolution" <$$> _videodeviceinTOPoutputresolution]
    , ["syncgroupindex" <$$> _videodeviceinTOPsyncgroupindex]
    , ["quadlink" <$$> _videodeviceinTOPquadlink]
    , ["limitfps" <$$> _videodeviceinTOPlimitfps]
    , ["autowb" <$$> _videodeviceinTOPautowb]
    , ["ip" <$$> _videodeviceinTOPip]
    , ["autoge" <$$> _videodeviceinTOPautoge]
    , ["resmult" <$$> _videodeviceinTOPresmult]
    , ["signalformat" <$$> _videodeviceinTOPsignalformat]
    , Just <$> rgbMap "wbcoeffs" _videodeviceinTOPwbcoeffs
    , ["capture" <$$> _videodeviceinTOPcapture]
    , ["device" <$$> _videodeviceinTOPdevice]
    , ["chanmask" <$$> _videodeviceinTOPchanmask]
    , ["deinterlace" <$$> _videodeviceinTOPdeinterlace]
    , ["capturepulse" <$$> _videodeviceinTOPcapturepulse]
    , ["syncinputs" <$$> _videodeviceinTOPsyncinputs]]
  pars (NdioutTOP {..}) = catMaybes . mconcat $ [ ["armenu" <$$> _ndioutTOParmenu]
    , ["resmult" <$$> _ndioutTOPresmult]
    , ["aspect2" <$$> _ndioutTOPaspect2]
    , ["format" <$$> _ndioutTOPformat]
    , ["active" <$$> _ndioutTOPactive]
    , ["resmenu" <$$> _ndioutTOPresmenu]
    , ["npasses" <$$> _ndioutTOPnpasses]
    , ["chanmask" <$$> _ndioutTOPchanmask]
    , ["inputfiltertype" <$$> _ndioutTOPinputfiltertype]
    , ["fps" <$$> _ndioutTOPfps]
    , ["outputresolution" <$$> _ndioutTOPoutputresolution]
    , ["fillmode" <$$> _ndioutTOPfillmode]
    , ["name" <$$> _ndioutTOPname]
    , ["resolutionh" <$$> _ndioutTOPresolutionh]
    , ["includealpha" <$$> _ndioutTOPincludealpha]
    , ["failovername" <$$> _ndioutTOPfailovername]
    , ["filtertype" <$$> _ndioutTOPfiltertype]
    , ["aspect1" <$$> _ndioutTOPaspect1]
    , [("grouptable",) . ResolveP <$> _ndioutTOPgrouptable]
    , ["resolutionw" <$$> _ndioutTOPresolutionw]
    , ["outputaspect" <$$> _ndioutTOPoutputaspect]]
  pars (SvgTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _svgTOPaspect2]
    , ["format" <$$> _svgTOPformat]
    , ["file" <$$> _svgTOPfile]
    , ["inputfiltertype" <$$> _svgTOPinputfiltertype]
    , ["rord" <$$> _svgTOPrord]
    , ["outputresolution" <$$> _svgTOPoutputresolution]
    , ["fillmode" <$$> _svgTOPfillmode]
    , ["resolutionw" <$$> _svgTOPresolutionw]
    , ["armenu" <$$> _svgTOParmenu]
    , ["filtertype" <$$> _svgTOPfiltertype]
    , Just <$> rgbMap "bgcolor" _svgTOPbgcolor
    , ["antialias" <$$> _svgTOPantialias]
    , ["xord" <$$> _svgTOPxord]
    , ["chanmask" <$$> _svgTOPchanmask]
    , Just <$> vec3Map' "r" _svgTOPr
    , ["resmult" <$$> _svgTOPresmult]
    , ["punit" <$$> _svgTOPpunit]
    , ["resmenu" <$$> _svgTOPresmenu]
    , Just <$> vec2Map' "s" _svgTOPs
    , ["bgalpha" <$$> _svgTOPbgalpha]
    , Just <$> vec2Map' "p" _svgTOPp
    , ["resolutionh" <$$> _svgTOPresolutionh]
    , ["tunit" <$$> _svgTOPtunit]
    , ["npasses" <$$> _svgTOPnpasses]
    , ["aspect1" <$$> _svgTOPaspect1]
    , Just <$> vec2Map' "t" _svgTOPt
    , [("dat",) . ResolveP <$> _svgTOPdat]
    , ["outputaspect" <$$> _svgTOPoutputaspect]
    , ["reload" <$$> _svgTOPreload]]
  pars (LeapmotionTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _leapmotionTOPresmult]
    , ["aspect2" <$$> _leapmotionTOPaspect2]
    , ["format" <$$> _leapmotionTOPformat]
    , ["active" <$$> _leapmotionTOPactive]
    , ["resmenu" <$$> _leapmotionTOPresmenu]
    , ["npasses" <$$> _leapmotionTOPnpasses]
    , ["hmd" <$$> _leapmotionTOPhmd]
    , ["inputfiltertype" <$$> _leapmotionTOPinputfiltertype]
    , ["chanmask" <$$> _leapmotionTOPchanmask]
    , ["outputresolution" <$$> _leapmotionTOPoutputresolution]
    , ["fillmode" <$$> _leapmotionTOPfillmode]
    , ["resolutionh" <$$> _leapmotionTOPresolutionh]
    , ["armenu" <$$> _leapmotionTOParmenu]
    , ["filtertype" <$$> _leapmotionTOPfiltertype]
    , ["correction" <$$> _leapmotionTOPcorrection]
    , ["aspect1" <$$> _leapmotionTOPaspect1]
    , ["flipy" <$$> _leapmotionTOPflipy]
    , ["flipx" <$$> _leapmotionTOPflipx]
    , ["camera" <$$> _leapmotionTOPcamera]
    , ["resolutionw" <$$> _leapmotionTOPresolutionw]
    , ["outputaspect" <$$> _leapmotionTOPoutputaspect]]
  pars (TouchoutTOP {..}) = catMaybes . mconcat $ [ ["armenu" <$$> _touchoutTOParmenu]
    , ["resmult" <$$> _touchoutTOPresmult]
    , ["alwayscook" <$$> _touchoutTOPalwayscook]
    , ["format" <$$> _touchoutTOPformat]
    , ["active" <$$> _touchoutTOPactive]
    , ["resmenu" <$$> _touchoutTOPresmenu]
    , ["npasses" <$$> _touchoutTOPnpasses]
    , ["resolutionw" <$$> _touchoutTOPresolutionw]
    , ["inputfiltertype" <$$> _touchoutTOPinputfiltertype]
    , ["fps" <$$> _touchoutTOPfps]
    , ["outputresolution" <$$> _touchoutTOPoutputresolution]
    , ["fillmode" <$$> _touchoutTOPfillmode]
    , ["resolutionh" <$$> _touchoutTOPresolutionh]
    , ["chanmask" <$$> _touchoutTOPchanmask]
    , ["aspect2" <$$> _touchoutTOPaspect2]
    , ["filtertype" <$$> _touchoutTOPfiltertype]
    , ["aspect1" <$$> _touchoutTOPaspect1]
    , ["videocodec" <$$> _touchoutTOPvideocodec]
    , ["port" <$$> _touchoutTOPport]
    , ["outputaspect" <$$> _touchoutTOPoutputaspect]]
  pars (SyphonspoutinTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _syphonspoutinTOPresmult]
    , ["aspect2" <$$> _syphonspoutinTOPaspect2]
    , ["format" <$$> _syphonspoutinTOPformat]
    , ["resmenu" <$$> _syphonspoutinTOPresmenu]
    , ["npasses" <$$> _syphonspoutinTOPnpasses]
    , ["inputfiltertype" <$$> _syphonspoutinTOPinputfiltertype]
    , ["chanmask" <$$> _syphonspoutinTOPchanmask]
    , ["outputresolution" <$$> _syphonspoutinTOPoutputresolution]
    , ["fillmode" <$$> _syphonspoutinTOPfillmode]
    , ["resolutionw" <$$> _syphonspoutinTOPresolutionw]
    , ["usespoutactivesender" <$$> _syphonspoutinTOPusespoutactivesender]
    , ["armenu" <$$> _syphonspoutinTOParmenu]
    , ["sendername" <$$> _syphonspoutinTOPsendername]
    , ["aspect1" <$$> _syphonspoutinTOPaspect1]
    , ["resolutionh" <$$> _syphonspoutinTOPresolutionh]
    , ["outputaspect" <$$> _syphonspoutinTOPoutputaspect]
    , ["filtertype" <$$> _syphonspoutinTOPfiltertype]]
  pars (VideostreamoutTOP {..}) = catMaybes . mconcat $ [ ["quality" <$$> _videostreamoutTOPquality]
    , ["aspect2" <$$> _videostreamoutTOPaspect2]
    , ["format" <$$> _videostreamoutTOPformat]
    , ["active" <$$> _videostreamoutTOPactive]
    , ["inputfiltertype" <$$> _videostreamoutTOPinputfiltertype]
    , ["fps" <$$> _videostreamoutTOPfps]
    , ["outputresolution" <$$> _videostreamoutTOPoutputresolution]
    , [("audiochop",) . ResolveP <$> _videostreamoutTOPaudiochop]
    , ["resolutionw" <$$> _videostreamoutTOPresolutionw]
    , ["profile" <$$> _videostreamoutTOPprofile]
    , ["armenu" <$$> _videostreamoutTOParmenu]
    , ["filtertype" <$$> _videostreamoutTOPfiltertype]
    , ["port" <$$> _videostreamoutTOPport]
    , ["streamname" <$$> _videostreamoutTOPstreamname]
    , ["resmult" <$$> _videostreamoutTOPresmult]
    , ["bitrate" <$$> _videostreamoutTOPbitrate]
    , ["resmenu" <$$> _videostreamoutTOPresmenu]
    , ["chanmask" <$$> _videostreamoutTOPchanmask]
    , ["forceidr" <$$> _videostreamoutTOPforceidr]
    , ["fillmode" <$$> _videostreamoutTOPfillmode]
    , ["numslices" <$$> _videostreamoutTOPnumslices]
    , ["resolutionh" <$$> _videostreamoutTOPresolutionh]
    , ["npasses" <$$> _videostreamoutTOPnpasses]
    , ["aspect1" <$$> _videostreamoutTOPaspect1]
    , ["multicast" <$$> _videostreamoutTOPmulticast]
    , ["outputaspect" <$$> _videostreamoutTOPoutputaspect]]
  pars (ScalabledisplayTOP {..}) = catMaybes . mconcat $ [ ["near" <$$> _scalabledisplayTOPnear]
    , ["resmult" <$$> _scalabledisplayTOPresmult]
    , ["aspect2" <$$> _scalabledisplayTOPaspect2]
    , ["format" <$$> _scalabledisplayTOPformat]
    , ["resmenu" <$$> _scalabledisplayTOPresmenu]
    , ["npasses" <$$> _scalabledisplayTOPnpasses]
    , ["chanmask" <$$> _scalabledisplayTOPchanmask]
    , ["inputfiltertype" <$$> _scalabledisplayTOPinputfiltertype]
    , ["far" <$$> _scalabledisplayTOPfar]
    , ["outputresolution" <$$> _scalabledisplayTOPoutputresolution]
    , ["fillmode" <$$> _scalabledisplayTOPfillmode]
    , ["resolutionh" <$$> _scalabledisplayTOPresolutionh]
    , ["armenu" <$$> _scalabledisplayTOParmenu]
    , ["configfile" <$$> _scalabledisplayTOPconfigfile]
    , ["aspect1" <$$> _scalabledisplayTOPaspect1]
    , ["resolutionw" <$$> _scalabledisplayTOPresolutionw]
    , ["outputaspect" <$$> _scalabledisplayTOPoutputaspect]
    , ["filtertype" <$$> _scalabledisplayTOPfiltertype]]
  pars (OutsideTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _outsideTOPaspect2]
    , ["format" <$$> _outsideTOPformat]
    , ["extend" <$$> _outsideTOPextend]
    , ["chanmask" <$$> _outsideTOPchanmask]
    , ["outputresolution" <$$> _outsideTOPoutputresolution]
    , ["fillmode" <$$> _outsideTOPfillmode]
    , ["resolutionw" <$$> _outsideTOPresolutionw]
    , ["armenu" <$$> _outsideTOParmenu]
    , ["filtertype" <$$> _outsideTOPfiltertype]
    , ["inputfiltertype" <$$> _outsideTOPinputfiltertype]
    , ["resmult" <$$> _outsideTOPresmult]
    , ["punit" <$$> _outsideTOPpunit]
    , Just <$> vec2Map' "s" _outsideTOPs
    , ["resmenu" <$$> _outsideTOPresmenu]
    , Just <$> vec2Map' "p" _outsideTOPp
    , ["size" <$$> _outsideTOPsize]
    , ["npasses" <$$> _outsideTOPnpasses]
    , ["outputaspect" <$$> _outsideTOPoutputaspect]
    , ["resolutionh" <$$> _outsideTOPresolutionh]
    , ["tunit" <$$> _outsideTOPtunit]
    , ["prefit" <$$> _outsideTOPprefit]
    , ["r" <$$> _outsideTOPr]
    , ["aspect1" <$$> _outsideTOPaspect1]
    , ["justifyh" <$$> _outsideTOPjustifyh]
    , Just <$> vec2Map' "t" _outsideTOPt
    , ["justifyv" <$$> _outsideTOPjustifyv]]
  pars (ResolutionTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _resolutionTOPresmult]
    , ["aspect2" <$$> _resolutionTOPaspect2]
    , ["format" <$$> _resolutionTOPformat]
    , ["resmenu" <$$> _resolutionTOPresmenu]
    , ["npasses" <$$> _resolutionTOPnpasses]
    , ["resolutionw" <$$> _resolutionTOPresolutionw]
    , ["inputfiltertype" <$$> _resolutionTOPinputfiltertype]
    , ["chanmask" <$$> _resolutionTOPchanmask]
    , ["outputresolution" <$$> _resolutionTOPoutputresolution]
    , ["fillmode" <$$> _resolutionTOPfillmode]
    , ["highqualresize" <$$> _resolutionTOPhighqualresize]
    , ["armenu" <$$> _resolutionTOParmenu]
    , ["filtertype" <$$> _resolutionTOPfiltertype]
    , ["aspect1" <$$> _resolutionTOPaspect1]
    , ["resolutionh" <$$> _resolutionTOPresolutionh]
    , ["outputaspect" <$$> _resolutionTOPoutputaspect]]
  pars (DifferenceTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _differenceTOPaspect2]
    , ["format" <$$> _differenceTOPformat]
    , ["extend" <$$> _differenceTOPextend]
    , ["chanmask" <$$> _differenceTOPchanmask]
    , ["outputresolution" <$$> _differenceTOPoutputresolution]
    , ["fillmode" <$$> _differenceTOPfillmode]
    , ["resolutionw" <$$> _differenceTOPresolutionw]
    , ["armenu" <$$> _differenceTOParmenu]
    , ["filtertype" <$$> _differenceTOPfiltertype]
    , ["inputfiltertype" <$$> _differenceTOPinputfiltertype]
    , ["resmult" <$$> _differenceTOPresmult]
    , ["punit" <$$> _differenceTOPpunit]
    , Just <$> vec2Map' "s" _differenceTOPs
    , ["resmenu" <$$> _differenceTOPresmenu]
    , Just <$> vec2Map' "p" _differenceTOPp
    , ["size" <$$> _differenceTOPsize]
    , ["npasses" <$$> _differenceTOPnpasses]
    , ["outputaspect" <$$> _differenceTOPoutputaspect]
    , ["resolutionh" <$$> _differenceTOPresolutionh]
    , ["tunit" <$$> _differenceTOPtunit]
    , ["prefit" <$$> _differenceTOPprefit]
    , ["r" <$$> _differenceTOPr]
    , ["aspect1" <$$> _differenceTOPaspect1]
    , ["justifyh" <$$> _differenceTOPjustifyh]
    , Just <$> vec2Map' "t" _differenceTOPt
    , ["justifyv" <$$> _differenceTOPjustifyv]]
  pars (LevelTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _levelTOPaspect2]
    , ["brightness1" <$$> _levelTOPbrightness1]
    , ["clamphigh" <$$> _levelTOPclamphigh]
    , ["inputfiltertype" <$$> _levelTOPinputfiltertype]
    , ["clamplow2" <$$> _levelTOPclamplow2]
    , ["fillmode" <$$> _levelTOPfillmode]
    , ["resolutionw" <$$> _levelTOPresolutionw]
    , ["clamp" <$$> _levelTOPclamp]
    , ["armenu" <$$> _levelTOParmenu]
    , ["filtertype" <$$> _levelTOPfiltertype]
    , ["clampinput" <$$> _levelTOPclampinput]
    , ["format" <$$> _levelTOPformat]
    , ["highr" <$$> _levelTOPhighr]
    , ["lowa" <$$> _levelTOPlowa]
    , ["resmenu" <$$> _levelTOPresmenu]
    , ["chanmask" <$$> _levelTOPchanmask]
    , ["gamma1" <$$> _levelTOPgamma1]
    , ["highb" <$$> _levelTOPhighb]
    , ["soften" <$$> _levelTOPsoften]
    , ["threshold" <$$> _levelTOPthreshold]
    , ["resolutionh" <$$> _levelTOPresolutionh]
    , ["lowb" <$$> _levelTOPlowb]
    , ["brightness2" <$$> _levelTOPbrightness2]
    , ["stepsize" <$$> _levelTOPstepsize]
    , ["clamplow" <$$> _levelTOPclamplow]
    , ["inlow" <$$> _levelTOPinlow]
    , ["outputaspect" <$$> _levelTOPoutputaspect]
    , ["lowg" <$$> _levelTOPlowg]
    , ["outlow" <$$> _levelTOPoutlow]
    , ["blacklevel" <$$> _levelTOPblacklevel]
    , ["outhigh" <$$> _levelTOPouthigh]
    , ["contrast" <$$> _levelTOPcontrast]
    , ["aspect1" <$$> _levelTOPaspect1]
    , ["outputresolution" <$$> _levelTOPoutputresolution]
    , ["opacity" <$$> _levelTOPopacity]
    , ["gamma2" <$$> _levelTOPgamma2]
    , ["invert" <$$> _levelTOPinvert]
    , ["inhigh" <$$> _levelTOPinhigh]
    , ["resmult" <$$> _levelTOPresmult]
    , ["stepping" <$$> _levelTOPstepping]
    , ["clamphigh2" <$$> _levelTOPclamphigh2]
    , ["highg" <$$> _levelTOPhighg]
    , ["npasses" <$$> _levelTOPnpasses]
    , ["higha" <$$> _levelTOPhigha]
    , ["lowr" <$$> _levelTOPlowr]]
  pars (RectangleTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _rectangleTOPaspect2]
    , ["format" <$$> _rectangleTOPformat]
    , ["cornerradius" <$$> _rectangleTOPcornerradius]
    , ["softnessunit" <$$> _rectangleTOPsoftnessunit]
    , ["inputfiltertype" <$$> _rectangleTOPinputfiltertype]
    , ["chanmask" <$$> _rectangleTOPchanmask]
    , ["outputresolution" <$$> _rectangleTOPoutputresolution]
    , ["borderoffset" <$$> _rectangleTOPborderoffset]
    , Just <$> rgbMap "fillcolor" _rectangleTOPfillcolor
    , ["antialias" <$$> _rectangleTOPantialias]
    , ["armenu" <$$> _rectangleTOParmenu]
    , ["filtertype" <$$> _rectangleTOPfiltertype]
    , ["borderwidth" <$$> _rectangleTOPborderwidth]
    , ["fillalpha" <$$> _rectangleTOPfillalpha]
    , Just <$> rgbMap "bgcolor" _rectangleTOPbgcolor
    , ["resolutionw" <$$> _rectangleTOPresolutionw]
    , ["centerunit" <$$> _rectangleTOPcenterunit]
    , ["resmult" <$$> _rectangleTOPresmult]
    , ["resmenu" <$$> _rectangleTOPresmenu]
    , ["multrgbbyalpha" <$$> _rectangleTOPmultrgbbyalpha]
    , Just <$> vec2Map' "size" _rectangleTOPsize
    , Just <$> rgbMap "border" _rectangleTOPborder
    , ["bgalpha" <$$> _rectangleTOPbgalpha]
    , ["fillmode" <$$> _rectangleTOPfillmode]
    , ["resolutionh" <$$> _rectangleTOPresolutionh]
    , ["rotate" <$$> _rectangleTOProtate]
    , Just <$> vec2Map' "center" _rectangleTOPcenter
    , ["softness" <$$> _rectangleTOPsoftness]
    , ["borderalpha" <$$> _rectangleTOPborderalpha]
    , ["npasses" <$$> _rectangleTOPnpasses]
    , ["sizeunit" <$$> _rectangleTOPsizeunit]
    , ["aspect1" <$$> _rectangleTOPaspect1]
    , ["cornerradiusunit" <$$> _rectangleTOPcornerradiusunit]
    , ["borderwidthunit" <$$> _rectangleTOPborderwidthunit]
    , ["outputaspect" <$$> _rectangleTOPoutputaspect]]
  pars (SharedmeminTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _sharedmeminTOPresmult]
    , ["aspect2" <$$> _sharedmeminTOPaspect2]
    , ["format" <$$> _sharedmeminTOPformat]
    , ["resmenu" <$$> _sharedmeminTOPresmenu]
    , ["npasses" <$$> _sharedmeminTOPnpasses]
    , ["memtype" <$$> _sharedmeminTOPmemtype]
    , ["inputfiltertype" <$$> _sharedmeminTOPinputfiltertype]
    , ["chanmask" <$$> _sharedmeminTOPchanmask]
    , ["outputresolution" <$$> _sharedmeminTOPoutputresolution]
    , ["fillmode" <$$> _sharedmeminTOPfillmode]
    , ["name" <$$> _sharedmeminTOPname]
    , ["resolutionw" <$$> _sharedmeminTOPresolutionw]
    , ["armenu" <$$> _sharedmeminTOParmenu]
    , ["filtertype" <$$> _sharedmeminTOPfiltertype]
    , ["aspect1" <$$> _sharedmeminTOPaspect1]
    , ["resolutionh" <$$> _sharedmeminTOPresolutionh]
    , ["outputaspect" <$$> _sharedmeminTOPoutputaspect]]
  pars (TouchinTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _touchinTOPaspect2]
    , ["format" <$$> _touchinTOPformat]
    , ["active" <$$> _touchinTOPactive]
    , ["outputresolution" <$$> _touchinTOPoutputresolution]
    , ["inputfiltertype" <$$> _touchinTOPinputfiltertype]
    , ["chanmask" <$$> _touchinTOPchanmask]
    , ["address" <$$> _touchinTOPaddress]
    , ["fillmode" <$$> _touchinTOPfillmode]
    , ["resolutionw" <$$> _touchinTOPresolutionw]
    , ["armenu" <$$> _touchinTOParmenu]
    , ["filtertype" <$$> _touchinTOPfiltertype]
    , ["mintarget" <$$> _touchinTOPmintarget]
    , ["maxtarget" <$$> _touchinTOPmaxtarget]
    , ["resmult" <$$> _touchinTOPresmult]
    , ["port" <$$> _touchinTOPport]
    , ["resmenu" <$$> _touchinTOPresmenu]
    , ["resolutionh" <$$> _touchinTOPresolutionh]
    , ["npasses" <$$> _touchinTOPnpasses]
    , ["maxqueue" <$$> _touchinTOPmaxqueue]
    , ["aspect1" <$$> _touchinTOPaspect1]
    , ["targetdelay" <$$> _touchinTOPtargetdelay]
    , ["outputaspect" <$$> _touchinTOPoutputaspect]]
  pars (CubemapTOP {..}) = catMaybes . mconcat $ [ ["mode" <$$> _cubemapTOPmode]
    , ["resmult" <$$> _cubemapTOPresmult]
    , ["aspect2" <$$> _cubemapTOPaspect2]
    , ["format" <$$> _cubemapTOPformat]
    , ["resmenu" <$$> _cubemapTOPresmenu]
    , ["npasses" <$$> _cubemapTOPnpasses]
    , ["inputfiltertype" <$$> _cubemapTOPinputfiltertype]
    , ["chanmask" <$$> _cubemapTOPchanmask]
    , ["outputresolution" <$$> _cubemapTOPoutputresolution]
    , ["fillmode" <$$> _cubemapTOPfillmode]
    , ["resolutionw" <$$> _cubemapTOPresolutionw]
    , ["armenu" <$$> _cubemapTOParmenu]
    , ["filtertype" <$$> _cubemapTOPfiltertype]
    , ["aspect1" <$$> _cubemapTOPaspect1]
    , ["resolutionh" <$$> _cubemapTOPresolutionh]
    , ["outputaspect" <$$> _cubemapTOPoutputaspect]]
  pars (HsvtorgbTOP {..}) = catMaybes . mconcat $ [ ["resmult" <$$> _hsvtorgbTOPresmult]
    , ["aspect2" <$$> _hsvtorgbTOPaspect2]
    , ["format" <$$> _hsvtorgbTOPformat]
    , ["resmenu" <$$> _hsvtorgbTOPresmenu]
    , ["npasses" <$$> _hsvtorgbTOPnpasses]
    , ["inputfiltertype" <$$> _hsvtorgbTOPinputfiltertype]
    , ["chanmask" <$$> _hsvtorgbTOPchanmask]
    , ["outputresolution" <$$> _hsvtorgbTOPoutputresolution]
    , ["fillmode" <$$> _hsvtorgbTOPfillmode]
    , ["resolutionw" <$$> _hsvtorgbTOPresolutionw]
    , ["armenu" <$$> _hsvtorgbTOParmenu]
    , ["filtertype" <$$> _hsvtorgbTOPfiltertype]
    , ["aspect1" <$$> _hsvtorgbTOPaspect1]
    , ["resolutionh" <$$> _hsvtorgbTOPresolutionh]
    , ["outputaspect" <$$> _hsvtorgbTOPoutputaspect]]
  pars (TimemachineTOP {..}) = catMaybes . mconcat $ [ ["armenu" <$$> _timemachineTOParmenu]
    , ["resmult" <$$> _timemachineTOPresmult]
    , ["whiteoffsetunit" <$$> _timemachineTOPwhiteoffsetunit]
    , ["format" <$$> _timemachineTOPformat]
    , ["blackoffsetunit" <$$> _timemachineTOPblackoffsetunit]
    , ["resmenu" <$$> _timemachineTOPresmenu]
    , ["npasses" <$$> _timemachineTOPnpasses]
    , ["fillmode" <$$> _timemachineTOPfillmode]
    , ["inputfiltertype" <$$> _timemachineTOPinputfiltertype]
    , ["chanmask" <$$> _timemachineTOPchanmask]
    , ["outputresolution" <$$> _timemachineTOPoutputresolution]
    , ["whiteoffset" <$$> _timemachineTOPwhiteoffset]
    , ["resolutionh" <$$> _timemachineTOPresolutionh]
    , ["blackoffset" <$$> _timemachineTOPblackoffset]
    , ["aspect2" <$$> _timemachineTOPaspect2]
    , ["filtertype" <$$> _timemachineTOPfiltertype]
    , ["aspect1" <$$> _timemachineTOPaspect1]
    , ["resolutionw" <$$> _timemachineTOPresolutionw]
    , ["outputaspect" <$$> _timemachineTOPoutputaspect]]
  pars (RgbkeyTOP {..}) = catMaybes . mconcat $ [ ["redmin" <$$> _rgbkeyTOPredmin]
    , ["aspect2" <$$> _rgbkeyTOPaspect2]
    , ["format" <$$> _rgbkeyTOPformat]
    , ["greenmin" <$$> _rgbkeyTOPgreenmin]
    , ["rgbout" <$$> _rgbkeyTOPrgbout]
    , ["inputfiltertype" <$$> _rgbkeyTOPinputfiltertype]
    , ["chanmask" <$$> _rgbkeyTOPchanmask]
    , ["outputresolution" <$$> _rgbkeyTOPoutputresolution]
    , ["fillmode" <$$> _rgbkeyTOPfillmode]
    , ["bsoftlow" <$$> _rgbkeyTOPbsoftlow]
    , ["greenmax" <$$> _rgbkeyTOPgreenmax]
    , ["filtertype" <$$> _rgbkeyTOPfiltertype]
    , ["armenu" <$$> _rgbkeyTOParmenu]
    , ["redmax" <$$> _rgbkeyTOPredmax]
    , ["alphaout" <$$> _rgbkeyTOPalphaout]
    , ["invert" <$$> _rgbkeyTOPinvert]
    , ["resolutionw" <$$> _rgbkeyTOPresolutionw]
    , ["bsofthigh" <$$> _rgbkeyTOPbsofthigh]
    , ["resmult" <$$> _rgbkeyTOPresmult]
    , ["gsofthigh" <$$> _rgbkeyTOPgsofthigh]
    , ["resmenu" <$$> _rgbkeyTOPresmenu]
    , ["bluemin" <$$> _rgbkeyTOPbluemin]
    , ["resolutionh" <$$> _rgbkeyTOPresolutionh]
    , ["rsofthigh" <$$> _rgbkeyTOPrsofthigh]
    , ["rsoftlow" <$$> _rgbkeyTOPrsoftlow]
    , ["npasses" <$$> _rgbkeyTOPnpasses]
    , ["aspect1" <$$> _rgbkeyTOPaspect1]
    , ["bluemax" <$$> _rgbkeyTOPbluemax]
    , ["outputaspect" <$$> _rgbkeyTOPoutputaspect]
    , ["gsoftlow" <$$> _rgbkeyTOPgsoftlow]]
  pars (CacheTOP {..}) = catMaybes . mconcat $ [ ["interp" <$$> _cacheTOPinterp]
    , ["resetpulse" <$$> _cacheTOPresetpulse]
    , ["replaceindex" <$$> _cacheTOPreplaceindex]
    , ["replace" <$$> _cacheTOPreplace]
    , ["active" <$$> _cacheTOPactive]
    , ["activepulse" <$$> _cacheTOPactivepulse]
    , ["inputfiltertype" <$$> _cacheTOPinputfiltertype]
    , ["chanmask" <$$> _cacheTOPchanmask]
    , ["outputresolution" <$$> _cacheTOPoutputresolution]
    , ["prefill" <$$> _cacheTOPprefill]
    , ["resolutionw" <$$> _cacheTOPresolutionw]
    , ["alwayscook" <$$> _cacheTOPalwayscook]
    , ["filtertype" <$$> _cacheTOPfiltertype]
    , ["aspect2" <$$> _cacheTOPaspect2]
    , ["format" <$$> _cacheTOPformat]
    , ["replacespulse" <$$> _cacheTOPreplacespulse]
    , ["step" <$$> _cacheTOPstep]
    , ["prefillpulse" <$$> _cacheTOPprefillpulse]
    , ["armenu" <$$> _cacheTOParmenu]
    , ["resmult" <$$> _cacheTOPresmult]
    , ["outputindex" <$$> _cacheTOPoutputindex]
    , ["resmenu" <$$> _cacheTOPresmenu]
    , ["cachesize" <$$> _cacheTOPcachesize]
    , ["fillmode" <$$> _cacheTOPfillmode]
    , ["resolutionh" <$$> _cacheTOPresolutionh]
    , ["cacheonce" <$$> _cacheTOPcacheonce]
    , ["npasses" <$$> _cacheTOPnpasses]
    , ["aspect1" <$$> _cacheTOPaspect1]
    , ["outputaspect" <$$> _cacheTOPoutputaspect]
    , ["reset" <$$> _cacheTOPreset]
    , ["outputindexunit" <$$> _cacheTOPoutputindexunit]]
  pars (RenderpassTOP {..}) = catMaybes . mconcat $ [ ["aspect2" <$$> _renderpassTOPaspect2]
    , ["overdraw" <$$> _renderpassTOPoverdraw]
    , Just <$> vec4Map' "value3" _renderpassTOPvalue3
    , ["fillmode" <$$> _renderpassTOPfillmode]
    , ["cullface" <$$> _renderpassTOPcullface]
    , ["resolutionw" <$$> _renderpassTOPresolutionw]
    , ["armenu" <$$> _renderpassTOParmenu]
    , ["sampler0" <$$> _renderpassTOPsampler0]
    , ["format" <$$> _renderpassTOPformat]
    , ["sampler3" <$$> _renderpassTOPsampler3]
    , ["resmenu" <$$> _renderpassTOPresmenu]
    , ["top1extendv" <$$> _renderpassTOPtop1extendv]
    , ["outputaspect" <$$> _renderpassTOPoutputaspect]
    , ["uniname1" <$$> _renderpassTOPuniname1]
    , ["cropbottom" <$$> _renderpassTOPcropbottom]
    , ["sampler4" <$$> _renderpassTOPsampler4]
    , ["inputfiltertype" <$$> _renderpassTOPinputfiltertype]
    , ["top4filter" <$$> _renderpassTOPtop4filter]
    , [("overridemat",) . ResolveP <$> _renderpassTOPoverridemat]
    , ["orderindtrans" <$$> _renderpassTOPorderindtrans]
    , ["top4extendv" <$$> _renderpassTOPtop4extendv]
    , ["uniname4" <$$> _renderpassTOPuniname4]
    , Just <$> vec4Map' "value2" _renderpassTOPvalue2
    , ["cropbottomunit" <$$> _renderpassTOPcropbottomunit]
    , ["cropleft" <$$> _renderpassTOPcropleft]
    , ["depthpeel" <$$> _renderpassTOPdepthpeel]
    , ["polygonoffsetunits" <$$> _renderpassTOPpolygonoffsetunits]
    , [("top1",) . ResolveP <$> _renderpassTOPtop1]
    , ["top1filter" <$$> _renderpassTOPtop1filter]
    , ["resmult" <$$> _renderpassTOPresmult]
    , ["top2extendw" <$$> _renderpassTOPtop2extendw]
    , ["sampler2" <$$> _renderpassTOPsampler2]
    , ["dither" <$$> _renderpassTOPdither]
    , ["uniname2" <$$> _renderpassTOPuniname2]
    , [("top2",) . ResolveP <$> _renderpassTOPtop2]
    , [("renderinput",) . ResolveP <$> _renderpassTOPrenderinput]
    , ["uniname0" <$$> _renderpassTOPuniname0]
    , ["filtertype" <$$> _renderpassTOPfiltertype]
    , ["top4extendw" <$$> _renderpassTOPtop4extendw]
    , ["sampler1" <$$> _renderpassTOPsampler1]
    , ["render" <$$> _renderpassTOPrender]
    , Just <$> vec4Map' "value4" _renderpassTOPvalue4
    , ["drawdepthonly" <$$> _renderpassTOPdrawdepthonly]
    , ["top0anisotropy" <$$> _renderpassTOPtop0anisotropy]
    , ["croprightunit" <$$> _renderpassTOPcroprightunit]
    , [("top0",) . ResolveP <$> _renderpassTOPtop0]
    , ["top0extendv" <$$> _renderpassTOPtop0extendv]
    , ["top3extendw" <$$> _renderpassTOPtop3extendw]
    , ["top0filter" <$$> _renderpassTOPtop0filter]
    , ["polygonoffsetfactor" <$$> _renderpassTOPpolygonoffsetfactor]
    , ["polygonoffset" <$$> _renderpassTOPpolygonoffset]
    , ["cropright" <$$> _renderpassTOPcropright]
    , ["top3anisotropy" <$$> _renderpassTOPtop3anisotropy]
    , ["top3extendv" <$$> _renderpassTOPtop3extendv]
    , ["resolutionh" <$$> _renderpassTOPresolutionh]
    , ["top3filter" <$$> _renderpassTOPtop3filter]
    , ["allowbufblending" <$$> _renderpassTOPallowbufblending]
    , [("top3",) . ResolveP <$> _renderpassTOPtop3]
    , ["aspect1" <$$> _renderpassTOPaspect1]
    , ["top4extendu" <$$> _renderpassTOPtop4extendu]
    , ["coloroutputneeded" <$$> _renderpassTOPcoloroutputneeded]
    , ["top1extendu" <$$> _renderpassTOPtop1extendu]
    , ["alphatocoverage" <$$> _renderpassTOPalphatocoverage]
    , ["top3extendu" <$$> _renderpassTOPtop3extendu]
    , ["cleartocamcolor" <$$> _renderpassTOPcleartocamcolor]
    , ["top2anisotropy" <$$> _renderpassTOPtop2anisotropy]
    , ["cropleftunit" <$$> _renderpassTOPcropleftunit]
    , ["top1extendw" <$$> _renderpassTOPtop1extendw]
    , ["top2extendv" <$$> _renderpassTOPtop2extendv]
    , ["top4anisotropy" <$$> _renderpassTOPtop4anisotropy]
    , [("top4",) . ResolveP <$> _renderpassTOPtop4]
    , ["top2extendu" <$$> _renderpassTOPtop2extendu]
    , ["overdrawlimit" <$$> _renderpassTOPoverdrawlimit]
    , Just <$> vec4Map' "value1" _renderpassTOPvalue1
    , ["top0extendu" <$$> _renderpassTOPtop0extendu]
    , Just <$> vec4Map' "value0" _renderpassTOPvalue0
    , ["top0extendw" <$$> _renderpassTOPtop0extendw]
    , ["transpeellayers" <$$> _renderpassTOPtranspeellayers]
    , ["cleardepth" <$$> _renderpassTOPcleardepth]
    , ["croptopunit" <$$> _renderpassTOPcroptopunit]
    , ["top1anisotropy" <$$> _renderpassTOPtop1anisotropy]
    , ["outputresolution" <$$> _renderpassTOPoutputresolution]
    , ["uniname3" <$$> _renderpassTOPuniname3]
    , ["npasses" <$$> _renderpassTOPnpasses]
    , ["chanmask" <$$> _renderpassTOPchanmask]
    , ["croptop" <$$> _renderpassTOPcroptop]
    , ["top2filter" <$$> _renderpassTOPtop2filter]]
  pars _ = []
  opType (RemapTOP {}) = "remapTOP"
  opType (MoviefileoutTOP {}) = "moviefileoutTOP"
  opType (GlslmultiTOP {}) = "glslmultiTOP"
  opType (SubstanceselectTOP {}) = "substanceselectTOP"
  opType (PhotoshopinTOP {}) = "photoshopinTOP"
  opType (OutTOP {}) = "outTOP"
  opType (SyphonspoutoutTOP {}) = "syphonspoutoutTOP"
  opType (LumablurTOP {}) = "lumablurTOP"
  opType (BlobtrackTOP {}) = "blobtrackTOP"
  opType (TileTOP {}) = "tileTOP"
  opType (BlurTOP {}) = "blurTOP"
  opType (HsvadjustTOP {}) = "hsvadjustTOP"
  opType (RenderselectTOP {}) = "renderselectTOP"
  opType (FitTOP {}) = "fitTOP"
  opType (NdiinTOP {}) = "ndiinTOP"
  opType (EmbossTOP {}) = "embossTOP"
  opType (DisplaceTOP {}) = "displaceTOP"
  opType (MultiplyTOP {}) = "multiplyTOP"
  opType (InsideTOP {}) = "insideTOP"
  opType (NullTOP {}) = "nullTOP"
  opType (SsaoTOP {}) = "ssaoTOP"
  opType (OpencolorioTOP {}) = "opencolorioTOP"
  opType (CircleTOP {}) = "circleTOP"
  opType (SubstanceTOP {}) = "substanceTOP"
  opType (SubtractTOP {}) = "subtractTOP"
  opType (ProjectionTOP {}) = "projectionTOP"
  opType (Texture3dTOP {}) = "texture3dTOP"
  opType (PackTOP {}) = "packTOP"
  opType (MoviefileinTOP {}) = "moviefileinTOP"
  opType (SelectTOP {}) = "selectTOP"
  opType (FeedbackTOP {}) = "feedbackTOP"
  opType (RampTOP {}) = "rampTOP"
  opType (AnalyzeTOP {}) = "analyzeTOP"
  opType (AddTOP {}) = "addTOP"
  opType (TextTOP {}) = "textTOP"
  opType (KinectTOP {}) = "kinectTOP"
  opType (CropTOP {}) = "cropTOP"
  opType (PrefiltermapTOP {}) = "prefiltermapTOP"
  opType (OverTOP {}) = "overTOP"
  opType (CompositeTOP {}) = "compositeTOP"
  opType (WebrenderTOP {}) = "webrenderTOP"
  opType (AntialiasTOP {}) = "antialiasTOP"
  opType (RgbtohsvTOP {}) = "rgbtohsvTOP"
  opType (ConvolveTOP {}) = "convolveTOP"
  opType (EdgeTOP {}) = "edgeTOP"
  opType (SlopeTOP {}) = "slopeTOP"
  opType (NormalmapTOP {}) = "normalmapTOP"
  opType (ThresholdTOP {}) = "thresholdTOP"
  opType (CplusplusTOP {}) = "cplusplusTOP"
  opType (SwitchTOP {}) = "switchTOP"
  opType (MatteTOP {}) = "matteTOP"
  opType (LumalevelTOP {}) = "lumalevelTOP"
  opType (CacheselectTOP {}) = "cacheselectTOP"
  opType (UnderTOP {}) = "underTOP"
  opType (RenderTOP {}) = "renderTOP"
  opType (ConstantTOP {}) = "constantTOP"
  opType (ScreengrabTOP {}) = "screengrabTOP"
  opType (RealsenseTOP {}) = "realsenseTOP"
  opType (ReorderTOP {}) = "reorderTOP"
  opType (MonochromeTOP {}) = "monochromeTOP"
  opType (GlslTOP {}) = "glslTOP"
  opType (CrossTOP {}) = "crossTOP"
  opType (InTOP {}) = "inTOP"
  opType (LayoutTOP {}) = "layoutTOP"
  opType (ScreenTOP {}) = "screenTOP"
  opType (FlipTOP {}) = "flipTOP"
  opType (DirectxinTOP {}) = "directxinTOP"
  opType (CornerpinTOP {}) = "cornerpinTOP"
  opType (OpviewerTOP {}) = "opviewerTOP"
  opType (ViosoTOP {}) = "viosoTOP"
  opType (LookupTOP {}) = "lookupTOP"
  opType (VideodeviceoutTOP {}) = "videodeviceoutTOP"
  opType (DepthTOP {}) = "depthTOP"
  opType (VideostreaminTOP {}) = "videostreaminTOP"
  opType (SharedmemoutTOP {}) = "sharedmemoutTOP"
  opType (ChoptoTOP {}) = "choptoTOP"
  opType (OpenvrTOP {}) = "openvrTOP"
  opType (ChannelmixTOP {}) = "channelmixTOP"
  opType (NoiseTOP {}) = "noiseTOP"
  opType (OculusriftTOP {}) = "oculusriftTOP"
  opType (TransformTOP {}) = "transformTOP"
  opType (MathTOP {}) = "mathTOP"
  opType (DirectxoutTOP {}) = "directxoutTOP"
  opType (ChromakeyTOP {}) = "chromakeyTOP"
  opType (VideodeviceinTOP {}) = "videodeviceinTOP"
  opType (NdioutTOP {}) = "ndioutTOP"
  opType (SvgTOP {}) = "svgTOP"
  opType (LeapmotionTOP {}) = "leapmotionTOP"
  opType (TouchoutTOP {}) = "touchoutTOP"
  opType (SyphonspoutinTOP {}) = "syphonspoutinTOP"
  opType (VideostreamoutTOP {}) = "videostreamoutTOP"
  opType (ScalabledisplayTOP {}) = "scalabledisplayTOP"
  opType (OutsideTOP {}) = "outsideTOP"
  opType (ResolutionTOP {}) = "resolutionTOP"
  opType (DifferenceTOP {}) = "differenceTOP"
  opType (LevelTOP {}) = "levelTOP"
  opType (RectangleTOP {}) = "rectangleTOP"
  opType (SharedmeminTOP {}) = "sharedmeminTOP"
  opType (TouchinTOP {}) = "touchinTOP"
  opType (CubemapTOP {}) = "cubemapTOP"
  opType (HsvtorgbTOP {}) = "hsvtorgbTOP"
  opType (TimemachineTOP {}) = "timemachineTOP"
  opType (RgbkeyTOP {}) = "rgbkeyTOP"
  opType (CacheTOP {}) = "cacheTOP"
  opType (RenderpassTOP {}) = "renderpassTOP"
  text _ = Nothing
  commands = view topCommands
  connections = view topIns


instance Op DAT where 
  pars (SerialDAT {..}) = catMaybes . mconcat $ [ ["parity" <$$> _serialDATparity]
    , ["format" <$$> _serialDATformat]
    , ["active" <$$> _serialDATactive]
    , ["extension" <$$> _serialDATextension]
    , ["customext" <$$> _serialDATcustomext]
    , ["baudrate" <$$> _serialDATbaudrate]
    , ["wordwrap" <$$> _serialDATwordwrap]
    , ["rts" <$$> _serialDATrts]
    , ["stopbits" <$$> _serialDATstopbits]
    , ["clamp" <$$> _serialDATclamp]
    , ["dtr" <$$> _serialDATdtr]
    , ["language" <$$> _serialDATlanguage]
    , ["maxlines" <$$> _serialDATmaxlines]
    , ["executeloc" <$$> _serialDATexecuteloc]
    , ["databits" <$$> _serialDATdatabits]
    , [("callbacks",) . ResolveP <$> _serialDATcallbacks]
    , ["clear" <$$> _serialDATclear]
    , ["port" <$$> _serialDATport]
    , ["bytes" <$$> _serialDATbytes]]
  pars (TcpipDAT {..}) = catMaybes . mconcat $ [ ["mode" <$$> _tcpipDATmode]
    , ["format" <$$> _tcpipDATformat]
    , ["active" <$$> _tcpipDATactive]
    , ["extension" <$$> _tcpipDATextension]
    , ["customext" <$$> _tcpipDATcustomext]
    , ["wordwrap" <$$> _tcpipDATwordwrap]
    , ["address" <$$> _tcpipDATaddress]
    , ["shared" <$$> _tcpipDATshared]
    , ["clamp" <$$> _tcpipDATclamp]
    , ["language" <$$> _tcpipDATlanguage]
    , ["localaddress" <$$> _tcpipDATlocaladdress]
    , ["executeloc" <$$> _tcpipDATexecuteloc]
    , ["clear" <$$> _tcpipDATclear]
    , [("callbacks",) . ResolveP <$> _tcpipDATcallbacks]
    , ["maxlines" <$$> _tcpipDATmaxlines]
    , ["port" <$$> _tcpipDATport]
    , ["bytes" <$$> _tcpipDATbytes]]
  pars (EvaluateDAT {..}) = catMaybes . mconcat $ [ ["output" <$$> _evaluateDAToutput]
    , ["fromcol" <$$> _evaluateDATfromcol]
    , ["rowindexstart" <$$> _evaluateDATrowindexstart]
    , ["rownameend" <$$> _evaluateDATrownameend]
    , ["colnamestart" <$$> _evaluateDATcolnamestart]
    , ["fromrow" <$$> _evaluateDATfromrow]
    , ["rowexpr" <$$> _evaluateDATrowexpr]
    , ["rownamestart" <$$> _evaluateDATrownamestart]
    , ["backslash" <$$> _evaluateDATbackslash]
    , ["rowindexend" <$$> _evaluateDATrowindexend]
    , ["dependency" <$$> _evaluateDATdependency]
    , ["colexpr" <$$> _evaluateDATcolexpr]
    , ["colnames" <$$> _evaluateDATcolnames]
    , [("datexpr",) . ResolveP <$> _evaluateDATdatexpr]
    , ["expr" <$$> _evaluateDATexpr]
    , ["extractrows" <$$> _evaluateDATextractrows]
    , ["extension" <$$> _evaluateDATextension]
    , ["colindexend" <$$> _evaluateDATcolindexend]
    , ["outputsize" <$$> _evaluateDAToutputsize]
    , ["rownames" <$$> _evaluateDATrownames]
    , ["xfirstrow" <$$> _evaluateDATxfirstrow]
    , ["customext" <$$> _evaluateDATcustomext]
    , ["language" <$$> _evaluateDATlanguage]
    , ["extractcols" <$$> _evaluateDATextractcols]
    , ["wordwrap" <$$> _evaluateDATwordwrap]
    , ["colnameend" <$$> _evaluateDATcolnameend]
    , [("dat",) . ResolveP <$> _evaluateDATdat]
    , ["colindexstart" <$$> _evaluateDATcolindexstart]
    , ["xfirstcol" <$$> _evaluateDATxfirstcol]]
  pars (ChoptoDAT {..}) = catMaybes . mconcat $ [ ["customext" <$$> _choptoDATcustomext]
    , ["language" <$$> _choptoDATlanguage]
    , ["names" <$$> _choptoDATnames]
    , ["extension" <$$> _choptoDATextension]
    , ["wordwrap" <$$> _choptoDATwordwrap]
    , [("chop",) . ResolveP <$> _choptoDATchop]
    , ["latestsample" <$$> _choptoDATlatestsample]
    , ["output" <$$> _choptoDAToutput]]
  pars (ChopexecuteDAT {..}) = catMaybes . mconcat $ [ ["edit" <$$> _chopexecuteDATedit]
    , ["ontooff" <$$> _chopexecuteDATontooff]
    , ["whileoff" <$$> _chopexecuteDATwhileoff]
    , ["active" <$$> _chopexecuteDATactive]
    , ["extension" <$$> _chopexecuteDATextension]
    , ["whileon" <$$> _chopexecuteDATwhileon]
    , ["offtoon" <$$> _chopexecuteDATofftoon]
    , ["channel" <$$> _chopexecuteDATchannel]
    , ["customext" <$$> _chopexecuteDATcustomext]
    , ["language" <$$> _chopexecuteDATlanguage]
    , ["executeloc" <$$> _chopexecuteDATexecuteloc]
    , ["wordwrap" <$$> _chopexecuteDATwordwrap]
    , ["valuechange" <$$> _chopexecuteDATvaluechange]
    , [("chop",) . ResolveP <$> _chopexecuteDATchop]
    , ["freq" <$$> _chopexecuteDATfreq]]
  pars (PerformDAT {..}) = catMaybes . mconcat $ [ ["logcustompanel" <$$> _performDATlogcustompanel]
    , ["wordwrap" <$$> _performDATwordwrap]
    , ["logrender" <$$> _performDATlogrender]
    , ["active" <$$> _performDATactive]
    , ["logmovie" <$$> _performDATlogmovie]
    , ["customext" <$$> _performDATcustomext]
    , ["extension" <$$> _performDATextension]
    , ["activepulse" <$$> _performDATactivepulse]
    , ["logdrawchannels" <$$> _performDATlogdrawchannels]
    , ["triggermode" <$$> _performDATtriggermode]
    , ["logscript" <$$> _performDATlogscript]
    , ["language" <$$> _performDATlanguage]
    , ["triggerthreshold" <$$> _performDATtriggerthreshold]
    , ["logcook" <$$> _performDATlogcook]
    , ["loggraphics" <$$> _performDATloggraphics]
    , ["logframelength" <$$> _performDATlogframelength]
    , ["logobjectview" <$$> _performDATlogobjectview]
    , ["logmisc" <$$> _performDATlogmisc]
    , ["logexport" <$$> _performDATlogexport]
    , ["logviewport" <$$> _performDATlogviewport]
    , ["logmidi" <$$> _performDATlogmidi]]
  pars (ClipDAT {..}) = catMaybes . mconcat $ [ [("clip",) . ResolveP <$> _clipDATclip]
    , ["edit" <$$> _clipDATedit]
    , ["file" <$$> _clipDATfile]
    , ["extension" <$$> _clipDATextension]
    , ["wordwrap" <$$> _clipDATwordwrap]
    , ["customext" <$$> _clipDATcustomext]
    , ["language" <$$> _clipDATlanguage]
    , ["reload" <$$> _clipDATreload]
    , ["executeloc" <$$> _clipDATexecuteloc]
    , ["framefirst" <$$> _clipDATframefirst]
    , ["frameloop" <$$> _clipDATframeloop]
    , ["exit" <$$> _clipDATexit]
    , ["printstate" <$$> _clipDATprintstate]]
  pars (TuioinDAT {..}) = catMaybes . mconcat $ [ ["accel" <$$> _tuioinDATaccel]
    , ["active" <$$> _tuioinDATactive]
    , ["angle" <$$> _tuioinDATangle]
    , ["size" <$$> _tuioinDATsize]
    , ["protocol" <$$> _tuioinDATprotocol]
    , ["address" <$$> _tuioinDATaddress]
    , ["shared" <$$> _tuioinDATshared]
    , ["profile" <$$> _tuioinDATprofile]
    , ["customext" <$$> _tuioinDATcustomext]
    , ["velocity" <$$> _tuioinDATvelocity]
    , ["timestamp" <$$> _tuioinDATtimestamp]
    , ["executeloc" <$$> _tuioinDATexecuteloc]
    , ["wordwrap" <$$> _tuioinDATwordwrap]
    , ["classid" <$$> _tuioinDATclassid]
    , ["language" <$$> _tuioinDATlanguage]
    , [("callbacks",) . ResolveP <$> _tuioinDATcallbacks]
    , ["port" <$$> _tuioinDATport]
    , ["extension" <$$> _tuioinDATextension]]
  pars (ConvertDAT {..}) = catMaybes . mconcat $ [ ["customext" <$$> _convertDATcustomext]
    , ["language" <$$> _convertDATlanguage]
    , ["removeblank" <$$> _convertDATremoveblank]
    , ["extension" <$$> _convertDATextension]
    , ["wordwrap" <$$> _convertDATwordwrap]
    , ["how" <$$> _convertDAThow]
    , ["delimiters" <$$> _convertDATdelimiters]
    , ["spacers" <$$> _convertDATspacers]]
  pars (ScriptDAT {..}) = catMaybes . mconcat $ [ ["setuppars" <$$> _scriptDATsetuppars]
    , ["customext" <$$> _scriptDATcustomext]
    , ["language" <$$> _scriptDATlanguage]
    , ["extension" <$$> _scriptDATextension]
    , ["wordwrap" <$$> _scriptDATwordwrap]
    , [("callbacks",) . ResolveP <$> _scriptDATcallbacks]]
  pars (NullDAT {..}) = catMaybes . mconcat $ [ ["customext" <$$> _nullDATcustomext]
    , ["language" <$$> _nullDATlanguage]
    , ["extension" <$$> _nullDATextension]
    , ["wordwrap" <$$> _nullDATwordwrap]]
  pars (ReorderDAT {..}) = catMaybes . mconcat $ [ ["delete" <$$> _reorderDATdelete]
    , ["order" <$$> _reorderDATorder]
    , ["customext" <$$> _reorderDATcustomext]
    , ["language" <$$> _reorderDATlanguage]
    , ["extension" <$$> _reorderDATextension]
    , ["wordwrap" <$$> _reorderDATwordwrap]
    , ["method" <$$> _reorderDATmethod]
    , ["after" <$$> _reorderDATafter]
    , ["reorder" <$$> _reorderDATreorder]
    , ["before" <$$> _reorderDATbefore]]
  pars (ErrorDAT {..}) = catMaybes . mconcat $ [ ["type" <$$> _errorDATtype]
    , ["active" <$$> _errorDATactive]
    , ["extension" <$$> _errorDATextension]
    , ["wordwrap" <$$> _errorDATwordwrap]
    , ["logcurrent" <$$> _errorDATlogcurrent]
    , ["clamp" <$$> _errorDATclamp]
    , ["language" <$$> _errorDATlanguage]
    , ["maxlines" <$$> _errorDATmaxlines]
    , ["message" <$$> _errorDATmessage]
    , ["executeloc" <$$> _errorDATexecuteloc]
    , ["clear" <$$> _errorDATclear]
    , [("callbacks",) . ResolveP <$> _errorDATcallbacks]
    , ["severity" <$$> _errorDATseverity]
    , ["customext" <$$> _errorDATcustomext]
    , ["source" <$$> _errorDATsource]]
  pars (OpexecuteDAT {..}) = catMaybes . mconcat $ [ ["flagchange" <$$> _opexecuteDATflagchange]
    , ["postcook" <$$> _opexecuteDATpostcook]
    , ["pathchange" <$$> _opexecuteDATpathchange]
    , ["extensionchange" <$$> _opexecuteDATextensionchange]
    , ["active" <$$> _opexecuteDATactive]
    , ["extension" <$$> _opexecuteDATextension]
    , ["currentchildchange" <$$> _opexecuteDATcurrentchildchange]
    , ["edit" <$$> _opexecuteDATedit]
    , ["uichange" <$$> _opexecuteDATuichange]
    , ["childrename" <$$> _opexecuteDATchildrename]
    , ["opdelete" <$$> _opexecuteDATopdelete]
    , ["numchildrenchange" <$$> _opexecuteDATnumchildrenchange]
    , ["customext" <$$> _opexecuteDATcustomext]
    , ["wirechange" <$$> _opexecuteDATwirechange]
    , ["executeloc" <$$> _opexecuteDATexecuteloc]
    , ["wordwrap" <$$> _opexecuteDATwordwrap]
    , ["language" <$$> _opexecuteDATlanguage]
    , ["namechange" <$$> _opexecuteDATnamechange]
    , ["precook" <$$> _opexecuteDATprecook]]
  pars (EtherdreamDAT {..}) = catMaybes . mconcat $ [ ["poll" <$$> _etherdreamDATpoll]
    , ["customext" <$$> _etherdreamDATcustomext]
    , ["language" <$$> _etherdreamDATlanguage]
    , ["extension" <$$> _etherdreamDATextension]
    , ["wordwrap" <$$> _etherdreamDATwordwrap]
    , [("callbacks",) . ResolveP <$> _etherdreamDATcallbacks]
    , ["columns" <$$> _etherdreamDATcolumns]]
  pars (MidiinDAT {..}) = catMaybes . mconcat $ [ ["id" <$$> _midiinDATid]
    , ["index" <$$> _midiinDATindex]
    , ["bytes" <$$> _midiinDATbytes]
    , ["clear" <$$> _midiinDATclear]
    , ["active" <$$> _midiinDATactive]
    , ["skiptiming" <$$> _midiinDATskiptiming]
    , ["customext" <$$> _midiinDATcustomext]
    , ["value" <$$> _midiinDATvalue]
    , ["clamp" <$$> _midiinDATclamp]
    , ["channel" <$$> _midiinDATchannel]
    , ["language" <$$> _midiinDATlanguage]
    , [("device",) . ResolveP <$> _midiinDATdevice]
    , ["message" <$$> _midiinDATmessage]
    , ["executeloc" <$$> _midiinDATexecuteloc]
    , ["wordwrap" <$$> _midiinDATwordwrap]
    , [("callbacks",) . ResolveP <$> _midiinDATcallbacks]
    , ["maxlines" <$$> _midiinDATmaxlines]
    , ["skipsense" <$$> _midiinDATskipsense]
    , ["extension" <$$> _midiinDATextension]
    , ["filter" <$$> _midiinDATfilter]]
  pars (SelectDAT {..}) = catMaybes . mconcat $ [ ["colexpr" <$$> _selectDATcolexpr]
    , ["fromcol" <$$> _selectDATfromcol]
    , ["rowindexstart" <$$> _selectDATrowindexstart]
    , ["rownameend" <$$> _selectDATrownameend]
    , ["firstrow" <$$> _selectDATfirstrow]
    , ["colnamestart" <$$> _selectDATcolnamestart]
    , ["fromrow" <$$> _selectDATfromrow]
    , ["rowexpr" <$$> _selectDATrowexpr]
    , ["rownamestart" <$$> _selectDATrownamestart]
    , ["rowindexend" <$$> _selectDATrowindexend]
    , ["output" <$$> _selectDAToutput]
    , ["extractrows" <$$> _selectDATextractrows]
    , ["extension" <$$> _selectDATextension]
    , ["colindexend" <$$> _selectDATcolindexend]
    , ["rownames" <$$> _selectDATrownames]
    , ["customext" <$$> _selectDATcustomext]
    , ["language" <$$> _selectDATlanguage]
    , ["extractcols" <$$> _selectDATextractcols]
    , ["wordwrap" <$$> _selectDATwordwrap]
    , ["colnameend" <$$> _selectDATcolnameend]
    , [("dat",) . ResolveP <$> _selectDATdat]
    , ["firstcol" <$$> _selectDATfirstcol]
    , ["colindexstart" <$$> _selectDATcolindexstart]
    , ["colnames" <$$> _selectDATcolnames]]
  pars (FileoutDAT {..}) = catMaybes . mconcat $ [ ["customext" <$$> _fileoutDATcustomext]
    , ["language" <$$> _fileoutDATlanguage]
    , ["file" <$$> _fileoutDATfile]
    , ["extension" <$$> _fileoutDATextension]
    , ["wordwrap" <$$> _fileoutDATwordwrap]
    , ["append" <$$> _fileoutDATappend]
    , ["n" <$$> _fileoutDATn]
    , ["write" <$$> _fileoutDATwrite]]
  pars (OscoutDAT {..}) = catMaybes . mconcat $ [ ["bundletimestamp" <$$> _oscoutDATbundletimestamp]
    , ["port" <$$> _oscoutDATport]
    , ["clear" <$$> _oscoutDATclear]
    , ["active" <$$> _oscoutDATactive]
    , ["extension" <$$> _oscoutDATextension]
    , ["protocol" <$$> _oscoutDATprotocol]
    , ["splitmessage" <$$> _oscoutDATsplitmessage]
    , ["address" <$$> _oscoutDATaddress]
    , ["shared" <$$> _oscoutDATshared]
    , ["clamp" <$$> _oscoutDATclamp]
    , ["customext" <$$> _oscoutDATcustomext]
    , ["maxlines" <$$> _oscoutDATmaxlines]
    , ["executeloc" <$$> _oscoutDATexecuteloc]
    , ["wordwrap" <$$> _oscoutDATwordwrap]
    , [("callbacks",) . ResolveP <$> _oscoutDATcallbacks]
    , ["language" <$$> _oscoutDATlanguage]
    , ["typetag" <$$> _oscoutDATtypetag]
    , ["addscope" <$$> _oscoutDATaddscope]
    , ["splitbundle" <$$> _oscoutDATsplitbundle]
    , ["bytes" <$$> _oscoutDATbytes]]
  pars (MidieventDAT {..}) = catMaybes . mconcat $ [ ["index" <$$> _midieventDATindex]
    , ["bytes" <$$> _midieventDATbytes]
    , ["clear" <$$> _midieventDATclear]
    , ["filter" <$$> _midieventDATfilter]
    , ["skiptiming" <$$> _midieventDATskiptiming]
    , ["customext" <$$> _midieventDATcustomext]
    , ["value" <$$> _midieventDATvalue]
    , ["clamp" <$$> _midieventDATclamp]
    , ["channel" <$$> _midieventDATchannel]
    , ["language" <$$> _midieventDATlanguage]
    , ["maxlines" <$$> _midieventDATmaxlines]
    , ["message" <$$> _midieventDATmessage]
    , ["executeloc" <$$> _midieventDATexecuteloc]
    , ["wordwrap" <$$> _midieventDATwordwrap]
    , [("callbacks",) . ResolveP <$> _midieventDATcallbacks]
    , ["dir" <$$> _midieventDATdir]
    , ["skipsense" <$$> _midieventDATskipsense]
    , ["extension" <$$> _midieventDATextension]
    , ["active" <$$> _midieventDATactive]]
  pars (ArtnetDAT {..}) = catMaybes . mconcat $ [ ["poll" <$$> _artnetDATpoll]
    , ["customext" <$$> _artnetDATcustomext]
    , ["language" <$$> _artnetDATlanguage]
    , ["extension" <$$> _artnetDATextension]
    , ["wordwrap" <$$> _artnetDATwordwrap]
    , [("callbacks",) . ResolveP <$> _artnetDATcallbacks]
    , ["columns" <$$> _artnetDATcolumns]]
  pars (SubstituteDAT {..}) = catMaybes . mconcat $ [ ["expandto" <$$> _substituteDATexpandto]
    , ["colexpr" <$$> _substituteDATcolexpr]
    , ["fromcol" <$$> _substituteDATfromcol]
    , ["rowindexstart" <$$> _substituteDATrowindexstart]
    , ["rownameend" <$$> _substituteDATrownameend]
    , ["before" <$$> _substituteDATbefore]
    , ["colnamestart" <$$> _substituteDATcolnamestart]
    , ["fromrow" <$$> _substituteDATfromrow]
    , ["rowexpr" <$$> _substituteDATrowexpr]
    , ["rownamestart" <$$> _substituteDATrownamestart]
    , ["first" <$$> _substituteDATfirst]
    , ["rowindexend" <$$> _substituteDATrowindexend]
    , ["colnames" <$$> _substituteDATcolnames]
    , ["expand" <$$> _substituteDATexpand]
    , ["case" <$$> _substituteDATcase]
    , ["extractrows" <$$> _substituteDATextractrows]
    , ["extension" <$$> _substituteDATextension]
    , ["colindexend" <$$> _substituteDATcolindexend]
    , ["rownames" <$$> _substituteDATrownames]
    , ["match" <$$> _substituteDATmatch]
    , ["xfirstrow" <$$> _substituteDATxfirstrow]
    , ["customext" <$$> _substituteDATcustomext]
    , ["language" <$$> _substituteDATlanguage]
    , ["xfirstcol" <$$> _substituteDATxfirstcol]
    , ["wordwrap" <$$> _substituteDATwordwrap]
    , ["colnameend" <$$> _substituteDATcolnameend]
    , ["after" <$$> _substituteDATafter]
    , ["colindexstart" <$$> _substituteDATcolindexstart]
    , ["extractcols" <$$> _substituteDATextractcols]]
  pars (SortDAT {..}) = catMaybes . mconcat $ [ ["index" <$$> _sortDATindex]
    , ["extension" <$$> _sortDATextension]
    , ["reverse" <$$> _sortDATreverse]
    , ["preservefirst" <$$> _sortDATpreservefirst]
    , ["unique" <$$> _sortDATunique]
    , ["name" <$$> _sortDATname]
    , ["ignorecase" <$$> _sortDATignorecase]
    , ["seed" <$$> _sortDATseed]
    , ["language" <$$> _sortDATlanguage]
    , ["sortmethod" <$$> _sortDATsortmethod]
    , ["wordwrap" <$$> _sortDATwordwrap]
    , ["customext" <$$> _sortDATcustomext]
    , ["order" <$$> _sortDATorder]]
  pars (KeyboardinDAT {..}) = catMaybes . mconcat $ [ ["panels" <$$> _keyboardinDATpanels]
    , ["keys" <$$> _keyboardinDATkeys]
    , ["clear" <$$> _keyboardinDATclear]
    , ["active" <$$> _keyboardinDATactive]
    , ["extension" <$$> _keyboardinDATextension]
    , ["clamp" <$$> _keyboardinDATclamp]
    , ["customext" <$$> _keyboardinDATcustomext]
    , ["maxlines" <$$> _keyboardinDATmaxlines]
    , ["executeloc" <$$> _keyboardinDATexecuteloc]
    , ["wordwrap" <$$> _keyboardinDATwordwrap]
    , [("callbacks",) . ResolveP <$> _keyboardinDATcallbacks]
    , ["language" <$$> _keyboardinDATlanguage]
    , ["shortcuts" <$$> _keyboardinDATshortcuts]
    , ["lrmodifiers" <$$> _keyboardinDATlrmodifiers]
    , ["perform" <$$> _keyboardinDATperform]]
  pars (ParameterexecuteDAT {..}) = catMaybes . mconcat $ [ ["expressionchange" <$$> _parameterexecuteDATexpressionchange]
    , ["modechange" <$$> _parameterexecuteDATmodechange]
    , ["valuechange" <$$> _parameterexecuteDATvaluechange]
    , ["active" <$$> _parameterexecuteDATactive]
    , ["extension" <$$> _parameterexecuteDATextension]
    , ["onpulse" <$$> _parameterexecuteDATonpulse]
    , ["customext" <$$> _parameterexecuteDATcustomext]
    , ["edit" <$$> _parameterexecuteDATedit]
    , ["pars" <$$> _parameterexecuteDATpars]
    , ["enablechange" <$$> _parameterexecuteDATenablechange]
    , ["custom" <$$> _parameterexecuteDATcustom]
    , ["executeloc" <$$> _parameterexecuteDATexecuteloc]
    , ["wordwrap" <$$> _parameterexecuteDATwordwrap]
    , ["builtin" <$$> _parameterexecuteDATbuiltin]
    , ["language" <$$> _parameterexecuteDATlanguage]
    , ["exportchange" <$$> _parameterexecuteDATexportchange]]
  pars (FifoDAT {..}) = catMaybes . mconcat $ [ ["clamp" <$$> _fifoDATclamp]
    , ["language" <$$> _fifoDATlanguage]
    , ["maxlines" <$$> _fifoDATmaxlines]
    , ["extension" <$$> _fifoDATextension]
    , ["executeloc" <$$> _fifoDATexecuteloc]
    , ["wordwrap" <$$> _fifoDATwordwrap]
    , [("callbacks",) . ResolveP <$> _fifoDATcallbacks]
    , ["clear" <$$> _fifoDATclear]
    , ["customext" <$$> _fifoDATcustomext]
    , ["firstrow" <$$> _fifoDATfirstrow]]
  pars (MultitouchinDAT {..}) = catMaybes . mconcat $ [ ["minrows" <$$> _multitouchinDATminrows]
    , ["wordwrap" <$$> _multitouchinDATwordwrap]
    , ["relativeid" <$$> _multitouchinDATrelativeid]
    , ["active" <$$> _multitouchinDATactive]
    , ["doubleclickthresh" <$$> _multitouchinDATdoubleclickthresh]
    , ["clamp" <$$> _multitouchinDATclamp]
    , ["extension" <$$> _multitouchinDATextension]
    , ["contactthresh" <$$> _multitouchinDATcontactthresh]
    , ["outputtype" <$$> _multitouchinDAToutputtype]
    , ["posthresh" <$$> _multitouchinDATposthresh]
    , ["mouse" <$$> _multitouchinDATmouse]
    , ["language" <$$> _multitouchinDATlanguage]
    , ["maxlines" <$$> _multitouchinDATmaxlines]
    , ["executeloc" <$$> _multitouchinDATexecuteloc]
    , ["panel" <$$> _multitouchinDATpanel]
    , [("callbacks",) . ResolveP <$> _multitouchinDATcallbacks]
    , ["clear" <$$> _multitouchinDATclear]
    , ["customext" <$$> _multitouchinDATcustomext]
    , ["relativepos" <$$> _multitouchinDATrelativepos]]
  pars (SwitchDAT {..}) = catMaybes . mconcat $ [ ["index" <$$> _switchDATindex]
    , ["customext" <$$> _switchDATcustomext]
    , ["language" <$$> _switchDATlanguage]
    , ["extension" <$$> _switchDATextension]
    , ["wordwrap" <$$> _switchDATwordwrap]]
  pars (FolderDAT {..}) = catMaybes . mconcat $ [ ["refreshpulse" <$$> _folderDATrefreshpulse]
    , ["active" <$$> _folderDATactive]
    , ["nameformat" <$$> _folderDATnameformat]
    , ["sizecol" <$$> _folderDATsizecol]
    , ["relpathcol" <$$> _folderDATrelpathcol]
    , ["rootfolder" <$$> _folderDATrootfolder]
    , ["toxextensions" <$$> _folderDATtoxextensions]
    , ["pathcol" <$$> _folderDATpathcol]
    , ["imageextensions" <$$> _folderDATimageextensions]
    , ["refresh" <$$> _folderDATrefresh]
    , ["type" <$$> _folderDATtype]
    , ["datecreatedcol" <$$> _folderDATdatecreatedcol]
    , ["extensioncol" <$$> _folderDATextensioncol]
    , ["basenamecol" <$$> _folderDATbasenamecol]
    , ["depthcol" <$$> _folderDATdepthcol]
    , ["folders" <$$> _folderDATfolders]
    , ["typecol" <$$> _folderDATtypecol]
    , ["dateformat" <$$> _folderDATdateformat]
    , ["names" <$$> _folderDATnames]
    , ["foldercol" <$$> _folderDATfoldercol]
    , ["wordwrap" <$$> _folderDATwordwrap]
    , ["maxdepth" <$$> _folderDATmaxdepth]
    , ["subfolders" <$$> _folderDATsubfolders]
    , ["dateaccessedcol" <$$> _folderDATdateaccessedcol]
    , ["namecol" <$$> _folderDATnamecol]
    , ["mindepth" <$$> _folderDATmindepth]
    , ["extension" <$$> _folderDATextension]
    , ["customext" <$$> _folderDATcustomext]
    , ["extensions" <$$> _folderDATextensions]
    , ["limitdepth" <$$> _folderDATlimitdepth]
    , ["toeextensions" <$$> _folderDATtoeextensions]
    , ["audioextensions" <$$> _folderDATaudioextensions]
    , ["language" <$$> _folderDATlanguage]
    , ["allextensions" <$$> _folderDATallextensions]
    , ["datemodifiedcol" <$$> _folderDATdatemodifiedcol]
    , ["movieextensions" <$$> _folderDATmovieextensions]
    , ["async" <$$> _folderDATasync]]
  pars (MergeDAT {..}) = catMaybes . mconcat $ [ ["customext" <$$> _mergeDATcustomext]
    , ["language" <$$> _mergeDATlanguage]
    , ["unmatched" <$$> _mergeDATunmatched]
    , ["spacer" <$$> _mergeDATspacer]
    , ["wordwrap" <$$> _mergeDATwordwrap]
    , ["byname" <$$> _mergeDATbyname]
    , ["how" <$$> _mergeDAThow]
    , [("dat",) . ResolveP <$> _mergeDATdat]
    , ["extension" <$$> _mergeDATextension]]
  pars (InfoDAT {..}) = catMaybes . mconcat $ [ ["customext" <$$> _infoDATcustomext]
    , ["language" <$$> _infoDATlanguage]
    , ["passive" <$$> _infoDATpassive]
    , ["extension" <$$> _infoDATextension]
    , ["wordwrap" <$$> _infoDATwordwrap]]
  pars (TextDAT {..}) = catMaybes . mconcat $ [ ["edit" <$$> _textDATedit]
    , ["customext" <$$> _textDATcustomext]
    , ["language" <$$> _textDATlanguage]
    , ["file" <$$> _textDATfile]
    , ["writepulse" <$$> _textDATwritepulse]
    , ["loadonstartpulse" <$$> _textDATloadonstartpulse]
    , ["loadonstart" <$$> _textDATloadonstart]
    , ["wordwrap" <$$> _textDATwordwrap]
    , ["extension" <$$> _textDATextension]
    , ["write" <$$> _textDATwrite]]
  pars (OutDAT {..}) = catMaybes . mconcat $ [ ["customext" <$$> _outDATcustomext]
    , ["label" <$$> _outDATlabel]
    , ["language" <$$> _outDATlanguage]
    , ["extension" <$$> _outDATextension]
    , ["wordwrap" <$$> _outDATwordwrap]]
  pars (TouchoutDAT {..}) = catMaybes . mconcat $ [ ["customext" <$$> _touchoutDATcustomext]
    , ["language" <$$> _touchoutDATlanguage]
    , ["active" <$$> _touchoutDATactive]
    , ["extension" <$$> _touchoutDATextension]
    , ["wordwrap" <$$> _touchoutDATwordwrap]
    , ["protocol" <$$> _touchoutDATprotocol]
    , ["resend" <$$> _touchoutDATresend]
    , ["port" <$$> _touchoutDATport]
    , ["address" <$$> _touchoutDATaddress]
    , ["shared" <$$> _touchoutDATshared]
    , ["redendantsends" <$$> _touchoutDATredendantsends]]
  pars (PanelexecuteDAT {..}) = catMaybes . mconcat $ [ ["edit" <$$> _panelexecuteDATedit]
    , ["ontooff" <$$> _panelexecuteDATontooff]
    , ["whileoff" <$$> _panelexecuteDATwhileoff]
    , ["active" <$$> _panelexecuteDATactive]
    , ["extension" <$$> _panelexecuteDATextension]
    , ["wordwrap" <$$> _panelexecuteDATwordwrap]
    , ["whileon" <$$> _panelexecuteDATwhileon]
    , ["offtoon" <$$> _panelexecuteDATofftoon]
    , ["customext" <$$> _panelexecuteDATcustomext]
    , ["language" <$$> _panelexecuteDATlanguage]
    , ["executeloc" <$$> _panelexecuteDATexecuteloc]
    , [("panel",) . ResolveP <$> _panelexecuteDATpanel]
    , ["valuechange" <$$> _panelexecuteDATvaluechange]
    , ["panelvalue" <$$> _panelexecuteDATpanelvalue]]
  pars (FileinDAT {..}) = catMaybes . mconcat $ [ ["wordwrap" <$$> _fileinDATwordwrap]
    , ["refreshpulse" <$$> _fileinDATrefreshpulse]
    , ["language" <$$> _fileinDATlanguage]
    , ["file" <$$> _fileinDATfile]
    , ["extension" <$$> _fileinDATextension]
    , ["refresh" <$$> _fileinDATrefresh]
    , ["converttable" <$$> _fileinDATconverttable]
    , ["customext" <$$> _fileinDATcustomext]]
  pars (OpfindDAT {..}) = catMaybes . mconcat $ [ ["pathcol" <$$> _opfindDATpathcol]
    , ["mindepth" <$$> _opfindDATmindepth]
    , ["sops" <$$> _opfindDATsops]
    , ["maxops" <$$> _opfindDATmaxops]
    , ["limitmaxops" <$$> _opfindDATlimitmaxops]
    , ["excludefilter" <$$> _opfindDATexcludefilter]
    , ["tagscol" <$$> _opfindDATtagscol]
    , ["commentfilter" <$$> _opfindDATcommentfilter]
    , ["cooktimescol" <$$> _opfindDATcooktimescol]
    , ["parnondefaultonly" <$$> _opfindDATparnondefaultonly]
    , [("callbacks",) . ResolveP <$> _opfindDATcallbacks]
    , ["namefilter" <$$> _opfindDATnamefilter]
    , ["cookpulse" <$$> _opfindDATcookpulse]
    , ["wordwrap" <$$> _opfindDATwordwrap]
    , ["typecol" <$$> _opfindDATtypecol]
    , ["depthcol" <$$> _opfindDATdepthcol]
    , ["relpathcol" <$$> _opfindDATrelpathcol]
    , ["typefilter" <$$> _opfindDATtypefilter]
    , ["namecol" <$$> _opfindDATnamecol]
    , ["parnamefilter" <$$> _opfindDATparnamefilter]
    , ["mats" <$$> _opfindDATmats]
    , ["other" <$$> _opfindDATother]
    , ["parentpath" <$$> _opfindDATparentpath]
    , ["combinefilters" <$$> _opfindDATcombinefilters]
    , ["language" <$$> _opfindDATlanguage]
    , ["dats" <$$> _opfindDATdats]
    , ["panels" <$$> _opfindDATpanels]
    , ["parvaluefilter" <$$> _opfindDATparvaluefilter]
    , ["parexpressionfilter" <$$> _opfindDATparexpressionfilter]
    , ["tops" <$$> _opfindDATtops]
    , ["parentfilter" <$$> _opfindDATparentfilter]
    , ["includecomponent" <$$> _opfindDATincludecomponent]
    , ["casesensitive" <$$> _opfindDATcasesensitive]
    , ["extension" <$$> _opfindDATextension]
    , [("component",) . ResolveP <$> _opfindDATcomponent]
    , ["convertbool" <$$> _opfindDATconvertbool]
    , ["pathfilter" <$$> _opfindDATpathfilter]
    , ["convertnone" <$$> _opfindDATconvertnone]
    , ["maxdepth" <$$> _opfindDATmaxdepth]
    , ["objects" <$$> _opfindDATobjects]
    , ["tagsfilter" <$$> _opfindDATtagsfilter]
    , ["customext" <$$> _opfindDATcustomext]
    , ["limitmaxdepth" <$$> _opfindDATlimitmaxdepth]
    , ["idcol" <$$> _opfindDATidcol]
    , ["chops" <$$> _opfindDATchops]
    , ["activecook" <$$> _opfindDATactivecook]
    , ["textfilter" <$$> _opfindDATtextfilter]]
  pars (MqttclientDAT {..}) = catMaybes . mconcat $ [ ["clear" <$$> _mqttclientDATclear]
    , ["active" <$$> _mqttclientDATactive]
    , ["extension" <$$> _mqttclientDATextension]
    , ["clamp" <$$> _mqttclientDATclamp]
    , ["executeloc" <$$> _mqttclientDATexecuteloc]
    , ["reconnect" <$$> _mqttclientDATreconnect]
    , ["specifyid" <$$> _mqttclientDATspecifyid]
    , ["maxinflight" <$$> _mqttclientDATmaxinflight]
    , ["cleansession" <$$> _mqttclientDATcleansession]
    , ["keepalive" <$$> _mqttclientDATkeepalive]
    , ["wordwrap" <$$> _mqttclientDATwordwrap]
    , [("callbacks",) . ResolveP <$> _mqttclientDATcallbacks]
    , ["maxlines" <$$> _mqttclientDATmaxlines]
    , ["usercid" <$$> _mqttclientDATusercid]
    , ["customext" <$$> _mqttclientDATcustomext]
    , ["netaddress" <$$> _mqttclientDATnetaddress]
    , ["language" <$$> _mqttclientDATlanguage]
    , ["bytes" <$$> _mqttclientDATbytes]]
  pars (WebsocketDAT {..}) = catMaybes . mconcat $ [ ["clear" <$$> _websocketDATclear]
    , ["active" <$$> _websocketDATactive]
    , ["extension" <$$> _websocketDATextension]
    , ["customext" <$$> _websocketDATcustomext]
    , ["socketio" <$$> _websocketDATsocketio]
    , ["clamp" <$$> _websocketDATclamp]
    , ["language" <$$> _websocketDATlanguage]
    , ["maxlines" <$$> _websocketDATmaxlines]
    , ["executeloc" <$$> _websocketDATexecuteloc]
    , ["wordwrap" <$$> _websocketDATwordwrap]
    , [("callbacks",) . ResolveP <$> _websocketDATcallbacks]
    , ["bytes" <$$> _websocketDATbytes]
    , ["port" <$$> _websocketDATport]
    , ["netaddress" <$$> _websocketDATnetaddress]
    , ["socketioaddress" <$$> _websocketDATsocketioaddress]]
  pars (UdpoutDAT {..}) = catMaybes . mconcat $ [ ["bytes" <$$> _udpoutDATbytes]
    , ["format" <$$> _udpoutDATformat]
    , ["active" <$$> _udpoutDATactive]
    , ["extension" <$$> _udpoutDATextension]
    , ["customext" <$$> _udpoutDATcustomext]
    , ["protocol" <$$> _udpoutDATprotocol]
    , ["localport" <$$> _udpoutDATlocalport]
    , ["address" <$$> _udpoutDATaddress]
    , ["shared" <$$> _udpoutDATshared]
    , ["clamp" <$$> _udpoutDATclamp]
    , ["language" <$$> _udpoutDATlanguage]
    , ["maxlines" <$$> _udpoutDATmaxlines]
    , ["executeloc" <$$> _udpoutDATexecuteloc]
    , ["wordwrap" <$$> _udpoutDATwordwrap]
    , [("callbacks",) . ResolveP <$> _udpoutDATcallbacks]
    , ["clear" <$$> _udpoutDATclear]
    , ["port" <$$> _udpoutDATport]
    , ["localportmode" <$$> _udpoutDATlocalportmode]]
  pars (SoptoDAT {..}) = catMaybes . mconcat $ [ ["wordwrap" <$$> _soptoDATwordwrap]
    , ["customext" <$$> _soptoDATcustomext]
    , ["language" <$$> _soptoDATlanguage]
    , [("sop",) . ResolveP <$> _soptoDATsop]
    , ["group" <$$> _soptoDATgroup]
    , ["extract" <$$> _soptoDATextract]
    , ["attrib" <$$> _soptoDATattrib]
    , ["uvforpts" <$$> _soptoDATuvforpts]
    , ["extension" <$$> _soptoDATextension]]
  pars (RenderpickDAT {..}) = catMaybes . mconcat $ [ ["position" <$$> _renderpickDATposition]
    , ["wordwrap" <$$> _renderpickDATwordwrap]
    , ["depth" <$$> _renderpickDATdepth]
    , ["extension" <$$> _renderpickDATextension]
    , ["color" <$$> _renderpickDATcolor]
    , ["customattrib2type" <$$> _renderpickDATcustomattrib2type]
    , ["pickradstep" <$$> _renderpickDATpickradstep]
    , ["customattrib1" <$$> _renderpickDATcustomattrib1]
    , ["customattrib2" <$$> _renderpickDATcustomattrib2]
    , ["allowmulticamera" <$$> _renderpickDATallowmulticamera]
    , ["clearprev" <$$> _renderpickDATclearprev]
    , [("callbacks",) . ResolveP <$> _renderpickDATcallbacks]
    , ["activatecallbacks" <$$> _renderpickDATactivatecallbacks]
    , ["mergeinputdat" <$$> _renderpickDATmergeinputdat]
    , ["pickradius" <$$> _renderpickDATpickradius]
    , ["customattrib1type" <$$> _renderpickDATcustomattrib1type]
    , ["language" <$$> _renderpickDATlanguage]
    , ["pickcirstep" <$$> _renderpickDATpickcirstep]
    , ["customattrib3type" <$$> _renderpickDATcustomattrib3type]
    , ["customattrib3" <$$> _renderpickDATcustomattrib3]
    , ["strategy" <$$> _renderpickDATstrategy]
    , ["uv" <$$> _renderpickDATuv]
    , [("rendertop",) . ResolveP <$> _renderpickDATrendertop]
    , ["usepickableflags" <$$> _renderpickDATusepickableflags]
    , ["customattrib4" <$$> _renderpickDATcustomattrib4]
    , ["instanceid" <$$> _renderpickDATinstanceid]
    , ["customattrib4type" <$$> _renderpickDATcustomattrib4type]
    , ["responsetime" <$$> _renderpickDATresponsetime]
    , ["includenonpickable" <$$> _renderpickDATincludenonpickable]
    , ["normal" <$$> _renderpickDATnormal]
    , ["customext" <$$> _renderpickDATcustomext]]
  pars (TouchinDAT {..}) = catMaybes . mconcat $ [ ["customext" <$$> _touchinDATcustomext]
    , ["language" <$$> _touchinDATlanguage]
    , ["active" <$$> _touchinDATactive]
    , ["extension" <$$> _touchinDATextension]
    , ["wordwrap" <$$> _touchinDATwordwrap]
    , ["protocol" <$$> _touchinDATprotocol]
    , ["port" <$$> _touchinDATport]
    , ["address" <$$> _touchinDATaddress]
    , ["shared" <$$> _touchinDATshared]]
  pars (TransposeDAT {..}) = catMaybes . mconcat $ [ ["customext" <$$> _transposeDATcustomext]
    , ["language" <$$> _transposeDATlanguage]
    , ["extension" <$$> _transposeDATextension]
    , ["wordwrap" <$$> _transposeDATwordwrap]]
  pars (InDAT {..}) = catMaybes . mconcat $ [ ["customext" <$$> _inDATcustomext]
    , ["label" <$$> _inDATlabel]
    , ["language" <$$> _inDATlanguage]
    , ["extension" <$$> _inDATextension]
    , ["wordwrap" <$$> _inDATwordwrap]]
  pars (MonitorsDAT {..}) = catMaybes . mconcat $ [ ["customext" <$$> _monitorsDATcustomext]
    , ["language" <$$> _monitorsDATlanguage]
    , ["extension" <$$> _monitorsDATextension]
    , ["wordwrap" <$$> _monitorsDATwordwrap]
    , [("callbacks",) . ResolveP <$> _monitorsDATcallbacks]
    , ["bounds" <$$> _monitorsDATbounds]
    , ["units" <$$> _monitorsDATunits]
    , ["monitors" <$$> _monitorsDATmonitors]]
  pars (UdpinDAT {..}) = catMaybes . mconcat $ [ ["format" <$$> _udpinDATformat]
    , ["active" <$$> _udpinDATactive]
    , ["extension" <$$> _udpinDATextension]
    , ["customext" <$$> _udpinDATcustomext]
    , ["protocol" <$$> _udpinDATprotocol]
    , ["address" <$$> _udpinDATaddress]
    , ["shared" <$$> _udpinDATshared]
    , ["clamp" <$$> _udpinDATclamp]
    , ["language" <$$> _udpinDATlanguage]
    , ["maxlines" <$$> _udpinDATmaxlines]
    , ["executeloc" <$$> _udpinDATexecuteloc]
    , ["wordwrap" <$$> _udpinDATwordwrap]
    , [("callbacks",) . ResolveP <$> _udpinDATcallbacks]
    , ["clear" <$$> _udpinDATclear]
    , ["port" <$$> _udpinDATport]
    , ["bytes" <$$> _udpinDATbytes]]
  pars (ExamineDAT {..}) = catMaybes . mconcat $ [ ["type" <$$> _examineDATtype]
    , ["subkey" <$$> _examineDATsubkey]
    , ["extension" <$$> _examineDATextension]
    , ["outputkey" <$$> _examineDAToutputkey]
    , ["value" <$$> _examineDATvalue]
    , ["outputheaders" <$$> _examineDAToutputheaders]
    , ["wordwrap" <$$> _examineDATwordwrap]
    , ["outputtype" <$$> _examineDAToutputtype]
    , ["outputlevel" <$$> _examineDAToutputlevel]
    , ["maxlevels" <$$> _examineDATmaxlevels]
    , ["expandclasses" <$$> _examineDATexpandclasses]
    , ["customext" <$$> _examineDATcustomext]
    , ["language" <$$> _examineDATlanguage]
    , ["level" <$$> _examineDATlevel]
    , ["format" <$$> _examineDATformat]
    , ["expression" <$$> _examineDATexpression]
    , ["source" <$$> _examineDATsource]
    , ["outputvalue" <$$> _examineDAToutputvalue]
    , ["key" <$$> _examineDATkey]]
  pars (WebDAT {..}) = catMaybes . mconcat $ [ ["fetch" <$$> _webDATfetch]
    , ["extension" <$$> _webDATextension]
    , ["wordwrap" <$$> _webDATwordwrap]
    , ["url" <$$> _webDATurl]
    , ["disconnect" <$$> _webDATdisconnect]
    , ["submitfetch" <$$> _webDATsubmitfetch]
    , ["includeheader" <$$> _webDATincludeheader]
    , ["customext" <$$> _webDATcustomext]
    , ["language" <$$> _webDATlanguage]
    , ["asyncfetch" <$$> _webDATasyncfetch]
    , ["verifypeer" <$$> _webDATverifypeer]
    , ["timeout" <$$> _webDATtimeout]
    , ["method" <$$> _webDATmethod]]
  pars (UdtoutDAT {..}) = catMaybes . mconcat $ [ ["format" <$$> _udtoutDATformat]
    , ["active" <$$> _udtoutDATactive]
    , ["extension" <$$> _udtoutDATextension]
    , ["customext" <$$> _udtoutDATcustomext]
    , ["protocol" <$$> _udtoutDATprotocol]
    , ["shared" <$$> _udtoutDATshared]
    , ["clamp" <$$> _udtoutDATclamp]
    , ["language" <$$> _udtoutDATlanguage]
    , ["maxlines" <$$> _udtoutDATmaxlines]
    , ["executeloc" <$$> _udtoutDATexecuteloc]
    , ["wordwrap" <$$> _udtoutDATwordwrap]
    , [("callbacks",) . ResolveP <$> _udtoutDATcallbacks]
    , ["clear" <$$> _udtoutDATclear]
    , ["port" <$$> _udtoutDATport]
    , ["bytes" <$$> _udtoutDATbytes]]
  pars (IndicesDAT {..}) = catMaybes . mconcat $ [ ["start" <$$> _indicesDATstart]
    , ["end" <$$> _indicesDATend]
    , ["customext" <$$> _indicesDATcustomext]
    , ["language" <$$> _indicesDATlanguage]
    , ["extension" <$$> _indicesDATextension]
    , ["level" <$$> _indicesDATlevel]
    , ["wordwrap" <$$> _indicesDATwordwrap]
    , ["origin" <$$> _indicesDATorigin]]
  pars (DatexecuteDAT {..}) = catMaybes . mconcat $ [ ["rowchange" <$$> _datexecuteDATrowchange]
    , ["edit" <$$> _datexecuteDATedit]
    , ["active" <$$> _datexecuteDATactive]
    , ["extension" <$$> _datexecuteDATextension]
    , ["tablechange" <$$> _datexecuteDATtablechange]
    , ["execute" <$$> _datexecuteDATexecute]
    , ["customext" <$$> _datexecuteDATcustomext]
    , ["language" <$$> _datexecuteDATlanguage]
    , ["executeloc" <$$> _datexecuteDATexecuteloc]
    , ["wordwrap" <$$> _datexecuteDATwordwrap]
    , ["colchange" <$$> _datexecuteDATcolchange]
    , ["cellchange" <$$> _datexecuteDATcellchange]
    , [("dat",) . ResolveP <$> _datexecuteDATdat]
    , ["sizechange" <$$> _datexecuteDATsizechange]]
  pars (TableDAT {..}) = catMaybes . mconcat $ [ ["cols" <$$> _tableDATcols]
    , ["file" <$$> _tableDATfile]
    , ["writepulse" <$$> _tableDATwritepulse]
    , ["edit" <$$> _tableDATedit]
    , ["rows" <$$> _tableDATrows]
    , ["write" <$$> _tableDATwrite]
    , ["loadonstartpulse" <$$> _tableDATloadonstartpulse]
    , ["customext" <$$> _tableDATcustomext]
    , ["language" <$$> _tableDATlanguage]
    , ["wordwrap" <$$> _tableDATwordwrap]
    , ["loadonstart" <$$> _tableDATloadonstart]
    , ["dims" <$$> _tableDATdims]
    , ["extension" <$$> _tableDATextension]
    , ["removeblank" <$$> _tableDATremoveblank]]
  pars (XmlDAT {..}) = catMaybes . mconcat $ [ ["extension" <$$> _xmlDATextension]
    , ["pvalue" <$$> _xmlDATpvalue]
    , ["oavalue" <$$> _xmlDAToavalue]
    , ["pname" <$$> _xmlDATpname]
    , ["label" <$$> _xmlDATlabel]
    , ["plabel" <$$> _xmlDATplabel]
    , ["mlabel" <$$> _xmlDATmlabel]
    , ["text" <$$> _xmlDATtext]
    , ["merge" <$$> _xmlDATmerge]
    , ["sgml" <$$> _xmlDATsgml]
    , ["type" <$$> _xmlDATtype]
    , ["oaname" <$$> _xmlDAToaname]
    , ["show" <$$> _xmlDATshow]
    , ["ptext" <$$> _xmlDATptext]
    , ["name" <$$> _xmlDATname]
    , ["lprefix" <$$> _xmlDATlprefix]
    , ["ptype" <$$> _xmlDATptype]
    , ["customext" <$$> _xmlDATcustomext]
    , ["language" <$$> _xmlDATlanguage]
    , ["wordwrap" <$$> _xmlDATwordwrap]
    , ["value" <$$> _xmlDATvalue]
    , ["oclabel" <$$> _xmlDAToclabel]]
  pars (InsertDAT {..}) = catMaybes . mconcat $ [ ["index" <$$> _insertDATindex]
    , ["customext" <$$> _insertDATcustomext]
    , ["language" <$$> _insertDATlanguage]
    , ["extension" <$$> _insertDATextension]
    , ["contents" <$$> _insertDATcontents]
    , ["insert" <$$> _insertDATinsert]
    , ["wordwrap" <$$> _insertDATwordwrap]
    , ["at" <$$> _insertDATat]]
  pars (ExecuteDAT {..}) = catMaybes . mconcat $ [ ["devicechange" <$$> _executeDATdevicechange]
    , ["start" <$$> _executeDATstart]
    , ["active" <$$> _executeDATactive]
    , ["extension" <$$> _executeDATextension]
    , ["playstatechange" <$$> _executeDATplaystatechange]
    , ["edit" <$$> _executeDATedit]
    , ["wordwrap" <$$> _executeDATwordwrap]
    , ["projectpostsave" <$$> _executeDATprojectpostsave]
    , ["frameend" <$$> _executeDATframeend]
    , ["projectpresave" <$$> _executeDATprojectpresave]
    , ["create" <$$> _executeDATcreate]
    , ["customext" <$$> _executeDATcustomext]
    , ["exit" <$$> _executeDATexit]
    , ["executeloc" <$$> _executeDATexecuteloc]
    , ["framestart" <$$> _executeDATframestart]
    , ["language" <$$> _executeDATlanguage]]
  pars (OscinDAT {..}) = catMaybes . mconcat $ [ ["bundletimestamp" <$$> _oscinDATbundletimestamp]
    , ["port" <$$> _oscinDATport]
    , ["clear" <$$> _oscinDATclear]
    , ["active" <$$> _oscinDATactive]
    , ["extension" <$$> _oscinDATextension]
    , ["protocol" <$$> _oscinDATprotocol]
    , ["splitmessage" <$$> _oscinDATsplitmessage]
    , ["address" <$$> _oscinDATaddress]
    , ["shared" <$$> _oscinDATshared]
    , ["clamp" <$$> _oscinDATclamp]
    , ["customext" <$$> _oscinDATcustomext]
    , ["maxlines" <$$> _oscinDATmaxlines]
    , ["executeloc" <$$> _oscinDATexecuteloc]
    , ["wordwrap" <$$> _oscinDATwordwrap]
    , [("callbacks",) . ResolveP <$> _oscinDATcallbacks]
    , ["language" <$$> _oscinDATlanguage]
    , ["typetag" <$$> _oscinDATtypetag]
    , ["addscope" <$$> _oscinDATaddscope]
    , ["splitbundle" <$$> _oscinDATsplitbundle]
    , ["bytes" <$$> _oscinDATbytes]]
  pars (UdtinDAT {..}) = catMaybes . mconcat $ [ ["format" <$$> _udtinDATformat]
    , ["active" <$$> _udtinDATactive]
    , ["extension" <$$> _udtinDATextension]
    , ["customext" <$$> _udtinDATcustomext]
    , ["protocol" <$$> _udtinDATprotocol]
    , ["address" <$$> _udtinDATaddress]
    , ["shared" <$$> _udtinDATshared]
    , ["clamp" <$$> _udtinDATclamp]
    , ["language" <$$> _udtinDATlanguage]
    , ["maxlines" <$$> _udtinDATmaxlines]
    , ["executeloc" <$$> _udtinDATexecuteloc]
    , ["wordwrap" <$$> _udtinDATwordwrap]
    , [("callbacks",) . ResolveP <$> _udtinDATcallbacks]
    , ["clear" <$$> _udtinDATclear]
    , ["port" <$$> _udtinDATport]
    , ["bytes" <$$> _udtinDATbytes]]
  pars _ = []
  opType (SerialDAT {}) = "serialDAT"
  opType (TcpipDAT {}) = "tcpipDAT"
  opType (EvaluateDAT {}) = "evaluateDAT"
  opType (ChoptoDAT {}) = "choptoDAT"
  opType (ChopexecuteDAT {}) = "chopexecuteDAT"
  opType (PerformDAT {}) = "performDAT"
  opType (ClipDAT {}) = "clipDAT"
  opType (TuioinDAT {}) = "tuioinDAT"
  opType (ConvertDAT {}) = "convertDAT"
  opType (ScriptDAT {}) = "scriptDAT"
  opType (NullDAT {}) = "nullDAT"
  opType (ReorderDAT {}) = "reorderDAT"
  opType (ErrorDAT {}) = "errorDAT"
  opType (OpexecuteDAT {}) = "opexecuteDAT"
  opType (EtherdreamDAT {}) = "etherdreamDAT"
  opType (MidiinDAT {}) = "midiinDAT"
  opType (SelectDAT {}) = "selectDAT"
  opType (FileoutDAT {}) = "fileoutDAT"
  opType (OscoutDAT {}) = "oscoutDAT"
  opType (MidieventDAT {}) = "midieventDAT"
  opType (ArtnetDAT {}) = "artnetDAT"
  opType (SubstituteDAT {}) = "substituteDAT"
  opType (SortDAT {}) = "sortDAT"
  opType (KeyboardinDAT {}) = "keyboardinDAT"
  opType (ParameterexecuteDAT {}) = "parameterexecuteDAT"
  opType (FifoDAT {}) = "fifoDAT"
  opType (MultitouchinDAT {}) = "multitouchinDAT"
  opType (SwitchDAT {}) = "switchDAT"
  opType (FolderDAT {}) = "folderDAT"
  opType (MergeDAT {}) = "mergeDAT"
  opType (InfoDAT {}) = "infoDAT"
  opType (TextDAT {}) = "textDAT"
  opType (OutDAT {}) = "outDAT"
  opType (TouchoutDAT {}) = "touchoutDAT"
  opType (PanelexecuteDAT {}) = "panelexecuteDAT"
  opType (FileinDAT {}) = "fileinDAT"
  opType (OpfindDAT {}) = "opfindDAT"
  opType (MqttclientDAT {}) = "mqttclientDAT"
  opType (WebsocketDAT {}) = "websocketDAT"
  opType (UdpoutDAT {}) = "udpoutDAT"
  opType (SoptoDAT {}) = "soptoDAT"
  opType (RenderpickDAT {}) = "renderpickDAT"
  opType (TouchinDAT {}) = "touchinDAT"
  opType (TransposeDAT {}) = "transposeDAT"
  opType (InDAT {}) = "inDAT"
  opType (MonitorsDAT {}) = "monitorsDAT"
  opType (UdpinDAT {}) = "udpinDAT"
  opType (ExamineDAT {}) = "examineDAT"
  opType (WebDAT {}) = "webDAT"
  opType (UdtoutDAT {}) = "udtoutDAT"
  opType (IndicesDAT {}) = "indicesDAT"
  opType (DatexecuteDAT {}) = "datexecuteDAT"
  opType (TableDAT {}) = "tableDAT"
  opType (XmlDAT {}) = "xmlDAT"
  opType (InsertDAT {}) = "insertDAT"
  opType (ExecuteDAT {}) = "executeDAT"
  opType (OscinDAT {}) = "oscinDAT"
  opType (UdtinDAT {}) = "udtinDAT"
  text (TextDAT {..}) = _textBlob
  text _ = Nothing
  commands = view datCommands
  connections = view datIns


instance Op COMP where 
  pars (FieldCOMP {..}) = catMaybes . mconcat $ [ ["topborder" <$$> _fieldCOMPtopborder]
    , ["fieldprotected" <$$> _fieldCOMPfieldprotected]
    , ["scrollbarthickness" <$$> _fieldCOMPscrollbarthickness]
    , ["w" <$$> _fieldCOMPw]
    , ["alignorder" <$$> _fieldCOMPalignorder]
    , ["loadondemand" <$$> _fieldCOMPloadondemand]
    , ["justifyh" <$$> _fieldCOMPjustifyh]
    , ["promoteextension4" <$$> _fieldCOMPpromoteextension4]
    , [("dropdestscript",) . ResolveP <$> _fieldCOMPdropdestscript]
    , ["repositionxmin" <$$> _fieldCOMPrepositionxmin]
    , ["x" <$$> _fieldCOMPx]
    , ["nodeview" <$$> _fieldCOMPnodeview]
    , ["repositionymax" <$$> _fieldCOMPrepositionymax]
    , ["margint" <$$> _fieldCOMPmargint]
    , ["resizer" <$$> _fieldCOMPresizer]
    , [("droptypescript",) . ResolveP <$> _fieldCOMPdroptypescript]
    , ["promoteextension2" <$$> _fieldCOMPpromoteextension2]
    , ["fixedaspect" <$$> _fieldCOMPfixedaspect]
    , ["extname1" <$$> _fieldCOMPextname1]
    , ["marginl" <$$> _fieldCOMPmarginl]
    , ["dodisablecolor" <$$> _fieldCOMPdodisablecolor]
    , ["multitouch" <$$> _fieldCOMPmultitouch]
    , ["bgalpha" <$$> _fieldCOMPbgalpha]
    , ["fieldnoshift" <$$> _fieldCOMPfieldnoshift]
    , ["hmode" <$$> _fieldCOMPhmode]
    , ["savebackup" <$$> _fieldCOMPsavebackup]
    , ["uvbuttonsmiddle" <$$> _fieldCOMPuvbuttonsmiddle]
    , ["leftanchor" <$$> _fieldCOMPleftanchor]
    , ["clickthrough" <$$> _fieldCOMPclickthrough]
    , ["disablealpha" <$$> _fieldCOMPdisablealpha]
    , ["vmode" <$$> _fieldCOMPvmode]
    , ["vorigin" <$$> _fieldCOMPvorigin]
    , ["drag" <$$> _fieldCOMPdrag]
    , Just <$> rgbMap "disablecolor" _fieldCOMPdisablecolor
    , ["resizehmin" <$$> _fieldCOMPresizehmin]
    , ["extname3" <$$> _fieldCOMPextname3]
    , ["borderaalpha" <$$> _fieldCOMPborderaalpha]
    , ["overlay" <$$> _fieldCOMPoverlay]
    , ["repositionymin" <$$> _fieldCOMPrepositionymin]
    , ["enablecloning" <$$> _fieldCOMPenablecloning]
    , ["subcompname" <$$> _fieldCOMPsubcompname]
    , ["align" <$$> _fieldCOMPalign]
    , ["reloadtoxonstart" <$$> _fieldCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _fieldCOMPreinitnet]
    , ["fieldcursor" <$$> _fieldCOMPfieldcursor]
    , ["marginr" <$$> _fieldCOMPmarginr]
    , ["parentshortcut" <$$> _fieldCOMPparentshortcut]
    , ["resizet" <$$> _fieldCOMPresizet]
    , ["extension4" <$$> _fieldCOMPextension4]
    , ["fieldconspaces" <$$> _fieldCOMPfieldconspaces]
    , ["leftborderi" <$$> _fieldCOMPleftborderi]
    , ["repocomp" <$$> _fieldCOMPrepocomp]
    , ["topanchor" <$$> _fieldCOMPtopanchor]
    , ["anchordrag" <$$> _fieldCOMPanchordrag]
    , ["bottomborderi" <$$> _fieldCOMPbottomborderi]
    , ["rightborder" <$$> _fieldCOMPrightborder]
    , ["bottomborder" <$$> _fieldCOMPbottomborder]
    , ["layer" <$$> _fieldCOMPlayer]
    , [("chop",) . ResolveP <$> _fieldCOMPchop]
    , ["reinitextensions" <$$> _fieldCOMPreinitextensions]
    , ["topborderi" <$$> _fieldCOMPtopborderi]
    , ["alignallow" <$$> _fieldCOMPalignallow]
    , [("dragdropcallbacks",) . ResolveP <$> _fieldCOMPdragdropcallbacks]
    , ["rightborderi" <$$> _fieldCOMPrightborderi]
    , ["resizel" <$$> _fieldCOMPresizel]
    , ["vfillweight" <$$> _fieldCOMPvfillweight]
    , ["borderover" <$$> _fieldCOMPborderover]
    , ["namedchop" <$$> _fieldCOMPnamedchop]
    , ["marginb" <$$> _fieldCOMPmarginb]
    , ["repositionxmax" <$$> _fieldCOMPrepositionxmax]
    , ["extension2" <$$> _fieldCOMPextension2]
    , ["borderbalpha" <$$> _fieldCOMPborderbalpha]
    , ["justifyv" <$$> _fieldCOMPjustifyv]
    , Just <$> vec2Map' "postoffset" _fieldCOMPpostoffset
    , ["promoteextension3" <$$> _fieldCOMPpromoteextension3]
    , ["topoffset" <$$> _fieldCOMPtopoffset]
    , ["composite" <$$> _fieldCOMPcomposite]
    , [("dragscript",) . ResolveP <$> _fieldCOMPdragscript]
    , ["multrgb" <$$> _fieldCOMPmultrgb]
    , ["extension1" <$$> _fieldCOMPextension1]
    , ["drop" <$$> _fieldCOMPdrop]
    , [("fieldfocus",) . ResolveP <$> _fieldCOMPfieldfocus]
    , ["promoteextension1" <$$> _fieldCOMPpromoteextension1]
    , Just <$> rgbMap "bordera" _fieldCOMPbordera
    , ["uvbuttonsleft" <$$> _fieldCOMPuvbuttonsleft]
    , Just <$> rgbMap "bgcolor" _fieldCOMPbgcolor
    , ["resizehmax" <$$> _fieldCOMPresizehmax]
    , [("helpdat",) . ResolveP <$> _fieldCOMPhelpdat]
    , ["extension3" <$$> _fieldCOMPextension3]
    , ["fieldtype" <$$> _fieldCOMPfieldtype]
    , ["externaltox" <$$> _fieldCOMPexternaltox]
    , ["rightanchor" <$$> _fieldCOMPrightanchor]
    , ["extname2" <$$> _fieldCOMPextname2]
    , ["h" <$$> _fieldCOMPh]
    , ["leftborder" <$$> _fieldCOMPleftborder]
    , ["topfill" <$$> _fieldCOMPtopfill]
    , ["resizewmin" <$$> _fieldCOMPresizewmin]
    , ["mouserel" <$$> _fieldCOMPmouserel]
    , ["enablecloningpulse" <$$> _fieldCOMPenablecloningpulse]
    , Just <$> vec2Map' "offset" _fieldCOMPoffset
    , ["resizeb" <$$> _fieldCOMPresizeb]
    , ["leftoffset" <$$> _fieldCOMPleftoffset]
    , ["y" <$$> _fieldCOMPy]
    , ["pvscrollbar" <$$> _fieldCOMPpvscrollbar]
    , ["crop" <$$> _fieldCOMPcrop]
    , ["bottomoffset" <$$> _fieldCOMPbottomoffset]
    , ["display" <$$> _fieldCOMPdisplay]
    , ["fit" <$$> _fieldCOMPfit]
    , ["aspect" <$$> _fieldCOMPaspect]
    , ["extname4" <$$> _fieldCOMPextname4]
    , ["uvbuttonsright" <$$> _fieldCOMPuvbuttonsright]
    , ["resizewmax" <$$> _fieldCOMPresizewmax]
    , Just <$> rgbMap "borderb" _fieldCOMPborderb
    , ["bottomanchor" <$$> _fieldCOMPbottomanchor]
    , ["sizefromwindow" <$$> _fieldCOMPsizefromwindow]
    , ["opacity" <$$> _fieldCOMPopacity]
    , [("top",) . ResolveP <$> _fieldCOMPtop]
    , ["mousewheel" <$$> _fieldCOMPmousewheel]
    , ["overridemethod" <$$> _fieldCOMPoverridemethod]
    , ["reposition" <$$> _fieldCOMPreposition]
    , ["enable" <$$> _fieldCOMPenable]
    , ["fieldexpand" <$$> _fieldCOMPfieldexpand]
    , ["rightoffset" <$$> _fieldCOMPrightoffset]
    , ["vieweraspect" <$$> _fieldCOMPvieweraspect]
    , ["alignmax" <$$> _fieldCOMPalignmax]
    , ["scrolloverlay" <$$> _fieldCOMPscrolloverlay]
    , [("clone",) . ResolveP <$> _fieldCOMPclone]
    , ["keepmemory" <$$> _fieldCOMPkeepmemory]
    , [("dropscript",) . ResolveP <$> _fieldCOMPdropscript]
    , ["fieldlock" <$$> _fieldCOMPfieldlock]
    , ["hfillweight" <$$> _fieldCOMPhfillweight]
    , ["horigin" <$$> _fieldCOMPhorigin]
    , ["spacing" <$$> _fieldCOMPspacing]
    , Just <$> vec2Map' "scale" _fieldCOMPscale
    , ["phscrollbar" <$$> _fieldCOMPphscrollbar]
    , ["opshortcut" <$$> _fieldCOMPopshortcut]
    , ["cursor" <$$> _fieldCOMPcursor]]
  pars (SharedmemoutCOMP {..}) = catMaybes . mconcat $ [ ["instancea" <$$> _sharedmemoutCOMPinstancea]
    , ["instancerotupy" <$$> _sharedmemoutCOMPinstancerotupy]
    , ["extname1" <$$> _sharedmemoutCOMPextname1]
    , ["instancerottoz" <$$> _sharedmemoutCOMPinstancerottoz]
    , ["promoteextension4" <$$> _sharedmemoutCOMPpromoteextension4]
    , ["instanceb" <$$> _sharedmemoutCOMPinstanceb]
    , ["extension4" <$$> _sharedmemoutCOMPextension4]
    , ["pathorient" <$$> _sharedmemoutCOMPpathorient]
    , ["roll" <$$> _sharedmemoutCOMProll]
    , ["nodeview" <$$> _sharedmemoutCOMPnodeview]
    , ["instancepx" <$$> _sharedmemoutCOMPinstancepx]
    , Just <$> vec3Map' "pt" _sharedmemoutCOMPpt
    , ["instancetexanisotropy" <$$> _sharedmemoutCOMPinstancetexanisotropy]
    , ["prioritymethod" <$$> _sharedmemoutCOMPprioritymethod]
    , ["instancefirstrow" <$$> _sharedmemoutCOMPinstancefirstrow]
    , ["bank" <$$> _sharedmemoutCOMPbank]
    , ["instancety" <$$> _sharedmemoutCOMPinstancety]
    , ["instancery" <$$> _sharedmemoutCOMPinstancery]
    , Just <$> vec3Map' "p" _sharedmemoutCOMPp
    , ["savebackup" <$$> _sharedmemoutCOMPsavebackup]
    , ["pos" <$$> _sharedmemoutCOMPpos]
    , [("pathsop",) . ResolveP <$> _sharedmemoutCOMPpathsop]
    , ["subcompname" <$$> _sharedmemoutCOMPsubcompname]
    , ["pickpriority" <$$> _sharedmemoutCOMPpickpriority]
    , ["instancetexfilter" <$$> _sharedmemoutCOMPinstancetexfilter]
    , Just <$> vec3Map' "pr" _sharedmemoutCOMPpr
    , ["instanceg" <$$> _sharedmemoutCOMPinstanceg]
    , ["instancetexmode" <$$> _sharedmemoutCOMPinstancetexmode]
    , Just <$> rgbMap "wcolor" _sharedmemoutCOMPwcolor
    , ["instancepy" <$$> _sharedmemoutCOMPinstancepy]
    , ["reloadtoxonstart" <$$> _sharedmemoutCOMPreloadtoxonstart]
    , ["instancesz" <$$> _sharedmemoutCOMPinstancesz]
    , ["externaltox" <$$> _sharedmemoutCOMPexternaltox]
    , ["parentshortcut" <$$> _sharedmemoutCOMPparentshortcut]
    , ["instancesy" <$$> _sharedmemoutCOMPinstancesy]
    , ["numinstances" <$$> _sharedmemoutCOMPnuminstances]
    , Just <$> vec3Map' "up" _sharedmemoutCOMPup
    , ["promoteextension1" <$$> _sharedmemoutCOMPpromoteextension1]
    , ["instrord" <$$> _sharedmemoutCOMPinstrord]
    , ["pxord" <$$> _sharedmemoutCOMPpxord]
    , ["instancetexindex" <$$> _sharedmemoutCOMPinstancetexindex]
    , ["instancerottox" <$$> _sharedmemoutCOMPinstancerottox]
    , ["reinitextensions" <$$> _sharedmemoutCOMPreinitextensions]
    , ["instancesx" <$$> _sharedmemoutCOMPinstancesx]
    , ["instancing" <$$> _sharedmemoutCOMPinstancing]
    , ["name" <$$> _sharedmemoutCOMPname]
    , ["prord" <$$> _sharedmemoutCOMPprord]
    , ["lookup" <$$> _sharedmemoutCOMPlookup]
    , ["instancerz" <$$> _sharedmemoutCOMPinstancerz]
    , ["extension2" <$$> _sharedmemoutCOMPextension2]
    , ["drawpriority" <$$> _sharedmemoutCOMPdrawpriority]
    , ["instanceu" <$$> _sharedmemoutCOMPinstanceu]
    , ["render" <$$> _sharedmemoutCOMPrender]
    , ["extension1" <$$> _sharedmemoutCOMPextension1]
    , Just <$> vec3Map' "ps" _sharedmemoutCOMPps
    , ["instancetexextendv" <$$> _sharedmemoutCOMPinstancetexextendv]
    , ["extension3" <$$> _sharedmemoutCOMPextension3]
    , ["pxform" <$$> _sharedmemoutCOMPpxform]
    , [("material",) . ResolveP <$> _sharedmemoutCOMPmaterial]
    , ["instancer" <$$> _sharedmemoutCOMPinstancer]
    , Just <$> vec3Map' "r" _sharedmemoutCOMPr
    , ["enablecloning" <$$> _sharedmemoutCOMPenablecloning]
    , ["instancecolormode" <$$> _sharedmemoutCOMPinstancecolormode]
    , Just <$> vec3Map' "pp" _sharedmemoutCOMPpp
    , ["instancew" <$$> _sharedmemoutCOMPinstancew]
    , ["instancerx" <$$> _sharedmemoutCOMPinstancerx]
    , ["extname2" <$$> _sharedmemoutCOMPextname2]
    , ["opshortcut" <$$> _sharedmemoutCOMPopshortcut]
    , ["pcommit" <$$> _sharedmemoutCOMPpcommit]
    , ["promoteextension2" <$$> _sharedmemoutCOMPpromoteextension2]
    , ["instanceorder" <$$> _sharedmemoutCOMPinstanceorder]
    , ["enablecloningpulse" <$$> _sharedmemoutCOMPenablecloningpulse]
    , ["reinitnet" <$$> _sharedmemoutCOMPreinitnet]
    , ["instancetexextendu" <$$> _sharedmemoutCOMPinstancetexextendu]
    , ["instancemode" <$$> _sharedmemoutCOMPinstancemode]
    , ["instancerottoorder" <$$> _sharedmemoutCOMPinstancerottoorder]
    , ["instancepz" <$$> _sharedmemoutCOMPinstancepz]
    , [("instancetexs",) . ResolveP <$> _sharedmemoutCOMPinstancetexs]
    , ["promoteextension3" <$$> _sharedmemoutCOMPpromoteextension3]
    , ["active" <$$> _sharedmemoutCOMPactive]
    , ["extname4" <$$> _sharedmemoutCOMPextname4]
    , ["instancetx" <$$> _sharedmemoutCOMPinstancetx]
    , ["instancerotupz" <$$> _sharedmemoutCOMPinstancerotupz]
    , ["rord" <$$> _sharedmemoutCOMPrord]
    , ["preset" <$$> _sharedmemoutCOMPpreset]
    , ["xord" <$$> _sharedmemoutCOMPxord]
    , Just <$> vec3Map' "t" _sharedmemoutCOMPt
    , Just <$> vec3Map' "s" _sharedmemoutCOMPs
    , ["extname3" <$$> _sharedmemoutCOMPextname3]
    , [("clone",) . ResolveP <$> _sharedmemoutCOMPclone]
    , ["instxord" <$$> _sharedmemoutCOMPinstxord]
    , ["instancerotupx" <$$> _sharedmemoutCOMPinstancerotupx]
    , ["instancetexextendw" <$$> _sharedmemoutCOMPinstancetexextendw]
    , ["loadondemand" <$$> _sharedmemoutCOMPloadondemand]
    , ["instancerottoy" <$$> _sharedmemoutCOMPinstancerottoy]
    , ["instancev" <$$> _sharedmemoutCOMPinstancev]
    , ["instancetz" <$$> _sharedmemoutCOMPinstancetz]]
  pars (TableCOMP {..}) = catMaybes . mconcat $ [ ["topborder" <$$> _tableCOMPtopborder]
    , ["scrollbarthickness" <$$> _tableCOMPscrollbarthickness]
    , ["w" <$$> _tableCOMPw]
    , ["alignorder" <$$> _tableCOMPalignorder]
    , ["loadondemand" <$$> _tableCOMPloadondemand]
    , ["justifyh" <$$> _tableCOMPjustifyh]
    , ["promoteextension4" <$$> _tableCOMPpromoteextension4]
    , ["tablereset" <$$> _tableCOMPtablereset]
    , ["repositionxmin" <$$> _tableCOMPrepositionxmin]
    , ["x" <$$> _tableCOMPx]
    , ["nodeview" <$$> _tableCOMPnodeview]
    , ["repositionymax" <$$> _tableCOMPrepositionymax]
    , ["margint" <$$> _tableCOMPmargint]
    , ["resizer" <$$> _tableCOMPresizer]
    , [("dragscript",) . ResolveP <$> _tableCOMPdragscript]
    , ["promoteextension2" <$$> _tableCOMPpromoteextension2]
    , ["fixedaspect" <$$> _tableCOMPfixedaspect]
    , ["extname1" <$$> _tableCOMPextname1]
    , ["marginl" <$$> _tableCOMPmarginl]
    , ["dodisablecolor" <$$> _tableCOMPdodisablecolor]
    , ["multitouch" <$$> _tableCOMPmultitouch]
    , ["bgalpha" <$$> _tableCOMPbgalpha]
    , ["hmode" <$$> _tableCOMPhmode]
    , ["savebackup" <$$> _tableCOMPsavebackup]
    , ["uvbuttonsmiddle" <$$> _tableCOMPuvbuttonsmiddle]
    , ["leftanchor" <$$> _tableCOMPleftanchor]
    , ["clickthrough" <$$> _tableCOMPclickthrough]
    , ["disablealpha" <$$> _tableCOMPdisablealpha]
    , ["vmode" <$$> _tableCOMPvmode]
    , [("droptypescript",) . ResolveP <$> _tableCOMPdroptypescript]
    , ["vorigin" <$$> _tableCOMPvorigin]
    , ["drag" <$$> _tableCOMPdrag]
    , Just <$> rgbMap "disablecolor" _tableCOMPdisablecolor
    , ["resizehmin" <$$> _tableCOMPresizehmin]
    , ["extname3" <$$> _tableCOMPextname3]
    , ["borderaalpha" <$$> _tableCOMPborderaalpha]
    , ["overlay" <$$> _tableCOMPoverlay]
    , ["repositionymin" <$$> _tableCOMPrepositionymin]
    , ["enablecloning" <$$> _tableCOMPenablecloning]
    , ["subcompname" <$$> _tableCOMPsubcompname]
    , ["rightanchor" <$$> _tableCOMPrightanchor]
    , ["reloadtoxonstart" <$$> _tableCOMPreloadtoxonstart]
    , [("dropdestscript",) . ResolveP <$> _tableCOMPdropdestscript]
    , ["marginr" <$$> _tableCOMPmarginr]
    , ["parentshortcut" <$$> _tableCOMPparentshortcut]
    , ["mousewheel" <$$> _tableCOMPmousewheel]
    , ["extension4" <$$> _tableCOMPextension4]
    , [("colattributes",) . ResolveP <$> _tableCOMPcolattributes]
    , ["phscrollbar" <$$> _tableCOMPphscrollbar]
    , ["leftborderi" <$$> _tableCOMPleftborderi]
    , ["repocomp" <$$> _tableCOMPrepocomp]
    , ["topanchor" <$$> _tableCOMPtopanchor]
    , ["anchordrag" <$$> _tableCOMPanchordrag]
    , ["bottomborderi" <$$> _tableCOMPbottomborderi]
    , ["rightborder" <$$> _tableCOMPrightborder]
    , ["layer" <$$> _tableCOMPlayer]
    , ["reinitextensions" <$$> _tableCOMPreinitextensions]
    , ["topborderi" <$$> _tableCOMPtopborderi]
    , ["alignallow" <$$> _tableCOMPalignallow]
    , [("dragdropcallbacks",) . ResolveP <$> _tableCOMPdragdropcallbacks]
    , ["rightborderi" <$$> _tableCOMPrightborderi]
    , ["resizel" <$$> _tableCOMPresizel]
    , ["vfillweight" <$$> _tableCOMPvfillweight]
    , ["borderover" <$$> _tableCOMPborderover]
    , ["namedchop" <$$> _tableCOMPnamedchop]
    , [("values",) . ResolveP <$> _tableCOMPvalues]
    , ["repositionxmax" <$$> _tableCOMPrepositionxmax]
    , ["extension2" <$$> _tableCOMPextension2]
    , ["borderbalpha" <$$> _tableCOMPborderbalpha]
    , ["justifyv" <$$> _tableCOMPjustifyv]
    , Just <$> vec2Map' "postoffset" _tableCOMPpostoffset
    , ["reinitnet" <$$> _tableCOMPreinitnet]
    , ["promoteextension3" <$$> _tableCOMPpromoteextension3]
    , ["topoffset" <$$> _tableCOMPtopoffset]
    , ["composite" <$$> _tableCOMPcomposite]
    , ["tableoffsety" <$$> _tableCOMPtableoffsety]
    , ["multrgb" <$$> _tableCOMPmultrgb]
    , ["extension1" <$$> _tableCOMPextension1]
    , ["tablerows" <$$> _tableCOMPtablerows]
    , ["promoteextension1" <$$> _tableCOMPpromoteextension1]
    , Just <$> rgbMap "bordera" _tableCOMPbordera
    , ["uvbuttonsleft" <$$> _tableCOMPuvbuttonsleft]
    , Just <$> rgbMap "bgcolor" _tableCOMPbgcolor
    , ["resizehmax" <$$> _tableCOMPresizehmax]
    , [("helpdat",) . ResolveP <$> _tableCOMPhelpdat]
    , ["extension3" <$$> _tableCOMPextension3]
    , ["drop" <$$> _tableCOMPdrop]
    , ["externaltox" <$$> _tableCOMPexternaltox]
    , [("attributes",) . ResolveP <$> _tableCOMPattributes]
    , ["align" <$$> _tableCOMPalign]
    , [("rowattributes",) . ResolveP <$> _tableCOMProwattributes]
    , ["extname2" <$$> _tableCOMPextname2]
    , ["h" <$$> _tableCOMPh]
    , ["leftborder" <$$> _tableCOMPleftborder]
    , ["topfill" <$$> _tableCOMPtopfill]
    , ["resizewmin" <$$> _tableCOMPresizewmin]
    , ["mouserel" <$$> _tableCOMPmouserel]
    , ["enablecloningpulse" <$$> _tableCOMPenablecloningpulse]
    , Just <$> vec2Map' "offset" _tableCOMPoffset
    , ["resizeb" <$$> _tableCOMPresizeb]
    , ["leftoffset" <$$> _tableCOMPleftoffset]
    , ["y" <$$> _tableCOMPy]
    , ["pvscrollbar" <$$> _tableCOMPpvscrollbar]
    , ["crop" <$$> _tableCOMPcrop]
    , ["bottomoffset" <$$> _tableCOMPbottomoffset]
    , ["display" <$$> _tableCOMPdisplay]
    , ["fit" <$$> _tableCOMPfit]
    , ["aspect" <$$> _tableCOMPaspect]
    , ["extname4" <$$> _tableCOMPextname4]
    , ["uvbuttonsright" <$$> _tableCOMPuvbuttonsright]
    , ["resizewmax" <$$> _tableCOMPresizewmax]
    , Just <$> rgbMap "borderb" _tableCOMPborderb
    , ["bottomanchor" <$$> _tableCOMPbottomanchor]
    , ["sizefromwindow" <$$> _tableCOMPsizefromwindow]
    , [("tableattributes",) . ResolveP <$> _tableCOMPtableattributes]
    , ["opacity" <$$> _tableCOMPopacity]
    , ["infoformat" <$$> _tableCOMPinfoformat]
    , [("top",) . ResolveP <$> _tableCOMPtop]
    , ["cursor" <$$> _tableCOMPcursor]
    , ["overridemethod" <$$> _tableCOMPoverridemethod]
    , ["reposition" <$$> _tableCOMPreposition]
    , ["enable" <$$> _tableCOMPenable]
    , [("chop",) . ResolveP <$> _tableCOMPchop]
    , ["rightoffset" <$$> _tableCOMPrightoffset]
    , ["vieweraspect" <$$> _tableCOMPvieweraspect]
    , ["tablealign" <$$> _tableCOMPtablealign]
    , ["marginb" <$$> _tableCOMPmarginb]
    , ["fontsizeunit" <$$> _tableCOMPfontsizeunit]
    , ["alignmax" <$$> _tableCOMPalignmax]
    , ["scrolloverlay" <$$> _tableCOMPscrolloverlay]
    , [("clone",) . ResolveP <$> _tableCOMPclone]
    , ["keepmemory" <$$> _tableCOMPkeepmemory]
    , [("dropscript",) . ResolveP <$> _tableCOMPdropscript]
    , ["hfillweight" <$$> _tableCOMPhfillweight]
    , ["horigin" <$$> _tableCOMPhorigin]
    , ["spacing" <$$> _tableCOMPspacing]
    , Just <$> vec2Map' "scale" _tableCOMPscale
    , ["tableoffsetx" <$$> _tableCOMPtableoffsetx]
    , ["tablecols" <$$> _tableCOMPtablecols]
    , ["opshortcut" <$$> _tableCOMPopshortcut]
    , ["resizet" <$$> _tableCOMPresizet]
    , ["bottomborder" <$$> _tableCOMPbottomborder]]
  pars (ContainerCOMP {..}) = catMaybes . mconcat $ [ ["topborder" <$$> _containerCOMPtopborder]
    , ["scrollbarthickness" <$$> _containerCOMPscrollbarthickness]
    , ["w" <$$> _containerCOMPw]
    , ["alignorder" <$$> _containerCOMPalignorder]
    , ["loadondemand" <$$> _containerCOMPloadondemand]
    , ["justifyh" <$$> _containerCOMPjustifyh]
    , ["promoteextension4" <$$> _containerCOMPpromoteextension4]
    , [("dropdestscript",) . ResolveP <$> _containerCOMPdropdestscript]
    , ["repositionxmin" <$$> _containerCOMPrepositionxmin]
    , ["x" <$$> _containerCOMPx]
    , ["nodeview" <$$> _containerCOMPnodeview]
    , ["margint" <$$> _containerCOMPmargint]
    , ["resizer" <$$> _containerCOMPresizer]
    , [("droptypescript",) . ResolveP <$> _containerCOMPdroptypescript]
    , ["promoteextension2" <$$> _containerCOMPpromoteextension2]
    , ["fixedaspect" <$$> _containerCOMPfixedaspect]
    , ["extname1" <$$> _containerCOMPextname1]
    , ["marginl" <$$> _containerCOMPmarginl]
    , ["dodisablecolor" <$$> _containerCOMPdodisablecolor]
    , ["multitouch" <$$> _containerCOMPmultitouch]
    , ["bgalpha" <$$> _containerCOMPbgalpha]
    , ["hmode" <$$> _containerCOMPhmode]
    , ["savebackup" <$$> _containerCOMPsavebackup]
    , ["uvbuttonsmiddle" <$$> _containerCOMPuvbuttonsmiddle]
    , ["leftanchor" <$$> _containerCOMPleftanchor]
    , ["clickthrough" <$$> _containerCOMPclickthrough]
    , ["disablealpha" <$$> _containerCOMPdisablealpha]
    , ["vmode" <$$> _containerCOMPvmode]
    , ["vorigin" <$$> _containerCOMPvorigin]
    , ["drag" <$$> _containerCOMPdrag]
    , Just <$> rgbMap "disablecolor" _containerCOMPdisablecolor
    , ["resizehmin" <$$> _containerCOMPresizehmin]
    , ["extname3" <$$> _containerCOMPextname3]
    , ["borderaalpha" <$$> _containerCOMPborderaalpha]
    , ["overlay" <$$> _containerCOMPoverlay]
    , ["repositionymin" <$$> _containerCOMPrepositionymin]
    , ["enablecloning" <$$> _containerCOMPenablecloning]
    , ["subcompname" <$$> _containerCOMPsubcompname]
    , ["align" <$$> _containerCOMPalign]
    , ["reloadtoxonstart" <$$> _containerCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _containerCOMPreinitnet]
    , ["marginr" <$$> _containerCOMPmarginr]
    , ["parentshortcut" <$$> _containerCOMPparentshortcut]
    , ["resizet" <$$> _containerCOMPresizet]
    , ["extension4" <$$> _containerCOMPextension4]
    , ["leftborderi" <$$> _containerCOMPleftborderi]
    , ["repocomp" <$$> _containerCOMPrepocomp]
    , ["repositionymax" <$$> _containerCOMPrepositionymax]
    , ["anchordrag" <$$> _containerCOMPanchordrag]
    , ["bottomborderi" <$$> _containerCOMPbottomborderi]
    , ["rightborder" <$$> _containerCOMPrightborder]
    , ["layer" <$$> _containerCOMPlayer]
    , ["reinitextensions" <$$> _containerCOMPreinitextensions]
    , ["topborderi" <$$> _containerCOMPtopborderi]
    , ["mousewheel" <$$> _containerCOMPmousewheel]
    , ["alignallow" <$$> _containerCOMPalignallow]
    , [("dragdropcallbacks",) . ResolveP <$> _containerCOMPdragdropcallbacks]
    , ["topanchor" <$$> _containerCOMPtopanchor]
    , ["rightborderi" <$$> _containerCOMPrightborderi]
    , ["resizel" <$$> _containerCOMPresizel]
    , ["vfillweight" <$$> _containerCOMPvfillweight]
    , ["borderover" <$$> _containerCOMPborderover]
    , ["namedchop" <$$> _containerCOMPnamedchop]
    , ["marginb" <$$> _containerCOMPmarginb]
    , ["repositionxmax" <$$> _containerCOMPrepositionxmax]
    , ["extension2" <$$> _containerCOMPextension2]
    , ["alignmax" <$$> _containerCOMPalignmax]
    , ["justifyv" <$$> _containerCOMPjustifyv]
    , Just <$> vec2Map' "postoffset" _containerCOMPpostoffset
    , ["promoteextension3" <$$> _containerCOMPpromoteextension3]
    , ["topoffset" <$$> _containerCOMPtopoffset]
    , ["composite" <$$> _containerCOMPcomposite]
    , [("dragscript",) . ResolveP <$> _containerCOMPdragscript]
    , ["multrgb" <$$> _containerCOMPmultrgb]
    , ["extension1" <$$> _containerCOMPextension1]
    , ["promoteextension1" <$$> _containerCOMPpromoteextension1]
    , Just <$> rgbMap "bordera" _containerCOMPbordera
    , ["uvbuttonsleft" <$$> _containerCOMPuvbuttonsleft]
    , Just <$> rgbMap "bgcolor" _containerCOMPbgcolor
    , ["resizehmax" <$$> _containerCOMPresizehmax]
    , [("helpdat",) . ResolveP <$> _containerCOMPhelpdat]
    , ["extension3" <$$> _containerCOMPextension3]
    , ["drop" <$$> _containerCOMPdrop]
    , ["externaltox" <$$> _containerCOMPexternaltox]
    , ["rightanchor" <$$> _containerCOMPrightanchor]
    , ["extname2" <$$> _containerCOMPextname2]
    , ["h" <$$> _containerCOMPh]
    , ["leftborder" <$$> _containerCOMPleftborder]
    , ["topfill" <$$> _containerCOMPtopfill]
    , ["resizewmin" <$$> _containerCOMPresizewmin]
    , ["mouserel" <$$> _containerCOMPmouserel]
    , ["enablecloningpulse" <$$> _containerCOMPenablecloningpulse]
    , Just <$> vec2Map' "offset" _containerCOMPoffset
    , ["resizeb" <$$> _containerCOMPresizeb]
    , ["leftoffset" <$$> _containerCOMPleftoffset]
    , ["y" <$$> _containerCOMPy]
    , ["pvscrollbar" <$$> _containerCOMPpvscrollbar]
    , ["crop" <$$> _containerCOMPcrop]
    , ["bottomoffset" <$$> _containerCOMPbottomoffset]
    , ["display" <$$> _containerCOMPdisplay]
    , ["fit" <$$> _containerCOMPfit]
    , ["aspect" <$$> _containerCOMPaspect]
    , ["extname4" <$$> _containerCOMPextname4]
    , ["uvbuttonsright" <$$> _containerCOMPuvbuttonsright]
    , ["resizewmax" <$$> _containerCOMPresizewmax]
    , Just <$> rgbMap "borderb" _containerCOMPborderb
    , ["bottomanchor" <$$> _containerCOMPbottomanchor]
    , ["sizefromwindow" <$$> _containerCOMPsizefromwindow]
    , ["opacity" <$$> _containerCOMPopacity]
    , [("top",) . ResolveP <$> _containerCOMPtop]
    , ["cursor" <$$> _containerCOMPcursor]
    , ["overridemethod" <$$> _containerCOMPoverridemethod]
    , ["reposition" <$$> _containerCOMPreposition]
    , ["enable" <$$> _containerCOMPenable]
    , [("chop",) . ResolveP <$> _containerCOMPchop]
    , ["rightoffset" <$$> _containerCOMPrightoffset]
    , ["vieweraspect" <$$> _containerCOMPvieweraspect]
    , ["borderbalpha" <$$> _containerCOMPborderbalpha]
    , ["scrolloverlay" <$$> _containerCOMPscrolloverlay]
    , [("clone",) . ResolveP <$> _containerCOMPclone]
    , ["keepmemory" <$$> _containerCOMPkeepmemory]
    , [("dropscript",) . ResolveP <$> _containerCOMPdropscript]
    , ["hfillweight" <$$> _containerCOMPhfillweight]
    , ["horigin" <$$> _containerCOMPhorigin]
    , ["spacing" <$$> _containerCOMPspacing]
    , Just <$> vec2Map' "scale" _containerCOMPscale
    , ["phscrollbar" <$$> _containerCOMPphscrollbar]
    , ["opshortcut" <$$> _containerCOMPopshortcut]
    , ["bottomborder" <$$> _containerCOMPbottomborder]]
  pars (ParameterCOMP {..}) = catMaybes . mconcat $ [ ["topborder" <$$> _parameterCOMPtopborder]
    , ["scrollbarthickness" <$$> _parameterCOMPscrollbarthickness]
    , ["w" <$$> _parameterCOMPw]
    , ["alignorder" <$$> _parameterCOMPalignorder]
    , [("dropscript",) . ResolveP <$> _parameterCOMPdropscript]
    , ["loadondemand" <$$> _parameterCOMPloadondemand]
    , ["justifyh" <$$> _parameterCOMPjustifyh]
    , ["promoteextension4" <$$> _parameterCOMPpromoteextension4]
    , [("dropdestscript",) . ResolveP <$> _parameterCOMPdropdestscript]
    , ["repositionxmin" <$$> _parameterCOMPrepositionxmin]
    , ["x" <$$> _parameterCOMPx]
    , ["marginr" <$$> _parameterCOMPmarginr]
    , ["nodeview" <$$> _parameterCOMPnodeview]
    , ["repositionymax" <$$> _parameterCOMPrepositionymax]
    , ["margint" <$$> _parameterCOMPmargint]
    , ["resizer" <$$> _parameterCOMPresizer]
    , [("droptypescript",) . ResolveP <$> _parameterCOMPdroptypescript]
    , ["promoteextension2" <$$> _parameterCOMPpromoteextension2]
    , ["fixedaspect" <$$> _parameterCOMPfixedaspect]
    , ["extname1" <$$> _parameterCOMPextname1]
    , ["marginl" <$$> _parameterCOMPmarginl]
    , ["dodisablecolor" <$$> _parameterCOMPdodisablecolor]
    , ["multitouch" <$$> _parameterCOMPmultitouch]
    , ["bgalpha" <$$> _parameterCOMPbgalpha]
    , ["hmode" <$$> _parameterCOMPhmode]
    , ["savebackup" <$$> _parameterCOMPsavebackup]
    , ["uvbuttonsmiddle" <$$> _parameterCOMPuvbuttonsmiddle]
    , ["leftanchor" <$$> _parameterCOMPleftanchor]
    , ["clickthrough" <$$> _parameterCOMPclickthrough]
    , ["disablealpha" <$$> _parameterCOMPdisablealpha]
    , ["vmode" <$$> _parameterCOMPvmode]
    , ["vorigin" <$$> _parameterCOMPvorigin]
    , ["inputeditor" <$$> _parameterCOMPinputeditor]
    , Just <$> rgbMap "disablecolor" _parameterCOMPdisablecolor
    , ["resizehmin" <$$> _parameterCOMPresizehmin]
    , ["extname3" <$$> _parameterCOMPextname3]
    , ["borderaalpha" <$$> _parameterCOMPborderaalpha]
    , ["overlay" <$$> _parameterCOMPoverlay]
    , ["repositionymin" <$$> _parameterCOMPrepositionymin]
    , ["enablecloning" <$$> _parameterCOMPenablecloning]
    , ["drag" <$$> _parameterCOMPdrag]
    , ["rightanchor" <$$> _parameterCOMPrightanchor]
    , ["reloadtoxonstart" <$$> _parameterCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _parameterCOMPreinitnet]
    , ["pagescope" <$$> _parameterCOMPpagescope]
    , ["parentshortcut" <$$> _parameterCOMPparentshortcut]
    , ["resizet" <$$> _parameterCOMPresizet]
    , ["extension4" <$$> _parameterCOMPextension4]
    , ["leftborderi" <$$> _parameterCOMPleftborderi]
    , ["repocomp" <$$> _parameterCOMPrepocomp]
    , ["topanchor" <$$> _parameterCOMPtopanchor]
    , ["anchordrag" <$$> _parameterCOMPanchordrag]
    , ["bottomborderi" <$$> _parameterCOMPbottomborderi]
    , ["rightborder" <$$> _parameterCOMPrightborder]
    , ["bottomborder" <$$> _parameterCOMPbottomborder]
    , ["reinitextensions" <$$> _parameterCOMPreinitextensions]
    , ["topborderi" <$$> _parameterCOMPtopborderi]
    , ["alignallow" <$$> _parameterCOMPalignallow]
    , ["combinescopes" <$$> _parameterCOMPcombinescopes]
    , ["rightborderi" <$$> _parameterCOMPrightborderi]
    , ["resizel" <$$> _parameterCOMPresizel]
    , ["vfillweight" <$$> _parameterCOMPvfillweight]
    , ["borderover" <$$> _parameterCOMPborderover]
    , ["namedchop" <$$> _parameterCOMPnamedchop]
    , ["marginb" <$$> _parameterCOMPmarginb]
    , ["pagenames" <$$> _parameterCOMPpagenames]
    , ["repositionxmax" <$$> _parameterCOMPrepositionxmax]
    , ["extension2" <$$> _parameterCOMPextension2]
    , ["borderbalpha" <$$> _parameterCOMPborderbalpha]
    , ["justifyv" <$$> _parameterCOMPjustifyv]
    , Just <$> vec2Map' "postoffset" _parameterCOMPpostoffset
    , ["promoteextension3" <$$> _parameterCOMPpromoteextension3]
    , ["topoffset" <$$> _parameterCOMPtopoffset]
    , ["composite" <$$> _parameterCOMPcomposite]
    , [("dragscript",) . ResolveP <$> _parameterCOMPdragscript]
    , ["multrgb" <$$> _parameterCOMPmultrgb]
    , ["extension1" <$$> _parameterCOMPextension1]
    , [("dragdropcallbacks",) . ResolveP <$> _parameterCOMPdragdropcallbacks]
    , ["custom" <$$> _parameterCOMPcustom]
    , ["promoteextension1" <$$> _parameterCOMPpromoteextension1]
    , Just <$> rgbMap "bordera" _parameterCOMPbordera
    , ["uvbuttonsleft" <$$> _parameterCOMPuvbuttonsleft]
    , Just <$> rgbMap "bgcolor" _parameterCOMPbgcolor
    , ["resizehmax" <$$> _parameterCOMPresizehmax]
    , [("helpdat",) . ResolveP <$> _parameterCOMPhelpdat]
    , ["extension3" <$$> _parameterCOMPextension3]
    , ["drop" <$$> _parameterCOMPdrop]
    , ["externaltox" <$$> _parameterCOMPexternaltox]
    , ["overridemethod" <$$> _parameterCOMPoverridemethod]
    , ["align" <$$> _parameterCOMPalign]
    , ["extname2" <$$> _parameterCOMPextname2]
    , ["h" <$$> _parameterCOMPh]
    , ["leftborder" <$$> _parameterCOMPleftborder]
    , ["topfill" <$$> _parameterCOMPtopfill]
    , ["resizewmin" <$$> _parameterCOMPresizewmin]
    , ["mouserel" <$$> _parameterCOMPmouserel]
    , ["oversize" <$$> _parameterCOMPoversize]
    , ["enablecloningpulse" <$$> _parameterCOMPenablecloningpulse]
    , Just <$> vec2Map' "offset" _parameterCOMPoffset
    , ["parscope" <$$> _parameterCOMPparscope]
    , ["resizeb" <$$> _parameterCOMPresizeb]
    , ["leftoffset" <$$> _parameterCOMPleftoffset]
    , ["y" <$$> _parameterCOMPy]
    , ["pvscrollbar" <$$> _parameterCOMPpvscrollbar]
    , ["crop" <$$> _parameterCOMPcrop]
    , ["bottomoffset" <$$> _parameterCOMPbottomoffset]
    , ["display" <$$> _parameterCOMPdisplay]
    , ["fit" <$$> _parameterCOMPfit]
    , ["aspect" <$$> _parameterCOMPaspect]
    , ["extname4" <$$> _parameterCOMPextname4]
    , ["uvbuttonsright" <$$> _parameterCOMPuvbuttonsright]
    , ["resizewmax" <$$> _parameterCOMPresizewmax]
    , ["scopeorder" <$$> _parameterCOMPscopeorder]
    , Just <$> rgbMap "borderb" _parameterCOMPborderb
    , ["subcompname" <$$> _parameterCOMPsubcompname]
    , ["bottomanchor" <$$> _parameterCOMPbottomanchor]
    , ["sizefromwindow" <$$> _parameterCOMPsizefromwindow]
    , ["opacity" <$$> _parameterCOMPopacity]
    , [("top",) . ResolveP <$> _parameterCOMPtop]
    , ["mousewheel" <$$> _parameterCOMPmousewheel]
    , ["builtin" <$$> _parameterCOMPbuiltin]
    , ["reposition" <$$> _parameterCOMPreposition]
    , ["enable" <$$> _parameterCOMPenable]
    , [("chop",) . ResolveP <$> _parameterCOMPchop]
    , ["rightoffset" <$$> _parameterCOMPrightoffset]
    , ["vieweraspect" <$$> _parameterCOMPvieweraspect]
    , ["header" <$$> _parameterCOMPheader]
    , ["alignmax" <$$> _parameterCOMPalignmax]
    , ["scrolloverlay" <$$> _parameterCOMPscrolloverlay]
    , [("clone",) . ResolveP <$> _parameterCOMPclone]
    , ["keepmemory" <$$> _parameterCOMPkeepmemory]
    , ["layer" <$$> _parameterCOMPlayer]
    , ["hfillweight" <$$> _parameterCOMPhfillweight]
    , ["horigin" <$$> _parameterCOMPhorigin]
    , ["spacing" <$$> _parameterCOMPspacing]
    , Just <$> vec2Map' "scale" _parameterCOMPscale
    , ["phscrollbar" <$$> _parameterCOMPphscrollbar]
    , ["opshortcut" <$$> _parameterCOMPopshortcut]
    , ["cursor" <$$> _parameterCOMPcursor]]
  pars (SliderCOMP {..}) = catMaybes . mconcat $ [ ["topborder" <$$> _sliderCOMPtopborder]
    , ["scrollbarthickness" <$$> _sliderCOMPscrollbarthickness]
    , ["w" <$$> _sliderCOMPw]
    , ["alignorder" <$$> _sliderCOMPalignorder]
    , ["loadondemand" <$$> _sliderCOMPloadondemand]
    , ["justifyh" <$$> _sliderCOMPjustifyh]
    , ["promoteextension4" <$$> _sliderCOMPpromoteextension4]
    , [("dropdestscript",) . ResolveP <$> _sliderCOMPdropdestscript]
    , ["repositionxmin" <$$> _sliderCOMPrepositionxmin]
    , ["x" <$$> _sliderCOMPx]
    , ["nodeview" <$$> _sliderCOMPnodeview]
    , ["repositionymax" <$$> _sliderCOMPrepositionymax]
    , ["margint" <$$> _sliderCOMPmargint]
    , ["resizer" <$$> _sliderCOMPresizer]
    , [("droptypescript",) . ResolveP <$> _sliderCOMPdroptypescript]
    , ["promoteextension2" <$$> _sliderCOMPpromoteextension2]
    , ["fixedaspect" <$$> _sliderCOMPfixedaspect]
    , ["zonel" <$$> _sliderCOMPzonel]
    , ["marginl" <$$> _sliderCOMPmarginl]
    , ["dodisablecolor" <$$> _sliderCOMPdodisablecolor]
    , ["multitouch" <$$> _sliderCOMPmultitouch]
    , ["bgalpha" <$$> _sliderCOMPbgalpha]
    , ["hmode" <$$> _sliderCOMPhmode]
    , ["savebackup" <$$> _sliderCOMPsavebackup]
    , ["uvbuttonsmiddle" <$$> _sliderCOMPuvbuttonsmiddle]
    , ["leftanchor" <$$> _sliderCOMPleftanchor]
    , ["multrgb" <$$> _sliderCOMPmultrgb]
    , ["disablealpha" <$$> _sliderCOMPdisablealpha]
    , ["vmode" <$$> _sliderCOMPvmode]
    , ["vorigin" <$$> _sliderCOMPvorigin]
    , ["drag" <$$> _sliderCOMPdrag]
    , Just <$> rgbMap "disablecolor" _sliderCOMPdisablecolor
    , ["resizehmin" <$$> _sliderCOMPresizehmin]
    , ["extname3" <$$> _sliderCOMPextname3]
    , ["borderaalpha" <$$> _sliderCOMPborderaalpha]
    , ["overlay" <$$> _sliderCOMPoverlay]
    , ["repositionymin" <$$> _sliderCOMPrepositionymin]
    , ["enablecloning" <$$> _sliderCOMPenablecloning]
    , ["subcompname" <$$> _sliderCOMPsubcompname]
    , ["rightanchor" <$$> _sliderCOMPrightanchor]
    , ["reloadtoxonstart" <$$> _sliderCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _sliderCOMPreinitnet]
    , ["marginr" <$$> _sliderCOMPmarginr]
    , ["parentshortcut" <$$> _sliderCOMPparentshortcut]
    , ["resizet" <$$> _sliderCOMPresizet]
    , ["extension4" <$$> _sliderCOMPextension4]
    , ["namedchop" <$$> _sliderCOMPnamedchop]
    , ["clampvl" <$$> _sliderCOMPclampvl]
    , ["repocomp" <$$> _sliderCOMPrepocomp]
    , ["topanchor" <$$> _sliderCOMPtopanchor]
    , ["anchordrag" <$$> _sliderCOMPanchordrag]
    , ["bottomborderi" <$$> _sliderCOMPbottomborderi]
    , ["clampul" <$$> _sliderCOMPclampul]
    , ["rightborder" <$$> _sliderCOMPrightborder]
    , ["layer" <$$> _sliderCOMPlayer]
    , ["reinitextensions" <$$> _sliderCOMPreinitextensions]
    , ["topborderi" <$$> _sliderCOMPtopborderi]
    , ["alignallow" <$$> _sliderCOMPalignallow]
    , [("dragdropcallbacks",) . ResolveP <$> _sliderCOMPdragdropcallbacks]
    , ["rightborderi" <$$> _sliderCOMPrightborderi]
    , ["resizel" <$$> _sliderCOMPresizel]
    , ["alignmax" <$$> _sliderCOMPalignmax]
    , ["vfillweight" <$$> _sliderCOMPvfillweight]
    , ["borderover" <$$> _sliderCOMPborderover]
    , ["leftborderi" <$$> _sliderCOMPleftborderi]
    , ["marginb" <$$> _sliderCOMPmarginb]
    , ["repositionxmax" <$$> _sliderCOMPrepositionxmax]
    , ["extension2" <$$> _sliderCOMPextension2]
    , ["borderbalpha" <$$> _sliderCOMPborderbalpha]
    , ["justifyv" <$$> _sliderCOMPjustifyv]
    , Just <$> vec2Map' "postoffset" _sliderCOMPpostoffset
    , ["promoteextension3" <$$> _sliderCOMPpromoteextension3]
    , ["topoffset" <$$> _sliderCOMPtopoffset]
    , ["composite" <$$> _sliderCOMPcomposite]
    , [("dragscript",) . ResolveP <$> _sliderCOMPdragscript]
    , ["zoneb" <$$> _sliderCOMPzoneb]
    , ["clampvh" <$$> _sliderCOMPclampvh]
    , ["extension1" <$$> _sliderCOMPextension1]
    , ["extname1" <$$> _sliderCOMPextname1]
    , ["promoteextension1" <$$> _sliderCOMPpromoteextension1]
    , ["opshortcut" <$$> _sliderCOMPopshortcut]
    , Just <$> rgbMap "bordera" _sliderCOMPbordera
    , ["uvbuttonsleft" <$$> _sliderCOMPuvbuttonsleft]
    , Just <$> rgbMap "bgcolor" _sliderCOMPbgcolor
    , ["resizehmax" <$$> _sliderCOMPresizehmax]
    , [("helpdat",) . ResolveP <$> _sliderCOMPhelpdat]
    , ["extension3" <$$> _sliderCOMPextension3]
    , ["drop" <$$> _sliderCOMPdrop]
    , ["externaltox" <$$> _sliderCOMPexternaltox]
    , ["cursor" <$$> _sliderCOMPcursor]
    , ["align" <$$> _sliderCOMPalign]
    , ["extname2" <$$> _sliderCOMPextname2]
    , ["h" <$$> _sliderCOMPh]
    , ["leftborder" <$$> _sliderCOMPleftborder]
    , ["zonet" <$$> _sliderCOMPzonet]
    , ["topfill" <$$> _sliderCOMPtopfill]
    , ["resizewmin" <$$> _sliderCOMPresizewmin]
    , ["mouserel" <$$> _sliderCOMPmouserel]
    , ["enablecloningpulse" <$$> _sliderCOMPenablecloningpulse]
    , Just <$> vec2Map' "offset" _sliderCOMPoffset
    , ["resizeb" <$$> _sliderCOMPresizeb]
    , ["leftoffset" <$$> _sliderCOMPleftoffset]
    , ["y" <$$> _sliderCOMPy]
    , ["pvscrollbar" <$$> _sliderCOMPpvscrollbar]
    , ["crop" <$$> _sliderCOMPcrop]
    , ["bottomoffset" <$$> _sliderCOMPbottomoffset]
    , ["display" <$$> _sliderCOMPdisplay]
    , ["fit" <$$> _sliderCOMPfit]
    , ["aspect" <$$> _sliderCOMPaspect]
    , ["extname4" <$$> _sliderCOMPextname4]
    , ["uvbuttonsright" <$$> _sliderCOMPuvbuttonsright]
    , ["resizewmax" <$$> _sliderCOMPresizewmax]
    , Just <$> rgbMap "borderb" _sliderCOMPborderb
    , ["bottomanchor" <$$> _sliderCOMPbottomanchor]
    , ["sizefromwindow" <$$> _sliderCOMPsizefromwindow]
    , ["opacity" <$$> _sliderCOMPopacity]
    , [("top",) . ResolveP <$> _sliderCOMPtop]
    , ["mousewheel" <$$> _sliderCOMPmousewheel]
    , ["overridemethod" <$$> _sliderCOMPoverridemethod]
    , ["reposition" <$$> _sliderCOMPreposition]
    , ["enable" <$$> _sliderCOMPenable]
    , [("chop",) . ResolveP <$> _sliderCOMPchop]
    , ["rightoffset" <$$> _sliderCOMPrightoffset]
    , ["vieweraspect" <$$> _sliderCOMPvieweraspect]
    , ["zoner" <$$> _sliderCOMPzoner]
    , ["clampuh" <$$> _sliderCOMPclampuh]
    , ["scrolloverlay" <$$> _sliderCOMPscrolloverlay]
    , [("clone",) . ResolveP <$> _sliderCOMPclone]
    , ["keepmemory" <$$> _sliderCOMPkeepmemory]
    , [("dropscript",) . ResolveP <$> _sliderCOMPdropscript]
    , ["clickthrough" <$$> _sliderCOMPclickthrough]
    , ["hfillweight" <$$> _sliderCOMPhfillweight]
    , ["horigin" <$$> _sliderCOMPhorigin]
    , ["spacing" <$$> _sliderCOMPspacing]
    , Just <$> vec2Map' "scale" _sliderCOMPscale
    , ["phscrollbar" <$$> _sliderCOMPphscrollbar]
    , ["slidertype" <$$> _sliderCOMPslidertype]
    , ["bottomborder" <$$> _sliderCOMPbottomborder]]
  pars (GeometryCOMP {..}) = catMaybes . mconcat $ [ ["instancea" <$$> _geometryCOMPinstancea]
    , ["instancerotupy" <$$> _geometryCOMPinstancerotupy]
    , ["extname1" <$$> _geometryCOMPextname1]
    , ["instancerottoz" <$$> _geometryCOMPinstancerottoz]
    , ["instanceb" <$$> _geometryCOMPinstanceb]
    , ["extension4" <$$> _geometryCOMPextension4]
    , ["pathorient" <$$> _geometryCOMPpathorient]
    , ["roll" <$$> _geometryCOMProll]
    , ["nodeview" <$$> _geometryCOMPnodeview]
    , ["instancepx" <$$> _geometryCOMPinstancepx]
    , Just <$> vec3Map' "pt" _geometryCOMPpt
    , ["instancetexanisotropy" <$$> _geometryCOMPinstancetexanisotropy]
    , ["prioritymethod" <$$> _geometryCOMPprioritymethod]
    , ["instancefirstrow" <$$> _geometryCOMPinstancefirstrow]
    , ["bank" <$$> _geometryCOMPbank]
    , ["instancety" <$$> _geometryCOMPinstancety]
    , ["instancery" <$$> _geometryCOMPinstancery]
    , Just <$> vec3Map' "p" _geometryCOMPp
    , ["savebackup" <$$> _geometryCOMPsavebackup]
    , ["instancerottox" <$$> _geometryCOMPinstancerottox]
    , ["pos" <$$> _geometryCOMPpos]
    , [("pathsop",) . ResolveP <$> _geometryCOMPpathsop]
    , ["loadondemand" <$$> _geometryCOMPloadondemand]
    , ["extname3" <$$> _geometryCOMPextname3]
    , ["instancetexfilter" <$$> _geometryCOMPinstancetexfilter]
    , Just <$> vec3Map' "pr" _geometryCOMPpr
    , ["instanceg" <$$> _geometryCOMPinstanceg]
    , ["instancetexmode" <$$> _geometryCOMPinstancetexmode]
    , Just <$> rgbMap "wcolor" _geometryCOMPwcolor
    , ["instancepy" <$$> _geometryCOMPinstancepy]
    , ["reloadtoxonstart" <$$> _geometryCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _geometryCOMPreinitnet]
    , ["externaltox" <$$> _geometryCOMPexternaltox]
    , ["reinitextensions" <$$> _geometryCOMPreinitextensions]
    , ["instancesy" <$$> _geometryCOMPinstancesy]
    , ["numinstances" <$$> _geometryCOMPnuminstances]
    , Just <$> vec3Map' "up" _geometryCOMPup
    , ["promoteextension1" <$$> _geometryCOMPpromoteextension1]
    , ["subcompname" <$$> _geometryCOMPsubcompname]
    , ["instrord" <$$> _geometryCOMPinstrord]
    , ["pxord" <$$> _geometryCOMPpxord]
    , ["instancetexindex" <$$> _geometryCOMPinstancetexindex]
    , ["pickpriority" <$$> _geometryCOMPpickpriority]
    , Just <$> vec3Map' "ps" _geometryCOMPps
    , ["instancesx" <$$> _geometryCOMPinstancesx]
    , ["instancing" <$$> _geometryCOMPinstancing]
    , ["instancetexextendv" <$$> _geometryCOMPinstancetexextendv]
    , ["prord" <$$> _geometryCOMPprord]
    , ["lookup" <$$> _geometryCOMPlookup]
    , ["instancerz" <$$> _geometryCOMPinstancerz]
    , ["extension2" <$$> _geometryCOMPextension2]
    , ["drawpriority" <$$> _geometryCOMPdrawpriority]
    , ["instanceu" <$$> _geometryCOMPinstanceu]
    , ["render" <$$> _geometryCOMPrender]
    , ["extension1" <$$> _geometryCOMPextension1]
    , ["promoteextension4" <$$> _geometryCOMPpromoteextension4]
    , [("instancetexs",) . ResolveP <$> _geometryCOMPinstancetexs]
    , ["pxform" <$$> _geometryCOMPpxform]
    , [("material",) . ResolveP <$> _geometryCOMPmaterial]
    , ["instancer" <$$> _geometryCOMPinstancer]
    , Just <$> vec3Map' "r" _geometryCOMPr
    , ["instancerottoorder" <$$> _geometryCOMPinstancerottoorder]
    , ["instancecolormode" <$$> _geometryCOMPinstancecolormode]
    , ["extension3" <$$> _geometryCOMPextension3]
    , ["enablecloningpulse" <$$> _geometryCOMPenablecloningpulse]
    , ["instancerx" <$$> _geometryCOMPinstancerx]
    , ["instancesz" <$$> _geometryCOMPinstancesz]
    , ["opshortcut" <$$> _geometryCOMPopshortcut]
    , ["pcommit" <$$> _geometryCOMPpcommit]
    , ["promoteextension2" <$$> _geometryCOMPpromoteextension2]
    , ["instanceorder" <$$> _geometryCOMPinstanceorder]
    , ["instancew" <$$> _geometryCOMPinstancew]
    , ["parentshortcut" <$$> _geometryCOMPparentshortcut]
    , ["instancemode" <$$> _geometryCOMPinstancemode]
    , ["enablecloning" <$$> _geometryCOMPenablecloning]
    , ["instancepz" <$$> _geometryCOMPinstancepz]
    , ["promoteextension3" <$$> _geometryCOMPpromoteextension3]
    , ["extname4" <$$> _geometryCOMPextname4]
    , ["instancetx" <$$> _geometryCOMPinstancetx]
    , ["instancerotupz" <$$> _geometryCOMPinstancerotupz]
    , ["rord" <$$> _geometryCOMPrord]
    , Just <$> vec3Map' "pp" _geometryCOMPpp
    , ["preset" <$$> _geometryCOMPpreset]
    , ["instancetexextendu" <$$> _geometryCOMPinstancetexextendu]
    , ["xord" <$$> _geometryCOMPxord]
    , Just <$> vec3Map' "t" _geometryCOMPt
    , Just <$> vec3Map' "s" _geometryCOMPs
    , [("clone",) . ResolveP <$> _geometryCOMPclone]
    , ["instxord" <$$> _geometryCOMPinstxord]
    , ["instancerotupx" <$$> _geometryCOMPinstancerotupx]
    , ["instancetexextendw" <$$> _geometryCOMPinstancetexextendw]
    , ["extname2" <$$> _geometryCOMPextname2]
    , ["instancerottoy" <$$> _geometryCOMPinstancerottoy]
    , ["instancev" <$$> _geometryCOMPinstancev]
    , ["instancetz" <$$> _geometryCOMPinstancetz]]
  pars (CameraCOMP {..}) = catMaybes . mconcat $ [ ["projection" <$$> _cameraCOMPprojection]
    , ["viewanglemethod" <$$> _cameraCOMPviewanglemethod]
    , ["fognear" <$$> _cameraCOMPfognear]
    , Just <$> vec2Map' "win" _cameraCOMPwin
    , ["extname1" <$$> _cameraCOMPextname1]
    , ["render" <$$> _cameraCOMPrender]
    , ["extension1" <$$> _cameraCOMPextension1]
    , ["prioritymethod" <$$> _cameraCOMPprioritymethod]
    , ["extension4" <$$> _cameraCOMPextension4]
    , ["pathorient" <$$> _cameraCOMPpathorient]
    , ["roll" <$$> _cameraCOMProll]
    , ["nodeview" <$$> _cameraCOMPnodeview]
    , Just <$> vec3Map' "pt" _cameraCOMPpt
    , ["promoteextension3" <$$> _cameraCOMPpromoteextension3]
    , ["fog" <$$> _cameraCOMPfog]
    , [("customproj",) . ResolveP <$> _cameraCOMPcustomproj]
    , ["fogfar" <$$> _cameraCOMPfogfar]
    , Just <$> rgbaMap "bgcolor" _cameraCOMPbgcolor
    , ["pxform" <$$> _cameraCOMPpxform]
    , [("material",) . ResolveP <$> _cameraCOMPmaterial]
    , ["bank" <$$> _cameraCOMPbank]
    , Just <$> vec3Map' "r" _cameraCOMPr
    , ["enablecloning" <$$> _cameraCOMPenablecloning]
    , Just <$> vec3Map' "pp" _cameraCOMPpp
    , ["fov" <$$> _cameraCOMPfov]
    , ["extension3" <$$> _cameraCOMPextension3]
    , Just <$> vec3Map' "p" _cameraCOMPp
    , ["extname2" <$$> _cameraCOMPextname2]
    , ["opshortcut" <$$> _cameraCOMPopshortcut]
    , ["pcommit" <$$> _cameraCOMPpcommit]
    , ["savebackup" <$$> _cameraCOMPsavebackup]
    , ["reinitextensions" <$$> _cameraCOMPreinitextensions]
    , ["promoteextension2" <$$> _cameraCOMPpromoteextension2]
    , ["projectionblend" <$$> _cameraCOMPprojectionblend]
    , ["reloadtoxonstart" <$$> _cameraCOMPreloadtoxonstart]
    , ["pos" <$$> _cameraCOMPpos]
    , [("pathsop",) . ResolveP <$> _cameraCOMPpathsop]
    , ["loadondemand" <$$> _cameraCOMPloadondemand]
    , ["extname3" <$$> _cameraCOMPextname3]
    , ["fogalpha" <$$> _cameraCOMPfogalpha]
    , Just <$> vec3Map' "pr" _cameraCOMPpr
    , ["promoteextension4" <$$> _cameraCOMPpromoteextension4]
    , Just <$> rgbMap "wcolor" _cameraCOMPwcolor
    , ["enablecloningpulse" <$$> _cameraCOMPenablecloningpulse]
    , ["extname4" <$$> _cameraCOMPextname4]
    , ["focal" <$$> _cameraCOMPfocal]
    , ["reinitnet" <$$> _cameraCOMPreinitnet]
    , ["far" <$$> _cameraCOMPfar]
    , ["externaltox" <$$> _cameraCOMPexternaltox]
    , ["preset" <$$> _cameraCOMPpreset]
    , [("fogmap",) . ResolveP <$> _cameraCOMPfogmap]
    , ["fogdensity" <$$> _cameraCOMPfogdensity]
    , ["aperture" <$$> _cameraCOMPaperture]
    , Just <$> vec3Map' "up" _cameraCOMPup
    , ["promoteextension1" <$$> _cameraCOMPpromoteextension1]
    , ["subcompname" <$$> _cameraCOMPsubcompname]
    , ["pxord" <$$> _cameraCOMPpxord]
    , ["xord" <$$> _cameraCOMPxord]
    , ["pickpriority" <$$> _cameraCOMPpickpriority]
    , ["near" <$$> _cameraCOMPnear]
    , Just <$> vec3Map' "ps" _cameraCOMPps
    , ["extension2" <$$> _cameraCOMPextension2]
    , Just <$> vec3Map' "s" _cameraCOMPs
    , [("clone",) . ResolveP <$> _cameraCOMPclone]
    , ["prord" <$$> _cameraCOMPprord]
    , ["lookup" <$$> _cameraCOMPlookup]
    , ["rord" <$$> _cameraCOMPrord]
    , ["parentshortcut" <$$> _cameraCOMPparentshortcut]
    , ["orthowidth" <$$> _cameraCOMPorthowidth]
    , Just <$> vec3Map' "t" _cameraCOMPt
    , Just <$> rgbMap "fogcolor" _cameraCOMPfogcolor
    , ["drawpriority" <$$> _cameraCOMPdrawpriority]]
  pars (AnimationCOMP {..}) = catMaybes . mconcat $ [ ["rangetype" <$$> _animationCOMPrangetype]
    , ["extname1" <$$> _animationCOMPextname1]
    , ["cuepulse" <$$> _animationCOMPcuepulse]
    , ["inputindexunit" <$$> _animationCOMPinputindexunit]
    , ["extension4" <$$> _animationCOMPextension4]
    , ["editrate" <$$> _animationCOMPeditrate]
    , ["extension3" <$$> _animationCOMPextension3]
    , ["enablecloning" <$$> _animationCOMPenablecloning]
    , ["start" <$$> _animationCOMPstart]
    , ["tleft" <$$> _animationCOMPtleft]
    , ["extname4" <$$> _animationCOMPextname4]
    , ["endunit" <$$> _animationCOMPendunit]
    , ["opshortcut" <$$> _animationCOMPopshortcut]
    , ["savebackup" <$$> _animationCOMPsavebackup]
    , ["promoteextension2" <$$> _animationCOMPpromoteextension2]
    , ["extname2" <$$> _animationCOMPextname2]
    , ["play" <$$> _animationCOMPplay]
    , ["tdefault" <$$> _animationCOMPtdefault]
    , ["cuepointunit" <$$> _animationCOMPcuepointunit]
    , ["loadondemand" <$$> _animationCOMPloadondemand]
    , ["editorigin" <$$> _animationCOMPeditorigin]
    , ["extension1" <$$> _animationCOMPextension1]
    , ["promoteextension3" <$$> _animationCOMPpromoteextension3]
    , ["end" <$$> _animationCOMPend]
    , ["promoteextension4" <$$> _animationCOMPpromoteextension4]
    , ["enablecloningpulse" <$$> _animationCOMPenablecloningpulse]
    , ["cyclic" <$$> _animationCOMPcyclic]
    , ["reloadtoxonstart" <$$> _animationCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _animationCOMPreinitnet]
    , ["cuepoint" <$$> _animationCOMPcuepoint]
    , ["externaltox" <$$> _animationCOMPexternaltox]
    , ["parentshortcut" <$$> _animationCOMPparentshortcut]
    , ["promoteextension1" <$$> _animationCOMPpromoteextension1]
    , ["subcompname" <$$> _animationCOMPsubcompname]
    , ["startunit" <$$> _animationCOMPstartunit]
    , ["speed" <$$> _animationCOMPspeed]
    , ["extname3" <$$> _animationCOMPextname3]
    , ["tright" <$$> _animationCOMPtright]
    , ["reinitextensions" <$$> _animationCOMPreinitextensions]
    , ["specifyedit" <$$> _animationCOMPspecifyedit]
    , [("clone",) . ResolveP <$> _animationCOMPclone]
    , ["playmode" <$$> _animationCOMPplaymode]
    , ["editanimation" <$$> _animationCOMPeditanimation]
    , ["extension2" <$$> _animationCOMPextension2]
    , ["cue" <$$> _animationCOMPcue]]
  pars (ReplicatorCOMP {..}) = catMaybes . mconcat $ [ ["reinitnet" <$$> _replicatorCOMPreinitnet]
    , ["extname1" <$$> _replicatorCOMPextname1]
    , ["numreplicants" <$$> _replicatorCOMPnumreplicants]
    , ["extension1" <$$> _replicatorCOMPextension1]
    , ["promoteextension4" <$$> _replicatorCOMPpromoteextension4]
    , ["maxops" <$$> _replicatorCOMPmaxops]
    , [("callbacks",) . ResolveP <$> _replicatorCOMPcallbacks]
    , ["extension3" <$$> _replicatorCOMPextension3]
    , ["layoutorigin2" <$$> _replicatorCOMPlayoutorigin2]
    , ["enablecloning" <$$> _replicatorCOMPenablecloning]
    , ["externaltox" <$$> _replicatorCOMPexternaltox]
    , ["layoutorigin1" <$$> _replicatorCOMPlayoutorigin1]
    , ["recreateall" <$$> _replicatorCOMPrecreateall]
    , ["repsuffixstart" <$$> _replicatorCOMPrepsuffixstart]
    , ["extname2" <$$> _replicatorCOMPextname2]
    , ["opshortcut" <$$> _replicatorCOMPopshortcut]
    , ["savebackup" <$$> _replicatorCOMPsavebackup]
    , ["colindex" <$$> _replicatorCOMPcolindex]
    , ["promoteextension2" <$$> _replicatorCOMPpromoteextension2]
    , ["doincremental" <$$> _replicatorCOMPdoincremental]
    , ["enablecloningpulse" <$$> _replicatorCOMPenablecloningpulse]
    , ["recreatemissing" <$$> _replicatorCOMPrecreatemissing]
    , ["loadondemand" <$$> _replicatorCOMPloadondemand]
    , [("template",) . ResolveP <$> _replicatorCOMPtemplate]
    , ["promoteextension3" <$$> _replicatorCOMPpromoteextension3]
    , ["extname4" <$$> _replicatorCOMPextname4]
    , ["reloadtoxonstart" <$$> _replicatorCOMPreloadtoxonstart]
    , ["namefromtable" <$$> _replicatorCOMPnamefromtable]
    , ["tscript" <$$> _replicatorCOMPtscript]
    , ["reinitextensions" <$$> _replicatorCOMPreinitextensions]
    , ["extension4" <$$> _replicatorCOMPextension4]
    , ["scriptmenu" <$$> _replicatorCOMPscriptmenu]
    , ["opprefix" <$$> _replicatorCOMPopprefix]
    , ["promoteextension1" <$$> _replicatorCOMPpromoteextension1]
    , ["subcompname" <$$> _replicatorCOMPsubcompname]
    , ["extname3" <$$> _replicatorCOMPextname3]
    , [("destination",) . ResolveP <$> _replicatorCOMPdestination]
    , ["parentshortcut" <$$> _replicatorCOMPparentshortcut]
    , ["domaxops" <$$> _replicatorCOMPdomaxops]
    , ["ignorefirstrow" <$$> _replicatorCOMPignorefirstrow]
    , ["colname" <$$> _replicatorCOMPcolname]
    , ["layout" <$$> _replicatorCOMPlayout]
    , [("clone",) . ResolveP <$> _replicatorCOMPclone]
    , ["increment" <$$> _replicatorCOMPincrement]
    , ["method" <$$> _replicatorCOMPmethod]
    , ["extension2" <$$> _replicatorCOMPextension2]]
  pars (OpviewerCOMP {..}) = catMaybes . mconcat $ [ ["topborder" <$$> _opviewerCOMPtopborder]
    , ["scrollbarthickness" <$$> _opviewerCOMPscrollbarthickness]
    , ["w" <$$> _opviewerCOMPw]
    , ["alignorder" <$$> _opviewerCOMPalignorder]
    , ["loadondemand" <$$> _opviewerCOMPloadondemand]
    , ["justifyh" <$$> _opviewerCOMPjustifyh]
    , ["promoteextension4" <$$> _opviewerCOMPpromoteextension4]
    , [("dropdestscript",) . ResolveP <$> _opviewerCOMPdropdestscript]
    , ["repositionxmin" <$$> _opviewerCOMPrepositionxmin]
    , ["x" <$$> _opviewerCOMPx]
    , ["margint" <$$> _opviewerCOMPmargint]
    , ["resizer" <$$> _opviewerCOMPresizer]
    , [("droptypescript",) . ResolveP <$> _opviewerCOMPdroptypescript]
    , ["promoteextension2" <$$> _opviewerCOMPpromoteextension2]
    , ["fixedaspect" <$$> _opviewerCOMPfixedaspect]
    , ["extname1" <$$> _opviewerCOMPextname1]
    , ["marginl" <$$> _opviewerCOMPmarginl]
    , ["dodisablecolor" <$$> _opviewerCOMPdodisablecolor]
    , ["multitouch" <$$> _opviewerCOMPmultitouch]
    , ["bgalpha" <$$> _opviewerCOMPbgalpha]
    , ["hmode" <$$> _opviewerCOMPhmode]
    , ["savebackup" <$$> _opviewerCOMPsavebackup]
    , ["uvbuttonsmiddle" <$$> _opviewerCOMPuvbuttonsmiddle]
    , ["leftanchor" <$$> _opviewerCOMPleftanchor]
    , ["clickthrough" <$$> _opviewerCOMPclickthrough]
    , ["disablealpha" <$$> _opviewerCOMPdisablealpha]
    , ["vmode" <$$> _opviewerCOMPvmode]
    , ["vorigin" <$$> _opviewerCOMPvorigin]
    , ["drag" <$$> _opviewerCOMPdrag]
    , Just <$> rgbMap "disablecolor" _opviewerCOMPdisablecolor
    , ["resizehmin" <$$> _opviewerCOMPresizehmin]
    , ["extname3" <$$> _opviewerCOMPextname3]
    , ["borderaalpha" <$$> _opviewerCOMPborderaalpha]
    , ["overlay" <$$> _opviewerCOMPoverlay]
    , ["repositionymin" <$$> _opviewerCOMPrepositionymin]
    , ["enablecloning" <$$> _opviewerCOMPenablecloning]
    , ["subcompname" <$$> _opviewerCOMPsubcompname]
    , ["align" <$$> _opviewerCOMPalign]
    , ["reloadtoxonstart" <$$> _opviewerCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _opviewerCOMPreinitnet]
    , ["marginr" <$$> _opviewerCOMPmarginr]
    , ["parentshortcut" <$$> _opviewerCOMPparentshortcut]
    , ["resizet" <$$> _opviewerCOMPresizet]
    , ["extension4" <$$> _opviewerCOMPextension4]
    , ["leftborderi" <$$> _opviewerCOMPleftborderi]
    , ["repocomp" <$$> _opviewerCOMPrepocomp]
    , ["repositionymax" <$$> _opviewerCOMPrepositionymax]
    , ["anchordrag" <$$> _opviewerCOMPanchordrag]
    , ["bottomborderi" <$$> _opviewerCOMPbottomborderi]
    , ["rightborder" <$$> _opviewerCOMPrightborder]
    , ["layer" <$$> _opviewerCOMPlayer]
    , ["reinitextensions" <$$> _opviewerCOMPreinitextensions]
    , ["topborderi" <$$> _opviewerCOMPtopborderi]
    , ["mousewheel" <$$> _opviewerCOMPmousewheel]
    , ["alignallow" <$$> _opviewerCOMPalignallow]
    , [("dragdropcallbacks",) . ResolveP <$> _opviewerCOMPdragdropcallbacks]
    , ["topanchor" <$$> _opviewerCOMPtopanchor]
    , ["rightborderi" <$$> _opviewerCOMPrightborderi]
    , ["resizel" <$$> _opviewerCOMPresizel]
    , ["vfillweight" <$$> _opviewerCOMPvfillweight]
    , ["borderover" <$$> _opviewerCOMPborderover]
    , ["namedchop" <$$> _opviewerCOMPnamedchop]
    , ["marginb" <$$> _opviewerCOMPmarginb]
    , ["repositionxmax" <$$> _opviewerCOMPrepositionxmax]
    , ["extension2" <$$> _opviewerCOMPextension2]
    , ["alignmax" <$$> _opviewerCOMPalignmax]
    , ["justifyv" <$$> _opviewerCOMPjustifyv]
    , Just <$> vec2Map' "postoffset" _opviewerCOMPpostoffset
    , ["promoteextension3" <$$> _opviewerCOMPpromoteextension3]
    , ["topoffset" <$$> _opviewerCOMPtopoffset]
    , ["composite" <$$> _opviewerCOMPcomposite]
    , [("dragscript",) . ResolveP <$> _opviewerCOMPdragscript]
    , ["multrgb" <$$> _opviewerCOMPmultrgb]
    , ["extension1" <$$> _opviewerCOMPextension1]
    , ["promoteextension1" <$$> _opviewerCOMPpromoteextension1]
    , Just <$> rgbMap "bordera" _opviewerCOMPbordera
    , ["uvbuttonsleft" <$$> _opviewerCOMPuvbuttonsleft]
    , Just <$> rgbMap "bgcolor" _opviewerCOMPbgcolor
    , ["resizehmax" <$$> _opviewerCOMPresizehmax]
    , [("helpdat",) . ResolveP <$> _opviewerCOMPhelpdat]
    , ["extension3" <$$> _opviewerCOMPextension3]
    , ["drop" <$$> _opviewerCOMPdrop]
    , ["externaltox" <$$> _opviewerCOMPexternaltox]
    , ["rightanchor" <$$> _opviewerCOMPrightanchor]
    , ["extname2" <$$> _opviewerCOMPextname2]
    , ["h" <$$> _opviewerCOMPh]
    , ["leftborder" <$$> _opviewerCOMPleftborder]
    , ["topfill" <$$> _opviewerCOMPtopfill]
    , ["resizewmin" <$$> _opviewerCOMPresizewmin]
    , ["mouserel" <$$> _opviewerCOMPmouserel]
    , ["enablecloningpulse" <$$> _opviewerCOMPenablecloningpulse]
    , Just <$> vec2Map' "offset" _opviewerCOMPoffset
    , ["resizeb" <$$> _opviewerCOMPresizeb]
    , ["leftoffset" <$$> _opviewerCOMPleftoffset]
    , ["y" <$$> _opviewerCOMPy]
    , ["pvscrollbar" <$$> _opviewerCOMPpvscrollbar]
    , ["crop" <$$> _opviewerCOMPcrop]
    , ["bottomoffset" <$$> _opviewerCOMPbottomoffset]
    , ["display" <$$> _opviewerCOMPdisplay]
    , ["fit" <$$> _opviewerCOMPfit]
    , ["aspect" <$$> _opviewerCOMPaspect]
    , ["extname4" <$$> _opviewerCOMPextname4]
    , ["uvbuttonsright" <$$> _opviewerCOMPuvbuttonsright]
    , ["resizewmax" <$$> _opviewerCOMPresizewmax]
    , Just <$> rgbMap "borderb" _opviewerCOMPborderb
    , ["bottomanchor" <$$> _opviewerCOMPbottomanchor]
    , ["sizefromwindow" <$$> _opviewerCOMPsizefromwindow]
    , ["opacity" <$$> _opviewerCOMPopacity]
    , [("top",) . ResolveP <$> _opviewerCOMPtop]
    , ["cursor" <$$> _opviewerCOMPcursor]
    , ["overridemethod" <$$> _opviewerCOMPoverridemethod]
    , ["reposition" <$$> _opviewerCOMPreposition]
    , ["enable" <$$> _opviewerCOMPenable]
    , [("chop",) . ResolveP <$> _opviewerCOMPchop]
    , ["rightoffset" <$$> _opviewerCOMPrightoffset]
    , ["vieweraspect" <$$> _opviewerCOMPvieweraspect]
    , ["borderbalpha" <$$> _opviewerCOMPborderbalpha]
    , ["scrolloverlay" <$$> _opviewerCOMPscrolloverlay]
    , [("clone",) . ResolveP <$> _opviewerCOMPclone]
    , ["keepmemory" <$$> _opviewerCOMPkeepmemory]
    , [("dropscript",) . ResolveP <$> _opviewerCOMPdropscript]
    , ["hfillweight" <$$> _opviewerCOMPhfillweight]
    , ["horigin" <$$> _opviewerCOMPhorigin]
    , ["spacing" <$$> _opviewerCOMPspacing]
    , Just <$> vec2Map' "scale" _opviewerCOMPscale
    , ["phscrollbar" <$$> _opviewerCOMPphscrollbar]
    , ["opshortcut" <$$> _opviewerCOMPopshortcut]
    , ["bottomborder" <$$> _opviewerCOMPbottomborder]]
  pars (AmbientlightCOMP {..}) = catMaybes . mconcat $ [ ["projection" <$$> _ambientlightCOMPprojection]
    , ["viewanglemethod" <$$> _ambientlightCOMPviewanglemethod]
    , ["fognear" <$$> _ambientlightCOMPfognear]
    , Just <$> vec2Map' "win" _ambientlightCOMPwin
    , ["extname1" <$$> _ambientlightCOMPextname1]
    , [("customproj",) . ResolveP <$> _ambientlightCOMPcustomproj]
    , ["render" <$$> _ambientlightCOMPrender]
    , ["extension1" <$$> _ambientlightCOMPextension1]
    , ["promoteextension4" <$$> _ambientlightCOMPpromoteextension4]
    , ["extension4" <$$> _ambientlightCOMPextension4]
    , ["pathorient" <$$> _ambientlightCOMPpathorient]
    , ["roll" <$$> _ambientlightCOMProll]
    , ["nodeview" <$$> _ambientlightCOMPnodeview]
    , Just <$> vec3Map' "pt" _ambientlightCOMPpt
    , Just <$> vec3Map' "ps" _ambientlightCOMPps
    , ["fog" <$$> _ambientlightCOMPfog]
    , ["prioritymethod" <$$> _ambientlightCOMPprioritymethod]
    , ["fogfar" <$$> _ambientlightCOMPfogfar]
    , ["extension3" <$$> _ambientlightCOMPextension3]
    , ["pxform" <$$> _ambientlightCOMPpxform]
    , [("material",) . ResolveP <$> _ambientlightCOMPmaterial]
    , ["reinitextensions" <$$> _ambientlightCOMPreinitextensions]
    , Just <$> vec3Map' "r" _ambientlightCOMPr
    , ["enablecloning" <$$> _ambientlightCOMPenablecloning]
    , Just <$> vec3Map' "pp" _ambientlightCOMPpp
    , ["fov" <$$> _ambientlightCOMPfov]
    , Just <$> vec3Map' "p" _ambientlightCOMPp
    , Just <$> vec3Map' "pr" _ambientlightCOMPpr
    , ["extname2" <$$> _ambientlightCOMPextname2]
    , ["opshortcut" <$$> _ambientlightCOMPopshortcut]
    , ["pcommit" <$$> _ambientlightCOMPpcommit]
    , ["savebackup" <$$> _ambientlightCOMPsavebackup]
    , ["promoteextension2" <$$> _ambientlightCOMPpromoteextension2]
    , ["projectionblend" <$$> _ambientlightCOMPprojectionblend]
    , ["focal" <$$> _ambientlightCOMPfocal]
    , ["enablecloningpulse" <$$> _ambientlightCOMPenablecloningpulse]
    , ["fogdensity" <$$> _ambientlightCOMPfogdensity]
    , ["subcompname" <$$> _ambientlightCOMPsubcompname]
    , ["pickpriority" <$$> _ambientlightCOMPpickpriority]
    , ["fogalpha" <$$> _ambientlightCOMPfogalpha]
    , ["promoteextension3" <$$> _ambientlightCOMPpromoteextension3]
    , Just <$> rgbMap "wcolor" _ambientlightCOMPwcolor
    , ["pos" <$$> _ambientlightCOMPpos]
    , ["extname4" <$$> _ambientlightCOMPextname4]
    , ["reloadtoxonstart" <$$> _ambientlightCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _ambientlightCOMPreinitnet]
    , ["far" <$$> _ambientlightCOMPfar]
    , ["externaltox" <$$> _ambientlightCOMPexternaltox]
    , ["preset" <$$> _ambientlightCOMPpreset]
    , [("fogmap",) . ResolveP <$> _ambientlightCOMPfogmap]
    , [("pathsop",) . ResolveP <$> _ambientlightCOMPpathsop]
    , ["bank" <$$> _ambientlightCOMPbank]
    , ["promoteextension1" <$$> _ambientlightCOMPpromoteextension1]
    , ["rord" <$$> _ambientlightCOMPrord]
    , Just <$> vec3Map' "up" _ambientlightCOMPup
    , ["pxord" <$$> _ambientlightCOMPpxord]
    , ["xord" <$$> _ambientlightCOMPxord]
    , ["extname3" <$$> _ambientlightCOMPextname3]
    , ["near" <$$> _ambientlightCOMPnear]
    , ["parentshortcut" <$$> _ambientlightCOMPparentshortcut]
    , Just <$> vec3Map' "t" _ambientlightCOMPt
    , Just <$> vec3Map' "s" _ambientlightCOMPs
    , Just <$> rgbaMap "bgcolor" _ambientlightCOMPbgcolor
    , Just <$> rgbMap "c" _ambientlightCOMPc
    , [("clone",) . ResolveP <$> _ambientlightCOMPclone]
    , ["prord" <$$> _ambientlightCOMPprord]
    , ["aperture" <$$> _ambientlightCOMPaperture]
    , ["lookup" <$$> _ambientlightCOMPlookup]
    , ["loadondemand" <$$> _ambientlightCOMPloadondemand]
    , ["dimmer" <$$> _ambientlightCOMPdimmer]
    , ["orthowidth" <$$> _ambientlightCOMPorthowidth]
    , ["extension2" <$$> _ambientlightCOMPextension2]
    , Just <$> rgbMap "fogcolor" _ambientlightCOMPfogcolor
    , ["drawpriority" <$$> _ambientlightCOMPdrawpriority]]
  pars (SelectCOMP {..}) = catMaybes . mconcat $ [ ["topborder" <$$> _selectCOMPtopborder]
    , ["scrollbarthickness" <$$> _selectCOMPscrollbarthickness]
    , ["w" <$$> _selectCOMPw]
    , ["alignorder" <$$> _selectCOMPalignorder]
    , ["loadondemand" <$$> _selectCOMPloadondemand]
    , ["justifyh" <$$> _selectCOMPjustifyh]
    , ["promoteextension4" <$$> _selectCOMPpromoteextension4]
    , [("dropdestscript",) . ResolveP <$> _selectCOMPdropdestscript]
    , ["repositionxmin" <$$> _selectCOMPrepositionxmin]
    , ["selectpanel" <$$> _selectCOMPselectpanel]
    , ["marginr" <$$> _selectCOMPmarginr]
    , ["nodeview" <$$> _selectCOMPnodeview]
    , ["margint" <$$> _selectCOMPmargint]
    , ["resizer" <$$> _selectCOMPresizer]
    , [("droptypescript",) . ResolveP <$> _selectCOMPdroptypescript]
    , ["promoteextension2" <$$> _selectCOMPpromoteextension2]
    , ["fixedaspect" <$$> _selectCOMPfixedaspect]
    , ["extname1" <$$> _selectCOMPextname1]
    , ["leftanchor" <$$> _selectCOMPleftanchor]
    , ["dodisablecolor" <$$> _selectCOMPdodisablecolor]
    , ["multitouch" <$$> _selectCOMPmultitouch]
    , ["bgalpha" <$$> _selectCOMPbgalpha]
    , ["followselection" <$$> _selectCOMPfollowselection]
    , ["hmode" <$$> _selectCOMPhmode]
    , ["savebackup" <$$> _selectCOMPsavebackup]
    , ["uvbuttonsmiddle" <$$> _selectCOMPuvbuttonsmiddle]
    , ["clickthrough" <$$> _selectCOMPclickthrough]
    , ["disablealpha" <$$> _selectCOMPdisablealpha]
    , ["vmode" <$$> _selectCOMPvmode]
    , ["vorigin" <$$> _selectCOMPvorigin]
    , ["drag" <$$> _selectCOMPdrag]
    , Just <$> rgbMap "disablecolor" _selectCOMPdisablecolor
    , ["resizehmin" <$$> _selectCOMPresizehmin]
    , ["extname3" <$$> _selectCOMPextname3]
    , ["borderaalpha" <$$> _selectCOMPborderaalpha]
    , ["overlay" <$$> _selectCOMPoverlay]
    , ["repositionymin" <$$> _selectCOMPrepositionymin]
    , ["enablecloning" <$$> _selectCOMPenablecloning]
    , ["subcompname" <$$> _selectCOMPsubcompname]
    , ["rightanchor" <$$> _selectCOMPrightanchor]
    , ["reloadtoxonstart" <$$> _selectCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _selectCOMPreinitnet]
    , ["externaltox" <$$> _selectCOMPexternaltox]
    , ["parentshortcut" <$$> _selectCOMPparentshortcut]
    , ["resizet" <$$> _selectCOMPresizet]
    , ["extension4" <$$> _selectCOMPextension4]
    , ["namedchop" <$$> _selectCOMPnamedchop]
    , ["x" <$$> _selectCOMPx]
    , ["repocomp" <$$> _selectCOMPrepocomp]
    , ["repositionymax" <$$> _selectCOMPrepositionymax]
    , ["anchordrag" <$$> _selectCOMPanchordrag]
    , ["bottomborderi" <$$> _selectCOMPbottomborderi]
    , ["rightborder" <$$> _selectCOMPrightborder]
    , ["layer" <$$> _selectCOMPlayer]
    , ["reinitextensions" <$$> _selectCOMPreinitextensions]
    , ["topborderi" <$$> _selectCOMPtopborderi]
    , ["alignallow" <$$> _selectCOMPalignallow]
    , [("dragdropcallbacks",) . ResolveP <$> _selectCOMPdragdropcallbacks]
    , ["topanchor" <$$> _selectCOMPtopanchor]
    , ["rightborderi" <$$> _selectCOMPrightborderi]
    , ["resizel" <$$> _selectCOMPresizel]
    , ["vfillweight" <$$> _selectCOMPvfillweight]
    , ["borderover" <$$> _selectCOMPborderover]
    , ["leftborderi" <$$> _selectCOMPleftborderi]
    , ["marginb" <$$> _selectCOMPmarginb]
    , ["repositionxmax" <$$> _selectCOMPrepositionxmax]
    , ["matchsize" <$$> _selectCOMPmatchsize]
    , ["extension2" <$$> _selectCOMPextension2]
    , ["borderbalpha" <$$> _selectCOMPborderbalpha]
    , [("dropscript",) . ResolveP <$> _selectCOMPdropscript]
    , Just <$> vec2Map' "postoffset" _selectCOMPpostoffset
    , ["promoteextension3" <$$> _selectCOMPpromoteextension3]
    , ["topoffset" <$$> _selectCOMPtopoffset]
    , ["composite" <$$> _selectCOMPcomposite]
    , ["multrgb" <$$> _selectCOMPmultrgb]
    , ["extension1" <$$> _selectCOMPextension1]
    , ["promoteextension1" <$$> _selectCOMPpromoteextension1]
    , Just <$> rgbMap "bordera" _selectCOMPbordera
    , ["uvbuttonsleft" <$$> _selectCOMPuvbuttonsleft]
    , Just <$> rgbMap "bgcolor" _selectCOMPbgcolor
    , ["resizehmax" <$$> _selectCOMPresizehmax]
    , [("helpdat",) . ResolveP <$> _selectCOMPhelpdat]
    , ["extension3" <$$> _selectCOMPextension3]
    , ["aspect" <$$> _selectCOMPaspect]
    , ["cursor" <$$> _selectCOMPcursor]
    , ["align" <$$> _selectCOMPalign]
    , ["extname2" <$$> _selectCOMPextname2]
    , ["h" <$$> _selectCOMPh]
    , ["leftborder" <$$> _selectCOMPleftborder]
    , ["topfill" <$$> _selectCOMPtopfill]
    , ["resizewmin" <$$> _selectCOMPresizewmin]
    , ["mouserel" <$$> _selectCOMPmouserel]
    , ["enablecloningpulse" <$$> _selectCOMPenablecloningpulse]
    , Just <$> vec2Map' "offset" _selectCOMPoffset
    , ["resizeb" <$$> _selectCOMPresizeb]
    , ["leftoffset" <$$> _selectCOMPleftoffset]
    , ["y" <$$> _selectCOMPy]
    , ["pvscrollbar" <$$> _selectCOMPpvscrollbar]
    , ["crop" <$$> _selectCOMPcrop]
    , ["bottomoffset" <$$> _selectCOMPbottomoffset]
    , ["display" <$$> _selectCOMPdisplay]
    , ["fit" <$$> _selectCOMPfit]
    , ["drop" <$$> _selectCOMPdrop]
    , ["extname4" <$$> _selectCOMPextname4]
    , ["marginl" <$$> _selectCOMPmarginl]
    , ["uvbuttonsright" <$$> _selectCOMPuvbuttonsright]
    , ["resizewmax" <$$> _selectCOMPresizewmax]
    , [("dragscript",) . ResolveP <$> _selectCOMPdragscript]
    , ["bottomanchor" <$$> _selectCOMPbottomanchor]
    , ["sizefromwindow" <$$> _selectCOMPsizefromwindow]
    , ["opacity" <$$> _selectCOMPopacity]
    , Just <$> rgbMap "borderb" _selectCOMPborderb
    , ["mousewheel" <$$> _selectCOMPmousewheel]
    , ["overridemethod" <$$> _selectCOMPoverridemethod]
    , ["reposition" <$$> _selectCOMPreposition]
    , ["enable" <$$> _selectCOMPenable]
    , [("chop",) . ResolveP <$> _selectCOMPchop]
    , ["spacing" <$$> _selectCOMPspacing]
    , ["rightoffset" <$$> _selectCOMPrightoffset]
    , ["vieweraspect" <$$> _selectCOMPvieweraspect]
    , ["alignmax" <$$> _selectCOMPalignmax]
    , ["scrolloverlay" <$$> _selectCOMPscrolloverlay]
    , [("clone",) . ResolveP <$> _selectCOMPclone]
    , ["keepmemory" <$$> _selectCOMPkeepmemory]
    , ["justifyv" <$$> _selectCOMPjustifyv]
    , ["hfillweight" <$$> _selectCOMPhfillweight]
    , ["horigin" <$$> _selectCOMPhorigin]
    , [("top",) . ResolveP <$> _selectCOMPtop]
    , Just <$> vec2Map' "scale" _selectCOMPscale
    , ["phscrollbar" <$$> _selectCOMPphscrollbar]
    , ["opshortcut" <$$> _selectCOMPopshortcut]
    , ["bottomborder" <$$> _selectCOMPbottomborder]]
  pars (EnvironmentlightCOMP {..}) = catMaybes . mconcat $ [ ["projection" <$$> _environmentlightCOMPprojection]
    , ["viewanglemethod" <$$> _environmentlightCOMPviewanglemethod]
    , ["fognear" <$$> _environmentlightCOMPfognear]
    , ["extname1" <$$> _environmentlightCOMPextname1]
    , ["loadondemand" <$$> _environmentlightCOMPloadondemand]
    , ["promoteextension4" <$$> _environmentlightCOMPpromoteextension4]
    , ["extension4" <$$> _environmentlightCOMPextension4]
    , ["pathorient" <$$> _environmentlightCOMPpathorient]
    , ["roll" <$$> _environmentlightCOMProll]
    , ["nodeview" <$$> _environmentlightCOMPnodeview]
    , ["envlightmapprefilter" <$$> _environmentlightCOMPenvlightmapprefilter]
    , [("customproj",) . ResolveP <$> _environmentlightCOMPcustomproj]
    , ["bank" <$$> _environmentlightCOMPbank]
    , ["fov" <$$> _environmentlightCOMPfov]
    , Just <$> vec3Map' "p" _environmentlightCOMPp
    , [("envlightmap",) . ResolveP <$> _environmentlightCOMPenvlightmap]
    , ["savebackup" <$$> _environmentlightCOMPsavebackup]
    , ["projectionblend" <$$> _environmentlightCOMPprojectionblend]
    , ["pos" <$$> _environmentlightCOMPpos]
    , ["fogdensity" <$$> _environmentlightCOMPfogdensity]
    , ["subcompname" <$$> _environmentlightCOMPsubcompname]
    , ["pickpriority" <$$> _environmentlightCOMPpickpriority]
    , ["fogalpha" <$$> _environmentlightCOMPfogalpha]
    , [("envlightspecmap",) . ResolveP <$> _environmentlightCOMPenvlightspecmap]
    , Just <$> vec3Map' "pr" _environmentlightCOMPpr
    , Just <$> rgbMap "wcolor" _environmentlightCOMPwcolor
    , ["focal" <$$> _environmentlightCOMPfocal]
    , ["reinitnet" <$$> _environmentlightCOMPreinitnet]
    , ["far" <$$> _environmentlightCOMPfar]
    , ["externaltox" <$$> _environmentlightCOMPexternaltox]
    , ["parentshortcut" <$$> _environmentlightCOMPparentshortcut]
    , ["preset" <$$> _environmentlightCOMPpreset]
    , [("pathsop",) . ResolveP <$> _environmentlightCOMPpathsop]
    , ["aperture" <$$> _environmentlightCOMPaperture]
    , ["promoteextension1" <$$> _environmentlightCOMPpromoteextension1]
    , Just <$> vec3Map' "up" _environmentlightCOMPup
    , ["pxord" <$$> _environmentlightCOMPpxord]
    , ["extname3" <$$> _environmentlightCOMPextname3]
    , ["reinitextensions" <$$> _environmentlightCOMPreinitextensions]
    , ["prord" <$$> _environmentlightCOMPprord]
    , Just <$> vec3Map' "pt" _environmentlightCOMPpt
    , ["lookup" <$$> _environmentlightCOMPlookup]
    , Just <$> vec3Map' "t" _environmentlightCOMPt
    , Just <$> rgbMap "fogcolor" _environmentlightCOMPfogcolor
    , ["drawpriority" <$$> _environmentlightCOMPdrawpriority]
    , Just <$> vec2Map' "win" _environmentlightCOMPwin
    , ["render" <$$> _environmentlightCOMPrender]
    , ["extension1" <$$> _environmentlightCOMPextension1]
    , ["prioritymethod" <$$> _environmentlightCOMPprioritymethod]
    , ["envlightmapquality" <$$> _environmentlightCOMPenvlightmapquality]
    , Just <$> vec3Map' "ps" _environmentlightCOMPps
    , ["fog" <$$> _environmentlightCOMPfog]
    , ["fogfar" <$$> _environmentlightCOMPfogfar]
    , ["extension3" <$$> _environmentlightCOMPextension3]
    , ["pxform" <$$> _environmentlightCOMPpxform]
    , [("material",) . ResolveP <$> _environmentlightCOMPmaterial]
    , Just <$> rgbaMap "bgcolor" _environmentlightCOMPbgcolor
    , Just <$> vec3Map' "r" _environmentlightCOMPr
    , ["enablecloning" <$$> _environmentlightCOMPenablecloning]
    , Just <$> vec3Map' "envlightmaprotate" _environmentlightCOMPenvlightmaprotate
    , Just <$> vec3Map' "pp" _environmentlightCOMPpp
    , ["extname2" <$$> _environmentlightCOMPextname2]
    , ["opshortcut" <$$> _environmentlightCOMPopshortcut]
    , ["pcommit" <$$> _environmentlightCOMPpcommit]
    , ["promoteextension2" <$$> _environmentlightCOMPpromoteextension2]
    , ["reloadtoxonstart" <$$> _environmentlightCOMPreloadtoxonstart]
    , ["enablecloningpulse" <$$> _environmentlightCOMPenablecloningpulse]
    , [("envlightdiffusemap",) . ResolveP <$> _environmentlightCOMPenvlightdiffusemap]
    , ["promoteextension3" <$$> _environmentlightCOMPpromoteextension3]
    , ["extname4" <$$> _environmentlightCOMPextname4]
    , [("fogmap",) . ResolveP <$> _environmentlightCOMPfogmap]
    , ["xord" <$$> _environmentlightCOMPxord]
    , ["orthowidth" <$$> _environmentlightCOMPorthowidth]
    , ["near" <$$> _environmentlightCOMPnear]
    , ["extension2" <$$> _environmentlightCOMPextension2]
    , Just <$> vec3Map' "s" _environmentlightCOMPs
    , Just <$> rgbMap "c" _environmentlightCOMPc
    , [("clone",) . ResolveP <$> _environmentlightCOMPclone]
    , ["envlightmaptype2d" <$$> _environmentlightCOMPenvlightmaptype2d]
    , ["rord" <$$> _environmentlightCOMPrord]
    , ["dimmer" <$$> _environmentlightCOMPdimmer]]
  pars (WindowCOMP {..}) = catMaybes . mconcat $ [ ["dpiscaling" <$$> _windowCOMPdpiscaling]
    , ["extname1" <$$> _windowCOMPextname1]
    , ["justifyh" <$$> _windowCOMPjustifyh]
    , ["promoteextension4" <$$> _windowCOMPpromoteextension4]
    , ["winw" <$$> _windowCOMPwinw]
    , ["extension4" <$$> _windowCOMPextension4]
    , ["savebackup" <$$> _windowCOMPsavebackup]
    , ["bordersinsize" <$$> _windowCOMPbordersinsize]
    , ["borders" <$$> _windowCOMPborders]
    , ["single" <$$> _windowCOMPsingle]
    , ["extension3" <$$> _windowCOMPextension3]
    , ["parentshortcut" <$$> _windowCOMPparentshortcut]
    , ["enablecloning" <$$> _windowCOMPenablecloning]
    , ["winoffsety" <$$> _windowCOMPwinoffsety]
    , ["hwframelock" <$$> _windowCOMPhwframelock]
    , ["extname2" <$$> _windowCOMPextname2]
    , ["opshortcut" <$$> _windowCOMPopshortcut]
    , ["includedialog" <$$> _windowCOMPincludedialog]
    , ["promoteextension2" <$$> _windowCOMPpromoteextension2]
    , ["closeescape" <$$> _windowCOMPcloseescape]
    , ["enablecloningpulse" <$$> _windowCOMPenablecloningpulse]
    , ["performance" <$$> _windowCOMPperformance]
    , ["loadondemand" <$$> _windowCOMPloadondemand]
    , ["extension1" <$$> _windowCOMPextension1]
    , ["winoffsetx" <$$> _windowCOMPwinoffsetx]
    , ["promoteextension3" <$$> _windowCOMPpromoteextension3]
    , ["winh" <$$> _windowCOMPwinh]
    , ["alwaysontop" <$$> _windowCOMPalwaysontop]
    , ["extname4" <$$> _windowCOMPextname4]
    , ["reloadtoxonstart" <$$> _windowCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _windowCOMPreinitnet]
    , ["externaltox" <$$> _windowCOMPexternaltox]
    , ["monitor" <$$> _windowCOMPmonitor]
    , ["interact" <$$> _windowCOMPinteract]
    , ["winclose" <$$> _windowCOMPwinclose]
    , ["update" <$$> _windowCOMPupdate]
    , ["promoteextension1" <$$> _windowCOMPpromoteextension1]
    , ["subcompname" <$$> _windowCOMPsubcompname]
    , ["title" <$$> _windowCOMPtitle]
    , ["winopen" <$$> _windowCOMPwinopen]
    , ["extname3" <$$> _windowCOMPextname3]
    , ["justifyoffsetto" <$$> _windowCOMPjustifyoffsetto]
    , ["reinitextensions" <$$> _windowCOMPreinitextensions]
    , ["ignoretaskbar" <$$> _windowCOMPignoretaskbar]
    , ["opendialog" <$$> _windowCOMPopendialog]
    , ["size" <$$> _windowCOMPsize]
    , ["setperform" <$$> _windowCOMPsetperform]
    , [("clone",) . ResolveP <$> _windowCOMPclone]
    , ["drawwindow" <$$> _windowCOMPdrawwindow]
    , ["cursorvisible" <$$> _windowCOMPcursorvisible]
    , ["openglstereo" <$$> _windowCOMPopenglstereo]
    , ["vsyncmode" <$$> _windowCOMPvsyncmode]
    , ["extension2" <$$> _windowCOMPextension2]
    , ["justifyv" <$$> _windowCOMPjustifyv]]
  pars (ButtonCOMP {..}) = catMaybes . mconcat $ [ ["topborder" <$$> _buttonCOMPtopborder]
    , ["scrollbarthickness" <$$> _buttonCOMPscrollbarthickness]
    , ["w" <$$> _buttonCOMPw]
    , ["alignorder" <$$> _buttonCOMPalignorder]
    , ["loadondemand" <$$> _buttonCOMPloadondemand]
    , ["justifyh" <$$> _buttonCOMPjustifyh]
    , ["promoteextension4" <$$> _buttonCOMPpromoteextension4]
    , [("dropdestscript",) . ResolveP <$> _buttonCOMPdropdestscript]
    , ["repositionxmin" <$$> _buttonCOMPrepositionxmin]
    , ["x" <$$> _buttonCOMPx]
    , ["nodeview" <$$> _buttonCOMPnodeview]
    , ["margint" <$$> _buttonCOMPmargint]
    , ["resizer" <$$> _buttonCOMPresizer]
    , [("droptypescript",) . ResolveP <$> _buttonCOMPdroptypescript]
    , ["promoteextension2" <$$> _buttonCOMPpromoteextension2]
    , ["fixedaspect" <$$> _buttonCOMPfixedaspect]
    , ["extname1" <$$> _buttonCOMPextname1]
    , ["marginl" <$$> _buttonCOMPmarginl]
    , ["dodisablecolor" <$$> _buttonCOMPdodisablecolor]
    , ["multitouch" <$$> _buttonCOMPmultitouch]
    , ["bgalpha" <$$> _buttonCOMPbgalpha]
    , ["hmode" <$$> _buttonCOMPhmode]
    , ["savebackup" <$$> _buttonCOMPsavebackup]
    , ["uvbuttonsmiddle" <$$> _buttonCOMPuvbuttonsmiddle]
    , ["leftanchor" <$$> _buttonCOMPleftanchor]
    , ["clickthrough" <$$> _buttonCOMPclickthrough]
    , ["disablealpha" <$$> _buttonCOMPdisablealpha]
    , ["vmode" <$$> _buttonCOMPvmode]
    , ["vorigin" <$$> _buttonCOMPvorigin]
    , ["drag" <$$> _buttonCOMPdrag]
    , Just <$> rgbMap "disablecolor" _buttonCOMPdisablecolor
    , ["resizehmin" <$$> _buttonCOMPresizehmin]
    , ["extname3" <$$> _buttonCOMPextname3]
    , ["borderaalpha" <$$> _buttonCOMPborderaalpha]
    , ["overlay" <$$> _buttonCOMPoverlay]
    , [("buttongroupdat",) . ResolveP <$> _buttonCOMPbuttongroupdat]
    , ["repositionymin" <$$> _buttonCOMPrepositionymin]
    , ["enablecloning" <$$> _buttonCOMPenablecloning]
    , ["subcompname" <$$> _buttonCOMPsubcompname]
    , ["align" <$$> _buttonCOMPalign]
    , ["reloadtoxonstart" <$$> _buttonCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _buttonCOMPreinitnet]
    , ["marginr" <$$> _buttonCOMPmarginr]
    , ["parentshortcut" <$$> _buttonCOMPparentshortcut]
    , ["resizet" <$$> _buttonCOMPresizet]
    , ["extension4" <$$> _buttonCOMPextension4]
    , ["leftborderi" <$$> _buttonCOMPleftborderi]
    , ["repocomp" <$$> _buttonCOMPrepocomp]
    , ["repositionymax" <$$> _buttonCOMPrepositionymax]
    , ["anchordrag" <$$> _buttonCOMPanchordrag]
    , ["bottomborderi" <$$> _buttonCOMPbottomborderi]
    , ["rightborder" <$$> _buttonCOMPrightborder]
    , ["bottomborder" <$$> _buttonCOMPbottomborder]
    , ["layer" <$$> _buttonCOMPlayer]
    , ["reinitextensions" <$$> _buttonCOMPreinitextensions]
    , ["topborderi" <$$> _buttonCOMPtopborderi]
    , ["alignallow" <$$> _buttonCOMPalignallow]
    , [("dragdropcallbacks",) . ResolveP <$> _buttonCOMPdragdropcallbacks]
    , ["topanchor" <$$> _buttonCOMPtopanchor]
    , ["rightborderi" <$$> _buttonCOMPrightborderi]
    , ["resizel" <$$> _buttonCOMPresizel]
    , ["vfillweight" <$$> _buttonCOMPvfillweight]
    , ["borderover" <$$> _buttonCOMPborderover]
    , ["namedchop" <$$> _buttonCOMPnamedchop]
    , ["marginb" <$$> _buttonCOMPmarginb]
    , ["repositionxmax" <$$> _buttonCOMPrepositionxmax]
    , ["extension2" <$$> _buttonCOMPextension2]
    , ["alignmax" <$$> _buttonCOMPalignmax]
    , ["justifyv" <$$> _buttonCOMPjustifyv]
    , Just <$> vec2Map' "postoffset" _buttonCOMPpostoffset
    , ["promoteextension3" <$$> _buttonCOMPpromoteextension3]
    , ["topoffset" <$$> _buttonCOMPtopoffset]
    , ["composite" <$$> _buttonCOMPcomposite]
    , [("dragscript",) . ResolveP <$> _buttonCOMPdragscript]
    , ["multrgb" <$$> _buttonCOMPmultrgb]
    , ["extension1" <$$> _buttonCOMPextension1]
    , ["promoteextension1" <$$> _buttonCOMPpromoteextension1]
    , Just <$> rgbMap "bordera" _buttonCOMPbordera
    , ["uvbuttonsleft" <$$> _buttonCOMPuvbuttonsleft]
    , Just <$> rgbMap "bgcolor" _buttonCOMPbgcolor
    , ["resizehmax" <$$> _buttonCOMPresizehmax]
    , [("helpdat",) . ResolveP <$> _buttonCOMPhelpdat]
    , ["extension3" <$$> _buttonCOMPextension3]
    , ["drop" <$$> _buttonCOMPdrop]
    , ["externaltox" <$$> _buttonCOMPexternaltox]
    , ["buttontype" <$$> _buttonCOMPbuttontype]
    , ["rightanchor" <$$> _buttonCOMPrightanchor]
    , ["extname2" <$$> _buttonCOMPextname2]
    , ["h" <$$> _buttonCOMPh]
    , ["leftborder" <$$> _buttonCOMPleftborder]
    , ["topfill" <$$> _buttonCOMPtopfill]
    , ["resizewmin" <$$> _buttonCOMPresizewmin]
    , ["mouserel" <$$> _buttonCOMPmouserel]
    , ["enablecloningpulse" <$$> _buttonCOMPenablecloningpulse]
    , Just <$> vec2Map' "offset" _buttonCOMPoffset
    , ["resizeb" <$$> _buttonCOMPresizeb]
    , ["leftoffset" <$$> _buttonCOMPleftoffset]
    , ["y" <$$> _buttonCOMPy]
    , ["pvscrollbar" <$$> _buttonCOMPpvscrollbar]
    , ["crop" <$$> _buttonCOMPcrop]
    , ["bottomoffset" <$$> _buttonCOMPbottomoffset]
    , ["display" <$$> _buttonCOMPdisplay]
    , ["fit" <$$> _buttonCOMPfit]
    , ["aspect" <$$> _buttonCOMPaspect]
    , ["extname4" <$$> _buttonCOMPextname4]
    , ["uvbuttonsright" <$$> _buttonCOMPuvbuttonsright]
    , ["resizewmax" <$$> _buttonCOMPresizewmax]
    , Just <$> rgbMap "borderb" _buttonCOMPborderb
    , ["bottomanchor" <$$> _buttonCOMPbottomanchor]
    , ["sizefromwindow" <$$> _buttonCOMPsizefromwindow]
    , ["opacity" <$$> _buttonCOMPopacity]
    , ["buttongroup" <$$> _buttonCOMPbuttongroup]
    , [("top",) . ResolveP <$> _buttonCOMPtop]
    , ["mousewheel" <$$> _buttonCOMPmousewheel]
    , ["overridemethod" <$$> _buttonCOMPoverridemethod]
    , ["reposition" <$$> _buttonCOMPreposition]
    , ["enable" <$$> _buttonCOMPenable]
    , [("chop",) . ResolveP <$> _buttonCOMPchop]
    , ["rightoffset" <$$> _buttonCOMPrightoffset]
    , ["vieweraspect" <$$> _buttonCOMPvieweraspect]
    , ["borderbalpha" <$$> _buttonCOMPborderbalpha]
    , ["scrolloverlay" <$$> _buttonCOMPscrolloverlay]
    , [("clone",) . ResolveP <$> _buttonCOMPclone]
    , ["keepmemory" <$$> _buttonCOMPkeepmemory]
    , [("dropscript",) . ResolveP <$> _buttonCOMPdropscript]
    , ["hfillweight" <$$> _buttonCOMPhfillweight]
    , ["horigin" <$$> _buttonCOMPhorigin]
    , ["spacing" <$$> _buttonCOMPspacing]
    , Just <$> vec2Map' "scale" _buttonCOMPscale
    , ["phscrollbar" <$$> _buttonCOMPphscrollbar]
    , ["opshortcut" <$$> _buttonCOMPopshortcut]
    , ["cursor" <$$> _buttonCOMPcursor]]
  pars (BlendCOMP {..}) = catMaybes . mconcat $ [ ["instancea" <$$> _blendCOMPinstancea]
    , ["parenttype" <$$> _blendCOMPparenttype]
    , ["instancerotupy" <$$> _blendCOMPinstancerotupy]
    , ["extname1" <$$> _blendCOMPextname1]
    , ["instancerottoz" <$$> _blendCOMPinstancerottoz]
    , ["instancesz" <$$> _blendCOMPinstancesz]
    , ["promoteextension4" <$$> _blendCOMPpromoteextension4]
    , ["instanceb" <$$> _blendCOMPinstanceb]
    , ["extension4" <$$> _blendCOMPextension4]
    , ["pathorient" <$$> _blendCOMPpathorient]
    , ["roll" <$$> _blendCOMProll]
    , ["nodeview" <$$> _blendCOMPnodeview]
    , ["instancepx" <$$> _blendCOMPinstancepx]
    , Just <$> vec3Map' "pt" _blendCOMPpt
    , ["instancetexanisotropy" <$$> _blendCOMPinstancetexanisotropy]
    , ["blendm3" <$$> _blendCOMPblendm3]
    , ["prioritymethod" <$$> _blendCOMPprioritymethod]
    , ["blendw3" <$$> _blendCOMPblendw3]
    , ["instancefirstrow" <$$> _blendCOMPinstancefirstrow]
    , ["bank" <$$> _blendCOMPbank]
    , ["instancety" <$$> _blendCOMPinstancety]
    , ["instxord" <$$> _blendCOMPinstxord]
    , Just <$> vec3Map' "p" _blendCOMPp
    , ["shortrot" <$$> _blendCOMPshortrot]
    , ["savebackup" <$$> _blendCOMPsavebackup]
    , ["instancerottox" <$$> _blendCOMPinstancerottox]
    , ["axesorient" <$$> _blendCOMPaxesorient]
    , ["pos" <$$> _blendCOMPpos]
    , [("pathsop",) . ResolveP <$> _blendCOMPpathsop]
    , ["subcompname" <$$> _blendCOMPsubcompname]
    , ["pickpriority" <$$> _blendCOMPpickpriority]
    , ["instancetexfilter" <$$> _blendCOMPinstancetexfilter]
    , Just <$> vec3Map' "pr" _blendCOMPpr
    , ["instanceg" <$$> _blendCOMPinstanceg]
    , ["instancetexmode" <$$> _blendCOMPinstancetexmode]
    , Just <$> rgbMap "wcolor" _blendCOMPwcolor
    , ["enablecloningpulse" <$$> _blendCOMPenablecloningpulse]
    , ["instancew" <$$> _blendCOMPinstancew]
    , ["reloadtoxonstart" <$$> _blendCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _blendCOMPreinitnet]
    , ["externaltox" <$$> _blendCOMPexternaltox]
    , ["reinitextensions" <$$> _blendCOMPreinitextensions]
    , ["preset" <$$> _blendCOMPpreset]
    , ["numinstances" <$$> _blendCOMPnuminstances]
    , Just <$> vec3Map' "up" _blendCOMPup
    , ["promoteextension1" <$$> _blendCOMPpromoteextension1]
    , ["instrord" <$$> _blendCOMPinstrord]
    , ["pxord" <$$> _blendCOMPpxord]
    , ["instancetexindex" <$$> _blendCOMPinstancetexindex]
    , ["extname3" <$$> _blendCOMPextname3]
    , ["parentshortcut" <$$> _blendCOMPparentshortcut]
    , ["instancesx" <$$> _blendCOMPinstancesx]
    , ["instancing" <$$> _blendCOMPinstancing]
    , ["instancepy" <$$> _blendCOMPinstancepy]
    , ["prord" <$$> _blendCOMPprord]
    , ["blendm1" <$$> _blendCOMPblendm1]
    , ["instancerz" <$$> _blendCOMPinstancerz]
    , ["extension2" <$$> _blendCOMPextension2]
    , Just <$> vec3Map' "ps" _blendCOMPps
    , ["reset" <$$> _blendCOMPreset]
    , ["instanceu" <$$> _blendCOMPinstanceu]
    , ["blendw2" <$$> _blendCOMPblendw2]
    , ["render" <$$> _blendCOMPrender]
    , ["extension1" <$$> _blendCOMPextension1]
    , ["instancetexextendv" <$$> _blendCOMPinstancetexextendv]
    , ["extension3" <$$> _blendCOMPextension3]
    , ["pxform" <$$> _blendCOMPpxform]
    , [("material",) . ResolveP <$> _blendCOMPmaterial]
    , ["instancer" <$$> _blendCOMPinstancer]
    , Just <$> vec3Map' "r" _blendCOMPr
    , ["enablecloning" <$$> _blendCOMPenablecloning]
    , ["instancecolormode" <$$> _blendCOMPinstancecolormode]
    , ["blendm4" <$$> _blendCOMPblendm4]
    , ["blendm2" <$$> _blendCOMPblendm2]
    , ["instancerx" <$$> _blendCOMPinstancerx]
    , ["extname2" <$$> _blendCOMPextname2]
    , ["opshortcut" <$$> _blendCOMPopshortcut]
    , ["instancetx" <$$> _blendCOMPinstancetx]
    , ["pcommit" <$$> _blendCOMPpcommit]
    , ["promoteextension2" <$$> _blendCOMPpromoteextension2]
    , ["blendw4" <$$> _blendCOMPblendw4]
    , ["instanceorder" <$$> _blendCOMPinstanceorder]
    , ["sequence" <$$> _blendCOMPsequence]
    , ["instancetexextendu" <$$> _blendCOMPinstancetexextendu]
    , ["instancemode" <$$> _blendCOMPinstancemode]
    , ["instancerottoorder" <$$> _blendCOMPinstancerottoorder]
    , ["instancepz" <$$> _blendCOMPinstancepz]
    , [("instancetexs",) . ResolveP <$> _blendCOMPinstancetexs]
    , ["lookup" <$$> _blendCOMPlookup]
    , ["promoteextension3" <$$> _blendCOMPpromoteextension3]
    , ["extname4" <$$> _blendCOMPextname4]
    , ["blendw1" <$$> _blendCOMPblendw1]
    , ["instancerotupz" <$$> _blendCOMPinstancerotupz]
    , ["rord" <$$> _blendCOMPrord]
    , Just <$> vec3Map' "pp" _blendCOMPpp
    , ["instancesy" <$$> _blendCOMPinstancesy]
    , ["xord" <$$> _blendCOMPxord]
    , ["instancery" <$$> _blendCOMPinstancery]
    , Just <$> vec3Map' "t" _blendCOMPt
    , ["noffset" <$$> _blendCOMPnoffset]
    , Just <$> vec3Map' "s" _blendCOMPs
    , [("clone",) . ResolveP <$> _blendCOMPclone]
    , ["drawpriority" <$$> _blendCOMPdrawpriority]
    , ["instancetexextendw" <$$> _blendCOMPinstancetexextendw]
    , ["instancerotupx" <$$> _blendCOMPinstancerotupx]
    , ["loadondemand" <$$> _blendCOMPloadondemand]
    , ["instancerottoy" <$$> _blendCOMPinstancerottoy]
    , ["instancev" <$$> _blendCOMPinstancev]
    , ["instancetz" <$$> _blendCOMPinstancetz]]
  pars (CamerablendCOMP {..}) = catMaybes . mconcat $ [ ["projection" <$$> _camerablendCOMPprojection]
    , ["viewanglemethod" <$$> _camerablendCOMPviewanglemethod]
    , ["parenttype" <$$> _camerablendCOMPparenttype]
    , ["extname1" <$$> _camerablendCOMPextname1]
    , ["promoteextension4" <$$> _camerablendCOMPpromoteextension4]
    , ["fognear" <$$> _camerablendCOMPfognear]
    , ["pathorient" <$$> _camerablendCOMPpathorient]
    , ["roll" <$$> _camerablendCOMProll]
    , ["nodeview" <$$> _camerablendCOMPnodeview]
    , Just <$> vec3Map' "pt" _camerablendCOMPpt
    , ["blendm3" <$$> _camerablendCOMPblendm3]
    , ["prioritymethod" <$$> _camerablendCOMPprioritymethod]
    , ["blendw3" <$$> _camerablendCOMPblendw3]
    , ["blendm4" <$$> _camerablendCOMPblendm4]
    , ["bank" <$$> _camerablendCOMPbank]
    , ["fov" <$$> _camerablendCOMPfov]
    , Just <$> vec3Map' "p" _camerablendCOMPp
    , ["shortrot" <$$> _camerablendCOMPshortrot]
    , ["savebackup" <$$> _camerablendCOMPsavebackup]
    , ["projectionblend" <$$> _camerablendCOMPprojectionblend]
    , ["axesorient" <$$> _camerablendCOMPaxesorient]
    , ["pos" <$$> _camerablendCOMPpos]
    , [("pathsop",) . ResolveP <$> _camerablendCOMPpathsop]
    , ["loadondemand" <$$> _camerablendCOMPloadondemand]
    , ["pickpriority" <$$> _camerablendCOMPpickpriority]
    , ["fogalpha" <$$> _camerablendCOMPfogalpha]
    , Just <$> vec3Map' "pr" _camerablendCOMPpr
    , Just <$> rgbMap "wcolor" _camerablendCOMPwcolor
    , ["enablecloningpulse" <$$> _camerablendCOMPenablecloningpulse]
    , ["focal" <$$> _camerablendCOMPfocal]
    , ["reinitnet" <$$> _camerablendCOMPreinitnet]
    , ["far" <$$> _camerablendCOMPfar]
    , ["externaltox" <$$> _camerablendCOMPexternaltox]
    , Just <$> vec3Map' "ps" _camerablendCOMPps
    , ["preset" <$$> _camerablendCOMPpreset]
    , ["extension4" <$$> _camerablendCOMPextension4]
    , ["fogdensity" <$$> _camerablendCOMPfogdensity]
    , ["aperture" <$$> _camerablendCOMPaperture]
    , Just <$> vec3Map' "up" _camerablendCOMPup
    , ["promoteextension1" <$$> _camerablendCOMPpromoteextension1]
    , ["subcompname" <$$> _camerablendCOMPsubcompname]
    , ["pxord" <$$> _camerablendCOMPpxord]
    , ["extname3" <$$> _camerablendCOMPextname3]
    , ["reinitextensions" <$$> _camerablendCOMPreinitextensions]
    , ["prord" <$$> _camerablendCOMPprord]
    , ["blendm1" <$$> _camerablendCOMPblendm1]
    , ["extension2" <$$> _camerablendCOMPextension2]
    , Just <$> rgbMap "fogcolor" _camerablendCOMPfogcolor
    , ["drawpriority" <$$> _camerablendCOMPdrawpriority]
    , ["reset" <$$> _camerablendCOMPreset]
    , Just <$> vec2Map' "win" _camerablendCOMPwin
    , ["blendw2" <$$> _camerablendCOMPblendw2]
    , ["render" <$$> _camerablendCOMPrender]
    , ["extension1" <$$> _camerablendCOMPextension1]
    , [("customproj",) . ResolveP <$> _camerablendCOMPcustomproj]
    , ["fog" <$$> _camerablendCOMPfog]
    , ["fogfar" <$$> _camerablendCOMPfogfar]
    , Just <$> rgbaMap "bgcolor" _camerablendCOMPbgcolor
    , ["pxform" <$$> _camerablendCOMPpxform]
    , [("material",) . ResolveP <$> _camerablendCOMPmaterial]
    , ["extension3" <$$> _camerablendCOMPextension3]
    , Just <$> vec3Map' "r" _camerablendCOMPr
    , ["enablecloning" <$$> _camerablendCOMPenablecloning]
    , Just <$> vec3Map' "pp" _camerablendCOMPpp
    , ["blendm2" <$$> _camerablendCOMPblendm2]
    , ["extname2" <$$> _camerablendCOMPextname2]
    , ["opshortcut" <$$> _camerablendCOMPopshortcut]
    , ["pcommit" <$$> _camerablendCOMPpcommit]
    , ["promoteextension2" <$$> _camerablendCOMPpromoteextension2]
    , ["reloadtoxonstart" <$$> _camerablendCOMPreloadtoxonstart]
    , ["blendw4" <$$> _camerablendCOMPblendw4]
    , ["sequence" <$$> _camerablendCOMPsequence]
    , ["parentshortcut" <$$> _camerablendCOMPparentshortcut]
    , ["lookup" <$$> _camerablendCOMPlookup]
    , ["promoteextension3" <$$> _camerablendCOMPpromoteextension3]
    , ["extname4" <$$> _camerablendCOMPextname4]
    , ["blendw1" <$$> _camerablendCOMPblendw1]
    , [("fogmap",) . ResolveP <$> _camerablendCOMPfogmap]
    , ["xord" <$$> _camerablendCOMPxord]
    , ["near" <$$> _camerablendCOMPnear]
    , Just <$> vec3Map' "t" _camerablendCOMPt
    , ["noffset" <$$> _camerablendCOMPnoffset]
    , Just <$> vec3Map' "s" _camerablendCOMPs
    , [("clone",) . ResolveP <$> _camerablendCOMPclone]
    , ["rord" <$$> _camerablendCOMPrord]
    , ["orthowidth" <$$> _camerablendCOMPorthowidth]]
  pars (BoneCOMP {..}) = catMaybes . mconcat $ [ ["instancea" <$$> _boneCOMPinstancea]
    , ["endxrange" <$$> _boneCOMPendxrange]
    , ["instancerotupy" <$$> _boneCOMPinstancerotupy]
    , ["extname1" <$$> _boneCOMPextname1]
    , ["instancerottoz" <$$> _boneCOMPinstancerottoz]
    , ["loadondemand" <$$> _boneCOMPloadondemand]
    , ["promoteextension4" <$$> _boneCOMPpromoteextension4]
    , ["ikdamp" <$$> _boneCOMPikdamp]
    , ["extension4" <$$> _boneCOMPextension4]
    , ["pathorient" <$$> _boneCOMPpathorient]
    , ["roll" <$$> _boneCOMProll]
    , ["crbotheight" <$$> _boneCOMPcrbotheight]
    , ["instancepx" <$$> _boneCOMPinstancepx]
    , Just <$> vec3Map' "pt" _boneCOMPpt
    , ["instancetexanisotropy" <$$> _boneCOMPinstancetexanisotropy]
    , ["instancetexfilter" <$$> _boneCOMPinstancetexfilter]
    , ["prioritymethod" <$$> _boneCOMPprioritymethod]
    , ["instancefirstrow" <$$> _boneCOMPinstancefirstrow]
    , ["bank" <$$> _boneCOMPbank]
    , ["instancety" <$$> _boneCOMPinstancety]
    , ["instxord" <$$> _boneCOMPinstxord]
    , Just <$> vec3Map' "p" _boneCOMPp
    , Just <$> vec3Map' "crtopcap" _boneCOMPcrtopcap
    , ["savebackup" <$$> _boneCOMPsavebackup]
    , ["instancev" <$$> _boneCOMPinstancev]
    , ["instancerottox" <$$> _boneCOMPinstancerottox]
    , ["pos" <$$> _boneCOMPpos]
    , ["endyrange" <$$> _boneCOMPendyrange]
    , [("pathsop",) . ResolveP <$> _boneCOMPpathsop]
    , ["subcompname" <$$> _boneCOMPsubcompname]
    , ["pickpriority" <$$> _boneCOMPpickpriority]
    , ["extension1" <$$> _boneCOMPextension1]
    , ["instanceorder" <$$> _boneCOMPinstanceorder]
    , Just <$> vec3Map' "pr" _boneCOMPpr
    , ["instanceg" <$$> _boneCOMPinstanceg]
    , ["instancetexmode" <$$> _boneCOMPinstancetexmode]
    , Just <$> rgbMap "wcolor" _boneCOMPwcolor
    , ["enablecloningpulse" <$$> _boneCOMPenablecloningpulse]
    , ["instanceb" <$$> _boneCOMPinstanceb]
    , ["reloadtoxonstart" <$$> _boneCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _boneCOMPreinitnet]
    , ["externaltox" <$$> _boneCOMPexternaltox]
    , ["reinitextensions" <$$> _boneCOMPreinitextensions]
    , ["preset" <$$> _boneCOMPpreset]
    , ["numinstances" <$$> _boneCOMPnuminstances]
    , Just <$> vec3Map' "restangles" _boneCOMPrestangles
    , Just <$> vec3Map' "up" _boneCOMPup
    , ["promoteextension1" <$$> _boneCOMPpromoteextension1]
    , ["instrord" <$$> _boneCOMPinstrord]
    , ["pxord" <$$> _boneCOMPpxord]
    , ["instancetexindex" <$$> _boneCOMPinstancetexindex]
    , ["extname3" <$$> _boneCOMPextname3]
    , ["parentshortcut" <$$> _boneCOMPparentshortcut]
    , ["nodeview" <$$> _boneCOMPnodeview]
    , ["instancesx" <$$> _boneCOMPinstancesx]
    , ["instancing" <$$> _boneCOMPinstancing]
    , ["instancepy" <$$> _boneCOMPinstancepy]
    , ["prord" <$$> _boneCOMPprord]
    , ["instancer" <$$> _boneCOMPinstancer]
    , ["lookup" <$$> _boneCOMPlookup]
    , ["instancerz" <$$> _boneCOMPinstancerz]
    , Just <$> vec3Map' "t" _boneCOMPt
    , ["drawpriority" <$$> _boneCOMPdrawpriority]
    , ["displaylink" <$$> _boneCOMPdisplaylink]
    , ["instanceu" <$$> _boneCOMPinstanceu]
    , ["instancepz" <$$> _boneCOMPinstancepz]
    , ["render" <$$> _boneCOMPrender]
    , ["beginyrange" <$$> _boneCOMPbeginyrange]
    , Just <$> vec3Map' "ps" _boneCOMPps
    , ["instancetexextendv" <$$> _boneCOMPinstancetexextendv]
    , ["extension3" <$$> _boneCOMPextension3]
    , ["pxform" <$$> _boneCOMPpxform]
    , ["displaycapture" <$$> _boneCOMPdisplaycapture]
    , ["yrolloff" <$$> _boneCOMPyrolloff]
    , Just <$> vec3Map' "r" _boneCOMPr
    , ["enablecloning" <$$> _boneCOMPenablecloning]
    , ["instancecolormode" <$$> _boneCOMPinstancecolormode]
    , ["xdamp" <$$> _boneCOMPxdamp]
    , Just <$> vec3Map' "pp" _boneCOMPpp
    , ["instancew" <$$> _boneCOMPinstancew]
    , ["instancerx" <$$> _boneCOMPinstancerx]
    , [("material",) . ResolveP <$> _boneCOMPmaterial]
    , ["opshortcut" <$$> _boneCOMPopshortcut]
    , ["instancetx" <$$> _boneCOMPinstancetx]
    , ["pcommit" <$$> _boneCOMPpcommit]
    , ["promoteextension2" <$$> _boneCOMPpromoteextension2]
    , Just <$> vec3Map' "crcenter" _boneCOMPcrcenter
    , ["ydamp" <$$> _boneCOMPydamp]
    , ["instancetexextendu" <$$> _boneCOMPinstancetexextendu]
    , ["instancemode" <$$> _boneCOMPinstancemode]
    , ["instancerottoorder" <$$> _boneCOMPinstancerottoorder]
    , ["instancesz" <$$> _boneCOMPinstancesz]
    , [("instancetexs",) . ResolveP <$> _boneCOMPinstancetexs]
    , ["promoteextension3" <$$> _boneCOMPpromoteextension3]
    , ["extname4" <$$> _boneCOMPextname4]
    , Just <$> vec3Map' "crbotcap" _boneCOMPcrbotcap
    , ["instancerotupz" <$$> _boneCOMPinstancerotupz]
    , ["rord" <$$> _boneCOMPrord]
    , ["instancesy" <$$> _boneCOMPinstancesy]
    , ["xord" <$$> _boneCOMPxord]
    , ["length" <$$> _boneCOMPlength]
    , ["instancery" <$$> _boneCOMPinstancery]
    , ["extension2" <$$> _boneCOMPextension2]
    , Just <$> vec3Map' "s" _boneCOMPs
    , ["xrolloff" <$$> _boneCOMPxrolloff]
    , [("clone",) . ResolveP <$> _boneCOMPclone]
    , ["instancerotupx" <$$> _boneCOMPinstancerotupx]
    , ["instancetexextendw" <$$> _boneCOMPinstancetexextendw]
    , ["extname2" <$$> _boneCOMPextname2]
    , ["instancerottoy" <$$> _boneCOMPinstancerottoy]
    , ["beginxrange" <$$> _boneCOMPbeginxrange]
    , ["crtopheight" <$$> _boneCOMPcrtopheight]
    , ["instancetz" <$$> _boneCOMPinstancetz]]
  pars (ListCOMP {..}) = catMaybes . mconcat $ [ ["topborder" <$$> _listCOMPtopborder]
    , ["rows" <$$> _listCOMProws]
    , ["scrollbarthickness" <$$> _listCOMPscrollbarthickness]
    , ["w" <$$> _listCOMPw]
    , ["alignorder" <$$> _listCOMPalignorder]
    , ["loadondemand" <$$> _listCOMPloadondemand]
    , ["justifyh" <$$> _listCOMPjustifyh]
    , ["promoteextension4" <$$> _listCOMPpromoteextension4]
    , [("dropdestscript",) . ResolveP <$> _listCOMPdropdestscript]
    , ["repositionxmin" <$$> _listCOMPrepositionxmin]
    , ["x" <$$> _listCOMPx]
    , ["nodeview" <$$> _listCOMPnodeview]
    , ["repositionymax" <$$> _listCOMPrepositionymax]
    , ["margint" <$$> _listCOMPmargint]
    , ["resizer" <$$> _listCOMPresizer]
    , [("droptypescript",) . ResolveP <$> _listCOMPdroptypescript]
    , ["promoteextension2" <$$> _listCOMPpromoteextension2]
    , ["fixedaspect" <$$> _listCOMPfixedaspect]
    , ["extname1" <$$> _listCOMPextname1]
    , ["marginl" <$$> _listCOMPmarginl]
    , ["dodisablecolor" <$$> _listCOMPdodisablecolor]
    , ["multitouch" <$$> _listCOMPmultitouch]
    , ["bgalpha" <$$> _listCOMPbgalpha]
    , ["hmode" <$$> _listCOMPhmode]
    , ["savebackup" <$$> _listCOMPsavebackup]
    , ["uvbuttonsmiddle" <$$> _listCOMPuvbuttonsmiddle]
    , ["leftanchor" <$$> _listCOMPleftanchor]
    , ["clickthrough" <$$> _listCOMPclickthrough]
    , ["disablealpha" <$$> _listCOMPdisablealpha]
    , ["vmode" <$$> _listCOMPvmode]
    , ["vorigin" <$$> _listCOMPvorigin]
    , ["drag" <$$> _listCOMPdrag]
    , Just <$> rgbMap "disablecolor" _listCOMPdisablecolor
    , ["resizehmin" <$$> _listCOMPresizehmin]
    , ["extname3" <$$> _listCOMPextname3]
    , ["borderaalpha" <$$> _listCOMPborderaalpha]
    , ["offcellcallbacks" <$$> _listCOMPoffcellcallbacks]
    , ["repositionymin" <$$> _listCOMPrepositionymin]
    , ["enablecloning" <$$> _listCOMPenablecloning]
    , ["subcompname" <$$> _listCOMPsubcompname]
    , ["rightanchor" <$$> _listCOMPrightanchor]
    , ["reloadtoxonstart" <$$> _listCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _listCOMPreinitnet]
    , ["hscrollbar" <$$> _listCOMPhscrollbar]
    , ["marginr" <$$> _listCOMPmarginr]
    , ["parentshortcut" <$$> _listCOMPparentshortcut]
    , ["resizet" <$$> _listCOMPresizet]
    , ["extension4" <$$> _listCOMPextension4]
    , ["leftborderi" <$$> _listCOMPleftborderi]
    , ["repocomp" <$$> _listCOMPrepocomp]
    , ["topanchor" <$$> _listCOMPtopanchor]
    , ["anchordrag" <$$> _listCOMPanchordrag]
    , ["bottomborderi" <$$> _listCOMPbottomborderi]
    , ["rightborder" <$$> _listCOMPrightborder]
    , ["bottomborder" <$$> _listCOMPbottomborder]
    , ["layer" <$$> _listCOMPlayer]
    , [("chop",) . ResolveP <$> _listCOMPchop]
    , ["reinitextensions" <$$> _listCOMPreinitextensions]
    , ["topborderi" <$$> _listCOMPtopborderi]
    , ["alignallow" <$$> _listCOMPalignallow]
    , [("dragdropcallbacks",) . ResolveP <$> _listCOMPdragdropcallbacks]
    , ["rightborderi" <$$> _listCOMPrightborderi]
    , ["resizel" <$$> _listCOMPresizel]
    , ["vfillweight" <$$> _listCOMPvfillweight]
    , ["borderover" <$$> _listCOMPborderover]
    , ["namedchop" <$$> _listCOMPnamedchop]
    , ["marginb" <$$> _listCOMPmarginb]
    , ["repositionxmax" <$$> _listCOMPrepositionxmax]
    , ["extension2" <$$> _listCOMPextension2]
    , ["borderbalpha" <$$> _listCOMPborderbalpha]
    , ["justifyv" <$$> _listCOMPjustifyv]
    , ["reset" <$$> _listCOMPreset]
    , ["cols" <$$> _listCOMPcols]
    , ["topoffset" <$$> _listCOMPtopoffset]
    , ["composite" <$$> _listCOMPcomposite]
    , [("dragscript",) . ResolveP <$> _listCOMPdragscript]
    , ["overlay" <$$> _listCOMPoverlay]
    , ["multrgb" <$$> _listCOMPmultrgb]
    , ["extension1" <$$> _listCOMPextension1]
    , ["vscrollbar" <$$> _listCOMPvscrollbar]
    , ["promoteextension3" <$$> _listCOMPpromoteextension3]
    , ["promoteextension1" <$$> _listCOMPpromoteextension1]
    , Just <$> rgbMap "bordera" _listCOMPbordera
    , [("callbacks",) . ResolveP <$> _listCOMPcallbacks]
    , ["uvbuttonsleft" <$$> _listCOMPuvbuttonsleft]
    , Just <$> rgbMap "bgcolor" _listCOMPbgcolor
    , ["resizehmax" <$$> _listCOMPresizehmax]
    , [("helpdat",) . ResolveP <$> _listCOMPhelpdat]
    , ["extension3" <$$> _listCOMPextension3]
    , ["drop" <$$> _listCOMPdrop]
    , ["externaltox" <$$> _listCOMPexternaltox]
    , ["align" <$$> _listCOMPalign]
    , ["extname2" <$$> _listCOMPextname2]
    , ["h" <$$> _listCOMPh]
    , ["leftborder" <$$> _listCOMPleftborder]
    , ["topfill" <$$> _listCOMPtopfill]
    , ["resizewmin" <$$> _listCOMPresizewmin]
    , ["mouserel" <$$> _listCOMPmouserel]
    , ["enablecloningpulse" <$$> _listCOMPenablecloningpulse]
    , Just <$> vec2Map' "offset" _listCOMPoffset
    , ["resizeb" <$$> _listCOMPresizeb]
    , ["leftoffset" <$$> _listCOMPleftoffset]
    , ["y" <$$> _listCOMPy]
    , ["pvscrollbar" <$$> _listCOMPpvscrollbar]
    , ["crop" <$$> _listCOMPcrop]
    , ["bottomoffset" <$$> _listCOMPbottomoffset]
    , ["display" <$$> _listCOMPdisplay]
    , ["fit" <$$> _listCOMPfit]
    , ["aspect" <$$> _listCOMPaspect]
    , ["extname4" <$$> _listCOMPextname4]
    , ["uvbuttonsright" <$$> _listCOMPuvbuttonsright]
    , ["resizewmax" <$$> _listCOMPresizewmax]
    , Just <$> rgbMap "borderb" _listCOMPborderb
    , ["lockfirstrow" <$$> _listCOMPlockfirstrow]
    , ["sizefromwindow" <$$> _listCOMPsizefromwindow]
    , ["opacity" <$$> _listCOMPopacity]
    , [("top",) . ResolveP <$> _listCOMPtop]
    , ["mousewheel" <$$> _listCOMPmousewheel]
    , ["overridemethod" <$$> _listCOMPoverridemethod]
    , ["reposition" <$$> _listCOMPreposition]
    , ["enable" <$$> _listCOMPenable]
    , ["bottomanchor" <$$> _listCOMPbottomanchor]
    , ["rightoffset" <$$> _listCOMPrightoffset]
    , ["vieweraspect" <$$> _listCOMPvieweraspect]
    , ["lockfirstcol" <$$> _listCOMPlockfirstcol]
    , ["alignmax" <$$> _listCOMPalignmax]
    , ["scrolloverlay" <$$> _listCOMPscrolloverlay]
    , [("clone",) . ResolveP <$> _listCOMPclone]
    , ["keepmemory" <$$> _listCOMPkeepmemory]
    , [("dropscript",) . ResolveP <$> _listCOMPdropscript]
    , ["hfillweight" <$$> _listCOMPhfillweight]
    , Just <$> vec2Map' "postoffset" _listCOMPpostoffset
    , ["horigin" <$$> _listCOMPhorigin]
    , ["spacing" <$$> _listCOMPspacing]
    , Just <$> vec2Map' "scale" _listCOMPscale
    , ["phscrollbar" <$$> _listCOMPphscrollbar]
    , ["opshortcut" <$$> _listCOMPopshortcut]
    , ["cursor" <$$> _listCOMPcursor]]
  pars (HandleCOMP {..}) = catMaybes . mconcat $ [ ["instancea" <$$> _handleCOMPinstancea]
    , ["instancerotupy" <$$> _handleCOMPinstancerotupy]
    , ["extname1" <$$> _handleCOMPextname1]
    , ["instancerottoz" <$$> _handleCOMPinstancerottoz]
    , ["instancesz" <$$> _handleCOMPinstancesz]
    , ["promoteextension4" <$$> _handleCOMPpromoteextension4]
    , ["instanceb" <$$> _handleCOMPinstanceb]
    , ["extension4" <$$> _handleCOMPextension4]
    , ["pathorient" <$$> _handleCOMPpathorient]
    , ["roll" <$$> _handleCOMProll]
    , ["nodeview" <$$> _handleCOMPnodeview]
    , ["instancepx" <$$> _handleCOMPinstancepx]
    , Just <$> vec3Map' "pt" _handleCOMPpt
    , ["instancetexanisotropy" <$$> _handleCOMPinstancetexanisotropy]
    , ["prioritymethod" <$$> _handleCOMPprioritymethod]
    , ["lrxmax" <$$> _handleCOMPlrxmax]
    , ["instancefirstrow" <$$> _handleCOMPinstancefirstrow]
    , ["bank" <$$> _handleCOMPbank]
    , ["instancety" <$$> _handleCOMPinstancety]
    , ["instancery" <$$> _handleCOMPinstancery]
    , Just <$> vec3Map' "p" _handleCOMPp
    , ["lrxmin" <$$> _handleCOMPlrxmin]
    , ["savebackup" <$$> _handleCOMPsavebackup]
    , ["extname2" <$$> _handleCOMPextname2]
    , ["instancerottox" <$$> _handleCOMPinstancerottox]
    , ["pos" <$$> _handleCOMPpos]
    , [("pathsop",) . ResolveP <$> _handleCOMPpathsop]
    , ["subcompname" <$$> _handleCOMPsubcompname]
    , ["extname3" <$$> _handleCOMPextname3]
    , ["instancetexfilter" <$$> _handleCOMPinstancetexfilter]
    , Just <$> vec3Map' "pr" _handleCOMPpr
    , ["instanceg" <$$> _handleCOMPinstanceg]
    , ["instancetexmode" <$$> _handleCOMPinstancetexmode]
    , Just <$> rgbMap "wcolor" _handleCOMPwcolor
    , ["instancepy" <$$> _handleCOMPinstancepy]
    , ["reloadtoxonstart" <$$> _handleCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _handleCOMPreinitnet]
    , ["externaltox" <$$> _handleCOMPexternaltox]
    , ["reinitextensions" <$$> _handleCOMPreinitextensions]
    , ["preset" <$$> _handleCOMPpreset]
    , ["numinstances" <$$> _handleCOMPnuminstances]
    , Just <$> vec3Map' "up" _handleCOMPup
    , ["promoteextension1" <$$> _handleCOMPpromoteextension1]
    , ["instrord" <$$> _handleCOMPinstrord]
    , ["pxord" <$$> _handleCOMPpxord]
    , ["instancetexindex" <$$> _handleCOMPinstancetexindex]
    , ["pickpriority" <$$> _handleCOMPpickpriority]
    , ["twistonly" <$$> _handleCOMPtwistonly]
    , Just <$> vec3Map' "ps" _handleCOMPps
    , ["falloff" <$$> _handleCOMPfalloff]
    , ["instancing" <$$> _handleCOMPinstancing]
    , ["instancetexextendu" <$$> _handleCOMPinstancetexextendu]
    , ["prord" <$$> _handleCOMPprord]
    , ["lookup" <$$> _handleCOMPlookup]
    , ["instancerz" <$$> _handleCOMPinstancerz]
    , ["lrzmax" <$$> _handleCOMPlrzmax]
    , ["drawpriority" <$$> _handleCOMPdrawpriority]
    , ["instanceu" <$$> _handleCOMPinstanceu]
    , ["render" <$$> _handleCOMPrender]
    , ["extension1" <$$> _handleCOMPextension1]
    , ["instancetexextendv" <$$> _handleCOMPinstancetexextendv]
    , ["lrymax" <$$> _handleCOMPlrymax]
    , ["extension3" <$$> _handleCOMPextension3]
    , ["pxform" <$$> _handleCOMPpxform]
    , [("material",) . ResolveP <$> _handleCOMPmaterial]
    , ["instancer" <$$> _handleCOMPinstancer]
    , Just <$> vec3Map' "r" _handleCOMPr
    , ["enablecloning" <$$> _handleCOMPenablecloning]
    , ["instancecolormode" <$$> _handleCOMPinstancecolormode]
    , Just <$> vec3Map' "pp" _handleCOMPpp
    , ["instancew" <$$> _handleCOMPinstancew]
    , ["instancerx" <$$> _handleCOMPinstancerx]
    , ["loadondemand" <$$> _handleCOMPloadondemand]
    , ["opshortcut" <$$> _handleCOMPopshortcut]
    , ["pcommit" <$$> _handleCOMPpcommit]
    , ["promoteextension2" <$$> _handleCOMPpromoteextension2]
    , ["lrzmin" <$$> _handleCOMPlrzmin]
    , ["instanceorder" <$$> _handleCOMPinstanceorder]
    , ["enablecloningpulse" <$$> _handleCOMPenablecloningpulse]
    , ["parentshortcut" <$$> _handleCOMPparentshortcut]
    , ["instancemode" <$$> _handleCOMPinstancemode]
    , ["instancerottoorder" <$$> _handleCOMPinstancerottoorder]
    , ["instancepz" <$$> _handleCOMPinstancepz]
    , ["promoteextension3" <$$> _handleCOMPpromoteextension3]
    , ["instancesx" <$$> _handleCOMPinstancesx]
    , ["extname4" <$$> _handleCOMPextname4]
    , ["instancetx" <$$> _handleCOMPinstancetx]
    , ["instancerotupz" <$$> _handleCOMPinstancerotupz]
    , ["weight" <$$> _handleCOMPweight]
    , ["instancesy" <$$> _handleCOMPinstancesy]
    , ["xord" <$$> _handleCOMPxord]
    , ["extension2" <$$> _handleCOMPextension2]
    , ["lrymin" <$$> _handleCOMPlrymin]
    , ["dorzlimit" <$$> _handleCOMPdorzlimit]
    , Just <$> vec3Map' "s" _handleCOMPs
    , ["dorylimit" <$$> _handleCOMPdorylimit]
    , [("clone",) . ResolveP <$> _handleCOMPclone]
    , ["dorxlimit" <$$> _handleCOMPdorxlimit]
    , ["instxord" <$$> _handleCOMPinstxord]
    , Just <$> vec3Map' "t" _handleCOMPt
    , ["instancetexextendw" <$$> _handleCOMPinstancetexextendw]
    , ["instancerotupx" <$$> _handleCOMPinstancerotupx]
    , ["rord" <$$> _handleCOMPrord]
    , ["instancerottoy" <$$> _handleCOMPinstancerottoy]
    , ["instancev" <$$> _handleCOMPinstancev]
    , [("instancetexs",) . ResolveP <$> _handleCOMPinstancetexs]
    , ["instancetz" <$$> _handleCOMPinstancetz]]
  pars (NullCOMP {..}) = catMaybes . mconcat $ [ ["instancea" <$$> _nullCOMPinstancea]
    , ["instancerotupy" <$$> _nullCOMPinstancerotupy]
    , ["extname1" <$$> _nullCOMPextname1]
    , ["instancerottoz" <$$> _nullCOMPinstancerottoz]
    , ["pickpriority" <$$> _nullCOMPpickpriority]
    , ["promoteextension4" <$$> _nullCOMPpromoteextension4]
    , ["instanceb" <$$> _nullCOMPinstanceb]
    , ["extension4" <$$> _nullCOMPextension4]
    , ["pathorient" <$$> _nullCOMPpathorient]
    , ["roll" <$$> _nullCOMProll]
    , ["nodeview" <$$> _nullCOMPnodeview]
    , ["instancepx" <$$> _nullCOMPinstancepx]
    , Just <$> vec3Map' "pt" _nullCOMPpt
    , ["instancetexanisotropy" <$$> _nullCOMPinstancetexanisotropy]
    , ["prioritymethod" <$$> _nullCOMPprioritymethod]
    , ["instancefirstrow" <$$> _nullCOMPinstancefirstrow]
    , ["bank" <$$> _nullCOMPbank]
    , ["instancety" <$$> _nullCOMPinstancety]
    , ["instancery" <$$> _nullCOMPinstancery]
    , Just <$> vec3Map' "p" _nullCOMPp
    , ["savebackup" <$$> _nullCOMPsavebackup]
    , ["pos" <$$> _nullCOMPpos]
    , [("pathsop",) . ResolveP <$> _nullCOMPpathsop]
    , ["subcompname" <$$> _nullCOMPsubcompname]
    , ["extname3" <$$> _nullCOMPextname3]
    , ["instancetexfilter" <$$> _nullCOMPinstancetexfilter]
    , Just <$> vec3Map' "pr" _nullCOMPpr
    , ["instanceg" <$$> _nullCOMPinstanceg]
    , ["instancetexmode" <$$> _nullCOMPinstancetexmode]
    , Just <$> rgbMap "wcolor" _nullCOMPwcolor
    , ["instancepy" <$$> _nullCOMPinstancepy]
    , ["reloadtoxonstart" <$$> _nullCOMPreloadtoxonstart]
    , ["instancesz" <$$> _nullCOMPinstancesz]
    , ["externaltox" <$$> _nullCOMPexternaltox]
    , ["reinitextensions" <$$> _nullCOMPreinitextensions]
    , ["instancesy" <$$> _nullCOMPinstancesy]
    , ["numinstances" <$$> _nullCOMPnuminstances]
    , Just <$> vec3Map' "up" _nullCOMPup
    , ["promoteextension1" <$$> _nullCOMPpromoteextension1]
    , ["instrord" <$$> _nullCOMPinstrord]
    , ["pxord" <$$> _nullCOMPpxord]
    , ["instancetexindex" <$$> _nullCOMPinstancetexindex]
    , ["instancerottox" <$$> _nullCOMPinstancerottox]
    , ["parentshortcut" <$$> _nullCOMPparentshortcut]
    , ["instancesx" <$$> _nullCOMPinstancesx]
    , ["instancing" <$$> _nullCOMPinstancing]
    , ["instancetexextendu" <$$> _nullCOMPinstancetexextendu]
    , ["prord" <$$> _nullCOMPprord]
    , ["lookup" <$$> _nullCOMPlookup]
    , ["instancerz" <$$> _nullCOMPinstancerz]
    , Just <$> vec3Map' "t" _nullCOMPt
    , Just <$> vec3Map' "ps" _nullCOMPps
    , ["instanceu" <$$> _nullCOMPinstanceu]
    , ["render" <$$> _nullCOMPrender]
    , ["extension1" <$$> _nullCOMPextension1]
    , ["instancetexextendv" <$$> _nullCOMPinstancetexextendv]
    , ["extension3" <$$> _nullCOMPextension3]
    , ["pxform" <$$> _nullCOMPpxform]
    , [("material",) . ResolveP <$> _nullCOMPmaterial]
    , ["instancer" <$$> _nullCOMPinstancer]
    , Just <$> vec3Map' "r" _nullCOMPr
    , ["enablecloning" <$$> _nullCOMPenablecloning]
    , ["instancecolormode" <$$> _nullCOMPinstancecolormode]
    , Just <$> vec3Map' "pp" _nullCOMPpp
    , ["instancew" <$$> _nullCOMPinstancew]
    , ["instancerx" <$$> _nullCOMPinstancerx]
    , ["extname2" <$$> _nullCOMPextname2]
    , ["opshortcut" <$$> _nullCOMPopshortcut]
    , ["pcommit" <$$> _nullCOMPpcommit]
    , ["promoteextension2" <$$> _nullCOMPpromoteextension2]
    , ["instanceorder" <$$> _nullCOMPinstanceorder]
    , ["enablecloningpulse" <$$> _nullCOMPenablecloningpulse]
    , ["reinitnet" <$$> _nullCOMPreinitnet]
    , ["instancemode" <$$> _nullCOMPinstancemode]
    , ["instancerottoorder" <$$> _nullCOMPinstancerottoorder]
    , ["instancepz" <$$> _nullCOMPinstancepz]
    , [("instancetexs",) . ResolveP <$> _nullCOMPinstancetexs]
    , ["promoteextension3" <$$> _nullCOMPpromoteextension3]
    , ["extname4" <$$> _nullCOMPextname4]
    , ["instancetx" <$$> _nullCOMPinstancetx]
    , ["instancerotupz" <$$> _nullCOMPinstancerotupz]
    , ["rord" <$$> _nullCOMPrord]
    , ["preset" <$$> _nullCOMPpreset]
    , ["xord" <$$> _nullCOMPxord]
    , ["extension2" <$$> _nullCOMPextension2]
    , Just <$> vec3Map' "s" _nullCOMPs
    , [("clone",) . ResolveP <$> _nullCOMPclone]
    , ["drawpriority" <$$> _nullCOMPdrawpriority]
    , ["instxord" <$$> _nullCOMPinstxord]
    , ["instancerotupx" <$$> _nullCOMPinstancerotupx]
    , ["instancetexextendw" <$$> _nullCOMPinstancetexextendw]
    , ["loadondemand" <$$> _nullCOMPloadondemand]
    , ["instancerottoy" <$$> _nullCOMPinstancerottoy]
    , ["instancev" <$$> _nullCOMPinstancev]
    , ["instancetz" <$$> _nullCOMPinstancetz]]
  pars (SharedmeminCOMP {..}) = catMaybes . mconcat $ [ ["instancea" <$$> _sharedmeminCOMPinstancea]
    , ["instancerotupy" <$$> _sharedmeminCOMPinstancerotupy]
    , ["extname1" <$$> _sharedmeminCOMPextname1]
    , ["instancerottoz" <$$> _sharedmeminCOMPinstancerottoz]
    , ["promoteextension4" <$$> _sharedmeminCOMPpromoteextension4]
    , ["instanceb" <$$> _sharedmeminCOMPinstanceb]
    , ["extension4" <$$> _sharedmeminCOMPextension4]
    , ["pathorient" <$$> _sharedmeminCOMPpathorient]
    , ["roll" <$$> _sharedmeminCOMProll]
    , ["nodeview" <$$> _sharedmeminCOMPnodeview]
    , ["instancepx" <$$> _sharedmeminCOMPinstancepx]
    , Just <$> vec3Map' "pt" _sharedmeminCOMPpt
    , ["instancetexanisotropy" <$$> _sharedmeminCOMPinstancetexanisotropy]
    , ["prioritymethod" <$$> _sharedmeminCOMPprioritymethod]
    , ["instancefirstrow" <$$> _sharedmeminCOMPinstancefirstrow]
    , ["bank" <$$> _sharedmeminCOMPbank]
    , ["instancety" <$$> _sharedmeminCOMPinstancety]
    , ["instancery" <$$> _sharedmeminCOMPinstancery]
    , Just <$> vec3Map' "p" _sharedmeminCOMPp
    , ["savebackup" <$$> _sharedmeminCOMPsavebackup]
    , ["pos" <$$> _sharedmeminCOMPpos]
    , [("pathsop",) . ResolveP <$> _sharedmeminCOMPpathsop]
    , ["subcompname" <$$> _sharedmeminCOMPsubcompname]
    , ["pickpriority" <$$> _sharedmeminCOMPpickpriority]
    , ["instancetexfilter" <$$> _sharedmeminCOMPinstancetexfilter]
    , Just <$> vec3Map' "pr" _sharedmeminCOMPpr
    , ["instanceg" <$$> _sharedmeminCOMPinstanceg]
    , ["instancetexmode" <$$> _sharedmeminCOMPinstancetexmode]
    , Just <$> rgbMap "wcolor" _sharedmeminCOMPwcolor
    , ["instancepy" <$$> _sharedmeminCOMPinstancepy]
    , ["reloadtoxonstart" <$$> _sharedmeminCOMPreloadtoxonstart]
    , ["instancesz" <$$> _sharedmeminCOMPinstancesz]
    , ["externaltox" <$$> _sharedmeminCOMPexternaltox]
    , ["parentshortcut" <$$> _sharedmeminCOMPparentshortcut]
    , ["instancesy" <$$> _sharedmeminCOMPinstancesy]
    , ["numinstances" <$$> _sharedmeminCOMPnuminstances]
    , Just <$> vec3Map' "up" _sharedmeminCOMPup
    , ["promoteextension1" <$$> _sharedmeminCOMPpromoteextension1]
    , ["instrord" <$$> _sharedmeminCOMPinstrord]
    , ["pxord" <$$> _sharedmeminCOMPpxord]
    , ["instancetexindex" <$$> _sharedmeminCOMPinstancetexindex]
    , ["instancerottox" <$$> _sharedmeminCOMPinstancerottox]
    , ["reinitextensions" <$$> _sharedmeminCOMPreinitextensions]
    , ["instancesx" <$$> _sharedmeminCOMPinstancesx]
    , ["instancing" <$$> _sharedmeminCOMPinstancing]
    , ["name" <$$> _sharedmeminCOMPname]
    , ["prord" <$$> _sharedmeminCOMPprord]
    , ["lookup" <$$> _sharedmeminCOMPlookup]
    , ["instancerz" <$$> _sharedmeminCOMPinstancerz]
    , ["extension2" <$$> _sharedmeminCOMPextension2]
    , ["drawpriority" <$$> _sharedmeminCOMPdrawpriority]
    , ["instanceu" <$$> _sharedmeminCOMPinstanceu]
    , ["render" <$$> _sharedmeminCOMPrender]
    , ["extension1" <$$> _sharedmeminCOMPextension1]
    , Just <$> vec3Map' "ps" _sharedmeminCOMPps
    , ["instancetexextendv" <$$> _sharedmeminCOMPinstancetexextendv]
    , ["extension3" <$$> _sharedmeminCOMPextension3]
    , ["pxform" <$$> _sharedmeminCOMPpxform]
    , [("material",) . ResolveP <$> _sharedmeminCOMPmaterial]
    , ["instancer" <$$> _sharedmeminCOMPinstancer]
    , Just <$> vec3Map' "r" _sharedmeminCOMPr
    , ["enablecloning" <$$> _sharedmeminCOMPenablecloning]
    , ["instancecolormode" <$$> _sharedmeminCOMPinstancecolormode]
    , Just <$> vec3Map' "pp" _sharedmeminCOMPpp
    , ["instancew" <$$> _sharedmeminCOMPinstancew]
    , ["instancerx" <$$> _sharedmeminCOMPinstancerx]
    , ["extname2" <$$> _sharedmeminCOMPextname2]
    , ["opshortcut" <$$> _sharedmeminCOMPopshortcut]
    , ["pcommit" <$$> _sharedmeminCOMPpcommit]
    , ["promoteextension2" <$$> _sharedmeminCOMPpromoteextension2]
    , ["instanceorder" <$$> _sharedmeminCOMPinstanceorder]
    , ["enablecloningpulse" <$$> _sharedmeminCOMPenablecloningpulse]
    , ["reinitnet" <$$> _sharedmeminCOMPreinitnet]
    , ["instancetexextendu" <$$> _sharedmeminCOMPinstancetexextendu]
    , ["instancemode" <$$> _sharedmeminCOMPinstancemode]
    , ["instancerottoorder" <$$> _sharedmeminCOMPinstancerottoorder]
    , ["instancepz" <$$> _sharedmeminCOMPinstancepz]
    , [("instancetexs",) . ResolveP <$> _sharedmeminCOMPinstancetexs]
    , ["promoteextension3" <$$> _sharedmeminCOMPpromoteextension3]
    , ["extname4" <$$> _sharedmeminCOMPextname4]
    , ["instancetx" <$$> _sharedmeminCOMPinstancetx]
    , ["instancerotupz" <$$> _sharedmeminCOMPinstancerotupz]
    , ["rord" <$$> _sharedmeminCOMPrord]
    , ["preset" <$$> _sharedmeminCOMPpreset]
    , ["xord" <$$> _sharedmeminCOMPxord]
    , Just <$> vec3Map' "t" _sharedmeminCOMPt
    , Just <$> vec3Map' "s" _sharedmeminCOMPs
    , ["extname3" <$$> _sharedmeminCOMPextname3]
    , [("clone",) . ResolveP <$> _sharedmeminCOMPclone]
    , ["instxord" <$$> _sharedmeminCOMPinstxord]
    , ["instancerotupx" <$$> _sharedmeminCOMPinstancerotupx]
    , ["instancetexextendw" <$$> _sharedmeminCOMPinstancetexextendw]
    , ["loadondemand" <$$> _sharedmeminCOMPloadondemand]
    , ["instancerottoy" <$$> _sharedmeminCOMPinstancerottoy]
    , ["instancev" <$$> _sharedmeminCOMPinstancev]
    , ["instancetz" <$$> _sharedmeminCOMPinstancetz]]
  pars (LightCOMP {..}) = catMaybes . mconcat $ [ ["projection" <$$> _lightCOMPprojection]
    , ["viewanglemethod" <$$> _lightCOMPviewanglemethod]
    , [("projmap",) . ResolveP <$> _lightCOMPprojmap]
    , ["lightsize2" <$$> _lightCOMPlightsize2]
    , Just <$> rgbMap "fogcolor" _lightCOMPfogcolor
    , ["extname1" <$$> _lightCOMPextname1]
    , ["backfacelit" <$$> _lightCOMPbackfacelit]
    , ["attenuationexp" <$$> _lightCOMPattenuationexp]
    , ["zbounds2" <$$> _lightCOMPzbounds2]
    , ["promoteextension4" <$$> _lightCOMPpromoteextension4]
    , ["extension4" <$$> _lightCOMPextension4]
    , ["pathorient" <$$> _lightCOMPpathorient]
    , ["roll" <$$> _lightCOMProll]
    , ["nodeview" <$$> _lightCOMPnodeview]
    , Just <$> vec3Map' "pt" _lightCOMPpt
    , [("clone",) . ResolveP <$> _lightCOMPclone]
    , ["prioritymethod" <$$> _lightCOMPprioritymethod]
    , ["bank" <$$> _lightCOMPbank]
    , ["aspectcorrect" <$$> _lightCOMPaspectcorrect]
    , ["projectionblend" <$$> _lightCOMPprojectionblend]
    , ["fov" <$$> _lightCOMPfov]
    , Just <$> vec3Map' "p" _lightCOMPp
    , ["projmapextendw" <$$> _lightCOMPprojmapextendw]
    , ["savebackup" <$$> _lightCOMPsavebackup]
    , ["polygonoffsetunits" <$$> _lightCOMPpolygonoffsetunits]
    , ["shadowresolution1" <$$> _lightCOMPshadowresolution1]
    , ["pos" <$$> _lightCOMPpos]
    , [("pathsop",) . ResolveP <$> _lightCOMPpathsop]
    , ["useconeforfov" <$$> _lightCOMPuseconeforfov]
    , ["maxshadowsoftness" <$$> _lightCOMPmaxshadowsoftness]
    , ["extname3" <$$> _lightCOMPextname3]
    , ["fogalpha" <$$> _lightCOMPfogalpha]
    , Just <$> vec3Map' "pr" _lightCOMPpr
    , Just <$> rgbMap "wcolor" _lightCOMPwcolor
    , ["focal" <$$> _lightCOMPfocal]
    , ["attenuationend" <$$> _lightCOMPattenuationend]
    , ["xbounds1" <$$> _lightCOMPxbounds1]
    , ["far" <$$> _lightCOMPfar]
    , ["projmapextendv" <$$> _lightCOMPprojmapextendv]
    , ["reinitextensions" <$$> _lightCOMPreinitextensions]
    , ["fogdensity" <$$> _lightCOMPfogdensity]
    , ["aperture" <$$> _lightCOMPaperture]
    , ["promoteextension1" <$$> _lightCOMPpromoteextension1]
    , ["subcompname" <$$> _lightCOMPsubcompname]
    , ["xbounds2" <$$> _lightCOMPxbounds2]
    , Just <$> vec3Map' "up" _lightCOMPup
    , ["pxord" <$$> _lightCOMPpxord]
    , ["shadowresolution2" <$$> _lightCOMPshadowresolution2]
    , ["pickpriority" <$$> _lightCOMPpickpriority]
    , ["conedelta" <$$> _lightCOMPconedelta]
    , Just <$> vec3Map' "ps" _lightCOMPps
    , ["zbounds1" <$$> _lightCOMPzbounds1]
    , Just <$> vec3Map' "s" _lightCOMPs
    , ["filtersamples" <$$> _lightCOMPfiltersamples]
    , [("shadowmap",) . ResolveP <$> _lightCOMPshadowmap]
    , ["projmapanisotropy" <$$> _lightCOMPprojmapanisotropy]
    , ["prord" <$$> _lightCOMPprord]
    , ["ybounds2" <$$> _lightCOMPybounds2]
    , ["lookup" <$$> _lightCOMPlookup]
    , Just <$> rgbMap "c" _lightCOMPc
    , ["attenuationstart" <$$> _lightCOMPattenuationstart]
    , Just <$> vec3Map' "t" _lightCOMPt
    , ["coneroll" <$$> _lightCOMPconeroll]
    , ["drawpriority" <$$> _lightCOMPdrawpriority]
    , ["searchsteps" <$$> _lightCOMPsearchsteps]
    , ["reinitnet" <$$> _lightCOMPreinitnet]
    , Just <$> vec2Map' "win" _lightCOMPwin
    , ["projangle" <$$> _lightCOMPprojangle]
    , ["render" <$$> _lightCOMPrender]
    , ["extension1" <$$> _lightCOMPextension1]
    , [("customproj",) . ResolveP <$> _lightCOMPcustomproj]
    , ["coneangle" <$$> _lightCOMPconeangle]
    , ["fog" <$$> _lightCOMPfog]
    , ["fogfar" <$$> _lightCOMPfogfar]
    , Just <$> rgbaMap "bgcolor" _lightCOMPbgcolor
    , ["pxform" <$$> _lightCOMPpxform]
    , [("material",) . ResolveP <$> _lightCOMPmaterial]
    , ["extension3" <$$> _lightCOMPextension3]
    , Just <$> vec3Map' "r" _lightCOMPr
    , ["enablecloning" <$$> _lightCOMPenablecloning]
    , ["shadowtype" <$$> _lightCOMPshadowtype]
    , Just <$> vec3Map' "pp" _lightCOMPpp
    , ["lightsize1" <$$> _lightCOMPlightsize1]
    , ["extname2" <$$> _lightCOMPextname2]
    , ["pcommit" <$$> _lightCOMPpcommit]
    , ["promoteextension2" <$$> _lightCOMPpromoteextension2]
    , ["projmapextendu" <$$> _lightCOMPprojmapextendu]
    , ["attenuated" <$$> _lightCOMPattenuated]
    , ["enablecloningpulse" <$$> _lightCOMPenablecloningpulse]
    , ["parentshortcut" <$$> _lightCOMPparentshortcut]
    , ["promoteextension3" <$$> _lightCOMPpromoteextension3]
    , ["extname4" <$$> _lightCOMPextname4]
    , ["externaltox" <$$> _lightCOMPexternaltox]
    , ["polygonoffsetfactor" <$$> _lightCOMPpolygonoffsetfactor]
    , [("fogmap",) . ResolveP <$> _lightCOMPfogmap]
    , ["reloadtoxonstart" <$$> _lightCOMPreloadtoxonstart]
    , ["projmapmode" <$$> _lightCOMPprojmapmode]
    , ["preset" <$$> _lightCOMPpreset]
    , ["fognear" <$$> _lightCOMPfognear]
    , ["xord" <$$> _lightCOMPxord]
    , ["orthowidth" <$$> _lightCOMPorthowidth]
    , ["near" <$$> _lightCOMPnear]
    , ["extension2" <$$> _lightCOMPextension2]
    , ["frontfacelit" <$$> _lightCOMPfrontfacelit]
    , ["ybounds1" <$$> _lightCOMPybounds1]
    , ["projmapfilter" <$$> _lightCOMPprojmapfilter]
    , ["rord" <$$> _lightCOMPrord]
    , ["loadondemand" <$$> _lightCOMPloadondemand]
    , ["dimmer" <$$> _lightCOMPdimmer]
    , ["lighttype" <$$> _lightCOMPlighttype]
    , ["opshortcut" <$$> _lightCOMPopshortcut]]
  pars (BaseCOMP {..}) = catMaybes . mconcat $ [ ["promoteextension3" <$$> _baseCOMPpromoteextension3]
    , ["extname1" <$$> _baseCOMPextname1]
    , ["extname4" <$$> _baseCOMPextname4]
    , ["reloadtoxonstart" <$$> _baseCOMPreloadtoxonstart]
    , ["reinitnet" <$$> _baseCOMPreinitnet]
    , ["extension1" <$$> _baseCOMPextension1]
    , ["promoteextension4" <$$> _baseCOMPpromoteextension4]
    , ["externaltox" <$$> _baseCOMPexternaltox]
    , ["extension4" <$$> _baseCOMPextension4]
    , ["promoteextension1" <$$> _baseCOMPpromoteextension1]
    , ["extname3" <$$> _baseCOMPextname3]
    , ["extension3" <$$> _baseCOMPextension3]
    , ["parentshortcut" <$$> _baseCOMPparentshortcut]
    , ["enablecloning" <$$> _baseCOMPenablecloning]
    , ["reinitextensions" <$$> _baseCOMPreinitextensions]
    , ["extname2" <$$> _baseCOMPextname2]
    , ["opshortcut" <$$> _baseCOMPopshortcut]
    , [("clone",) . ResolveP <$> _baseCOMPclone]
    , ["savebackup" <$$> _baseCOMPsavebackup]
    , ["promoteextension2" <$$> _baseCOMPpromoteextension2]
    , ["enablecloningpulse" <$$> _baseCOMPenablecloningpulse]
    , ["loadondemand" <$$> _baseCOMPloadondemand]
    , ["subcompname" <$$> _baseCOMPsubcompname]
    , ["extension2" <$$> _baseCOMPextension2]]
  pars (TimeCOMP {..}) = catMaybes . mconcat $ [ ["promoteextension3" <$$> _timeCOMPpromoteextension3]
    , ["enablecloning" <$$> _timeCOMPenablecloning]
    , ["end" <$$> _timeCOMPend]
    , ["rangeend" <$$> _timeCOMPrangeend]
    , ["rangestart" <$$> _timeCOMPrangestart]
    , ["extname4" <$$> _timeCOMPextname4]
    , ["reloadtoxonstart" <$$> _timeCOMPreloadtoxonstart]
    , ["externaltox" <$$> _timeCOMPexternaltox]
    , ["extension1" <$$> _timeCOMPextension1]
    , ["promoteextension4" <$$> _timeCOMPpromoteextension4]
    , ["extname1" <$$> _timeCOMPextname1]
    , ["extension4" <$$> _timeCOMPextension4]
    , ["reinitnet" <$$> _timeCOMPreinitnet]
    , ["promoteextension1" <$$> _timeCOMPpromoteextension1]
    , ["subcompname" <$$> _timeCOMPsubcompname]
    , ["rangelimit" <$$> _timeCOMPrangelimit]
    , ["tempo" <$$> _timeCOMPtempo]
    , ["extension3" <$$> _timeCOMPextension3]
    , ["independent" <$$> _timeCOMPindependent]
    , ["parentshortcut" <$$> _timeCOMPparentshortcut]
    , ["extname3" <$$> _timeCOMPextname3]
    , ["start" <$$> _timeCOMPstart]
    , ["reinitextensions" <$$> _timeCOMPreinitextensions]
    , ["resetframe" <$$> _timeCOMPresetframe]
    , ["signature1" <$$> _timeCOMPsignature1]
    , ["signature2" <$$> _timeCOMPsignature2]
    , ["rate" <$$> _timeCOMPrate]
    , [("clone",) . ResolveP <$> _timeCOMPclone]
    , ["savebackup" <$$> _timeCOMPsavebackup]
    , ["promoteextension2" <$$> _timeCOMPpromoteextension2]
    , ["play" <$$> _timeCOMPplay]
    , ["enablecloningpulse" <$$> _timeCOMPenablecloningpulse]
    , ["extname2" <$$> _timeCOMPextname2]
    , ["loadondemand" <$$> _timeCOMPloadondemand]
    , ["extension2" <$$> _timeCOMPextension2]
    , ["opshortcut" <$$> _timeCOMPopshortcut]]
  pars _ = []
  opType (FieldCOMP {}) = "fieldCOMP"
  opType (SharedmemoutCOMP {}) = "sharedmemoutCOMP"
  opType (TableCOMP {}) = "tableCOMP"
  opType (ContainerCOMP {}) = "containerCOMP"
  opType (ParameterCOMP {}) = "parameterCOMP"
  opType (SliderCOMP {}) = "sliderCOMP"
  opType (GeometryCOMP {}) = "geometryCOMP"
  opType (CameraCOMP {}) = "cameraCOMP"
  opType (AnimationCOMP {}) = "animationCOMP"
  opType (ReplicatorCOMP {}) = "replicatorCOMP"
  opType (OpviewerCOMP {}) = "opviewerCOMP"
  opType (AmbientlightCOMP {}) = "ambientlightCOMP"
  opType (SelectCOMP {}) = "selectCOMP"
  opType (EnvironmentlightCOMP {}) = "environmentlightCOMP"
  opType (WindowCOMP {}) = "windowCOMP"
  opType (ButtonCOMP {}) = "buttonCOMP"
  opType (BlendCOMP {}) = "blendCOMP"
  opType (CamerablendCOMP {}) = "camerablendCOMP"
  opType (BoneCOMP {}) = "boneCOMP"
  opType (ListCOMP {}) = "listCOMP"
  opType (HandleCOMP {}) = "handleCOMP"
  opType (NullCOMP {}) = "nullCOMP"
  opType (SharedmeminCOMP {}) = "sharedmeminCOMP"
  opType (LightCOMP {}) = "lightCOMP"
  opType (BaseCOMP {}) = "baseCOMP"
  opType (TimeCOMP {}) = "timeCOMP"
  text _ = Nothing
  commands = view compCommands
  connections = view compIns

-- convenience functions 
mouseinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
mouseinCHOP f =  N . f <$> MouseinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

natnetinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
natnetinCHOP f =  N . f <$> NatnetinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audiofilterCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audiofilterCHOP f =  N . f <$> AudiofilterCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

scriptCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
scriptCHOP f =  N . f <$> ScriptCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

pipeinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
pipeinCHOP f =  N . f <$> PipeinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

functionCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
functionCHOP f =  N . f <$> FunctionCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audiodynamicsCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audiodynamicsCHOP f =  N . f <$> AudiodynamicsCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

compositeCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
compositeCHOP f =  N . f <$> CompositeCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

reorderCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
reorderCHOP f =  N . f <$> ReorderCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

fileinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
fileinCHOP f =  N . f <$> FileinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

clipblenderCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
clipblenderCHOP f =  N . f <$> ClipblenderCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing []

lagCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
lagCHOP f =  N . f <$> LagCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

selectCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
selectCHOP f =  N . f <$> SelectCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

logicCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
logicCHOP f =  N . f <$> LogicCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

performCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
performCHOP f =  N . f <$> PerformCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

keyboardinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
keyboardinCHOP f =  N . f <$> KeyboardinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

dmxinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
dmxinCHOP f =  N . f <$> DmxinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

inversekinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
inversekinCHOP f =  N . f <$> InversekinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

sequencerCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
sequencerCHOP f =  N . f <$> SequencerCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

beatCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
beatCHOP f =  N . f <$> BeatCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

ltcoutCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
ltcoutCHOP f =  N . f <$> LtcoutCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

touchoutCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
touchoutCHOP f =  N . f <$> TouchoutCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

nullCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
nullCHOP f =  N . f <$> NullCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

recordCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
recordCHOP f =  N . f <$> RecordCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

attributeCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
attributeCHOP f =  N . f <$> AttributeCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

fanCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
fanCHOP f =  N . f <$> FanCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

crossCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
crossCHOP f =  N . f <$> CrossCHOP Nothing Nothing Nothing Nothing Nothing Nothing []

posistagenetCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
posistagenetCHOP f =  N . f <$> PosistagenetCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

realsenseCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
realsenseCHOP f =  N . f <$> RealsenseCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

slopeCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
slopeCHOP f =  N . f <$> SlopeCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

mouseoutCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
mouseoutCHOP f =  N . f <$> MouseoutCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

limitCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
limitCHOP f =  N . f <$> LimitCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

envelopeCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
envelopeCHOP f =  N . f <$> EnvelopeCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

pipeoutCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
pipeoutCHOP f =  N . f <$> PipeoutCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

leapmotionCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
leapmotionCHOP f =  N . f <$> LeapmotionCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

switchCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
switchCHOP f =  N . f <$> SwitchCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

leuzerod4CHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
leuzerod4CHOP f =  N . f <$> Leuzerod4CHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

toptoCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
toptoCHOP f =  N . f <$> ToptoCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing []

abletonlinkCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
abletonlinkCHOP f =  N . f <$> AbletonlinkCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

constantCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
constantCHOP f =  N . f <$> ConstantCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

objectCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
objectCHOP f =  N . f <$> ObjectCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

joinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
joinCHOP f =  N . f <$> JoinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

cycleCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
cycleCHOP f =  N . f <$> CycleCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

feedbackCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
feedbackCHOP f =  N . f <$> FeedbackCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

oculusriftCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
oculusriftCHOP f =  N . f <$> OculusriftCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

mathCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
mathCHOP f =  N . f <$> MathCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

scanCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
scanCHOP f =  N . f <$> ScanCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audiostreaminCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audiostreaminCHOP f =  N . f <$> AudiostreaminCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

waveCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
waveCHOP f =  N . f <$> WaveCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audiobandeqCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audiobandeqCHOP f =  N . f <$> AudiobandeqCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

shuffleCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
shuffleCHOP f =  N . f <$> ShuffleCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

timelineCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
timelineCHOP f =  N . f <$> TimelineCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

lfoCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
lfoCHOP f =  N . f <$> LfoCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

triggerCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
triggerCHOP f =  N . f <$> TriggerCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

stretchCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
stretchCHOP f =  N . f <$> StretchCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

cplusplusCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
cplusplusCHOP f =  N . f <$> CplusplusCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

oscinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
oscinCHOP f =  N . f <$> OscinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

ltcinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
ltcinCHOP f =  N . f <$> LtcinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

tabletCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
tabletCHOP f =  N . f <$> TabletCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

eventCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
eventCHOP f =  N . f <$> EventCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

touchinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
touchinCHOP f =  N . f <$> TouchinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

hogCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
hogCHOP f =  N . f <$> HogCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

patternCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
patternCHOP f =  N . f <$> PatternCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audiorenderCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audiorenderCHOP f =  N . f <$> AudiorenderCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

midioutCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
midioutCHOP f =  N . f <$> MidioutCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audiodeviceoutCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audiodeviceoutCHOP f =  N . f <$> AudiodeviceoutCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

springCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
springCHOP f =  N . f <$> SpringCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

parameterCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
parameterCHOP f =  N . f <$> ParameterCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

interpolateCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
interpolateCHOP f =  N . f <$> InterpolateCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

oscoutCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
oscoutCHOP f =  N . f <$> OscoutCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

gestureCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
gestureCHOP f =  N . f <$> GestureCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

extendCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
extendCHOP f =  N . f <$> ExtendCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audioparaeqCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audioparaeqCHOP f =  N . f <$> AudioparaeqCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

joystickCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
joystickCHOP f =  N . f <$> JoystickCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

filterCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
filterCHOP f =  N . f <$> FilterCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audiofileinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audiofileinCHOP f =  N . f <$> AudiofileinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

angleCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
angleCHOP f =  N . f <$> AngleCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

dmxoutCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
dmxoutCHOP f =  N . f <$> DmxoutCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

transformCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
transformCHOP f =  N . f <$> TransformCHOP Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing []

outCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
outCHOP f =  N . f <$> OutCHOP Nothing Nothing Nothing Nothing Nothing Nothing []

timesliceCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
timesliceCHOP f =  N . f <$> TimesliceCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

spliceCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
spliceCHOP f =  N . f <$> SpliceCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

speedCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
speedCHOP f =  N . f <$> SpeedCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

fileoutCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
fileoutCHOP f =  N . f <$> FileoutCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audioplayCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audioplayCHOP f =  N . f <$> AudioplayCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

clockCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
clockCHOP f =  N . f <$> ClockCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

scurveCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
scurveCHOP f =  N . f <$> ScurveCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

handleCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
handleCHOP f =  N . f <$> HandleCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

shiftCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
shiftCHOP f =  N . f <$> ShiftCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

expressionCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
expressionCHOP f =  N . f <$> ExpressionCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

mergeCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
mergeCHOP f =  N . f <$> MergeCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

copyCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
copyCHOP f =  N . f <$> CopyCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

kinectCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
kinectCHOP f =  N . f <$> KinectCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

inCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
inCHOP f =  N . f <$> InCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

timerCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
timerCHOP f =  N . f <$> TimerCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

sharedmeminCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
sharedmeminCHOP f =  N . f <$> SharedmeminCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

keyframeCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
keyframeCHOP f =  N . f <$> KeyframeCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

midiinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
midiinCHOP f =  N . f <$> MidiinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

delayCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
delayCHOP f =  N . f <$> DelayCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

renderpickCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
renderpickCHOP f =  N . f <$> RenderpickCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

replaceCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
replaceCHOP f =  N . f <$> ReplaceCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

countCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
countCHOP f =  N . f <$> CountCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

oculusaudioCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
oculusaudioCHOP f =  N . f <$> OculusaudioCHOP emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

clipCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
clipCHOP f =  N . f <$> ClipCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audiospectrumCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audiospectrumCHOP f =  N . f <$> AudiospectrumCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

deleteCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
deleteCHOP f =  N . f <$> DeleteCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

pulseCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
pulseCHOP f =  N . f <$> PulseCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

noiseCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
noiseCHOP f =  N . f <$> NoiseCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing []

trailCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
trailCHOP f =  N . f <$> TrailCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

soptoCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
soptoCHOP f =  N . f <$> SoptoCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

syncinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
syncinCHOP f =  N . f <$> SyncinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

blacktraxCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
blacktraxCHOP f =  N . f <$> BlacktraxCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

sharedmemoutCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
sharedmemoutCHOP f =  N . f <$> SharedmemoutCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

openvrCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
openvrCHOP f =  N . f <$> OpenvrCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audiomovieCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audiomovieCHOP f =  N . f <$> AudiomovieCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

lookupCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
lookupCHOP f =  N . f <$> LookupCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audiooscillatorCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audiooscillatorCHOP f =  N . f <$> AudiooscillatorCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

syncoutCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
syncoutCHOP f =  N . f <$> SyncoutCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

etherdreamCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
etherdreamCHOP f =  N . f <$> EtherdreamCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

sortCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
sortCHOP f =  N . f <$> SortCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

holdCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
holdCHOP f =  N . f <$> HoldCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

warpCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
warpCHOP f =  N . f <$> WarpCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audiostreamoutCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audiostreamoutCHOP f =  N . f <$> AudiostreamoutCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

midiinmapCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
midiinmapCHOP f =  N . f <$> MidiinmapCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

overrideCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
overrideCHOP f =  N . f <$> OverrideCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

renameCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
renameCHOP f =  N . f <$> RenameCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

audiodeviceinCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
audiodeviceinCHOP f =  N . f <$> AudiodeviceinCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

inversecurveCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
inversecurveCHOP f =  N . f <$> InversecurveCHOP Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

panelCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
panelCHOP f =  N . f <$> PanelCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

dattoCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
dattoCHOP f =  N . f <$> DattoCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

hokuyoCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
hokuyoCHOP f =  N . f <$> HokuyoCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

analyzeCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
analyzeCHOP f =  N . f <$> AnalyzeCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

serialCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
serialCHOP f =  N . f <$> SerialCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

infoCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
infoCHOP f =  N . f <$> InfoCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

trimCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
trimCHOP f =  N . f <$> TrimCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

resampleCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
resampleCHOP f =  N . f <$> ResampleCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

blendCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
blendCHOP f =  N . f <$> BlendCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

heliosdacCHOP :: (CHOP -> CHOP) -> [Tree CHOP] -> Tree CHOP
heliosdacCHOP f =  N . f <$> HeliosdacCHOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

inMAT :: (MAT -> MAT) -> [Tree MAT] -> Tree MAT
inMAT f =  N . f <$> InMAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

pointspriteMAT :: (MAT -> MAT) -> [Tree MAT] -> Tree MAT
pointspriteMAT f =  N . f <$> PointspriteMAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

outMAT :: (MAT -> MAT) -> [Tree MAT] -> Tree MAT
outMAT f =  N . f <$> OutMAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

phongMAT :: (MAT -> MAT) -> [Tree MAT] -> Tree MAT
phongMAT f =  N . f <$> PhongMAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

switchMAT :: (MAT -> MAT) -> [Tree MAT] -> Tree MAT
switchMAT f =  N . f <$> SwitchMAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

depthMAT :: (MAT -> MAT) -> [Tree MAT] -> Tree MAT
depthMAT f =  N . f <$> DepthMAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

selectMAT :: (MAT -> MAT) -> [Tree MAT] -> Tree MAT
selectMAT f =  N . f <$> SelectMAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

constantMAT :: (MAT -> MAT) -> [Tree MAT] -> Tree MAT
constantMAT f =  N . f <$> ConstantMAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

wireframeMAT :: (MAT -> MAT) -> [Tree MAT] -> Tree MAT
wireframeMAT f =  N . f <$> WireframeMAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

nullMAT :: (MAT -> MAT) -> [Tree MAT] -> Tree MAT
nullMAT f =  N . f <$> NullMAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

pbrMAT :: (MAT -> MAT) -> [Tree MAT] -> Tree MAT
pbrMAT f =  N . f <$> PbrMAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

glslMAT :: (MAT -> MAT) -> [Tree MAT] -> Tree MAT
glslMAT f =  N . f <$> GlslMAT emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing []

forceSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
forceSOP f =  N . f <$> ForceSOP Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing []

particleSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
particleSOP f =  N . f <$> ParticleSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 []

railsSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
railsSOP f =  N . f <$> RailsSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing []

cacheSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
cacheSOP f =  N . f <$> CacheSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

circleSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
circleSOP f =  N . f <$> CircleSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 emptyV3 Nothing Nothing []

carveSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
carveSOP f =  N . f <$> CarveSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

primitiveSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
primitiveSOP f =  N . f <$> PrimitiveSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing []

noiseSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
noiseSOP f =  N . f <$> NoiseSOP Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 []

modelSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
modelSOP f =  N . f <$> ModelSOP  []

fitSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
fitSOP f =  N . f <$> FitSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

jointSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
jointSOP f =  N . f <$> JointSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

switchSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
switchSOP f =  N . f <$> SwitchSOP Nothing []

inSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
inSOP f =  N . f <$> InSOP Nothing []

boxSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
boxSOP f =  N . f <$> BoxSOP Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing []

choptoSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
choptoSOP f =  N . f <$> ChoptoSOP Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing []

stitchSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
stitchSOP f =  N . f <$> StitchSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

extrudeSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
extrudeSOP f =  N . f <$> ExtrudeSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

captureSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
captureSOP f =  N . f <$> CaptureSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

metaballSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
metaballSOP f =  N . f <$> MetaballSOP Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing []

pointSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
pointSOP f =  N . f <$> PointSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 []

convertSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
convertSOP f =  N . f <$> ConvertSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

limitSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
limitSOP f =  N . f <$> LimitSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

booleanSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
booleanSOP f =  N . f <$> BooleanSOP Nothing Nothing Nothing Nothing Nothing []

kinectSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
kinectSOP f =  N . f <$> KinectSOP Nothing Nothing Nothing Nothing Nothing []

materialSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
materialSOP f =  N . f <$> MaterialSOP Nothing []

sweepSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
sweepSOP f =  N . f <$> SweepSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

trimSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
trimSOP f =  N . f <$> TrimSOP Nothing Nothing Nothing Nothing Nothing Nothing []

outSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
outSOP f =  N . f <$> OutSOP Nothing []

bridgeSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
bridgeSOP f =  N . f <$> BridgeSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

facetSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
facetSOP f =  N . f <$> FacetSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

surfsectSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
surfsectSOP f =  N . f <$> SurfsectSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

raySOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
raySOP f =  N . f <$> RaySOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

bonegroupSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
bonegroupSOP f =  N . f <$> BonegroupSOP Nothing Nothing []

torusSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
torusSOP f =  N . f <$> TorusSOP Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 []

wireframeSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
wireframeSOP f =  N . f <$> WireframeSOP Nothing Nothing Nothing Nothing Nothing Nothing []

addSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
addSOP f =  N . f <$> AddSOP Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing []

textureSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
textureSOP f =  N . f <$> TextureSOP Nothing Nothing Nothing emptyV3 emptyV3 emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 Nothing emptyV3 []

deformSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
deformSOP f =  N . f <$> DeformSOP Nothing Nothing Nothing Nothing []

openvrSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
openvrSOP f =  N . f <$> OpenvrSOP Nothing []

curvesectSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
curvesectSOP f =  N . f <$> CurvesectSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

lsystemSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
lsystemSOP f =  N . f <$> LsystemSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

fractalSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
fractalSOP f =  N . f <$> FractalSOP Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing []

copySOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
copySOP f =  N . f <$> CopySOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing []

tristripSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
tristripSOP f =  N . f <$> TristripSOP Nothing Nothing Nothing []

cplusplusSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
cplusplusSOP f =  N . f <$> CplusplusSOP Nothing Nothing Nothing Nothing []

magnetSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
magnetSOP f =  N . f <$> MagnetSOP Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 []

rectangleSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
rectangleSOP f =  N . f <$> RectangleSOP emptyV3 Nothing Nothing emptyV2 Nothing Nothing Nothing []

sphereSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
sphereSOP f =  N . f <$> SphereSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing []

dattoSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
dattoSOP f =  N . f <$> DattoSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

textSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
textSOP f =  N . f <$> TextSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing []

linethickSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
linethickSOP f =  N . f <$> LinethickSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

traceSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
traceSOP f =  N . f <$> TraceSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

sortSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
sortSOP f =  N . f <$> SortSOP Nothing Nothing Nothing emptyV3 emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 emptyV3 []

joinSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
joinSOP f =  N . f <$> JoinSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

polystitchSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
polystitchSOP f =  N . f <$> PolystitchSOP Nothing Nothing Nothing Nothing Nothing Nothing []

blendSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
blendSOP f =  N . f <$> BlendSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

lodSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
lodSOP f =  N . f <$> LodSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

creepSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
creepSOP f =  N . f <$> CreepSOP emptyV3 emptyV3 emptyV3 Nothing Nothing []

polysplineSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
polysplineSOP f =  N . f <$> PolysplineSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

curveclaySOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
curveclaySOP f =  N . f <$> CurveclaySOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

projectSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
projectSOP f =  N . f <$> ProjectSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

fileinSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
fileinSOP f =  N . f <$> FileinSOP Nothing Nothing Nothing Nothing Nothing []

sequenceblendSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
sequenceblendSOP f =  N . f <$> SequenceblendSOP Nothing Nothing Nothing Nothing Nothing Nothing []

capSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
capSOP f =  N . f <$> CapSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

alembicSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
alembicSOP f =  N . f <$> AlembicSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

objectmergeSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
objectmergeSOP f =  N . f <$> ObjectmergeSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

mergeSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
mergeSOP f =  N . f <$> MergeSOP  []

basisSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
basisSOP f =  N . f <$> BasisSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

attributeSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
attributeSOP f =  N . f <$> AttributeSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

selectSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
selectSOP f =  N . f <$> SelectSOP Nothing []

alignSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
alignSOP f =  N . f <$> AlignSOP Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing []

fontSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
fontSOP f =  N . f <$> FontSOP Nothing Nothing emptyV2 Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing emptyV3 Nothing []

twistSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
twistSOP f =  N . f <$> TwistSOP Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing []

revolveSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
revolveSOP f =  N . f <$> RevolveSOP Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 Nothing Nothing []

polyloftSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
polyloftSOP f =  N . f <$> PolyloftSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

polypatchSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
polypatchSOP f =  N . f <$> PolypatchSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

nullSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
nullSOP f =  N . f <$> NullSOP  []

filletSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
filletSOP f =  N . f <$> FilletSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

inversecurveSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
inversecurveSOP f =  N . f <$> InversecurveSOP Nothing []

trailSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
trailSOP f =  N . f <$> TrailSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

attributecreateSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
attributecreateSOP f =  N . f <$> AttributecreateSOP Nothing Nothing []

latticeSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
latticeSOP f =  N . f <$> LatticeSOP Nothing Nothing Nothing Nothing Nothing Nothing []

tubeSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
tubeSOP f =  N . f <$> TubeSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing []

armSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
armSOP f =  N . f <$> ArmSOP emptyV3 emptyV3 Nothing emptyV3 Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing emptyV3 emptyV3 Nothing emptyV3 Nothing emptyV3 emptyV3 emptyV3 emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 emptyV3 emptyV3 emptyV3 Nothing emptyV3 []

transformSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
transformSOP f =  N . f <$> TransformSOP Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 []

vertexSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
vertexSOP f =  N . f <$> VertexSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

groupSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
groupSOP f =  N . f <$> GroupSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing []

refineSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
refineSOP f =  N . f <$> RefineSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

divideSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
divideSOP f =  N . f <$> DivideSOP Nothing emptyV3 Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

resampleSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
resampleSOP f =  N . f <$> ResampleSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

clipSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
clipSOP f =  N . f <$> ClipSOP Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing []

springSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
springSOP f =  N . f <$> SpringSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 []

superquadSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
superquadSOP f =  N . f <$> SuperquadSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing []

profileSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
profileSOP f =  N . f <$> ProfileSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

gridSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
gridSOP f =  N . f <$> GridSOP Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing []

holeSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
holeSOP f =  N . f <$> HoleSOP Nothing Nothing Nothing Nothing Nothing []

skinSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
skinSOP f =  N . f <$> SkinSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

lineSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
lineSOP f =  N . f <$> LineSOP Nothing emptyV3 Nothing emptyV3 []

deleteSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
deleteSOP f =  N . f <$> DeleteSOP Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing []

polyreduceSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
polyreduceSOP f =  N . f <$> PolyreduceSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

spriteSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
spriteSOP f =  N . f <$> SpriteSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

subdivideSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
subdivideSOP f =  N . f <$> SubdivideSOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

isosurfaceSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
isosurfaceSOP f =  N . f <$> IsosurfaceSOP Nothing emptyV3 Nothing Nothing Nothing emptyV3 Nothing []

captureregionSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
captureregionSOP f =  N . f <$> CaptureregionSOP emptyV3 Nothing emptyV3 emptyV3 Nothing Nothing emptyV3 Nothing Nothing []

scriptSOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
scriptSOP f =  N . f <$> ScriptSOP Nothing Nothing []

claySOP :: (SOP -> SOP) -> [Tree SOP] -> Tree SOP
claySOP f =  N . f <$> ClaySOP Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 emptyV3 emptyV3 Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 Nothing Nothing []

remapTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
remapTOP f =  N . f <$> RemapTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

moviefileoutTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
moviefileoutTOP f =  N . f <$> MoviefileoutTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

glslmultiTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
glslmultiTOP f =  N . f <$> GlslmultiTOP Nothing emptyV4 Nothing Nothing Nothing Nothing emptyV4 emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing emptyV4 Nothing Nothing emptyV4 emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing emptyV4 emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing emptyV4 Nothing []

substanceselectTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
substanceselectTOP f =  N . f <$> SubstanceselectTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

photoshopinTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
photoshopinTOP f =  N . f <$> PhotoshopinTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

outTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
outTOP f =  N . f <$> OutTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

syphonspoutoutTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
syphonspoutoutTOP f =  N . f <$> SyphonspoutoutTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

lumablurTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
lumablurTOP f =  N . f <$> LumablurTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

blobtrackTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
blobtrackTOP f =  N . f <$> BlobtrackTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

tileTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
tileTOP f =  N . f <$> TileTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

blurTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
blurTOP f =  N . f <$> BlurTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

hsvadjustTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
hsvadjustTOP f =  N . f <$> HsvadjustTOP emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

renderselectTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
renderselectTOP f =  N . f <$> RenderselectTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

fitTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
fitTOP f =  N . f <$> FitTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing emptyV2 Nothing []

ndiinTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
ndiinTOP f =  N . f <$> NdiinTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

embossTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
embossTOP f =  N . f <$> EmbossTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

displaceTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
displaceTOP f =  N . f <$> DisplaceTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

multiplyTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
multiplyTOP f =  N . f <$> MultiplyTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing []

insideTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
insideTOP f =  N . f <$> InsideTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing []

nullTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
nullTOP f =  N . f <$> NullTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

ssaoTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
ssaoTOP f =  N . f <$> SsaoTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

opencolorioTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
opencolorioTOP f =  N . f <$> OpencolorioTOP emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing []

circleTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
circleTOP f =  N . f <$> CircleTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV2 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

substanceTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
substanceTOP f =  N . f <$> SubstanceTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

subtractTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
subtractTOP f =  N . f <$> SubtractTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing []

projectionTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
projectionTOP f =  N . f <$> ProjectionTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing []

texture3dTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
texture3dTOP f =  N . f <$> Texture3dTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

packTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
packTOP f =  N . f <$> PackTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

moviefileinTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
moviefileinTOP f =  N . f <$> MoviefileinTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

selectTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
selectTOP f =  N . f <$> SelectTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

feedbackTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
feedbackTOP f =  N . f <$> FeedbackTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

rampTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
rampTOP f =  N . f <$> RampTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

analyzeTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
analyzeTOP f =  N . f <$> AnalyzeTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

addTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
addTOP f =  N . f <$> AddTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing []

textTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
textTOP f =  N . f <$> TextTOP emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

kinectTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
kinectTOP f =  N . f <$> KinectTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

cropTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
cropTOP f =  N . f <$> CropTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

prefiltermapTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
prefiltermapTOP f =  N . f <$> PrefiltermapTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

overTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
overTOP f =  N . f <$> OverTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing []

compositeTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
compositeTOP f =  N . f <$> CompositeTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing []

webrenderTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
webrenderTOP f =  N . f <$> WebrenderTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

antialiasTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
antialiasTOP f =  N . f <$> AntialiasTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

rgbtohsvTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
rgbtohsvTOP f =  N . f <$> RgbtohsvTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

convolveTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
convolveTOP f =  N . f <$> ConvolveTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

edgeTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
edgeTOP f =  N . f <$> EdgeTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

slopeTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
slopeTOP f =  N . f <$> SlopeTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

normalmapTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
normalmapTOP f =  N . f <$> NormalmapTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

thresholdTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
thresholdTOP f =  N . f <$> ThresholdTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

cplusplusTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
cplusplusTOP f =  N . f <$> CplusplusTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

switchTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
switchTOP f =  N . f <$> SwitchTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

matteTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
matteTOP f =  N . f <$> MatteTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

lumalevelTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
lumalevelTOP f =  N . f <$> LumalevelTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

cacheselectTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
cacheselectTOP f =  N . f <$> CacheselectTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

underTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
underTOP f =  N . f <$> UnderTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing []

renderTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
renderTOP f =  N . f <$> RenderTOP Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

constantTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
constantTOP f =  N . f <$> ConstantTOP Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

screengrabTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
screengrabTOP f =  N . f <$> ScreengrabTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

realsenseTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
realsenseTOP f =  N . f <$> RealsenseTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

reorderTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
reorderTOP f =  N . f <$> ReorderTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

monochromeTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
monochromeTOP f =  N . f <$> MonochromeTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

glslTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
glslTOP f =  N . f <$> GlslTOP Nothing emptyV4 Nothing Nothing Nothing Nothing emptyV4 emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing emptyV4 Nothing Nothing emptyV4 emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing emptyV4 emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing emptyV4 Nothing []

crossTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
crossTOP f =  N . f <$> CrossTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing []

inTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
inTOP f =  N . f <$> InTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

layoutTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
layoutTOP f =  N . f <$> LayoutTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

screenTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
screenTOP f =  N . f <$> ScreenTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing []

flipTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
flipTOP f =  N . f <$> FlipTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

directxinTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
directxinTOP f =  N . f <$> DirectxinTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

cornerpinTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
cornerpinTOP f =  N . f <$> CornerpinTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

opviewerTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
opviewerTOP f =  N . f <$> OpviewerTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

viosoTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
viosoTOP f =  N . f <$> ViosoTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

lookupTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
lookupTOP f =  N . f <$> LookupTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

videodeviceoutTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
videodeviceoutTOP f =  N . f <$> VideodeviceoutTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

depthTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
depthTOP f =  N . f <$> DepthTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

videostreaminTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
videostreaminTOP f =  N . f <$> VideostreaminTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

sharedmemoutTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
sharedmemoutTOP f =  N . f <$> SharedmemoutTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

choptoTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
choptoTOP f =  N . f <$> ChoptoTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

openvrTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
openvrTOP f =  N . f <$> OpenvrTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

channelmixTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
channelmixTOP f =  N . f <$> ChannelmixTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

noiseTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
noiseTOP f =  N . f <$> NoiseTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing []

oculusriftTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
oculusriftTOP f =  N . f <$> OculusriftTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

transformTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
transformTOP f =  N . f <$> TransformTOP Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing []

mathTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
mathTOP f =  N . f <$> MathTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

directxoutTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
directxoutTOP f =  N . f <$> DirectxoutTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

chromakeyTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
chromakeyTOP f =  N . f <$> ChromakeyTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

videodeviceinTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
videodeviceinTOP f =  N . f <$> VideodeviceinTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing []

ndioutTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
ndioutTOP f =  N . f <$> NdioutTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

svgTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
svgTOP f =  N . f <$> SvgTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing []

leapmotionTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
leapmotionTOP f =  N . f <$> LeapmotionTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

touchoutTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
touchoutTOP f =  N . f <$> TouchoutTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

syphonspoutinTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
syphonspoutinTOP f =  N . f <$> SyphonspoutinTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

videostreamoutTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
videostreamoutTOP f =  N . f <$> VideostreamoutTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

scalabledisplayTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
scalabledisplayTOP f =  N . f <$> ScalabledisplayTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

outsideTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
outsideTOP f =  N . f <$> OutsideTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing []

resolutionTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
resolutionTOP f =  N . f <$> ResolutionTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

differenceTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
differenceTOP f =  N . f <$> DifferenceTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing []

levelTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
levelTOP f =  N . f <$> LevelTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

rectangleTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
rectangleTOP f =  N . f <$> RectangleTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV2 emptyV3 Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

sharedmeminTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
sharedmeminTOP f =  N . f <$> SharedmeminTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

touchinTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
touchinTOP f =  N . f <$> TouchinTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

cubemapTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
cubemapTOP f =  N . f <$> CubemapTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

hsvtorgbTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
hsvtorgbTOP f =  N . f <$> HsvtorgbTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

timemachineTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
timemachineTOP f =  N . f <$> TimemachineTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

rgbkeyTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
rgbkeyTOP f =  N . f <$> RgbkeyTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

cacheTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
cacheTOP f =  N . f <$> CacheTOP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

renderpassTOP :: (TOP -> TOP) -> [Tree TOP] -> Tree TOP
renderpassTOP f =  N . f <$> RenderpassTOP Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing emptyV4 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

serialDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
serialDAT f =  N . f <$> SerialDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

tcpipDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
tcpipDAT f =  N . f <$> TcpipDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

evaluateDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
evaluateDAT f =  N . f <$> EvaluateDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

choptoDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
choptoDAT f =  N . f <$> ChoptoDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

chopexecuteDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
chopexecuteDAT f =  N . f <$> ChopexecuteDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

performDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
performDAT f =  N . f <$> PerformDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

clipDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
clipDAT f =  N . f <$> ClipDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

tuioinDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
tuioinDAT f =  N . f <$> TuioinDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

convertDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
convertDAT f =  N . f <$> ConvertDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

scriptDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
scriptDAT f =  N . f <$> ScriptDAT Nothing Nothing Nothing Nothing Nothing Nothing []

nullDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
nullDAT f =  N . f <$> NullDAT Nothing Nothing Nothing Nothing []

reorderDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
reorderDAT f =  N . f <$> ReorderDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

errorDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
errorDAT f =  N . f <$> ErrorDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

opexecuteDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
opexecuteDAT f =  N . f <$> OpexecuteDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

etherdreamDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
etherdreamDAT f =  N . f <$> EtherdreamDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

midiinDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
midiinDAT f =  N . f <$> MidiinDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

selectDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
selectDAT f =  N . f <$> SelectDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

fileoutDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
fileoutDAT f =  N . f <$> FileoutDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

oscoutDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
oscoutDAT f =  N . f <$> OscoutDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

midieventDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
midieventDAT f =  N . f <$> MidieventDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

artnetDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
artnetDAT f =  N . f <$> ArtnetDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

substituteDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
substituteDAT f =  N . f <$> SubstituteDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

sortDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
sortDAT f =  N . f <$> SortDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

keyboardinDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
keyboardinDAT f =  N . f <$> KeyboardinDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

parameterexecuteDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
parameterexecuteDAT f =  N . f <$> ParameterexecuteDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

fifoDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
fifoDAT f =  N . f <$> FifoDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

multitouchinDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
multitouchinDAT f =  N . f <$> MultitouchinDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

switchDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
switchDAT f =  N . f <$> SwitchDAT Nothing Nothing Nothing Nothing Nothing []

folderDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
folderDAT f =  N . f <$> FolderDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

mergeDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
mergeDAT f =  N . f <$> MergeDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

infoDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
infoDAT f =  N . f <$> InfoDAT Nothing Nothing Nothing Nothing Nothing []

textDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
textDAT f =  N . f <$> TextDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

outDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
outDAT f =  N . f <$> OutDAT Nothing Nothing Nothing Nothing Nothing []

touchoutDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
touchoutDAT f =  N . f <$> TouchoutDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

panelexecuteDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
panelexecuteDAT f =  N . f <$> PanelexecuteDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

fileinDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
fileinDAT f =  N . f <$> FileinDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

opfindDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
opfindDAT f =  N . f <$> OpfindDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

mqttclientDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
mqttclientDAT f =  N . f <$> MqttclientDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

websocketDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
websocketDAT f =  N . f <$> WebsocketDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

udpoutDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
udpoutDAT f =  N . f <$> UdpoutDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

soptoDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
soptoDAT f =  N . f <$> SoptoDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

renderpickDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
renderpickDAT f =  N . f <$> RenderpickDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

touchinDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
touchinDAT f =  N . f <$> TouchinDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

transposeDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
transposeDAT f =  N . f <$> TransposeDAT Nothing Nothing Nothing Nothing []

inDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
inDAT f =  N . f <$> InDAT Nothing Nothing Nothing Nothing Nothing []

monitorsDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
monitorsDAT f =  N . f <$> MonitorsDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

udpinDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
udpinDAT f =  N . f <$> UdpinDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

examineDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
examineDAT f =  N . f <$> ExamineDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

webDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
webDAT f =  N . f <$> WebDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

udtoutDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
udtoutDAT f =  N . f <$> UdtoutDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

indicesDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
indicesDAT f =  N . f <$> IndicesDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

datexecuteDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
datexecuteDAT f =  N . f <$> DatexecuteDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

tableDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
tableDAT f =  N . f <$> TableDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

xmlDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
xmlDAT f =  N . f <$> XmlDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

insertDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
insertDAT f =  N . f <$> InsertDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

executeDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
executeDAT f =  N . f <$> ExecuteDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

oscinDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
oscinDAT f =  N . f <$> OscinDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

udtinDAT :: (DAT -> DAT) -> [Tree DAT] -> Tree DAT
udtinDAT f =  N . f <$> UdtinDAT Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

fieldCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
fieldCOMP f =  N . f <$> FieldCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing []

sharedmemoutCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
sharedmemoutCOMP f =  N . f <$> SharedmemoutCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

tableCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
tableCOMP f =  N . f <$> TableCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing []

containerCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
containerCOMP f =  N . f <$> ContainerCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing []

parameterCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
parameterCOMP f =  N . f <$> ParameterCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing []

sliderCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
sliderCOMP f =  N . f <$> SliderCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing []

geometryCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
geometryCOMP f =  N . f <$> GeometryCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

cameraCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
cameraCOMP f =  N . f <$> CameraCOMP Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing []

animationCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
animationCOMP f =  N . f <$> AnimationCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

replicatorCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
replicatorCOMP f =  N . f <$> ReplicatorCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

opviewerCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
opviewerCOMP f =  N . f <$> OpviewerCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing []

ambientlightCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
ambientlightCOMP f =  N . f <$> AmbientlightCOMP Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 emptyV4 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing []

selectCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
selectCOMP f =  N . f <$> SelectCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing []

environmentlightCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
environmentlightCOMP f =  N . f <$> EnvironmentlightCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 emptyV3 Nothing emptyV2 Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV4 emptyV3 Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing []

windowCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
windowCOMP f =  N . f <$> WindowCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

buttonCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
buttonCOMP f =  N . f <$> ButtonCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing []

blendCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
blendCOMP f =  N . f <$> BlendCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

camerablendCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
camerablendCOMP f =  N . f <$> CamerablendCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing []

boneCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
boneCOMP f =  N . f <$> BoneCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

listCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
listCOMP f =  N . f <$> ListCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing emptyV2 Nothing Nothing Nothing []

handleCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
handleCOMP f =  N . f <$> HandleCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

nullCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
nullCOMP f =  N . f <$> NullCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

sharedmeminCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
sharedmeminCOMP f =  N . f <$> SharedmeminCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

lightCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
lightCOMP f =  N . f <$> LightCOMP Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing emptyV3 Nothing emptyV3 Nothing Nothing Nothing Nothing emptyV2 Nothing Nothing Nothing Nothing Nothing Nothing Nothing emptyV4 Nothing Nothing Nothing emptyV3 Nothing Nothing emptyV3 Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

baseCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
baseCOMP f =  N . f <$> BaseCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

timeCOMP :: (COMP -> COMP) -> [Tree COMP] -> Tree COMP
timeCOMP f =  N . f <$> TimeCOMP Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing Nothing []

-- lenses

mouseinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
mouseinCHOPexportmethod = lens _mouseinCHOPexportmethod (\a b -> a {_mouseinCHOPexportmethod = b})
mouseinCHOPleft :: Lens' CHOP (Maybe (Tree Int))
mouseinCHOPleft = lens _mouseinCHOPleft (\a b -> a {_mouseinCHOPleft = b})
mouseinCHOPactive :: Lens' CHOP (Maybe (Tree Int))
mouseinCHOPactive = lens _mouseinCHOPactive (\a b -> a {_mouseinCHOPactive = b})
mouseinCHOPmbuttonname :: Lens' CHOP (Maybe (Tree ByteString))
mouseinCHOPmbuttonname = lens _mouseinCHOPmbuttonname (\a b -> a {_mouseinCHOPmbuttonname = b})
mouseinCHOPposxname :: Lens' CHOP (Maybe (Tree ByteString))
mouseinCHOPposxname = lens _mouseinCHOPposxname (\a b -> a {_mouseinCHOPposxname = b})
mouseinCHOPrate :: Lens' CHOP (Maybe (Tree Float))
mouseinCHOPrate = lens _mouseinCHOPrate (\a b -> a {_mouseinCHOPrate = b})
mouseinCHOPmonitor :: Lens' CHOP (Maybe (Tree ByteString))
mouseinCHOPmonitor = lens _mouseinCHOPmonitor (\a b -> a {_mouseinCHOPmonitor = b})
mouseinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
mouseinCHOPexporttable = lens _mouseinCHOPexporttable (\a b -> a {_mouseinCHOPexporttable = b})
mouseinCHOPrbuttonname :: Lens' CHOP (Maybe (Tree ByteString))
mouseinCHOPrbuttonname = lens _mouseinCHOPrbuttonname (\a b -> a {_mouseinCHOPrbuttonname = b})
mouseinCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
mouseinCHOPdefval = lens _mouseinCHOPdefval (\a b -> a {_mouseinCHOPdefval = b})
mouseinCHOPwheel :: Lens' CHOP (Maybe (Tree ByteString))
mouseinCHOPwheel = lens _mouseinCHOPwheel (\a b -> a {_mouseinCHOPwheel = b})
mouseinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
mouseinCHOPsrselect = lens _mouseinCHOPsrselect (\a b -> a {_mouseinCHOPsrselect = b})
mouseinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
mouseinCHOPscope = lens _mouseinCHOPscope (\a b -> a {_mouseinCHOPscope = b})
mouseinCHOPright :: Lens' CHOP (Maybe (Tree Int))
mouseinCHOPright = lens _mouseinCHOPright (\a b -> a {_mouseinCHOPright = b})
mouseinCHOPoutput :: Lens' CHOP (Maybe (Tree Int))
mouseinCHOPoutput = lens _mouseinCHOPoutput (\a b -> a {_mouseinCHOPoutput = b})
mouseinCHOPposyname :: Lens' CHOP (Maybe (Tree ByteString))
mouseinCHOPposyname = lens _mouseinCHOPposyname (\a b -> a {_mouseinCHOPposyname = b})
mouseinCHOPlbuttonname :: Lens' CHOP (Maybe (Tree ByteString))
mouseinCHOPlbuttonname = lens _mouseinCHOPlbuttonname (\a b -> a {_mouseinCHOPlbuttonname = b})
mouseinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
mouseinCHOPtimeslice = lens _mouseinCHOPtimeslice (\a b -> a {_mouseinCHOPtimeslice = b})
mouseinCHOPwheelinc :: Lens' CHOP (Maybe (Tree Float))
mouseinCHOPwheelinc = lens _mouseinCHOPwheelinc (\a b -> a {_mouseinCHOPwheelinc = b})

natnetinCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
natnetinCHOPresetpulse = lens _natnetinCHOPresetpulse (\a b -> a {_natnetinCHOPresetpulse = b})
natnetinCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
natnetinCHOPactive = lens _natnetinCHOPactive (\a b -> a {_natnetinCHOPactive = b})
natnetinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
natnetinCHOPexportmethod = lens _natnetinCHOPexportmethod (\a b -> a {_natnetinCHOPexportmethod = b})
natnetinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
natnetinCHOPexporttable = lens _natnetinCHOPexporttable (\a b -> a {_natnetinCHOPexporttable = b})
natnetinCHOPrate :: Lens' CHOP (Maybe (Tree Int))
natnetinCHOPrate = lens _natnetinCHOPrate (\a b -> a {_natnetinCHOPrate = b})
natnetinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
natnetinCHOPscope = lens _natnetinCHOPscope (\a b -> a {_natnetinCHOPscope = b})
natnetinCHOPdataport :: Lens' CHOP (Maybe (Tree Int))
natnetinCHOPdataport = lens _natnetinCHOPdataport (\a b -> a {_natnetinCHOPdataport = b})
natnetinCHOPlocaladdress :: Lens' CHOP (Maybe (Tree ByteString))
natnetinCHOPlocaladdress = lens _natnetinCHOPlocaladdress (\a b -> a {_natnetinCHOPlocaladdress = b})
natnetinCHOPcommandport :: Lens' CHOP (Maybe (Tree Int))
natnetinCHOPcommandport = lens _natnetinCHOPcommandport (\a b -> a {_natnetinCHOPcommandport = b})
natnetinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
natnetinCHOPsrselect = lens _natnetinCHOPsrselect (\a b -> a {_natnetinCHOPsrselect = b})
natnetinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
natnetinCHOPtimeslice = lens _natnetinCHOPtimeslice (\a b -> a {_natnetinCHOPtimeslice = b})
natnetinCHOPnetaddress :: Lens' CHOP (Maybe (Tree ByteString))
natnetinCHOPnetaddress = lens _natnetinCHOPnetaddress (\a b -> a {_natnetinCHOPnetaddress = b})
natnetinCHOPconnectiontype :: Lens' CHOP (Maybe (Tree Int))
natnetinCHOPconnectiontype = lens _natnetinCHOPconnectiontype (\a b -> a {_natnetinCHOPconnectiontype = b})

audiofilterCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audiofilterCHOPexportmethod = lens _audiofilterCHOPexportmethod (\a b -> a {_audiofilterCHOPexportmethod = b})
audiofilterCHOPfilter :: Lens' CHOP (Maybe (Tree Int))
audiofilterCHOPfilter = lens _audiofilterCHOPfilter (\a b -> a {_audiofilterCHOPfilter = b})
audiofilterCHOPunits :: Lens' CHOP (Maybe (Tree Int))
audiofilterCHOPunits = lens _audiofilterCHOPunits (\a b -> a {_audiofilterCHOPunits = b})
audiofilterCHOPdrywet :: Lens' CHOP (Maybe (Tree Float))
audiofilterCHOPdrywet = lens _audiofilterCHOPdrywet (\a b -> a {_audiofilterCHOPdrywet = b})
audiofilterCHOPresonance :: Lens' CHOP (Maybe (Tree Float))
audiofilterCHOPresonance = lens _audiofilterCHOPresonance (\a b -> a {_audiofilterCHOPresonance = b})
audiofilterCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audiofilterCHOPscope = lens _audiofilterCHOPscope (\a b -> a {_audiofilterCHOPscope = b})
audiofilterCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audiofilterCHOPexporttable = lens _audiofilterCHOPexporttable (\a b -> a {_audiofilterCHOPexporttable = b})
audiofilterCHOPcutofffrequency :: Lens' CHOP (Maybe (Tree Float))
audiofilterCHOPcutofffrequency = lens _audiofilterCHOPcutofffrequency (\a b -> a {_audiofilterCHOPcutofffrequency = b})
audiofilterCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audiofilterCHOPsrselect = lens _audiofilterCHOPsrselect (\a b -> a {_audiofilterCHOPsrselect = b})
audiofilterCHOProlloff :: Lens' CHOP (Maybe (Tree Float))
audiofilterCHOProlloff = lens _audiofilterCHOProlloff (\a b -> a {_audiofilterCHOProlloff = b})
audiofilterCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audiofilterCHOPtimeslice = lens _audiofilterCHOPtimeslice (\a b -> a {_audiofilterCHOPtimeslice = b})
audiofilterCHOPcutofflog :: Lens' CHOP (Maybe (Tree Float))
audiofilterCHOPcutofflog = lens _audiofilterCHOPcutofflog (\a b -> a {_audiofilterCHOPcutofflog = b})

scriptCHOPsetuppars :: Lens' CHOP (Maybe (Tree Bool))
scriptCHOPsetuppars = lens _scriptCHOPsetuppars (\a b -> a {_scriptCHOPsetuppars = b})
scriptCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
scriptCHOPsrselect = lens _scriptCHOPsrselect (\a b -> a {_scriptCHOPsrselect = b})
scriptCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
scriptCHOPexportmethod = lens _scriptCHOPexportmethod (\a b -> a {_scriptCHOPexportmethod = b})
scriptCHOPcallbacks :: Lens' CHOP (Maybe (Tree DAT))
scriptCHOPcallbacks = lens _scriptCHOPcallbacks (\a b -> a {_scriptCHOPcallbacks = b})
scriptCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
scriptCHOPexporttable = lens _scriptCHOPexporttable (\a b -> a {_scriptCHOPexporttable = b})
scriptCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
scriptCHOPtimeslice = lens _scriptCHOPtimeslice (\a b -> a {_scriptCHOPtimeslice = b})
scriptCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
scriptCHOPscope = lens _scriptCHOPscope (\a b -> a {_scriptCHOPscope = b})

pipeinCHOPmode :: Lens' CHOP (Maybe (Tree Int))
pipeinCHOPmode = lens _pipeinCHOPmode (\a b -> a {_pipeinCHOPmode = b})
pipeinCHOPmaxtargetunit :: Lens' CHOP (Maybe (Tree Int))
pipeinCHOPmaxtargetunit = lens _pipeinCHOPmaxtargetunit (\a b -> a {_pipeinCHOPmaxtargetunit = b})
pipeinCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
pipeinCHOPactive = lens _pipeinCHOPactive (\a b -> a {_pipeinCHOPactive = b})
pipeinCHOPmaxqueueunit :: Lens' CHOP (Maybe (Tree Int))
pipeinCHOPmaxqueueunit = lens _pipeinCHOPmaxqueueunit (\a b -> a {_pipeinCHOPmaxqueueunit = b})
pipeinCHOPaddress :: Lens' CHOP (Maybe (Tree ByteString))
pipeinCHOPaddress = lens _pipeinCHOPaddress (\a b -> a {_pipeinCHOPaddress = b})
pipeinCHOPcallbacks :: Lens' CHOP (Maybe (Tree DAT))
pipeinCHOPcallbacks = lens _pipeinCHOPcallbacks (\a b -> a {_pipeinCHOPcallbacks = b})
pipeinCHOPecho :: Lens' CHOP (Maybe (Tree Int))
pipeinCHOPecho = lens _pipeinCHOPecho (\a b -> a {_pipeinCHOPecho = b})
pipeinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
pipeinCHOPexporttable = lens _pipeinCHOPexporttable (\a b -> a {_pipeinCHOPexporttable = b})
pipeinCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
pipeinCHOPreset = lens _pipeinCHOPreset (\a b -> a {_pipeinCHOPreset = b})
pipeinCHOPmaxtarget :: Lens' CHOP (Maybe (Tree Float))
pipeinCHOPmaxtarget = lens _pipeinCHOPmaxtarget (\a b -> a {_pipeinCHOPmaxtarget = b})
pipeinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
pipeinCHOPexportmethod = lens _pipeinCHOPexportmethod (\a b -> a {_pipeinCHOPexportmethod = b})
pipeinCHOPqueued :: Lens' CHOP (Maybe (Tree Bool))
pipeinCHOPqueued = lens _pipeinCHOPqueued (\a b -> a {_pipeinCHOPqueued = b})
pipeinCHOPport :: Lens' CHOP (Maybe (Tree Int))
pipeinCHOPport = lens _pipeinCHOPport (\a b -> a {_pipeinCHOPport = b})
pipeinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
pipeinCHOPscope = lens _pipeinCHOPscope (\a b -> a {_pipeinCHOPscope = b})
pipeinCHOPmintarget :: Lens' CHOP (Maybe (Tree Float))
pipeinCHOPmintarget = lens _pipeinCHOPmintarget (\a b -> a {_pipeinCHOPmintarget = b})
pipeinCHOPadjusttimeunit :: Lens' CHOP (Maybe (Tree Int))
pipeinCHOPadjusttimeunit = lens _pipeinCHOPadjusttimeunit (\a b -> a {_pipeinCHOPadjusttimeunit = b})
pipeinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
pipeinCHOPsrselect = lens _pipeinCHOPsrselect (\a b -> a {_pipeinCHOPsrselect = b})
pipeinCHOPmintargetunit :: Lens' CHOP (Maybe (Tree Int))
pipeinCHOPmintargetunit = lens _pipeinCHOPmintargetunit (\a b -> a {_pipeinCHOPmintargetunit = b})
pipeinCHOPadjusttime :: Lens' CHOP (Maybe (Tree Float))
pipeinCHOPadjusttime = lens _pipeinCHOPadjusttime (\a b -> a {_pipeinCHOPadjusttime = b})
pipeinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
pipeinCHOPtimeslice = lens _pipeinCHOPtimeslice (\a b -> a {_pipeinCHOPtimeslice = b})
pipeinCHOPallowscripts :: Lens' CHOP (Maybe (Tree Bool))
pipeinCHOPallowscripts = lens _pipeinCHOPallowscripts (\a b -> a {_pipeinCHOPallowscripts = b})
pipeinCHOPmaxqueue :: Lens' CHOP (Maybe (Tree Float))
pipeinCHOPmaxqueue = lens _pipeinCHOPmaxqueue (\a b -> a {_pipeinCHOPmaxqueue = b})

functionCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
functionCHOPexportmethod = lens _functionCHOPexportmethod (\a b -> a {_functionCHOPexportmethod = b})
functionCHOPbaseval :: Lens' CHOP (Maybe (Tree Float))
functionCHOPbaseval = lens _functionCHOPbaseval (\a b -> a {_functionCHOPbaseval = b})
functionCHOPdivval :: Lens' CHOP (Maybe (Tree Float))
functionCHOPdivval = lens _functionCHOPdivval (\a b -> a {_functionCHOPdivval = b})
functionCHOPpinfval :: Lens' CHOP (Maybe (Tree Float))
functionCHOPpinfval = lens _functionCHOPpinfval (\a b -> a {_functionCHOPpinfval = b})
functionCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
functionCHOPexporttable = lens _functionCHOPexporttable (\a b -> a {_functionCHOPexporttable = b})
functionCHOPninfval :: Lens' CHOP (Maybe (Tree Float))
functionCHOPninfval = lens _functionCHOPninfval (\a b -> a {_functionCHOPninfval = b})
functionCHOPexpval :: Lens' CHOP (Maybe (Tree Float))
functionCHOPexpval = lens _functionCHOPexpval (\a b -> a {_functionCHOPexpval = b})
functionCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
functionCHOPscope = lens _functionCHOPscope (\a b -> a {_functionCHOPscope = b})
functionCHOPmatch :: Lens' CHOP (Maybe (Tree Int))
functionCHOPmatch = lens _functionCHOPmatch (\a b -> a {_functionCHOPmatch = b})
functionCHOPangunit :: Lens' CHOP (Maybe (Tree Int))
functionCHOPangunit = lens _functionCHOPangunit (\a b -> a {_functionCHOPangunit = b})
functionCHOPdomval :: Lens' CHOP (Maybe (Tree Float))
functionCHOPdomval = lens _functionCHOPdomval (\a b -> a {_functionCHOPdomval = b})
functionCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
functionCHOPsrselect = lens _functionCHOPsrselect (\a b -> a {_functionCHOPsrselect = b})
functionCHOPfunc :: Lens' CHOP (Maybe (Tree Int))
functionCHOPfunc = lens _functionCHOPfunc (\a b -> a {_functionCHOPfunc = b})
functionCHOPerror :: Lens' CHOP (Maybe (Tree Int))
functionCHOPerror = lens _functionCHOPerror (\a b -> a {_functionCHOPerror = b})
functionCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
functionCHOPtimeslice = lens _functionCHOPtimeslice (\a b -> a {_functionCHOPtimeslice = b})

audiodynamicsCHOPchanlinkingcomp :: Lens' CHOP (Maybe (Tree Int))
audiodynamicsCHOPchanlinkingcomp = lens _audiodynamicsCHOPchanlinkingcomp (\a b -> a {_audiodynamicsCHOPchanlinkingcomp = b})
audiodynamicsCHOPdrywet :: Lens' CHOP (Maybe (Tree Float))
audiodynamicsCHOPdrywet = lens _audiodynamicsCHOPdrywet (\a b -> a {_audiodynamicsCHOPdrywet = b})
audiodynamicsCHOPchanlinkinglim :: Lens' CHOP (Maybe (Tree Int))
audiodynamicsCHOPchanlinkinglim = lens _audiodynamicsCHOPchanlinkinglim (\a b -> a {_audiodynamicsCHOPchanlinkinglim = b})
audiodynamicsCHOPratiocompressor :: Lens' CHOP (Maybe (Tree Float))
audiodynamicsCHOPratiocompressor = lens _audiodynamicsCHOPratiocompressor (\a b -> a {_audiodynamicsCHOPratiocompressor = b})
audiodynamicsCHOPenablecompressor :: Lens' CHOP (Maybe (Tree Bool))
audiodynamicsCHOPenablecompressor = lens _audiodynamicsCHOPenablecompressor (\a b -> a {_audiodynamicsCHOPenablecompressor = b})
audiodynamicsCHOPcompressiontype :: Lens' CHOP (Maybe (Tree Int))
audiodynamicsCHOPcompressiontype = lens _audiodynamicsCHOPcompressiontype (\a b -> a {_audiodynamicsCHOPcompressiontype = b})
audiodynamicsCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audiodynamicsCHOPexporttable = lens _audiodynamicsCHOPexporttable (\a b -> a {_audiodynamicsCHOPexporttable = b})
audiodynamicsCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audiodynamicsCHOPexportmethod = lens _audiodynamicsCHOPexportmethod (\a b -> a {_audiodynamicsCHOPexportmethod = b})
audiodynamicsCHOPreleasecompressor :: Lens' CHOP (Maybe (Tree Float))
audiodynamicsCHOPreleasecompressor = lens _audiodynamicsCHOPreleasecompressor (\a b -> a {_audiodynamicsCHOPreleasecompressor = b})
audiodynamicsCHOPkneelimiter :: Lens' CHOP (Maybe (Tree Float))
audiodynamicsCHOPkneelimiter = lens _audiodynamicsCHOPkneelimiter (\a b -> a {_audiodynamicsCHOPkneelimiter = b})
audiodynamicsCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audiodynamicsCHOPscope = lens _audiodynamicsCHOPscope (\a b -> a {_audiodynamicsCHOPscope = b})
audiodynamicsCHOPgaincompressor :: Lens' CHOP (Maybe (Tree Float))
audiodynamicsCHOPgaincompressor = lens _audiodynamicsCHOPgaincompressor (\a b -> a {_audiodynamicsCHOPgaincompressor = b})
audiodynamicsCHOPthresholdlimiter :: Lens' CHOP (Maybe (Tree Float))
audiodynamicsCHOPthresholdlimiter = lens _audiodynamicsCHOPthresholdlimiter (\a b -> a {_audiodynamicsCHOPthresholdlimiter = b})
audiodynamicsCHOPthresholdcompressor :: Lens' CHOP (Maybe (Tree Float))
audiodynamicsCHOPthresholdcompressor = lens _audiodynamicsCHOPthresholdcompressor (\a b -> a {_audiodynamicsCHOPthresholdcompressor = b})
audiodynamicsCHOPreleaselimiter :: Lens' CHOP (Maybe (Tree Float))
audiodynamicsCHOPreleaselimiter = lens _audiodynamicsCHOPreleaselimiter (\a b -> a {_audiodynamicsCHOPreleaselimiter = b})
audiodynamicsCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audiodynamicsCHOPsrselect = lens _audiodynamicsCHOPsrselect (\a b -> a {_audiodynamicsCHOPsrselect = b})
audiodynamicsCHOPkneecompressor :: Lens' CHOP (Maybe (Tree Float))
audiodynamicsCHOPkneecompressor = lens _audiodynamicsCHOPkneecompressor (\a b -> a {_audiodynamicsCHOPkneecompressor = b})
audiodynamicsCHOPinputgain :: Lens' CHOP (Maybe (Tree Float))
audiodynamicsCHOPinputgain = lens _audiodynamicsCHOPinputgain (\a b -> a {_audiodynamicsCHOPinputgain = b})
audiodynamicsCHOPenablelimiter :: Lens' CHOP (Maybe (Tree Bool))
audiodynamicsCHOPenablelimiter = lens _audiodynamicsCHOPenablelimiter (\a b -> a {_audiodynamicsCHOPenablelimiter = b})
audiodynamicsCHOPattackcompressor :: Lens' CHOP (Maybe (Tree Float))
audiodynamicsCHOPattackcompressor = lens _audiodynamicsCHOPattackcompressor (\a b -> a {_audiodynamicsCHOPattackcompressor = b})
audiodynamicsCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audiodynamicsCHOPtimeslice = lens _audiodynamicsCHOPtimeslice (\a b -> a {_audiodynamicsCHOPtimeslice = b})

compositeCHOPend :: Lens' CHOP (Maybe (Tree Float))
compositeCHOPend = lens _compositeCHOPend (\a b -> a {_compositeCHOPend = b})
compositeCHOPpeak :: Lens' CHOP (Maybe (Tree Float))
compositeCHOPpeak = lens _compositeCHOPpeak (\a b -> a {_compositeCHOPpeak = b})
compositeCHOPshortrot :: Lens' CHOP (Maybe (Tree Bool))
compositeCHOPshortrot = lens _compositeCHOPshortrot (\a b -> a {_compositeCHOPshortrot = b})
compositeCHOPreleaseunit :: Lens' CHOP (Maybe (Tree Int))
compositeCHOPreleaseunit = lens _compositeCHOPreleaseunit (\a b -> a {_compositeCHOPreleaseunit = b})
compositeCHOPquatrot :: Lens' CHOP (Maybe (Tree Bool))
compositeCHOPquatrot = lens _compositeCHOPquatrot (\a b -> a {_compositeCHOPquatrot = b})
compositeCHOPrelative :: Lens' CHOP (Maybe (Tree Int))
compositeCHOPrelative = lens _compositeCHOPrelative (\a b -> a {_compositeCHOPrelative = b})
compositeCHOPbase :: Lens' CHOP (Maybe (Tree Float))
compositeCHOPbase = lens _compositeCHOPbase (\a b -> a {_compositeCHOPbase = b})
compositeCHOPendunit :: Lens' CHOP (Maybe (Tree Int))
compositeCHOPendunit = lens _compositeCHOPendunit (\a b -> a {_compositeCHOPendunit = b})
compositeCHOPstart :: Lens' CHOP (Maybe (Tree Float))
compositeCHOPstart = lens _compositeCHOPstart (\a b -> a {_compositeCHOPstart = b})
compositeCHOPrisefunc :: Lens' CHOP (Maybe (Tree Int))
compositeCHOPrisefunc = lens _compositeCHOPrisefunc (\a b -> a {_compositeCHOPrisefunc = b})
compositeCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
compositeCHOPexportmethod = lens _compositeCHOPexportmethod (\a b -> a {_compositeCHOPexportmethod = b})
compositeCHOPeffect :: Lens' CHOP (Maybe (Tree Float))
compositeCHOPeffect = lens _compositeCHOPeffect (\a b -> a {_compositeCHOPeffect = b})
compositeCHOProtscope :: Lens' CHOP (Maybe (Tree ByteString))
compositeCHOProtscope = lens _compositeCHOProtscope (\a b -> a {_compositeCHOProtscope = b})
compositeCHOPstartunit :: Lens' CHOP (Maybe (Tree Int))
compositeCHOPstartunit = lens _compositeCHOPstartunit (\a b -> a {_compositeCHOPstartunit = b})
compositeCHOPfallfunc :: Lens' CHOP (Maybe (Tree Int))
compositeCHOPfallfunc = lens _compositeCHOPfallfunc (\a b -> a {_compositeCHOPfallfunc = b})
compositeCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
compositeCHOPscope = lens _compositeCHOPscope (\a b -> a {_compositeCHOPscope = b})
compositeCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
compositeCHOPexporttable = lens _compositeCHOPexporttable (\a b -> a {_compositeCHOPexporttable = b})
compositeCHOPmatch :: Lens' CHOP (Maybe (Tree Int))
compositeCHOPmatch = lens _compositeCHOPmatch (\a b -> a {_compositeCHOPmatch = b})
compositeCHOPcyclelen :: Lens' CHOP (Maybe (Tree Float))
compositeCHOPcyclelen = lens _compositeCHOPcyclelen (\a b -> a {_compositeCHOPcyclelen = b})
compositeCHOPrelease :: Lens' CHOP (Maybe (Tree Float))
compositeCHOPrelease = lens _compositeCHOPrelease (\a b -> a {_compositeCHOPrelease = b})
compositeCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
compositeCHOPsrselect = lens _compositeCHOPsrselect (\a b -> a {_compositeCHOPsrselect = b})
compositeCHOPpeakunit :: Lens' CHOP (Maybe (Tree Int))
compositeCHOPpeakunit = lens _compositeCHOPpeakunit (\a b -> a {_compositeCHOPpeakunit = b})
compositeCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
compositeCHOPtimeslice = lens _compositeCHOPtimeslice (\a b -> a {_compositeCHOPtimeslice = b})

reorderCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
reorderCHOPexportmethod = lens _reorderCHOPexportmethod (\a b -> a {_reorderCHOPexportmethod = b})
reorderCHOPrempos :: Lens' CHOP (Maybe (Tree Int))
reorderCHOPrempos = lens _reorderCHOPrempos (\a b -> a {_reorderCHOPrempos = b})
reorderCHOPcharpattern :: Lens' CHOP (Maybe (Tree ByteString))
reorderCHOPcharpattern = lens _reorderCHOPcharpattern (\a b -> a {_reorderCHOPcharpattern = b})
reorderCHOPnumpattern :: Lens' CHOP (Maybe (Tree ByteString))
reorderCHOPnumpattern = lens _reorderCHOPnumpattern (\a b -> a {_reorderCHOPnumpattern = b})
reorderCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
reorderCHOPexporttable = lens _reorderCHOPexporttable (\a b -> a {_reorderCHOPexporttable = b})
reorderCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
reorderCHOPscope = lens _reorderCHOPscope (\a b -> a {_reorderCHOPscope = b})
reorderCHOPseed :: Lens' CHOP (Maybe (Tree Float))
reorderCHOPseed = lens _reorderCHOPseed (\a b -> a {_reorderCHOPseed = b})
reorderCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
reorderCHOPsrselect = lens _reorderCHOPsrselect (\a b -> a {_reorderCHOPsrselect = b})
reorderCHOPnvalue :: Lens' CHOP (Maybe (Tree Int))
reorderCHOPnvalue = lens _reorderCHOPnvalue (\a b -> a {_reorderCHOPnvalue = b})
reorderCHOPmethod :: Lens' CHOP (Maybe (Tree Int))
reorderCHOPmethod = lens _reorderCHOPmethod (\a b -> a {_reorderCHOPmethod = b})
reorderCHOPremorder :: Lens' CHOP (Maybe (Tree Int))
reorderCHOPremorder = lens _reorderCHOPremorder (\a b -> a {_reorderCHOPremorder = b})
reorderCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
reorderCHOPtimeslice = lens _reorderCHOPtimeslice (\a b -> a {_reorderCHOPtimeslice = b})
reorderCHOPorderref :: Lens' CHOP (Maybe (Tree Int))
reorderCHOPorderref = lens _reorderCHOPorderref (\a b -> a {_reorderCHOPorderref = b})

fileinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
fileinCHOPexportmethod = lens _fileinCHOPexportmethod (\a b -> a {_fileinCHOPexportmethod = b})
fileinCHOPleft :: Lens' CHOP (Maybe (Tree Int))
fileinCHOPleft = lens _fileinCHOPleft (\a b -> a {_fileinCHOPleft = b})
fileinCHOPfile :: Lens' CHOP (Maybe (Tree ByteString))
fileinCHOPfile = lens _fileinCHOPfile (\a b -> a {_fileinCHOPfile = b})
fileinCHOPnameoption :: Lens' CHOP (Maybe (Tree Int))
fileinCHOPnameoption = lens _fileinCHOPnameoption (\a b -> a {_fileinCHOPnameoption = b})
fileinCHOPoverridevalue :: Lens' CHOP (Maybe (Tree Float))
fileinCHOPoverridevalue = lens _fileinCHOPoverridevalue (\a b -> a {_fileinCHOPoverridevalue = b})
fileinCHOPrate :: Lens' CHOP (Maybe (Tree Float))
fileinCHOPrate = lens _fileinCHOPrate (\a b -> a {_fileinCHOPrate = b})
fileinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
fileinCHOPscope = lens _fileinCHOPscope (\a b -> a {_fileinCHOPscope = b})
fileinCHOPoverridpattern :: Lens' CHOP (Maybe (Tree ByteString))
fileinCHOPoverridpattern = lens _fileinCHOPoverridpattern (\a b -> a {_fileinCHOPoverridpattern = b})
fileinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
fileinCHOPtimeslice = lens _fileinCHOPtimeslice (\a b -> a {_fileinCHOPtimeslice = b})
fileinCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
fileinCHOPdefval = lens _fileinCHOPdefval (\a b -> a {_fileinCHOPdefval = b})
fileinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
fileinCHOPexporttable = lens _fileinCHOPexporttable (\a b -> a {_fileinCHOPexporttable = b})
fileinCHOPrefreshpulse :: Lens' CHOP (Maybe (Tree Bool))
fileinCHOPrefreshpulse = lens _fileinCHOPrefreshpulse (\a b -> a {_fileinCHOPrefreshpulse = b})
fileinCHOPrenamefrom :: Lens' CHOP (Maybe (Tree ByteString))
fileinCHOPrenamefrom = lens _fileinCHOPrenamefrom (\a b -> a {_fileinCHOPrenamefrom = b})
fileinCHOPname :: Lens' CHOP (Maybe (Tree ByteString))
fileinCHOPname = lens _fileinCHOPname (\a b -> a {_fileinCHOPname = b})
fileinCHOPrenameto :: Lens' CHOP (Maybe (Tree ByteString))
fileinCHOPrenameto = lens _fileinCHOPrenameto (\a b -> a {_fileinCHOPrenameto = b})
fileinCHOPrefresh :: Lens' CHOP (Maybe (Tree Bool))
fileinCHOPrefresh = lens _fileinCHOPrefresh (\a b -> a {_fileinCHOPrefresh = b})
fileinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
fileinCHOPsrselect = lens _fileinCHOPsrselect (\a b -> a {_fileinCHOPsrselect = b})
fileinCHOPright :: Lens' CHOP (Maybe (Tree Int))
fileinCHOPright = lens _fileinCHOPright (\a b -> a {_fileinCHOPright = b})
fileinCHOPrateoption :: Lens' CHOP (Maybe (Tree Int))
fileinCHOPrateoption = lens _fileinCHOPrateoption (\a b -> a {_fileinCHOPrateoption = b})

clipblenderCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
clipblenderCHOPresetpulse = lens _clipblenderCHOPresetpulse (\a b -> a {_clipblenderCHOPresetpulse = b})
clipblenderCHOPtimechannel :: Lens' CHOP (Maybe (Tree ByteString))
clipblenderCHOPtimechannel = lens _clipblenderCHOPtimechannel (\a b -> a {_clipblenderCHOPtimechannel = b})
clipblenderCHOPqenable :: Lens' CHOP (Maybe (Tree ByteString))
clipblenderCHOPqenable = lens _clipblenderCHOPqenable (\a b -> a {_clipblenderCHOPqenable = b})
clipblenderCHOPstepforward :: Lens' CHOP (Maybe (Tree Bool))
clipblenderCHOPstepforward = lens _clipblenderCHOPstepforward (\a b -> a {_clipblenderCHOPstepforward = b})
clipblenderCHOPdatlist :: Lens' CHOP (Maybe (Tree DAT))
clipblenderCHOPdatlist = lens _clipblenderCHOPdatlist (\a b -> a {_clipblenderCHOPdatlist = b})
clipblenderCHOPxrot :: Lens' CHOP (Maybe (Tree ByteString))
clipblenderCHOPxrot = lens _clipblenderCHOPxrot (\a b -> a {_clipblenderCHOPxrot = b})
clipblenderCHOPztrans :: Lens' CHOP (Maybe (Tree ByteString))
clipblenderCHOPztrans = lens _clipblenderCHOPztrans (\a b -> a {_clipblenderCHOPztrans = b})
clipblenderCHOPaend :: Lens' CHOP (Maybe (Tree ByteString))
clipblenderCHOPaend = lens _clipblenderCHOPaend (\a b -> a {_clipblenderCHOPaend = b})
clipblenderCHOPtimeremaining :: Lens' CHOP (Maybe (Tree ByteString))
clipblenderCHOPtimeremaining = lens _clipblenderCHOPtimeremaining (\a b -> a {_clipblenderCHOPtimeremaining = b})
clipblenderCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
clipblenderCHOPscope = lens _clipblenderCHOPscope (\a b -> a {_clipblenderCHOPscope = b})
clipblenderCHOPxtrans :: Lens' CHOP (Maybe (Tree ByteString))
clipblenderCHOPxtrans = lens _clipblenderCHOPxtrans (\a b -> a {_clipblenderCHOPxtrans = b})
clipblenderCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
clipblenderCHOPexporttable = lens _clipblenderCHOPexporttable (\a b -> a {_clipblenderCHOPexporttable = b})
clipblenderCHOPr :: Lens' CHOP (Vec3)
clipblenderCHOPr = lens _clipblenderCHOPr (\a b -> a {_clipblenderCHOPr = b})
clipblenderCHOPplayspeed :: Lens' CHOP (Maybe (Tree Float))
clipblenderCHOPplayspeed = lens _clipblenderCHOPplayspeed (\a b -> a {_clipblenderCHOPplayspeed = b})
clipblenderCHOPfixjump :: Lens' CHOP (Maybe (Tree Bool))
clipblenderCHOPfixjump = lens _clipblenderCHOPfixjump (\a b -> a {_clipblenderCHOPfixjump = b})
clipblenderCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
clipblenderCHOPexportmethod = lens _clipblenderCHOPexportmethod (\a b -> a {_clipblenderCHOPexportmethod = b})
clipblenderCHOPdefault :: Lens' CHOP (Maybe (Tree CHOP))
clipblenderCHOPdefault = lens _clipblenderCHOPdefault (\a b -> a {_clipblenderCHOPdefault = b})
clipblenderCHOPyrot :: Lens' CHOP (Maybe (Tree ByteString))
clipblenderCHOPyrot = lens _clipblenderCHOPyrot (\a b -> a {_clipblenderCHOPyrot = b})
clipblenderCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
clipblenderCHOPtimeslice = lens _clipblenderCHOPtimeslice (\a b -> a {_clipblenderCHOPtimeslice = b})
clipblenderCHOPlogjumps :: Lens' CHOP (Maybe (Tree Bool))
clipblenderCHOPlogjumps = lens _clipblenderCHOPlogjumps (\a b -> a {_clipblenderCHOPlogjumps = b})
clipblenderCHOPprerotate :: Lens' CHOP (Maybe (Tree Bool))
clipblenderCHOPprerotate = lens _clipblenderCHOPprerotate (\a b -> a {_clipblenderCHOPprerotate = b})
clipblenderCHOPytrans :: Lens' CHOP (Maybe (Tree ByteString))
clipblenderCHOPytrans = lens _clipblenderCHOPytrans (\a b -> a {_clipblenderCHOPytrans = b})
clipblenderCHOPqtrigger :: Lens' CHOP (Maybe (Tree Bool))
clipblenderCHOPqtrigger = lens _clipblenderCHOPqtrigger (\a b -> a {_clipblenderCHOPqtrigger = b})
clipblenderCHOPdelay :: Lens' CHOP (Maybe (Tree Int))
clipblenderCHOPdelay = lens _clipblenderCHOPdelay (\a b -> a {_clipblenderCHOPdelay = b})
clipblenderCHOPdoxform :: Lens' CHOP (Maybe (Tree Bool))
clipblenderCHOPdoxform = lens _clipblenderCHOPdoxform (\a b -> a {_clipblenderCHOPdoxform = b})
clipblenderCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
clipblenderCHOPsrselect = lens _clipblenderCHOPsrselect (\a b -> a {_clipblenderCHOPsrselect = b})
clipblenderCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
clipblenderCHOPreset = lens _clipblenderCHOPreset (\a b -> a {_clipblenderCHOPreset = b})
clipblenderCHOPprintstate :: Lens' CHOP (Maybe (Tree Bool))
clipblenderCHOPprintstate = lens _clipblenderCHOPprintstate (\a b -> a {_clipblenderCHOPprintstate = b})
clipblenderCHOPzrot :: Lens' CHOP (Maybe (Tree ByteString))
clipblenderCHOPzrot = lens _clipblenderCHOPzrot (\a b -> a {_clipblenderCHOPzrot = b})
clipblenderCHOPt :: Lens' CHOP (Vec3)
clipblenderCHOPt = lens _clipblenderCHOPt (\a b -> a {_clipblenderCHOPt = b})
clipblenderCHOPlogpulse :: Lens' CHOP (Maybe (Tree Bool))
clipblenderCHOPlogpulse = lens _clipblenderCHOPlogpulse (\a b -> a {_clipblenderCHOPlogpulse = b})
clipblenderCHOPtarget :: Lens' CHOP (Vec3)
clipblenderCHOPtarget = lens _clipblenderCHOPtarget (\a b -> a {_clipblenderCHOPtarget = b})
clipblenderCHOPstepbackward :: Lens' CHOP (Maybe (Tree Bool))
clipblenderCHOPstepbackward = lens _clipblenderCHOPstepbackward (\a b -> a {_clipblenderCHOPstepbackward = b})

lagCHOPlagmethod :: Lens' CHOP (Maybe (Tree Int))
lagCHOPlagmethod = lens _lagCHOPlagmethod (\a b -> a {_lagCHOPlagmethod = b})
lagCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
lagCHOPresetpulse = lens _lagCHOPresetpulse (\a b -> a {_lagCHOPresetpulse = b})
lagCHOPaclamp :: Lens' CHOP (Maybe (Tree Bool))
lagCHOPaclamp = lens _lagCHOPaclamp (\a b -> a {_lagCHOPaclamp = b})
lagCHOPslope2 :: Lens' CHOP (Maybe (Tree Float))
lagCHOPslope2 = lens _lagCHOPslope2 (\a b -> a {_lagCHOPslope2 = b})
lagCHOPslope1 :: Lens' CHOP (Maybe (Tree Float))
lagCHOPslope1 = lens _lagCHOPslope1 (\a b -> a {_lagCHOPslope1 = b})
lagCHOPclamp :: Lens' CHOP (Maybe (Tree Bool))
lagCHOPclamp = lens _lagCHOPclamp (\a b -> a {_lagCHOPclamp = b})
lagCHOPlagsamples :: Lens' CHOP (Maybe (Tree Bool))
lagCHOPlagsamples = lens _lagCHOPlagsamples (\a b -> a {_lagCHOPlagsamples = b})
lagCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
lagCHOPexporttable = lens _lagCHOPexporttable (\a b -> a {_lagCHOPexporttable = b})
lagCHOPaccel1 :: Lens' CHOP (Maybe (Tree Float))
lagCHOPaccel1 = lens _lagCHOPaccel1 (\a b -> a {_lagCHOPaccel1 = b})
lagCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
lagCHOPexportmethod = lens _lagCHOPexportmethod (\a b -> a {_lagCHOPexportmethod = b})
lagCHOPovershootunit :: Lens' CHOP (Maybe (Tree Int))
lagCHOPovershootunit = lens _lagCHOPovershootunit (\a b -> a {_lagCHOPovershootunit = b})
lagCHOPovershoot2 :: Lens' CHOP (Maybe (Tree Float))
lagCHOPovershoot2 = lens _lagCHOPovershoot2 (\a b -> a {_lagCHOPovershoot2 = b})
lagCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
lagCHOPtimeslice = lens _lagCHOPtimeslice (\a b -> a {_lagCHOPtimeslice = b})
lagCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
lagCHOPscope = lens _lagCHOPscope (\a b -> a {_lagCHOPscope = b})
lagCHOPlag1 :: Lens' CHOP (Maybe (Tree Float))
lagCHOPlag1 = lens _lagCHOPlag1 (\a b -> a {_lagCHOPlag1 = b})
lagCHOPlagunit :: Lens' CHOP (Maybe (Tree Int))
lagCHOPlagunit = lens _lagCHOPlagunit (\a b -> a {_lagCHOPlagunit = b})
lagCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
lagCHOPsrselect = lens _lagCHOPsrselect (\a b -> a {_lagCHOPsrselect = b})
lagCHOPovershoot1 :: Lens' CHOP (Maybe (Tree Float))
lagCHOPovershoot1 = lens _lagCHOPovershoot1 (\a b -> a {_lagCHOPovershoot1 = b})
lagCHOPaccel2 :: Lens' CHOP (Maybe (Tree Float))
lagCHOPaccel2 = lens _lagCHOPaccel2 (\a b -> a {_lagCHOPaccel2 = b})
lagCHOPlag2 :: Lens' CHOP (Maybe (Tree Float))
lagCHOPlag2 = lens _lagCHOPlag2 (\a b -> a {_lagCHOPlag2 = b})
lagCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
lagCHOPreset = lens _lagCHOPreset (\a b -> a {_lagCHOPreset = b})

selectCHOPautoprefix :: Lens' CHOP (Maybe (Tree Bool))
selectCHOPautoprefix = lens _selectCHOPautoprefix (\a b -> a {_selectCHOPautoprefix = b})
selectCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
selectCHOPexportmethod = lens _selectCHOPexportmethod (\a b -> a {_selectCHOPexportmethod = b})
selectCHOPalign :: Lens' CHOP (Maybe (Tree Int))
selectCHOPalign = lens _selectCHOPalign (\a b -> a {_selectCHOPalign = b})
selectCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
selectCHOPexporttable = lens _selectCHOPexporttable (\a b -> a {_selectCHOPexporttable = b})
selectCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
selectCHOPscope = lens _selectCHOPscope (\a b -> a {_selectCHOPscope = b})
selectCHOPchannames :: Lens' CHOP (Maybe (Tree ByteString))
selectCHOPchannames = lens _selectCHOPchannames (\a b -> a {_selectCHOPchannames = b})
selectCHOPrenamefrom :: Lens' CHOP (Maybe (Tree ByteString))
selectCHOPrenamefrom = lens _selectCHOPrenamefrom (\a b -> a {_selectCHOPrenamefrom = b})
selectCHOPrenameto :: Lens' CHOP (Maybe (Tree ByteString))
selectCHOPrenameto = lens _selectCHOPrenameto (\a b -> a {_selectCHOPrenameto = b})
selectCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
selectCHOPsrselect = lens _selectCHOPsrselect (\a b -> a {_selectCHOPsrselect = b})
selectCHOPchop :: Lens' CHOP (Maybe (Tree CHOP))
selectCHOPchop = lens _selectCHOPchop (\a b -> a {_selectCHOPchop = b})
selectCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
selectCHOPtimeslice = lens _selectCHOPtimeslice (\a b -> a {_selectCHOPtimeslice = b})

logicCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
logicCHOPexportmethod = lens _logicCHOPexportmethod (\a b -> a {_logicCHOPexportmethod = b})
logicCHOPalign :: Lens' CHOP (Maybe (Tree Int))
logicCHOPalign = lens _logicCHOPalign (\a b -> a {_logicCHOPalign = b})
logicCHOPchopop :: Lens' CHOP (Maybe (Tree Int))
logicCHOPchopop = lens _logicCHOPchopop (\a b -> a {_logicCHOPchopop = b})
logicCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
logicCHOPexporttable = lens _logicCHOPexporttable (\a b -> a {_logicCHOPexporttable = b})
logicCHOPboundmin :: Lens' CHOP (Maybe (Tree Float))
logicCHOPboundmin = lens _logicCHOPboundmin (\a b -> a {_logicCHOPboundmin = b})
logicCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
logicCHOPscope = lens _logicCHOPscope (\a b -> a {_logicCHOPscope = b})
logicCHOPchanop :: Lens' CHOP (Maybe (Tree Int))
logicCHOPchanop = lens _logicCHOPchanop (\a b -> a {_logicCHOPchanop = b})
logicCHOPboundmax :: Lens' CHOP (Maybe (Tree Float))
logicCHOPboundmax = lens _logicCHOPboundmax (\a b -> a {_logicCHOPboundmax = b})
logicCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
logicCHOPsrselect = lens _logicCHOPsrselect (\a b -> a {_logicCHOPsrselect = b})
logicCHOPconvert :: Lens' CHOP (Maybe (Tree Int))
logicCHOPconvert = lens _logicCHOPconvert (\a b -> a {_logicCHOPconvert = b})
logicCHOPmatch :: Lens' CHOP (Maybe (Tree Int))
logicCHOPmatch = lens _logicCHOPmatch (\a b -> a {_logicCHOPmatch = b})
logicCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
logicCHOPtimeslice = lens _logicCHOPtimeslice (\a b -> a {_logicCHOPtimeslice = b})
logicCHOPpreop :: Lens' CHOP (Maybe (Tree Int))
logicCHOPpreop = lens _logicCHOPpreop (\a b -> a {_logicCHOPpreop = b})

performCHOPgputemp :: Lens' CHOP (Maybe (Tree Bool))
performCHOPgputemp = lens _performCHOPgputemp (\a b -> a {_performCHOPgputemp = b})
performCHOPaclinestatus :: Lens' CHOP (Maybe (Tree Bool))
performCHOPaclinestatus = lens _performCHOPaclinestatus (\a b -> a {_performCHOPaclinestatus = b})
performCHOPperformmode :: Lens' CHOP (Maybe (Tree Bool))
performCHOPperformmode = lens _performCHOPperformmode (\a b -> a {_performCHOPperformmode = b})
performCHOPoptimizedexpression :: Lens' CHOP (Maybe (Tree Bool))
performCHOPoptimizedexpression = lens _performCHOPoptimizedexpression (\a b -> a {_performCHOPoptimizedexpression = b})
performCHOPtimeslicemsec :: Lens' CHOP (Maybe (Tree Bool))
performCHOPtimeslicemsec = lens _performCHOPtimeslicemsec (\a b -> a {_performCHOPtimeslicemsec = b})
performCHOPfps :: Lens' CHOP (Maybe (Tree Bool))
performCHOPfps = lens _performCHOPfps (\a b -> a {_performCHOPfps = b})
performCHOPmvreadahead :: Lens' CHOP (Maybe (Tree Bool))
performCHOPmvreadahead = lens _performCHOPmvreadahead (\a b -> a {_performCHOPmvreadahead = b})
performCHOPcookstate :: Lens' CHOP (Maybe (Tree Bool))
performCHOPcookstate = lens _performCHOPcookstate (\a b -> a {_performCHOPcookstate = b})
performCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
performCHOPexporttable = lens _performCHOPexporttable (\a b -> a {_performCHOPexporttable = b})
performCHOPcachedexpressions :: Lens' CHOP (Maybe (Tree Bool))
performCHOPcachedexpressions = lens _performCHOPcachedexpressions (\a b -> a {_performCHOPcachedexpressions = b})
performCHOPbatterytime :: Lens' CHOP (Maybe (Tree Bool))
performCHOPbatterytime = lens _performCHOPbatterytime (\a b -> a {_performCHOPbatterytime = b})
performCHOPcookrealtime :: Lens' CHOP (Maybe (Tree Bool))
performCHOPcookrealtime = lens _performCHOPcookrealtime (\a b -> a {_performCHOPcookrealtime = b})
performCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
performCHOPexportmethod = lens _performCHOPexportmethod (\a b -> a {_performCHOPexportmethod = b})
performCHOPcookrate :: Lens' CHOP (Maybe (Tree Bool))
performCHOPcookrate = lens _performCHOPcookrate (\a b -> a {_performCHOPcookrate = b})
performCHOPmsec :: Lens' CHOP (Maybe (Tree Bool))
performCHOPmsec = lens _performCHOPmsec (\a b -> a {_performCHOPmsec = b})
performCHOPtimeslicestep :: Lens' CHOP (Maybe (Tree Bool))
performCHOPtimeslicestep = lens _performCHOPtimeslicestep (\a b -> a {_performCHOPtimeslicestep = b})
performCHOPactiveops :: Lens' CHOP (Maybe (Tree Bool))
performCHOPactiveops = lens _performCHOPactiveops (\a b -> a {_performCHOPactiveops = b})
performCHOPcook :: Lens' CHOP (Maybe (Tree Bool))
performCHOPcook = lens _performCHOPcook (\a b -> a {_performCHOPcook = b})
performCHOPtotalgpumem :: Lens' CHOP (Maybe (Tree Bool))
performCHOPtotalgpumem = lens _performCHOPtotalgpumem (\a b -> a {_performCHOPtotalgpumem = b})
performCHOPgpumemused :: Lens' CHOP (Maybe (Tree Bool))
performCHOPgpumemused = lens _performCHOPgpumemused (\a b -> a {_performCHOPgpumemused = b})
performCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
performCHOPscope = lens _performCHOPscope (\a b -> a {_performCHOPscope = b})
performCHOPcpumemused :: Lens' CHOP (Maybe (Tree Bool))
performCHOPcpumemused = lens _performCHOPcpumemused (\a b -> a {_performCHOPcpumemused = b})
performCHOPactiveexpressions :: Lens' CHOP (Maybe (Tree Bool))
performCHOPactiveexpressions = lens _performCHOPactiveexpressions (\a b -> a {_performCHOPactiveexpressions = b})
performCHOPperformfocus :: Lens' CHOP (Maybe (Tree Bool))
performCHOPperformfocus = lens _performCHOPperformfocus (\a b -> a {_performCHOPperformfocus = b})
performCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
performCHOPsrselect = lens _performCHOPsrselect (\a b -> a {_performCHOPsrselect = b})
performCHOPbatterylife :: Lens' CHOP (Maybe (Tree Bool))
performCHOPbatterylife = lens _performCHOPbatterylife (\a b -> a {_performCHOPbatterylife = b})
performCHOPtotalops :: Lens' CHOP (Maybe (Tree Bool))
performCHOPtotalops = lens _performCHOPtotalops (\a b -> a {_performCHOPtotalops = b})
performCHOPbatterycharging :: Lens' CHOP (Maybe (Tree Bool))
performCHOPbatterycharging = lens _performCHOPbatterycharging (\a b -> a {_performCHOPbatterycharging = b})
performCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
performCHOPtimeslice = lens _performCHOPtimeslice (\a b -> a {_performCHOPtimeslice = b})
performCHOPdeactivatedops :: Lens' CHOP (Maybe (Tree Bool))
performCHOPdeactivatedops = lens _performCHOPdeactivatedops (\a b -> a {_performCHOPdeactivatedops = b})
performCHOPdroppedframes :: Lens' CHOP (Maybe (Tree Bool))
performCHOPdroppedframes = lens _performCHOPdroppedframes (\a b -> a {_performCHOPdroppedframes = b})

keyboardinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
keyboardinCHOPexportmethod = lens _keyboardinCHOPexportmethod (\a b -> a {_keyboardinCHOPexportmethod = b})
keyboardinCHOPleft :: Lens' CHOP (Maybe (Tree Int))
keyboardinCHOPleft = lens _keyboardinCHOPleft (\a b -> a {_keyboardinCHOPleft = b})
keyboardinCHOPactive :: Lens' CHOP (Maybe (Tree Int))
keyboardinCHOPactive = lens _keyboardinCHOPactive (\a b -> a {_keyboardinCHOPactive = b})
keyboardinCHOPfirstkey :: Lens' CHOP (Maybe (Tree Int))
keyboardinCHOPfirstkey = lens _keyboardinCHOPfirstkey (\a b -> a {_keyboardinCHOPfirstkey = b})
keyboardinCHOPrate :: Lens' CHOP (Maybe (Tree Float))
keyboardinCHOPrate = lens _keyboardinCHOPrate (\a b -> a {_keyboardinCHOPrate = b})
keyboardinCHOPright :: Lens' CHOP (Maybe (Tree Int))
keyboardinCHOPright = lens _keyboardinCHOPright (\a b -> a {_keyboardinCHOPright = b})
keyboardinCHOPnumber :: Lens' CHOP (Maybe (Tree Int))
keyboardinCHOPnumber = lens _keyboardinCHOPnumber (\a b -> a {_keyboardinCHOPnumber = b})
keyboardinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
keyboardinCHOPscope = lens _keyboardinCHOPscope (\a b -> a {_keyboardinCHOPscope = b})
keyboardinCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
keyboardinCHOPdefval = lens _keyboardinCHOPdefval (\a b -> a {_keyboardinCHOPdefval = b})
keyboardinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
keyboardinCHOPexporttable = lens _keyboardinCHOPexporttable (\a b -> a {_keyboardinCHOPexporttable = b})
keyboardinCHOPmodifiers :: Lens' CHOP (Maybe (Tree Int))
keyboardinCHOPmodifiers = lens _keyboardinCHOPmodifiers (\a b -> a {_keyboardinCHOPmodifiers = b})
keyboardinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
keyboardinCHOPsrselect = lens _keyboardinCHOPsrselect (\a b -> a {_keyboardinCHOPsrselect = b})
keyboardinCHOPchannelnames :: Lens' CHOP (Maybe (Tree Int))
keyboardinCHOPchannelnames = lens _keyboardinCHOPchannelnames (\a b -> a {_keyboardinCHOPchannelnames = b})
keyboardinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
keyboardinCHOPtimeslice = lens _keyboardinCHOPtimeslice (\a b -> a {_keyboardinCHOPtimeslice = b})
keyboardinCHOPorder :: Lens' CHOP (Maybe (Tree Int))
keyboardinCHOPorder = lens _keyboardinCHOPorder (\a b -> a {_keyboardinCHOPorder = b})

dmxinCHOPqueuesize :: Lens' CHOP (Maybe (Tree Int))
dmxinCHOPqueuesize = lens _dmxinCHOPqueuesize (\a b -> a {_dmxinCHOPqueuesize = b})
dmxinCHOPformat :: Lens' CHOP (Maybe (Tree Int))
dmxinCHOPformat = lens _dmxinCHOPformat (\a b -> a {_dmxinCHOPformat = b})
dmxinCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
dmxinCHOPactive = lens _dmxinCHOPactive (\a b -> a {_dmxinCHOPactive = b})
dmxinCHOPsubnet :: Lens' CHOP (Maybe (Tree Int))
dmxinCHOPsubnet = lens _dmxinCHOPsubnet (\a b -> a {_dmxinCHOPsubnet = b})
dmxinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
dmxinCHOPexportmethod = lens _dmxinCHOPexportmethod (\a b -> a {_dmxinCHOPexportmethod = b})
dmxinCHOPuniversename :: Lens' CHOP (Maybe (Tree ByteString))
dmxinCHOPuniversename = lens _dmxinCHOPuniversename (\a b -> a {_dmxinCHOPuniversename = b})
dmxinCHOPserialport :: Lens' CHOP (Maybe (Tree Bool))
dmxinCHOPserialport = lens _dmxinCHOPserialport (\a b -> a {_dmxinCHOPserialport = b})
dmxinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
dmxinCHOPscope = lens _dmxinCHOPscope (\a b -> a {_dmxinCHOPscope = b})
dmxinCHOPnetname :: Lens' CHOP (Maybe (Tree ByteString))
dmxinCHOPnetname = lens _dmxinCHOPnetname (\a b -> a {_dmxinCHOPnetname = b})
dmxinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
dmxinCHOPexporttable = lens _dmxinCHOPexporttable (\a b -> a {_dmxinCHOPexporttable = b})
dmxinCHOPinterface :: Lens' CHOP (Maybe (Tree Bool))
dmxinCHOPinterface = lens _dmxinCHOPinterface (\a b -> a {_dmxinCHOPinterface = b})
dmxinCHOPfilterdat :: Lens' CHOP (Maybe (Tree DAT))
dmxinCHOPfilterdat = lens _dmxinCHOPfilterdat (\a b -> a {_dmxinCHOPfilterdat = b})
dmxinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
dmxinCHOPtimeslice = lens _dmxinCHOPtimeslice (\a b -> a {_dmxinCHOPtimeslice = b})
dmxinCHOPrate :: Lens' CHOP (Maybe (Tree Int))
dmxinCHOPrate = lens _dmxinCHOPrate (\a b -> a {_dmxinCHOPrate = b})
dmxinCHOPstartcodes :: Lens' CHOP (Maybe (Tree ByteString))
dmxinCHOPstartcodes = lens _dmxinCHOPstartcodes (\a b -> a {_dmxinCHOPstartcodes = b})
dmxinCHOPnet :: Lens' CHOP (Maybe (Tree Int))
dmxinCHOPnet = lens _dmxinCHOPnet (\a b -> a {_dmxinCHOPnet = b})
dmxinCHOPsubnetname :: Lens' CHOP (Maybe (Tree ByteString))
dmxinCHOPsubnetname = lens _dmxinCHOPsubnetname (\a b -> a {_dmxinCHOPsubnetname = b})
dmxinCHOPdevice :: Lens' CHOP (Maybe (Tree Bool))
dmxinCHOPdevice = lens _dmxinCHOPdevice (\a b -> a {_dmxinCHOPdevice = b})
dmxinCHOPmulticast :: Lens' CHOP (Maybe (Tree Bool))
dmxinCHOPmulticast = lens _dmxinCHOPmulticast (\a b -> a {_dmxinCHOPmulticast = b})
dmxinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
dmxinCHOPsrselect = lens _dmxinCHOPsrselect (\a b -> a {_dmxinCHOPsrselect = b})
dmxinCHOPuniverse :: Lens' CHOP (Maybe (Tree Int))
dmxinCHOPuniverse = lens _dmxinCHOPuniverse (\a b -> a {_dmxinCHOPuniverse = b})

inversekinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
inversekinCHOPexportmethod = lens _inversekinCHOPexportmethod (\a b -> a {_inversekinCHOPexportmethod = b})
inversekinCHOPiktwist :: Lens' CHOP (Maybe (Tree Float))
inversekinCHOPiktwist = lens _inversekinCHOPiktwist (\a b -> a {_inversekinCHOPiktwist = b})
inversekinCHOPikdampen :: Lens' CHOP (Maybe (Tree Float))
inversekinCHOPikdampen = lens _inversekinCHOPikdampen (\a b -> a {_inversekinCHOPikdampen = b})
inversekinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
inversekinCHOPscope = lens _inversekinCHOPscope (\a b -> a {_inversekinCHOPscope = b})
inversekinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
inversekinCHOPsrselect = lens _inversekinCHOPsrselect (\a b -> a {_inversekinCHOPsrselect = b})
inversekinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
inversekinCHOPexporttable = lens _inversekinCHOPexporttable (\a b -> a {_inversekinCHOPexporttable = b})
inversekinCHOPsolvertype :: Lens' CHOP (Maybe (Tree Int))
inversekinCHOPsolvertype = lens _inversekinCHOPsolvertype (\a b -> a {_inversekinCHOPsolvertype = b})
inversekinCHOPcurve :: Lens' CHOP (Maybe (Tree SOP))
inversekinCHOPcurve = lens _inversekinCHOPcurve (\a b -> a {_inversekinCHOPcurve = b})
inversekinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
inversekinCHOPtimeslice = lens _inversekinCHOPtimeslice (\a b -> a {_inversekinCHOPtimeslice = b})

sequencerCHOPqueue :: Lens' CHOP (Maybe (Tree ByteString))
sequencerCHOPqueue = lens _sequencerCHOPqueue (\a b -> a {_sequencerCHOPqueue = b})
sequencerCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
sequencerCHOPresetpulse = lens _sequencerCHOPresetpulse (\a b -> a {_sequencerCHOPresetpulse = b})
sequencerCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
sequencerCHOPexportmethod = lens _sequencerCHOPexportmethod (\a b -> a {_sequencerCHOPexportmethod = b})
sequencerCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
sequencerCHOPexporttable = lens _sequencerCHOPexporttable (\a b -> a {_sequencerCHOPexporttable = b})
sequencerCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
sequencerCHOPscope = lens _sequencerCHOPscope (\a b -> a {_sequencerCHOPscope = b})
sequencerCHOPdatlist :: Lens' CHOP (Maybe (Tree DAT))
sequencerCHOPdatlist = lens _sequencerCHOPdatlist (\a b -> a {_sequencerCHOPdatlist = b})
sequencerCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
sequencerCHOPsrselect = lens _sequencerCHOPsrselect (\a b -> a {_sequencerCHOPsrselect = b})
sequencerCHOPblendscope :: Lens' CHOP (Maybe (Tree ByteString))
sequencerCHOPblendscope = lens _sequencerCHOPblendscope (\a b -> a {_sequencerCHOPblendscope = b})
sequencerCHOPtrigger :: Lens' CHOP (Maybe (Tree Bool))
sequencerCHOPtrigger = lens _sequencerCHOPtrigger (\a b -> a {_sequencerCHOPtrigger = b})
sequencerCHOPaddscope :: Lens' CHOP (Maybe (Tree ByteString))
sequencerCHOPaddscope = lens _sequencerCHOPaddscope (\a b -> a {_sequencerCHOPaddscope = b})
sequencerCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
sequencerCHOPtimeslice = lens _sequencerCHOPtimeslice (\a b -> a {_sequencerCHOPtimeslice = b})
sequencerCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
sequencerCHOPreset = lens _sequencerCHOPreset (\a b -> a {_sequencerCHOPreset = b})

beatCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPresetpulse = lens _beatCHOPresetpulse (\a b -> a {_beatCHOPresetpulse = b})
beatCHOPresetbarvalue :: Lens' CHOP (Maybe (Tree Float))
beatCHOPresetbarvalue = lens _beatCHOPresetbarvalue (\a b -> a {_beatCHOPresetbarvalue = b})
beatCHOPrandoffset :: Lens' CHOP (Maybe (Tree Float))
beatCHOPrandoffset = lens _beatCHOPrandoffset (\a b -> a {_beatCHOPrandoffset = b})
beatCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
beatCHOPexportmethod = lens _beatCHOPexportmethod (\a b -> a {_beatCHOPexportmethod = b})
beatCHOPbpm :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPbpm = lens _beatCHOPbpm (\a b -> a {_beatCHOPbpm = b})
beatCHOPresetwait :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPresetwait = lens _beatCHOPresetwait (\a b -> a {_beatCHOPresetwait = b})
beatCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
beatCHOPscope = lens _beatCHOPscope (\a b -> a {_beatCHOPscope = b})
beatCHOPramp :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPramp = lens _beatCHOPramp (\a b -> a {_beatCHOPramp = b})
beatCHOPbeat :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPbeat = lens _beatCHOPbeat (\a b -> a {_beatCHOPbeat = b})
beatCHOPsixteenths :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPsixteenths = lens _beatCHOPsixteenths (\a b -> a {_beatCHOPsixteenths = b})
beatCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
beatCHOPexporttable = lens _beatCHOPexporttable (\a b -> a {_beatCHOPexporttable = b})
beatCHOPmultiples :: Lens' CHOP (Maybe (Tree Int))
beatCHOPmultiples = lens _beatCHOPmultiples (\a b -> a {_beatCHOPmultiples = b})
beatCHOPcountramp :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPcountramp = lens _beatCHOPcountramp (\a b -> a {_beatCHOPcountramp = b})
beatCHOPrandseed :: Lens' CHOP (Maybe (Tree Float))
beatCHOPrandseed = lens _beatCHOPrandseed (\a b -> a {_beatCHOPrandseed = b})
beatCHOPsetperiod :: Lens' CHOP (Maybe (Tree Int))
beatCHOPsetperiod = lens _beatCHOPsetperiod (\a b -> a {_beatCHOPsetperiod = b})
beatCHOPshiftoffset :: Lens' CHOP (Maybe (Tree Float))
beatCHOPshiftoffset = lens _beatCHOPshiftoffset (\a b -> a {_beatCHOPshiftoffset = b})
beatCHOPresetcondition :: Lens' CHOP (Maybe (Tree Int))
beatCHOPresetcondition = lens _beatCHOPresetcondition (\a b -> a {_beatCHOPresetcondition = b})
beatCHOPupdateglobal :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPupdateglobal = lens _beatCHOPupdateglobal (\a b -> a {_beatCHOPupdateglobal = b})
beatCHOPcount :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPcount = lens _beatCHOPcount (\a b -> a {_beatCHOPcount = b})
beatCHOPrampbeat :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPrampbeat = lens _beatCHOPrampbeat (\a b -> a {_beatCHOPrampbeat = b})
beatCHOPperiod :: Lens' CHOP (Maybe (Tree Float))
beatCHOPperiod = lens _beatCHOPperiod (\a b -> a {_beatCHOPperiod = b})
beatCHOPshiftstep :: Lens' CHOP (Maybe (Tree Float))
beatCHOPshiftstep = lens _beatCHOPshiftstep (\a b -> a {_beatCHOPshiftstep = b})
beatCHOPpulse :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPpulse = lens _beatCHOPpulse (\a b -> a {_beatCHOPpulse = b})
beatCHOPbar :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPbar = lens _beatCHOPbar (\a b -> a {_beatCHOPbar = b})
beatCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
beatCHOPsrselect = lens _beatCHOPsrselect (\a b -> a {_beatCHOPsrselect = b})
beatCHOPplaymode :: Lens' CHOP (Maybe (Tree Int))
beatCHOPplaymode = lens _beatCHOPplaymode (\a b -> a {_beatCHOPplaymode = b})
beatCHOPrampbar :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPrampbar = lens _beatCHOPrampbar (\a b -> a {_beatCHOPrampbar = b})
beatCHOPreftimeslice :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPreftimeslice = lens _beatCHOPreftimeslice (\a b -> a {_beatCHOPreftimeslice = b})
beatCHOPsine :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPsine = lens _beatCHOPsine (\a b -> a {_beatCHOPsine = b})
beatCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPtimeslice = lens _beatCHOPtimeslice (\a b -> a {_beatCHOPtimeslice = b})
beatCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
beatCHOPreset = lens _beatCHOPreset (\a b -> a {_beatCHOPreset = b})

ltcoutCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
ltcoutCHOPresetpulse = lens _ltcoutCHOPresetpulse (\a b -> a {_ltcoutCHOPresetpulse = b})
ltcoutCHOPaudiorate :: Lens' CHOP (Maybe (Tree Float))
ltcoutCHOPaudiorate = lens _ltcoutCHOPaudiorate (\a b -> a {_ltcoutCHOPaudiorate = b})
ltcoutCHOPhour :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPhour = lens _ltcoutCHOPhour (\a b -> a {_ltcoutCHOPhour = b})
ltcoutCHOPuser8 :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPuser8 = lens _ltcoutCHOPuser8 (\a b -> a {_ltcoutCHOPuser8 = b})
ltcoutCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPexportmethod = lens _ltcoutCHOPexportmethod (\a b -> a {_ltcoutCHOPexportmethod = b})
ltcoutCHOPuser4 :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPuser4 = lens _ltcoutCHOPuser4 (\a b -> a {_ltcoutCHOPuser4 = b})
ltcoutCHOPuser7 :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPuser7 = lens _ltcoutCHOPuser7 (\a b -> a {_ltcoutCHOPuser7 = b})
ltcoutCHOPframerate :: Lens' CHOP (Maybe (Tree Float))
ltcoutCHOPframerate = lens _ltcoutCHOPframerate (\a b -> a {_ltcoutCHOPframerate = b})
ltcoutCHOPsecond :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPsecond = lens _ltcoutCHOPsecond (\a b -> a {_ltcoutCHOPsecond = b})
ltcoutCHOPframe :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPframe = lens _ltcoutCHOPframe (\a b -> a {_ltcoutCHOPframe = b})
ltcoutCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
ltcoutCHOPexporttable = lens _ltcoutCHOPexporttable (\a b -> a {_ltcoutCHOPexporttable = b})
ltcoutCHOPdropframe :: Lens' CHOP (Maybe (Tree Bool))
ltcoutCHOPdropframe = lens _ltcoutCHOPdropframe (\a b -> a {_ltcoutCHOPdropframe = b})
ltcoutCHOPuser2 :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPuser2 = lens _ltcoutCHOPuser2 (\a b -> a {_ltcoutCHOPuser2 = b})
ltcoutCHOPuser5 :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPuser5 = lens _ltcoutCHOPuser5 (\a b -> a {_ltcoutCHOPuser5 = b})
ltcoutCHOPuser1 :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPuser1 = lens _ltcoutCHOPuser1 (\a b -> a {_ltcoutCHOPuser1 = b})
ltcoutCHOPminute :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPminute = lens _ltcoutCHOPminute (\a b -> a {_ltcoutCHOPminute = b})
ltcoutCHOPfielduser :: Lens' CHOP (Maybe (Tree Bool))
ltcoutCHOPfielduser = lens _ltcoutCHOPfielduser (\a b -> a {_ltcoutCHOPfielduser = b})
ltcoutCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
ltcoutCHOPscope = lens _ltcoutCHOPscope (\a b -> a {_ltcoutCHOPscope = b})
ltcoutCHOPplay :: Lens' CHOP (Maybe (Tree Bool))
ltcoutCHOPplay = lens _ltcoutCHOPplay (\a b -> a {_ltcoutCHOPplay = b})
ltcoutCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPsrselect = lens _ltcoutCHOPsrselect (\a b -> a {_ltcoutCHOPsrselect = b})
ltcoutCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
ltcoutCHOPreset = lens _ltcoutCHOPreset (\a b -> a {_ltcoutCHOPreset = b})
ltcoutCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
ltcoutCHOPtimeslice = lens _ltcoutCHOPtimeslice (\a b -> a {_ltcoutCHOPtimeslice = b})
ltcoutCHOPuser6 :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPuser6 = lens _ltcoutCHOPuser6 (\a b -> a {_ltcoutCHOPuser6 = b})
ltcoutCHOPuser3 :: Lens' CHOP (Maybe (Tree Int))
ltcoutCHOPuser3 = lens _ltcoutCHOPuser3 (\a b -> a {_ltcoutCHOPuser3 = b})

touchoutCHOPmaxsize :: Lens' CHOP (Maybe (Tree Float))
touchoutCHOPmaxsize = lens _touchoutCHOPmaxsize (\a b -> a {_touchoutCHOPmaxsize = b})
touchoutCHOPcookalways :: Lens' CHOP (Maybe (Tree Bool))
touchoutCHOPcookalways = lens _touchoutCHOPcookalways (\a b -> a {_touchoutCHOPcookalways = b})
touchoutCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
touchoutCHOPactive = lens _touchoutCHOPactive (\a b -> a {_touchoutCHOPactive = b})
touchoutCHOPmaxsizeunit :: Lens' CHOP (Maybe (Tree Int))
touchoutCHOPmaxsizeunit = lens _touchoutCHOPmaxsizeunit (\a b -> a {_touchoutCHOPmaxsizeunit = b})
touchoutCHOPresendnames :: Lens' CHOP (Maybe (Tree Bool))
touchoutCHOPresendnames = lens _touchoutCHOPresendnames (\a b -> a {_touchoutCHOPresendnames = b})
touchoutCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
touchoutCHOPexporttable = lens _touchoutCHOPexporttable (\a b -> a {_touchoutCHOPexporttable = b})
touchoutCHOPsyncports :: Lens' CHOP (Maybe (Tree Int))
touchoutCHOPsyncports = lens _touchoutCHOPsyncports (\a b -> a {_touchoutCHOPsyncports = b})
touchoutCHOPaddress :: Lens' CHOP (Maybe (Tree ByteString))
touchoutCHOPaddress = lens _touchoutCHOPaddress (\a b -> a {_touchoutCHOPaddress = b})
touchoutCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
touchoutCHOPscope = lens _touchoutCHOPscope (\a b -> a {_touchoutCHOPscope = b})
touchoutCHOPprotocol :: Lens' CHOP (Maybe (Tree Int))
touchoutCHOPprotocol = lens _touchoutCHOPprotocol (\a b -> a {_touchoutCHOPprotocol = b})
touchoutCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
touchoutCHOPsrselect = lens _touchoutCHOPsrselect (\a b -> a {_touchoutCHOPsrselect = b})
touchoutCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
touchoutCHOPexportmethod = lens _touchoutCHOPexportmethod (\a b -> a {_touchoutCHOPexportmethod = b})
touchoutCHOPport :: Lens' CHOP (Maybe (Tree Int))
touchoutCHOPport = lens _touchoutCHOPport (\a b -> a {_touchoutCHOPport = b})
touchoutCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
touchoutCHOPtimeslice = lens _touchoutCHOPtimeslice (\a b -> a {_touchoutCHOPtimeslice = b})

nullCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
nullCHOPexportmethod = lens _nullCHOPexportmethod (\a b -> a {_nullCHOPexportmethod = b})
nullCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
nullCHOPsrselect = lens _nullCHOPsrselect (\a b -> a {_nullCHOPsrselect = b})
nullCHOPcheckrange :: Lens' CHOP (Maybe (Tree Bool))
nullCHOPcheckrange = lens _nullCHOPcheckrange (\a b -> a {_nullCHOPcheckrange = b})
nullCHOPchecknames :: Lens' CHOP (Maybe (Tree Bool))
nullCHOPchecknames = lens _nullCHOPchecknames (\a b -> a {_nullCHOPchecknames = b})
nullCHOPcooktype :: Lens' CHOP (Maybe (Tree Int))
nullCHOPcooktype = lens _nullCHOPcooktype (\a b -> a {_nullCHOPcooktype = b})
nullCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
nullCHOPtimeslice = lens _nullCHOPtimeslice (\a b -> a {_nullCHOPtimeslice = b})
nullCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
nullCHOPscope = lens _nullCHOPscope (\a b -> a {_nullCHOPscope = b})
nullCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
nullCHOPexporttable = lens _nullCHOPexporttable (\a b -> a {_nullCHOPexporttable = b})
nullCHOPcheckvalues :: Lens' CHOP (Maybe (Tree Bool))
nullCHOPcheckvalues = lens _nullCHOPcheckvalues (\a b -> a {_nullCHOPcheckvalues = b})

recordCHOPinterp :: Lens' CHOP (Maybe (Tree Int))
recordCHOPinterp = lens _recordCHOPinterp (\a b -> a {_recordCHOPinterp = b})
recordCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
recordCHOPexportmethod = lens _recordCHOPexportmethod (\a b -> a {_recordCHOPexportmethod = b})
recordCHOPsegment1 :: Lens' CHOP (Maybe (Tree Float))
recordCHOPsegment1 = lens _recordCHOPsegment1 (\a b -> a {_recordCHOPsegment1 = b})
recordCHOPoutput :: Lens' CHOP (Maybe (Tree Int))
recordCHOPoutput = lens _recordCHOPoutput (\a b -> a {_recordCHOPoutput = b})
recordCHOPsegmentunit :: Lens' CHOP (Maybe (Tree Int))
recordCHOPsegmentunit = lens _recordCHOPsegmentunit (\a b -> a {_recordCHOPsegmentunit = b})
recordCHOPresetcondition :: Lens' CHOP (Maybe (Tree Int))
recordCHOPresetcondition = lens _recordCHOPresetcondition (\a b -> a {_recordCHOPresetcondition = b})
recordCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
recordCHOPexporttable = lens _recordCHOPexporttable (\a b -> a {_recordCHOPexporttable = b})
recordCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
recordCHOPscope = lens _recordCHOPscope (\a b -> a {_recordCHOPscope = b})
recordCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
recordCHOPsrselect = lens _recordCHOPsrselect (\a b -> a {_recordCHOPsrselect = b})
recordCHOPrecord :: Lens' CHOP (Maybe (Tree Int))
recordCHOPrecord = lens _recordCHOPrecord (\a b -> a {_recordCHOPrecord = b})
recordCHOPsample :: Lens' CHOP (Maybe (Tree Int))
recordCHOPsample = lens _recordCHOPsample (\a b -> a {_recordCHOPsample = b})
recordCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
recordCHOPtimeslice = lens _recordCHOPtimeslice (\a b -> a {_recordCHOPtimeslice = b})
recordCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
recordCHOPreset = lens _recordCHOPreset (\a b -> a {_recordCHOPreset = b})
recordCHOPsegment2 :: Lens' CHOP (Maybe (Tree Float))
recordCHOPsegment2 = lens _recordCHOPsegment2 (\a b -> a {_recordCHOPsegment2 = b})

attributeCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
attributeCHOPexportmethod = lens _attributeCHOPexportmethod (\a b -> a {_attributeCHOPexportmethod = b})
attributeCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
attributeCHOPsrselect = lens _attributeCHOPsrselect (\a b -> a {_attributeCHOPsrselect = b})
attributeCHOPrord :: Lens' CHOP (Maybe (Tree Int))
attributeCHOPrord = lens _attributeCHOPrord (\a b -> a {_attributeCHOPrord = b})
attributeCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
attributeCHOPexporttable = lens _attributeCHOPexporttable (\a b -> a {_attributeCHOPexporttable = b})
attributeCHOPslerp :: Lens' CHOP (Maybe (Tree Int))
attributeCHOPslerp = lens _attributeCHOPslerp (\a b -> a {_attributeCHOPslerp = b})
attributeCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
attributeCHOPtimeslice = lens _attributeCHOPtimeslice (\a b -> a {_attributeCHOPtimeslice = b})
attributeCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
attributeCHOPscope = lens _attributeCHOPscope (\a b -> a {_attributeCHOPscope = b})

fanCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
fanCHOPexportmethod = lens _fanCHOPexportmethod (\a b -> a {_fanCHOPexportmethod = b})
fanCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
fanCHOPexporttable = lens _fanCHOPexporttable (\a b -> a {_fanCHOPexporttable = b})
fanCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
fanCHOPsrselect = lens _fanCHOPsrselect (\a b -> a {_fanCHOPsrselect = b})
fanCHOPquantize :: Lens' CHOP (Maybe (Tree Bool))
fanCHOPquantize = lens _fanCHOPquantize (\a b -> a {_fanCHOPquantize = b})
fanCHOPfanop :: Lens' CHOP (Maybe (Tree Int))
fanCHOPfanop = lens _fanCHOPfanop (\a b -> a {_fanCHOPfanop = b})
fanCHOPrange :: Lens' CHOP (Maybe (Tree Int))
fanCHOPrange = lens _fanCHOPrange (\a b -> a {_fanCHOPrange = b})
fanCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
fanCHOPtimeslice = lens _fanCHOPtimeslice (\a b -> a {_fanCHOPtimeslice = b})
fanCHOPchanname :: Lens' CHOP (Maybe (Tree ByteString))
fanCHOPchanname = lens _fanCHOPchanname (\a b -> a {_fanCHOPchanname = b})
fanCHOPalloff :: Lens' CHOP (Maybe (Tree Int))
fanCHOPalloff = lens _fanCHOPalloff (\a b -> a {_fanCHOPalloff = b})
fanCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
fanCHOPscope = lens _fanCHOPscope (\a b -> a {_fanCHOPscope = b})

crossCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
crossCHOPexportmethod = lens _crossCHOPexportmethod (\a b -> a {_crossCHOPexportmethod = b})
crossCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
crossCHOPsrselect = lens _crossCHOPsrselect (\a b -> a {_crossCHOPsrselect = b})
crossCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
crossCHOPexporttable = lens _crossCHOPexporttable (\a b -> a {_crossCHOPexporttable = b})
crossCHOPcross :: Lens' CHOP (Maybe (Tree Float))
crossCHOPcross = lens _crossCHOPcross (\a b -> a {_crossCHOPcross = b})
crossCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
crossCHOPtimeslice = lens _crossCHOPtimeslice (\a b -> a {_crossCHOPtimeslice = b})
crossCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
crossCHOPscope = lens _crossCHOPscope (\a b -> a {_crossCHOPscope = b})

posistagenetCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
posistagenetCHOPexportmethod = lens _posistagenetCHOPexportmethod (\a b -> a {_posistagenetCHOPexportmethod = b})
posistagenetCHOPaccel :: Lens' CHOP (Maybe (Tree Bool))
posistagenetCHOPaccel = lens _posistagenetCHOPaccel (\a b -> a {_posistagenetCHOPaccel = b})
posistagenetCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
posistagenetCHOPactive = lens _posistagenetCHOPactive (\a b -> a {_posistagenetCHOPactive = b})
posistagenetCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
posistagenetCHOPexporttable = lens _posistagenetCHOPexporttable (\a b -> a {_posistagenetCHOPexporttable = b})
posistagenetCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
posistagenetCHOPscope = lens _posistagenetCHOPscope (\a b -> a {_posistagenetCHOPscope = b})
posistagenetCHOPnetaddress :: Lens' CHOP (Maybe (Tree ByteString))
posistagenetCHOPnetaddress = lens _posistagenetCHOPnetaddress (\a b -> a {_posistagenetCHOPnetaddress = b})
posistagenetCHOPtargetpos :: Lens' CHOP (Maybe (Tree Bool))
posistagenetCHOPtargetpos = lens _posistagenetCHOPtargetpos (\a b -> a {_posistagenetCHOPtargetpos = b})
posistagenetCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
posistagenetCHOPsrselect = lens _posistagenetCHOPsrselect (\a b -> a {_posistagenetCHOPsrselect = b})
posistagenetCHOPpos :: Lens' CHOP (Maybe (Tree Bool))
posistagenetCHOPpos = lens _posistagenetCHOPpos (\a b -> a {_posistagenetCHOPpos = b})
posistagenetCHOPori :: Lens' CHOP (Maybe (Tree Bool))
posistagenetCHOPori = lens _posistagenetCHOPori (\a b -> a {_posistagenetCHOPori = b})
posistagenetCHOPport :: Lens' CHOP (Maybe (Tree Int))
posistagenetCHOPport = lens _posistagenetCHOPport (\a b -> a {_posistagenetCHOPport = b})
posistagenetCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
posistagenetCHOPtimeslice = lens _posistagenetCHOPtimeslice (\a b -> a {_posistagenetCHOPtimeslice = b})
posistagenetCHOPspeed :: Lens' CHOP (Maybe (Tree Bool))
posistagenetCHOPspeed = lens _posistagenetCHOPspeed (\a b -> a {_posistagenetCHOPspeed = b})
posistagenetCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
posistagenetCHOPreset = lens _posistagenetCHOPreset (\a b -> a {_posistagenetCHOPreset = b})
posistagenetCHOPsamplerate :: Lens' CHOP (Maybe (Tree Int))
posistagenetCHOPsamplerate = lens _posistagenetCHOPsamplerate (\a b -> a {_posistagenetCHOPsamplerate = b})

realsenseCHOPmode :: Lens' CHOP (Maybe (Tree Int))
realsenseCHOPmode = lens _realsenseCHOPmode (\a b -> a {_realsenseCHOPmode = b})
realsenseCHOPsmoothtype :: Lens' CHOP (Maybe (Tree Int))
realsenseCHOPsmoothtype = lens _realsenseCHOPsmoothtype (\a b -> a {_realsenseCHOPsmoothtype = b})
realsenseCHOPfist :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPfist = lens _realsenseCHOPfist (\a b -> a {_realsenseCHOPfist = b})
realsenseCHOPhandsrotation :: Lens' CHOP (Maybe (Tree Int))
realsenseCHOPhandsrotation = lens _realsenseCHOPhandsrotation (\a b -> a {_realsenseCHOPhandsrotation = b})
realsenseCHOPclick :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPclick = lens _realsenseCHOPclick (\a b -> a {_realsenseCHOPclick = b})
realsenseCHOPpersonscolorbounds :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPpersonscolorbounds = lens _realsenseCHOPpersonscolorbounds (\a b -> a {_realsenseCHOPpersonscolorbounds = b})
realsenseCHOPsmoothing :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPsmoothing = lens _realsenseCHOPsmoothing (\a b -> a {_realsenseCHOPsmoothing = b})
realsenseCHOPmarkertop :: Lens' CHOP (Maybe (Tree TOP))
realsenseCHOPmarkertop = lens _realsenseCHOPmarkertop (\a b -> a {_realsenseCHOPmarkertop = b})
realsenseCHOPsmoothrad :: Lens' CHOP (Maybe (Tree Float))
realsenseCHOPsmoothrad = lens _realsenseCHOPsmoothrad (\a b -> a {_realsenseCHOPsmoothrad = b})
realsenseCHOPsmoothstrength :: Lens' CHOP (Maybe (Tree Float))
realsenseCHOPsmoothstrength = lens _realsenseCHOPsmoothstrength (\a b -> a {_realsenseCHOPsmoothstrength = b})
realsenseCHOPfullpinch :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPfullpinch = lens _realsenseCHOPfullpinch (\a b -> a {_realsenseCHOPfullpinch = b})
realsenseCHOPswipe :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPswipe = lens _realsenseCHOPswipe (\a b -> a {_realsenseCHOPswipe = b})
realsenseCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
realsenseCHOPexportmethod = lens _realsenseCHOPexportmethod (\a b -> a {_realsenseCHOPexportmethod = b})
realsenseCHOPtap :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPtap = lens _realsenseCHOPtap (\a b -> a {_realsenseCHOPtap = b})
realsenseCHOPhandscolorpos :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPhandscolorpos = lens _realsenseCHOPhandscolorpos (\a b -> a {_realsenseCHOPhandscolorpos = b})
realsenseCHOPweights :: Lens' CHOP (Maybe (Tree Int))
realsenseCHOPweights = lens _realsenseCHOPweights (\a b -> a {_realsenseCHOPweights = b})
realsenseCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPactive = lens _realsenseCHOPactive (\a b -> a {_realsenseCHOPactive = b})
realsenseCHOPfaceexpressions :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPfaceexpressions = lens _realsenseCHOPfaceexpressions (\a b -> a {_realsenseCHOPfaceexpressions = b})
realsenseCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
realsenseCHOPexporttable = lens _realsenseCHOPexporttable (\a b -> a {_realsenseCHOPexporttable = b})
realsenseCHOPmaxperson :: Lens' CHOP (Maybe (Tree Int))
realsenseCHOPmaxperson = lens _realsenseCHOPmaxperson (\a b -> a {_realsenseCHOPmaxperson = b})
realsenseCHOPfacelandmarkscolor :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPfacelandmarkscolor = lens _realsenseCHOPfacelandmarkscolor (\a b -> a {_realsenseCHOPfacelandmarkscolor = b})
realsenseCHOPpersonsworldcenterpos :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPpersonsworldcenterpos = lens _realsenseCHOPpersonsworldcenterpos (\a b -> a {_realsenseCHOPpersonsworldcenterpos = b})
realsenseCHOPseparatehands :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPseparatehands = lens _realsenseCHOPseparatehands (\a b -> a {_realsenseCHOPseparatehands = b})
realsenseCHOPsensor :: Lens' CHOP (Maybe (Tree ByteString))
realsenseCHOPsensor = lens _realsenseCHOPsensor (\a b -> a {_realsenseCHOPsensor = b})
realsenseCHOPfacebounds :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPfacebounds = lens _realsenseCHOPfacebounds (\a b -> a {_realsenseCHOPfacebounds = b})
realsenseCHOPpersonsskelcolorpos :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPpersonsskelcolorpos = lens _realsenseCHOPpersonsskelcolorpos (\a b -> a {_realsenseCHOPpersonsskelcolorpos = b})
realsenseCHOPfaceworldpos :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPfaceworldpos = lens _realsenseCHOPfaceworldpos (\a b -> a {_realsenseCHOPfaceworldpos = b})
realsenseCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPtimeslice = lens _realsenseCHOPtimeslice (\a b -> a {_realsenseCHOPtimeslice = b})
realsenseCHOPhandsworldpos :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPhandsworldpos = lens _realsenseCHOPhandsworldpos (\a b -> a {_realsenseCHOPhandsworldpos = b})
realsenseCHOPpersonscolorcenterpos :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPpersonscolorcenterpos = lens _realsenseCHOPpersonscolorcenterpos (\a b -> a {_realsenseCHOPpersonscolorcenterpos = b})
realsenseCHOPfacelandmarksworld :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPfacelandmarksworld = lens _realsenseCHOPfacelandmarksworld (\a b -> a {_realsenseCHOPfacelandmarksworld = b})
realsenseCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
realsenseCHOPscope = lens _realsenseCHOPscope (\a b -> a {_realsenseCHOPscope = b})
realsenseCHOPthumbs :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPthumbs = lens _realsenseCHOPthumbs (\a b -> a {_realsenseCHOPthumbs = b})
realsenseCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
realsenseCHOPsrselect = lens _realsenseCHOPsrselect (\a b -> a {_realsenseCHOPsrselect = b})
realsenseCHOPvsign :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPvsign = lens _realsenseCHOPvsign (\a b -> a {_realsenseCHOPvsign = b})
realsenseCHOPwave :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPwave = lens _realsenseCHOPwave (\a b -> a {_realsenseCHOPwave = b})
realsenseCHOPmodel :: Lens' CHOP (Maybe (Tree Int))
realsenseCHOPmodel = lens _realsenseCHOPmodel (\a b -> a {_realsenseCHOPmodel = b})
realsenseCHOPtwofingerpinch :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPtwofingerpinch = lens _realsenseCHOPtwofingerpinch (\a b -> a {_realsenseCHOPtwofingerpinch = b})
realsenseCHOPspreadfingers :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPspreadfingers = lens _realsenseCHOPspreadfingers (\a b -> a {_realsenseCHOPspreadfingers = b})
realsenseCHOPfacerotation :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPfacerotation = lens _realsenseCHOPfacerotation (\a b -> a {_realsenseCHOPfacerotation = b})
realsenseCHOPpersonsskelworldpos :: Lens' CHOP (Maybe (Tree Bool))
realsenseCHOPpersonsskelworldpos = lens _realsenseCHOPpersonsskelworldpos (\a b -> a {_realsenseCHOPpersonsskelworldpos = b})

slopeCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
slopeCHOPexportmethod = lens _slopeCHOPexportmethod (\a b -> a {_slopeCHOPexportmethod = b})
slopeCHOPtype :: Lens' CHOP (Maybe (Tree Int))
slopeCHOPtype = lens _slopeCHOPtype (\a b -> a {_slopeCHOPtype = b})
slopeCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
slopeCHOPsrselect = lens _slopeCHOPsrselect (\a b -> a {_slopeCHOPsrselect = b})
slopeCHOPmethod :: Lens' CHOP (Maybe (Tree Int))
slopeCHOPmethod = lens _slopeCHOPmethod (\a b -> a {_slopeCHOPmethod = b})
slopeCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
slopeCHOPtimeslice = lens _slopeCHOPtimeslice (\a b -> a {_slopeCHOPtimeslice = b})
slopeCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
slopeCHOPscope = lens _slopeCHOPscope (\a b -> a {_slopeCHOPscope = b})
slopeCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
slopeCHOPexporttable = lens _slopeCHOPexporttable (\a b -> a {_slopeCHOPexporttable = b})

mouseoutCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
mouseoutCHOPexportmethod = lens _mouseoutCHOPexportmethod (\a b -> a {_mouseoutCHOPexportmethod = b})
mouseoutCHOPcookalways :: Lens' CHOP (Maybe (Tree Bool))
mouseoutCHOPcookalways = lens _mouseoutCHOPcookalways (\a b -> a {_mouseoutCHOPcookalways = b})
mouseoutCHOPmbuttonname :: Lens' CHOP (Maybe (Tree ByteString))
mouseoutCHOPmbuttonname = lens _mouseoutCHOPmbuttonname (\a b -> a {_mouseoutCHOPmbuttonname = b})
mouseoutCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
mouseoutCHOPtimeslice = lens _mouseoutCHOPtimeslice (\a b -> a {_mouseoutCHOPtimeslice = b})
mouseoutCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
mouseoutCHOPscope = lens _mouseoutCHOPscope (\a b -> a {_mouseoutCHOPscope = b})
mouseoutCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
mouseoutCHOPexporttable = lens _mouseoutCHOPexporttable (\a b -> a {_mouseoutCHOPexporttable = b})
mouseoutCHOPrbuttonname :: Lens' CHOP (Maybe (Tree ByteString))
mouseoutCHOPrbuttonname = lens _mouseoutCHOPrbuttonname (\a b -> a {_mouseoutCHOPrbuttonname = b})
mouseoutCHOPposu :: Lens' CHOP (Maybe (Tree ByteString))
mouseoutCHOPposu = lens _mouseoutCHOPposu (\a b -> a {_mouseoutCHOPposu = b})
mouseoutCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
mouseoutCHOPsrselect = lens _mouseoutCHOPsrselect (\a b -> a {_mouseoutCHOPsrselect = b})
mouseoutCHOPposv :: Lens' CHOP (Maybe (Tree ByteString))
mouseoutCHOPposv = lens _mouseoutCHOPposv (\a b -> a {_mouseoutCHOPposv = b})
mouseoutCHOPlbuttonname :: Lens' CHOP (Maybe (Tree ByteString))
mouseoutCHOPlbuttonname = lens _mouseoutCHOPlbuttonname (\a b -> a {_mouseoutCHOPlbuttonname = b})

limitCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
limitCHOPexportmethod = lens _limitCHOPexportmethod (\a b -> a {_limitCHOPexportmethod = b})
limitCHOPtype :: Lens' CHOP (Maybe (Tree Int))
limitCHOPtype = lens _limitCHOPtype (\a b -> a {_limitCHOPtype = b})
limitCHOPioffsetunit :: Lens' CHOP (Maybe (Tree Int))
limitCHOPioffsetunit = lens _limitCHOPioffsetunit (\a b -> a {_limitCHOPioffsetunit = b})
limitCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
limitCHOPtimeslice = lens _limitCHOPtimeslice (\a b -> a {_limitCHOPtimeslice = b})
limitCHOPioffset :: Lens' CHOP (Maybe (Tree Float))
limitCHOPioffset = lens _limitCHOPioffset (\a b -> a {_limitCHOPioffset = b})
limitCHOPmin :: Lens' CHOP (Maybe (Tree Float))
limitCHOPmin = lens _limitCHOPmin (\a b -> a {_limitCHOPmin = b})
limitCHOPnorm :: Lens' CHOP (Maybe (Tree Bool))
limitCHOPnorm = lens _limitCHOPnorm (\a b -> a {_limitCHOPnorm = b})
limitCHOPunderflow :: Lens' CHOP (Maybe (Tree Bool))
limitCHOPunderflow = lens _limitCHOPunderflow (\a b -> a {_limitCHOPunderflow = b})
limitCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
limitCHOPscope = lens _limitCHOPscope (\a b -> a {_limitCHOPscope = b})
limitCHOPvstep :: Lens' CHOP (Maybe (Tree Float))
limitCHOPvstep = lens _limitCHOPvstep (\a b -> a {_limitCHOPvstep = b})
limitCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
limitCHOPexporttable = lens _limitCHOPexporttable (\a b -> a {_limitCHOPexporttable = b})
limitCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
limitCHOPsrselect = lens _limitCHOPsrselect (\a b -> a {_limitCHOPsrselect = b})
limitCHOPvoffset :: Lens' CHOP (Maybe (Tree Float))
limitCHOPvoffset = lens _limitCHOPvoffset (\a b -> a {_limitCHOPvoffset = b})
limitCHOPistep :: Lens' CHOP (Maybe (Tree Float))
limitCHOPistep = lens _limitCHOPistep (\a b -> a {_limitCHOPistep = b})
limitCHOPquantvalue :: Lens' CHOP (Maybe (Tree Int))
limitCHOPquantvalue = lens _limitCHOPquantvalue (\a b -> a {_limitCHOPquantvalue = b})
limitCHOPistepunit :: Lens' CHOP (Maybe (Tree Int))
limitCHOPistepunit = lens _limitCHOPistepunit (\a b -> a {_limitCHOPistepunit = b})
limitCHOPpositive :: Lens' CHOP (Maybe (Tree Bool))
limitCHOPpositive = lens _limitCHOPpositive (\a b -> a {_limitCHOPpositive = b})
limitCHOPquantindex :: Lens' CHOP (Maybe (Tree Int))
limitCHOPquantindex = lens _limitCHOPquantindex (\a b -> a {_limitCHOPquantindex = b})
limitCHOPmax :: Lens' CHOP (Maybe (Tree Float))
limitCHOPmax = lens _limitCHOPmax (\a b -> a {_limitCHOPmax = b})

envelopeCHOPinterp :: Lens' CHOP (Maybe (Tree Int))
envelopeCHOPinterp = lens _envelopeCHOPinterp (\a b -> a {_envelopeCHOPinterp = b})
envelopeCHOPresample :: Lens' CHOP (Maybe (Tree Bool))
envelopeCHOPresample = lens _envelopeCHOPresample (\a b -> a {_envelopeCHOPresample = b})
envelopeCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
envelopeCHOPexportmethod = lens _envelopeCHOPexportmethod (\a b -> a {_envelopeCHOPexportmethod = b})
envelopeCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
envelopeCHOPexporttable = lens _envelopeCHOPexporttable (\a b -> a {_envelopeCHOPexporttable = b})
envelopeCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
envelopeCHOPscope = lens _envelopeCHOPscope (\a b -> a {_envelopeCHOPscope = b})
envelopeCHOPnorm :: Lens' CHOP (Maybe (Tree Bool))
envelopeCHOPnorm = lens _envelopeCHOPnorm (\a b -> a {_envelopeCHOPnorm = b})
envelopeCHOPwidth :: Lens' CHOP (Maybe (Tree Float))
envelopeCHOPwidth = lens _envelopeCHOPwidth (\a b -> a {_envelopeCHOPwidth = b})
envelopeCHOPwidthunit :: Lens' CHOP (Maybe (Tree Int))
envelopeCHOPwidthunit = lens _envelopeCHOPwidthunit (\a b -> a {_envelopeCHOPwidthunit = b})
envelopeCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
envelopeCHOPsrselect = lens _envelopeCHOPsrselect (\a b -> a {_envelopeCHOPsrselect = b})
envelopeCHOPmethod :: Lens' CHOP (Maybe (Tree Int))
envelopeCHOPmethod = lens _envelopeCHOPmethod (\a b -> a {_envelopeCHOPmethod = b})
envelopeCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
envelopeCHOPtimeslice = lens _envelopeCHOPtimeslice (\a b -> a {_envelopeCHOPtimeslice = b})
envelopeCHOPbounds :: Lens' CHOP (Maybe (Tree Int))
envelopeCHOPbounds = lens _envelopeCHOPbounds (\a b -> a {_envelopeCHOPbounds = b})
envelopeCHOPsamplerate :: Lens' CHOP (Maybe (Tree Float))
envelopeCHOPsamplerate = lens _envelopeCHOPsamplerate (\a b -> a {_envelopeCHOPsamplerate = b})

pipeoutCHOPmode :: Lens' CHOP (Maybe (Tree Int))
pipeoutCHOPmode = lens _pipeoutCHOPmode (\a b -> a {_pipeoutCHOPmode = b})
pipeoutCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
pipeoutCHOPexportmethod = lens _pipeoutCHOPexportmethod (\a b -> a {_pipeoutCHOPexportmethod = b})
pipeoutCHOPsendinput :: Lens' CHOP (Maybe (Tree Bool))
pipeoutCHOPsendinput = lens _pipeoutCHOPsendinput (\a b -> a {_pipeoutCHOPsendinput = b})
pipeoutCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
pipeoutCHOPactive = lens _pipeoutCHOPactive (\a b -> a {_pipeoutCHOPactive = b})
pipeoutCHOPecho :: Lens' CHOP (Maybe (Tree Bool))
pipeoutCHOPecho = lens _pipeoutCHOPecho (\a b -> a {_pipeoutCHOPecho = b})
pipeoutCHOPaddress :: Lens' CHOP (Maybe (Tree ByteString))
pipeoutCHOPaddress = lens _pipeoutCHOPaddress (\a b -> a {_pipeoutCHOPaddress = b})
pipeoutCHOPscript :: Lens' CHOP (Maybe (Tree ByteString))
pipeoutCHOPscript = lens _pipeoutCHOPscript (\a b -> a {_pipeoutCHOPscript = b})
pipeoutCHOPsendsingle :: Lens' CHOP (Maybe (Tree Bool))
pipeoutCHOPsendsingle = lens _pipeoutCHOPsendsingle (\a b -> a {_pipeoutCHOPsendsingle = b})
pipeoutCHOPpulse :: Lens' CHOP (Maybe (Tree Bool))
pipeoutCHOPpulse = lens _pipeoutCHOPpulse (\a b -> a {_pipeoutCHOPpulse = b})
pipeoutCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
pipeoutCHOPexporttable = lens _pipeoutCHOPexporttable (\a b -> a {_pipeoutCHOPexporttable = b})
pipeoutCHOPsample :: Lens' CHOP (Maybe (Tree Int))
pipeoutCHOPsample = lens _pipeoutCHOPsample (\a b -> a {_pipeoutCHOPsample = b})
pipeoutCHOPcallbacks :: Lens' CHOP (Maybe (Tree DAT))
pipeoutCHOPcallbacks = lens _pipeoutCHOPcallbacks (\a b -> a {_pipeoutCHOPcallbacks = b})
pipeoutCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
pipeoutCHOPsrselect = lens _pipeoutCHOPsrselect (\a b -> a {_pipeoutCHOPsrselect = b})
pipeoutCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
pipeoutCHOPscope = lens _pipeoutCHOPscope (\a b -> a {_pipeoutCHOPscope = b})
pipeoutCHOPsendscript :: Lens' CHOP (Maybe (Tree Bool))
pipeoutCHOPsendscript = lens _pipeoutCHOPsendscript (\a b -> a {_pipeoutCHOPsendscript = b})
pipeoutCHOPcookalways :: Lens' CHOP (Maybe (Tree Bool))
pipeoutCHOPcookalways = lens _pipeoutCHOPcookalways (\a b -> a {_pipeoutCHOPcookalways = b})
pipeoutCHOPport :: Lens' CHOP (Maybe (Tree Int))
pipeoutCHOPport = lens _pipeoutCHOPport (\a b -> a {_pipeoutCHOPport = b})
pipeoutCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
pipeoutCHOPtimeslice = lens _pipeoutCHOPtimeslice (\a b -> a {_pipeoutCHOPtimeslice = b})
pipeoutCHOPupload :: Lens' CHOP (Maybe (Tree Bool))
pipeoutCHOPupload = lens _pipeoutCHOPupload (\a b -> a {_pipeoutCHOPupload = b})

leapmotionCHOPdebugchannels :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPdebugchannels = lens _leapmotionCHOPdebugchannels (\a b -> a {_leapmotionCHOPdebugchannels = b})
leapmotionCHOPfingerrotation :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPfingerrotation = lens _leapmotionCHOPfingerrotation (\a b -> a {_leapmotionCHOPfingerrotation = b})
leapmotionCHOPhands :: Lens' CHOP (Maybe (Tree Int))
leapmotionCHOPhands = lens _leapmotionCHOPhands (\a b -> a {_leapmotionCHOPhands = b})
leapmotionCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPactive = lens _leapmotionCHOPactive (\a b -> a {_leapmotionCHOPactive = b})
leapmotionCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
leapmotionCHOPexportmethod = lens _leapmotionCHOPexportmethod (\a b -> a {_leapmotionCHOPexportmethod = b})
leapmotionCHOPkeytapgestures :: Lens' CHOP (Maybe (Tree Int))
leapmotionCHOPkeytapgestures = lens _leapmotionCHOPkeytapgestures (\a b -> a {_leapmotionCHOPkeytapgestures = b})
leapmotionCHOPpinchstrength :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPpinchstrength = lens _leapmotionCHOPpinchstrength (\a b -> a {_leapmotionCHOPpinchstrength = b})
leapmotionCHOPhmd :: Lens' CHOP (Maybe (Tree Int))
leapmotionCHOPhmd = lens _leapmotionCHOPhmd (\a b -> a {_leapmotionCHOPhmd = b})
leapmotionCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
leapmotionCHOPscope = lens _leapmotionCHOPscope (\a b -> a {_leapmotionCHOPscope = b})
leapmotionCHOPnamedfingers :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPnamedfingers = lens _leapmotionCHOPnamedfingers (\a b -> a {_leapmotionCHOPnamedfingers = b})
leapmotionCHOPhandvelocity :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPhandvelocity = lens _leapmotionCHOPhandvelocity (\a b -> a {_leapmotionCHOPhandvelocity = b})
leapmotionCHOPcirclegestures :: Lens' CHOP (Maybe (Tree Int))
leapmotionCHOPcirclegestures = lens _leapmotionCHOPcirclegestures (\a b -> a {_leapmotionCHOPcirclegestures = b})
leapmotionCHOPstatuschannels :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPstatuschannels = lens _leapmotionCHOPstatuschannels (\a b -> a {_leapmotionCHOPstatuschannels = b})
leapmotionCHOPtools :: Lens' CHOP (Maybe (Tree Int))
leapmotionCHOPtools = lens _leapmotionCHOPtools (\a b -> a {_leapmotionCHOPtools = b})
leapmotionCHOPrighthands :: Lens' CHOP (Maybe (Tree Int))
leapmotionCHOPrighthands = lens _leapmotionCHOPrighthands (\a b -> a {_leapmotionCHOPrighthands = b})
leapmotionCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
leapmotionCHOPexporttable = lens _leapmotionCHOPexporttable (\a b -> a {_leapmotionCHOPexporttable = b})
leapmotionCHOPgrabstrength :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPgrabstrength = lens _leapmotionCHOPgrabstrength (\a b -> a {_leapmotionCHOPgrabstrength = b})
leapmotionCHOPfingerextended :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPfingerextended = lens _leapmotionCHOPfingerextended (\a b -> a {_leapmotionCHOPfingerextended = b})
leapmotionCHOPfingerjoints :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPfingerjoints = lens _leapmotionCHOPfingerjoints (\a b -> a {_leapmotionCHOPfingerjoints = b})
leapmotionCHOPlefthands :: Lens' CHOP (Maybe (Tree Int))
leapmotionCHOPlefthands = lens _leapmotionCHOPlefthands (\a b -> a {_leapmotionCHOPlefthands = b})
leapmotionCHOPnamedhands :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPnamedhands = lens _leapmotionCHOPnamedhands (\a b -> a {_leapmotionCHOPnamedhands = b})
leapmotionCHOPswipegestures :: Lens' CHOP (Maybe (Tree Int))
leapmotionCHOPswipegestures = lens _leapmotionCHOPswipegestures (\a b -> a {_leapmotionCHOPswipegestures = b})
leapmotionCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
leapmotionCHOPsrselect = lens _leapmotionCHOPsrselect (\a b -> a {_leapmotionCHOPsrselect = b})
leapmotionCHOPhandsphere :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPhandsphere = lens _leapmotionCHOPhandsphere (\a b -> a {_leapmotionCHOPhandsphere = b})
leapmotionCHOPscreentapgestures :: Lens' CHOP (Maybe (Tree Int))
leapmotionCHOPscreentapgestures = lens _leapmotionCHOPscreentapgestures (\a b -> a {_leapmotionCHOPscreentapgestures = b})
leapmotionCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPtimeslice = lens _leapmotionCHOPtimeslice (\a b -> a {_leapmotionCHOPtimeslice = b})
leapmotionCHOPfingersize :: Lens' CHOP (Maybe (Tree Bool))
leapmotionCHOPfingersize = lens _leapmotionCHOPfingersize (\a b -> a {_leapmotionCHOPfingersize = b})
leapmotionCHOPfingersperhand :: Lens' CHOP (Maybe (Tree Int))
leapmotionCHOPfingersperhand = lens _leapmotionCHOPfingersperhand (\a b -> a {_leapmotionCHOPfingersperhand = b})

switchCHOPindex :: Lens' CHOP (Maybe (Tree Int))
switchCHOPindex = lens _switchCHOPindex (\a b -> a {_switchCHOPindex = b})
switchCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
switchCHOPsrselect = lens _switchCHOPsrselect (\a b -> a {_switchCHOPsrselect = b})
switchCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
switchCHOPexportmethod = lens _switchCHOPexportmethod (\a b -> a {_switchCHOPexportmethod = b})
switchCHOPindexfirst :: Lens' CHOP (Maybe (Tree Bool))
switchCHOPindexfirst = lens _switchCHOPindexfirst (\a b -> a {_switchCHOPindexfirst = b})
switchCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
switchCHOPexporttable = lens _switchCHOPexporttable (\a b -> a {_switchCHOPexporttable = b})
switchCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
switchCHOPtimeslice = lens _switchCHOPtimeslice (\a b -> a {_switchCHOPtimeslice = b})
switchCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
switchCHOPscope = lens _switchCHOPscope (\a b -> a {_switchCHOPscope = b})

leuzerod4CHOPactive :: Lens' CHOP (Maybe (Tree Bool))
leuzerod4CHOPactive = lens _leuzerod4CHOPactive (\a b -> a {_leuzerod4CHOPactive = b})
leuzerod4CHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
leuzerod4CHOPexportmethod = lens _leuzerod4CHOPexportmethod (\a b -> a {_leuzerod4CHOPexportmethod = b})
leuzerod4CHOPoutputmode :: Lens' CHOP (Maybe (Tree Int))
leuzerod4CHOPoutputmode = lens _leuzerod4CHOPoutputmode (\a b -> a {_leuzerod4CHOPoutputmode = b})
leuzerod4CHOPupperright1 :: Lens' CHOP (Maybe (Tree Float))
leuzerod4CHOPupperright1 = lens _leuzerod4CHOPupperright1 (\a b -> a {_leuzerod4CHOPupperright1 = b})
leuzerod4CHOPupperright2 :: Lens' CHOP (Maybe (Tree Float))
leuzerod4CHOPupperright2 = lens _leuzerod4CHOPupperright2 (\a b -> a {_leuzerod4CHOPupperright2 = b})
leuzerod4CHOPmaxdistance :: Lens' CHOP (Maybe (Tree Float))
leuzerod4CHOPmaxdistance = lens _leuzerod4CHOPmaxdistance (\a b -> a {_leuzerod4CHOPmaxdistance = b})
leuzerod4CHOPmaxblobs :: Lens' CHOP (Maybe (Tree Int))
leuzerod4CHOPmaxblobs = lens _leuzerod4CHOPmaxblobs (\a b -> a {_leuzerod4CHOPmaxblobs = b})
leuzerod4CHOPport :: Lens' CHOP (Maybe (Tree Int))
leuzerod4CHOPport = lens _leuzerod4CHOPport (\a b -> a {_leuzerod4CHOPport = b})
leuzerod4CHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
leuzerod4CHOPexporttable = lens _leuzerod4CHOPexporttable (\a b -> a {_leuzerod4CHOPexporttable = b})
leuzerod4CHOPlowerleft1 :: Lens' CHOP (Maybe (Tree Float))
leuzerod4CHOPlowerleft1 = lens _leuzerod4CHOPlowerleft1 (\a b -> a {_leuzerod4CHOPlowerleft1 = b})
leuzerod4CHOPboundingboxmask :: Lens' CHOP (Maybe (Tree TOP))
leuzerod4CHOPboundingboxmask = lens _leuzerod4CHOPboundingboxmask (\a b -> a {_leuzerod4CHOPboundingboxmask = b})
leuzerod4CHOProd4porotocol :: Lens' CHOP (Maybe (Tree Int))
leuzerod4CHOProd4porotocol = lens _leuzerod4CHOProd4porotocol (\a b -> a {_leuzerod4CHOProd4porotocol = b})
leuzerod4CHOPmaxblobmovement :: Lens' CHOP (Maybe (Tree Float))
leuzerod4CHOPmaxblobmovement = lens _leuzerod4CHOPmaxblobmovement (\a b -> a {_leuzerod4CHOPmaxblobmovement = b})
leuzerod4CHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
leuzerod4CHOPscope = lens _leuzerod4CHOPscope (\a b -> a {_leuzerod4CHOPscope = b})
leuzerod4CHOPmaxpointdistance :: Lens' CHOP (Maybe (Tree Float))
leuzerod4CHOPmaxpointdistance = lens _leuzerod4CHOPmaxpointdistance (\a b -> a {_leuzerod4CHOPmaxpointdistance = b})
leuzerod4CHOProtate :: Lens' CHOP (Maybe (Tree Float))
leuzerod4CHOProtate = lens _leuzerod4CHOProtate (\a b -> a {_leuzerod4CHOProtate = b})
leuzerod4CHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
leuzerod4CHOPsrselect = lens _leuzerod4CHOPsrselect (\a b -> a {_leuzerod4CHOPsrselect = b})
leuzerod4CHOPareaofinterest :: Lens' CHOP (Maybe (Tree Int))
leuzerod4CHOPareaofinterest = lens _leuzerod4CHOPareaofinterest (\a b -> a {_leuzerod4CHOPareaofinterest = b})
leuzerod4CHOPallowmovementoutside :: Lens' CHOP (Maybe (Tree Bool))
leuzerod4CHOPallowmovementoutside = lens _leuzerod4CHOPallowmovementoutside (\a b -> a {_leuzerod4CHOPallowmovementoutside = b})
leuzerod4CHOPlowerleft2 :: Lens' CHOP (Maybe (Tree Float))
leuzerod4CHOPlowerleft2 = lens _leuzerod4CHOPlowerleft2 (\a b -> a {_leuzerod4CHOPlowerleft2 = b})
leuzerod4CHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
leuzerod4CHOPtimeslice = lens _leuzerod4CHOPtimeslice (\a b -> a {_leuzerod4CHOPtimeslice = b})
leuzerod4CHOPnetaddress :: Lens' CHOP (Maybe (Tree ByteString))
leuzerod4CHOPnetaddress = lens _leuzerod4CHOPnetaddress (\a b -> a {_leuzerod4CHOPnetaddress = b})
leuzerod4CHOPinputcoordinate :: Lens' CHOP (Maybe (Tree Int))
leuzerod4CHOPinputcoordinate = lens _leuzerod4CHOPinputcoordinate (\a b -> a {_leuzerod4CHOPinputcoordinate = b})

toptoCHOPinterp :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPinterp = lens _toptoCHOPinterp (\a b -> a {_toptoCHOPinterp = b})
toptoCHOPvend :: Lens' CHOP (Maybe (Tree Float))
toptoCHOPvend = lens _toptoCHOPvend (\a b -> a {_toptoCHOPvend = b})
toptoCHOPdownloadtype :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPdownloadtype = lens _toptoCHOPdownloadtype (\a b -> a {_toptoCHOPdownloadtype = b})
toptoCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPexportmethod = lens _toptoCHOPexportmethod (\a b -> a {_toptoCHOPexportmethod = b})
toptoCHOPcrop :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPcrop = lens _toptoCHOPcrop (\a b -> a {_toptoCHOPcrop = b})
toptoCHOPimageright :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPimageright = lens _toptoCHOPimageright (\a b -> a {_toptoCHOPimageright = b})
toptoCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
toptoCHOPdefval = lens _toptoCHOPdefval (\a b -> a {_toptoCHOPdefval = b})
toptoCHOPvstart :: Lens' CHOP (Maybe (Tree Float))
toptoCHOPvstart = lens _toptoCHOPvstart (\a b -> a {_toptoCHOPvstart = b})
toptoCHOPtop :: Lens' CHOP (Maybe (Tree TOP))
toptoCHOPtop = lens _toptoCHOPtop (\a b -> a {_toptoCHOPtop = b})
toptoCHOPrgbaunit :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPrgbaunit = lens _toptoCHOPrgbaunit (\a b -> a {_toptoCHOPrgbaunit = b})
toptoCHOPuvunits :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPuvunits = lens _toptoCHOPuvunits (\a b -> a {_toptoCHOPuvunits = b})
toptoCHOPstartunit :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPstartunit = lens _toptoCHOPstartunit (\a b -> a {_toptoCHOPstartunit = b})
toptoCHOPr :: Lens' CHOP (Maybe (Tree ByteString))
toptoCHOPr = lens _toptoCHOPr (\a b -> a {_toptoCHOPr = b})
toptoCHOPg :: Lens' CHOP (Maybe (Tree ByteString))
toptoCHOPg = lens _toptoCHOPg (\a b -> a {_toptoCHOPg = b})
toptoCHOPuend :: Lens' CHOP (Maybe (Tree Float))
toptoCHOPuend = lens _toptoCHOPuend (\a b -> a {_toptoCHOPuend = b})
toptoCHOPstart :: Lens' CHOP (Maybe (Tree Float))
toptoCHOPstart = lens _toptoCHOPstart (\a b -> a {_toptoCHOPstart = b})
toptoCHOPleft :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPleft = lens _toptoCHOPleft (\a b -> a {_toptoCHOPleft = b})
toptoCHOPustart :: Lens' CHOP (Maybe (Tree Float))
toptoCHOPustart = lens _toptoCHOPustart (\a b -> a {_toptoCHOPustart = b})
toptoCHOPb :: Lens' CHOP (Maybe (Tree ByteString))
toptoCHOPb = lens _toptoCHOPb (\a b -> a {_toptoCHOPb = b})
toptoCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
toptoCHOPtimeslice = lens _toptoCHOPtimeslice (\a b -> a {_toptoCHOPtimeslice = b})
toptoCHOPrate :: Lens' CHOP (Maybe (Tree Float))
toptoCHOPrate = lens _toptoCHOPrate (\a b -> a {_toptoCHOPrate = b})
toptoCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
toptoCHOPscope = lens _toptoCHOPscope (\a b -> a {_toptoCHOPscope = b})
toptoCHOPa :: Lens' CHOP (Maybe (Tree ByteString))
toptoCHOPa = lens _toptoCHOPa (\a b -> a {_toptoCHOPa = b})
toptoCHOPimageleft :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPimageleft = lens _toptoCHOPimageleft (\a b -> a {_toptoCHOPimageleft = b})
toptoCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPsrselect = lens _toptoCHOPsrselect (\a b -> a {_toptoCHOPsrselect = b})
toptoCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
toptoCHOPexporttable = lens _toptoCHOPexporttable (\a b -> a {_toptoCHOPexporttable = b})
toptoCHOPimagetop :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPimagetop = lens _toptoCHOPimagetop (\a b -> a {_toptoCHOPimagetop = b})
toptoCHOPimagebottom :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPimagebottom = lens _toptoCHOPimagebottom (\a b -> a {_toptoCHOPimagebottom = b})
toptoCHOPdefcolor :: Lens' CHOP (Vec4)
toptoCHOPdefcolor = lens _toptoCHOPdefcolor (\a b -> a {_toptoCHOPdefcolor = b})
toptoCHOPright :: Lens' CHOP (Maybe (Tree Int))
toptoCHOPright = lens _toptoCHOPright (\a b -> a {_toptoCHOPright = b})

abletonlinkCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPactive = lens _abletonlinkCHOPactive (\a b -> a {_abletonlinkCHOPactive = b})
abletonlinkCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
abletonlinkCHOPscope = lens _abletonlinkCHOPscope (\a b -> a {_abletonlinkCHOPscope = b})
abletonlinkCHOPramp :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPramp = lens _abletonlinkCHOPramp (\a b -> a {_abletonlinkCHOPramp = b})
abletonlinkCHOPphase :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPphase = lens _abletonlinkCHOPphase (\a b -> a {_abletonlinkCHOPphase = b})
abletonlinkCHOPbeat :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPbeat = lens _abletonlinkCHOPbeat (\a b -> a {_abletonlinkCHOPbeat = b})
abletonlinkCHOPsixteenths :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPsixteenths = lens _abletonlinkCHOPsixteenths (\a b -> a {_abletonlinkCHOPsixteenths = b})
abletonlinkCHOPcallbacks :: Lens' CHOP (Maybe (Tree DAT))
abletonlinkCHOPcallbacks = lens _abletonlinkCHOPcallbacks (\a b -> a {_abletonlinkCHOPcallbacks = b})
abletonlinkCHOPtempo :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPtempo = lens _abletonlinkCHOPtempo (\a b -> a {_abletonlinkCHOPtempo = b})
abletonlinkCHOPenable :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPenable = lens _abletonlinkCHOPenable (\a b -> a {_abletonlinkCHOPenable = b})
abletonlinkCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
abletonlinkCHOPexporttable = lens _abletonlinkCHOPexporttable (\a b -> a {_abletonlinkCHOPexporttable = b})
abletonlinkCHOPsignature1 :: Lens' CHOP (Maybe (Tree Int))
abletonlinkCHOPsignature1 = lens _abletonlinkCHOPsignature1 (\a b -> a {_abletonlinkCHOPsignature1 = b})
abletonlinkCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
abletonlinkCHOPexportmethod = lens _abletonlinkCHOPexportmethod (\a b -> a {_abletonlinkCHOPexportmethod = b})
abletonlinkCHOPcountramp :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPcountramp = lens _abletonlinkCHOPcountramp (\a b -> a {_abletonlinkCHOPcountramp = b})
abletonlinkCHOPstatus :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPstatus = lens _abletonlinkCHOPstatus (\a b -> a {_abletonlinkCHOPstatus = b})
abletonlinkCHOPcount :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPcount = lens _abletonlinkCHOPcount (\a b -> a {_abletonlinkCHOPcount = b})
abletonlinkCHOPrampbeat :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPrampbeat = lens _abletonlinkCHOPrampbeat (\a b -> a {_abletonlinkCHOPrampbeat = b})
abletonlinkCHOPsignature2 :: Lens' CHOP (Maybe (Tree Int))
abletonlinkCHOPsignature2 = lens _abletonlinkCHOPsignature2 (\a b -> a {_abletonlinkCHOPsignature2 = b})
abletonlinkCHOPbeats :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPbeats = lens _abletonlinkCHOPbeats (\a b -> a {_abletonlinkCHOPbeats = b})
abletonlinkCHOPpulse :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPpulse = lens _abletonlinkCHOPpulse (\a b -> a {_abletonlinkCHOPpulse = b})
abletonlinkCHOPbar :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPbar = lens _abletonlinkCHOPbar (\a b -> a {_abletonlinkCHOPbar = b})
abletonlinkCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
abletonlinkCHOPsrselect = lens _abletonlinkCHOPsrselect (\a b -> a {_abletonlinkCHOPsrselect = b})
abletonlinkCHOPrampbar :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPrampbar = lens _abletonlinkCHOPrampbar (\a b -> a {_abletonlinkCHOPrampbar = b})
abletonlinkCHOPsine :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPsine = lens _abletonlinkCHOPsine (\a b -> a {_abletonlinkCHOPsine = b})
abletonlinkCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
abletonlinkCHOPtimeslice = lens _abletonlinkCHOPtimeslice (\a b -> a {_abletonlinkCHOPtimeslice = b})

constantCHOPname1 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname1 = lens _constantCHOPname1 (\a b -> a {_constantCHOPname1 = b})
constantCHOPname17 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname17 = lens _constantCHOPname17 (\a b -> a {_constantCHOPname17 = b})
constantCHOPvalue3 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue3 = lens _constantCHOPvalue3 (\a b -> a {_constantCHOPvalue3 = b})
constantCHOPvalue29 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue29 = lens _constantCHOPvalue29 (\a b -> a {_constantCHOPvalue29 = b})
constantCHOPvalue14 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue14 = lens _constantCHOPvalue14 (\a b -> a {_constantCHOPvalue14 = b})
constantCHOPname21 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname21 = lens _constantCHOPname21 (\a b -> a {_constantCHOPname21 = b})
constantCHOPstartunit :: Lens' CHOP (Maybe (Tree Int))
constantCHOPstartunit = lens _constantCHOPstartunit (\a b -> a {_constantCHOPstartunit = b})
constantCHOPvalue20 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue20 = lens _constantCHOPvalue20 (\a b -> a {_constantCHOPvalue20 = b})
constantCHOPvalue25 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue25 = lens _constantCHOPvalue25 (\a b -> a {_constantCHOPvalue25 = b})
constantCHOPvalue24 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue24 = lens _constantCHOPvalue24 (\a b -> a {_constantCHOPvalue24 = b})
constantCHOPname12 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname12 = lens _constantCHOPname12 (\a b -> a {_constantCHOPname12 = b})
constantCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
constantCHOPexporttable = lens _constantCHOPexporttable (\a b -> a {_constantCHOPexporttable = b})
constantCHOPname15 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname15 = lens _constantCHOPname15 (\a b -> a {_constantCHOPname15 = b})
constantCHOPleft :: Lens' CHOP (Maybe (Tree Int))
constantCHOPleft = lens _constantCHOPleft (\a b -> a {_constantCHOPleft = b})
constantCHOPname0 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname0 = lens _constantCHOPname0 (\a b -> a {_constantCHOPname0 = b})
constantCHOPname23 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname23 = lens _constantCHOPname23 (\a b -> a {_constantCHOPname23 = b})
constantCHOPname27 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname27 = lens _constantCHOPname27 (\a b -> a {_constantCHOPname27 = b})
constantCHOPname39 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname39 = lens _constantCHOPname39 (\a b -> a {_constantCHOPname39 = b})
constantCHOPname2 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname2 = lens _constantCHOPname2 (\a b -> a {_constantCHOPname2 = b})
constantCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
constantCHOPsrselect = lens _constantCHOPsrselect (\a b -> a {_constantCHOPsrselect = b})
constantCHOPvalue36 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue36 = lens _constantCHOPvalue36 (\a b -> a {_constantCHOPvalue36 = b})
constantCHOPvalue23 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue23 = lens _constantCHOPvalue23 (\a b -> a {_constantCHOPvalue23 = b})
constantCHOPname33 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname33 = lens _constantCHOPname33 (\a b -> a {_constantCHOPname33 = b})
constantCHOPvalue19 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue19 = lens _constantCHOPvalue19 (\a b -> a {_constantCHOPvalue19 = b})
constantCHOPname34 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname34 = lens _constantCHOPname34 (\a b -> a {_constantCHOPname34 = b})
constantCHOPname38 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname38 = lens _constantCHOPname38 (\a b -> a {_constantCHOPname38 = b})
constantCHOPname5 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname5 = lens _constantCHOPname5 (\a b -> a {_constantCHOPname5 = b})
constantCHOPvalue2 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue2 = lens _constantCHOPvalue2 (\a b -> a {_constantCHOPvalue2 = b})
constantCHOPname37 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname37 = lens _constantCHOPname37 (\a b -> a {_constantCHOPname37 = b})
constantCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
constantCHOPdefval = lens _constantCHOPdefval (\a b -> a {_constantCHOPdefval = b})
constantCHOPvalue11 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue11 = lens _constantCHOPvalue11 (\a b -> a {_constantCHOPvalue11 = b})
constantCHOPvalue13 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue13 = lens _constantCHOPvalue13 (\a b -> a {_constantCHOPvalue13 = b})
constantCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPscope = lens _constantCHOPscope (\a b -> a {_constantCHOPscope = b})
constantCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
constantCHOPexportmethod = lens _constantCHOPexportmethod (\a b -> a {_constantCHOPexportmethod = b})
constantCHOPname10 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname10 = lens _constantCHOPname10 (\a b -> a {_constantCHOPname10 = b})
constantCHOPvalue5 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue5 = lens _constantCHOPvalue5 (\a b -> a {_constantCHOPvalue5 = b})
constantCHOPvalue37 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue37 = lens _constantCHOPvalue37 (\a b -> a {_constantCHOPvalue37 = b})
constantCHOPsnap :: Lens' CHOP (Maybe (Tree Bool))
constantCHOPsnap = lens _constantCHOPsnap (\a b -> a {_constantCHOPsnap = b})
constantCHOPvalue0 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue0 = lens _constantCHOPvalue0 (\a b -> a {_constantCHOPvalue0 = b})
constantCHOPvalue9 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue9 = lens _constantCHOPvalue9 (\a b -> a {_constantCHOPvalue9 = b})
constantCHOPvalue17 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue17 = lens _constantCHOPvalue17 (\a b -> a {_constantCHOPvalue17 = b})
constantCHOPname7 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname7 = lens _constantCHOPname7 (\a b -> a {_constantCHOPname7 = b})
constantCHOPname6 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname6 = lens _constantCHOPname6 (\a b -> a {_constantCHOPname6 = b})
constantCHOPvalue32 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue32 = lens _constantCHOPvalue32 (\a b -> a {_constantCHOPvalue32 = b})
constantCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
constantCHOPtimeslice = lens _constantCHOPtimeslice (\a b -> a {_constantCHOPtimeslice = b})
constantCHOPvalue10 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue10 = lens _constantCHOPvalue10 (\a b -> a {_constantCHOPvalue10 = b})
constantCHOPname29 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname29 = lens _constantCHOPname29 (\a b -> a {_constantCHOPname29 = b})
constantCHOPfirst :: Lens' CHOP (Maybe (Tree Int))
constantCHOPfirst = lens _constantCHOPfirst (\a b -> a {_constantCHOPfirst = b})
constantCHOPname36 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname36 = lens _constantCHOPname36 (\a b -> a {_constantCHOPname36 = b})
constantCHOPvalue6 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue6 = lens _constantCHOPvalue6 (\a b -> a {_constantCHOPvalue6 = b})
constantCHOPname35 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname35 = lens _constantCHOPname35 (\a b -> a {_constantCHOPname35 = b})
constantCHOPname30 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname30 = lens _constantCHOPname30 (\a b -> a {_constantCHOPname30 = b})
constantCHOPvalue33 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue33 = lens _constantCHOPvalue33 (\a b -> a {_constantCHOPvalue33 = b})
constantCHOPcurrent :: Lens' CHOP (Maybe (Tree Bool))
constantCHOPcurrent = lens _constantCHOPcurrent (\a b -> a {_constantCHOPcurrent = b})
constantCHOPvalue21 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue21 = lens _constantCHOPvalue21 (\a b -> a {_constantCHOPvalue21 = b})
constantCHOPvalue8 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue8 = lens _constantCHOPvalue8 (\a b -> a {_constantCHOPvalue8 = b})
constantCHOPvalue4 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue4 = lens _constantCHOPvalue4 (\a b -> a {_constantCHOPvalue4 = b})
constantCHOPvalue15 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue15 = lens _constantCHOPvalue15 (\a b -> a {_constantCHOPvalue15 = b})
constantCHOPname26 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname26 = lens _constantCHOPname26 (\a b -> a {_constantCHOPname26 = b})
constantCHOPname4 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname4 = lens _constantCHOPname4 (\a b -> a {_constantCHOPname4 = b})
constantCHOPname11 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname11 = lens _constantCHOPname11 (\a b -> a {_constantCHOPname11 = b})
constantCHOPname8 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname8 = lens _constantCHOPname8 (\a b -> a {_constantCHOPname8 = b})
constantCHOPname28 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname28 = lens _constantCHOPname28 (\a b -> a {_constantCHOPname28 = b})
constantCHOPvalue26 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue26 = lens _constantCHOPvalue26 (\a b -> a {_constantCHOPvalue26 = b})
constantCHOPsingle :: Lens' CHOP (Maybe (Tree Bool))
constantCHOPsingle = lens _constantCHOPsingle (\a b -> a {_constantCHOPsingle = b})
constantCHOPname19 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname19 = lens _constantCHOPname19 (\a b -> a {_constantCHOPname19 = b})
constantCHOPvalue28 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue28 = lens _constantCHOPvalue28 (\a b -> a {_constantCHOPvalue28 = b})
constantCHOPname13 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname13 = lens _constantCHOPname13 (\a b -> a {_constantCHOPname13 = b})
constantCHOPname20 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname20 = lens _constantCHOPname20 (\a b -> a {_constantCHOPname20 = b})
constantCHOPendunit :: Lens' CHOP (Maybe (Tree Int))
constantCHOPendunit = lens _constantCHOPendunit (\a b -> a {_constantCHOPendunit = b})
constantCHOPrate :: Lens' CHOP (Maybe (Tree Float))
constantCHOPrate = lens _constantCHOPrate (\a b -> a {_constantCHOPrate = b})
constantCHOPvalue27 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue27 = lens _constantCHOPvalue27 (\a b -> a {_constantCHOPvalue27 = b})
constantCHOPvalue18 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue18 = lens _constantCHOPvalue18 (\a b -> a {_constantCHOPvalue18 = b})
constantCHOPvalue39 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue39 = lens _constantCHOPvalue39 (\a b -> a {_constantCHOPvalue39 = b})
constantCHOPend :: Lens' CHOP (Maybe (Tree Float))
constantCHOPend = lens _constantCHOPend (\a b -> a {_constantCHOPend = b})
constantCHOPvalue7 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue7 = lens _constantCHOPvalue7 (\a b -> a {_constantCHOPvalue7 = b})
constantCHOPvalue22 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue22 = lens _constantCHOPvalue22 (\a b -> a {_constantCHOPvalue22 = b})
constantCHOPvalue12 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue12 = lens _constantCHOPvalue12 (\a b -> a {_constantCHOPvalue12 = b})
constantCHOPname18 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname18 = lens _constantCHOPname18 (\a b -> a {_constantCHOPname18 = b})
constantCHOPvalue34 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue34 = lens _constantCHOPvalue34 (\a b -> a {_constantCHOPvalue34 = b})
constantCHOPname32 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname32 = lens _constantCHOPname32 (\a b -> a {_constantCHOPname32 = b})
constantCHOPname25 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname25 = lens _constantCHOPname25 (\a b -> a {_constantCHOPname25 = b})
constantCHOPvalue35 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue35 = lens _constantCHOPvalue35 (\a b -> a {_constantCHOPvalue35 = b})
constantCHOPstart :: Lens' CHOP (Maybe (Tree Float))
constantCHOPstart = lens _constantCHOPstart (\a b -> a {_constantCHOPstart = b})
constantCHOPvalue1 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue1 = lens _constantCHOPvalue1 (\a b -> a {_constantCHOPvalue1 = b})
constantCHOPname14 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname14 = lens _constantCHOPname14 (\a b -> a {_constantCHOPname14 = b})
constantCHOPvalue16 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue16 = lens _constantCHOPvalue16 (\a b -> a {_constantCHOPvalue16 = b})
constantCHOPvalue31 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue31 = lens _constantCHOPvalue31 (\a b -> a {_constantCHOPvalue31 = b})
constantCHOPname31 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname31 = lens _constantCHOPname31 (\a b -> a {_constantCHOPname31 = b})
constantCHOPname24 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname24 = lens _constantCHOPname24 (\a b -> a {_constantCHOPname24 = b})
constantCHOPname16 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname16 = lens _constantCHOPname16 (\a b -> a {_constantCHOPname16 = b})
constantCHOPvalue30 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue30 = lens _constantCHOPvalue30 (\a b -> a {_constantCHOPvalue30 = b})
constantCHOPname9 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname9 = lens _constantCHOPname9 (\a b -> a {_constantCHOPname9 = b})
constantCHOPname3 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname3 = lens _constantCHOPname3 (\a b -> a {_constantCHOPname3 = b})
constantCHOPname22 :: Lens' CHOP (Maybe (Tree ByteString))
constantCHOPname22 = lens _constantCHOPname22 (\a b -> a {_constantCHOPname22 = b})
constantCHOPvalue38 :: Lens' CHOP (Maybe (Tree Float))
constantCHOPvalue38 = lens _constantCHOPvalue38 (\a b -> a {_constantCHOPvalue38 = b})
constantCHOPright :: Lens' CHOP (Maybe (Tree Int))
constantCHOPright = lens _constantCHOPright (\a b -> a {_constantCHOPright = b})

objectCHOPtscopez :: Lens' CHOP (Maybe (Tree ByteString))
objectCHOPtscopez = lens _objectCHOPtscopez (\a b -> a {_objectCHOPtscopez = b})
objectCHOPnameformat :: Lens' CHOP (Maybe (Tree Int))
objectCHOPnameformat = lens _objectCHOPnameformat (\a b -> a {_objectCHOPnameformat = b})
objectCHOPcompute :: Lens' CHOP (Maybe (Tree Int))
objectCHOPcompute = lens _objectCHOPcompute (\a b -> a {_objectCHOPcompute = b})
objectCHOPcookpast :: Lens' CHOP (Maybe (Tree Bool))
objectCHOPcookpast = lens _objectCHOPcookpast (\a b -> a {_objectCHOPcookpast = b})
objectCHOPappendattribs :: Lens' CHOP (Maybe (Tree Bool))
objectCHOPappendattribs = lens _objectCHOPappendattribs (\a b -> a {_objectCHOPappendattribs = b})
objectCHOPend :: Lens' CHOP (Maybe (Tree Float))
objectCHOPend = lens _objectCHOPend (\a b -> a {_objectCHOPend = b})
objectCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
objectCHOPscope = lens _objectCHOPscope (\a b -> a {_objectCHOPscope = b})
objectCHOPtscopey :: Lens' CHOP (Maybe (Tree ByteString))
objectCHOPtscopey = lens _objectCHOPtscopey (\a b -> a {_objectCHOPtscopey = b})
objectCHOPtscopex :: Lens' CHOP (Maybe (Tree ByteString))
objectCHOPtscopex = lens _objectCHOPtscopex (\a b -> a {_objectCHOPtscopex = b})
objectCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
objectCHOPdefval = lens _objectCHOPdefval (\a b -> a {_objectCHOPdefval = b})
objectCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
objectCHOPexportmethod = lens _objectCHOPexportmethod (\a b -> a {_objectCHOPexportmethod = b})
objectCHOPoutputrange :: Lens' CHOP (Maybe (Tree Int))
objectCHOPoutputrange = lens _objectCHOPoutputrange (\a b -> a {_objectCHOPoutputrange = b})
objectCHOPsmoothrotate :: Lens' CHOP (Maybe (Tree Bool))
objectCHOPsmoothrotate = lens _objectCHOPsmoothrotate (\a b -> a {_objectCHOPsmoothrotate = b})
objectCHOPstartunit :: Lens' CHOP (Maybe (Tree Int))
objectCHOPstartunit = lens _objectCHOPstartunit (\a b -> a {_objectCHOPstartunit = b})
objectCHOPstart :: Lens' CHOP (Maybe (Tree Float))
objectCHOPstart = lens _objectCHOPstart (\a b -> a {_objectCHOPstart = b})
objectCHOPleft :: Lens' CHOP (Maybe (Tree Int))
objectCHOPleft = lens _objectCHOPleft (\a b -> a {_objectCHOPleft = b})
objectCHOPbearing :: Lens' CHOP (Vec3)
objectCHOPbearing = lens _objectCHOPbearing (\a b -> a {_objectCHOPbearing = b})
objectCHOPendunit :: Lens' CHOP (Maybe (Tree Int))
objectCHOPendunit = lens _objectCHOPendunit (\a b -> a {_objectCHOPendunit = b})
objectCHOPxord :: Lens' CHOP (Maybe (Tree Int))
objectCHOPxord = lens _objectCHOPxord (\a b -> a {_objectCHOPxord = b})
objectCHOPright :: Lens' CHOP (Maybe (Tree Int))
objectCHOPright = lens _objectCHOPright (\a b -> a {_objectCHOPright = b})
objectCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
objectCHOPexporttable = lens _objectCHOPexporttable (\a b -> a {_objectCHOPexporttable = b})
objectCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
objectCHOPtimeslice = lens _objectCHOPtimeslice (\a b -> a {_objectCHOPtimeslice = b})
objectCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
objectCHOPsrselect = lens _objectCHOPsrselect (\a b -> a {_objectCHOPsrselect = b})
objectCHOPbearingref :: Lens' CHOP (Maybe (Tree Int))
objectCHOPbearingref = lens _objectCHOPbearingref (\a b -> a {_objectCHOPbearingref = b})
objectCHOPrord :: Lens' CHOP (Maybe (Tree Int))
objectCHOPrord = lens _objectCHOPrord (\a b -> a {_objectCHOPrord = b})
objectCHOPdat :: Lens' CHOP (Maybe (Tree DAT))
objectCHOPdat = lens _objectCHOPdat (\a b -> a {_objectCHOPdat = b})

joinCHOPblendbyinput :: Lens' CHOP (Maybe (Tree Bool))
joinCHOPblendbyinput = lens _joinCHOPblendbyinput (\a b -> a {_joinCHOPblendbyinput = b})
joinCHOPtransscopex :: Lens' CHOP (Maybe (Tree ByteString))
joinCHOPtransscopex = lens _joinCHOPtransscopex (\a b -> a {_joinCHOPtransscopex = b})
joinCHOPshortrot :: Lens' CHOP (Maybe (Tree Bool))
joinCHOPshortrot = lens _joinCHOPshortrot (\a b -> a {_joinCHOPshortrot = b})
joinCHOPblendmethod :: Lens' CHOP (Maybe (Tree Int))
joinCHOPblendmethod = lens _joinCHOPblendmethod (\a b -> a {_joinCHOPblendmethod = b})
joinCHOPstep :: Lens' CHOP (Maybe (Tree Float))
joinCHOPstep = lens _joinCHOPstep (\a b -> a {_joinCHOPstep = b})
joinCHOPtransscopey :: Lens' CHOP (Maybe (Tree ByteString))
joinCHOPtransscopey = lens _joinCHOPtransscopey (\a b -> a {_joinCHOPtransscopey = b})
joinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
joinCHOPscope = lens _joinCHOPscope (\a b -> a {_joinCHOPscope = b})
joinCHOPblendscope :: Lens' CHOP (Maybe (Tree ByteString))
joinCHOPblendscope = lens _joinCHOPblendscope (\a b -> a {_joinCHOPblendscope = b})
joinCHOPtransscopez :: Lens' CHOP (Maybe (Tree ByteString))
joinCHOPtransscopez = lens _joinCHOPtransscopez (\a b -> a {_joinCHOPtransscopez = b})
joinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
joinCHOPexporttable = lens _joinCHOPexporttable (\a b -> a {_joinCHOPexporttable = b})
joinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
joinCHOPexportmethod = lens _joinCHOPexportmethod (\a b -> a {_joinCHOPexportmethod = b})
joinCHOProtscope :: Lens' CHOP (Maybe (Tree ByteString))
joinCHOProtscope = lens _joinCHOProtscope (\a b -> a {_joinCHOProtscope = b})
joinCHOPblendbias :: Lens' CHOP (Maybe (Tree Float))
joinCHOPblendbias = lens _joinCHOPblendbias (\a b -> a {_joinCHOPblendbias = b})
joinCHOPblendregionunit :: Lens' CHOP (Maybe (Tree Int))
joinCHOPblendregionunit = lens _joinCHOPblendregionunit (\a b -> a {_joinCHOPblendregionunit = b})
joinCHOPmatch :: Lens' CHOP (Maybe (Tree Int))
joinCHOPmatch = lens _joinCHOPmatch (\a b -> a {_joinCHOPmatch = b})
joinCHOPcyclelen :: Lens' CHOP (Maybe (Tree Float))
joinCHOPcyclelen = lens _joinCHOPcyclelen (\a b -> a {_joinCHOPcyclelen = b})
joinCHOPquatrot :: Lens' CHOP (Maybe (Tree Bool))
joinCHOPquatrot = lens _joinCHOPquatrot (\a b -> a {_joinCHOPquatrot = b})
joinCHOPstepscope :: Lens' CHOP (Maybe (Tree ByteString))
joinCHOPstepscope = lens _joinCHOPstepscope (\a b -> a {_joinCHOPstepscope = b})
joinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
joinCHOPsrselect = lens _joinCHOPsrselect (\a b -> a {_joinCHOPsrselect = b})
joinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
joinCHOPtimeslice = lens _joinCHOPtimeslice (\a b -> a {_joinCHOPtimeslice = b})
joinCHOPblendregion :: Lens' CHOP (Maybe (Tree Float))
joinCHOPblendregion = lens _joinCHOPblendregion (\a b -> a {_joinCHOPblendregion = b})
joinCHOPblendfunc :: Lens' CHOP (Maybe (Tree Int))
joinCHOPblendfunc = lens _joinCHOPblendfunc (\a b -> a {_joinCHOPblendfunc = b})

cycleCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
cycleCHOPexportmethod = lens _cycleCHOPexportmethod (\a b -> a {_cycleCHOPexportmethod = b})
cycleCHOPbefore :: Lens' CHOP (Maybe (Tree Float))
cycleCHOPbefore = lens _cycleCHOPbefore (\a b -> a {_cycleCHOPbefore = b})
cycleCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
cycleCHOPexporttable = lens _cycleCHOPexporttable (\a b -> a {_cycleCHOPexporttable = b})
cycleCHOPblendmethod :: Lens' CHOP (Maybe (Tree Int))
cycleCHOPblendmethod = lens _cycleCHOPblendmethod (\a b -> a {_cycleCHOPblendmethod = b})
cycleCHOPblendbias :: Lens' CHOP (Maybe (Tree Float))
cycleCHOPblendbias = lens _cycleCHOPblendbias (\a b -> a {_cycleCHOPblendbias = b})
cycleCHOPblendregionunit :: Lens' CHOP (Maybe (Tree Int))
cycleCHOPblendregionunit = lens _cycleCHOPblendregionunit (\a b -> a {_cycleCHOPblendregionunit = b})
cycleCHOPstep :: Lens' CHOP (Maybe (Tree Float))
cycleCHOPstep = lens _cycleCHOPstep (\a b -> a {_cycleCHOPstep = b})
cycleCHOPmirror :: Lens' CHOP (Maybe (Tree Bool))
cycleCHOPmirror = lens _cycleCHOPmirror (\a b -> a {_cycleCHOPmirror = b})
cycleCHOPblendregion :: Lens' CHOP (Maybe (Tree Float))
cycleCHOPblendregion = lens _cycleCHOPblendregion (\a b -> a {_cycleCHOPblendregion = b})
cycleCHOPextremes :: Lens' CHOP (Maybe (Tree Bool))
cycleCHOPextremes = lens _cycleCHOPextremes (\a b -> a {_cycleCHOPextremes = b})
cycleCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
cycleCHOPsrselect = lens _cycleCHOPsrselect (\a b -> a {_cycleCHOPsrselect = b})
cycleCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
cycleCHOPscope = lens _cycleCHOPscope (\a b -> a {_cycleCHOPscope = b})
cycleCHOPafter :: Lens' CHOP (Maybe (Tree Float))
cycleCHOPafter = lens _cycleCHOPafter (\a b -> a {_cycleCHOPafter = b})
cycleCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
cycleCHOPtimeslice = lens _cycleCHOPtimeslice (\a b -> a {_cycleCHOPtimeslice = b})
cycleCHOPstepscope :: Lens' CHOP (Maybe (Tree ByteString))
cycleCHOPstepscope = lens _cycleCHOPstepscope (\a b -> a {_cycleCHOPstepscope = b})
cycleCHOPblendfunc :: Lens' CHOP (Maybe (Tree Int))
cycleCHOPblendfunc = lens _cycleCHOPblendfunc (\a b -> a {_cycleCHOPblendfunc = b})

feedbackCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
feedbackCHOPresetpulse = lens _feedbackCHOPresetpulse (\a b -> a {_feedbackCHOPresetpulse = b})
feedbackCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
feedbackCHOPsrselect = lens _feedbackCHOPsrselect (\a b -> a {_feedbackCHOPsrselect = b})
feedbackCHOPoutput :: Lens' CHOP (Maybe (Tree Int))
feedbackCHOPoutput = lens _feedbackCHOPoutput (\a b -> a {_feedbackCHOPoutput = b})
feedbackCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
feedbackCHOPexportmethod = lens _feedbackCHOPexportmethod (\a b -> a {_feedbackCHOPexportmethod = b})
feedbackCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
feedbackCHOPexporttable = lens _feedbackCHOPexporttable (\a b -> a {_feedbackCHOPexporttable = b})
feedbackCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
feedbackCHOPtimeslice = lens _feedbackCHOPtimeslice (\a b -> a {_feedbackCHOPtimeslice = b})
feedbackCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
feedbackCHOPscope = lens _feedbackCHOPscope (\a b -> a {_feedbackCHOPscope = b})
feedbackCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
feedbackCHOPreset = lens _feedbackCHOPreset (\a b -> a {_feedbackCHOPreset = b})
feedbackCHOPdelta :: Lens' CHOP (Maybe (Tree Bool))
feedbackCHOPdelta = lens _feedbackCHOPdelta (\a b -> a {_feedbackCHOPdelta = b})

oculusriftCHOPnear :: Lens' CHOP (Maybe (Tree Float))
oculusriftCHOPnear = lens _oculusriftCHOPnear (\a b -> a {_oculusriftCHOPnear = b})
oculusriftCHOPrecenter :: Lens' CHOP (Maybe (Tree Bool))
oculusriftCHOPrecenter = lens _oculusriftCHOPrecenter (\a b -> a {_oculusriftCHOPrecenter = b})
oculusriftCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
oculusriftCHOPactive = lens _oculusriftCHOPactive (\a b -> a {_oculusriftCHOPactive = b})
oculusriftCHOPdeviceinfo :: Lens' CHOP (Maybe (Tree Bool))
oculusriftCHOPdeviceinfo = lens _oculusriftCHOPdeviceinfo (\a b -> a {_oculusriftCHOPdeviceinfo = b})
oculusriftCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
oculusriftCHOPexportmethod = lens _oculusriftCHOPexportmethod (\a b -> a {_oculusriftCHOPexportmethod = b})
oculusriftCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
oculusriftCHOPexporttable = lens _oculusriftCHOPexporttable (\a b -> a {_oculusriftCHOPexporttable = b})
oculusriftCHOPfar :: Lens' CHOP (Maybe (Tree Float))
oculusriftCHOPfar = lens _oculusriftCHOPfar (\a b -> a {_oculusriftCHOPfar = b})
oculusriftCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
oculusriftCHOPscope = lens _oculusriftCHOPscope (\a b -> a {_oculusriftCHOPscope = b})
oculusriftCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
oculusriftCHOPsrselect = lens _oculusriftCHOPsrselect (\a b -> a {_oculusriftCHOPsrselect = b})
oculusriftCHOPacceleration :: Lens' CHOP (Maybe (Tree Bool))
oculusriftCHOPacceleration = lens _oculusriftCHOPacceleration (\a b -> a {_oculusriftCHOPacceleration = b})
oculusriftCHOPvelocity :: Lens' CHOP (Maybe (Tree Bool))
oculusriftCHOPvelocity = lens _oculusriftCHOPvelocity (\a b -> a {_oculusriftCHOPvelocity = b})
oculusriftCHOPorientation :: Lens' CHOP (Maybe (Tree Bool))
oculusriftCHOPorientation = lens _oculusriftCHOPorientation (\a b -> a {_oculusriftCHOPorientation = b})
oculusriftCHOPcontrollerbuttons :: Lens' CHOP (Maybe (Tree Bool))
oculusriftCHOPcontrollerbuttons = lens _oculusriftCHOPcontrollerbuttons (\a b -> a {_oculusriftCHOPcontrollerbuttons = b})
oculusriftCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
oculusriftCHOPtimeslice = lens _oculusriftCHOPtimeslice (\a b -> a {_oculusriftCHOPtimeslice = b})
oculusriftCHOPoutput :: Lens' CHOP (Maybe (Tree Int))
oculusriftCHOPoutput = lens _oculusriftCHOPoutput (\a b -> a {_oculusriftCHOPoutput = b})

mathCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
mathCHOPexportmethod = lens _mathCHOPexportmethod (\a b -> a {_mathCHOPexportmethod = b})
mathCHOPgain :: Lens' CHOP (Maybe (Tree Float))
mathCHOPgain = lens _mathCHOPgain (\a b -> a {_mathCHOPgain = b})
mathCHOPpostoff :: Lens' CHOP (Maybe (Tree Float))
mathCHOPpostoff = lens _mathCHOPpostoff (\a b -> a {_mathCHOPpostoff = b})
mathCHOPalign :: Lens' CHOP (Maybe (Tree Int))
mathCHOPalign = lens _mathCHOPalign (\a b -> a {_mathCHOPalign = b})
mathCHOPtorange1 :: Lens' CHOP (Maybe (Tree Float))
mathCHOPtorange1 = lens _mathCHOPtorange1 (\a b -> a {_mathCHOPtorange1 = b})
mathCHOPfromrange2 :: Lens' CHOP (Maybe (Tree Float))
mathCHOPfromrange2 = lens _mathCHOPfromrange2 (\a b -> a {_mathCHOPfromrange2 = b})
mathCHOPpostop :: Lens' CHOP (Maybe (Tree Int))
mathCHOPpostop = lens _mathCHOPpostop (\a b -> a {_mathCHOPpostop = b})
mathCHOPchopop :: Lens' CHOP (Maybe (Tree Int))
mathCHOPchopop = lens _mathCHOPchopop (\a b -> a {_mathCHOPchopop = b})
mathCHOPchanop :: Lens' CHOP (Maybe (Tree Int))
mathCHOPchanop = lens _mathCHOPchanop (\a b -> a {_mathCHOPchanop = b})
mathCHOPmatch :: Lens' CHOP (Maybe (Tree Int))
mathCHOPmatch = lens _mathCHOPmatch (\a b -> a {_mathCHOPmatch = b})
mathCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
mathCHOPexporttable = lens _mathCHOPexporttable (\a b -> a {_mathCHOPexporttable = b})
mathCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
mathCHOPscope = lens _mathCHOPscope (\a b -> a {_mathCHOPscope = b})
mathCHOPtorange2 :: Lens' CHOP (Maybe (Tree Float))
mathCHOPtorange2 = lens _mathCHOPtorange2 (\a b -> a {_mathCHOPtorange2 = b})
mathCHOPpreoff :: Lens' CHOP (Maybe (Tree Float))
mathCHOPpreoff = lens _mathCHOPpreoff (\a b -> a {_mathCHOPpreoff = b})
mathCHOPfromrange1 :: Lens' CHOP (Maybe (Tree Float))
mathCHOPfromrange1 = lens _mathCHOPfromrange1 (\a b -> a {_mathCHOPfromrange1 = b})
mathCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
mathCHOPsrselect = lens _mathCHOPsrselect (\a b -> a {_mathCHOPsrselect = b})
mathCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
mathCHOPtimeslice = lens _mathCHOPtimeslice (\a b -> a {_mathCHOPtimeslice = b})
mathCHOPpreop :: Lens' CHOP (Maybe (Tree Int))
mathCHOPpreop = lens _mathCHOPpreop (\a b -> a {_mathCHOPpreop = b})
mathCHOPinteger :: Lens' CHOP (Maybe (Tree Int))
mathCHOPinteger = lens _mathCHOPinteger (\a b -> a {_mathCHOPinteger = b})

scanCHOPvertexrepeat :: Lens' CHOP (Maybe (Tree Int))
scanCHOPvertexrepeat = lens _scanCHOPvertexrepeat (\a b -> a {_scanCHOPvertexrepeat = b})
scanCHOPlayered :: Lens' CHOP (Maybe (Tree Bool))
scanCHOPlayered = lens _scanCHOPlayered (\a b -> a {_scanCHOPlayered = b})
scanCHOPcolor :: Lens' CHOP (Maybe (Tree Bool))
scanCHOPcolor = lens _scanCHOPcolor (\a b -> a {_scanCHOPcolor = b})
scanCHOPxscale :: Lens' CHOP (Maybe (Tree Float))
scanCHOPxscale = lens _scanCHOPxscale (\a b -> a {_scanCHOPxscale = b})
scanCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
scanCHOPsrselect = lens _scanCHOPsrselect (\a b -> a {_scanCHOPsrselect = b})
scanCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
scanCHOPscope = lens _scanCHOPscope (\a b -> a {_scanCHOPscope = b})
scanCHOPlimitstep :: Lens' CHOP (Maybe (Tree Bool))
scanCHOPlimitstep = lens _scanCHOPlimitstep (\a b -> a {_scanCHOPlimitstep = b})
scanCHOPtop :: Lens' CHOP (Maybe (Tree TOP))
scanCHOPtop = lens _scanCHOPtop (\a b -> a {_scanCHOPtop = b})
scanCHOPgreenscale :: Lens' CHOP (Maybe (Tree Float))
scanCHOPgreenscale = lens _scanCHOPgreenscale (\a b -> a {_scanCHOPgreenscale = b})
scanCHOPlevel :: Lens' CHOP (Maybe (Tree Int))
scanCHOPlevel = lens _scanCHOPlevel (\a b -> a {_scanCHOPlevel = b})
scanCHOPheight :: Lens' CHOP (Maybe (Tree Int))
scanCHOPheight = lens _scanCHOPheight (\a b -> a {_scanCHOPheight = b})
scanCHOPvertexorder :: Lens' CHOP (Maybe (Tree Bool))
scanCHOPvertexorder = lens _scanCHOPvertexorder (\a b -> a {_scanCHOPvertexorder = b})
scanCHOPsop :: Lens' CHOP (Maybe (Tree SOP))
scanCHOPsop = lens _scanCHOPsop (\a b -> a {_scanCHOPsop = b})
scanCHOPbluescale :: Lens' CHOP (Maybe (Tree Float))
scanCHOPbluescale = lens _scanCHOPbluescale (\a b -> a {_scanCHOPbluescale = b})
scanCHOPsource :: Lens' CHOP (Maybe (Tree Int))
scanCHOPsource = lens _scanCHOPsource (\a b -> a {_scanCHOPsource = b})
scanCHOPlimit :: Lens' CHOP (Maybe (Tree Bool))
scanCHOPlimit = lens _scanCHOPlimit (\a b -> a {_scanCHOPlimit = b})
scanCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
scanCHOPexportmethod = lens _scanCHOPexportmethod (\a b -> a {_scanCHOPexportmethod = b})
scanCHOPrandomize :: Lens' CHOP (Maybe (Tree Bool))
scanCHOPrandomize = lens _scanCHOPrandomize (\a b -> a {_scanCHOPrandomize = b})
scanCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
scanCHOPexporttable = lens _scanCHOPexporttable (\a b -> a {_scanCHOPexporttable = b})
scanCHOPrate :: Lens' CHOP (Maybe (Tree Float))
scanCHOPrate = lens _scanCHOPrate (\a b -> a {_scanCHOPrate = b})
scanCHOPinterleave :: Lens' CHOP (Maybe (Tree Int))
scanCHOPinterleave = lens _scanCHOPinterleave (\a b -> a {_scanCHOPinterleave = b})
scanCHOPtrim :: Lens' CHOP (Maybe (Tree Bool))
scanCHOPtrim = lens _scanCHOPtrim (\a b -> a {_scanCHOPtrim = b})
scanCHOPtrimval :: Lens' CHOP (Maybe (Tree Float))
scanCHOPtrimval = lens _scanCHOPtrimval (\a b -> a {_scanCHOPtrimval = b})
scanCHOProtate :: Lens' CHOP (Maybe (Tree Float))
scanCHOProtate = lens _scanCHOProtate (\a b -> a {_scanCHOProtate = b})
scanCHOPtriggerval :: Lens' CHOP (Maybe (Tree Float))
scanCHOPtriggerval = lens _scanCHOPtriggerval (\a b -> a {_scanCHOPtriggerval = b})
scanCHOPwidth :: Lens' CHOP (Maybe (Tree Int))
scanCHOPwidth = lens _scanCHOPwidth (\a b -> a {_scanCHOPwidth = b})
scanCHOPblankingcount :: Lens' CHOP (Maybe (Tree Int))
scanCHOPblankingcount = lens _scanCHOPblankingcount (\a b -> a {_scanCHOPblankingcount = b})
scanCHOPtrimunits :: Lens' CHOP (Maybe (Tree Int))
scanCHOPtrimunits = lens _scanCHOPtrimunits (\a b -> a {_scanCHOPtrimunits = b})
scanCHOPstepsize :: Lens' CHOP (Maybe (Tree Float))
scanCHOPstepsize = lens _scanCHOPstepsize (\a b -> a {_scanCHOPstepsize = b})
scanCHOPchop :: Lens' CHOP (Maybe (Tree CHOP))
scanCHOPchop = lens _scanCHOPchop (\a b -> a {_scanCHOPchop = b})
scanCHOPyscale :: Lens' CHOP (Maybe (Tree Float))
scanCHOPyscale = lens _scanCHOPyscale (\a b -> a {_scanCHOPyscale = b})
scanCHOPtrigger :: Lens' CHOP (Maybe (Tree Bool))
scanCHOPtrigger = lens _scanCHOPtrigger (\a b -> a {_scanCHOPtrigger = b})
scanCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
scanCHOPtimeslice = lens _scanCHOPtimeslice (\a b -> a {_scanCHOPtimeslice = b})
scanCHOPredscale :: Lens' CHOP (Maybe (Tree Float))
scanCHOPredscale = lens _scanCHOPredscale (\a b -> a {_scanCHOPredscale = b})
scanCHOPswap :: Lens' CHOP (Maybe (Tree Bool))
scanCHOPswap = lens _scanCHOPswap (\a b -> a {_scanCHOPswap = b})

audiostreaminCHOPvideostreamintop :: Lens' CHOP (Maybe (Tree TOP))
audiostreaminCHOPvideostreamintop = lens _audiostreaminCHOPvideostreamintop (\a b -> a {_audiostreaminCHOPvideostreamintop = b})
audiostreaminCHOPplay :: Lens' CHOP (Maybe (Tree Float))
audiostreaminCHOPplay = lens _audiostreaminCHOPplay (\a b -> a {_audiostreaminCHOPplay = b})
audiostreaminCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audiostreaminCHOPsrselect = lens _audiostreaminCHOPsrselect (\a b -> a {_audiostreaminCHOPsrselect = b})
audiostreaminCHOPvolume :: Lens' CHOP (Maybe (Tree Float))
audiostreaminCHOPvolume = lens _audiostreaminCHOPvolume (\a b -> a {_audiostreaminCHOPvolume = b})
audiostreaminCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audiostreaminCHOPexportmethod = lens _audiostreaminCHOPexportmethod (\a b -> a {_audiostreaminCHOPexportmethod = b})
audiostreaminCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audiostreaminCHOPtimeslice = lens _audiostreaminCHOPtimeslice (\a b -> a {_audiostreaminCHOPtimeslice = b})
audiostreaminCHOPopentimeout :: Lens' CHOP (Maybe (Tree Float))
audiostreaminCHOPopentimeout = lens _audiostreaminCHOPopentimeout (\a b -> a {_audiostreaminCHOPopentimeout = b})
audiostreaminCHOPurl :: Lens' CHOP (Maybe (Tree ByteString))
audiostreaminCHOPurl = lens _audiostreaminCHOPurl (\a b -> a {_audiostreaminCHOPurl = b})
audiostreaminCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audiostreaminCHOPscope = lens _audiostreaminCHOPscope (\a b -> a {_audiostreaminCHOPscope = b})
audiostreaminCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audiostreaminCHOPexporttable = lens _audiostreaminCHOPexporttable (\a b -> a {_audiostreaminCHOPexporttable = b})

waveCHOPend :: Lens' CHOP (Maybe (Tree Float))
waveCHOPend = lens _waveCHOPend (\a b -> a {_waveCHOPend = b})
waveCHOPdecay :: Lens' CHOP (Maybe (Tree Float))
waveCHOPdecay = lens _waveCHOPdecay (\a b -> a {_waveCHOPdecay = b})
waveCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
waveCHOPexportmethod = lens _waveCHOPexportmethod (\a b -> a {_waveCHOPexportmethod = b})
waveCHOPoffset :: Lens' CHOP (Maybe (Tree Float))
waveCHOPoffset = lens _waveCHOPoffset (\a b -> a {_waveCHOPoffset = b})
waveCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
waveCHOPscope = lens _waveCHOPscope (\a b -> a {_waveCHOPscope = b})
waveCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
waveCHOPdefval = lens _waveCHOPdefval (\a b -> a {_waveCHOPdefval = b})
waveCHOPwavetype :: Lens' CHOP (Maybe (Tree Int))
waveCHOPwavetype = lens _waveCHOPwavetype (\a b -> a {_waveCHOPwavetype = b})
waveCHOPramp :: Lens' CHOP (Maybe (Tree Float))
waveCHOPramp = lens _waveCHOPramp (\a b -> a {_waveCHOPramp = b})
waveCHOPphase :: Lens' CHOP (Maybe (Tree Float))
waveCHOPphase = lens _waveCHOPphase (\a b -> a {_waveCHOPphase = b})
waveCHOPrampunit :: Lens' CHOP (Maybe (Tree Int))
waveCHOPrampunit = lens _waveCHOPrampunit (\a b -> a {_waveCHOPrampunit = b})
waveCHOPperiodunit :: Lens' CHOP (Maybe (Tree Int))
waveCHOPperiodunit = lens _waveCHOPperiodunit (\a b -> a {_waveCHOPperiodunit = b})
waveCHOPendunit :: Lens' CHOP (Maybe (Tree Int))
waveCHOPendunit = lens _waveCHOPendunit (\a b -> a {_waveCHOPendunit = b})
waveCHOPstart :: Lens' CHOP (Maybe (Tree Float))
waveCHOPstart = lens _waveCHOPstart (\a b -> a {_waveCHOPstart = b})
waveCHOPleft :: Lens' CHOP (Maybe (Tree Int))
waveCHOPleft = lens _waveCHOPleft (\a b -> a {_waveCHOPleft = b})
waveCHOPperiod :: Lens' CHOP (Maybe (Tree Float))
waveCHOPperiod = lens _waveCHOPperiod (\a b -> a {_waveCHOPperiod = b})
waveCHOPstartunit :: Lens' CHOP (Maybe (Tree Int))
waveCHOPstartunit = lens _waveCHOPstartunit (\a b -> a {_waveCHOPstartunit = b})
waveCHOPrate :: Lens' CHOP (Maybe (Tree Float))
waveCHOPrate = lens _waveCHOPrate (\a b -> a {_waveCHOPrate = b})
waveCHOPchannelname :: Lens' CHOP (Maybe (Tree ByteString))
waveCHOPchannelname = lens _waveCHOPchannelname (\a b -> a {_waveCHOPchannelname = b})
waveCHOPexprs :: Lens' CHOP (Maybe (Tree Float))
waveCHOPexprs = lens _waveCHOPexprs (\a b -> a {_waveCHOPexprs = b})
waveCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
waveCHOPexporttable = lens _waveCHOPexporttable (\a b -> a {_waveCHOPexporttable = b})
waveCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
waveCHOPtimeslice = lens _waveCHOPtimeslice (\a b -> a {_waveCHOPtimeslice = b})
waveCHOPdecayunit :: Lens' CHOP (Maybe (Tree Int))
waveCHOPdecayunit = lens _waveCHOPdecayunit (\a b -> a {_waveCHOPdecayunit = b})
waveCHOPbias :: Lens' CHOP (Maybe (Tree Float))
waveCHOPbias = lens _waveCHOPbias (\a b -> a {_waveCHOPbias = b})
waveCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
waveCHOPsrselect = lens _waveCHOPsrselect (\a b -> a {_waveCHOPsrselect = b})
waveCHOPamp :: Lens' CHOP (Maybe (Tree Float))
waveCHOPamp = lens _waveCHOPamp (\a b -> a {_waveCHOPamp = b})
waveCHOPright :: Lens' CHOP (Maybe (Tree Int))
waveCHOPright = lens _waveCHOPright (\a b -> a {_waveCHOPright = b})

audiobandeqCHOPband12 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband12 = lens _audiobandeqCHOPband12 (\a b -> a {_audiobandeqCHOPband12 = b})
audiobandeqCHOPdrywet :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPdrywet = lens _audiobandeqCHOPdrywet (\a b -> a {_audiobandeqCHOPdrywet = b})
audiobandeqCHOPband13 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband13 = lens _audiobandeqCHOPband13 (\a b -> a {_audiobandeqCHOPband13 = b})
audiobandeqCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audiobandeqCHOPscope = lens _audiobandeqCHOPscope (\a b -> a {_audiobandeqCHOPscope = b})
audiobandeqCHOPband10 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband10 = lens _audiobandeqCHOPband10 (\a b -> a {_audiobandeqCHOPband10 = b})
audiobandeqCHOPband14 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband14 = lens _audiobandeqCHOPband14 (\a b -> a {_audiobandeqCHOPband14 = b})
audiobandeqCHOPband5 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband5 = lens _audiobandeqCHOPband5 (\a b -> a {_audiobandeqCHOPband5 = b})
audiobandeqCHOPband1 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband1 = lens _audiobandeqCHOPband1 (\a b -> a {_audiobandeqCHOPband1 = b})
audiobandeqCHOPband3 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband3 = lens _audiobandeqCHOPband3 (\a b -> a {_audiobandeqCHOPband3 = b})
audiobandeqCHOPband16 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband16 = lens _audiobandeqCHOPband16 (\a b -> a {_audiobandeqCHOPband16 = b})
audiobandeqCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audiobandeqCHOPexporttable = lens _audiobandeqCHOPexporttable (\a b -> a {_audiobandeqCHOPexporttable = b})
audiobandeqCHOPband2 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband2 = lens _audiobandeqCHOPband2 (\a b -> a {_audiobandeqCHOPband2 = b})
audiobandeqCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audiobandeqCHOPexportmethod = lens _audiobandeqCHOPexportmethod (\a b -> a {_audiobandeqCHOPexportmethod = b})
audiobandeqCHOPband4 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband4 = lens _audiobandeqCHOPband4 (\a b -> a {_audiobandeqCHOPband4 = b})
audiobandeqCHOPband6 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband6 = lens _audiobandeqCHOPband6 (\a b -> a {_audiobandeqCHOPband6 = b})
audiobandeqCHOPband7 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband7 = lens _audiobandeqCHOPband7 (\a b -> a {_audiobandeqCHOPband7 = b})
audiobandeqCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audiobandeqCHOPsrselect = lens _audiobandeqCHOPsrselect (\a b -> a {_audiobandeqCHOPsrselect = b})
audiobandeqCHOPband9 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband9 = lens _audiobandeqCHOPband9 (\a b -> a {_audiobandeqCHOPband9 = b})
audiobandeqCHOPband11 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband11 = lens _audiobandeqCHOPband11 (\a b -> a {_audiobandeqCHOPband11 = b})
audiobandeqCHOPband15 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband15 = lens _audiobandeqCHOPband15 (\a b -> a {_audiobandeqCHOPband15 = b})
audiobandeqCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audiobandeqCHOPtimeslice = lens _audiobandeqCHOPtimeslice (\a b -> a {_audiobandeqCHOPtimeslice = b})
audiobandeqCHOPband8 :: Lens' CHOP (Maybe (Tree Float))
audiobandeqCHOPband8 = lens _audiobandeqCHOPband8 (\a b -> a {_audiobandeqCHOPband8 = b})

shuffleCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
shuffleCHOPexportmethod = lens _shuffleCHOPexportmethod (\a b -> a {_shuffleCHOPexportmethod = b})
shuffleCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
shuffleCHOPsrselect = lens _shuffleCHOPsrselect (\a b -> a {_shuffleCHOPsrselect = b})
shuffleCHOPfirstsample :: Lens' CHOP (Maybe (Tree Bool))
shuffleCHOPfirstsample = lens _shuffleCHOPfirstsample (\a b -> a {_shuffleCHOPfirstsample = b})
shuffleCHOPmethod :: Lens' CHOP (Maybe (Tree Int))
shuffleCHOPmethod = lens _shuffleCHOPmethod (\a b -> a {_shuffleCHOPmethod = b})
shuffleCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
shuffleCHOPtimeslice = lens _shuffleCHOPtimeslice (\a b -> a {_shuffleCHOPtimeslice = b})
shuffleCHOPnval :: Lens' CHOP (Maybe (Tree Int))
shuffleCHOPnval = lens _shuffleCHOPnval (\a b -> a {_shuffleCHOPnval = b})
shuffleCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
shuffleCHOPexporttable = lens _shuffleCHOPexporttable (\a b -> a {_shuffleCHOPexporttable = b})
shuffleCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
shuffleCHOPscope = lens _shuffleCHOPscope (\a b -> a {_shuffleCHOPscope = b})

timelineCHOPstart :: Lens' CHOP (Maybe (Tree Bool))
timelineCHOPstart = lens _timelineCHOPstart (\a b -> a {_timelineCHOPstart = b})
timelineCHOPend :: Lens' CHOP (Maybe (Tree Bool))
timelineCHOPend = lens _timelineCHOPend (\a b -> a {_timelineCHOPend = b})
timelineCHOPsignature1 :: Lens' CHOP (Maybe (Tree Bool))
timelineCHOPsignature1 = lens _timelineCHOPsignature1 (\a b -> a {_timelineCHOPsignature1 = b})
timelineCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
timelineCHOPexportmethod = lens _timelineCHOPexportmethod (\a b -> a {_timelineCHOPexportmethod = b})
timelineCHOPbpm :: Lens' CHOP (Maybe (Tree Bool))
timelineCHOPbpm = lens _timelineCHOPbpm (\a b -> a {_timelineCHOPbpm = b})
timelineCHOPrate :: Lens' CHOP (Maybe (Tree Bool))
timelineCHOPrate = lens _timelineCHOPrate (\a b -> a {_timelineCHOPrate = b})
timelineCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
timelineCHOPscope = lens _timelineCHOPscope (\a b -> a {_timelineCHOPscope = b})
timelineCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
timelineCHOPexporttable = lens _timelineCHOPexporttable (\a b -> a {_timelineCHOPexporttable = b})
timelineCHOPplay :: Lens' CHOP (Maybe (Tree Bool))
timelineCHOPplay = lens _timelineCHOPplay (\a b -> a {_timelineCHOPplay = b})
timelineCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
timelineCHOPsrselect = lens _timelineCHOPsrselect (\a b -> a {_timelineCHOPsrselect = b})
timelineCHOPsignature2 :: Lens' CHOP (Maybe (Tree Bool))
timelineCHOPsignature2 = lens _timelineCHOPsignature2 (\a b -> a {_timelineCHOPsignature2 = b})
timelineCHOPframe :: Lens' CHOP (Maybe (Tree Bool))
timelineCHOPframe = lens _timelineCHOPframe (\a b -> a {_timelineCHOPframe = b})
timelineCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
timelineCHOPtimeslice = lens _timelineCHOPtimeslice (\a b -> a {_timelineCHOPtimeslice = b})
timelineCHOPrangeend :: Lens' CHOP (Maybe (Tree Bool))
timelineCHOPrangeend = lens _timelineCHOPrangeend (\a b -> a {_timelineCHOPrangeend = b})
timelineCHOPrangestart :: Lens' CHOP (Maybe (Tree Bool))
timelineCHOPrangestart = lens _timelineCHOPrangestart (\a b -> a {_timelineCHOPrangestart = b})

lfoCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
lfoCHOPresetpulse = lens _lfoCHOPresetpulse (\a b -> a {_lfoCHOPresetpulse = b})
lfoCHOPresetcondition :: Lens' CHOP (Maybe (Tree Int))
lfoCHOPresetcondition = lens _lfoCHOPresetcondition (\a b -> a {_lfoCHOPresetcondition = b})
lfoCHOPbias :: Lens' CHOP (Maybe (Tree Float))
lfoCHOPbias = lens _lfoCHOPbias (\a b -> a {_lfoCHOPbias = b})
lfoCHOPrate :: Lens' CHOP (Maybe (Tree Float))
lfoCHOPrate = lens _lfoCHOPrate (\a b -> a {_lfoCHOPrate = b})
lfoCHOPchannelname :: Lens' CHOP (Maybe (Tree ByteString))
lfoCHOPchannelname = lens _lfoCHOPchannelname (\a b -> a {_lfoCHOPchannelname = b})
lfoCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
lfoCHOPscope = lens _lfoCHOPscope (\a b -> a {_lfoCHOPscope = b})
lfoCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
lfoCHOPexporttable = lens _lfoCHOPexporttable (\a b -> a {_lfoCHOPexporttable = b})
lfoCHOPwavetype :: Lens' CHOP (Maybe (Tree Int))
lfoCHOPwavetype = lens _lfoCHOPwavetype (\a b -> a {_lfoCHOPwavetype = b})
lfoCHOPplay :: Lens' CHOP (Maybe (Tree Bool))
lfoCHOPplay = lens _lfoCHOPplay (\a b -> a {_lfoCHOPplay = b})
lfoCHOPphase :: Lens' CHOP (Maybe (Tree Float))
lfoCHOPphase = lens _lfoCHOPphase (\a b -> a {_lfoCHOPphase = b})
lfoCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
lfoCHOPexportmethod = lens _lfoCHOPexportmethod (\a b -> a {_lfoCHOPexportmethod = b})
lfoCHOPfrequency :: Lens' CHOP (Maybe (Tree Float))
lfoCHOPfrequency = lens _lfoCHOPfrequency (\a b -> a {_lfoCHOPfrequency = b})
lfoCHOPoffset :: Lens' CHOP (Maybe (Tree Float))
lfoCHOPoffset = lens _lfoCHOPoffset (\a b -> a {_lfoCHOPoffset = b})
lfoCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
lfoCHOPsrselect = lens _lfoCHOPsrselect (\a b -> a {_lfoCHOPsrselect = b})
lfoCHOPamp :: Lens' CHOP (Maybe (Tree Float))
lfoCHOPamp = lens _lfoCHOPamp (\a b -> a {_lfoCHOPamp = b})
lfoCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
lfoCHOPtimeslice = lens _lfoCHOPtimeslice (\a b -> a {_lfoCHOPtimeslice = b})
lfoCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
lfoCHOPreset = lens _lfoCHOPreset (\a b -> a {_lfoCHOPreset = b})

triggerCHOPpeaklenunit :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPpeaklenunit = lens _triggerCHOPpeaklenunit (\a b -> a {_triggerCHOPpeaklenunit = b})
triggerCHOPthreshdown :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPthreshdown = lens _triggerCHOPthreshdown (\a b -> a {_triggerCHOPthreshdown = b})
triggerCHOPdecay :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPdecay = lens _triggerCHOPdecay (\a b -> a {_triggerCHOPdecay = b})
triggerCHOPpeak :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPpeak = lens _triggerCHOPpeak (\a b -> a {_triggerCHOPpeak = b})
triggerCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPexportmethod = lens _triggerCHOPexportmethod (\a b -> a {_triggerCHOPexportmethod = b})
triggerCHOPashape :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPashape = lens _triggerCHOPashape (\a b -> a {_triggerCHOPashape = b})
triggerCHOPminsustain :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPminsustain = lens _triggerCHOPminsustain (\a b -> a {_triggerCHOPminsustain = b})
triggerCHOPspecifyrate :: Lens' CHOP (Maybe (Tree Bool))
triggerCHOPspecifyrate = lens _triggerCHOPspecifyrate (\a b -> a {_triggerCHOPspecifyrate = b})
triggerCHOPclamppeak :: Lens' CHOP (Maybe (Tree Bool))
triggerCHOPclamppeak = lens _triggerCHOPclamppeak (\a b -> a {_triggerCHOPclamppeak = b})
triggerCHOPminsustainunit :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPminsustainunit = lens _triggerCHOPminsustainunit (\a b -> a {_triggerCHOPminsustainunit = b})
triggerCHOPdelayunit :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPdelayunit = lens _triggerCHOPdelayunit (\a b -> a {_triggerCHOPdelayunit = b})
triggerCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
triggerCHOPscope = lens _triggerCHOPscope (\a b -> a {_triggerCHOPscope = b})
triggerCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPsrselect = lens _triggerCHOPsrselect (\a b -> a {_triggerCHOPsrselect = b})
triggerCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
triggerCHOPexporttable = lens _triggerCHOPexporttable (\a b -> a {_triggerCHOPexporttable = b})
triggerCHOPretriggerunit :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPretriggerunit = lens _triggerCHOPretriggerunit (\a b -> a {_triggerCHOPretriggerunit = b})
triggerCHOPmultitriggeradd :: Lens' CHOP (Maybe (Tree Bool))
triggerCHOPmultitriggeradd = lens _triggerCHOPmultitriggeradd (\a b -> a {_triggerCHOPmultitriggeradd = b})
triggerCHOPretrigger :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPretrigger = lens _triggerCHOPretrigger (\a b -> a {_triggerCHOPretrigger = b})
triggerCHOPtriggeron :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPtriggeron = lens _triggerCHOPtriggeron (\a b -> a {_triggerCHOPtriggeron = b})
triggerCHOPsustain :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPsustain = lens _triggerCHOPsustain (\a b -> a {_triggerCHOPsustain = b})
triggerCHOPthreshup :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPthreshup = lens _triggerCHOPthreshup (\a b -> a {_triggerCHOPthreshup = b})
triggerCHOPremainder :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPremainder = lens _triggerCHOPremainder (\a b -> a {_triggerCHOPremainder = b})
triggerCHOPrate :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPrate = lens _triggerCHOPrate (\a b -> a {_triggerCHOPrate = b})
triggerCHOPmintriggerunit :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPmintriggerunit = lens _triggerCHOPmintriggerunit (\a b -> a {_triggerCHOPmintriggerunit = b})
triggerCHOPthreshold :: Lens' CHOP (Maybe (Tree Bool))
triggerCHOPthreshold = lens _triggerCHOPthreshold (\a b -> a {_triggerCHOPthreshold = b})
triggerCHOPdshape :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPdshape = lens _triggerCHOPdshape (\a b -> a {_triggerCHOPdshape = b})
triggerCHOPdelay :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPdelay = lens _triggerCHOPdelay (\a b -> a {_triggerCHOPdelay = b})
triggerCHOPrshape :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPrshape = lens _triggerCHOPrshape (\a b -> a {_triggerCHOPrshape = b})
triggerCHOPrelease :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPrelease = lens _triggerCHOPrelease (\a b -> a {_triggerCHOPrelease = b})
triggerCHOPcomplete :: Lens' CHOP (Maybe (Tree Bool))
triggerCHOPcomplete = lens _triggerCHOPcomplete (\a b -> a {_triggerCHOPcomplete = b})
triggerCHOPdecayunit :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPdecayunit = lens _triggerCHOPdecayunit (\a b -> a {_triggerCHOPdecayunit = b})
triggerCHOPreleaseunit :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPreleaseunit = lens _triggerCHOPreleaseunit (\a b -> a {_triggerCHOPreleaseunit = b})
triggerCHOPattackunit :: Lens' CHOP (Maybe (Tree Int))
triggerCHOPattackunit = lens _triggerCHOPattackunit (\a b -> a {_triggerCHOPattackunit = b})
triggerCHOPattack :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPattack = lens _triggerCHOPattack (\a b -> a {_triggerCHOPattack = b})
triggerCHOPpeaklen :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPpeaklen = lens _triggerCHOPpeaklen (\a b -> a {_triggerCHOPpeaklen = b})
triggerCHOPmintrigger :: Lens' CHOP (Maybe (Tree Float))
triggerCHOPmintrigger = lens _triggerCHOPmintrigger (\a b -> a {_triggerCHOPmintrigger = b})
triggerCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
triggerCHOPtimeslice = lens _triggerCHOPtimeslice (\a b -> a {_triggerCHOPtimeslice = b})
triggerCHOPchanname :: Lens' CHOP (Maybe (Tree ByteString))
triggerCHOPchanname = lens _triggerCHOPchanname (\a b -> a {_triggerCHOPchanname = b})
triggerCHOPtriggerpulse :: Lens' CHOP (Maybe (Tree Bool))
triggerCHOPtriggerpulse = lens _triggerCHOPtriggerpulse (\a b -> a {_triggerCHOPtriggerpulse = b})

stretchCHOPinterp :: Lens' CHOP (Maybe (Tree Int))
stretchCHOPinterp = lens _stretchCHOPinterp (\a b -> a {_stretchCHOPinterp = b})
stretchCHOPstart :: Lens' CHOP (Maybe (Tree Float))
stretchCHOPstart = lens _stretchCHOPstart (\a b -> a {_stretchCHOPstart = b})
stretchCHOPend :: Lens' CHOP (Maybe (Tree Float))
stretchCHOPend = lens _stretchCHOPend (\a b -> a {_stretchCHOPend = b})
stretchCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
stretchCHOPexportmethod = lens _stretchCHOPexportmethod (\a b -> a {_stretchCHOPexportmethod = b})
stretchCHOPreverse :: Lens' CHOP (Maybe (Tree Bool))
stretchCHOPreverse = lens _stretchCHOPreverse (\a b -> a {_stretchCHOPreverse = b})
stretchCHOPstartunit :: Lens' CHOP (Maybe (Tree Int))
stretchCHOPstartunit = lens _stretchCHOPstartunit (\a b -> a {_stretchCHOPstartunit = b})
stretchCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
stretchCHOPscope = lens _stretchCHOPscope (\a b -> a {_stretchCHOPscope = b})
stretchCHOPconstarea :: Lens' CHOP (Maybe (Tree Bool))
stretchCHOPconstarea = lens _stretchCHOPconstarea (\a b -> a {_stretchCHOPconstarea = b})
stretchCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
stretchCHOPtimeslice = lens _stretchCHOPtimeslice (\a b -> a {_stretchCHOPtimeslice = b})
stretchCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
stretchCHOPsrselect = lens _stretchCHOPsrselect (\a b -> a {_stretchCHOPsrselect = b})
stretchCHOPrelative :: Lens' CHOP (Maybe (Tree Int))
stretchCHOPrelative = lens _stretchCHOPrelative (\a b -> a {_stretchCHOPrelative = b})
stretchCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
stretchCHOPexporttable = lens _stretchCHOPexporttable (\a b -> a {_stretchCHOPexporttable = b})
stretchCHOPscale :: Lens' CHOP (Maybe (Tree Float))
stretchCHOPscale = lens _stretchCHOPscale (\a b -> a {_stretchCHOPscale = b})
stretchCHOPendunit :: Lens' CHOP (Maybe (Tree Int))
stretchCHOPendunit = lens _stretchCHOPendunit (\a b -> a {_stretchCHOPendunit = b})

cplusplusCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
cplusplusCHOPexportmethod = lens _cplusplusCHOPexportmethod (\a b -> a {_cplusplusCHOPexportmethod = b})
cplusplusCHOPreinitpulse :: Lens' CHOP (Maybe (Tree Bool))
cplusplusCHOPreinitpulse = lens _cplusplusCHOPreinitpulse (\a b -> a {_cplusplusCHOPreinitpulse = b})
cplusplusCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
cplusplusCHOPsrselect = lens _cplusplusCHOPsrselect (\a b -> a {_cplusplusCHOPsrselect = b})
cplusplusCHOPunloadplugin :: Lens' CHOP (Maybe (Tree Bool))
cplusplusCHOPunloadplugin = lens _cplusplusCHOPunloadplugin (\a b -> a {_cplusplusCHOPunloadplugin = b})
cplusplusCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
cplusplusCHOPexporttable = lens _cplusplusCHOPexporttable (\a b -> a {_cplusplusCHOPexporttable = b})
cplusplusCHOPplugin :: Lens' CHOP (Maybe (Tree ByteString))
cplusplusCHOPplugin = lens _cplusplusCHOPplugin (\a b -> a {_cplusplusCHOPplugin = b})
cplusplusCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
cplusplusCHOPtimeslice = lens _cplusplusCHOPtimeslice (\a b -> a {_cplusplusCHOPtimeslice = b})
cplusplusCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
cplusplusCHOPscope = lens _cplusplusCHOPscope (\a b -> a {_cplusplusCHOPscope = b})
cplusplusCHOPreinit :: Lens' CHOP (Maybe (Tree Bool))
cplusplusCHOPreinit = lens _cplusplusCHOPreinit (\a b -> a {_cplusplusCHOPreinit = b})

oscinCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
oscinCHOPresetpulse = lens _oscinCHOPresetpulse (\a b -> a {_oscinCHOPresetpulse = b})
oscinCHOPmaxtargetunit :: Lens' CHOP (Maybe (Tree Int))
oscinCHOPmaxtargetunit = lens _oscinCHOPmaxtargetunit (\a b -> a {_oscinCHOPmaxtargetunit = b})
oscinCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
oscinCHOPactive = lens _oscinCHOPactive (\a b -> a {_oscinCHOPactive = b})
oscinCHOPmaxqueueunit :: Lens' CHOP (Maybe (Tree Int))
oscinCHOPmaxqueueunit = lens _oscinCHOPmaxqueueunit (\a b -> a {_oscinCHOPmaxqueueunit = b})
oscinCHOPmintargetunit :: Lens' CHOP (Maybe (Tree Int))
oscinCHOPmintargetunit = lens _oscinCHOPmintargetunit (\a b -> a {_oscinCHOPmintargetunit = b})
oscinCHOPport :: Lens' CHOP (Maybe (Tree Int))
oscinCHOPport = lens _oscinCHOPport (\a b -> a {_oscinCHOPport = b})
oscinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
oscinCHOPexporttable = lens _oscinCHOPexporttable (\a b -> a {_oscinCHOPexporttable = b})
oscinCHOPmaxtarget :: Lens' CHOP (Maybe (Tree Float))
oscinCHOPmaxtarget = lens _oscinCHOPmaxtarget (\a b -> a {_oscinCHOPmaxtarget = b})
oscinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
oscinCHOPexportmethod = lens _oscinCHOPexportmethod (\a b -> a {_oscinCHOPexportmethod = b})
oscinCHOPqueued :: Lens' CHOP (Maybe (Tree Bool))
oscinCHOPqueued = lens _oscinCHOPqueued (\a b -> a {_oscinCHOPqueued = b})
oscinCHOPstripsegments :: Lens' CHOP (Maybe (Tree Int))
oscinCHOPstripsegments = lens _oscinCHOPstripsegments (\a b -> a {_oscinCHOPstripsegments = b})
oscinCHOPprotocol :: Lens' CHOP (Maybe (Tree Int))
oscinCHOPprotocol = lens _oscinCHOPprotocol (\a b -> a {_oscinCHOPprotocol = b})
oscinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
oscinCHOPscope = lens _oscinCHOPscope (\a b -> a {_oscinCHOPscope = b})
oscinCHOPoscaddressscope :: Lens' CHOP (Maybe (Tree ByteString))
oscinCHOPoscaddressscope = lens _oscinCHOPoscaddressscope (\a b -> a {_oscinCHOPoscaddressscope = b})
oscinCHOPmintarget :: Lens' CHOP (Maybe (Tree Float))
oscinCHOPmintarget = lens _oscinCHOPmintarget (\a b -> a {_oscinCHOPmintarget = b})
oscinCHOPadjusttimeunit :: Lens' CHOP (Maybe (Tree Int))
oscinCHOPadjusttimeunit = lens _oscinCHOPadjusttimeunit (\a b -> a {_oscinCHOPadjusttimeunit = b})
oscinCHOPuseglobalrate :: Lens' CHOP (Maybe (Tree Bool))
oscinCHOPuseglobalrate = lens _oscinCHOPuseglobalrate (\a b -> a {_oscinCHOPuseglobalrate = b})
oscinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
oscinCHOPsrselect = lens _oscinCHOPsrselect (\a b -> a {_oscinCHOPsrselect = b})
oscinCHOPmaxqueue :: Lens' CHOP (Maybe (Tree Float))
oscinCHOPmaxqueue = lens _oscinCHOPmaxqueue (\a b -> a {_oscinCHOPmaxqueue = b})
oscinCHOPadjusttime :: Lens' CHOP (Maybe (Tree Float))
oscinCHOPadjusttime = lens _oscinCHOPadjusttime (\a b -> a {_oscinCHOPadjusttime = b})
oscinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
oscinCHOPtimeslice = lens _oscinCHOPtimeslice (\a b -> a {_oscinCHOPtimeslice = b})
oscinCHOPnetaddress :: Lens' CHOP (Maybe (Tree ByteString))
oscinCHOPnetaddress = lens _oscinCHOPnetaddress (\a b -> a {_oscinCHOPnetaddress = b})
oscinCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
oscinCHOPreset = lens _oscinCHOPreset (\a b -> a {_oscinCHOPreset = b})
oscinCHOPsamplerate :: Lens' CHOP (Maybe (Tree Int))
oscinCHOPsamplerate = lens _oscinCHOPsamplerate (\a b -> a {_oscinCHOPsamplerate = b})

ltcinCHOPdebugchans :: Lens' CHOP (Maybe (Tree Bool))
ltcinCHOPdebugchans = lens _ltcinCHOPdebugchans (\a b -> a {_ltcinCHOPdebugchans = b})
ltcinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
ltcinCHOPexportmethod = lens _ltcinCHOPexportmethod (\a b -> a {_ltcinCHOPexportmethod = b})
ltcinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
ltcinCHOPsrselect = lens _ltcinCHOPsrselect (\a b -> a {_ltcinCHOPsrselect = b})
ltcinCHOPinputrate :: Lens' CHOP (Maybe (Tree Float))
ltcinCHOPinputrate = lens _ltcinCHOPinputrate (\a b -> a {_ltcinCHOPinputrate = b})
ltcinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
ltcinCHOPexporttable = lens _ltcinCHOPexporttable (\a b -> a {_ltcinCHOPexporttable = b})
ltcinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
ltcinCHOPtimeslice = lens _ltcinCHOPtimeslice (\a b -> a {_ltcinCHOPtimeslice = b})
ltcinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
ltcinCHOPscope = lens _ltcinCHOPscope (\a b -> a {_ltcinCHOPscope = b})
ltcinCHOPuserfields :: Lens' CHOP (Maybe (Tree Bool))
ltcinCHOPuserfields = lens _ltcinCHOPuserfields (\a b -> a {_ltcinCHOPuserfields = b})

tabletCHOPbutton22 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPbutton22 = lens _tabletCHOPbutton22 (\a b -> a {_tabletCHOPbutton22 = b})
tabletCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
tabletCHOPexportmethod = lens _tabletCHOPexportmethod (\a b -> a {_tabletCHOPexportmethod = b})
tabletCHOPtanpressure :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPtanpressure = lens _tabletCHOPtanpressure (\a b -> a {_tabletCHOPtanpressure = b})
tabletCHOPxcoord :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPxcoord = lens _tabletCHOPxcoord (\a b -> a {_tabletCHOPxcoord = b})
tabletCHOPbutton2 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPbutton2 = lens _tabletCHOPbutton2 (\a b -> a {_tabletCHOPbutton2 = b})
tabletCHOProtation2 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOProtation2 = lens _tabletCHOProtation2 (\a b -> a {_tabletCHOProtation2 = b})
tabletCHOPbutton1 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPbutton1 = lens _tabletCHOPbutton1 (\a b -> a {_tabletCHOPbutton1 = b})
tabletCHOPtanpressure2 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPtanpressure2 = lens _tabletCHOPtanpressure2 (\a b -> a {_tabletCHOPtanpressure2 = b})
tabletCHOPzcoord :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPzcoord = lens _tabletCHOPzcoord (\a b -> a {_tabletCHOPzcoord = b})
tabletCHOPleft :: Lens' CHOP (Maybe (Tree Int))
tabletCHOPleft = lens _tabletCHOPleft (\a b -> a {_tabletCHOPleft = b})
tabletCHOPpressure :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPpressure = lens _tabletCHOPpressure (\a b -> a {_tabletCHOPpressure = b})
tabletCHOPbutton25 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPbutton25 = lens _tabletCHOPbutton25 (\a b -> a {_tabletCHOPbutton25 = b})
tabletCHOPpressure2 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPpressure2 = lens _tabletCHOPpressure2 (\a b -> a {_tabletCHOPpressure2 = b})
tabletCHOPycoord2 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPycoord2 = lens _tabletCHOPycoord2 (\a b -> a {_tabletCHOPycoord2 = b})
tabletCHOPactive :: Lens' CHOP (Maybe (Tree Int))
tabletCHOPactive = lens _tabletCHOPactive (\a b -> a {_tabletCHOPactive = b})
tabletCHOPxtilt2 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPxtilt2 = lens _tabletCHOPxtilt2 (\a b -> a {_tabletCHOPxtilt2 = b})
tabletCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
tabletCHOPexporttable = lens _tabletCHOPexporttable (\a b -> a {_tabletCHOPexporttable = b})
tabletCHOPytilt :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPytilt = lens _tabletCHOPytilt (\a b -> a {_tabletCHOPytilt = b})
tabletCHOPbutton3 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPbutton3 = lens _tabletCHOPbutton3 (\a b -> a {_tabletCHOPbutton3 = b})
tabletCHOPzcoord2 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPzcoord2 = lens _tabletCHOPzcoord2 (\a b -> a {_tabletCHOPzcoord2 = b})
tabletCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
tabletCHOPdefval = lens _tabletCHOPdefval (\a b -> a {_tabletCHOPdefval = b})
tabletCHOPxtilt :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPxtilt = lens _tabletCHOPxtilt (\a b -> a {_tabletCHOPxtilt = b})
tabletCHOPbutton21 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPbutton21 = lens _tabletCHOPbutton21 (\a b -> a {_tabletCHOPbutton21 = b})
tabletCHOPbutton5 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPbutton5 = lens _tabletCHOPbutton5 (\a b -> a {_tabletCHOPbutton5 = b})
tabletCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
tabletCHOPtimeslice = lens _tabletCHOPtimeslice (\a b -> a {_tabletCHOPtimeslice = b})
tabletCHOPrate :: Lens' CHOP (Maybe (Tree Float))
tabletCHOPrate = lens _tabletCHOPrate (\a b -> a {_tabletCHOPrate = b})
tabletCHOPytilt2 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPytilt2 = lens _tabletCHOPytilt2 (\a b -> a {_tabletCHOPytilt2 = b})
tabletCHOPbutton24 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPbutton24 = lens _tabletCHOPbutton24 (\a b -> a {_tabletCHOPbutton24 = b})
tabletCHOPycoord :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPycoord = lens _tabletCHOPycoord (\a b -> a {_tabletCHOPycoord = b})
tabletCHOProtation :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOProtation = lens _tabletCHOProtation (\a b -> a {_tabletCHOProtation = b})
tabletCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
tabletCHOPsrselect = lens _tabletCHOPsrselect (\a b -> a {_tabletCHOPsrselect = b})
tabletCHOPbutton4 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPbutton4 = lens _tabletCHOPbutton4 (\a b -> a {_tabletCHOPbutton4 = b})
tabletCHOPxcoord2 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPxcoord2 = lens _tabletCHOPxcoord2 (\a b -> a {_tabletCHOPxcoord2 = b})
tabletCHOPbutton23 :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPbutton23 = lens _tabletCHOPbutton23 (\a b -> a {_tabletCHOPbutton23 = b})
tabletCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
tabletCHOPscope = lens _tabletCHOPscope (\a b -> a {_tabletCHOPscope = b})
tabletCHOPright :: Lens' CHOP (Maybe (Tree Int))
tabletCHOPright = lens _tabletCHOPright (\a b -> a {_tabletCHOPright = b})

eventCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
eventCHOPresetpulse = lens _eventCHOPresetpulse (\a b -> a {_eventCHOPresetpulse = b})
eventCHOPspeed :: Lens' CHOP (Maybe (Tree Float))
eventCHOPspeed = lens _eventCHOPspeed (\a b -> a {_eventCHOPspeed = b})
eventCHOPactive :: Lens' CHOP (Maybe (Tree ByteString))
eventCHOPactive = lens _eventCHOPactive (\a b -> a {_eventCHOPactive = b})
eventCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
eventCHOPexportmethod = lens _eventCHOPexportmethod (\a b -> a {_eventCHOPexportmethod = b})
eventCHOPdecaytime :: Lens' CHOP (Maybe (Tree Float))
eventCHOPdecaytime = lens _eventCHOPdecaytime (\a b -> a {_eventCHOPdecaytime = b})
eventCHOPreleasetunit :: Lens' CHOP (Maybe (Tree Int))
eventCHOPreleasetunit = lens _eventCHOPreleasetunit (\a b -> a {_eventCHOPreleasetunit = b})
eventCHOPadsr :: Lens' CHOP (Maybe (Tree ByteString))
eventCHOPadsr = lens _eventCHOPadsr (\a b -> a {_eventCHOPadsr = b})
eventCHOPsustainmin :: Lens' CHOP (Maybe (Tree Float))
eventCHOPsustainmin = lens _eventCHOPsustainmin (\a b -> a {_eventCHOPsustainmin = b})
eventCHOPcallbacks :: Lens' CHOP (Maybe (Tree DAT))
eventCHOPcallbacks = lens _eventCHOPcallbacks (\a b -> a {_eventCHOPcallbacks = b})
eventCHOPreleaselevel :: Lens' CHOP (Maybe (Tree Float))
eventCHOPreleaselevel = lens _eventCHOPreleaselevel (\a b -> a {_eventCHOPreleaselevel = b})
eventCHOPreleasetime :: Lens' CHOP (Maybe (Tree Float))
eventCHOPreleasetime = lens _eventCHOPreleasetime (\a b -> a {_eventCHOPreleasetime = b})
eventCHOPsustaintunit :: Lens' CHOP (Maybe (Tree Int))
eventCHOPsustaintunit = lens _eventCHOPsustaintunit (\a b -> a {_eventCHOPsustaintunit = b})
eventCHOPid :: Lens' CHOP (Maybe (Tree ByteString))
eventCHOPid = lens _eventCHOPid (\a b -> a {_eventCHOPid = b})
eventCHOPindex :: Lens' CHOP (Maybe (Tree ByteString))
eventCHOPindex = lens _eventCHOPindex (\a b -> a {_eventCHOPindex = b})
eventCHOPattacktime :: Lens' CHOP (Maybe (Tree Float))
eventCHOPattacktime = lens _eventCHOPattacktime (\a b -> a {_eventCHOPattacktime = b})
eventCHOPsustaintime :: Lens' CHOP (Maybe (Tree Float))
eventCHOPsustaintime = lens _eventCHOPsustaintime (\a b -> a {_eventCHOPsustaintime = b})
eventCHOPsustainmax :: Lens' CHOP (Maybe (Tree Float))
eventCHOPsustainmax = lens _eventCHOPsustainmax (\a b -> a {_eventCHOPsustainmax = b})
eventCHOPresetcondition :: Lens' CHOP (Maybe (Tree Int))
eventCHOPresetcondition = lens _eventCHOPresetcondition (\a b -> a {_eventCHOPresetcondition = b})
eventCHOPattacklevel :: Lens' CHOP (Maybe (Tree Float))
eventCHOPattacklevel = lens _eventCHOPattacklevel (\a b -> a {_eventCHOPattacklevel = b})
eventCHOPstate :: Lens' CHOP (Maybe (Tree ByteString))
eventCHOPstate = lens _eventCHOPstate (\a b -> a {_eventCHOPstate = b})
eventCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
eventCHOPscope = lens _eventCHOPscope (\a b -> a {_eventCHOPscope = b})
eventCHOPglobalspeed :: Lens' CHOP (Maybe (Tree Float))
eventCHOPglobalspeed = lens _eventCHOPglobalspeed (\a b -> a {_eventCHOPglobalspeed = b})
eventCHOPtime :: Lens' CHOP (Maybe (Tree ByteString))
eventCHOPtime = lens _eventCHOPtime (\a b -> a {_eventCHOPtime = b})
eventCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
eventCHOPsrselect = lens _eventCHOPsrselect (\a b -> a {_eventCHOPsrselect = b})
eventCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
eventCHOPreset = lens _eventCHOPreset (\a b -> a {_eventCHOPreset = b})
eventCHOPattacktunit :: Lens' CHOP (Maybe (Tree Int))
eventCHOPattacktunit = lens _eventCHOPattacktunit (\a b -> a {_eventCHOPattacktunit = b})
eventCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
eventCHOPexporttable = lens _eventCHOPexporttable (\a b -> a {_eventCHOPexporttable = b})
eventCHOPdecaytunit :: Lens' CHOP (Maybe (Tree Int))
eventCHOPdecaytunit = lens _eventCHOPdecaytunit (\a b -> a {_eventCHOPdecaytunit = b})
eventCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
eventCHOPtimeslice = lens _eventCHOPtimeslice (\a b -> a {_eventCHOPtimeslice = b})
eventCHOPinput :: Lens' CHOP (Maybe (Tree ByteString))
eventCHOPinput = lens _eventCHOPinput (\a b -> a {_eventCHOPinput = b})

touchinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
touchinCHOPexportmethod = lens _touchinCHOPexportmethod (\a b -> a {_touchinCHOPexportmethod = b})
touchinCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
touchinCHOPactive = lens _touchinCHOPactive (\a b -> a {_touchinCHOPactive = b})
touchinCHOPrecover :: Lens' CHOP (Maybe (Tree Bool))
touchinCHOPrecover = lens _touchinCHOPrecover (\a b -> a {_touchinCHOPrecover = b})
touchinCHOPprotocol :: Lens' CHOP (Maybe (Tree Int))
touchinCHOPprotocol = lens _touchinCHOPprotocol (\a b -> a {_touchinCHOPprotocol = b})
touchinCHOPqueuevarianceunit :: Lens' CHOP (Maybe (Tree Int))
touchinCHOPqueuevarianceunit = lens _touchinCHOPqueuevarianceunit (\a b -> a {_touchinCHOPqueuevarianceunit = b})
touchinCHOPmaxqueueunit :: Lens' CHOP (Maybe (Tree Int))
touchinCHOPmaxqueueunit = lens _touchinCHOPmaxqueueunit (\a b -> a {_touchinCHOPmaxqueueunit = b})
touchinCHOPaddress :: Lens' CHOP (Maybe (Tree ByteString))
touchinCHOPaddress = lens _touchinCHOPaddress (\a b -> a {_touchinCHOPaddress = b})
touchinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
touchinCHOPscope = lens _touchinCHOPscope (\a b -> a {_touchinCHOPscope = b})
touchinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
touchinCHOPexporttable = lens _touchinCHOPexporttable (\a b -> a {_touchinCHOPexporttable = b})
touchinCHOPadjusttimeunit :: Lens' CHOP (Maybe (Tree Int))
touchinCHOPadjusttimeunit = lens _touchinCHOPadjusttimeunit (\a b -> a {_touchinCHOPadjusttimeunit = b})
touchinCHOPqueuetarget :: Lens' CHOP (Maybe (Tree Float))
touchinCHOPqueuetarget = lens _touchinCHOPqueuetarget (\a b -> a {_touchinCHOPqueuetarget = b})
touchinCHOPqueuetargetunit :: Lens' CHOP (Maybe (Tree Int))
touchinCHOPqueuetargetunit = lens _touchinCHOPqueuetargetunit (\a b -> a {_touchinCHOPqueuetargetunit = b})
touchinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
touchinCHOPsrselect = lens _touchinCHOPsrselect (\a b -> a {_touchinCHOPsrselect = b})
touchinCHOPmaxqueue :: Lens' CHOP (Maybe (Tree Float))
touchinCHOPmaxqueue = lens _touchinCHOPmaxqueue (\a b -> a {_touchinCHOPmaxqueue = b})
touchinCHOPadjusttime :: Lens' CHOP (Maybe (Tree Float))
touchinCHOPadjusttime = lens _touchinCHOPadjusttime (\a b -> a {_touchinCHOPadjusttime = b})
touchinCHOPport :: Lens' CHOP (Maybe (Tree Int))
touchinCHOPport = lens _touchinCHOPport (\a b -> a {_touchinCHOPport = b})
touchinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
touchinCHOPtimeslice = lens _touchinCHOPtimeslice (\a b -> a {_touchinCHOPtimeslice = b})
touchinCHOPsyncports :: Lens' CHOP (Maybe (Tree Int))
touchinCHOPsyncports = lens _touchinCHOPsyncports (\a b -> a {_touchinCHOPsyncports = b})
touchinCHOPqueuevariance :: Lens' CHOP (Maybe (Tree Float))
touchinCHOPqueuevariance = lens _touchinCHOPqueuevariance (\a b -> a {_touchinCHOPqueuevariance = b})

hogCHOPdelay :: Lens' CHOP (Maybe (Tree Float))
hogCHOPdelay = lens _hogCHOPdelay (\a b -> a {_hogCHOPdelay = b})
hogCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
hogCHOPexportmethod = lens _hogCHOPexportmethod (\a b -> a {_hogCHOPexportmethod = b})
hogCHOPdelayunit :: Lens' CHOP (Maybe (Tree Int))
hogCHOPdelayunit = lens _hogCHOPdelayunit (\a b -> a {_hogCHOPdelayunit = b})
hogCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
hogCHOPactive = lens _hogCHOPactive (\a b -> a {_hogCHOPactive = b})
hogCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
hogCHOPsrselect = lens _hogCHOPsrselect (\a b -> a {_hogCHOPsrselect = b})
hogCHOPcookalways :: Lens' CHOP (Maybe (Tree Bool))
hogCHOPcookalways = lens _hogCHOPcookalways (\a b -> a {_hogCHOPcookalways = b})
hogCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
hogCHOPtimeslice = lens _hogCHOPtimeslice (\a b -> a {_hogCHOPtimeslice = b})
hogCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
hogCHOPscope = lens _hogCHOPscope (\a b -> a {_hogCHOPscope = b})
hogCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
hogCHOPexporttable = lens _hogCHOPexporttable (\a b -> a {_hogCHOPexporttable = b})

patternCHOPreverse :: Lens' CHOP (Maybe (Tree Bool))
patternCHOPreverse = lens _patternCHOPreverse (\a b -> a {_patternCHOPreverse = b})
patternCHOPphasestep :: Lens' CHOP (Maybe (Tree Float))
patternCHOPphasestep = lens _patternCHOPphasestep (\a b -> a {_patternCHOPphasestep = b})
patternCHOPinteger :: Lens' CHOP (Maybe (Tree Int))
patternCHOPinteger = lens _patternCHOPinteger (\a b -> a {_patternCHOPinteger = b})
patternCHOPbias :: Lens' CHOP (Maybe (Tree Float))
patternCHOPbias = lens _patternCHOPbias (\a b -> a {_patternCHOPbias = b})
patternCHOPtaper1 :: Lens' CHOP (Maybe (Tree Float))
patternCHOPtaper1 = lens _patternCHOPtaper1 (\a b -> a {_patternCHOPtaper1 = b})
patternCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
patternCHOPtimeslice = lens _patternCHOPtimeslice (\a b -> a {_patternCHOPtimeslice = b})
patternCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
patternCHOPdefval = lens _patternCHOPdefval (\a b -> a {_patternCHOPdefval = b})
patternCHOPwavetype :: Lens' CHOP (Maybe (Tree Int))
patternCHOPwavetype = lens _patternCHOPwavetype (\a b -> a {_patternCHOPwavetype = b})
patternCHOPphase :: Lens' CHOP (Maybe (Tree Float))
patternCHOPphase = lens _patternCHOPphase (\a b -> a {_patternCHOPphase = b})
patternCHOPfromrange1 :: Lens' CHOP (Maybe (Tree Float))
patternCHOPfromrange1 = lens _patternCHOPfromrange1 (\a b -> a {_patternCHOPfromrange1 = b})
patternCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
patternCHOPexporttable = lens _patternCHOPexporttable (\a b -> a {_patternCHOPexporttable = b})
patternCHOPtaper2 :: Lens' CHOP (Maybe (Tree Float))
patternCHOPtaper2 = lens _patternCHOPtaper2 (\a b -> a {_patternCHOPtaper2 = b})
patternCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
patternCHOPexportmethod = lens _patternCHOPexportmethod (\a b -> a {_patternCHOPexportmethod = b})
patternCHOPleft :: Lens' CHOP (Maybe (Tree Int))
patternCHOPleft = lens _patternCHOPleft (\a b -> a {_patternCHOPleft = b})
patternCHOPtorange1 :: Lens' CHOP (Maybe (Tree Float))
patternCHOPtorange1 = lens _patternCHOPtorange1 (\a b -> a {_patternCHOPtorange1 = b})
patternCHOPfromrange2 :: Lens' CHOP (Maybe (Tree Float))
patternCHOPfromrange2 = lens _patternCHOPfromrange2 (\a b -> a {_patternCHOPfromrange2 = b})
patternCHOPcombine :: Lens' CHOP (Maybe (Tree Int))
patternCHOPcombine = lens _patternCHOPcombine (\a b -> a {_patternCHOPcombine = b})
patternCHOPchannelname :: Lens' CHOP (Maybe (Tree ByteString))
patternCHOPchannelname = lens _patternCHOPchannelname (\a b -> a {_patternCHOPchannelname = b})
patternCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
patternCHOPscope = lens _patternCHOPscope (\a b -> a {_patternCHOPscope = b})
patternCHOPlength :: Lens' CHOP (Maybe (Tree Int))
patternCHOPlength = lens _patternCHOPlength (\a b -> a {_patternCHOPlength = b})
patternCHOPseed :: Lens' CHOP (Maybe (Tree Float))
patternCHOPseed = lens _patternCHOPseed (\a b -> a {_patternCHOPseed = b})
patternCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
patternCHOPsrselect = lens _patternCHOPsrselect (\a b -> a {_patternCHOPsrselect = b})
patternCHOPoffset :: Lens' CHOP (Maybe (Tree Float))
patternCHOPoffset = lens _patternCHOPoffset (\a b -> a {_patternCHOPoffset = b})
patternCHOPnumcycles :: Lens' CHOP (Maybe (Tree Float))
patternCHOPnumcycles = lens _patternCHOPnumcycles (\a b -> a {_patternCHOPnumcycles = b})
patternCHOPamp :: Lens' CHOP (Maybe (Tree Float))
patternCHOPamp = lens _patternCHOPamp (\a b -> a {_patternCHOPamp = b})
patternCHOPtaperdecay :: Lens' CHOP (Maybe (Tree Float))
patternCHOPtaperdecay = lens _patternCHOPtaperdecay (\a b -> a {_patternCHOPtaperdecay = b})
patternCHOPright :: Lens' CHOP (Maybe (Tree Int))
patternCHOPright = lens _patternCHOPright (\a b -> a {_patternCHOPright = b})
patternCHOPrate :: Lens' CHOP (Maybe (Tree Float))
patternCHOPrate = lens _patternCHOPrate (\a b -> a {_patternCHOPrate = b})
patternCHOPtorange2 :: Lens' CHOP (Maybe (Tree Float))
patternCHOPtorange2 = lens _patternCHOPtorange2 (\a b -> a {_patternCHOPtorange2 = b})

audiorenderCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audiorenderCHOPexportmethod = lens _audiorenderCHOPexportmethod (\a b -> a {_audiorenderCHOPexportmethod = b})
audiorenderCHOPoutputformat :: Lens' CHOP (Maybe (Tree Int))
audiorenderCHOPoutputformat = lens _audiorenderCHOPoutputformat (\a b -> a {_audiorenderCHOPoutputformat = b})
audiorenderCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
audiorenderCHOPactive = lens _audiorenderCHOPactive (\a b -> a {_audiorenderCHOPactive = b})
audiorenderCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audiorenderCHOPtimeslice = lens _audiorenderCHOPtimeslice (\a b -> a {_audiorenderCHOPtimeslice = b})
audiorenderCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audiorenderCHOPscope = lens _audiorenderCHOPscope (\a b -> a {_audiorenderCHOPscope = b})
audiorenderCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audiorenderCHOPexporttable = lens _audiorenderCHOPexporttable (\a b -> a {_audiorenderCHOPexporttable = b})
audiorenderCHOPmappingtable :: Lens' CHOP (Maybe (Tree DAT))
audiorenderCHOPmappingtable = lens _audiorenderCHOPmappingtable (\a b -> a {_audiorenderCHOPmappingtable = b})
audiorenderCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audiorenderCHOPsrselect = lens _audiorenderCHOPsrselect (\a b -> a {_audiorenderCHOPsrselect = b})
audiorenderCHOPattenuation :: Lens' CHOP (Maybe (Tree Bool))
audiorenderCHOPattenuation = lens _audiorenderCHOPattenuation (\a b -> a {_audiorenderCHOPattenuation = b})

midioutCHOPautonoteoff :: Lens' CHOP (Maybe (Tree Int))
midioutCHOPautonoteoff = lens _midioutCHOPautonoteoff (\a b -> a {_midioutCHOPautonoteoff = b})
midioutCHOPcookalways :: Lens' CHOP (Maybe (Tree Bool))
midioutCHOPcookalways = lens _midioutCHOPcookalways (\a b -> a {_midioutCHOPcookalways = b})
midioutCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
midioutCHOPactive = lens _midioutCHOPactive (\a b -> a {_midioutCHOPactive = b})
midioutCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
midioutCHOPexportmethod = lens _midioutCHOPexportmethod (\a b -> a {_midioutCHOPexportmethod = b})
midioutCHOPvolumeon :: Lens' CHOP (Maybe (Tree Bool))
midioutCHOPvolumeon = lens _midioutCHOPvolumeon (\a b -> a {_midioutCHOPvolumeon = b})
midioutCHOPcontrolnorm :: Lens' CHOP (Maybe (Tree Int))
midioutCHOPcontrolnorm = lens _midioutCHOPcontrolnorm (\a b -> a {_midioutCHOPcontrolnorm = b})
midioutCHOPonebased :: Lens' CHOP (Maybe (Tree Bool))
midioutCHOPonebased = lens _midioutCHOPonebased (\a b -> a {_midioutCHOPonebased = b})
midioutCHOPfile :: Lens' CHOP (Maybe (Tree ByteString))
midioutCHOPfile = lens _midioutCHOPfile (\a b -> a {_midioutCHOPfile = b})
midioutCHOPnotename :: Lens' CHOP (Maybe (Tree ByteString))
midioutCHOPnotename = lens _midioutCHOPnotename (\a b -> a {_midioutCHOPnotename = b})
midioutCHOPcontrolname :: Lens' CHOP (Maybe (Tree ByteString))
midioutCHOPcontrolname = lens _midioutCHOPcontrolname (\a b -> a {_midioutCHOPcontrolname = b})
midioutCHOPcontrolformat :: Lens' CHOP (Maybe (Tree Int))
midioutCHOPcontrolformat = lens _midioutCHOPcontrolformat (\a b -> a {_midioutCHOPcontrolformat = b})
midioutCHOPnotenorm :: Lens' CHOP (Maybe (Tree Int))
midioutCHOPnotenorm = lens _midioutCHOPnotenorm (\a b -> a {_midioutCHOPnotenorm = b})
midioutCHOPpressname :: Lens' CHOP (Maybe (Tree ByteString))
midioutCHOPpressname = lens _midioutCHOPpressname (\a b -> a {_midioutCHOPpressname = b})
midioutCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
midioutCHOPexporttable = lens _midioutCHOPexporttable (\a b -> a {_midioutCHOPexporttable = b})
midioutCHOPvolumeoff :: Lens' CHOP (Maybe (Tree Bool))
midioutCHOPvolumeoff = lens _midioutCHOPvolumeoff (\a b -> a {_midioutCHOPvolumeoff = b})
midioutCHOPid :: Lens' CHOP (Maybe (Tree ByteString))
midioutCHOPid = lens _midioutCHOPid (\a b -> a {_midioutCHOPid = b})
midioutCHOPdestination :: Lens' CHOP (Maybe (Tree Int))
midioutCHOPdestination = lens _midioutCHOPdestination (\a b -> a {_midioutCHOPdestination = b})
midioutCHOPbarticks :: Lens' CHOP (Maybe (Tree Int))
midioutCHOPbarticks = lens _midioutCHOPbarticks (\a b -> a {_midioutCHOPbarticks = b})
midioutCHOPpitchname :: Lens' CHOP (Maybe (Tree ByteString))
midioutCHOPpitchname = lens _midioutCHOPpitchname (\a b -> a {_midioutCHOPpitchname = b})
midioutCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
midioutCHOPscope = lens _midioutCHOPscope (\a b -> a {_midioutCHOPscope = b})
midioutCHOPbarname :: Lens' CHOP (Maybe (Tree ByteString))
midioutCHOPbarname = lens _midioutCHOPbarname (\a b -> a {_midioutCHOPbarname = b})
midioutCHOPprogname :: Lens' CHOP (Maybe (Tree ByteString))
midioutCHOPprogname = lens _midioutCHOPprogname (\a b -> a {_midioutCHOPprogname = b})
midioutCHOPdevice :: Lens' CHOP (Maybe (Tree DAT))
midioutCHOPdevice = lens _midioutCHOPdevice (\a b -> a {_midioutCHOPdevice = b})
midioutCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
midioutCHOPreset = lens _midioutCHOPreset (\a b -> a {_midioutCHOPreset = b})
midioutCHOPwritefile :: Lens' CHOP (Maybe (Tree Bool))
midioutCHOPwritefile = lens _midioutCHOPwritefile (\a b -> a {_midioutCHOPwritefile = b})
midioutCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
midioutCHOPsrselect = lens _midioutCHOPsrselect (\a b -> a {_midioutCHOPsrselect = b})
midioutCHOPaftername :: Lens' CHOP (Maybe (Tree ByteString))
midioutCHOPaftername = lens _midioutCHOPaftername (\a b -> a {_midioutCHOPaftername = b})
midioutCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
midioutCHOPtimeslice = lens _midioutCHOPtimeslice (\a b -> a {_midioutCHOPtimeslice = b})
midioutCHOPstartstop :: Lens' CHOP (Maybe (Tree Bool))
midioutCHOPstartstop = lens _midioutCHOPstartstop (\a b -> a {_midioutCHOPstartstop = b})
midioutCHOPprefix :: Lens' CHOP (Maybe (Tree ByteString))
midioutCHOPprefix = lens _midioutCHOPprefix (\a b -> a {_midioutCHOPprefix = b})

audiodeviceoutCHOPerrormissing :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPerrormissing = lens _audiodeviceoutCHOPerrormissing (\a b -> a {_audiodeviceoutCHOPerrormissing = b})
audiodeviceoutCHOPfrontleftcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPfrontleftcenter = lens _audiodeviceoutCHOPfrontleftcenter (\a b -> a {_audiodeviceoutCHOPfrontleftcenter = b})
audiodeviceoutCHOPtopfrontright :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPtopfrontright = lens _audiodeviceoutCHOPtopfrontright (\a b -> a {_audiodeviceoutCHOPtopfrontright = b})
audiodeviceoutCHOPcookalways :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPcookalways = lens _audiodeviceoutCHOPcookalways (\a b -> a {_audiodeviceoutCHOPcookalways = b})
audiodeviceoutCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPactive = lens _audiodeviceoutCHOPactive (\a b -> a {_audiodeviceoutCHOPactive = b})
audiodeviceoutCHOPtopbackcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPtopbackcenter = lens _audiodeviceoutCHOPtopbackcenter (\a b -> a {_audiodeviceoutCHOPtopbackcenter = b})
audiodeviceoutCHOPdriver :: Lens' CHOP (Maybe (Tree Int))
audiodeviceoutCHOPdriver = lens _audiodeviceoutCHOPdriver (\a b -> a {_audiodeviceoutCHOPdriver = b})
audiodeviceoutCHOPtopbackleft :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPtopbackleft = lens _audiodeviceoutCHOPtopbackleft (\a b -> a {_audiodeviceoutCHOPtopbackleft = b})
audiodeviceoutCHOPpan :: Lens' CHOP (Maybe (Tree Float))
audiodeviceoutCHOPpan = lens _audiodeviceoutCHOPpan (\a b -> a {_audiodeviceoutCHOPpan = b})
audiodeviceoutCHOPbufferlength :: Lens' CHOP (Maybe (Tree Float))
audiodeviceoutCHOPbufferlength = lens _audiodeviceoutCHOPbufferlength (\a b -> a {_audiodeviceoutCHOPbufferlength = b})
audiodeviceoutCHOPfrontright :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPfrontright = lens _audiodeviceoutCHOPfrontright (\a b -> a {_audiodeviceoutCHOPfrontright = b})
audiodeviceoutCHOPfrontcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPfrontcenter = lens _audiodeviceoutCHOPfrontcenter (\a b -> a {_audiodeviceoutCHOPfrontcenter = b})
audiodeviceoutCHOPsideright :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPsideright = lens _audiodeviceoutCHOPsideright (\a b -> a {_audiodeviceoutCHOPsideright = b})
audiodeviceoutCHOPsideleft :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPsideleft = lens _audiodeviceoutCHOPsideleft (\a b -> a {_audiodeviceoutCHOPsideleft = b})
audiodeviceoutCHOPfrontrightcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPfrontrightcenter = lens _audiodeviceoutCHOPfrontrightcenter (\a b -> a {_audiodeviceoutCHOPfrontrightcenter = b})
audiodeviceoutCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audiodeviceoutCHOPexporttable = lens _audiodeviceoutCHOPexporttable (\a b -> a {_audiodeviceoutCHOPexporttable = b})
audiodeviceoutCHOPclampoutput :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPclampoutput = lens _audiodeviceoutCHOPclampoutput (\a b -> a {_audiodeviceoutCHOPclampoutput = b})
audiodeviceoutCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audiodeviceoutCHOPexportmethod = lens _audiodeviceoutCHOPexportmethod (\a b -> a {_audiodeviceoutCHOPexportmethod = b})
audiodeviceoutCHOPbackcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPbackcenter = lens _audiodeviceoutCHOPbackcenter (\a b -> a {_audiodeviceoutCHOPbackcenter = b})
audiodeviceoutCHOPtopcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPtopcenter = lens _audiodeviceoutCHOPtopcenter (\a b -> a {_audiodeviceoutCHOPtopcenter = b})
audiodeviceoutCHOPtopbackright :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPtopbackright = lens _audiodeviceoutCHOPtopbackright (\a b -> a {_audiodeviceoutCHOPtopbackright = b})
audiodeviceoutCHOPlowfrequency :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPlowfrequency = lens _audiodeviceoutCHOPlowfrequency (\a b -> a {_audiodeviceoutCHOPlowfrequency = b})
audiodeviceoutCHOPtopfrontcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPtopfrontcenter = lens _audiodeviceoutCHOPtopfrontcenter (\a b -> a {_audiodeviceoutCHOPtopfrontcenter = b})
audiodeviceoutCHOPbackleft :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPbackleft = lens _audiodeviceoutCHOPbackleft (\a b -> a {_audiodeviceoutCHOPbackleft = b})
audiodeviceoutCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audiodeviceoutCHOPscope = lens _audiodeviceoutCHOPscope (\a b -> a {_audiodeviceoutCHOPscope = b})
audiodeviceoutCHOPfrontleft :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPfrontleft = lens _audiodeviceoutCHOPfrontleft (\a b -> a {_audiodeviceoutCHOPfrontleft = b})
audiodeviceoutCHOPtopfrontleft :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPtopfrontleft = lens _audiodeviceoutCHOPtopfrontleft (\a b -> a {_audiodeviceoutCHOPtopfrontleft = b})
audiodeviceoutCHOPdevice :: Lens' CHOP (Maybe (Tree ByteString))
audiodeviceoutCHOPdevice = lens _audiodeviceoutCHOPdevice (\a b -> a {_audiodeviceoutCHOPdevice = b})
audiodeviceoutCHOPvolume :: Lens' CHOP (Maybe (Tree Float))
audiodeviceoutCHOPvolume = lens _audiodeviceoutCHOPvolume (\a b -> a {_audiodeviceoutCHOPvolume = b})
audiodeviceoutCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audiodeviceoutCHOPsrselect = lens _audiodeviceoutCHOPsrselect (\a b -> a {_audiodeviceoutCHOPsrselect = b})
audiodeviceoutCHOPoutputs :: Lens' CHOP (Maybe (Tree ByteString))
audiodeviceoutCHOPoutputs = lens _audiodeviceoutCHOPoutputs (\a b -> a {_audiodeviceoutCHOPoutputs = b})
audiodeviceoutCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPtimeslice = lens _audiodeviceoutCHOPtimeslice (\a b -> a {_audiodeviceoutCHOPtimeslice = b})
audiodeviceoutCHOPbackright :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceoutCHOPbackright = lens _audiodeviceoutCHOPbackright (\a b -> a {_audiodeviceoutCHOPbackright = b})

springCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
springCHOPexportmethod = lens _springCHOPexportmethod (\a b -> a {_springCHOPexportmethod = b})
springCHOPdampingk :: Lens' CHOP (Maybe (Tree Float))
springCHOPdampingk = lens _springCHOPdampingk (\a b -> a {_springCHOPdampingk = b})
springCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
springCHOPexporttable = lens _springCHOPexporttable (\a b -> a {_springCHOPexporttable = b})
springCHOPinitspeed :: Lens' CHOP (Maybe (Tree Float))
springCHOPinitspeed = lens _springCHOPinitspeed (\a b -> a {_springCHOPinitspeed = b})
springCHOPspringk :: Lens' CHOP (Maybe (Tree Float))
springCHOPspringk = lens _springCHOPspringk (\a b -> a {_springCHOPspringk = b})
springCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
springCHOPscope = lens _springCHOPscope (\a b -> a {_springCHOPscope = b})
springCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
springCHOPsrselect = lens _springCHOPsrselect (\a b -> a {_springCHOPsrselect = b})
springCHOPcondfromchan :: Lens' CHOP (Maybe (Tree Bool))
springCHOPcondfromchan = lens _springCHOPcondfromchan (\a b -> a {_springCHOPcondfromchan = b})
springCHOPmass :: Lens' CHOP (Maybe (Tree Float))
springCHOPmass = lens _springCHOPmass (\a b -> a {_springCHOPmass = b})
springCHOPmethod :: Lens' CHOP (Maybe (Tree Int))
springCHOPmethod = lens _springCHOPmethod (\a b -> a {_springCHOPmethod = b})
springCHOPinitpos :: Lens' CHOP (Maybe (Tree Float))
springCHOPinitpos = lens _springCHOPinitpos (\a b -> a {_springCHOPinitpos = b})
springCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
springCHOPtimeslice = lens _springCHOPtimeslice (\a b -> a {_springCHOPtimeslice = b})

parameterCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
parameterCHOPexportmethod = lens _parameterCHOPexportmethod (\a b -> a {_parameterCHOPexportmethod = b})
parameterCHOPbuiltin :: Lens' CHOP (Maybe (Tree Bool))
parameterCHOPbuiltin = lens _parameterCHOPbuiltin (\a b -> a {_parameterCHOPbuiltin = b})
parameterCHOPnameformat :: Lens' CHOP (Maybe (Tree Int))
parameterCHOPnameformat = lens _parameterCHOPnameformat (\a b -> a {_parameterCHOPnameformat = b})
parameterCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
parameterCHOPexporttable = lens _parameterCHOPexporttable (\a b -> a {_parameterCHOPexporttable = b})
parameterCHOPcustom :: Lens' CHOP (Maybe (Tree Bool))
parameterCHOPcustom = lens _parameterCHOPcustom (\a b -> a {_parameterCHOPcustom = b})
parameterCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
parameterCHOPscope = lens _parameterCHOPscope (\a b -> a {_parameterCHOPscope = b})
parameterCHOPrenamefrom :: Lens' CHOP (Maybe (Tree ByteString))
parameterCHOPrenamefrom = lens _parameterCHOPrenamefrom (\a b -> a {_parameterCHOPrenamefrom = b})
parameterCHOPrenameto :: Lens' CHOP (Maybe (Tree ByteString))
parameterCHOPrenameto = lens _parameterCHOPrenameto (\a b -> a {_parameterCHOPrenameto = b})
parameterCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
parameterCHOPsrselect = lens _parameterCHOPsrselect (\a b -> a {_parameterCHOPsrselect = b})
parameterCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
parameterCHOPtimeslice = lens _parameterCHOPtimeslice (\a b -> a {_parameterCHOPtimeslice = b})
parameterCHOPparameters :: Lens' CHOP (Maybe (Tree ByteString))
parameterCHOPparameters = lens _parameterCHOPparameters (\a b -> a {_parameterCHOPparameters = b})

interpolateCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
interpolateCHOPexportmethod = lens _interpolateCHOPexportmethod (\a b -> a {_interpolateCHOPexportmethod = b})
interpolateCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
interpolateCHOPsrselect = lens _interpolateCHOPsrselect (\a b -> a {_interpolateCHOPsrselect = b})
interpolateCHOPoverlap :: Lens' CHOP (Maybe (Tree Int))
interpolateCHOPoverlap = lens _interpolateCHOPoverlap (\a b -> a {_interpolateCHOPoverlap = b})
interpolateCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
interpolateCHOPexporttable = lens _interpolateCHOPexporttable (\a b -> a {_interpolateCHOPexporttable = b})
interpolateCHOPblendfunc :: Lens' CHOP (Maybe (Tree Int))
interpolateCHOPblendfunc = lens _interpolateCHOPblendfunc (\a b -> a {_interpolateCHOPblendfunc = b})
interpolateCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
interpolateCHOPtimeslice = lens _interpolateCHOPtimeslice (\a b -> a {_interpolateCHOPtimeslice = b})
interpolateCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
interpolateCHOPscope = lens _interpolateCHOPscope (\a b -> a {_interpolateCHOPscope = b})
interpolateCHOPmatch :: Lens' CHOP (Maybe (Tree Int))
interpolateCHOPmatch = lens _interpolateCHOPmatch (\a b -> a {_interpolateCHOPmatch = b})

oscoutCHOPmaxsize :: Lens' CHOP (Maybe (Tree Float))
oscoutCHOPmaxsize = lens _oscoutCHOPmaxsize (\a b -> a {_oscoutCHOPmaxsize = b})
oscoutCHOPnumericformat :: Lens' CHOP (Maybe (Tree Int))
oscoutCHOPnumericformat = lens _oscoutCHOPnumericformat (\a b -> a {_oscoutCHOPnumericformat = b})
oscoutCHOPcookalways :: Lens' CHOP (Maybe (Tree Bool))
oscoutCHOPcookalways = lens _oscoutCHOPcookalways (\a b -> a {_oscoutCHOPcookalways = b})
oscoutCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
oscoutCHOPactive = lens _oscoutCHOPactive (\a b -> a {_oscoutCHOPactive = b})
oscoutCHOPsendevents :: Lens' CHOP (Maybe (Tree Bool))
oscoutCHOPsendevents = lens _oscoutCHOPsendevents (\a b -> a {_oscoutCHOPsendevents = b})
oscoutCHOPmaxsizeunit :: Lens' CHOP (Maybe (Tree Int))
oscoutCHOPmaxsizeunit = lens _oscoutCHOPmaxsizeunit (\a b -> a {_oscoutCHOPmaxsizeunit = b})
oscoutCHOPprotocol :: Lens' CHOP (Maybe (Tree Int))
oscoutCHOPprotocol = lens _oscoutCHOPprotocol (\a b -> a {_oscoutCHOPprotocol = b})
oscoutCHOPmaxbytes :: Lens' CHOP (Maybe (Tree Int))
oscoutCHOPmaxbytes = lens _oscoutCHOPmaxbytes (\a b -> a {_oscoutCHOPmaxbytes = b})
oscoutCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
oscoutCHOPscope = lens _oscoutCHOPscope (\a b -> a {_oscoutCHOPscope = b})
oscoutCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
oscoutCHOPexporttable = lens _oscoutCHOPexporttable (\a b -> a {_oscoutCHOPexporttable = b})
oscoutCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
oscoutCHOPsrselect = lens _oscoutCHOPsrselect (\a b -> a {_oscoutCHOPsrselect = b})
oscoutCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
oscoutCHOPexportmethod = lens _oscoutCHOPexportmethod (\a b -> a {_oscoutCHOPexportmethod = b})
oscoutCHOPformat :: Lens' CHOP (Maybe (Tree Int))
oscoutCHOPformat = lens _oscoutCHOPformat (\a b -> a {_oscoutCHOPformat = b})
oscoutCHOPport :: Lens' CHOP (Maybe (Tree Int))
oscoutCHOPport = lens _oscoutCHOPport (\a b -> a {_oscoutCHOPport = b})
oscoutCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
oscoutCHOPtimeslice = lens _oscoutCHOPtimeslice (\a b -> a {_oscoutCHOPtimeslice = b})
oscoutCHOPnetaddress :: Lens' CHOP (Maybe (Tree ByteString))
oscoutCHOPnetaddress = lens _oscoutCHOPnetaddress (\a b -> a {_oscoutCHOPnetaddress = b})

gestureCHOPinterp :: Lens' CHOP (Maybe (Tree Bool))
gestureCHOPinterp = lens _gestureCHOPinterp (\a b -> a {_gestureCHOPinterp = b})
gestureCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
gestureCHOPresetpulse = lens _gestureCHOPresetpulse (\a b -> a {_gestureCHOPresetpulse = b})
gestureCHOPblendunit :: Lens' CHOP (Maybe (Tree Int))
gestureCHOPblendunit = lens _gestureCHOPblendunit (\a b -> a {_gestureCHOPblendunit = b})
gestureCHOPresetcondition :: Lens' CHOP (Maybe (Tree Int))
gestureCHOPresetcondition = lens _gestureCHOPresetcondition (\a b -> a {_gestureCHOPresetcondition = b})
gestureCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
gestureCHOPexporttable = lens _gestureCHOPexporttable (\a b -> a {_gestureCHOPexporttable = b})
gestureCHOPspeedunit :: Lens' CHOP (Maybe (Tree Int))
gestureCHOPspeedunit = lens _gestureCHOPspeedunit (\a b -> a {_gestureCHOPspeedunit = b})
gestureCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
gestureCHOPscope = lens _gestureCHOPscope (\a b -> a {_gestureCHOPscope = b})
gestureCHOPblend :: Lens' CHOP (Maybe (Tree Float))
gestureCHOPblend = lens _gestureCHOPblend (\a b -> a {_gestureCHOPblend = b})
gestureCHOPstep :: Lens' CHOP (Maybe (Tree Bool))
gestureCHOPstep = lens _gestureCHOPstep (\a b -> a {_gestureCHOPstep = b})
gestureCHOPnumbeats :: Lens' CHOP (Maybe (Tree Int))
gestureCHOPnumbeats = lens _gestureCHOPnumbeats (\a b -> a {_gestureCHOPnumbeats = b})
gestureCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
gestureCHOPexportmethod = lens _gestureCHOPexportmethod (\a b -> a {_gestureCHOPexportmethod = b})
gestureCHOPplaymode :: Lens' CHOP (Maybe (Tree Int))
gestureCHOPplaymode = lens _gestureCHOPplaymode (\a b -> a {_gestureCHOPplaymode = b})
gestureCHOPfitmethod :: Lens' CHOP (Maybe (Tree Bool))
gestureCHOPfitmethod = lens _gestureCHOPfitmethod (\a b -> a {_gestureCHOPfitmethod = b})
gestureCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
gestureCHOPsrselect = lens _gestureCHOPsrselect (\a b -> a {_gestureCHOPsrselect = b})
gestureCHOPstepreset :: Lens' CHOP (Maybe (Tree Bool))
gestureCHOPstepreset = lens _gestureCHOPstepreset (\a b -> a {_gestureCHOPstepreset = b})
gestureCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
gestureCHOPtimeslice = lens _gestureCHOPtimeslice (\a b -> a {_gestureCHOPtimeslice = b})
gestureCHOPspeed :: Lens' CHOP (Maybe (Tree Float))
gestureCHOPspeed = lens _gestureCHOPspeed (\a b -> a {_gestureCHOPspeed = b})
gestureCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
gestureCHOPreset = lens _gestureCHOPreset (\a b -> a {_gestureCHOPreset = b})

extendCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
extendCHOPdefval = lens _extendCHOPdefval (\a b -> a {_extendCHOPdefval = b})
extendCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
extendCHOPexportmethod = lens _extendCHOPexportmethod (\a b -> a {_extendCHOPexportmethod = b})
extendCHOPleft :: Lens' CHOP (Maybe (Tree Int))
extendCHOPleft = lens _extendCHOPleft (\a b -> a {_extendCHOPleft = b})
extendCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
extendCHOPsrselect = lens _extendCHOPsrselect (\a b -> a {_extendCHOPsrselect = b})
extendCHOPright :: Lens' CHOP (Maybe (Tree Int))
extendCHOPright = lens _extendCHOPright (\a b -> a {_extendCHOPright = b})
extendCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
extendCHOPtimeslice = lens _extendCHOPtimeslice (\a b -> a {_extendCHOPtimeslice = b})
extendCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
extendCHOPscope = lens _extendCHOPscope (\a b -> a {_extendCHOPscope = b})
extendCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
extendCHOPexporttable = lens _extendCHOPexporttable (\a b -> a {_extendCHOPexporttable = b})

audioparaeqCHOPfrequencyhz3 :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPfrequencyhz3 = lens _audioparaeqCHOPfrequencyhz3 (\a b -> a {_audioparaeqCHOPfrequencyhz3 = b})
audioparaeqCHOPbandwidth1 :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPbandwidth1 = lens _audioparaeqCHOPbandwidth1 (\a b -> a {_audioparaeqCHOPbandwidth1 = b})
audioparaeqCHOPenableeq3 :: Lens' CHOP (Maybe (Tree Bool))
audioparaeqCHOPenableeq3 = lens _audioparaeqCHOPenableeq3 (\a b -> a {_audioparaeqCHOPenableeq3 = b})
audioparaeqCHOPfrequencylog2 :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPfrequencylog2 = lens _audioparaeqCHOPfrequencylog2 (\a b -> a {_audioparaeqCHOPfrequencylog2 = b})
audioparaeqCHOPfrequencyhz2 :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPfrequencyhz2 = lens _audioparaeqCHOPfrequencyhz2 (\a b -> a {_audioparaeqCHOPfrequencyhz2 = b})
audioparaeqCHOPenableeq2 :: Lens' CHOP (Maybe (Tree Bool))
audioparaeqCHOPenableeq2 = lens _audioparaeqCHOPenableeq2 (\a b -> a {_audioparaeqCHOPenableeq2 = b})
audioparaeqCHOPenableeq1 :: Lens' CHOP (Maybe (Tree Bool))
audioparaeqCHOPenableeq1 = lens _audioparaeqCHOPenableeq1 (\a b -> a {_audioparaeqCHOPenableeq1 = b})
audioparaeqCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audioparaeqCHOPexporttable = lens _audioparaeqCHOPexporttable (\a b -> a {_audioparaeqCHOPexporttable = b})
audioparaeqCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audioparaeqCHOPexportmethod = lens _audioparaeqCHOPexportmethod (\a b -> a {_audioparaeqCHOPexportmethod = b})
audioparaeqCHOPboost3 :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPboost3 = lens _audioparaeqCHOPboost3 (\a b -> a {_audioparaeqCHOPboost3 = b})
audioparaeqCHOPboost1 :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPboost1 = lens _audioparaeqCHOPboost1 (\a b -> a {_audioparaeqCHOPboost1 = b})
audioparaeqCHOPbandwidth2 :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPbandwidth2 = lens _audioparaeqCHOPbandwidth2 (\a b -> a {_audioparaeqCHOPbandwidth2 = b})
audioparaeqCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audioparaeqCHOPscope = lens _audioparaeqCHOPscope (\a b -> a {_audioparaeqCHOPscope = b})
audioparaeqCHOPbandwidth3 :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPbandwidth3 = lens _audioparaeqCHOPbandwidth3 (\a b -> a {_audioparaeqCHOPbandwidth3 = b})
audioparaeqCHOPboost2 :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPboost2 = lens _audioparaeqCHOPboost2 (\a b -> a {_audioparaeqCHOPboost2 = b})
audioparaeqCHOPunits :: Lens' CHOP (Maybe (Tree Int))
audioparaeqCHOPunits = lens _audioparaeqCHOPunits (\a b -> a {_audioparaeqCHOPunits = b})
audioparaeqCHOPfrequencyhz1 :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPfrequencyhz1 = lens _audioparaeqCHOPfrequencyhz1 (\a b -> a {_audioparaeqCHOPfrequencyhz1 = b})
audioparaeqCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audioparaeqCHOPsrselect = lens _audioparaeqCHOPsrselect (\a b -> a {_audioparaeqCHOPsrselect = b})
audioparaeqCHOPfrequencylog1 :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPfrequencylog1 = lens _audioparaeqCHOPfrequencylog1 (\a b -> a {_audioparaeqCHOPfrequencylog1 = b})
audioparaeqCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audioparaeqCHOPtimeslice = lens _audioparaeqCHOPtimeslice (\a b -> a {_audioparaeqCHOPtimeslice = b})
audioparaeqCHOPdrywet :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPdrywet = lens _audioparaeqCHOPdrywet (\a b -> a {_audioparaeqCHOPdrywet = b})
audioparaeqCHOPfrequencylog3 :: Lens' CHOP (Maybe (Tree Float))
audioparaeqCHOPfrequencylog3 = lens _audioparaeqCHOPfrequencylog3 (\a b -> a {_audioparaeqCHOPfrequencylog3 = b})

joystickCHOPyaxis :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPyaxis = lens _joystickCHOPyaxis (\a b -> a {_joystickCHOPyaxis = b})
joystickCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPscope = lens _joystickCHOPscope (\a b -> a {_joystickCHOPscope = b})
joystickCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
joystickCHOPdefval = lens _joystickCHOPdefval (\a b -> a {_joystickCHOPdefval = b})
joystickCHOPaxisrange :: Lens' CHOP (Maybe (Tree Int))
joystickCHOPaxisrange = lens _joystickCHOPaxisrange (\a b -> a {_joystickCHOPaxisrange = b})
joystickCHOPyrotinvert :: Lens' CHOP (Maybe (Tree Bool))
joystickCHOPyrotinvert = lens _joystickCHOPyrotinvert (\a b -> a {_joystickCHOPyrotinvert = b})
joystickCHOPxaxis :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPxaxis = lens _joystickCHOPxaxis (\a b -> a {_joystickCHOPxaxis = b})
joystickCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
joystickCHOPexporttable = lens _joystickCHOPexporttable (\a b -> a {_joystickCHOPexporttable = b})
joystickCHOPpovarrray :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPpovarrray = lens _joystickCHOPpovarrray (\a b -> a {_joystickCHOPpovarrray = b})
joystickCHOPslider0 :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPslider0 = lens _joystickCHOPslider0 (\a b -> a {_joystickCHOPslider0 = b})
joystickCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
joystickCHOPexportmethod = lens _joystickCHOPexportmethod (\a b -> a {_joystickCHOPexportmethod = b})
joystickCHOPleft :: Lens' CHOP (Maybe (Tree Int))
joystickCHOPleft = lens _joystickCHOPleft (\a b -> a {_joystickCHOPleft = b})
joystickCHOPyrot :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPyrot = lens _joystickCHOPyrot (\a b -> a {_joystickCHOPyrot = b})
joystickCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
joystickCHOPtimeslice = lens _joystickCHOPtimeslice (\a b -> a {_joystickCHOPtimeslice = b})
joystickCHOPrate :: Lens' CHOP (Maybe (Tree Float))
joystickCHOPrate = lens _joystickCHOPrate (\a b -> a {_joystickCHOPrate = b})
joystickCHOPbuttonarray :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPbuttonarray = lens _joystickCHOPbuttonarray (\a b -> a {_joystickCHOPbuttonarray = b})
joystickCHOPxrot :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPxrot = lens _joystickCHOPxrot (\a b -> a {_joystickCHOPxrot = b})
joystickCHOPzaxis :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPzaxis = lens _joystickCHOPzaxis (\a b -> a {_joystickCHOPzaxis = b})
joystickCHOPpovstatearray :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPpovstatearray = lens _joystickCHOPpovstatearray (\a b -> a {_joystickCHOPpovstatearray = b})
joystickCHOPslider1 :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPslider1 = lens _joystickCHOPslider1 (\a b -> a {_joystickCHOPslider1 = b})
joystickCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
joystickCHOPsrselect = lens _joystickCHOPsrselect (\a b -> a {_joystickCHOPsrselect = b})
joystickCHOPconnected :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPconnected = lens _joystickCHOPconnected (\a b -> a {_joystickCHOPconnected = b})
joystickCHOPaxisdeadzone :: Lens' CHOP (Maybe (Tree Float))
joystickCHOPaxisdeadzone = lens _joystickCHOPaxisdeadzone (\a b -> a {_joystickCHOPaxisdeadzone = b})
joystickCHOPzrot :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPzrot = lens _joystickCHOPzrot (\a b -> a {_joystickCHOPzrot = b})
joystickCHOPsource :: Lens' CHOP (Maybe (Tree ByteString))
joystickCHOPsource = lens _joystickCHOPsource (\a b -> a {_joystickCHOPsource = b})
joystickCHOPright :: Lens' CHOP (Maybe (Tree Int))
joystickCHOPright = lens _joystickCHOPright (\a b -> a {_joystickCHOPright = b})
joystickCHOPyaxisinvert :: Lens' CHOP (Maybe (Tree Bool))
joystickCHOPyaxisinvert = lens _joystickCHOPyaxisinvert (\a b -> a {_joystickCHOPyaxisinvert = b})

filterCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
filterCHOPresetpulse = lens _filterCHOPresetpulse (\a b -> a {_filterCHOPresetpulse = b})
filterCHOPtype :: Lens' CHOP (Maybe (Tree Int))
filterCHOPtype = lens _filterCHOPtype (\a b -> a {_filterCHOPtype = b})
filterCHOPeffect :: Lens' CHOP (Maybe (Tree Float))
filterCHOPeffect = lens _filterCHOPeffect (\a b -> a {_filterCHOPeffect = b})
filterCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
filterCHOPexporttable = lens _filterCHOPexporttable (\a b -> a {_filterCHOPexporttable = b})
filterCHOPspike :: Lens' CHOP (Maybe (Tree Float))
filterCHOPspike = lens _filterCHOPspike (\a b -> a {_filterCHOPspike = b})
filterCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
filterCHOPscope = lens _filterCHOPscope (\a b -> a {_filterCHOPscope = b})
filterCHOPwidth :: Lens' CHOP (Maybe (Tree Float))
filterCHOPwidth = lens _filterCHOPwidth (\a b -> a {_filterCHOPwidth = b})
filterCHOPwidthunit :: Lens' CHOP (Maybe (Tree Int))
filterCHOPwidthunit = lens _filterCHOPwidthunit (\a b -> a {_filterCHOPwidthunit = b})
filterCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
filterCHOPsrselect = lens _filterCHOPsrselect (\a b -> a {_filterCHOPsrselect = b})
filterCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
filterCHOPexportmethod = lens _filterCHOPexportmethod (\a b -> a {_filterCHOPexportmethod = b})
filterCHOPramptolerance :: Lens' CHOP (Maybe (Tree Float))
filterCHOPramptolerance = lens _filterCHOPramptolerance (\a b -> a {_filterCHOPramptolerance = b})
filterCHOPpasses :: Lens' CHOP (Maybe (Tree Int))
filterCHOPpasses = lens _filterCHOPpasses (\a b -> a {_filterCHOPpasses = b})
filterCHOPramprate :: Lens' CHOP (Maybe (Tree Float))
filterCHOPramprate = lens _filterCHOPramprate (\a b -> a {_filterCHOPramprate = b})
filterCHOPfilterpersample :: Lens' CHOP (Maybe (Tree Bool))
filterCHOPfilterpersample = lens _filterCHOPfilterpersample (\a b -> a {_filterCHOPfilterpersample = b})
filterCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
filterCHOPtimeslice = lens _filterCHOPtimeslice (\a b -> a {_filterCHOPtimeslice = b})
filterCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
filterCHOPreset = lens _filterCHOPreset (\a b -> a {_filterCHOPreset = b})

audiofileinCHOPfile :: Lens' CHOP (Maybe (Tree ByteString))
audiofileinCHOPfile = lens _audiofileinCHOPfile (\a b -> a {_audiofileinCHOPfile = b})
audiofileinCHOPprereadlength :: Lens' CHOP (Maybe (Tree Float))
audiofileinCHOPprereadlength = lens _audiofileinCHOPprereadlength (\a b -> a {_audiofileinCHOPprereadlength = b})
audiofileinCHOPrepeat :: Lens' CHOP (Maybe (Tree Int))
audiofileinCHOPrepeat = lens _audiofileinCHOPrepeat (\a b -> a {_audiofileinCHOPrepeat = b})
audiofileinCHOPcuepulse :: Lens' CHOP (Maybe (Tree Bool))
audiofileinCHOPcuepulse = lens _audiofileinCHOPcuepulse (\a b -> a {_audiofileinCHOPcuepulse = b})
audiofileinCHOPcuepoint :: Lens' CHOP (Maybe (Tree Float))
audiofileinCHOPcuepoint = lens _audiofileinCHOPcuepoint (\a b -> a {_audiofileinCHOPcuepoint = b})
audiofileinCHOPtrim :: Lens' CHOP (Maybe (Tree Bool))
audiofileinCHOPtrim = lens _audiofileinCHOPtrim (\a b -> a {_audiofileinCHOPtrim = b})
audiofileinCHOPprereadlengthunit :: Lens' CHOP (Maybe (Tree Int))
audiofileinCHOPprereadlengthunit = lens _audiofileinCHOPprereadlengthunit (\a b -> a {_audiofileinCHOPprereadlengthunit = b})
audiofileinCHOPtrimendunit :: Lens' CHOP (Maybe (Tree Int))
audiofileinCHOPtrimendunit = lens _audiofileinCHOPtrimendunit (\a b -> a {_audiofileinCHOPtrimendunit = b})
audiofileinCHOPtrimstartunit :: Lens' CHOP (Maybe (Tree Int))
audiofileinCHOPtrimstartunit = lens _audiofileinCHOPtrimstartunit (\a b -> a {_audiofileinCHOPtrimstartunit = b})
audiofileinCHOPvolume :: Lens' CHOP (Maybe (Tree Float))
audiofileinCHOPvolume = lens _audiofileinCHOPvolume (\a b -> a {_audiofileinCHOPvolume = b})
audiofileinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audiofileinCHOPexporttable = lens _audiofileinCHOPexporttable (\a b -> a {_audiofileinCHOPexporttable = b})
audiofileinCHOPspeed :: Lens' CHOP (Maybe (Tree Float))
audiofileinCHOPspeed = lens _audiofileinCHOPspeed (\a b -> a {_audiofileinCHOPspeed = b})
audiofileinCHOPopentimeout :: Lens' CHOP (Maybe (Tree Float))
audiofileinCHOPopentimeout = lens _audiofileinCHOPopentimeout (\a b -> a {_audiofileinCHOPopentimeout = b})
audiofileinCHOPindex :: Lens' CHOP (Maybe (Tree Float))
audiofileinCHOPindex = lens _audiofileinCHOPindex (\a b -> a {_audiofileinCHOPindex = b})
audiofileinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audiofileinCHOPexportmethod = lens _audiofileinCHOPexportmethod (\a b -> a {_audiofileinCHOPexportmethod = b})
audiofileinCHOPreloadpulse :: Lens' CHOP (Maybe (Tree Bool))
audiofileinCHOPreloadpulse = lens _audiofileinCHOPreloadpulse (\a b -> a {_audiofileinCHOPreloadpulse = b})
audiofileinCHOPindexunit :: Lens' CHOP (Maybe (Tree Int))
audiofileinCHOPindexunit = lens _audiofileinCHOPindexunit (\a b -> a {_audiofileinCHOPindexunit = b})
audiofileinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audiofileinCHOPscope = lens _audiofileinCHOPscope (\a b -> a {_audiofileinCHOPscope = b})
audiofileinCHOPtrimend :: Lens' CHOP (Maybe (Tree Float))
audiofileinCHOPtrimend = lens _audiofileinCHOPtrimend (\a b -> a {_audiofileinCHOPtrimend = b})
audiofileinCHOPplay :: Lens' CHOP (Maybe (Tree Bool))
audiofileinCHOPplay = lens _audiofileinCHOPplay (\a b -> a {_audiofileinCHOPplay = b})
audiofileinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audiofileinCHOPsrselect = lens _audiofileinCHOPsrselect (\a b -> a {_audiofileinCHOPsrselect = b})
audiofileinCHOPtrimstart :: Lens' CHOP (Maybe (Tree Float))
audiofileinCHOPtrimstart = lens _audiofileinCHOPtrimstart (\a b -> a {_audiofileinCHOPtrimstart = b})
audiofileinCHOPplaymode :: Lens' CHOP (Maybe (Tree Int))
audiofileinCHOPplaymode = lens _audiofileinCHOPplaymode (\a b -> a {_audiofileinCHOPplaymode = b})
audiofileinCHOPcuepointunit :: Lens' CHOP (Maybe (Tree Int))
audiofileinCHOPcuepointunit = lens _audiofileinCHOPcuepointunit (\a b -> a {_audiofileinCHOPcuepointunit = b})
audiofileinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audiofileinCHOPtimeslice = lens _audiofileinCHOPtimeslice (\a b -> a {_audiofileinCHOPtimeslice = b})
audiofileinCHOPmono :: Lens' CHOP (Maybe (Tree Bool))
audiofileinCHOPmono = lens _audiofileinCHOPmono (\a b -> a {_audiofileinCHOPmono = b})
audiofileinCHOPcue :: Lens' CHOP (Maybe (Tree Bool))
audiofileinCHOPcue = lens _audiofileinCHOPcue (\a b -> a {_audiofileinCHOPcue = b})

angleCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
angleCHOPexportmethod = lens _angleCHOPexportmethod (\a b -> a {_angleCHOPexportmethod = b})
angleCHOPinorder :: Lens' CHOP (Maybe (Tree Int))
angleCHOPinorder = lens _angleCHOPinorder (\a b -> a {_angleCHOPinorder = b})
angleCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
angleCHOPsrselect = lens _angleCHOPsrselect (\a b -> a {_angleCHOPsrselect = b})
angleCHOPinunit :: Lens' CHOP (Maybe (Tree Int))
angleCHOPinunit = lens _angleCHOPinunit (\a b -> a {_angleCHOPinunit = b})
angleCHOPoutorder :: Lens' CHOP (Maybe (Tree Int))
angleCHOPoutorder = lens _angleCHOPoutorder (\a b -> a {_angleCHOPoutorder = b})
angleCHOPoutunit :: Lens' CHOP (Maybe (Tree Int))
angleCHOPoutunit = lens _angleCHOPoutunit (\a b -> a {_angleCHOPoutunit = b})
angleCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
angleCHOPtimeslice = lens _angleCHOPtimeslice (\a b -> a {_angleCHOPtimeslice = b})
angleCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
angleCHOPscope = lens _angleCHOPscope (\a b -> a {_angleCHOPscope = b})
angleCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
angleCHOPexporttable = lens _angleCHOPexporttable (\a b -> a {_angleCHOPexporttable = b})

dmxoutCHOPformat :: Lens' CHOP (Maybe (Tree Int))
dmxoutCHOPformat = lens _dmxoutCHOPformat (\a b -> a {_dmxoutCHOPformat = b})
dmxoutCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
dmxoutCHOPactive = lens _dmxoutCHOPactive (\a b -> a {_dmxoutCHOPactive = b})
dmxoutCHOPsubnet :: Lens' CHOP (Maybe (Tree Int))
dmxoutCHOPsubnet = lens _dmxoutCHOPsubnet (\a b -> a {_dmxoutCHOPsubnet = b})
dmxoutCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
dmxoutCHOPexportmethod = lens _dmxoutCHOPexportmethod (\a b -> a {_dmxoutCHOPexportmethod = b})
dmxoutCHOPserialport :: Lens' CHOP (Maybe (Tree Bool))
dmxoutCHOPserialport = lens _dmxoutCHOPserialport (\a b -> a {_dmxoutCHOPserialport = b})
dmxoutCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
dmxoutCHOPscope = lens _dmxoutCHOPscope (\a b -> a {_dmxoutCHOPscope = b})
dmxoutCHOPcustomport :: Lens' CHOP (Maybe (Tree Bool))
dmxoutCHOPcustomport = lens _dmxoutCHOPcustomport (\a b -> a {_dmxoutCHOPcustomport = b})
dmxoutCHOPlocaladdress :: Lens' CHOP (Maybe (Tree ByteString))
dmxoutCHOPlocaladdress = lens _dmxoutCHOPlocaladdress (\a b -> a {_dmxoutCHOPlocaladdress = b})
dmxoutCHOPpriority :: Lens' CHOP (Maybe (Tree Int))
dmxoutCHOPpriority = lens _dmxoutCHOPpriority (\a b -> a {_dmxoutCHOPpriority = b})
dmxoutCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
dmxoutCHOPexporttable = lens _dmxoutCHOPexporttable (\a b -> a {_dmxoutCHOPexporttable = b})
dmxoutCHOPsource :: Lens' CHOP (Maybe (Tree ByteString))
dmxoutCHOPsource = lens _dmxoutCHOPsource (\a b -> a {_dmxoutCHOPsource = b})
dmxoutCHOPinterface :: Lens' CHOP (Maybe (Tree Bool))
dmxoutCHOPinterface = lens _dmxoutCHOPinterface (\a b -> a {_dmxoutCHOPinterface = b})
dmxoutCHOPcid :: Lens' CHOP (Maybe (Tree ByteString))
dmxoutCHOPcid = lens _dmxoutCHOPcid (\a b -> a {_dmxoutCHOPcid = b})
dmxoutCHOPrate :: Lens' CHOP (Maybe (Tree Int))
dmxoutCHOPrate = lens _dmxoutCHOPrate (\a b -> a {_dmxoutCHOPrate = b})
dmxoutCHOPlocalport :: Lens' CHOP (Maybe (Tree Int))
dmxoutCHOPlocalport = lens _dmxoutCHOPlocalport (\a b -> a {_dmxoutCHOPlocalport = b})
dmxoutCHOPnet :: Lens' CHOP (Maybe (Tree Int))
dmxoutCHOPnet = lens _dmxoutCHOPnet (\a b -> a {_dmxoutCHOPnet = b})
dmxoutCHOPnetport :: Lens' CHOP (Maybe (Tree Int))
dmxoutCHOPnetport = lens _dmxoutCHOPnetport (\a b -> a {_dmxoutCHOPnetport = b})
dmxoutCHOPuniverse :: Lens' CHOP (Maybe (Tree Int))
dmxoutCHOPuniverse = lens _dmxoutCHOPuniverse (\a b -> a {_dmxoutCHOPuniverse = b})
dmxoutCHOPsendartsync :: Lens' CHOP (Maybe (Tree Bool))
dmxoutCHOPsendartsync = lens _dmxoutCHOPsendartsync (\a b -> a {_dmxoutCHOPsendartsync = b})
dmxoutCHOPdevice :: Lens' CHOP (Maybe (Tree Bool))
dmxoutCHOPdevice = lens _dmxoutCHOPdevice (\a b -> a {_dmxoutCHOPdevice = b})
dmxoutCHOPmulticast :: Lens' CHOP (Maybe (Tree Bool))
dmxoutCHOPmulticast = lens _dmxoutCHOPmulticast (\a b -> a {_dmxoutCHOPmulticast = b})
dmxoutCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
dmxoutCHOPsrselect = lens _dmxoutCHOPsrselect (\a b -> a {_dmxoutCHOPsrselect = b})
dmxoutCHOProutingtable :: Lens' CHOP (Maybe (Tree DAT))
dmxoutCHOProutingtable = lens _dmxoutCHOProutingtable (\a b -> a {_dmxoutCHOProutingtable = b})
dmxoutCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
dmxoutCHOPtimeslice = lens _dmxoutCHOPtimeslice (\a b -> a {_dmxoutCHOPtimeslice = b})
dmxoutCHOPnetaddress :: Lens' CHOP (Maybe (Tree ByteString))
dmxoutCHOPnetaddress = lens _dmxoutCHOPnetaddress (\a b -> a {_dmxoutCHOPnetaddress = b})

transformCHOPoutrord :: Lens' CHOP (Maybe (Tree Int))
transformCHOPoutrord = lens _transformCHOPoutrord (\a b -> a {_transformCHOPoutrord = b})
transformCHOPusehint :: Lens' CHOP (Maybe (Tree Bool))
transformCHOPusehint = lens _transformCHOPusehint (\a b -> a {_transformCHOPusehint = b})
transformCHOPcustinputorders :: Lens' CHOP (Maybe (Tree Bool))
transformCHOPcustinputorders = lens _transformCHOPcustinputorders (\a b -> a {_transformCHOPcustinputorders = b})
transformCHOPinvertoutput :: Lens' CHOP (Maybe (Tree Bool))
transformCHOPinvertoutput = lens _transformCHOPinvertoutput (\a b -> a {_transformCHOPinvertoutput = b})
transformCHOPs :: Lens' CHOP (Vec3)
transformCHOPs = lens _transformCHOPs (\a b -> a {_transformCHOPs = b})
transformCHOPinvertinput :: Lens' CHOP (Maybe (Tree Bool))
transformCHOPinvertinput = lens _transformCHOPinvertinput (\a b -> a {_transformCHOPinvertinput = b})
transformCHOPinvert :: Lens' CHOP (Maybe (Tree Bool))
transformCHOPinvert = lens _transformCHOPinvert (\a b -> a {_transformCHOPinvert = b})
transformCHOPxord :: Lens' CHOP (Maybe (Tree Int))
transformCHOPxord = lens _transformCHOPxord (\a b -> a {_transformCHOPxord = b})
transformCHOPr :: Lens' CHOP (Vec3)
transformCHOPr = lens _transformCHOPr (\a b -> a {_transformCHOPr = b})
transformCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
transformCHOPexportmethod = lens _transformCHOPexportmethod (\a b -> a {_transformCHOPexportmethod = b})
transformCHOPout :: Lens' CHOP (Maybe (Tree Int))
transformCHOPout = lens _transformCHOPout (\a b -> a {_transformCHOPout = b})
transformCHOPmatop :: Lens' CHOP (Maybe (Tree Int))
transformCHOPmatop = lens _transformCHOPmatop (\a b -> a {_transformCHOPmatop = b})
transformCHOPcustoutputorders :: Lens' CHOP (Maybe (Tree Bool))
transformCHOPcustoutputorders = lens _transformCHOPcustoutputorders (\a b -> a {_transformCHOPcustoutputorders = b})
transformCHOPp :: Lens' CHOP (Vec3)
transformCHOPp = lens _transformCHOPp (\a b -> a {_transformCHOPp = b})
transformCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
transformCHOPexporttable = lens _transformCHOPexporttable (\a b -> a {_transformCHOPexporttable = b})
transformCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
transformCHOPscope = lens _transformCHOPscope (\a b -> a {_transformCHOPscope = b})
transformCHOPinrord :: Lens' CHOP (Maybe (Tree Int))
transformCHOPinrord = lens _transformCHOPinrord (\a b -> a {_transformCHOPinrord = b})
transformCHOPoutxord :: Lens' CHOP (Maybe (Tree Int))
transformCHOPoutxord = lens _transformCHOPoutxord (\a b -> a {_transformCHOPoutxord = b})
transformCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
transformCHOPsrselect = lens _transformCHOPsrselect (\a b -> a {_transformCHOPsrselect = b})
transformCHOPrord :: Lens' CHOP (Maybe (Tree Int))
transformCHOPrord = lens _transformCHOPrord (\a b -> a {_transformCHOPrord = b})
transformCHOPt :: Lens' CHOP (Vec3)
transformCHOPt = lens _transformCHOPt (\a b -> a {_transformCHOPt = b})
transformCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
transformCHOPtimeslice = lens _transformCHOPtimeslice (\a b -> a {_transformCHOPtimeslice = b})
transformCHOPhint :: Lens' CHOP (Vec3)
transformCHOPhint = lens _transformCHOPhint (\a b -> a {_transformCHOPhint = b})
transformCHOPinxord :: Lens' CHOP (Maybe (Tree Int))
transformCHOPinxord = lens _transformCHOPinxord (\a b -> a {_transformCHOPinxord = b})

outCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
outCHOPexportmethod = lens _outCHOPexportmethod (\a b -> a {_outCHOPexportmethod = b})
outCHOPlabel :: Lens' CHOP (Maybe (Tree ByteString))
outCHOPlabel = lens _outCHOPlabel (\a b -> a {_outCHOPlabel = b})
outCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
outCHOPsrselect = lens _outCHOPsrselect (\a b -> a {_outCHOPsrselect = b})
outCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
outCHOPexporttable = lens _outCHOPexporttable (\a b -> a {_outCHOPexporttable = b})
outCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
outCHOPtimeslice = lens _outCHOPtimeslice (\a b -> a {_outCHOPtimeslice = b})
outCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
outCHOPscope = lens _outCHOPscope (\a b -> a {_outCHOPscope = b})

timesliceCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
timesliceCHOPexportmethod = lens _timesliceCHOPexportmethod (\a b -> a {_timesliceCHOPexportmethod = b})
timesliceCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
timesliceCHOPsrselect = lens _timesliceCHOPsrselect (\a b -> a {_timesliceCHOPsrselect = b})
timesliceCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
timesliceCHOPexporttable = lens _timesliceCHOPexporttable (\a b -> a {_timesliceCHOPexporttable = b})
timesliceCHOPmethod :: Lens' CHOP (Maybe (Tree Int))
timesliceCHOPmethod = lens _timesliceCHOPmethod (\a b -> a {_timesliceCHOPmethod = b})
timesliceCHOPquatrot :: Lens' CHOP (Maybe (Tree Bool))
timesliceCHOPquatrot = lens _timesliceCHOPquatrot (\a b -> a {_timesliceCHOPquatrot = b})
timesliceCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
timesliceCHOPtimeslice = lens _timesliceCHOPtimeslice (\a b -> a {_timesliceCHOPtimeslice = b})
timesliceCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
timesliceCHOPscope = lens _timesliceCHOPscope (\a b -> a {_timesliceCHOPscope = b})

spliceCHOPtrimmethod :: Lens' CHOP (Maybe (Tree Int))
spliceCHOPtrimmethod = lens _spliceCHOPtrimmethod (\a b -> a {_spliceCHOPtrimmethod = b})
spliceCHOPstart :: Lens' CHOP (Maybe (Tree Float))
spliceCHOPstart = lens _spliceCHOPstart (\a b -> a {_spliceCHOPstart = b})
spliceCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
spliceCHOPtimeslice = lens _spliceCHOPtimeslice (\a b -> a {_spliceCHOPtimeslice = b})
spliceCHOPinsertlength :: Lens' CHOP (Maybe (Tree Float))
spliceCHOPinsertlength = lens _spliceCHOPinsertlength (\a b -> a {_spliceCHOPinsertlength = b})
spliceCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
spliceCHOPexportmethod = lens _spliceCHOPexportmethod (\a b -> a {_spliceCHOPexportmethod = b})
spliceCHOPinsertunits :: Lens' CHOP (Maybe (Tree Int))
spliceCHOPinsertunits = lens _spliceCHOPinsertunits (\a b -> a {_spliceCHOPinsertunits = b})
spliceCHOPinsertinterp :: Lens' CHOP (Maybe (Tree Int))
spliceCHOPinsertinterp = lens _spliceCHOPinsertinterp (\a b -> a {_spliceCHOPinsertinterp = b})
spliceCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
spliceCHOPscope = lens _spliceCHOPscope (\a b -> a {_spliceCHOPscope = b})
spliceCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
spliceCHOPexporttable = lens _spliceCHOPexporttable (\a b -> a {_spliceCHOPexporttable = b})
spliceCHOPmatch :: Lens' CHOP (Maybe (Tree Int))
spliceCHOPmatch = lens _spliceCHOPmatch (\a b -> a {_spliceCHOPmatch = b})
spliceCHOPoutputtrimmed :: Lens' CHOP (Maybe (Tree Bool))
spliceCHOPoutputtrimmed = lens _spliceCHOPoutputtrimmed (\a b -> a {_spliceCHOPoutputtrimmed = b})
spliceCHOPinsertmethod :: Lens' CHOP (Maybe (Tree Int))
spliceCHOPinsertmethod = lens _spliceCHOPinsertmethod (\a b -> a {_spliceCHOPinsertmethod = b})
spliceCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
spliceCHOPsrselect = lens _spliceCHOPsrselect (\a b -> a {_spliceCHOPsrselect = b})
spliceCHOPdirection :: Lens' CHOP (Maybe (Tree Int))
spliceCHOPdirection = lens _spliceCHOPdirection (\a b -> a {_spliceCHOPdirection = b})
spliceCHOPtrimlength :: Lens' CHOP (Maybe (Tree Float))
spliceCHOPtrimlength = lens _spliceCHOPtrimlength (\a b -> a {_spliceCHOPtrimlength = b})
spliceCHOPunits :: Lens' CHOP (Maybe (Tree Int))
spliceCHOPunits = lens _spliceCHOPunits (\a b -> a {_spliceCHOPunits = b})
spliceCHOPunmatchedinterp :: Lens' CHOP (Maybe (Tree Int))
spliceCHOPunmatchedinterp = lens _spliceCHOPunmatchedinterp (\a b -> a {_spliceCHOPunmatchedinterp = b})
spliceCHOPtrimlengthunits :: Lens' CHOP (Maybe (Tree Int))
spliceCHOPtrimlengthunits = lens _spliceCHOPtrimlengthunits (\a b -> a {_spliceCHOPtrimlengthunits = b})

speedCHOPresetvalue :: Lens' CHOP (Maybe (Tree Float))
speedCHOPresetvalue = lens _speedCHOPresetvalue (\a b -> a {_speedCHOPresetvalue = b})
speedCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
speedCHOPresetpulse = lens _speedCHOPresetpulse (\a b -> a {_speedCHOPresetpulse = b})
speedCHOPlimittype :: Lens' CHOP (Maybe (Tree Int))
speedCHOPlimittype = lens _speedCHOPlimittype (\a b -> a {_speedCHOPlimittype = b})
speedCHOPresetcondition :: Lens' CHOP (Maybe (Tree Int))
speedCHOPresetcondition = lens _speedCHOPresetcondition (\a b -> a {_speedCHOPresetcondition = b})
speedCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
speedCHOPexporttable = lens _speedCHOPexporttable (\a b -> a {_speedCHOPexporttable = b})
speedCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
speedCHOPexportmethod = lens _speedCHOPexportmethod (\a b -> a {_speedCHOPexportmethod = b})
speedCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
speedCHOPscope = lens _speedCHOPscope (\a b -> a {_speedCHOPscope = b})
speedCHOPresetonstart :: Lens' CHOP (Maybe (Tree Bool))
speedCHOPresetonstart = lens _speedCHOPresetonstart (\a b -> a {_speedCHOPresetonstart = b})
speedCHOPconstant2 :: Lens' CHOP (Maybe (Tree Float))
speedCHOPconstant2 = lens _speedCHOPconstant2 (\a b -> a {_speedCHOPconstant2 = b})
speedCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
speedCHOPsrselect = lens _speedCHOPsrselect (\a b -> a {_speedCHOPsrselect = b})
speedCHOPmax :: Lens' CHOP (Maybe (Tree Float))
speedCHOPmax = lens _speedCHOPmax (\a b -> a {_speedCHOPmax = b})
speedCHOPconstant3 :: Lens' CHOP (Maybe (Tree Float))
speedCHOPconstant3 = lens _speedCHOPconstant3 (\a b -> a {_speedCHOPconstant3 = b})
speedCHOPmin :: Lens' CHOP (Maybe (Tree Float))
speedCHOPmin = lens _speedCHOPmin (\a b -> a {_speedCHOPmin = b})
speedCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
speedCHOPtimeslice = lens _speedCHOPtimeslice (\a b -> a {_speedCHOPtimeslice = b})
speedCHOPorder :: Lens' CHOP (Maybe (Tree Int))
speedCHOPorder = lens _speedCHOPorder (\a b -> a {_speedCHOPorder = b})
speedCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
speedCHOPreset = lens _speedCHOPreset (\a b -> a {_speedCHOPreset = b})
speedCHOPconstant1 :: Lens' CHOP (Maybe (Tree Float))
speedCHOPconstant1 = lens _speedCHOPconstant1 (\a b -> a {_speedCHOPconstant1 = b})

fileoutCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
fileoutCHOPexportmethod = lens _fileoutCHOPexportmethod (\a b -> a {_fileoutCHOPexportmethod = b})
fileoutCHOPfile :: Lens' CHOP (Maybe (Tree ByteString))
fileoutCHOPfile = lens _fileoutCHOPfile (\a b -> a {_fileoutCHOPfile = b})
fileoutCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
fileoutCHOPsrselect = lens _fileoutCHOPsrselect (\a b -> a {_fileoutCHOPsrselect = b})
fileoutCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
fileoutCHOPactive = lens _fileoutCHOPactive (\a b -> a {_fileoutCHOPactive = b})
fileoutCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
fileoutCHOPexporttable = lens _fileoutCHOPexporttable (\a b -> a {_fileoutCHOPexporttable = b})
fileoutCHOPinterval :: Lens' CHOP (Maybe (Tree Int))
fileoutCHOPinterval = lens _fileoutCHOPinterval (\a b -> a {_fileoutCHOPinterval = b})
fileoutCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
fileoutCHOPtimeslice = lens _fileoutCHOPtimeslice (\a b -> a {_fileoutCHOPtimeslice = b})
fileoutCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
fileoutCHOPscope = lens _fileoutCHOPscope (\a b -> a {_fileoutCHOPscope = b})
fileoutCHOPwrite :: Lens' CHOP (Maybe (Tree Bool))
fileoutCHOPwrite = lens _fileoutCHOPwrite (\a b -> a {_fileoutCHOPwrite = b})

audioplayCHOPerrormissing :: Lens' CHOP (Maybe (Tree Bool))
audioplayCHOPerrormissing = lens _audioplayCHOPerrormissing (\a b -> a {_audioplayCHOPerrormissing = b})
audioplayCHOPmode :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPmode = lens _audioplayCHOPmode (\a b -> a {_audioplayCHOPmode = b})
audioplayCHOPcookalways :: Lens' CHOP (Maybe (Tree Bool))
audioplayCHOPcookalways = lens _audioplayCHOPcookalways (\a b -> a {_audioplayCHOPcookalways = b})
audioplayCHOPfile :: Lens' CHOP (Maybe (Tree ByteString))
audioplayCHOPfile = lens _audioplayCHOPfile (\a b -> a {_audioplayCHOPfile = b})
audioplayCHOPfrontleftcenter :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPfrontleftcenter = lens _audioplayCHOPfrontleftcenter (\a b -> a {_audioplayCHOPfrontleftcenter = b})
audioplayCHOPstereo :: Lens' CHOP (Maybe (Tree Bool))
audioplayCHOPstereo = lens _audioplayCHOPstereo (\a b -> a {_audioplayCHOPstereo = b})
audioplayCHOPtopfrontright :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPtopfrontright = lens _audioplayCHOPtopfrontright (\a b -> a {_audioplayCHOPtopfrontright = b})
audioplayCHOPtopbackleft :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPtopbackleft = lens _audioplayCHOPtopbackleft (\a b -> a {_audioplayCHOPtopbackleft = b})
audioplayCHOPfrontright :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPfrontright = lens _audioplayCHOPfrontright (\a b -> a {_audioplayCHOPfrontright = b})
audioplayCHOPdatlist :: Lens' CHOP (Maybe (Tree DAT))
audioplayCHOPdatlist = lens _audioplayCHOPdatlist (\a b -> a {_audioplayCHOPdatlist = b})
audioplayCHOPfrontcenter :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPfrontcenter = lens _audioplayCHOPfrontcenter (\a b -> a {_audioplayCHOPfrontcenter = b})
audioplayCHOPsideright :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPsideright = lens _audioplayCHOPsideright (\a b -> a {_audioplayCHOPsideright = b})
audioplayCHOPsideleft :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPsideleft = lens _audioplayCHOPsideleft (\a b -> a {_audioplayCHOPsideleft = b})
audioplayCHOPfrontrightcenter :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPfrontrightcenter = lens _audioplayCHOPfrontrightcenter (\a b -> a {_audioplayCHOPfrontrightcenter = b})
audioplayCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audioplayCHOPexporttable = lens _audioplayCHOPexporttable (\a b -> a {_audioplayCHOPexporttable = b})
audioplayCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPexportmethod = lens _audioplayCHOPexportmethod (\a b -> a {_audioplayCHOPexportmethod = b})
audioplayCHOPbackcenter :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPbackcenter = lens _audioplayCHOPbackcenter (\a b -> a {_audioplayCHOPbackcenter = b})
audioplayCHOPtopcenter :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPtopcenter = lens _audioplayCHOPtopcenter (\a b -> a {_audioplayCHOPtopcenter = b})
audioplayCHOPtopbackright :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPtopbackright = lens _audioplayCHOPtopbackright (\a b -> a {_audioplayCHOPtopbackright = b})
audioplayCHOPlowfrequency :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPlowfrequency = lens _audioplayCHOPlowfrequency (\a b -> a {_audioplayCHOPlowfrequency = b})
audioplayCHOPspecifydevice :: Lens' CHOP (Maybe (Tree Bool))
audioplayCHOPspecifydevice = lens _audioplayCHOPspecifydevice (\a b -> a {_audioplayCHOPspecifydevice = b})
audioplayCHOPtopfrontcenter :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPtopfrontcenter = lens _audioplayCHOPtopfrontcenter (\a b -> a {_audioplayCHOPtopfrontcenter = b})
audioplayCHOPbackleft :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPbackleft = lens _audioplayCHOPbackleft (\a b -> a {_audioplayCHOPbackleft = b})
audioplayCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audioplayCHOPscope = lens _audioplayCHOPscope (\a b -> a {_audioplayCHOPscope = b})
audioplayCHOPfrontleft :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPfrontleft = lens _audioplayCHOPfrontleft (\a b -> a {_audioplayCHOPfrontleft = b})
audioplayCHOPtopbackcenter :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPtopbackcenter = lens _audioplayCHOPtopbackcenter (\a b -> a {_audioplayCHOPtopbackcenter = b})
audioplayCHOPtopfrontleft :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPtopfrontleft = lens _audioplayCHOPtopfrontleft (\a b -> a {_audioplayCHOPtopfrontleft = b})
audioplayCHOPdevice :: Lens' CHOP (Maybe (Tree ByteString))
audioplayCHOPdevice = lens _audioplayCHOPdevice (\a b -> a {_audioplayCHOPdevice = b})
audioplayCHOPvolume :: Lens' CHOP (Maybe (Tree Float))
audioplayCHOPvolume = lens _audioplayCHOPvolume (\a b -> a {_audioplayCHOPvolume = b})
audioplayCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPsrselect = lens _audioplayCHOPsrselect (\a b -> a {_audioplayCHOPsrselect = b})
audioplayCHOPtrigger :: Lens' CHOP (Maybe (Tree Bool))
audioplayCHOPtrigger = lens _audioplayCHOPtrigger (\a b -> a {_audioplayCHOPtrigger = b})
audioplayCHOPoutputs :: Lens' CHOP (Maybe (Tree ByteString))
audioplayCHOPoutputs = lens _audioplayCHOPoutputs (\a b -> a {_audioplayCHOPoutputs = b})
audioplayCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audioplayCHOPtimeslice = lens _audioplayCHOPtimeslice (\a b -> a {_audioplayCHOPtimeslice = b})
audioplayCHOPbackright :: Lens' CHOP (Maybe (Tree Int))
audioplayCHOPbackright = lens _audioplayCHOPbackright (\a b -> a {_audioplayCHOPbackright = b})

clockCHOPyday :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPyday = lens _clockCHOPyday (\a b -> a {_clockCHOPyday = b})
clockCHOPlongitude2 :: Lens' CHOP (Maybe (Tree Float))
clockCHOPlongitude2 = lens _clockCHOPlongitude2 (\a b -> a {_clockCHOPlongitude2 = b})
clockCHOPoutput :: Lens' CHOP (Maybe (Tree Int))
clockCHOPoutput = lens _clockCHOPoutput (\a b -> a {_clockCHOPoutput = b})
clockCHOPlongitude1 :: Lens' CHOP (Maybe (Tree Float))
clockCHOPlongitude1 = lens _clockCHOPlongitude1 (\a b -> a {_clockCHOPlongitude1 = b})
clockCHOPsunphase :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPsunphase = lens _clockCHOPsunphase (\a b -> a {_clockCHOPsunphase = b})
clockCHOPwday :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPwday = lens _clockCHOPwday (\a b -> a {_clockCHOPwday = b})
clockCHOPmin :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPmin = lens _clockCHOPmin (\a b -> a {_clockCHOPmin = b})
clockCHOPweek :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPweek = lens _clockCHOPweek (\a b -> a {_clockCHOPweek = b})
clockCHOPsunrise :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPsunrise = lens _clockCHOPsunrise (\a b -> a {_clockCHOPsunrise = b})
clockCHOPsunset :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPsunset = lens _clockCHOPsunset (\a b -> a {_clockCHOPsunset = b})
clockCHOPhouradjust :: Lens' CHOP (Maybe (Tree Float))
clockCHOPhouradjust = lens _clockCHOPhouradjust (\a b -> a {_clockCHOPhouradjust = b})
clockCHOPeastwest :: Lens' CHOP (Maybe (Tree Int))
clockCHOPeastwest = lens _clockCHOPeastwest (\a b -> a {_clockCHOPeastwest = b})
clockCHOPhourformat :: Lens' CHOP (Maybe (Tree Int))
clockCHOPhourformat = lens _clockCHOPhourformat (\a b -> a {_clockCHOPhourformat = b})
clockCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
clockCHOPexporttable = lens _clockCHOPexporttable (\a b -> a {_clockCHOPexporttable = b})
clockCHOPsec :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPsec = lens _clockCHOPsec (\a b -> a {_clockCHOPsec = b})
clockCHOPhour :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPhour = lens _clockCHOPhour (\a b -> a {_clockCHOPhour = b})
clockCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
clockCHOPexportmethod = lens _clockCHOPexportmethod (\a b -> a {_clockCHOPexportmethod = b})
clockCHOPdeclination :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPdeclination = lens _clockCHOPdeclination (\a b -> a {_clockCHOPdeclination = b})
clockCHOPyear :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPyear = lens _clockCHOPyear (\a b -> a {_clockCHOPyear = b})
clockCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
clockCHOPtimeslice = lens _clockCHOPtimeslice (\a b -> a {_clockCHOPtimeslice = b})
clockCHOPlatitude1 :: Lens' CHOP (Maybe (Tree Float))
clockCHOPlatitude1 = lens _clockCHOPlatitude1 (\a b -> a {_clockCHOPlatitude1 = b})
clockCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPscope = lens _clockCHOPscope (\a b -> a {_clockCHOPscope = b})
clockCHOPmonth :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPmonth = lens _clockCHOPmonth (\a b -> a {_clockCHOPmonth = b})
clockCHOPnorthsouth :: Lens' CHOP (Maybe (Tree Int))
clockCHOPnorthsouth = lens _clockCHOPnorthsouth (\a b -> a {_clockCHOPnorthsouth = b})
clockCHOPstartref :: Lens' CHOP (Maybe (Tree Int))
clockCHOPstartref = lens _clockCHOPstartref (\a b -> a {_clockCHOPstartref = b})
clockCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
clockCHOPsrselect = lens _clockCHOPsrselect (\a b -> a {_clockCHOPsrselect = b})
clockCHOPlatitude2 :: Lens' CHOP (Maybe (Tree Float))
clockCHOPlatitude2 = lens _clockCHOPlatitude2 (\a b -> a {_clockCHOPlatitude2 = b})
clockCHOPday :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPday = lens _clockCHOPday (\a b -> a {_clockCHOPday = b})
clockCHOPmsec :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPmsec = lens _clockCHOPmsec (\a b -> a {_clockCHOPmsec = b})
clockCHOPampm :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPampm = lens _clockCHOPampm (\a b -> a {_clockCHOPampm = b})
clockCHOPmoonphase :: Lens' CHOP (Maybe (Tree ByteString))
clockCHOPmoonphase = lens _clockCHOPmoonphase (\a b -> a {_clockCHOPmoonphase = b})

scurveCHOPbias :: Lens' CHOP (Maybe (Tree Float))
scurveCHOPbias = lens _scurveCHOPbias (\a b -> a {_scurveCHOPbias = b})
scurveCHOPappend :: Lens' CHOP (Maybe (Tree Int))
scurveCHOPappend = lens _scurveCHOPappend (\a b -> a {_scurveCHOPappend = b})
scurveCHOPprepend :: Lens' CHOP (Maybe (Tree Int))
scurveCHOPprepend = lens _scurveCHOPprepend (\a b -> a {_scurveCHOPprepend = b})
scurveCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
scurveCHOPdefval = lens _scurveCHOPdefval (\a b -> a {_scurveCHOPdefval = b})
scurveCHOPfromrange1 :: Lens' CHOP (Maybe (Tree Float))
scurveCHOPfromrange1 = lens _scurveCHOPfromrange1 (\a b -> a {_scurveCHOPfromrange1 = b})
scurveCHOPlinearize :: Lens' CHOP (Maybe (Tree Float))
scurveCHOPlinearize = lens _scurveCHOPlinearize (\a b -> a {_scurveCHOPlinearize = b})
scurveCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
scurveCHOPexporttable = lens _scurveCHOPexporttable (\a b -> a {_scurveCHOPexporttable = b})
scurveCHOPlength :: Lens' CHOP (Maybe (Tree Int))
scurveCHOPlength = lens _scurveCHOPlength (\a b -> a {_scurveCHOPlength = b})
scurveCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
scurveCHOPexportmethod = lens _scurveCHOPexportmethod (\a b -> a {_scurveCHOPexportmethod = b})
scurveCHOPleft :: Lens' CHOP (Maybe (Tree Int))
scurveCHOPleft = lens _scurveCHOPleft (\a b -> a {_scurveCHOPleft = b})
scurveCHOPtype :: Lens' CHOP (Maybe (Tree Int))
scurveCHOPtype = lens _scurveCHOPtype (\a b -> a {_scurveCHOPtype = b})
scurveCHOPtorange1 :: Lens' CHOP (Maybe (Tree Float))
scurveCHOPtorange1 = lens _scurveCHOPtorange1 (\a b -> a {_scurveCHOPtorange1 = b})
scurveCHOPfromrange2 :: Lens' CHOP (Maybe (Tree Float))
scurveCHOPfromrange2 = lens _scurveCHOPfromrange2 (\a b -> a {_scurveCHOPfromrange2 = b})
scurveCHOPright :: Lens' CHOP (Maybe (Tree Int))
scurveCHOPright = lens _scurveCHOPright (\a b -> a {_scurveCHOPright = b})
scurveCHOPchannelname :: Lens' CHOP (Maybe (Tree ByteString))
scurveCHOPchannelname = lens _scurveCHOPchannelname (\a b -> a {_scurveCHOPchannelname = b})
scurveCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
scurveCHOPscope = lens _scurveCHOPscope (\a b -> a {_scurveCHOPscope = b})
scurveCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
scurveCHOPsrselect = lens _scurveCHOPsrselect (\a b -> a {_scurveCHOPsrselect = b})
scurveCHOPsteepness :: Lens' CHOP (Maybe (Tree Float))
scurveCHOPsteepness = lens _scurveCHOPsteepness (\a b -> a {_scurveCHOPsteepness = b})
scurveCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
scurveCHOPtimeslice = lens _scurveCHOPtimeslice (\a b -> a {_scurveCHOPtimeslice = b})
scurveCHOPrate :: Lens' CHOP (Maybe (Tree Float))
scurveCHOPrate = lens _scurveCHOPrate (\a b -> a {_scurveCHOPrate = b})
scurveCHOPtorange2 :: Lens' CHOP (Maybe (Tree Float))
scurveCHOPtorange2 = lens _scurveCHOPtorange2 (\a b -> a {_scurveCHOPtorange2 = b})

handleCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
handleCHOPexportmethod = lens _handleCHOPexportmethod (\a b -> a {_handleCHOPexportmethod = b})
handleCHOPpreroll :: Lens' CHOP (Maybe (Tree Int))
handleCHOPpreroll = lens _handleCHOPpreroll (\a b -> a {_handleCHOPpreroll = b})
handleCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
handleCHOPexporttable = lens _handleCHOPexporttable (\a b -> a {_handleCHOPexporttable = b})
handleCHOPiterations :: Lens' CHOP (Maybe (Tree Int))
handleCHOPiterations = lens _handleCHOPiterations (\a b -> a {_handleCHOPiterations = b})
handleCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
handleCHOPscope = lens _handleCHOPscope (\a b -> a {_handleCHOPscope = b})
handleCHOPinit :: Lens' CHOP (Maybe (Tree Float))
handleCHOPinit = lens _handleCHOPinit (\a b -> a {_handleCHOPinit = b})
handleCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
handleCHOPsrselect = lens _handleCHOPsrselect (\a b -> a {_handleCHOPsrselect = b})
handleCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
handleCHOPtimeslice = lens _handleCHOPtimeslice (\a b -> a {_handleCHOPtimeslice = b})
handleCHOPdelta :: Lens' CHOP (Maybe (Tree Float))
handleCHOPdelta = lens _handleCHOPdelta (\a b -> a {_handleCHOPdelta = b})

shiftCHOPstart :: Lens' CHOP (Maybe (Tree Float))
shiftCHOPstart = lens _shiftCHOPstart (\a b -> a {_shiftCHOPstart = b})
shiftCHOPend :: Lens' CHOP (Maybe (Tree Float))
shiftCHOPend = lens _shiftCHOPend (\a b -> a {_shiftCHOPend = b})
shiftCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
shiftCHOPexportmethod = lens _shiftCHOPexportmethod (\a b -> a {_shiftCHOPexportmethod = b})
shiftCHOPstartunit :: Lens' CHOP (Maybe (Tree Int))
shiftCHOPstartunit = lens _shiftCHOPstartunit (\a b -> a {_shiftCHOPstartunit = b})
shiftCHOPreference :: Lens' CHOP (Maybe (Tree Int))
shiftCHOPreference = lens _shiftCHOPreference (\a b -> a {_shiftCHOPreference = b})
shiftCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
shiftCHOPscope = lens _shiftCHOPscope (\a b -> a {_shiftCHOPscope = b})
shiftCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
shiftCHOPexporttable = lens _shiftCHOPexporttable (\a b -> a {_shiftCHOPexporttable = b})
shiftCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
shiftCHOPtimeslice = lens _shiftCHOPtimeslice (\a b -> a {_shiftCHOPtimeslice = b})
shiftCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
shiftCHOPsrselect = lens _shiftCHOPsrselect (\a b -> a {_shiftCHOPsrselect = b})
shiftCHOPrelative :: Lens' CHOP (Maybe (Tree Int))
shiftCHOPrelative = lens _shiftCHOPrelative (\a b -> a {_shiftCHOPrelative = b})
shiftCHOPscrollunit :: Lens' CHOP (Maybe (Tree Int))
shiftCHOPscrollunit = lens _shiftCHOPscrollunit (\a b -> a {_shiftCHOPscrollunit = b})
shiftCHOPendunit :: Lens' CHOP (Maybe (Tree Int))
shiftCHOPendunit = lens _shiftCHOPendunit (\a b -> a {_shiftCHOPendunit = b})
shiftCHOPscroll :: Lens' CHOP (Maybe (Tree Float))
shiftCHOPscroll = lens _shiftCHOPscroll (\a b -> a {_shiftCHOPscroll = b})

expressionCHOPexpr4 :: Lens' CHOP (Maybe (Tree Float))
expressionCHOPexpr4 = lens _expressionCHOPexpr4 (\a b -> a {_expressionCHOPexpr4 = b})
expressionCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
expressionCHOPexportmethod = lens _expressionCHOPexportmethod (\a b -> a {_expressionCHOPexportmethod = b})
expressionCHOPexpr2 :: Lens' CHOP (Maybe (Tree Float))
expressionCHOPexpr2 = lens _expressionCHOPexpr2 (\a b -> a {_expressionCHOPexpr2 = b})
expressionCHOPchanperexpr :: Lens' CHOP (Maybe (Tree Int))
expressionCHOPchanperexpr = lens _expressionCHOPchanperexpr (\a b -> a {_expressionCHOPchanperexpr = b})
expressionCHOPexpr3 :: Lens' CHOP (Maybe (Tree Float))
expressionCHOPexpr3 = lens _expressionCHOPexpr3 (\a b -> a {_expressionCHOPexpr3 = b})
expressionCHOPnumexpr :: Lens' CHOP (Maybe (Tree Int))
expressionCHOPnumexpr = lens _expressionCHOPnumexpr (\a b -> a {_expressionCHOPnumexpr = b})
expressionCHOPexpr1 :: Lens' CHOP (Maybe (Tree Float))
expressionCHOPexpr1 = lens _expressionCHOPexpr1 (\a b -> a {_expressionCHOPexpr1 = b})
expressionCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
expressionCHOPscope = lens _expressionCHOPscope (\a b -> a {_expressionCHOPscope = b})
expressionCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
expressionCHOPexporttable = lens _expressionCHOPexporttable (\a b -> a {_expressionCHOPexporttable = b})
expressionCHOPexpr5 :: Lens' CHOP (Maybe (Tree Float))
expressionCHOPexpr5 = lens _expressionCHOPexpr5 (\a b -> a {_expressionCHOPexpr5 = b})
expressionCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
expressionCHOPsrselect = lens _expressionCHOPsrselect (\a b -> a {_expressionCHOPsrselect = b})
expressionCHOPlimitexpr :: Lens' CHOP (Maybe (Tree Bool))
expressionCHOPlimitexpr = lens _expressionCHOPlimitexpr (\a b -> a {_expressionCHOPlimitexpr = b})
expressionCHOPlimitnum :: Lens' CHOP (Maybe (Tree Int))
expressionCHOPlimitnum = lens _expressionCHOPlimitnum (\a b -> a {_expressionCHOPlimitnum = b})
expressionCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
expressionCHOPtimeslice = lens _expressionCHOPtimeslice (\a b -> a {_expressionCHOPtimeslice = b})
expressionCHOPexpr0 :: Lens' CHOP (Maybe (Tree Float))
expressionCHOPexpr0 = lens _expressionCHOPexpr0 (\a b -> a {_expressionCHOPexpr0 = b})

mergeCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
mergeCHOPexportmethod = lens _mergeCHOPexportmethod (\a b -> a {_mergeCHOPexportmethod = b})
mergeCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
mergeCHOPsrselect = lens _mergeCHOPsrselect (\a b -> a {_mergeCHOPsrselect = b})
mergeCHOPduplicate :: Lens' CHOP (Maybe (Tree Int))
mergeCHOPduplicate = lens _mergeCHOPduplicate (\a b -> a {_mergeCHOPduplicate = b})
mergeCHOPalign :: Lens' CHOP (Maybe (Tree Int))
mergeCHOPalign = lens _mergeCHOPalign (\a b -> a {_mergeCHOPalign = b})
mergeCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
mergeCHOPexporttable = lens _mergeCHOPexporttable (\a b -> a {_mergeCHOPexporttable = b})
mergeCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
mergeCHOPtimeslice = lens _mergeCHOPtimeslice (\a b -> a {_mergeCHOPtimeslice = b})
mergeCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
mergeCHOPscope = lens _mergeCHOPscope (\a b -> a {_mergeCHOPscope = b})

copyCHOPoutput :: Lens' CHOP (Maybe (Tree Int))
copyCHOPoutput = lens _copyCHOPoutput (\a b -> a {_copyCHOPoutput = b})
copyCHOPparam4 :: Lens' CHOP (Maybe (Tree ByteString))
copyCHOPparam4 = lens _copyCHOPparam4 (\a b -> a {_copyCHOPparam4 = b})
copyCHOPval1 :: Lens' CHOP (Maybe (Tree Float))
copyCHOPval1 = lens _copyCHOPval1 (\a b -> a {_copyCHOPval1 = b})
copyCHOPparam8 :: Lens' CHOP (Maybe (Tree ByteString))
copyCHOPparam8 = lens _copyCHOPparam8 (\a b -> a {_copyCHOPparam8 = b})
copyCHOPval6 :: Lens' CHOP (Maybe (Tree Float))
copyCHOPval6 = lens _copyCHOPval6 (\a b -> a {_copyCHOPval6 = b})
copyCHOPparam10 :: Lens' CHOP (Maybe (Tree ByteString))
copyCHOPparam10 = lens _copyCHOPparam10 (\a b -> a {_copyCHOPparam10 = b})
copyCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
copyCHOPscope = lens _copyCHOPscope (\a b -> a {_copyCHOPscope = b})
copyCHOPremainder :: Lens' CHOP (Maybe (Tree Int))
copyCHOPremainder = lens _copyCHOPremainder (\a b -> a {_copyCHOPremainder = b})
copyCHOPkeep :: Lens' CHOP (Maybe (Tree Bool))
copyCHOPkeep = lens _copyCHOPkeep (\a b -> a {_copyCHOPkeep = b})
copyCHOPparam2 :: Lens' CHOP (Maybe (Tree ByteString))
copyCHOPparam2 = lens _copyCHOPparam2 (\a b -> a {_copyCHOPparam2 = b})
copyCHOPval9 :: Lens' CHOP (Maybe (Tree Float))
copyCHOPval9 = lens _copyCHOPval9 (\a b -> a {_copyCHOPval9 = b})
copyCHOPval3 :: Lens' CHOP (Maybe (Tree Float))
copyCHOPval3 = lens _copyCHOPval3 (\a b -> a {_copyCHOPval3 = b})
copyCHOPparam1 :: Lens' CHOP (Maybe (Tree ByteString))
copyCHOPparam1 = lens _copyCHOPparam1 (\a b -> a {_copyCHOPparam1 = b})
copyCHOPparam3 :: Lens' CHOP (Maybe (Tree ByteString))
copyCHOPparam3 = lens _copyCHOPparam3 (\a b -> a {_copyCHOPparam3 = b})
copyCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
copyCHOPexporttable = lens _copyCHOPexporttable (\a b -> a {_copyCHOPexporttable = b})
copyCHOPval5 :: Lens' CHOP (Maybe (Tree Float))
copyCHOPval5 = lens _copyCHOPval5 (\a b -> a {_copyCHOPval5 = b})
copyCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
copyCHOPexportmethod = lens _copyCHOPexportmethod (\a b -> a {_copyCHOPexportmethod = b})
copyCHOPparam5 :: Lens' CHOP (Maybe (Tree ByteString))
copyCHOPparam5 = lens _copyCHOPparam5 (\a b -> a {_copyCHOPparam5 = b})
copyCHOPcook :: Lens' CHOP (Maybe (Tree Bool))
copyCHOPcook = lens _copyCHOPcook (\a b -> a {_copyCHOPcook = b})
copyCHOPparam6 :: Lens' CHOP (Maybe (Tree ByteString))
copyCHOPparam6 = lens _copyCHOPparam6 (\a b -> a {_copyCHOPparam6 = b})
copyCHOPval10 :: Lens' CHOP (Maybe (Tree Float))
copyCHOPval10 = lens _copyCHOPval10 (\a b -> a {_copyCHOPval10 = b})
copyCHOPthreshold :: Lens' CHOP (Maybe (Tree Float))
copyCHOPthreshold = lens _copyCHOPthreshold (\a b -> a {_copyCHOPthreshold = b})
copyCHOPparam9 :: Lens' CHOP (Maybe (Tree ByteString))
copyCHOPparam9 = lens _copyCHOPparam9 (\a b -> a {_copyCHOPparam9 = b})
copyCHOPval7 :: Lens' CHOP (Maybe (Tree Float))
copyCHOPval7 = lens _copyCHOPval7 (\a b -> a {_copyCHOPval7 = b})
copyCHOPval8 :: Lens' CHOP (Maybe (Tree Float))
copyCHOPval8 = lens _copyCHOPval8 (\a b -> a {_copyCHOPval8 = b})
copyCHOPparam7 :: Lens' CHOP (Maybe (Tree ByteString))
copyCHOPparam7 = lens _copyCHOPparam7 (\a b -> a {_copyCHOPparam7 = b})
copyCHOPval4 :: Lens' CHOP (Maybe (Tree Float))
copyCHOPval4 = lens _copyCHOPval4 (\a b -> a {_copyCHOPval4 = b})
copyCHOPval2 :: Lens' CHOP (Maybe (Tree Float))
copyCHOPval2 = lens _copyCHOPval2 (\a b -> a {_copyCHOPval2 = b})
copyCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
copyCHOPsrselect = lens _copyCHOPsrselect (\a b -> a {_copyCHOPsrselect = b})
copyCHOPmethod :: Lens' CHOP (Maybe (Tree Int))
copyCHOPmethod = lens _copyCHOPmethod (\a b -> a {_copyCHOPmethod = b})
copyCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
copyCHOPtimeslice = lens _copyCHOPtimeslice (\a b -> a {_copyCHOPtimeslice = b})

kinectCHOPprediction :: Lens' CHOP (Maybe (Tree Float))
kinectCHOPprediction = lens _kinectCHOPprediction (\a b -> a {_kinectCHOPprediction = b})
kinectCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPactive = lens _kinectCHOPactive (\a b -> a {_kinectCHOPactive = b})
kinectCHOPsmoothing :: Lens' CHOP (Maybe (Tree Float))
kinectCHOPsmoothing = lens _kinectCHOPsmoothing (\a b -> a {_kinectCHOPsmoothing = b})
kinectCHOPcolorspace :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPcolorspace = lens _kinectCHOPcolorspace (\a b -> a {_kinectCHOPcolorspace = b})
kinectCHOPjointsmoothing :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPjointsmoothing = lens _kinectCHOPjointsmoothing (\a b -> a {_kinectCHOPjointsmoothing = b})
kinectCHOPflipfaceu :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPflipfaceu = lens _kinectCHOPflipfaceu (\a b -> a {_kinectCHOPflipfaceu = b})
kinectCHOPworldspace :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPworldspace = lens _kinectCHOPworldspace (\a b -> a {_kinectCHOPworldspace = b})
kinectCHOProtationsmoothing :: Lens' CHOP (Maybe (Tree Float))
kinectCHOProtationsmoothing = lens _kinectCHOProtationsmoothing (\a b -> a {_kinectCHOProtationsmoothing = b})
kinectCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
kinectCHOPscope = lens _kinectCHOPscope (\a b -> a {_kinectCHOPscope = b})
kinectCHOPcorrection :: Lens' CHOP (Maybe (Tree Float))
kinectCHOPcorrection = lens _kinectCHOPcorrection (\a b -> a {_kinectCHOPcorrection = b})
kinectCHOPskeleton :: Lens' CHOP (Maybe (Tree Int))
kinectCHOPskeleton = lens _kinectCHOPskeleton (\a b -> a {_kinectCHOPskeleton = b})
kinectCHOPmaxplayers :: Lens' CHOP (Maybe (Tree Int))
kinectCHOPmaxplayers = lens _kinectCHOPmaxplayers (\a b -> a {_kinectCHOPmaxplayers = b})
kinectCHOPinteractions :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPinteractions = lens _kinectCHOPinteractions (\a b -> a {_kinectCHOPinteractions = b})
kinectCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
kinectCHOPexporttable = lens _kinectCHOPexporttable (\a b -> a {_kinectCHOPexporttable = b})
kinectCHOPfacetracking :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPfacetracking = lens _kinectCHOPfacetracking (\a b -> a {_kinectCHOPfacetracking = b})
kinectCHOPsensor :: Lens' CHOP (Maybe (Tree ByteString))
kinectCHOPsensor = lens _kinectCHOPsensor (\a b -> a {_kinectCHOPsensor = b})
kinectCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
kinectCHOPexportmethod = lens _kinectCHOPexportmethod (\a b -> a {_kinectCHOPexportmethod = b})
kinectCHOPdepthspace :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPdepthspace = lens _kinectCHOPdepthspace (\a b -> a {_kinectCHOPdepthspace = b})
kinectCHOPunrollbones :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPunrollbones = lens _kinectCHOPunrollbones (\a b -> a {_kinectCHOPunrollbones = b})
kinectCHOPjitterrad :: Lens' CHOP (Maybe (Tree Float))
kinectCHOPjitterrad = lens _kinectCHOPjitterrad (\a b -> a {_kinectCHOPjitterrad = b})
kinectCHOPhwversion :: Lens' CHOP (Maybe (Tree Int))
kinectCHOPhwversion = lens _kinectCHOPhwversion (\a b -> a {_kinectCHOPhwversion = b})
kinectCHOPrelbonerotations :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPrelbonerotations = lens _kinectCHOPrelbonerotations (\a b -> a {_kinectCHOPrelbonerotations = b})
kinectCHOPmaxdevrad :: Lens' CHOP (Maybe (Tree Float))
kinectCHOPmaxdevrad = lens _kinectCHOPmaxdevrad (\a b -> a {_kinectCHOPmaxdevrad = b})
kinectCHOPabsbonerotations :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPabsbonerotations = lens _kinectCHOPabsbonerotations (\a b -> a {_kinectCHOPabsbonerotations = b})
kinectCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
kinectCHOPsrselect = lens _kinectCHOPsrselect (\a b -> a {_kinectCHOPsrselect = b})
kinectCHOPflipskelu :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPflipskelu = lens _kinectCHOPflipskelu (\a b -> a {_kinectCHOPflipskelu = b})
kinectCHOPbonelengths :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPbonelengths = lens _kinectCHOPbonelengths (\a b -> a {_kinectCHOPbonelengths = b})
kinectCHOPstatuschans :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPstatuschans = lens _kinectCHOPstatuschans (\a b -> a {_kinectCHOPstatuschans = b})
kinectCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPtimeslice = lens _kinectCHOPtimeslice (\a b -> a {_kinectCHOPtimeslice = b})
kinectCHOPneardepthmode :: Lens' CHOP (Maybe (Tree Bool))
kinectCHOPneardepthmode = lens _kinectCHOPneardepthmode (\a b -> a {_kinectCHOPneardepthmode = b})

inCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
inCHOPexportmethod = lens _inCHOPexportmethod (\a b -> a {_inCHOPexportmethod = b})
inCHOPspecifynum :: Lens' CHOP (Maybe (Tree Bool))
inCHOPspecifynum = lens _inCHOPspecifynum (\a b -> a {_inCHOPspecifynum = b})
inCHOPlabel :: Lens' CHOP (Maybe (Tree ByteString))
inCHOPlabel = lens _inCHOPlabel (\a b -> a {_inCHOPlabel = b})
inCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
inCHOPsrselect = lens _inCHOPsrselect (\a b -> a {_inCHOPsrselect = b})
inCHOPnumchannels :: Lens' CHOP (Maybe (Tree Int))
inCHOPnumchannels = lens _inCHOPnumchannels (\a b -> a {_inCHOPnumchannels = b})
inCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
inCHOPexporttable = lens _inCHOPexporttable (\a b -> a {_inCHOPexporttable = b})
inCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
inCHOPtimeslice = lens _inCHOPtimeslice (\a b -> a {_inCHOPtimeslice = b})
inCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
inCHOPscope = lens _inCHOPscope (\a b -> a {_inCHOPscope = b})
inCHOPchannames :: Lens' CHOP (Maybe (Tree ByteString))
inCHOPchannames = lens _inCHOPchannames (\a b -> a {_inCHOPchannames = b})

timerCHOPoutdonepulse :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutdonepulse = lens _timerCHOPoutdonepulse (\a b -> a {_timerCHOPoutdonepulse = b})
timerCHOPouttimerpulse :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPouttimerpulse = lens _timerCHOPouttimerpulse (\a b -> a {_timerCHOPouttimerpulse = b})
timerCHOPoutcyclepulse :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutcyclepulse = lens _timerCHOPoutcyclepulse (\a b -> a {_timerCHOPoutcyclepulse = b})
timerCHOPoutdelayfraction :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutdelayfraction = lens _timerCHOPoutdelayfraction (\a b -> a {_timerCHOPoutdelayfraction = b})
timerCHOPcueunits :: Lens' CHOP (Maybe (Tree Int))
timerCHOPcueunits = lens _timerCHOPcueunits (\a b -> a {_timerCHOPcueunits = b})
timerCHOPoutfraction :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutfraction = lens _timerCHOPoutfraction (\a b -> a {_timerCHOPoutfraction = b})
timerCHOPoutdone :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutdone = lens _timerCHOPoutdone (\a b -> a {_timerCHOPoutdone = b})
timerCHOPoutsegplusfraction :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutsegplusfraction = lens _timerCHOPoutsegplusfraction (\a b -> a {_timerCHOPoutsegplusfraction = b})
timerCHOPcycle :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPcycle = lens _timerCHOPcycle (\a b -> a {_timerCHOPcycle = b})
timerCHOPcyclelimit :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPcyclelimit = lens _timerCHOPcyclelimit (\a b -> a {_timerCHOPcyclelimit = b})
timerCHOPoutsegpulse :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutsegpulse = lens _timerCHOPoutsegpulse (\a b -> a {_timerCHOPoutsegpulse = b})
timerCHOPinfocolumns :: Lens' CHOP (Maybe (Tree ByteString))
timerCHOPinfocolumns = lens _timerCHOPinfocolumns (\a b -> a {_timerCHOPinfocolumns = b})
timerCHOPoutready :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutready = lens _timerCHOPoutready (\a b -> a {_timerCHOPoutready = b})
timerCHOPoutseg :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutseg = lens _timerCHOPoutseg (\a b -> a {_timerCHOPoutseg = b})
timerCHOPdelay :: Lens' CHOP (Maybe (Tree Float))
timerCHOPdelay = lens _timerCHOPdelay (\a b -> a {_timerCHOPdelay = b})
timerCHOPcycleendalert :: Lens' CHOP (Maybe (Tree Float))
timerCHOPcycleendalert = lens _timerCHOPcycleendalert (\a b -> a {_timerCHOPcycleendalert = b})
timerCHOPdelayunits :: Lens' CHOP (Maybe (Tree Int))
timerCHOPdelayunits = lens _timerCHOPdelayunits (\a b -> a {_timerCHOPdelayunits = b})
timerCHOPouttimeractive :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPouttimeractive = lens _timerCHOPouttimeractive (\a b -> a {_timerCHOPouttimeractive = b})
timerCHOPinitialize :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPinitialize = lens _timerCHOPinitialize (\a b -> a {_timerCHOPinitialize = b})
timerCHOPoutcycle :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutcycle = lens _timerCHOPoutcycle (\a b -> a {_timerCHOPoutcycle = b})
timerCHOPoutrunningcount :: Lens' CHOP (Maybe (Tree Int))
timerCHOPoutrunningcount = lens _timerCHOPoutrunningcount (\a b -> a {_timerCHOPoutrunningcount = b})
timerCHOPrate :: Lens' CHOP (Maybe (Tree Float))
timerCHOPrate = lens _timerCHOPrate (\a b -> a {_timerCHOPrate = b})
timerCHOPchannelcolumns :: Lens' CHOP (Maybe (Tree ByteString))
timerCHOPchannelcolumns = lens _timerCHOPchannelcolumns (\a b -> a {_timerCHOPchannelcolumns = b})
timerCHOPlengthunits :: Lens' CHOP (Maybe (Tree Int))
timerCHOPlengthunits = lens _timerCHOPlengthunits (\a b -> a {_timerCHOPlengthunits = b})
timerCHOPlength :: Lens' CHOP (Maybe (Tree Float))
timerCHOPlength = lens _timerCHOPlength (\a b -> a {_timerCHOPlength = b})
timerCHOPplay :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPplay = lens _timerCHOPplay (\a b -> a {_timerCHOPplay = b})
timerCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
timerCHOPsrselect = lens _timerCHOPsrselect (\a b -> a {_timerCHOPsrselect = b})
timerCHOPoutinit :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutinit = lens _timerCHOPoutinit (\a b -> a {_timerCHOPoutinit = b})
timerCHOPnotifyunits :: Lens' CHOP (Maybe (Tree Int))
timerCHOPnotifyunits = lens _timerCHOPnotifyunits (\a b -> a {_timerCHOPnotifyunits = b})
timerCHOPsegunits :: Lens' CHOP (Maybe (Tree Int))
timerCHOPsegunits = lens _timerCHOPsegunits (\a b -> a {_timerCHOPsegunits = b})
timerCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPtimeslice = lens _timerCHOPtimeslice (\a b -> a {_timerCHOPtimeslice = b})
timerCHOPcuepulse :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPcuepulse = lens _timerCHOPcuepulse (\a b -> a {_timerCHOPcuepulse = b})
timerCHOPondone :: Lens' CHOP (Maybe (Tree Int))
timerCHOPondone = lens _timerCHOPondone (\a b -> a {_timerCHOPondone = b})
timerCHOPspeed :: Lens' CHOP (Maybe (Tree Float))
timerCHOPspeed = lens _timerCHOPspeed (\a b -> a {_timerCHOPspeed = b})
timerCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPactive = lens _timerCHOPactive (\a b -> a {_timerCHOPactive = b})
timerCHOPexitendcycle :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPexitendcycle = lens _timerCHOPexitendcycle (\a b -> a {_timerCHOPexitendcycle = b})
timerCHOPcuepoint :: Lens' CHOP (Maybe (Tree Float))
timerCHOPcuepoint = lens _timerCHOPcuepoint (\a b -> a {_timerCHOPcuepoint = b})
timerCHOPinterpolation :: Lens' CHOP (Maybe (Tree Int))
timerCHOPinterpolation = lens _timerCHOPinterpolation (\a b -> a {_timerCHOPinterpolation = b})
timerCHOPgotonextseg :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPgotonextseg = lens _timerCHOPgotonextseg (\a b -> a {_timerCHOPgotonextseg = b})
timerCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
timerCHOPscope = lens _timerCHOPscope (\a b -> a {_timerCHOPscope = b})
timerCHOPstart :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPstart = lens _timerCHOPstart (\a b -> a {_timerCHOPstart = b})
timerCHOPoutrunning :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutrunning = lens _timerCHOPoutrunning (\a b -> a {_timerCHOPoutrunning = b})
timerCHOPoutcycleplusfraction :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutcycleplusfraction = lens _timerCHOPoutcycleplusfraction (\a b -> a {_timerCHOPoutcycleplusfraction = b})
timerCHOPoutcumulativecount :: Lens' CHOP (Maybe (Tree Int))
timerCHOPoutcumulativecount = lens _timerCHOPoutcumulativecount (\a b -> a {_timerCHOPoutcumulativecount = b})
timerCHOPsegdat :: Lens' CHOP (Maybe (Tree DAT))
timerCHOPsegdat = lens _timerCHOPsegdat (\a b -> a {_timerCHOPsegdat = b})
timerCHOPgotoprevseg :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPgotoprevseg = lens _timerCHOPgotoprevseg (\a b -> a {_timerCHOPgotoprevseg = b})
timerCHOPouttimercount :: Lens' CHOP (Maybe (Tree Int))
timerCHOPouttimercount = lens _timerCHOPouttimercount (\a b -> a {_timerCHOPouttimercount = b})
timerCHOPdatoutput :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPdatoutput = lens _timerCHOPdatoutput (\a b -> a {_timerCHOPdatoutput = b})
timerCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
timerCHOPexportmethod = lens _timerCHOPexportmethod (\a b -> a {_timerCHOPexportmethod = b})
timerCHOPgotoendcycle :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPgotoendcycle = lens _timerCHOPgotoendcycle (\a b -> a {_timerCHOPgotoendcycle = b})
timerCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
timerCHOPexporttable = lens _timerCHOPexporttable (\a b -> a {_timerCHOPexporttable = b})
timerCHOPoutreadypulse :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPoutreadypulse = lens _timerCHOPoutreadypulse (\a b -> a {_timerCHOPoutreadypulse = b})
timerCHOPmaxcycles :: Lens' CHOP (Maybe (Tree Int))
timerCHOPmaxcycles = lens _timerCHOPmaxcycles (\a b -> a {_timerCHOPmaxcycles = b})
timerCHOPsegmethod :: Lens' CHOP (Maybe (Tree Int))
timerCHOPsegmethod = lens _timerCHOPsegmethod (\a b -> a {_timerCHOPsegmethod = b})
timerCHOPgotodone :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPgotodone = lens _timerCHOPgotodone (\a b -> a {_timerCHOPgotodone = b})
timerCHOPplaymode :: Lens' CHOP (Maybe (Tree Int))
timerCHOPplaymode = lens _timerCHOPplaymode (\a b -> a {_timerCHOPplaymode = b})
timerCHOPcallbacks :: Lens' CHOP (Maybe (Tree DAT))
timerCHOPcallbacks = lens _timerCHOPcallbacks (\a b -> a {_timerCHOPcallbacks = b})
timerCHOPoutdelaycount :: Lens' CHOP (Maybe (Tree Int))
timerCHOPoutdelaycount = lens _timerCHOPoutdelaycount (\a b -> a {_timerCHOPoutdelaycount = b})
timerCHOPcue :: Lens' CHOP (Maybe (Tree Bool))
timerCHOPcue = lens _timerCHOPcue (\a b -> a {_timerCHOPcue = b})

sharedmeminCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
sharedmeminCHOPexportmethod = lens _sharedmeminCHOPexportmethod (\a b -> a {_sharedmeminCHOPexportmethod = b})
sharedmeminCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
sharedmeminCHOPsrselect = lens _sharedmeminCHOPsrselect (\a b -> a {_sharedmeminCHOPsrselect = b})
sharedmeminCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
sharedmeminCHOPactive = lens _sharedmeminCHOPactive (\a b -> a {_sharedmeminCHOPactive = b})
sharedmeminCHOPmemtype :: Lens' CHOP (Maybe (Tree Int))
sharedmeminCHOPmemtype = lens _sharedmeminCHOPmemtype (\a b -> a {_sharedmeminCHOPmemtype = b})
sharedmeminCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
sharedmeminCHOPexporttable = lens _sharedmeminCHOPexporttable (\a b -> a {_sharedmeminCHOPexporttable = b})
sharedmeminCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
sharedmeminCHOPtimeslice = lens _sharedmeminCHOPtimeslice (\a b -> a {_sharedmeminCHOPtimeslice = b})
sharedmeminCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
sharedmeminCHOPscope = lens _sharedmeminCHOPscope (\a b -> a {_sharedmeminCHOPscope = b})
sharedmeminCHOPname :: Lens' CHOP (Maybe (Tree ByteString))
sharedmeminCHOPname = lens _sharedmeminCHOPname (\a b -> a {_sharedmeminCHOPname = b})

keyframeCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
keyframeCHOPdefval = lens _keyframeCHOPdefval (\a b -> a {_keyframeCHOPdefval = b})
keyframeCHOPanimation :: Lens' CHOP (Maybe (Tree COMP))
keyframeCHOPanimation = lens _keyframeCHOPanimation (\a b -> a {_keyframeCHOPanimation = b})
keyframeCHOPleft :: Lens' CHOP (Maybe (Tree Int))
keyframeCHOPleft = lens _keyframeCHOPleft (\a b -> a {_keyframeCHOPleft = b})
keyframeCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
keyframeCHOPsrselect = lens _keyframeCHOPsrselect (\a b -> a {_keyframeCHOPsrselect = b})
keyframeCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
keyframeCHOPexportmethod = lens _keyframeCHOPexportmethod (\a b -> a {_keyframeCHOPexportmethod = b})
keyframeCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
keyframeCHOPtimeslice = lens _keyframeCHOPtimeslice (\a b -> a {_keyframeCHOPtimeslice = b})
keyframeCHOPrate :: Lens' CHOP (Maybe (Tree Float))
keyframeCHOPrate = lens _keyframeCHOPrate (\a b -> a {_keyframeCHOPrate = b})
keyframeCHOPright :: Lens' CHOP (Maybe (Tree Int))
keyframeCHOPright = lens _keyframeCHOPright (\a b -> a {_keyframeCHOPright = b})
keyframeCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
keyframeCHOPscope = lens _keyframeCHOPscope (\a b -> a {_keyframeCHOPscope = b})
keyframeCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
keyframeCHOPexporttable = lens _keyframeCHOPexporttable (\a b -> a {_keyframeCHOPexporttable = b})

midiinCHOPexmsg9 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexmsg9 = lens _midiinCHOPexmsg9 (\a b -> a {_midiinCHOPexmsg9 = b})
midiinCHOPexname2 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexname2 = lens _midiinCHOPexname2 (\a b -> a {_midiinCHOPexname2 = b})
midiinCHOPexmsg12 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexmsg12 = lens _midiinCHOPexmsg12 (\a b -> a {_midiinCHOPexmsg12 = b})
midiinCHOPnotenorm :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPnotenorm = lens _midiinCHOPnotenorm (\a b -> a {_midiinCHOPnotenorm = b})
midiinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPexportmethod = lens _midiinCHOPexportmethod (\a b -> a {_midiinCHOPexportmethod = b})
midiinCHOPexname4 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexname4 = lens _midiinCHOPexname4 (\a b -> a {_midiinCHOPexname4 = b})
midiinCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
midiinCHOPactive = lens _midiinCHOPactive (\a b -> a {_midiinCHOPactive = b})
midiinCHOPexmsg10 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexmsg10 = lens _midiinCHOPexmsg10 (\a b -> a {_midiinCHOPexmsg10 = b})
midiinCHOPonebased :: Lens' CHOP (Maybe (Tree Bool))
midiinCHOPonebased = lens _midiinCHOPonebased (\a b -> a {_midiinCHOPonebased = b})
midiinCHOPexname1 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexname1 = lens _midiinCHOPexname1 (\a b -> a {_midiinCHOPexname1 = b})
midiinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPscope = lens _midiinCHOPscope (\a b -> a {_midiinCHOPscope = b})
midiinCHOPfile :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPfile = lens _midiinCHOPfile (\a b -> a {_midiinCHOPfile = b})
midiinCHOPprefix :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPprefix = lens _midiinCHOPprefix (\a b -> a {_midiinCHOPprefix = b})
midiinCHOPformat :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPformat = lens _midiinCHOPformat (\a b -> a {_midiinCHOPformat = b})
midiinCHOPpressname :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPpressname = lens _midiinCHOPpressname (\a b -> a {_midiinCHOPpressname = b})
midiinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
midiinCHOPexporttable = lens _midiinCHOPexporttable (\a b -> a {_midiinCHOPexporttable = b})
midiinCHOPexmsg8 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexmsg8 = lens _midiinCHOPexmsg8 (\a b -> a {_midiinCHOPexmsg8 = b})
midiinCHOPsimplified :: Lens' CHOP (Maybe (Tree Bool))
midiinCHOPsimplified = lens _midiinCHOPsimplified (\a b -> a {_midiinCHOPsimplified = b})
midiinCHOPrecordtype :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPrecordtype = lens _midiinCHOPrecordtype (\a b -> a {_midiinCHOPrecordtype = b})
midiinCHOPexmsg4 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexmsg4 = lens _midiinCHOPexmsg4 (\a b -> a {_midiinCHOPexmsg4 = b})
midiinCHOPexmsg5 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexmsg5 = lens _midiinCHOPexmsg5 (\a b -> a {_midiinCHOPexmsg5 = b})
midiinCHOPleft :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPleft = lens _midiinCHOPleft (\a b -> a {_midiinCHOPleft = b})
midiinCHOPexname10 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexname10 = lens _midiinCHOPexname10 (\a b -> a {_midiinCHOPexname10 = b})
midiinCHOPendunit :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPendunit = lens _midiinCHOPendunit (\a b -> a {_midiinCHOPendunit = b})
midiinCHOPexmsg11 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexmsg11 = lens _midiinCHOPexmsg11 (\a b -> a {_midiinCHOPexmsg11 = b})
midiinCHOPexname5 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexname5 = lens _midiinCHOPexname5 (\a b -> a {_midiinCHOPexname5 = b})
midiinCHOPright :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPright = lens _midiinCHOPright (\a b -> a {_midiinCHOPright = b})
midiinCHOPsongpos :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPsongpos = lens _midiinCHOPsongpos (\a b -> a {_midiinCHOPsongpos = b})
midiinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
midiinCHOPtimeslice = lens _midiinCHOPtimeslice (\a b -> a {_midiinCHOPtimeslice = b})
midiinCHOPbarname :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPbarname = lens _midiinCHOPbarname (\a b -> a {_midiinCHOPbarname = b})
midiinCHOPexmsg2 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexmsg2 = lens _midiinCHOPexmsg2 (\a b -> a {_midiinCHOPexmsg2 = b})
midiinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPsrselect = lens _midiinCHOPsrselect (\a b -> a {_midiinCHOPsrselect = b})
midiinCHOPnotemeth :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPnotemeth = lens _midiinCHOPnotemeth (\a b -> a {_midiinCHOPnotemeth = b})
midiinCHOPexname12 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexname12 = lens _midiinCHOPexname12 (\a b -> a {_midiinCHOPexname12 = b})
midiinCHOPexmsg1 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexmsg1 = lens _midiinCHOPexmsg1 (\a b -> a {_midiinCHOPexmsg1 = b})
midiinCHOPexname11 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexname11 = lens _midiinCHOPexname11 (\a b -> a {_midiinCHOPexname11 = b})
midiinCHOPvelname :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPvelname = lens _midiinCHOPvelname (\a b -> a {_midiinCHOPvelname = b})
midiinCHOPrate :: Lens' CHOP (Maybe (Tree Float))
midiinCHOPrate = lens _midiinCHOPrate (\a b -> a {_midiinCHOPrate = b})
midiinCHOPexmsg7 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexmsg7 = lens _midiinCHOPexmsg7 (\a b -> a {_midiinCHOPexmsg7 = b})
midiinCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
midiinCHOPresetpulse = lens _midiinCHOPresetpulse (\a b -> a {_midiinCHOPresetpulse = b})
midiinCHOPend :: Lens' CHOP (Maybe (Tree Float))
midiinCHOPend = lens _midiinCHOPend (\a b -> a {_midiinCHOPend = b})
midiinCHOPexname3 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexname3 = lens _midiinCHOPexname3 (\a b -> a {_midiinCHOPexname3 = b})
midiinCHOPtimerperiod :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPtimerperiod = lens _midiinCHOPtimerperiod (\a b -> a {_midiinCHOPtimerperiod = b})
midiinCHOPpulsename :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPpulsename = lens _midiinCHOPpulsename (\a b -> a {_midiinCHOPpulsename = b})
midiinCHOPexmsg3 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexmsg3 = lens _midiinCHOPexmsg3 (\a b -> a {_midiinCHOPexmsg3 = b})
midiinCHOPstart :: Lens' CHOP (Maybe (Tree Float))
midiinCHOPstart = lens _midiinCHOPstart (\a b -> a {_midiinCHOPstart = b})
midiinCHOPexname9 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexname9 = lens _midiinCHOPexname9 (\a b -> a {_midiinCHOPexname9 = b})
midiinCHOPnotescope :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPnotescope = lens _midiinCHOPnotescope (\a b -> a {_midiinCHOPnotescope = b})
midiinCHOPcontroltype :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPcontroltype = lens _midiinCHOPcontroltype (\a b -> a {_midiinCHOPcontroltype = b})
midiinCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
midiinCHOPdefval = lens _midiinCHOPdefval (\a b -> a {_midiinCHOPdefval = b})
midiinCHOPexmsg6 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexmsg6 = lens _midiinCHOPexmsg6 (\a b -> a {_midiinCHOPexmsg6 = b})
midiinCHOPnotename :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPnotename = lens _midiinCHOPnotename (\a b -> a {_midiinCHOPnotename = b})
midiinCHOPcontrolname :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPcontrolname = lens _midiinCHOPcontrolname (\a b -> a {_midiinCHOPcontrolname = b})
midiinCHOPticks :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPticks = lens _midiinCHOPticks (\a b -> a {_midiinCHOPticks = b})
midiinCHOPbarmsg :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPbarmsg = lens _midiinCHOPbarmsg (\a b -> a {_midiinCHOPbarmsg = b})
midiinCHOPstartunit :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPstartunit = lens _midiinCHOPstartunit (\a b -> a {_midiinCHOPstartunit = b})
midiinCHOPvelocity :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPvelocity = lens _midiinCHOPvelocity (\a b -> a {_midiinCHOPvelocity = b})
midiinCHOPsource :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPsource = lens _midiinCHOPsource (\a b -> a {_midiinCHOPsource = b})
midiinCHOPid :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPid = lens _midiinCHOPid (\a b -> a {_midiinCHOPid = b})
midiinCHOPexname8 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexname8 = lens _midiinCHOPexname8 (\a b -> a {_midiinCHOPexname8 = b})
midiinCHOPbarperiod :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPbarperiod = lens _midiinCHOPbarperiod (\a b -> a {_midiinCHOPbarperiod = b})
midiinCHOPpitchname :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPpitchname = lens _midiinCHOPpitchname (\a b -> a {_midiinCHOPpitchname = b})
midiinCHOPexname7 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexname7 = lens _midiinCHOPexname7 (\a b -> a {_midiinCHOPexname7 = b})
midiinCHOPentire :: Lens' CHOP (Maybe (Tree Bool))
midiinCHOPentire = lens _midiinCHOPentire (\a b -> a {_midiinCHOPentire = b})
midiinCHOPbarstart :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPbarstart = lens _midiinCHOPbarstart (\a b -> a {_midiinCHOPbarstart = b})
midiinCHOPcontrolind :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPcontrolind = lens _midiinCHOPcontrolind (\a b -> a {_midiinCHOPcontrolind = b})
midiinCHOPnorm :: Lens' CHOP (Maybe (Tree Int))
midiinCHOPnorm = lens _midiinCHOPnorm (\a b -> a {_midiinCHOPnorm = b})
midiinCHOPrampname :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPrampname = lens _midiinCHOPrampname (\a b -> a {_midiinCHOPrampname = b})
midiinCHOPprogname :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPprogname = lens _midiinCHOPprogname (\a b -> a {_midiinCHOPprogname = b})
midiinCHOPchannel :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPchannel = lens _midiinCHOPchannel (\a b -> a {_midiinCHOPchannel = b})
midiinCHOPdevice :: Lens' CHOP (Maybe (Tree DAT))
midiinCHOPdevice = lens _midiinCHOPdevice (\a b -> a {_midiinCHOPdevice = b})
midiinCHOPrecord :: Lens' CHOP (Maybe (Tree Bool))
midiinCHOPrecord = lens _midiinCHOPrecord (\a b -> a {_midiinCHOPrecord = b})
midiinCHOPaftername :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPaftername = lens _midiinCHOPaftername (\a b -> a {_midiinCHOPaftername = b})
midiinCHOPtimerstart :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPtimerstart = lens _midiinCHOPtimerstart (\a b -> a {_midiinCHOPtimerstart = b})
midiinCHOPunwrap :: Lens' CHOP (Maybe (Tree Bool))
midiinCHOPunwrap = lens _midiinCHOPunwrap (\a b -> a {_midiinCHOPunwrap = b})
midiinCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
midiinCHOPreset = lens _midiinCHOPreset (\a b -> a {_midiinCHOPreset = b})
midiinCHOPexname6 :: Lens' CHOP (Maybe (Tree ByteString))
midiinCHOPexname6 = lens _midiinCHOPexname6 (\a b -> a {_midiinCHOPexname6 = b})

delayCHOPdelay :: Lens' CHOP (Maybe (Tree Float))
delayCHOPdelay = lens _delayCHOPdelay (\a b -> a {_delayCHOPdelay = b})
delayCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
delayCHOPexportmethod = lens _delayCHOPexportmethod (\a b -> a {_delayCHOPexportmethod = b})
delayCHOPdelayunit :: Lens' CHOP (Maybe (Tree Int))
delayCHOPdelayunit = lens _delayCHOPdelayunit (\a b -> a {_delayCHOPdelayunit = b})
delayCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
delayCHOPexporttable = lens _delayCHOPexporttable (\a b -> a {_delayCHOPexporttable = b})
delayCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
delayCHOPsrselect = lens _delayCHOPsrselect (\a b -> a {_delayCHOPsrselect = b})
delayCHOPmaxdelay :: Lens' CHOP (Maybe (Tree Float))
delayCHOPmaxdelay = lens _delayCHOPmaxdelay (\a b -> a {_delayCHOPmaxdelay = b})
delayCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
delayCHOPtimeslice = lens _delayCHOPtimeslice (\a b -> a {_delayCHOPtimeslice = b})
delayCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
delayCHOPscope = lens _delayCHOPscope (\a b -> a {_delayCHOPscope = b})
delayCHOPmaxdelayunit :: Lens' CHOP (Maybe (Tree Int))
delayCHOPmaxdelayunit = lens _delayCHOPmaxdelayunit (\a b -> a {_delayCHOPmaxdelayunit = b})

renderpickCHOPposition :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPposition = lens _renderpickCHOPposition (\a b -> a {_renderpickCHOPposition = b})
renderpickCHOPdepth :: Lens' CHOP (Maybe (Tree Bool))
renderpickCHOPdepth = lens _renderpickCHOPdepth (\a b -> a {_renderpickCHOPdepth = b})
renderpickCHOPpicku :: Lens' CHOP (Maybe (Tree Float))
renderpickCHOPpicku = lens _renderpickCHOPpicku (\a b -> a {_renderpickCHOPpicku = b})
renderpickCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPexportmethod = lens _renderpickCHOPexportmethod (\a b -> a {_renderpickCHOPexportmethod = b})
renderpickCHOPcolor :: Lens' CHOP (Maybe (Tree Bool))
renderpickCHOPcolor = lens _renderpickCHOPcolor (\a b -> a {_renderpickCHOPcolor = b})
renderpickCHOPcustomattrib2type :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPcustomattrib2type = lens _renderpickCHOPcustomattrib2type (\a b -> a {_renderpickCHOPcustomattrib2type = b})
renderpickCHOPpickradstep :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPpickradstep = lens _renderpickCHOPpickradstep (\a b -> a {_renderpickCHOPpickradstep = b})
renderpickCHOPcustomattrib1 :: Lens' CHOP (Maybe (Tree ByteString))
renderpickCHOPcustomattrib1 = lens _renderpickCHOPcustomattrib1 (\a b -> a {_renderpickCHOPcustomattrib1 = b})
renderpickCHOPcustomattrib2 :: Lens' CHOP (Maybe (Tree ByteString))
renderpickCHOPcustomattrib2 = lens _renderpickCHOPcustomattrib2 (\a b -> a {_renderpickCHOPcustomattrib2 = b})
renderpickCHOPpickv :: Lens' CHOP (Maybe (Tree Float))
renderpickCHOPpickv = lens _renderpickCHOPpickv (\a b -> a {_renderpickCHOPpickv = b})
renderpickCHOPclearprev :: Lens' CHOP (Maybe (Tree Bool))
renderpickCHOPclearprev = lens _renderpickCHOPclearprev (\a b -> a {_renderpickCHOPclearprev = b})
renderpickCHOPpath :: Lens' CHOP (Maybe (Tree Bool))
renderpickCHOPpath = lens _renderpickCHOPpath (\a b -> a {_renderpickCHOPpath = b})
renderpickCHOPselect :: Lens' CHOP (Maybe (Tree Bool))
renderpickCHOPselect = lens _renderpickCHOPselect (\a b -> a {_renderpickCHOPselect = b})
renderpickCHOPactivatecallbacks :: Lens' CHOP (Maybe (Tree Bool))
renderpickCHOPactivatecallbacks = lens _renderpickCHOPactivatecallbacks (\a b -> a {_renderpickCHOPactivatecallbacks = b})
renderpickCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
renderpickCHOPscope = lens _renderpickCHOPscope (\a b -> a {_renderpickCHOPscope = b})
renderpickCHOPpanel :: Lens' CHOP (Maybe (Tree COMP))
renderpickCHOPpanel = lens _renderpickCHOPpanel (\a b -> a {_renderpickCHOPpanel = b})
renderpickCHOPcallbacks :: Lens' CHOP (Maybe (Tree DAT))
renderpickCHOPcallbacks = lens _renderpickCHOPcallbacks (\a b -> a {_renderpickCHOPcallbacks = b})
renderpickCHOPpickradius :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPpickradius = lens _renderpickCHOPpickradius (\a b -> a {_renderpickCHOPpickradius = b})
renderpickCHOPcustomattrib1type :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPcustomattrib1type = lens _renderpickCHOPcustomattrib1type (\a b -> a {_renderpickCHOPcustomattrib1type = b})
renderpickCHOPpanelvalue :: Lens' CHOP (Maybe (Tree ByteString))
renderpickCHOPpanelvalue = lens _renderpickCHOPpanelvalue (\a b -> a {_renderpickCHOPpanelvalue = b})
renderpickCHOPpickcirstep :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPpickcirstep = lens _renderpickCHOPpickcirstep (\a b -> a {_renderpickCHOPpickcirstep = b})
renderpickCHOPcustomattrib3type :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPcustomattrib3type = lens _renderpickCHOPcustomattrib3type (\a b -> a {_renderpickCHOPcustomattrib3type = b})
renderpickCHOPcustomattrib3 :: Lens' CHOP (Maybe (Tree ByteString))
renderpickCHOPcustomattrib3 = lens _renderpickCHOPcustomattrib3 (\a b -> a {_renderpickCHOPcustomattrib3 = b})
renderpickCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
renderpickCHOPtimeslice = lens _renderpickCHOPtimeslice (\a b -> a {_renderpickCHOPtimeslice = b})
renderpickCHOPstrategy :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPstrategy = lens _renderpickCHOPstrategy (\a b -> a {_renderpickCHOPstrategy = b})
renderpickCHOPuv :: Lens' CHOP (Maybe (Tree Bool))
renderpickCHOPuv = lens _renderpickCHOPuv (\a b -> a {_renderpickCHOPuv = b})
renderpickCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
renderpickCHOPexporttable = lens _renderpickCHOPexporttable (\a b -> a {_renderpickCHOPexporttable = b})
renderpickCHOPrendertop :: Lens' CHOP (Maybe (Tree TOP))
renderpickCHOPrendertop = lens _renderpickCHOPrendertop (\a b -> a {_renderpickCHOPrendertop = b})
renderpickCHOPusepickableflags :: Lens' CHOP (Maybe (Tree Bool))
renderpickCHOPusepickableflags = lens _renderpickCHOPusepickableflags (\a b -> a {_renderpickCHOPusepickableflags = b})
renderpickCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPsrselect = lens _renderpickCHOPsrselect (\a b -> a {_renderpickCHOPsrselect = b})
renderpickCHOPcustomattrib4 :: Lens' CHOP (Maybe (Tree ByteString))
renderpickCHOPcustomattrib4 = lens _renderpickCHOPcustomattrib4 (\a b -> a {_renderpickCHOPcustomattrib4 = b})
renderpickCHOPinstanceid :: Lens' CHOP (Maybe (Tree Bool))
renderpickCHOPinstanceid = lens _renderpickCHOPinstanceid (\a b -> a {_renderpickCHOPinstanceid = b})
renderpickCHOPcustomattrib4type :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPcustomattrib4type = lens _renderpickCHOPcustomattrib4type (\a b -> a {_renderpickCHOPcustomattrib4type = b})
renderpickCHOPresponsetime :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPresponsetime = lens _renderpickCHOPresponsetime (\a b -> a {_renderpickCHOPresponsetime = b})
renderpickCHOPincludenonpickable :: Lens' CHOP (Maybe (Tree Bool))
renderpickCHOPincludenonpickable = lens _renderpickCHOPincludenonpickable (\a b -> a {_renderpickCHOPincludenonpickable = b})
renderpickCHOPnormal :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPnormal = lens _renderpickCHOPnormal (\a b -> a {_renderpickCHOPnormal = b})
renderpickCHOPpickingby :: Lens' CHOP (Maybe (Tree Int))
renderpickCHOPpickingby = lens _renderpickCHOPpickingby (\a b -> a {_renderpickCHOPpickingby = b})

replaceCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
replaceCHOPexportmethod = lens _replaceCHOPexportmethod (\a b -> a {_replaceCHOPexportmethod = b})
replaceCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
replaceCHOPsrselect = lens _replaceCHOPsrselect (\a b -> a {_replaceCHOPsrselect = b})
replaceCHOPnotify :: Lens' CHOP (Maybe (Tree Bool))
replaceCHOPnotify = lens _replaceCHOPnotify (\a b -> a {_replaceCHOPnotify = b})
replaceCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
replaceCHOPexporttable = lens _replaceCHOPexporttable (\a b -> a {_replaceCHOPexporttable = b})
replaceCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
replaceCHOPtimeslice = lens _replaceCHOPtimeslice (\a b -> a {_replaceCHOPtimeslice = b})
replaceCHOPlength :: Lens' CHOP (Maybe (Tree Int))
replaceCHOPlength = lens _replaceCHOPlength (\a b -> a {_replaceCHOPlength = b})
replaceCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
replaceCHOPscope = lens _replaceCHOPscope (\a b -> a {_replaceCHOPscope = b})

countCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
countCHOPresetpulse = lens _countCHOPresetpulse (\a b -> a {_countCHOPresetpulse = b})
countCHOPthreshdown :: Lens' CHOP (Maybe (Tree Float))
countCHOPthreshdown = lens _countCHOPthreshdown (\a b -> a {_countCHOPthreshdown = b})
countCHOPontooff :: Lens' CHOP (Maybe (Tree Int))
countCHOPontooff = lens _countCHOPontooff (\a b -> a {_countCHOPontooff = b})
countCHOPoutput :: Lens' CHOP (Maybe (Tree Int))
countCHOPoutput = lens _countCHOPoutput (\a b -> a {_countCHOPoutput = b})
countCHOPlimitmin :: Lens' CHOP (Maybe (Tree Float))
countCHOPlimitmin = lens _countCHOPlimitmin (\a b -> a {_countCHOPlimitmin = b})
countCHOPofftoon :: Lens' CHOP (Maybe (Tree Int))
countCHOPofftoon = lens _countCHOPofftoon (\a b -> a {_countCHOPofftoon = b})
countCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
countCHOPscope = lens _countCHOPscope (\a b -> a {_countCHOPscope = b})
countCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
countCHOPexportmethod = lens _countCHOPexportmethod (\a b -> a {_countCHOPexportmethod = b})
countCHOPlimitmax :: Lens' CHOP (Maybe (Tree Float))
countCHOPlimitmax = lens _countCHOPlimitmax (\a b -> a {_countCHOPlimitmax = b})
countCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
countCHOPexporttable = lens _countCHOPexporttable (\a b -> a {_countCHOPexporttable = b})
countCHOPretriggerunit :: Lens' CHOP (Maybe (Tree Int))
countCHOPretriggerunit = lens _countCHOPretriggerunit (\a b -> a {_countCHOPretriggerunit = b})
countCHOPresetvalue :: Lens' CHOP (Maybe (Tree Float))
countCHOPresetvalue = lens _countCHOPresetvalue (\a b -> a {_countCHOPresetvalue = b})
countCHOPretrigger :: Lens' CHOP (Maybe (Tree Float))
countCHOPretrigger = lens _countCHOPretrigger (\a b -> a {_countCHOPretrigger = b})
countCHOPtriggeron :: Lens' CHOP (Maybe (Tree Int))
countCHOPtriggeron = lens _countCHOPtriggeron (\a b -> a {_countCHOPtriggeron = b})
countCHOPthreshup :: Lens' CHOP (Maybe (Tree Float))
countCHOPthreshup = lens _countCHOPthreshup (\a b -> a {_countCHOPthreshup = b})
countCHOPresetcondition :: Lens' CHOP (Maybe (Tree Int))
countCHOPresetcondition = lens _countCHOPresetcondition (\a b -> a {_countCHOPresetcondition = b})
countCHOPon :: Lens' CHOP (Maybe (Tree Int))
countCHOPon = lens _countCHOPon (\a b -> a {_countCHOPon = b})
countCHOPoff :: Lens' CHOP (Maybe (Tree Int))
countCHOPoff = lens _countCHOPoff (\a b -> a {_countCHOPoff = b})
countCHOPthreshold :: Lens' CHOP (Maybe (Tree Bool))
countCHOPthreshold = lens _countCHOPthreshold (\a b -> a {_countCHOPthreshold = b})
countCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
countCHOPsrselect = lens _countCHOPsrselect (\a b -> a {_countCHOPsrselect = b})
countCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
countCHOPtimeslice = lens _countCHOPtimeslice (\a b -> a {_countCHOPtimeslice = b})
countCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
countCHOPreset = lens _countCHOPreset (\a b -> a {_countCHOPreset = b})

oculusaudioCHOProomsize :: Lens' CHOP (Vec3)
oculusaudioCHOProomsize = lens _oculusaudioCHOProomsize (\a b -> a {_oculusaudioCHOProomsize = b})
oculusaudioCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
oculusaudioCHOPactive = lens _oculusaudioCHOPactive (\a b -> a {_oculusaudioCHOPactive = b})
oculusaudioCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
oculusaudioCHOPexportmethod = lens _oculusaudioCHOPexportmethod (\a b -> a {_oculusaudioCHOPexportmethod = b})
oculusaudioCHOPbandhint :: Lens' CHOP (Maybe (Tree Int))
oculusaudioCHOPbandhint = lens _oculusaudioCHOPbandhint (\a b -> a {_oculusaudioCHOPbandhint = b})
oculusaudioCHOPmaxrange :: Lens' CHOP (Maybe (Tree Float))
oculusaudioCHOPmaxrange = lens _oculusaudioCHOPmaxrange (\a b -> a {_oculusaudioCHOPmaxrange = b})
oculusaudioCHOPattenuation :: Lens' CHOP (Maybe (Tree Int))
oculusaudioCHOPattenuation = lens _oculusaudioCHOPattenuation (\a b -> a {_oculusaudioCHOPattenuation = b})
oculusaudioCHOPreflectrevert :: Lens' CHOP (Maybe (Tree Bool))
oculusaudioCHOPreflectrevert = lens _oculusaudioCHOPreflectrevert (\a b -> a {_oculusaudioCHOPreflectrevert = b})
oculusaudioCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
oculusaudioCHOPexporttable = lens _oculusaudioCHOPexporttable (\a b -> a {_oculusaudioCHOPexporttable = b})
oculusaudioCHOProomleftrelfect :: Lens' CHOP (Maybe (Tree Float))
oculusaudioCHOProomleftrelfect = lens _oculusaudioCHOProomleftrelfect (\a b -> a {_oculusaudioCHOProomleftrelfect = b})
oculusaudioCHOPboxroommode :: Lens' CHOP (Maybe (Tree Bool))
oculusaudioCHOPboxroommode = lens _oculusaudioCHOPboxroommode (\a b -> a {_oculusaudioCHOPboxroommode = b})
oculusaudioCHOPattenuationscale :: Lens' CHOP (Maybe (Tree Float))
oculusaudioCHOPattenuationscale = lens _oculusaudioCHOPattenuationscale (\a b -> a {_oculusaudioCHOPattenuationscale = b})
oculusaudioCHOProomrightrelfect :: Lens' CHOP (Maybe (Tree Float))
oculusaudioCHOProomrightrelfect = lens _oculusaudioCHOProomrightrelfect (\a b -> a {_oculusaudioCHOProomrightrelfect = b})
oculusaudioCHOProombackrelfect :: Lens' CHOP (Maybe (Tree Float))
oculusaudioCHOProombackrelfect = lens _oculusaudioCHOProombackrelfect (\a b -> a {_oculusaudioCHOProombackrelfect = b})
oculusaudioCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
oculusaudioCHOPscope = lens _oculusaudioCHOPscope (\a b -> a {_oculusaudioCHOPscope = b})
oculusaudioCHOProomtoprelfect :: Lens' CHOP (Maybe (Tree Float))
oculusaudioCHOProomtoprelfect = lens _oculusaudioCHOProomtoprelfect (\a b -> a {_oculusaudioCHOProomtoprelfect = b})
oculusaudioCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
oculusaudioCHOPsrselect = lens _oculusaudioCHOPsrselect (\a b -> a {_oculusaudioCHOPsrselect = b})
oculusaudioCHOPminrange :: Lens' CHOP (Maybe (Tree Float))
oculusaudioCHOPminrange = lens _oculusaudioCHOPminrange (\a b -> a {_oculusaudioCHOPminrange = b})
oculusaudioCHOProomfrontrelfect :: Lens' CHOP (Maybe (Tree Float))
oculusaudioCHOProomfrontrelfect = lens _oculusaudioCHOProomfrontrelfect (\a b -> a {_oculusaudioCHOProomfrontrelfect = b})
oculusaudioCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
oculusaudioCHOPtimeslice = lens _oculusaudioCHOPtimeslice (\a b -> a {_oculusaudioCHOPtimeslice = b})
oculusaudioCHOPdiameter :: Lens' CHOP (Maybe (Tree Float))
oculusaudioCHOPdiameter = lens _oculusaudioCHOPdiameter (\a b -> a {_oculusaudioCHOPdiameter = b})
oculusaudioCHOProombottomrelfect :: Lens' CHOP (Maybe (Tree Float))
oculusaudioCHOProombottomrelfect = lens _oculusaudioCHOProombottomrelfect (\a b -> a {_oculusaudioCHOProombottomrelfect = b})

clipCHOPtranstion :: Lens' CHOP (Maybe (Tree Int))
clipCHOPtranstion = lens _clipCHOPtranstion (\a b -> a {_clipCHOPtranstion = b})
clipCHOPblendtime :: Lens' CHOP (Maybe (Tree Float))
clipCHOPblendtime = lens _clipCHOPblendtime (\a b -> a {_clipCHOPblendtime = b})
clipCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
clipCHOPexportmethod = lens _clipCHOPexportmethod (\a b -> a {_clipCHOPexportmethod = b})
clipCHOPrord :: Lens' CHOP (Maybe (Tree Int))
clipCHOPrord = lens _clipCHOPrord (\a b -> a {_clipCHOPrord = b})
clipCHOPnblendtimeunit :: Lens' CHOP (Maybe (Tree Int))
clipCHOPnblendtimeunit = lens _clipCHOPnblendtimeunit (\a b -> a {_clipCHOPnblendtimeunit = b})
clipCHOPcallbacks :: Lens' CHOP (Maybe (Tree DAT))
clipCHOPcallbacks = lens _clipCHOPcallbacks (\a b -> a {_clipCHOPcallbacks = b})
clipCHOPindexchannel :: Lens' CHOP (Maybe (Tree ByteString))
clipCHOPindexchannel = lens _clipCHOPindexchannel (\a b -> a {_clipCHOPindexchannel = b})
clipCHOPpauseend :: Lens' CHOP (Maybe (Tree Bool))
clipCHOPpauseend = lens _clipCHOPpauseend (\a b -> a {_clipCHOPpauseend = b})
clipCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
clipCHOPexporttable = lens _clipCHOPexporttable (\a b -> a {_clipCHOPexporttable = b})
clipCHOPrdat :: Lens' CHOP (Maybe (Tree DAT))
clipCHOPrdat = lens _clipCHOPrdat (\a b -> a {_clipCHOPrdat = b})
clipCHOPnext :: Lens' CHOP (Maybe (Tree ByteString))
clipCHOPnext = lens _clipCHOPnext (\a b -> a {_clipCHOPnext = b})
clipCHOPnblendtime :: Lens' CHOP (Maybe (Tree Float))
clipCHOPnblendtime = lens _clipCHOPnblendtime (\a b -> a {_clipCHOPnblendtime = b})
clipCHOPabspos :: Lens' CHOP (Maybe (Tree Int))
clipCHOPabspos = lens _clipCHOPabspos (\a b -> a {_clipCHOPabspos = b})
clipCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
clipCHOPscope = lens _clipCHOPscope (\a b -> a {_clipCHOPscope = b})
clipCHOPlooprelease :: Lens' CHOP (Maybe (Tree ByteString))
clipCHOPlooprelease = lens _clipCHOPlooprelease (\a b -> a {_clipCHOPlooprelease = b})
clipCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
clipCHOPsrselect = lens _clipCHOPsrselect (\a b -> a {_clipCHOPsrselect = b})
clipCHOPblendtimeunit :: Lens' CHOP (Maybe (Tree Int))
clipCHOPblendtimeunit = lens _clipCHOPblendtimeunit (\a b -> a {_clipCHOPblendtimeunit = b})
clipCHOPloopactive :: Lens' CHOP (Maybe (Tree Bool))
clipCHOPloopactive = lens _clipCHOPloopactive (\a b -> a {_clipCHOPloopactive = b})
clipCHOProttype :: Lens' CHOP (Maybe (Tree Int))
clipCHOProttype = lens _clipCHOProttype (\a b -> a {_clipCHOProttype = b})
clipCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
clipCHOPtimeslice = lens _clipCHOPtimeslice (\a b -> a {_clipCHOPtimeslice = b})
clipCHOPreload :: Lens' CHOP (Maybe (Tree Bool))
clipCHOPreload = lens _clipCHOPreload (\a b -> a {_clipCHOPreload = b})

audiospectrumCHOPmode :: Lens' CHOP (Maybe (Tree Int))
audiospectrumCHOPmode = lens _audiospectrumCHOPmode (\a b -> a {_audiospectrumCHOPmode = b})
audiospectrumCHOPoutputmenu :: Lens' CHOP (Maybe (Tree Int))
audiospectrumCHOPoutputmenu = lens _audiospectrumCHOPoutputmenu (\a b -> a {_audiospectrumCHOPoutputmenu = b})
audiospectrumCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audiospectrumCHOPexportmethod = lens _audiospectrumCHOPexportmethod (\a b -> a {_audiospectrumCHOPexportmethod = b})
audiospectrumCHOPhighfreqboost :: Lens' CHOP (Maybe (Tree Float))
audiospectrumCHOPhighfreqboost = lens _audiospectrumCHOPhighfreqboost (\a b -> a {_audiospectrumCHOPhighfreqboost = b})
audiospectrumCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audiospectrumCHOPexporttable = lens _audiospectrumCHOPexporttable (\a b -> a {_audiospectrumCHOPexporttable = b})
audiospectrumCHOPfftsize :: Lens' CHOP (Maybe (Tree Int))
audiospectrumCHOPfftsize = lens _audiospectrumCHOPfftsize (\a b -> a {_audiospectrumCHOPfftsize = b})
audiospectrumCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audiospectrumCHOPscope = lens _audiospectrumCHOPscope (\a b -> a {_audiospectrumCHOPscope = b})
audiospectrumCHOPoutlength :: Lens' CHOP (Maybe (Tree Int))
audiospectrumCHOPoutlength = lens _audiospectrumCHOPoutlength (\a b -> a {_audiospectrumCHOPoutlength = b})
audiospectrumCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audiospectrumCHOPsrselect = lens _audiospectrumCHOPsrselect (\a b -> a {_audiospectrumCHOPsrselect = b})
audiospectrumCHOPfrequencylog :: Lens' CHOP (Maybe (Tree Float))
audiospectrumCHOPfrequencylog = lens _audiospectrumCHOPfrequencylog (\a b -> a {_audiospectrumCHOPfrequencylog = b})
audiospectrumCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audiospectrumCHOPtimeslice = lens _audiospectrumCHOPtimeslice (\a b -> a {_audiospectrumCHOPtimeslice = b})

deleteCHOPselrange2 :: Lens' CHOP (Maybe (Tree Float))
deleteCHOPselrange2 = lens _deleteCHOPselrange2 (\a b -> a {_deleteCHOPselrange2 = b})
deleteCHOPdeletecomp :: Lens' CHOP (Maybe (Tree Bool))
deleteCHOPdeletecomp = lens _deleteCHOPdeletecomp (\a b -> a {_deleteCHOPdeletecomp = b})
deleteCHOPonesample :: Lens' CHOP (Maybe (Tree Bool))
deleteCHOPonesample = lens _deleteCHOPonesample (\a b -> a {_deleteCHOPonesample = b})
deleteCHOPselconst :: Lens' CHOP (Maybe (Tree Bool))
deleteCHOPselconst = lens _deleteCHOPselconst (\a b -> a {_deleteCHOPselconst = b})
deleteCHOPvalue1 :: Lens' CHOP (Maybe (Tree Float))
deleteCHOPvalue1 = lens _deleteCHOPvalue1 (\a b -> a {_deleteCHOPvalue1 = b})
deleteCHOPvalue2 :: Lens' CHOP (Maybe (Tree Float))
deleteCHOPvalue2 = lens _deleteCHOPvalue2 (\a b -> a {_deleteCHOPvalue2 = b})
deleteCHOPinclvalue1 :: Lens' CHOP (Maybe (Tree Bool))
deleteCHOPinclvalue1 = lens _deleteCHOPinclvalue1 (\a b -> a {_deleteCHOPinclvalue1 = b})
deleteCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
deleteCHOPscope = lens _deleteCHOPscope (\a b -> a {_deleteCHOPscope = b})
deleteCHOPdelsamples :: Lens' CHOP (Maybe (Tree Bool))
deleteCHOPdelsamples = lens _deleteCHOPdelsamples (\a b -> a {_deleteCHOPdelsamples = b})
deleteCHOPselect :: Lens' CHOP (Maybe (Tree Int))
deleteCHOPselect = lens _deleteCHOPselect (\a b -> a {_deleteCHOPselect = b})
deleteCHOPcompnums :: Lens' CHOP (Maybe (Tree ByteString))
deleteCHOPcompnums = lens _deleteCHOPcompnums (\a b -> a {_deleteCHOPcompnums = b})
deleteCHOPinclvalue2 :: Lens' CHOP (Maybe (Tree Bool))
deleteCHOPinclvalue2 = lens _deleteCHOPinclvalue2 (\a b -> a {_deleteCHOPinclvalue2 = b})
deleteCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
deleteCHOPexporttable = lens _deleteCHOPexporttable (\a b -> a {_deleteCHOPexporttable = b})
deleteCHOPdiscard :: Lens' CHOP (Maybe (Tree Int))
deleteCHOPdiscard = lens _deleteCHOPdiscard (\a b -> a {_deleteCHOPdiscard = b})
deleteCHOPdelscope :: Lens' CHOP (Maybe (Tree ByteString))
deleteCHOPdelscope = lens _deleteCHOPdelscope (\a b -> a {_deleteCHOPdelscope = b})
deleteCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
deleteCHOPexportmethod = lens _deleteCHOPexportmethod (\a b -> a {_deleteCHOPexportmethod = b})
deleteCHOPcompchans :: Lens' CHOP (Maybe (Tree Int))
deleteCHOPcompchans = lens _deleteCHOPcompchans (\a b -> a {_deleteCHOPcompchans = b})
deleteCHOPselrange1 :: Lens' CHOP (Maybe (Tree Float))
deleteCHOPselrange1 = lens _deleteCHOPselrange1 (\a b -> a {_deleteCHOPselrange1 = b})
deleteCHOPdelchannels :: Lens' CHOP (Maybe (Tree Bool))
deleteCHOPdelchannels = lens _deleteCHOPdelchannels (\a b -> a {_deleteCHOPdelchannels = b})
deleteCHOPselnumbers :: Lens' CHOP (Maybe (Tree ByteString))
deleteCHOPselnumbers = lens _deleteCHOPselnumbers (\a b -> a {_deleteCHOPselnumbers = b})
deleteCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
deleteCHOPtimeslice = lens _deleteCHOPtimeslice (\a b -> a {_deleteCHOPtimeslice = b})
deleteCHOPcompmulti :: Lens' CHOP (Maybe (Tree Int))
deleteCHOPcompmulti = lens _deleteCHOPcompmulti (\a b -> a {_deleteCHOPcompmulti = b})
deleteCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
deleteCHOPsrselect = lens _deleteCHOPsrselect (\a b -> a {_deleteCHOPsrselect = b})
deleteCHOPcondition :: Lens' CHOP (Maybe (Tree Int))
deleteCHOPcondition = lens _deleteCHOPcondition (\a b -> a {_deleteCHOPcondition = b})
deleteCHOPchanvalue :: Lens' CHOP (Maybe (Tree Int))
deleteCHOPchanvalue = lens _deleteCHOPchanvalue (\a b -> a {_deleteCHOPchanvalue = b})
deleteCHOPcompnames :: Lens' CHOP (Maybe (Tree ByteString))
deleteCHOPcompnames = lens _deleteCHOPcompnames (\a b -> a {_deleteCHOPcompnames = b})

pulseCHOPpulse7 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse7 = lens _pulseCHOPpulse7 (\a b -> a {_pulseCHOPpulse7 = b})
pulseCHOPpulse9 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse9 = lens _pulseCHOPpulse9 (\a b -> a {_pulseCHOPpulse9 = b})
pulseCHOPpulse11 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse11 = lens _pulseCHOPpulse11 (\a b -> a {_pulseCHOPpulse11 = b})
pulseCHOPpulse2 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse2 = lens _pulseCHOPpulse2 (\a b -> a {_pulseCHOPpulse2 = b})
pulseCHOPpulse0 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse0 = lens _pulseCHOPpulse0 (\a b -> a {_pulseCHOPpulse0 = b})
pulseCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
pulseCHOPscope = lens _pulseCHOPscope (\a b -> a {_pulseCHOPscope = b})
pulseCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
pulseCHOPexporttable = lens _pulseCHOPexporttable (\a b -> a {_pulseCHOPexporttable = b})
pulseCHOPpulse26 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse26 = lens _pulseCHOPpulse26 (\a b -> a {_pulseCHOPpulse26 = b})
pulseCHOPlimit :: Lens' CHOP (Maybe (Tree Int))
pulseCHOPlimit = lens _pulseCHOPlimit (\a b -> a {_pulseCHOPlimit = b})
pulseCHOPstart :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPstart = lens _pulseCHOPstart (\a b -> a {_pulseCHOPstart = b})
pulseCHOPleft :: Lens' CHOP (Maybe (Tree Int))
pulseCHOPleft = lens _pulseCHOPleft (\a b -> a {_pulseCHOPleft = b})
pulseCHOPendunit :: Lens' CHOP (Maybe (Tree Int))
pulseCHOPendunit = lens _pulseCHOPendunit (\a b -> a {_pulseCHOPendunit = b})
pulseCHOPpulse21 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse21 = lens _pulseCHOPpulse21 (\a b -> a {_pulseCHOPpulse21 = b})
pulseCHOPrate :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPrate = lens _pulseCHOPrate (\a b -> a {_pulseCHOPrate = b})
pulseCHOPpulse16 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse16 = lens _pulseCHOPpulse16 (\a b -> a {_pulseCHOPpulse16 = b})
pulseCHOPpulse28 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse28 = lens _pulseCHOPpulse28 (\a b -> a {_pulseCHOPpulse28 = b})
pulseCHOPnumber :: Lens' CHOP (Maybe (Tree Int))
pulseCHOPnumber = lens _pulseCHOPnumber (\a b -> a {_pulseCHOPnumber = b})
pulseCHOPwidth :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPwidth = lens _pulseCHOPwidth (\a b -> a {_pulseCHOPwidth = b})
pulseCHOPpulse19 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse19 = lens _pulseCHOPpulse19 (\a b -> a {_pulseCHOPpulse19 = b})
pulseCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
pulseCHOPsrselect = lens _pulseCHOPsrselect (\a b -> a {_pulseCHOPsrselect = b})
pulseCHOPpulse13 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse13 = lens _pulseCHOPpulse13 (\a b -> a {_pulseCHOPpulse13 = b})
pulseCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
pulseCHOPtimeslice = lens _pulseCHOPtimeslice (\a b -> a {_pulseCHOPtimeslice = b})
pulseCHOPpulse30 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse30 = lens _pulseCHOPpulse30 (\a b -> a {_pulseCHOPpulse30 = b})
pulseCHOPinterp :: Lens' CHOP (Maybe (Tree Int))
pulseCHOPinterp = lens _pulseCHOPinterp (\a b -> a {_pulseCHOPinterp = b})
pulseCHOPend :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPend = lens _pulseCHOPend (\a b -> a {_pulseCHOPend = b})
pulseCHOPpulse20 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse20 = lens _pulseCHOPpulse20 (\a b -> a {_pulseCHOPpulse20 = b})
pulseCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
pulseCHOPexportmethod = lens _pulseCHOPexportmethod (\a b -> a {_pulseCHOPexportmethod = b})
pulseCHOPpulse29 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse29 = lens _pulseCHOPpulse29 (\a b -> a {_pulseCHOPpulse29 = b})
pulseCHOPpulse1 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse1 = lens _pulseCHOPpulse1 (\a b -> a {_pulseCHOPpulse1 = b})
pulseCHOPpulse3 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse3 = lens _pulseCHOPpulse3 (\a b -> a {_pulseCHOPpulse3 = b})
pulseCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPdefval = lens _pulseCHOPdefval (\a b -> a {_pulseCHOPdefval = b})
pulseCHOPpulse6 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse6 = lens _pulseCHOPpulse6 (\a b -> a {_pulseCHOPpulse6 = b})
pulseCHOPwidthunit :: Lens' CHOP (Maybe (Tree Int))
pulseCHOPwidthunit = lens _pulseCHOPwidthunit (\a b -> a {_pulseCHOPwidthunit = b})
pulseCHOPpulse15 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse15 = lens _pulseCHOPpulse15 (\a b -> a {_pulseCHOPpulse15 = b})
pulseCHOPmin :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPmin = lens _pulseCHOPmin (\a b -> a {_pulseCHOPmin = b})
pulseCHOPpulse10 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse10 = lens _pulseCHOPpulse10 (\a b -> a {_pulseCHOPpulse10 = b})
pulseCHOPpulse31 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse31 = lens _pulseCHOPpulse31 (\a b -> a {_pulseCHOPpulse31 = b})
pulseCHOPstartunit :: Lens' CHOP (Maybe (Tree Int))
pulseCHOPstartunit = lens _pulseCHOPstartunit (\a b -> a {_pulseCHOPstartunit = b})
pulseCHOPpulse14 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse14 = lens _pulseCHOPpulse14 (\a b -> a {_pulseCHOPpulse14 = b})
pulseCHOPpulse4 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse4 = lens _pulseCHOPpulse4 (\a b -> a {_pulseCHOPpulse4 = b})
pulseCHOPpulse5 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse5 = lens _pulseCHOPpulse5 (\a b -> a {_pulseCHOPpulse5 = b})
pulseCHOPright :: Lens' CHOP (Maybe (Tree Int))
pulseCHOPright = lens _pulseCHOPright (\a b -> a {_pulseCHOPright = b})
pulseCHOPchannelname :: Lens' CHOP (Maybe (Tree ByteString))
pulseCHOPchannelname = lens _pulseCHOPchannelname (\a b -> a {_pulseCHOPchannelname = b})
pulseCHOPpulse24 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse24 = lens _pulseCHOPpulse24 (\a b -> a {_pulseCHOPpulse24 = b})
pulseCHOPpulse8 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse8 = lens _pulseCHOPpulse8 (\a b -> a {_pulseCHOPpulse8 = b})
pulseCHOPpulse17 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse17 = lens _pulseCHOPpulse17 (\a b -> a {_pulseCHOPpulse17 = b})
pulseCHOPpulse25 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse25 = lens _pulseCHOPpulse25 (\a b -> a {_pulseCHOPpulse25 = b})
pulseCHOPlastpulse :: Lens' CHOP (Maybe (Tree Bool))
pulseCHOPlastpulse = lens _pulseCHOPlastpulse (\a b -> a {_pulseCHOPlastpulse = b})
pulseCHOPpulse27 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse27 = lens _pulseCHOPpulse27 (\a b -> a {_pulseCHOPpulse27 = b})
pulseCHOPpulse22 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse22 = lens _pulseCHOPpulse22 (\a b -> a {_pulseCHOPpulse22 = b})
pulseCHOPpulse23 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse23 = lens _pulseCHOPpulse23 (\a b -> a {_pulseCHOPpulse23 = b})
pulseCHOPpulse18 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse18 = lens _pulseCHOPpulse18 (\a b -> a {_pulseCHOPpulse18 = b})
pulseCHOPpulse12 :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPpulse12 = lens _pulseCHOPpulse12 (\a b -> a {_pulseCHOPpulse12 = b})
pulseCHOPmax :: Lens' CHOP (Maybe (Tree Float))
pulseCHOPmax = lens _pulseCHOPmax (\a b -> a {_pulseCHOPmax = b})

noiseCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
noiseCHOPresetpulse = lens _noiseCHOPresetpulse (\a b -> a {_noiseCHOPresetpulse = b})
noiseCHOPrough :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPrough = lens _noiseCHOPrough (\a b -> a {_noiseCHOPrough = b})
noiseCHOPchannelname :: Lens' CHOP (Maybe (Tree ByteString))
noiseCHOPchannelname = lens _noiseCHOPchannelname (\a b -> a {_noiseCHOPchannelname = b})
noiseCHOPconstraint :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPconstraint = lens _noiseCHOPconstraint (\a b -> a {_noiseCHOPconstraint = b})
noiseCHOPharmon :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPharmon = lens _noiseCHOPharmon (\a b -> a {_noiseCHOPharmon = b})
noiseCHOPend :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPend = lens _noiseCHOPend (\a b -> a {_noiseCHOPend = b})
noiseCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
noiseCHOPscope = lens _noiseCHOPscope (\a b -> a {_noiseCHOPscope = b})
noiseCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPdefval = lens _noiseCHOPdefval (\a b -> a {_noiseCHOPdefval = b})
noiseCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
noiseCHOPexporttable = lens _noiseCHOPexporttable (\a b -> a {_noiseCHOPexporttable = b})
noiseCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPexportmethod = lens _noiseCHOPexportmethod (\a b -> a {_noiseCHOPexportmethod = b})
noiseCHOPconstrstart :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPconstrstart = lens _noiseCHOPconstrstart (\a b -> a {_noiseCHOPconstrstart = b})
noiseCHOPperiodunit :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPperiodunit = lens _noiseCHOPperiodunit (\a b -> a {_noiseCHOPperiodunit = b})
noiseCHOPxord :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPxord = lens _noiseCHOPxord (\a b -> a {_noiseCHOPxord = b})
noiseCHOPr :: Lens' CHOP (Vec3)
noiseCHOPr = lens _noiseCHOPr (\a b -> a {_noiseCHOPr = b})
noiseCHOPstartunit :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPstartunit = lens _noiseCHOPstartunit (\a b -> a {_noiseCHOPstartunit = b})
noiseCHOPstart :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPstart = lens _noiseCHOPstart (\a b -> a {_noiseCHOPstart = b})
noiseCHOPleft :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPleft = lens _noiseCHOPleft (\a b -> a {_noiseCHOPleft = b})
noiseCHOPtype :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPtype = lens _noiseCHOPtype (\a b -> a {_noiseCHOPtype = b})
noiseCHOPs :: Lens' CHOP (Vec3)
noiseCHOPs = lens _noiseCHOPs (\a b -> a {_noiseCHOPs = b})
noiseCHOPperiod :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPperiod = lens _noiseCHOPperiod (\a b -> a {_noiseCHOPperiod = b})
noiseCHOPendunit :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPendunit = lens _noiseCHOPendunit (\a b -> a {_noiseCHOPendunit = b})
noiseCHOPnormal :: Lens' CHOP (Maybe (Tree Bool))
noiseCHOPnormal = lens _noiseCHOPnormal (\a b -> a {_noiseCHOPnormal = b})
noiseCHOPrate :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPrate = lens _noiseCHOPrate (\a b -> a {_noiseCHOPrate = b})
noiseCHOPp :: Lens' CHOP (Vec3)
noiseCHOPp = lens _noiseCHOPp (\a b -> a {_noiseCHOPp = b})
noiseCHOPright :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPright = lens _noiseCHOPright (\a b -> a {_noiseCHOPright = b})
noiseCHOPspread :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPspread = lens _noiseCHOPspread (\a b -> a {_noiseCHOPspread = b})
noiseCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
noiseCHOPtimeslice = lens _noiseCHOPtimeslice (\a b -> a {_noiseCHOPtimeslice = b})
noiseCHOPseed :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPseed = lens _noiseCHOPseed (\a b -> a {_noiseCHOPseed = b})
noiseCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPsrselect = lens _noiseCHOPsrselect (\a b -> a {_noiseCHOPsrselect = b})
noiseCHOPnumint :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPnumint = lens _noiseCHOPnumint (\a b -> a {_noiseCHOPnumint = b})
noiseCHOPrord :: Lens' CHOP (Maybe (Tree Int))
noiseCHOPrord = lens _noiseCHOPrord (\a b -> a {_noiseCHOPrord = b})
noiseCHOPconstrend :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPconstrend = lens _noiseCHOPconstrend (\a b -> a {_noiseCHOPconstrend = b})
noiseCHOPamp :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPamp = lens _noiseCHOPamp (\a b -> a {_noiseCHOPamp = b})
noiseCHOPt :: Lens' CHOP (Vec3)
noiseCHOPt = lens _noiseCHOPt (\a b -> a {_noiseCHOPt = b})
noiseCHOPexp :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPexp = lens _noiseCHOPexp (\a b -> a {_noiseCHOPexp = b})
noiseCHOPconstrmean :: Lens' CHOP (Maybe (Tree Float))
noiseCHOPconstrmean = lens _noiseCHOPconstrmean (\a b -> a {_noiseCHOPconstrmean = b})
noiseCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
noiseCHOPreset = lens _noiseCHOPreset (\a b -> a {_noiseCHOPreset = b})

trailCHOPresample :: Lens' CHOP (Maybe (Tree Bool))
trailCHOPresample = lens _trailCHOPresample (\a b -> a {_trailCHOPresample = b})
trailCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
trailCHOPresetpulse = lens _trailCHOPresetpulse (\a b -> a {_trailCHOPresetpulse = b})
trailCHOPgrowlength :: Lens' CHOP (Maybe (Tree Bool))
trailCHOPgrowlength = lens _trailCHOPgrowlength (\a b -> a {_trailCHOPgrowlength = b})
trailCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
trailCHOPactive = lens _trailCHOPactive (\a b -> a {_trailCHOPactive = b})
trailCHOPsamples :: Lens' CHOP (Maybe (Tree Int))
trailCHOPsamples = lens _trailCHOPsamples (\a b -> a {_trailCHOPsamples = b})
trailCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
trailCHOPexportmethod = lens _trailCHOPexportmethod (\a b -> a {_trailCHOPexportmethod = b})
trailCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
trailCHOPexporttable = lens _trailCHOPexporttable (\a b -> a {_trailCHOPexporttable = b})
trailCHOPrate :: Lens' CHOP (Maybe (Tree Float))
trailCHOPrate = lens _trailCHOPrate (\a b -> a {_trailCHOPrate = b})
trailCHOPsetrate :: Lens' CHOP (Maybe (Tree Bool))
trailCHOPsetrate = lens _trailCHOPsetrate (\a b -> a {_trailCHOPsetrate = b})
trailCHOPwlength :: Lens' CHOP (Maybe (Tree Float))
trailCHOPwlength = lens _trailCHOPwlength (\a b -> a {_trailCHOPwlength = b})
trailCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
trailCHOPscope = lens _trailCHOPscope (\a b -> a {_trailCHOPscope = b})
trailCHOPwlengthunit :: Lens' CHOP (Maybe (Tree Int))
trailCHOPwlengthunit = lens _trailCHOPwlengthunit (\a b -> a {_trailCHOPwlengthunit = b})
trailCHOPcapture :: Lens' CHOP (Maybe (Tree Int))
trailCHOPcapture = lens _trailCHOPcapture (\a b -> a {_trailCHOPcapture = b})
trailCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
trailCHOPsrselect = lens _trailCHOPsrselect (\a b -> a {_trailCHOPsrselect = b})
trailCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
trailCHOPtimeslice = lens _trailCHOPtimeslice (\a b -> a {_trailCHOPtimeslice = b})
trailCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
trailCHOPreset = lens _trailCHOPreset (\a b -> a {_trailCHOPreset = b})

soptoCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
soptoCHOPexportmethod = lens _soptoCHOPexportmethod (\a b -> a {_soptoCHOPexportmethod = b})
soptoCHOPsop :: Lens' CHOP (Maybe (Tree SOP))
soptoCHOPsop = lens _soptoCHOPsop (\a b -> a {_soptoCHOPsop = b})
soptoCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
soptoCHOPexporttable = lens _soptoCHOPexporttable (\a b -> a {_soptoCHOPexporttable = b})
soptoCHOPrate :: Lens' CHOP (Maybe (Tree Float))
soptoCHOPrate = lens _soptoCHOPrate (\a b -> a {_soptoCHOPrate = b})
soptoCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
soptoCHOPscope = lens _soptoCHOPscope (\a b -> a {_soptoCHOPscope = b})
soptoCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
soptoCHOPsrselect = lens _soptoCHOPsrselect (\a b -> a {_soptoCHOPsrselect = b})
soptoCHOPattribscope :: Lens' CHOP (Maybe (Tree ByteString))
soptoCHOPattribscope = lens _soptoCHOPattribscope (\a b -> a {_soptoCHOPattribscope = b})
soptoCHOPgroup :: Lens' CHOP (Maybe (Tree ByteString))
soptoCHOPgroup = lens _soptoCHOPgroup (\a b -> a {_soptoCHOPgroup = b})
soptoCHOPorganize :: Lens' CHOP (Maybe (Tree ByteString))
soptoCHOPorganize = lens _soptoCHOPorganize (\a b -> a {_soptoCHOPorganize = b})
soptoCHOPmethod :: Lens' CHOP (Maybe (Tree Int))
soptoCHOPmethod = lens _soptoCHOPmethod (\a b -> a {_soptoCHOPmethod = b})
soptoCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
soptoCHOPtimeslice = lens _soptoCHOPtimeslice (\a b -> a {_soptoCHOPtimeslice = b})
soptoCHOPrenamescope :: Lens' CHOP (Maybe (Tree ByteString))
soptoCHOPrenamescope = lens _soptoCHOPrenamescope (\a b -> a {_soptoCHOPrenamescope = b})

syncinCHOPmulticastaddress :: Lens' CHOP (Maybe (Tree ByteString))
syncinCHOPmulticastaddress = lens _syncinCHOPmulticastaddress (\a b -> a {_syncinCHOPmulticastaddress = b})
syncinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
syncinCHOPsrselect = lens _syncinCHOPsrselect (\a b -> a {_syncinCHOPsrselect = b})
syncinCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
syncinCHOPactive = lens _syncinCHOPactive (\a b -> a {_syncinCHOPactive = b})
syncinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
syncinCHOPexportmethod = lens _syncinCHOPexportmethod (\a b -> a {_syncinCHOPexportmethod = b})
syncinCHOPtimeout :: Lens' CHOP (Maybe (Tree Int))
syncinCHOPtimeout = lens _syncinCHOPtimeout (\a b -> a {_syncinCHOPtimeout = b})
syncinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
syncinCHOPexporttable = lens _syncinCHOPexporttable (\a b -> a {_syncinCHOPexporttable = b})
syncinCHOPport :: Lens' CHOP (Maybe (Tree Int))
syncinCHOPport = lens _syncinCHOPport (\a b -> a {_syncinCHOPport = b})
syncinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
syncinCHOPtimeslice = lens _syncinCHOPtimeslice (\a b -> a {_syncinCHOPtimeslice = b})
syncinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
syncinCHOPscope = lens _syncinCHOPscope (\a b -> a {_syncinCHOPscope = b})

blacktraxCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
blacktraxCHOPresetpulse = lens _blacktraxCHOPresetpulse (\a b -> a {_blacktraxCHOPresetpulse = b})
blacktraxCHOPleds :: Lens' CHOP (Maybe (Tree Bool))
blacktraxCHOPleds = lens _blacktraxCHOPleds (\a b -> a {_blacktraxCHOPleds = b})
blacktraxCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
blacktraxCHOPactive = lens _blacktraxCHOPactive (\a b -> a {_blacktraxCHOPactive = b})
blacktraxCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
blacktraxCHOPexportmethod = lens _blacktraxCHOPexportmethod (\a b -> a {_blacktraxCHOPexportmethod = b})
blacktraxCHOPprotocol :: Lens' CHOP (Maybe (Tree Int))
blacktraxCHOPprotocol = lens _blacktraxCHOPprotocol (\a b -> a {_blacktraxCHOPprotocol = b})
blacktraxCHOPmaxbeacons :: Lens' CHOP (Maybe (Tree Int))
blacktraxCHOPmaxbeacons = lens _blacktraxCHOPmaxbeacons (\a b -> a {_blacktraxCHOPmaxbeacons = b})
blacktraxCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
blacktraxCHOPscope = lens _blacktraxCHOPscope (\a b -> a {_blacktraxCHOPscope = b})
blacktraxCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
blacktraxCHOPexporttable = lens _blacktraxCHOPexporttable (\a b -> a {_blacktraxCHOPexporttable = b})
blacktraxCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
blacktraxCHOPtimeslice = lens _blacktraxCHOPtimeslice (\a b -> a {_blacktraxCHOPtimeslice = b})
blacktraxCHOPacceleration :: Lens' CHOP (Maybe (Tree Bool))
blacktraxCHOPacceleration = lens _blacktraxCHOPacceleration (\a b -> a {_blacktraxCHOPacceleration = b})
blacktraxCHOPmappingtable :: Lens' CHOP (Maybe (Tree DAT))
blacktraxCHOPmappingtable = lens _blacktraxCHOPmappingtable (\a b -> a {_blacktraxCHOPmappingtable = b})
blacktraxCHOPvelocity :: Lens' CHOP (Maybe (Tree Bool))
blacktraxCHOPvelocity = lens _blacktraxCHOPvelocity (\a b -> a {_blacktraxCHOPvelocity = b})
blacktraxCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
blacktraxCHOPsrselect = lens _blacktraxCHOPsrselect (\a b -> a {_blacktraxCHOPsrselect = b})
blacktraxCHOPoutputformat :: Lens' CHOP (Maybe (Tree Int))
blacktraxCHOPoutputformat = lens _blacktraxCHOPoutputformat (\a b -> a {_blacktraxCHOPoutputformat = b})
blacktraxCHOPport :: Lens' CHOP (Maybe (Tree Int))
blacktraxCHOPport = lens _blacktraxCHOPport (\a b -> a {_blacktraxCHOPport = b})
blacktraxCHOPcentroid :: Lens' CHOP (Maybe (Tree Bool))
blacktraxCHOPcentroid = lens _blacktraxCHOPcentroid (\a b -> a {_blacktraxCHOPcentroid = b})
blacktraxCHOPnetaddress :: Lens' CHOP (Maybe (Tree ByteString))
blacktraxCHOPnetaddress = lens _blacktraxCHOPnetaddress (\a b -> a {_blacktraxCHOPnetaddress = b})
blacktraxCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
blacktraxCHOPreset = lens _blacktraxCHOPreset (\a b -> a {_blacktraxCHOPreset = b})
blacktraxCHOPsamplerate :: Lens' CHOP (Maybe (Tree Int))
blacktraxCHOPsamplerate = lens _blacktraxCHOPsamplerate (\a b -> a {_blacktraxCHOPsamplerate = b})

sharedmemoutCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
sharedmemoutCHOPexportmethod = lens _sharedmemoutCHOPexportmethod (\a b -> a {_sharedmemoutCHOPexportmethod = b})
sharedmemoutCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
sharedmemoutCHOPsrselect = lens _sharedmemoutCHOPsrselect (\a b -> a {_sharedmemoutCHOPsrselect = b})
sharedmemoutCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
sharedmemoutCHOPactive = lens _sharedmemoutCHOPactive (\a b -> a {_sharedmemoutCHOPactive = b})
sharedmemoutCHOPmemtype :: Lens' CHOP (Maybe (Tree Int))
sharedmemoutCHOPmemtype = lens _sharedmemoutCHOPmemtype (\a b -> a {_sharedmemoutCHOPmemtype = b})
sharedmemoutCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
sharedmemoutCHOPexporttable = lens _sharedmemoutCHOPexporttable (\a b -> a {_sharedmemoutCHOPexporttable = b})
sharedmemoutCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
sharedmemoutCHOPtimeslice = lens _sharedmemoutCHOPtimeslice (\a b -> a {_sharedmemoutCHOPtimeslice = b})
sharedmemoutCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
sharedmemoutCHOPscope = lens _sharedmemoutCHOPscope (\a b -> a {_sharedmemoutCHOPscope = b})
sharedmemoutCHOPname :: Lens' CHOP (Maybe (Tree ByteString))
sharedmemoutCHOPname = lens _sharedmemoutCHOPname (\a b -> a {_sharedmemoutCHOPname = b})

openvrCHOPnear :: Lens' CHOP (Maybe (Tree Float))
openvrCHOPnear = lens _openvrCHOPnear (\a b -> a {_openvrCHOPnear = b})
openvrCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
openvrCHOPactive = lens _openvrCHOPactive (\a b -> a {_openvrCHOPactive = b})
openvrCHOPunitscale :: Lens' CHOP (Maybe (Tree Float))
openvrCHOPunitscale = lens _openvrCHOPunitscale (\a b -> a {_openvrCHOPunitscale = b})
openvrCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
openvrCHOPexporttable = lens _openvrCHOPexporttable (\a b -> a {_openvrCHOPexporttable = b})
openvrCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
openvrCHOPexportmethod = lens _openvrCHOPexportmethod (\a b -> a {_openvrCHOPexportmethod = b})
openvrCHOPfar :: Lens' CHOP (Maybe (Tree Float))
openvrCHOPfar = lens _openvrCHOPfar (\a b -> a {_openvrCHOPfar = b})
openvrCHOPbuttons :: Lens' CHOP (Maybe (Tree Bool))
openvrCHOPbuttons = lens _openvrCHOPbuttons (\a b -> a {_openvrCHOPbuttons = b})
openvrCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
openvrCHOPscope = lens _openvrCHOPscope (\a b -> a {_openvrCHOPscope = b})
openvrCHOPfirstcontroller :: Lens' CHOP (Maybe (Tree Int))
openvrCHOPfirstcontroller = lens _openvrCHOPfirstcontroller (\a b -> a {_openvrCHOPfirstcontroller = b})
openvrCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
openvrCHOPsrselect = lens _openvrCHOPsrselect (\a b -> a {_openvrCHOPsrselect = b})
openvrCHOPmaxcontrollers :: Lens' CHOP (Maybe (Tree Int))
openvrCHOPmaxcontrollers = lens _openvrCHOPmaxcontrollers (\a b -> a {_openvrCHOPmaxcontrollers = b})
openvrCHOPmaxbuttons :: Lens' CHOP (Maybe (Tree Int))
openvrCHOPmaxbuttons = lens _openvrCHOPmaxbuttons (\a b -> a {_openvrCHOPmaxbuttons = b})
openvrCHOPgeneralinfo :: Lens' CHOP (Maybe (Tree Bool))
openvrCHOPgeneralinfo = lens _openvrCHOPgeneralinfo (\a b -> a {_openvrCHOPgeneralinfo = b})
openvrCHOPorientation :: Lens' CHOP (Maybe (Tree Bool))
openvrCHOPorientation = lens _openvrCHOPorientation (\a b -> a {_openvrCHOPorientation = b})
openvrCHOPmaxanalogs :: Lens' CHOP (Maybe (Tree Int))
openvrCHOPmaxanalogs = lens _openvrCHOPmaxanalogs (\a b -> a {_openvrCHOPmaxanalogs = b})
openvrCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
openvrCHOPtimeslice = lens _openvrCHOPtimeslice (\a b -> a {_openvrCHOPtimeslice = b})
openvrCHOPoutput :: Lens' CHOP (Maybe (Tree Int))
openvrCHOPoutput = lens _openvrCHOPoutput (\a b -> a {_openvrCHOPoutput = b})

audiomovieCHOPindex :: Lens' CHOP (Maybe (Tree Bool))
audiomovieCHOPindex = lens _audiomovieCHOPindex (\a b -> a {_audiomovieCHOPindex = b})
audiomovieCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audiomovieCHOPexportmethod = lens _audiomovieCHOPexportmethod (\a b -> a {_audiomovieCHOPexportmethod = b})
audiomovieCHOPprereadlength :: Lens' CHOP (Maybe (Tree Float))
audiomovieCHOPprereadlength = lens _audiomovieCHOPprereadlength (\a b -> a {_audiomovieCHOPprereadlength = b})
audiomovieCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audiomovieCHOPexporttable = lens _audiomovieCHOPexporttable (\a b -> a {_audiomovieCHOPexporttable = b})
audiomovieCHOPopentimeout :: Lens' CHOP (Maybe (Tree Float))
audiomovieCHOPopentimeout = lens _audiomovieCHOPopentimeout (\a b -> a {_audiomovieCHOPopentimeout = b})
audiomovieCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audiomovieCHOPscope = lens _audiomovieCHOPscope (\a b -> a {_audiomovieCHOPscope = b})
audiomovieCHOPsyncoffsetunit :: Lens' CHOP (Maybe (Tree Int))
audiomovieCHOPsyncoffsetunit = lens _audiomovieCHOPsyncoffsetunit (\a b -> a {_audiomovieCHOPsyncoffsetunit = b})
audiomovieCHOPplay :: Lens' CHOP (Maybe (Tree Bool))
audiomovieCHOPplay = lens _audiomovieCHOPplay (\a b -> a {_audiomovieCHOPplay = b})
audiomovieCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audiomovieCHOPsrselect = lens _audiomovieCHOPsrselect (\a b -> a {_audiomovieCHOPsrselect = b})
audiomovieCHOPprereadlengthunit :: Lens' CHOP (Maybe (Tree Int))
audiomovieCHOPprereadlengthunit = lens _audiomovieCHOPprereadlengthunit (\a b -> a {_audiomovieCHOPprereadlengthunit = b})
audiomovieCHOPsyncoffset :: Lens' CHOP (Maybe (Tree Float))
audiomovieCHOPsyncoffset = lens _audiomovieCHOPsyncoffset (\a b -> a {_audiomovieCHOPsyncoffset = b})
audiomovieCHOPmoviefileintop :: Lens' CHOP (Maybe (Tree TOP))
audiomovieCHOPmoviefileintop = lens _audiomovieCHOPmoviefileintop (\a b -> a {_audiomovieCHOPmoviefileintop = b})
audiomovieCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audiomovieCHOPtimeslice = lens _audiomovieCHOPtimeslice (\a b -> a {_audiomovieCHOPtimeslice = b})

lookupCHOPinterp :: Lens' CHOP (Maybe (Tree Bool))
lookupCHOPinterp = lens _lookupCHOPinterp (\a b -> a {_lookupCHOPinterp = b})
lookupCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
lookupCHOPexportmethod = lens _lookupCHOPexportmethod (\a b -> a {_lookupCHOPexportmethod = b})
lookupCHOPindex1 :: Lens' CHOP (Maybe (Tree Float))
lookupCHOPindex1 = lens _lookupCHOPindex1 (\a b -> a {_lookupCHOPindex1 = b})
lookupCHOPcyclic :: Lens' CHOP (Maybe (Tree Int))
lookupCHOPcyclic = lens _lookupCHOPcyclic (\a b -> a {_lookupCHOPcyclic = b})
lookupCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
lookupCHOPexporttable = lens _lookupCHOPexporttable (\a b -> a {_lookupCHOPexporttable = b})
lookupCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
lookupCHOPscope = lens _lookupCHOPscope (\a b -> a {_lookupCHOPscope = b})
lookupCHOPindex2 :: Lens' CHOP (Maybe (Tree Float))
lookupCHOPindex2 = lens _lookupCHOPindex2 (\a b -> a {_lookupCHOPindex2 = b})
lookupCHOPmatch :: Lens' CHOP (Maybe (Tree Int))
lookupCHOPmatch = lens _lookupCHOPmatch (\a b -> a {_lookupCHOPmatch = b})
lookupCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
lookupCHOPsrselect = lens _lookupCHOPsrselect (\a b -> a {_lookupCHOPsrselect = b})
lookupCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
lookupCHOPtimeslice = lens _lookupCHOPtimeslice (\a b -> a {_lookupCHOPtimeslice = b})
lookupCHOPchanmatch :: Lens' CHOP (Maybe (Tree Int))
lookupCHOPchanmatch = lens _lookupCHOPchanmatch (\a b -> a {_lookupCHOPchanmatch = b})

audiooscillatorCHOPresetpulse :: Lens' CHOP (Maybe (Tree Bool))
audiooscillatorCHOPresetpulse = lens _audiooscillatorCHOPresetpulse (\a b -> a {_audiooscillatorCHOPresetpulse = b})
audiooscillatorCHOPsmooth :: Lens' CHOP (Maybe (Tree Bool))
audiooscillatorCHOPsmooth = lens _audiooscillatorCHOPsmooth (\a b -> a {_audiooscillatorCHOPsmooth = b})
audiooscillatorCHOPresetcondition :: Lens' CHOP (Maybe (Tree Int))
audiooscillatorCHOPresetcondition = lens _audiooscillatorCHOPresetcondition (\a b -> a {_audiooscillatorCHOPresetcondition = b})
audiooscillatorCHOPoctave :: Lens' CHOP (Maybe (Tree Float))
audiooscillatorCHOPoctave = lens _audiooscillatorCHOPoctave (\a b -> a {_audiooscillatorCHOPoctave = b})
audiooscillatorCHOPbias :: Lens' CHOP (Maybe (Tree Float))
audiooscillatorCHOPbias = lens _audiooscillatorCHOPbias (\a b -> a {_audiooscillatorCHOPbias = b})
audiooscillatorCHOPrate :: Lens' CHOP (Maybe (Tree Float))
audiooscillatorCHOPrate = lens _audiooscillatorCHOPrate (\a b -> a {_audiooscillatorCHOPrate = b})
audiooscillatorCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audiooscillatorCHOPscope = lens _audiooscillatorCHOPscope (\a b -> a {_audiooscillatorCHOPscope = b})
audiooscillatorCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audiooscillatorCHOPexporttable = lens _audiooscillatorCHOPexporttable (\a b -> a {_audiooscillatorCHOPexporttable = b})
audiooscillatorCHOPwavetype :: Lens' CHOP (Maybe (Tree Int))
audiooscillatorCHOPwavetype = lens _audiooscillatorCHOPwavetype (\a b -> a {_audiooscillatorCHOPwavetype = b})
audiooscillatorCHOPphase :: Lens' CHOP (Maybe (Tree Float))
audiooscillatorCHOPphase = lens _audiooscillatorCHOPphase (\a b -> a {_audiooscillatorCHOPphase = b})
audiooscillatorCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audiooscillatorCHOPexportmethod = lens _audiooscillatorCHOPexportmethod (\a b -> a {_audiooscillatorCHOPexportmethod = b})
audiooscillatorCHOPfrequency :: Lens' CHOP (Maybe (Tree Float))
audiooscillatorCHOPfrequency = lens _audiooscillatorCHOPfrequency (\a b -> a {_audiooscillatorCHOPfrequency = b})
audiooscillatorCHOPoffset :: Lens' CHOP (Maybe (Tree Float))
audiooscillatorCHOPoffset = lens _audiooscillatorCHOPoffset (\a b -> a {_audiooscillatorCHOPoffset = b})
audiooscillatorCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audiooscillatorCHOPsrselect = lens _audiooscillatorCHOPsrselect (\a b -> a {_audiooscillatorCHOPsrselect = b})
audiooscillatorCHOPamp :: Lens' CHOP (Maybe (Tree Float))
audiooscillatorCHOPamp = lens _audiooscillatorCHOPamp (\a b -> a {_audiooscillatorCHOPamp = b})
audiooscillatorCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audiooscillatorCHOPtimeslice = lens _audiooscillatorCHOPtimeslice (\a b -> a {_audiooscillatorCHOPtimeslice = b})
audiooscillatorCHOPreset :: Lens' CHOP (Maybe (Tree Bool))
audiooscillatorCHOPreset = lens _audiooscillatorCHOPreset (\a b -> a {_audiooscillatorCHOPreset = b})

syncoutCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
syncoutCHOPexportmethod = lens _syncoutCHOPexportmethod (\a b -> a {_syncoutCHOPexportmethod = b})
syncoutCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
syncoutCHOPactive = lens _syncoutCHOPactive (\a b -> a {_syncoutCHOPactive = b})
syncoutCHOPclearstats :: Lens' CHOP (Maybe (Tree Bool))
syncoutCHOPclearstats = lens _syncoutCHOPclearstats (\a b -> a {_syncoutCHOPclearstats = b})
syncoutCHOPbanclients :: Lens' CHOP (Maybe (Tree Bool))
syncoutCHOPbanclients = lens _syncoutCHOPbanclients (\a b -> a {_syncoutCHOPbanclients = b})
syncoutCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
syncoutCHOPscope = lens _syncoutCHOPscope (\a b -> a {_syncoutCHOPscope = b})
syncoutCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
syncoutCHOPexporttable = lens _syncoutCHOPexporttable (\a b -> a {_syncoutCHOPexporttable = b})
syncoutCHOPmulticastaddress :: Lens' CHOP (Maybe (Tree ByteString))
syncoutCHOPmulticastaddress = lens _syncoutCHOPmulticastaddress (\a b -> a {_syncoutCHOPmulticastaddress = b})
syncoutCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
syncoutCHOPsrselect = lens _syncoutCHOPsrselect (\a b -> a {_syncoutCHOPsrselect = b})
syncoutCHOPtimeout :: Lens' CHOP (Maybe (Tree Int))
syncoutCHOPtimeout = lens _syncoutCHOPtimeout (\a b -> a {_syncoutCHOPtimeout = b})
syncoutCHOPport :: Lens' CHOP (Maybe (Tree Int))
syncoutCHOPport = lens _syncoutCHOPport (\a b -> a {_syncoutCHOPport = b})
syncoutCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
syncoutCHOPtimeslice = lens _syncoutCHOPtimeslice (\a b -> a {_syncoutCHOPtimeslice = b})
syncoutCHOPbanclienttimeouts :: Lens' CHOP (Maybe (Tree Int))
syncoutCHOPbanclienttimeouts = lens _syncoutCHOPbanclienttimeouts (\a b -> a {_syncoutCHOPbanclienttimeouts = b})
syncoutCHOPclienttimeouts :: Lens' CHOP (Maybe (Tree Int))
syncoutCHOPclienttimeouts = lens _syncoutCHOPclienttimeouts (\a b -> a {_syncoutCHOPclienttimeouts = b})

etherdreamCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
etherdreamCHOPexportmethod = lens _etherdreamCHOPexportmethod (\a b -> a {_etherdreamCHOPexportmethod = b})
etherdreamCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
etherdreamCHOPactive = lens _etherdreamCHOPactive (\a b -> a {_etherdreamCHOPactive = b})
etherdreamCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
etherdreamCHOPexporttable = lens _etherdreamCHOPexporttable (\a b -> a {_etherdreamCHOPexporttable = b})
etherdreamCHOPxscale :: Lens' CHOP (Maybe (Tree Float))
etherdreamCHOPxscale = lens _etherdreamCHOPxscale (\a b -> a {_etherdreamCHOPxscale = b})
etherdreamCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
etherdreamCHOPscope = lens _etherdreamCHOPscope (\a b -> a {_etherdreamCHOPscope = b})
etherdreamCHOPnetaddress :: Lens' CHOP (Maybe (Tree ByteString))
etherdreamCHOPnetaddress = lens _etherdreamCHOPnetaddress (\a b -> a {_etherdreamCHOPnetaddress = b})
etherdreamCHOPqueuetime :: Lens' CHOP (Maybe (Tree Float))
etherdreamCHOPqueuetime = lens _etherdreamCHOPqueuetime (\a b -> a {_etherdreamCHOPqueuetime = b})
etherdreamCHOPyscale :: Lens' CHOP (Maybe (Tree Float))
etherdreamCHOPyscale = lens _etherdreamCHOPyscale (\a b -> a {_etherdreamCHOPyscale = b})
etherdreamCHOPqueueunits :: Lens' CHOP (Maybe (Tree Int))
etherdreamCHOPqueueunits = lens _etherdreamCHOPqueueunits (\a b -> a {_etherdreamCHOPqueueunits = b})
etherdreamCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
etherdreamCHOPsrselect = lens _etherdreamCHOPsrselect (\a b -> a {_etherdreamCHOPsrselect = b})
etherdreamCHOPport :: Lens' CHOP (Maybe (Tree Int))
etherdreamCHOPport = lens _etherdreamCHOPport (\a b -> a {_etherdreamCHOPport = b})
etherdreamCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
etherdreamCHOPtimeslice = lens _etherdreamCHOPtimeslice (\a b -> a {_etherdreamCHOPtimeslice = b})
etherdreamCHOPbluescale :: Lens' CHOP (Maybe (Tree Float))
etherdreamCHOPbluescale = lens _etherdreamCHOPbluescale (\a b -> a {_etherdreamCHOPbluescale = b})
etherdreamCHOPredscale :: Lens' CHOP (Maybe (Tree Float))
etherdreamCHOPredscale = lens _etherdreamCHOPredscale (\a b -> a {_etherdreamCHOPredscale = b})
etherdreamCHOPgreenscale :: Lens' CHOP (Maybe (Tree Float))
etherdreamCHOPgreenscale = lens _etherdreamCHOPgreenscale (\a b -> a {_etherdreamCHOPgreenscale = b})

sortCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
sortCHOPexportmethod = lens _sortCHOPexportmethod (\a b -> a {_sortCHOPexportmethod = b})
sortCHOPnames :: Lens' CHOP (Maybe (Tree ByteString))
sortCHOPnames = lens _sortCHOPnames (\a b -> a {_sortCHOPnames = b})
sortCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
sortCHOPexporttable = lens _sortCHOPexporttable (\a b -> a {_sortCHOPexporttable = b})
sortCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
sortCHOPscope = lens _sortCHOPscope (\a b -> a {_sortCHOPscope = b})
sortCHOPselect :: Lens' CHOP (Maybe (Tree Int))
sortCHOPselect = lens _sortCHOPselect (\a b -> a {_sortCHOPselect = b})
sortCHOPseed :: Lens' CHOP (Maybe (Tree Float))
sortCHOPseed = lens _sortCHOPseed (\a b -> a {_sortCHOPseed = b})
sortCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
sortCHOPsrselect = lens _sortCHOPsrselect (\a b -> a {_sortCHOPsrselect = b})
sortCHOPindices :: Lens' CHOP (Maybe (Tree ByteString))
sortCHOPindices = lens _sortCHOPindices (\a b -> a {_sortCHOPindices = b})
sortCHOPindexchannel :: Lens' CHOP (Maybe (Tree Bool))
sortCHOPindexchannel = lens _sortCHOPindexchannel (\a b -> a {_sortCHOPindexchannel = b})
sortCHOPmethod :: Lens' CHOP (Maybe (Tree Int))
sortCHOPmethod = lens _sortCHOPmethod (\a b -> a {_sortCHOPmethod = b})
sortCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
sortCHOPtimeslice = lens _sortCHOPtimeslice (\a b -> a {_sortCHOPtimeslice = b})

holdCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
holdCHOPexportmethod = lens _holdCHOPexportmethod (\a b -> a {_holdCHOPexportmethod = b})
holdCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
holdCHOPsrselect = lens _holdCHOPsrselect (\a b -> a {_holdCHOPsrselect = b})
holdCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
holdCHOPexporttable = lens _holdCHOPexporttable (\a b -> a {_holdCHOPexporttable = b})
holdCHOPsample :: Lens' CHOP (Maybe (Tree Int))
holdCHOPsample = lens _holdCHOPsample (\a b -> a {_holdCHOPsample = b})
holdCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
holdCHOPtimeslice = lens _holdCHOPtimeslice (\a b -> a {_holdCHOPtimeslice = b})
holdCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
holdCHOPscope = lens _holdCHOPscope (\a b -> a {_holdCHOPscope = b})
holdCHOPpulse :: Lens' CHOP (Maybe (Tree Bool))
holdCHOPpulse = lens _holdCHOPpulse (\a b -> a {_holdCHOPpulse = b})

warpCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
warpCHOPexportmethod = lens _warpCHOPexportmethod (\a b -> a {_warpCHOPexportmethod = b})
warpCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
warpCHOPsrselect = lens _warpCHOPsrselect (\a b -> a {_warpCHOPsrselect = b})
warpCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
warpCHOPexporttable = lens _warpCHOPexporttable (\a b -> a {_warpCHOPexporttable = b})
warpCHOPmethod :: Lens' CHOP (Maybe (Tree Int))
warpCHOPmethod = lens _warpCHOPmethod (\a b -> a {_warpCHOPmethod = b})
warpCHOPscaleindex :: Lens' CHOP (Maybe (Tree Bool))
warpCHOPscaleindex = lens _warpCHOPscaleindex (\a b -> a {_warpCHOPscaleindex = b})
warpCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
warpCHOPtimeslice = lens _warpCHOPtimeslice (\a b -> a {_warpCHOPtimeslice = b})
warpCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
warpCHOPscope = lens _warpCHOPscope (\a b -> a {_warpCHOPscope = b})

audiostreamoutCHOPstreamname :: Lens' CHOP (Maybe (Tree ByteString))
audiostreamoutCHOPstreamname = lens _audiostreamoutCHOPstreamname (\a b -> a {_audiostreamoutCHOPstreamname = b})
audiostreamoutCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audiostreamoutCHOPexportmethod = lens _audiostreamoutCHOPexportmethod (\a b -> a {_audiostreamoutCHOPexportmethod = b})
audiostreamoutCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audiostreamoutCHOPsrselect = lens _audiostreamoutCHOPsrselect (\a b -> a {_audiostreamoutCHOPsrselect = b})
audiostreamoutCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
audiostreamoutCHOPactive = lens _audiostreamoutCHOPactive (\a b -> a {_audiostreamoutCHOPactive = b})
audiostreamoutCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audiostreamoutCHOPexporttable = lens _audiostreamoutCHOPexporttable (\a b -> a {_audiostreamoutCHOPexporttable = b})
audiostreamoutCHOPport :: Lens' CHOP (Maybe (Tree Int))
audiostreamoutCHOPport = lens _audiostreamoutCHOPport (\a b -> a {_audiostreamoutCHOPport = b})
audiostreamoutCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audiostreamoutCHOPtimeslice = lens _audiostreamoutCHOPtimeslice (\a b -> a {_audiostreamoutCHOPtimeslice = b})
audiostreamoutCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audiostreamoutCHOPscope = lens _audiostreamoutCHOPscope (\a b -> a {_audiostreamoutCHOPscope = b})

midiinmapCHOPid :: Lens' CHOP (Maybe (Tree ByteString))
midiinmapCHOPid = lens _midiinmapCHOPid (\a b -> a {_midiinmapCHOPid = b})
midiinmapCHOPbvelocity :: Lens' CHOP (Maybe (Tree Bool))
midiinmapCHOPbvelocity = lens _midiinmapCHOPbvelocity (\a b -> a {_midiinmapCHOPbvelocity = b})
midiinmapCHOPsqueue :: Lens' CHOP (Maybe (Tree Bool))
midiinmapCHOPsqueue = lens _midiinmapCHOPsqueue (\a b -> a {_midiinmapCHOPsqueue = b})
midiinmapCHOPleft :: Lens' CHOP (Maybe (Tree Int))
midiinmapCHOPleft = lens _midiinmapCHOPleft (\a b -> a {_midiinmapCHOPleft = b})
midiinmapCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
midiinmapCHOPexportmethod = lens _midiinmapCHOPexportmethod (\a b -> a {_midiinmapCHOPexportmethod = b})
midiinmapCHOPsliders :: Lens' CHOP (Maybe (Tree ByteString))
midiinmapCHOPsliders = lens _midiinmapCHOPsliders (\a b -> a {_midiinmapCHOPsliders = b})
midiinmapCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
midiinmapCHOPtimeslice = lens _midiinmapCHOPtimeslice (\a b -> a {_midiinmapCHOPtimeslice = b})
midiinmapCHOPrate :: Lens' CHOP (Maybe (Tree Float))
midiinmapCHOPrate = lens _midiinmapCHOPrate (\a b -> a {_midiinmapCHOPrate = b})
midiinmapCHOPbuttons :: Lens' CHOP (Maybe (Tree ByteString))
midiinmapCHOPbuttons = lens _midiinmapCHOPbuttons (\a b -> a {_midiinmapCHOPbuttons = b})
midiinmapCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
midiinmapCHOPscope = lens _midiinmapCHOPscope (\a b -> a {_midiinmapCHOPscope = b})
midiinmapCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
midiinmapCHOPexporttable = lens _midiinmapCHOPexporttable (\a b -> a {_midiinmapCHOPexporttable = b})
midiinmapCHOPdefval :: Lens' CHOP (Maybe (Tree Float))
midiinmapCHOPdefval = lens _midiinmapCHOPdefval (\a b -> a {_midiinmapCHOPdefval = b})
midiinmapCHOPdevice :: Lens' CHOP (Maybe (Tree DAT))
midiinmapCHOPdevice = lens _midiinmapCHOPdevice (\a b -> a {_midiinmapCHOPdevice = b})
midiinmapCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
midiinmapCHOPsrselect = lens _midiinmapCHOPsrselect (\a b -> a {_midiinmapCHOPsrselect = b})
midiinmapCHOPright :: Lens' CHOP (Maybe (Tree Int))
midiinmapCHOPright = lens _midiinmapCHOPright (\a b -> a {_midiinmapCHOPright = b})

overrideCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
overrideCHOPexportmethod = lens _overrideCHOPexportmethod (\a b -> a {_overrideCHOPexportmethod = b})
overrideCHOPmakeindex :: Lens' CHOP (Maybe (Tree Bool))
overrideCHOPmakeindex = lens _overrideCHOPmakeindex (\a b -> a {_overrideCHOPmakeindex = b})
overrideCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
overrideCHOPsrselect = lens _overrideCHOPsrselect (\a b -> a {_overrideCHOPsrselect = b})
overrideCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
overrideCHOPtimeslice = lens _overrideCHOPtimeslice (\a b -> a {_overrideCHOPtimeslice = b})
overrideCHOPmatch :: Lens' CHOP (Maybe (Tree Int))
overrideCHOPmatch = lens _overrideCHOPmatch (\a b -> a {_overrideCHOPmatch = b})
overrideCHOPindexname :: Lens' CHOP (Maybe (Tree ByteString))
overrideCHOPindexname = lens _overrideCHOPindexname (\a b -> a {_overrideCHOPindexname = b})
overrideCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
overrideCHOPscope = lens _overrideCHOPscope (\a b -> a {_overrideCHOPscope = b})
overrideCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
overrideCHOPexporttable = lens _overrideCHOPexporttable (\a b -> a {_overrideCHOPexporttable = b})
overrideCHOPcookmonitor :: Lens' CHOP (Maybe (Tree Bool))
overrideCHOPcookmonitor = lens _overrideCHOPcookmonitor (\a b -> a {_overrideCHOPcookmonitor = b})

renameCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
renameCHOPexportmethod = lens _renameCHOPexportmethod (\a b -> a {_renameCHOPexportmethod = b})
renameCHOPrenamefrom :: Lens' CHOP (Maybe (Tree ByteString))
renameCHOPrenamefrom = lens _renameCHOPrenamefrom (\a b -> a {_renameCHOPrenamefrom = b})
renameCHOPrenameto :: Lens' CHOP (Maybe (Tree ByteString))
renameCHOPrenameto = lens _renameCHOPrenameto (\a b -> a {_renameCHOPrenameto = b})
renameCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
renameCHOPsrselect = lens _renameCHOPsrselect (\a b -> a {_renameCHOPsrselect = b})
renameCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
renameCHOPtimeslice = lens _renameCHOPtimeslice (\a b -> a {_renameCHOPtimeslice = b})
renameCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
renameCHOPscope = lens _renameCHOPscope (\a b -> a {_renameCHOPscope = b})
renameCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
renameCHOPexporttable = lens _renameCHOPexporttable (\a b -> a {_renameCHOPexporttable = b})

audiodeviceinCHOPerrormissing :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPerrormissing = lens _audiodeviceinCHOPerrormissing (\a b -> a {_audiodeviceinCHOPerrormissing = b})
audiodeviceinCHOPfrontleftcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPfrontleftcenter = lens _audiodeviceinCHOPfrontleftcenter (\a b -> a {_audiodeviceinCHOPfrontleftcenter = b})
audiodeviceinCHOPtopfrontright :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPtopfrontright = lens _audiodeviceinCHOPtopfrontright (\a b -> a {_audiodeviceinCHOPtopfrontright = b})
audiodeviceinCHOPformat :: Lens' CHOP (Maybe (Tree Int))
audiodeviceinCHOPformat = lens _audiodeviceinCHOPformat (\a b -> a {_audiodeviceinCHOPformat = b})
audiodeviceinCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPactive = lens _audiodeviceinCHOPactive (\a b -> a {_audiodeviceinCHOPactive = b})
audiodeviceinCHOPtopbackcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPtopbackcenter = lens _audiodeviceinCHOPtopbackcenter (\a b -> a {_audiodeviceinCHOPtopbackcenter = b})
audiodeviceinCHOPdriver :: Lens' CHOP (Maybe (Tree Int))
audiodeviceinCHOPdriver = lens _audiodeviceinCHOPdriver (\a b -> a {_audiodeviceinCHOPdriver = b})
audiodeviceinCHOPtopbackleft :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPtopbackleft = lens _audiodeviceinCHOPtopbackleft (\a b -> a {_audiodeviceinCHOPtopbackleft = b})
audiodeviceinCHOPfrontcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPfrontcenter = lens _audiodeviceinCHOPfrontcenter (\a b -> a {_audiodeviceinCHOPfrontcenter = b})
audiodeviceinCHOPbufferlength :: Lens' CHOP (Maybe (Tree Float))
audiodeviceinCHOPbufferlength = lens _audiodeviceinCHOPbufferlength (\a b -> a {_audiodeviceinCHOPbufferlength = b})
audiodeviceinCHOPfrontright :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPfrontright = lens _audiodeviceinCHOPfrontright (\a b -> a {_audiodeviceinCHOPfrontright = b})
audiodeviceinCHOPfrontleft :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPfrontleft = lens _audiodeviceinCHOPfrontleft (\a b -> a {_audiodeviceinCHOPfrontleft = b})
audiodeviceinCHOPsideright :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPsideright = lens _audiodeviceinCHOPsideright (\a b -> a {_audiodeviceinCHOPsideright = b})
audiodeviceinCHOPsideleft :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPsideleft = lens _audiodeviceinCHOPsideleft (\a b -> a {_audiodeviceinCHOPsideleft = b})
audiodeviceinCHOPfrontrightcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPfrontrightcenter = lens _audiodeviceinCHOPfrontrightcenter (\a b -> a {_audiodeviceinCHOPfrontrightcenter = b})
audiodeviceinCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
audiodeviceinCHOPexporttable = lens _audiodeviceinCHOPexporttable (\a b -> a {_audiodeviceinCHOPexporttable = b})
audiodeviceinCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
audiodeviceinCHOPexportmethod = lens _audiodeviceinCHOPexportmethod (\a b -> a {_audiodeviceinCHOPexportmethod = b})
audiodeviceinCHOPbackcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPbackcenter = lens _audiodeviceinCHOPbackcenter (\a b -> a {_audiodeviceinCHOPbackcenter = b})
audiodeviceinCHOPtopcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPtopcenter = lens _audiodeviceinCHOPtopcenter (\a b -> a {_audiodeviceinCHOPtopcenter = b})
audiodeviceinCHOPtopbackright :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPtopbackright = lens _audiodeviceinCHOPtopbackright (\a b -> a {_audiodeviceinCHOPtopbackright = b})
audiodeviceinCHOPlowfrequency :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPlowfrequency = lens _audiodeviceinCHOPlowfrequency (\a b -> a {_audiodeviceinCHOPlowfrequency = b})
audiodeviceinCHOPrate :: Lens' CHOP (Maybe (Tree Float))
audiodeviceinCHOPrate = lens _audiodeviceinCHOPrate (\a b -> a {_audiodeviceinCHOPrate = b})
audiodeviceinCHOPtopfrontcenter :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPtopfrontcenter = lens _audiodeviceinCHOPtopfrontcenter (\a b -> a {_audiodeviceinCHOPtopfrontcenter = b})
audiodeviceinCHOPbackleft :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPbackleft = lens _audiodeviceinCHOPbackleft (\a b -> a {_audiodeviceinCHOPbackleft = b})
audiodeviceinCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
audiodeviceinCHOPscope = lens _audiodeviceinCHOPscope (\a b -> a {_audiodeviceinCHOPscope = b})
audiodeviceinCHOPinputs :: Lens' CHOP (Maybe (Tree ByteString))
audiodeviceinCHOPinputs = lens _audiodeviceinCHOPinputs (\a b -> a {_audiodeviceinCHOPinputs = b})
audiodeviceinCHOPtopfrontleft :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPtopfrontleft = lens _audiodeviceinCHOPtopfrontleft (\a b -> a {_audiodeviceinCHOPtopfrontleft = b})
audiodeviceinCHOPdevice :: Lens' CHOP (Maybe (Tree ByteString))
audiodeviceinCHOPdevice = lens _audiodeviceinCHOPdevice (\a b -> a {_audiodeviceinCHOPdevice = b})
audiodeviceinCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
audiodeviceinCHOPsrselect = lens _audiodeviceinCHOPsrselect (\a b -> a {_audiodeviceinCHOPsrselect = b})
audiodeviceinCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPtimeslice = lens _audiodeviceinCHOPtimeslice (\a b -> a {_audiodeviceinCHOPtimeslice = b})
audiodeviceinCHOPbackright :: Lens' CHOP (Maybe (Tree Bool))
audiodeviceinCHOPbackright = lens _audiodeviceinCHOPbackright (\a b -> a {_audiodeviceinCHOPbackright = b})

inversecurveCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
inversecurveCHOPexportmethod = lens _inversecurveCHOPexportmethod (\a b -> a {_inversecurveCHOPexportmethod = b})
inversecurveCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
inversecurveCHOPexporttable = lens _inversecurveCHOPexporttable (\a b -> a {_inversecurveCHOPexporttable = b})
inversecurveCHOPupvector :: Lens' CHOP (Vec3)
inversecurveCHOPupvector = lens _inversecurveCHOPupvector (\a b -> a {_inversecurveCHOPupvector = b})
inversecurveCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
inversecurveCHOPscope = lens _inversecurveCHOPscope (\a b -> a {_inversecurveCHOPscope = b})
inversecurveCHOPinterpolation :: Lens' CHOP (Maybe (Tree Int))
inversecurveCHOPinterpolation = lens _inversecurveCHOPinterpolation (\a b -> a {_inversecurveCHOPinterpolation = b})
inversecurveCHOPmapexports :: Lens' CHOP (Maybe (Tree Bool))
inversecurveCHOPmapexports = lens _inversecurveCHOPmapexports (\a b -> a {_inversecurveCHOPmapexports = b})
inversecurveCHOPspan1 :: Lens' CHOP (Maybe (Tree Float))
inversecurveCHOPspan1 = lens _inversecurveCHOPspan1 (\a b -> a {_inversecurveCHOPspan1 = b})
inversecurveCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
inversecurveCHOPsrselect = lens _inversecurveCHOPsrselect (\a b -> a {_inversecurveCHOPsrselect = b})
inversecurveCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
inversecurveCHOPtimeslice = lens _inversecurveCHOPtimeslice (\a b -> a {_inversecurveCHOPtimeslice = b})
inversecurveCHOPorder :: Lens' CHOP (Maybe (Tree Int))
inversecurveCHOPorder = lens _inversecurveCHOPorder (\a b -> a {_inversecurveCHOPorder = b})
inversecurveCHOPspan2 :: Lens' CHOP (Maybe (Tree Float))
inversecurveCHOPspan2 = lens _inversecurveCHOPspan2 (\a b -> a {_inversecurveCHOPspan2 = b})

panelCHOPqueue :: Lens' CHOP (Maybe (Tree Bool))
panelCHOPqueue = lens _panelCHOPqueue (\a b -> a {_panelCHOPqueue = b})
panelCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
panelCHOPexportmethod = lens _panelCHOPexportmethod (\a b -> a {_panelCHOPexportmethod = b})
panelCHOPselect :: Lens' CHOP (Maybe (Tree ByteString))
panelCHOPselect = lens _panelCHOPselect (\a b -> a {_panelCHOPselect = b})
panelCHOPqueuesize :: Lens' CHOP (Maybe (Tree Int))
panelCHOPqueuesize = lens _panelCHOPqueuesize (\a b -> a {_panelCHOPqueuesize = b})
panelCHOPrename :: Lens' CHOP (Maybe (Tree ByteString))
panelCHOPrename = lens _panelCHOPrename (\a b -> a {_panelCHOPrename = b})
panelCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
panelCHOPsrselect = lens _panelCHOPsrselect (\a b -> a {_panelCHOPsrselect = b})
panelCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
panelCHOPtimeslice = lens _panelCHOPtimeslice (\a b -> a {_panelCHOPtimeslice = b})
panelCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
panelCHOPscope = lens _panelCHOPscope (\a b -> a {_panelCHOPscope = b})
panelCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
panelCHOPexporttable = lens _panelCHOPexporttable (\a b -> a {_panelCHOPexporttable = b})
panelCHOPcomponent :: Lens' CHOP (Maybe (Tree COMP))
panelCHOPcomponent = lens _panelCHOPcomponent (\a b -> a {_panelCHOPcomponent = b})

dattoCHOPcolexpr :: Lens' CHOP (Maybe (Tree ByteString))
dattoCHOPcolexpr = lens _dattoCHOPcolexpr (\a b -> a {_dattoCHOPcolexpr = b})
dattoCHOPfromcol :: Lens' CHOP (Maybe (Tree Int))
dattoCHOPfromcol = lens _dattoCHOPfromcol (\a b -> a {_dattoCHOPfromcol = b})
dattoCHOProwindexstart :: Lens' CHOP (Maybe (Tree Int))
dattoCHOProwindexstart = lens _dattoCHOProwindexstart (\a b -> a {_dattoCHOProwindexstart = b})
dattoCHOPrownameend :: Lens' CHOP (Maybe (Tree ByteString))
dattoCHOPrownameend = lens _dattoCHOPrownameend (\a b -> a {_dattoCHOPrownameend = b})
dattoCHOPrownamestart :: Lens' CHOP (Maybe (Tree ByteString))
dattoCHOPrownamestart = lens _dattoCHOPrownamestart (\a b -> a {_dattoCHOPrownamestart = b})
dattoCHOPfirstrow :: Lens' CHOP (Maybe (Tree Int))
dattoCHOPfirstrow = lens _dattoCHOPfirstrow (\a b -> a {_dattoCHOPfirstrow = b})
dattoCHOPfromrow :: Lens' CHOP (Maybe (Tree Int))
dattoCHOPfromrow = lens _dattoCHOPfromrow (\a b -> a {_dattoCHOPfromrow = b})
dattoCHOProwexpr :: Lens' CHOP (Maybe (Tree ByteString))
dattoCHOProwexpr = lens _dattoCHOProwexpr (\a b -> a {_dattoCHOProwexpr = b})
dattoCHOPcolnamestart :: Lens' CHOP (Maybe (Tree ByteString))
dattoCHOPcolnamestart = lens _dattoCHOPcolnamestart (\a b -> a {_dattoCHOPcolnamestart = b})
dattoCHOProwindexend :: Lens' CHOP (Maybe (Tree Int))
dattoCHOProwindexend = lens _dattoCHOProwindexend (\a b -> a {_dattoCHOProwindexend = b})
dattoCHOPcolnames :: Lens' CHOP (Maybe (Tree ByteString))
dattoCHOPcolnames = lens _dattoCHOPcolnames (\a b -> a {_dattoCHOPcolnames = b})
dattoCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
dattoCHOPexporttable = lens _dattoCHOPexporttable (\a b -> a {_dattoCHOPexporttable = b})
dattoCHOPoutput :: Lens' CHOP (Maybe (Tree Int))
dattoCHOPoutput = lens _dattoCHOPoutput (\a b -> a {_dattoCHOPoutput = b})
dattoCHOPextractrows :: Lens' CHOP (Maybe (Tree Int))
dattoCHOPextractrows = lens _dattoCHOPextractrows (\a b -> a {_dattoCHOPextractrows = b})
dattoCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
dattoCHOPexportmethod = lens _dattoCHOPexportmethod (\a b -> a {_dattoCHOPexportmethod = b})
dattoCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
dattoCHOPtimeslice = lens _dattoCHOPtimeslice (\a b -> a {_dattoCHOPtimeslice = b})
dattoCHOPcolindexend :: Lens' CHOP (Maybe (Tree Int))
dattoCHOPcolindexend = lens _dattoCHOPcolindexend (\a b -> a {_dattoCHOPcolindexend = b})
dattoCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
dattoCHOPscope = lens _dattoCHOPscope (\a b -> a {_dattoCHOPscope = b})
dattoCHOPrownames :: Lens' CHOP (Maybe (Tree ByteString))
dattoCHOPrownames = lens _dattoCHOPrownames (\a b -> a {_dattoCHOPrownames = b})
dattoCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
dattoCHOPsrselect = lens _dattoCHOPsrselect (\a b -> a {_dattoCHOPsrselect = b})
dattoCHOPfirstcolumn :: Lens' CHOP (Maybe (Tree Int))
dattoCHOPfirstcolumn = lens _dattoCHOPfirstcolumn (\a b -> a {_dattoCHOPfirstcolumn = b})
dattoCHOPcolnameend :: Lens' CHOP (Maybe (Tree ByteString))
dattoCHOPcolnameend = lens _dattoCHOPcolnameend (\a b -> a {_dattoCHOPcolnameend = b})
dattoCHOPdat :: Lens' CHOP (Maybe (Tree DAT))
dattoCHOPdat = lens _dattoCHOPdat (\a b -> a {_dattoCHOPdat = b})
dattoCHOPcolindexstart :: Lens' CHOP (Maybe (Tree Int))
dattoCHOPcolindexstart = lens _dattoCHOPcolindexstart (\a b -> a {_dattoCHOPcolindexstart = b})
dattoCHOPextractcols :: Lens' CHOP (Maybe (Tree Int))
dattoCHOPextractcols = lens _dattoCHOPextractcols (\a b -> a {_dattoCHOPextractcols = b})

hokuyoCHOPinterface :: Lens' CHOP (Maybe (Tree Int))
hokuyoCHOPinterface = lens _hokuyoCHOPinterface (\a b -> a {_hokuyoCHOPinterface = b})
hokuyoCHOPendstep :: Lens' CHOP (Maybe (Tree Int))
hokuyoCHOPendstep = lens _hokuyoCHOPendstep (\a b -> a {_hokuyoCHOPendstep = b})
hokuyoCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
hokuyoCHOPactive = lens _hokuyoCHOPactive (\a b -> a {_hokuyoCHOPactive = b})
hokuyoCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
hokuyoCHOPexportmethod = lens _hokuyoCHOPexportmethod (\a b -> a {_hokuyoCHOPexportmethod = b})
hokuyoCHOPstartstep :: Lens' CHOP (Maybe (Tree Int))
hokuyoCHOPstartstep = lens _hokuyoCHOPstartstep (\a b -> a {_hokuyoCHOPstartstep = b})
hokuyoCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
hokuyoCHOPexporttable = lens _hokuyoCHOPexporttable (\a b -> a {_hokuyoCHOPexporttable = b})
hokuyoCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
hokuyoCHOPscope = lens _hokuyoCHOPscope (\a b -> a {_hokuyoCHOPscope = b})
hokuyoCHOPhighsensitivity :: Lens' CHOP (Maybe (Tree Bool))
hokuyoCHOPhighsensitivity = lens _hokuyoCHOPhighsensitivity (\a b -> a {_hokuyoCHOPhighsensitivity = b})
hokuyoCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
hokuyoCHOPsrselect = lens _hokuyoCHOPsrselect (\a b -> a {_hokuyoCHOPsrselect = b})
hokuyoCHOPmotorspeed :: Lens' CHOP (Maybe (Tree Int))
hokuyoCHOPmotorspeed = lens _hokuyoCHOPmotorspeed (\a b -> a {_hokuyoCHOPmotorspeed = b})
hokuyoCHOPport :: Lens' CHOP (Maybe (Tree ByteString))
hokuyoCHOPport = lens _hokuyoCHOPport (\a b -> a {_hokuyoCHOPport = b})
hokuyoCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
hokuyoCHOPtimeslice = lens _hokuyoCHOPtimeslice (\a b -> a {_hokuyoCHOPtimeslice = b})
hokuyoCHOPnetaddress :: Lens' CHOP (Maybe (Tree ByteString))
hokuyoCHOPnetaddress = lens _hokuyoCHOPnetaddress (\a b -> a {_hokuyoCHOPnetaddress = b})
hokuyoCHOPoutput :: Lens' CHOP (Maybe (Tree Int))
hokuyoCHOPoutput = lens _hokuyoCHOPoutput (\a b -> a {_hokuyoCHOPoutput = b})

analyzeCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
analyzeCHOPexportmethod = lens _analyzeCHOPexportmethod (\a b -> a {_analyzeCHOPexportmethod = b})
analyzeCHOPnopeakvalue :: Lens' CHOP (Maybe (Tree Float))
analyzeCHOPnopeakvalue = lens _analyzeCHOPnopeakvalue (\a b -> a {_analyzeCHOPnopeakvalue = b})
analyzeCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
analyzeCHOPsrselect = lens _analyzeCHOPsrselect (\a b -> a {_analyzeCHOPsrselect = b})
analyzeCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
analyzeCHOPscope = lens _analyzeCHOPscope (\a b -> a {_analyzeCHOPscope = b})
analyzeCHOPvalleys :: Lens' CHOP (Maybe (Tree Bool))
analyzeCHOPvalleys = lens _analyzeCHOPvalleys (\a b -> a {_analyzeCHOPvalleys = b})
analyzeCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
analyzeCHOPexporttable = lens _analyzeCHOPexporttable (\a b -> a {_analyzeCHOPexporttable = b})
analyzeCHOPallowend :: Lens' CHOP (Maybe (Tree Bool))
analyzeCHOPallowend = lens _analyzeCHOPallowend (\a b -> a {_analyzeCHOPallowend = b})
analyzeCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
analyzeCHOPtimeslice = lens _analyzeCHOPtimeslice (\a b -> a {_analyzeCHOPtimeslice = b})
analyzeCHOPallowstart :: Lens' CHOP (Maybe (Tree Bool))
analyzeCHOPallowstart = lens _analyzeCHOPallowstart (\a b -> a {_analyzeCHOPallowstart = b})
analyzeCHOPfunction :: Lens' CHOP (Maybe (Tree Int))
analyzeCHOPfunction = lens _analyzeCHOPfunction (\a b -> a {_analyzeCHOPfunction = b})

serialCHOPscript1 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript1 = lens _serialCHOPscript1 (\a b -> a {_serialCHOPscript1 = b})
serialCHOPparity :: Lens' CHOP (Maybe (Tree Int))
serialCHOPparity = lens _serialCHOPparity (\a b -> a {_serialCHOPparity = b})
serialCHOPscript6 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript6 = lens _serialCHOPscript6 (\a b -> a {_serialCHOPscript6 = b})
serialCHOPscript9 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript9 = lens _serialCHOPscript9 (\a b -> a {_serialCHOPscript9 = b})
serialCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
serialCHOPactive = lens _serialCHOPactive (\a b -> a {_serialCHOPactive = b})
serialCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
serialCHOPexportmethod = lens _serialCHOPexportmethod (\a b -> a {_serialCHOPexportmethod = b})
serialCHOPscript8 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript8 = lens _serialCHOPscript8 (\a b -> a {_serialCHOPscript8 = b})
serialCHOPscript14 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript14 = lens _serialCHOPscript14 (\a b -> a {_serialCHOPscript14 = b})
serialCHOPstopbits :: Lens' CHOP (Maybe (Tree Int))
serialCHOPstopbits = lens _serialCHOPstopbits (\a b -> a {_serialCHOPstopbits = b})
serialCHOPscript0 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript0 = lens _serialCHOPscript0 (\a b -> a {_serialCHOPscript0 = b})
serialCHOPscript3 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript3 = lens _serialCHOPscript3 (\a b -> a {_serialCHOPscript3 = b})
serialCHOPscript7 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript7 = lens _serialCHOPscript7 (\a b -> a {_serialCHOPscript7 = b})
serialCHOPscript10 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript10 = lens _serialCHOPscript10 (\a b -> a {_serialCHOPscript10 = b})
serialCHOPport :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPport = lens _serialCHOPport (\a b -> a {_serialCHOPport = b})
serialCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
serialCHOPexporttable = lens _serialCHOPexporttable (\a b -> a {_serialCHOPexporttable = b})
serialCHOPscript12 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript12 = lens _serialCHOPscript12 (\a b -> a {_serialCHOPscript12 = b})
serialCHOPbaudrate :: Lens' CHOP (Maybe (Tree Int))
serialCHOPbaudrate = lens _serialCHOPbaudrate (\a b -> a {_serialCHOPbaudrate = b})
serialCHOPscript13 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript13 = lens _serialCHOPscript13 (\a b -> a {_serialCHOPscript13 = b})
serialCHOPscript2 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript2 = lens _serialCHOPscript2 (\a b -> a {_serialCHOPscript2 = b})
serialCHOPstate :: Lens' CHOP (Maybe (Tree Int))
serialCHOPstate = lens _serialCHOPstate (\a b -> a {_serialCHOPstate = b})
serialCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscope = lens _serialCHOPscope (\a b -> a {_serialCHOPscope = b})
serialCHOPscript5 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript5 = lens _serialCHOPscript5 (\a b -> a {_serialCHOPscript5 = b})
serialCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
serialCHOPsrselect = lens _serialCHOPsrselect (\a b -> a {_serialCHOPsrselect = b})
serialCHOPdatabits :: Lens' CHOP (Maybe (Tree Int))
serialCHOPdatabits = lens _serialCHOPdatabits (\a b -> a {_serialCHOPdatabits = b})
serialCHOPscript11 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript11 = lens _serialCHOPscript11 (\a b -> a {_serialCHOPscript11 = b})
serialCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
serialCHOPtimeslice = lens _serialCHOPtimeslice (\a b -> a {_serialCHOPtimeslice = b})
serialCHOPscript4 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript4 = lens _serialCHOPscript4 (\a b -> a {_serialCHOPscript4 = b})
serialCHOPscript15 :: Lens' CHOP (Maybe (Tree ByteString))
serialCHOPscript15 = lens _serialCHOPscript15 (\a b -> a {_serialCHOPscript15 = b})

infoCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
infoCHOPexportmethod = lens _infoCHOPexportmethod (\a b -> a {_infoCHOPexportmethod = b})
infoCHOPpassive :: Lens' CHOP (Maybe (Tree Bool))
infoCHOPpassive = lens _infoCHOPpassive (\a b -> a {_infoCHOPpassive = b})
infoCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
infoCHOPexporttable = lens _infoCHOPexporttable (\a b -> a {_infoCHOPexporttable = b})
infoCHOPiscope :: Lens' CHOP (Maybe (Tree ByteString))
infoCHOPiscope = lens _infoCHOPiscope (\a b -> a {_infoCHOPiscope = b})
infoCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
infoCHOPscope = lens _infoCHOPscope (\a b -> a {_infoCHOPscope = b})
infoCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
infoCHOPsrselect = lens _infoCHOPsrselect (\a b -> a {_infoCHOPsrselect = b})
infoCHOPrange1 :: Lens' CHOP (Maybe (Tree Float))
infoCHOPrange1 = lens _infoCHOPrange1 (\a b -> a {_infoCHOPrange1 = b})
infoCHOPvalues :: Lens' CHOP (Maybe (Tree Int))
infoCHOPvalues = lens _infoCHOPvalues (\a b -> a {_infoCHOPvalues = b})
infoCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
infoCHOPtimeslice = lens _infoCHOPtimeslice (\a b -> a {_infoCHOPtimeslice = b})
infoCHOPrange2 :: Lens' CHOP (Maybe (Tree Float))
infoCHOPrange2 = lens _infoCHOPrange2 (\a b -> a {_infoCHOPrange2 = b})

trimCHOPstart :: Lens' CHOP (Maybe (Tree Float))
trimCHOPstart = lens _trimCHOPstart (\a b -> a {_trimCHOPstart = b})
trimCHOPend :: Lens' CHOP (Maybe (Tree Float))
trimCHOPend = lens _trimCHOPend (\a b -> a {_trimCHOPend = b})
trimCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
trimCHOPexportmethod = lens _trimCHOPexportmethod (\a b -> a {_trimCHOPexportmethod = b})
trimCHOPendunit :: Lens' CHOP (Maybe (Tree Int))
trimCHOPendunit = lens _trimCHOPendunit (\a b -> a {_trimCHOPendunit = b})
trimCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
trimCHOPscope = lens _trimCHOPscope (\a b -> a {_trimCHOPscope = b})
trimCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
trimCHOPexporttable = lens _trimCHOPexporttable (\a b -> a {_trimCHOPexporttable = b})
trimCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
trimCHOPtimeslice = lens _trimCHOPtimeslice (\a b -> a {_trimCHOPtimeslice = b})
trimCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
trimCHOPsrselect = lens _trimCHOPsrselect (\a b -> a {_trimCHOPsrselect = b})
trimCHOPrelative :: Lens' CHOP (Maybe (Tree Int))
trimCHOPrelative = lens _trimCHOPrelative (\a b -> a {_trimCHOPrelative = b})
trimCHOPstartunit :: Lens' CHOP (Maybe (Tree Int))
trimCHOPstartunit = lens _trimCHOPstartunit (\a b -> a {_trimCHOPstartunit = b})
trimCHOPdiscard :: Lens' CHOP (Maybe (Tree Int))
trimCHOPdiscard = lens _trimCHOPdiscard (\a b -> a {_trimCHOPdiscard = b})

resampleCHOPinterp :: Lens' CHOP (Maybe (Tree Int))
resampleCHOPinterp = lens _resampleCHOPinterp (\a b -> a {_resampleCHOPinterp = b})
resampleCHOPstart :: Lens' CHOP (Maybe (Tree Float))
resampleCHOPstart = lens _resampleCHOPstart (\a b -> a {_resampleCHOPstart = b})
resampleCHOPend :: Lens' CHOP (Maybe (Tree Float))
resampleCHOPend = lens _resampleCHOPend (\a b -> a {_resampleCHOPend = b})
resampleCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
resampleCHOPexportmethod = lens _resampleCHOPexportmethod (\a b -> a {_resampleCHOPexportmethod = b})
resampleCHOPstartunit :: Lens' CHOP (Maybe (Tree Int))
resampleCHOPstartunit = lens _resampleCHOPstartunit (\a b -> a {_resampleCHOPstartunit = b})
resampleCHOPrate :: Lens' CHOP (Maybe (Tree Float))
resampleCHOPrate = lens _resampleCHOPrate (\a b -> a {_resampleCHOPrate = b})
resampleCHOPquatrot :: Lens' CHOP (Maybe (Tree Bool))
resampleCHOPquatrot = lens _resampleCHOPquatrot (\a b -> a {_resampleCHOPquatrot = b})
resampleCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
resampleCHOPscope = lens _resampleCHOPscope (\a b -> a {_resampleCHOPscope = b})
resampleCHOPconstarea :: Lens' CHOP (Maybe (Tree Bool))
resampleCHOPconstarea = lens _resampleCHOPconstarea (\a b -> a {_resampleCHOPconstarea = b})
resampleCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
resampleCHOPtimeslice = lens _resampleCHOPtimeslice (\a b -> a {_resampleCHOPtimeslice = b})
resampleCHOPcyclelen :: Lens' CHOP (Maybe (Tree Float))
resampleCHOPcyclelen = lens _resampleCHOPcyclelen (\a b -> a {_resampleCHOPcyclelen = b})
resampleCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
resampleCHOPsrselect = lens _resampleCHOPsrselect (\a b -> a {_resampleCHOPsrselect = b})
resampleCHOPrelative :: Lens' CHOP (Maybe (Tree Int))
resampleCHOPrelative = lens _resampleCHOPrelative (\a b -> a {_resampleCHOPrelative = b})
resampleCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
resampleCHOPexporttable = lens _resampleCHOPexporttable (\a b -> a {_resampleCHOPexporttable = b})
resampleCHOPmethod :: Lens' CHOP (Maybe (Tree Int))
resampleCHOPmethod = lens _resampleCHOPmethod (\a b -> a {_resampleCHOPmethod = b})
resampleCHOPendunit :: Lens' CHOP (Maybe (Tree Int))
resampleCHOPendunit = lens _resampleCHOPendunit (\a b -> a {_resampleCHOPendunit = b})
resampleCHOPcorrect :: Lens' CHOP (Maybe (Tree Bool))
resampleCHOPcorrect = lens _resampleCHOPcorrect (\a b -> a {_resampleCHOPcorrect = b})

blendCHOPfirstweight :: Lens' CHOP (Maybe (Tree Bool))
blendCHOPfirstweight = lens _blendCHOPfirstweight (\a b -> a {_blendCHOPfirstweight = b})
blendCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
blendCHOPexportmethod = lens _blendCHOPexportmethod (\a b -> a {_blendCHOPexportmethod = b})
blendCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
blendCHOPsrselect = lens _blendCHOPsrselect (\a b -> a {_blendCHOPsrselect = b})
blendCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
blendCHOPexporttable = lens _blendCHOPexporttable (\a b -> a {_blendCHOPexporttable = b})
blendCHOPmethod :: Lens' CHOP (Maybe (Tree Int))
blendCHOPmethod = lens _blendCHOPmethod (\a b -> a {_blendCHOPmethod = b})
blendCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
blendCHOPtimeslice = lens _blendCHOPtimeslice (\a b -> a {_blendCHOPtimeslice = b})
blendCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
blendCHOPscope = lens _blendCHOPscope (\a b -> a {_blendCHOPscope = b})
blendCHOPunderflow :: Lens' CHOP (Maybe (Tree Bool))
blendCHOPunderflow = lens _blendCHOPunderflow (\a b -> a {_blendCHOPunderflow = b})

heliosdacCHOPexportmethod :: Lens' CHOP (Maybe (Tree Int))
heliosdacCHOPexportmethod = lens _heliosdacCHOPexportmethod (\a b -> a {_heliosdacCHOPexportmethod = b})
heliosdacCHOPactive :: Lens' CHOP (Maybe (Tree Bool))
heliosdacCHOPactive = lens _heliosdacCHOPactive (\a b -> a {_heliosdacCHOPactive = b})
heliosdacCHOPexporttable :: Lens' CHOP (Maybe (Tree DAT))
heliosdacCHOPexporttable = lens _heliosdacCHOPexporttable (\a b -> a {_heliosdacCHOPexporttable = b})
heliosdacCHOPxscale :: Lens' CHOP (Maybe (Tree Float))
heliosdacCHOPxscale = lens _heliosdacCHOPxscale (\a b -> a {_heliosdacCHOPxscale = b})
heliosdacCHOPscope :: Lens' CHOP (Maybe (Tree ByteString))
heliosdacCHOPscope = lens _heliosdacCHOPscope (\a b -> a {_heliosdacCHOPscope = b})
heliosdacCHOPbluescale :: Lens' CHOP (Maybe (Tree Float))
heliosdacCHOPbluescale = lens _heliosdacCHOPbluescale (\a b -> a {_heliosdacCHOPbluescale = b})
heliosdacCHOPqueuetime :: Lens' CHOP (Maybe (Tree Float))
heliosdacCHOPqueuetime = lens _heliosdacCHOPqueuetime (\a b -> a {_heliosdacCHOPqueuetime = b})
heliosdacCHOPgreenscale :: Lens' CHOP (Maybe (Tree Float))
heliosdacCHOPgreenscale = lens _heliosdacCHOPgreenscale (\a b -> a {_heliosdacCHOPgreenscale = b})
heliosdacCHOPsrselect :: Lens' CHOP (Maybe (Tree Int))
heliosdacCHOPsrselect = lens _heliosdacCHOPsrselect (\a b -> a {_heliosdacCHOPsrselect = b})
heliosdacCHOPdevice :: Lens' CHOP (Maybe (Tree ByteString))
heliosdacCHOPdevice = lens _heliosdacCHOPdevice (\a b -> a {_heliosdacCHOPdevice = b})
heliosdacCHOPtimeslice :: Lens' CHOP (Maybe (Tree Bool))
heliosdacCHOPtimeslice = lens _heliosdacCHOPtimeslice (\a b -> a {_heliosdacCHOPtimeslice = b})
heliosdacCHOPintensityscale :: Lens' CHOP (Maybe (Tree Float))
heliosdacCHOPintensityscale = lens _heliosdacCHOPintensityscale (\a b -> a {_heliosdacCHOPintensityscale = b})
heliosdacCHOPredscale :: Lens' CHOP (Maybe (Tree Float))
heliosdacCHOPredscale = lens _heliosdacCHOPredscale (\a b -> a {_heliosdacCHOPredscale = b})
heliosdacCHOPyscale :: Lens' CHOP (Maybe (Tree Float))
heliosdacCHOPyscale = lens _heliosdacCHOPyscale (\a b -> a {_heliosdacCHOPyscale = b})

inMATpcaptpath :: Lens' MAT (Maybe (Tree ByteString))
inMATpcaptpath = lens _inMATpcaptpath (\a b -> a {_inMATpcaptpath = b})
inMATwireframe :: Lens' MAT (Maybe (Tree Int))
inMATwireframe = lens _inMATwireframe (\a b -> a {_inMATwireframe = b})
inMATdestblenda :: Lens' MAT (Maybe (Tree Int))
inMATdestblenda = lens _inMATdestblenda (\a b -> a {_inMATdestblenda = b})
inMATmat :: Lens' MAT (Maybe (Tree MAT))
inMATmat = lens _inMATmat (\a b -> a {_inMATmat = b})
inMATdepthfunc :: Lens' MAT (Maybe (Tree Int))
inMATdepthfunc = lens _inMATdepthfunc (\a b -> a {_inMATdepthfunc = b})
inMATcullface :: Lens' MAT (Maybe (Tree Int))
inMATcullface = lens _inMATcullface (\a b -> a {_inMATcullface = b})
inMATskelrootpath :: Lens' MAT (Maybe (Tree ByteString))
inMATskelrootpath = lens _inMATskelrootpath (\a b -> a {_inMATskelrootpath = b})
inMATdestblend :: Lens' MAT (Maybe (Tree Int))
inMATdestblend = lens _inMATdestblend (\a b -> a {_inMATdestblend = b})
inMATlabel :: Lens' MAT (Maybe (Tree ByteString))
inMATlabel = lens _inMATlabel (\a b -> a {_inMATlabel = b})
inMATalphafunc :: Lens' MAT (Maybe (Tree Int))
inMATalphafunc = lens _inMATalphafunc (\a b -> a {_inMATalphafunc = b})
inMATdepthtest :: Lens' MAT (Maybe (Tree Bool))
inMATdepthtest = lens _inMATdepthtest (\a b -> a {_inMATdepthtest = b})
inMATpolygonoffsetunits :: Lens' MAT (Maybe (Tree Float))
inMATpolygonoffsetunits = lens _inMATpolygonoffsetunits (\a b -> a {_inMATpolygonoffsetunits = b})
inMATpolygonoffsetfactor :: Lens' MAT (Maybe (Tree Float))
inMATpolygonoffsetfactor = lens _inMATpolygonoffsetfactor (\a b -> a {_inMATpolygonoffsetfactor = b})
inMATpolygonoffset :: Lens' MAT (Maybe (Tree Bool))
inMATpolygonoffset = lens _inMATpolygonoffset (\a b -> a {_inMATpolygonoffset = b})
inMATseparatealphafunc :: Lens' MAT (Maybe (Tree Bool))
inMATseparatealphafunc = lens _inMATseparatealphafunc (\a b -> a {_inMATseparatealphafunc = b})
inMATdepthwriting :: Lens' MAT (Maybe (Tree Bool))
inMATdepthwriting = lens _inMATdepthwriting (\a b -> a {_inMATdepthwriting = b})
inMATalphathreshold :: Lens' MAT (Maybe (Tree Float))
inMATalphathreshold = lens _inMATalphathreshold (\a b -> a {_inMATalphathreshold = b})
inMATpcaptdata :: Lens' MAT (Maybe (Tree ByteString))
inMATpcaptdata = lens _inMATpcaptdata (\a b -> a {_inMATpcaptdata = b})
inMATdodeform :: Lens' MAT (Maybe (Tree Bool))
inMATdodeform = lens _inMATdodeform (\a b -> a {_inMATdodeform = b})
inMATdeformdata :: Lens' MAT (Maybe (Tree Int))
inMATdeformdata = lens _inMATdeformdata (\a b -> a {_inMATdeformdata = b})
inMATwirewidth :: Lens' MAT (Maybe (Tree Float))
inMATwirewidth = lens _inMATwirewidth (\a b -> a {_inMATwirewidth = b})
inMATtargetsop :: Lens' MAT (Maybe (Tree SOP))
inMATtargetsop = lens _inMATtargetsop (\a b -> a {_inMATtargetsop = b})
inMATsrcblend :: Lens' MAT (Maybe (Tree Int))
inMATsrcblend = lens _inMATsrcblend (\a b -> a {_inMATsrcblend = b})
inMATblending :: Lens' MAT (Maybe (Tree Bool))
inMATblending = lens _inMATblending (\a b -> a {_inMATblending = b})
inMATalphatest :: Lens' MAT (Maybe (Tree Bool))
inMATalphatest = lens _inMATalphatest (\a b -> a {_inMATalphatest = b})
inMATsrcblenda :: Lens' MAT (Maybe (Tree Int))
inMATsrcblenda = lens _inMATsrcblenda (\a b -> a {_inMATsrcblenda = b})

pointspriteMAToffsettop :: Lens' MAT (Maybe (Tree Float))
pointspriteMAToffsettop = lens _pointspriteMAToffsettop (\a b -> a {_pointspriteMAToffsettop = b})
pointspriteMATcolormapanisotropy :: Lens' MAT (Maybe (Tree Int))
pointspriteMATcolormapanisotropy = lens _pointspriteMATcolormapanisotropy (\a b -> a {_pointspriteMATcolormapanisotropy = b})
pointspriteMATalpha :: Lens' MAT (Maybe (Tree Float))
pointspriteMATalpha = lens _pointspriteMATalpha (\a b -> a {_pointspriteMATalpha = b})
pointspriteMAToffsetbottom :: Lens' MAT (Maybe (Tree Float))
pointspriteMAToffsetbottom = lens _pointspriteMAToffsetbottom (\a b -> a {_pointspriteMAToffsetbottom = b})
pointspriteMATcullface :: Lens' MAT (Maybe (Tree Int))
pointspriteMATcullface = lens _pointspriteMATcullface (\a b -> a {_pointspriteMATcullface = b})
pointspriteMATskelrootpath :: Lens' MAT (Maybe (Tree ByteString))
pointspriteMATskelrootpath = lens _pointspriteMATskelrootpath (\a b -> a {_pointspriteMATskelrootpath = b})
pointspriteMATwireframe :: Lens' MAT (Maybe (Tree Int))
pointspriteMATwireframe = lens _pointspriteMATwireframe (\a b -> a {_pointspriteMATwireframe = b})
pointspriteMATalphafunc :: Lens' MAT (Maybe (Tree Int))
pointspriteMATalphafunc = lens _pointspriteMATalphafunc (\a b -> a {_pointspriteMATalphafunc = b})
pointspriteMATpointscale :: Lens' MAT (Maybe (Tree Float))
pointspriteMATpointscale = lens _pointspriteMATpointscale (\a b -> a {_pointspriteMATpointscale = b})
pointspriteMATpolygonoffsetfactor :: Lens' MAT (Maybe (Tree Float))
pointspriteMATpolygonoffsetfactor = lens _pointspriteMATpolygonoffsetfactor (\a b -> a {_pointspriteMATpolygonoffsetfactor = b})
pointspriteMATpolygonoffset :: Lens' MAT (Maybe (Tree Bool))
pointspriteMATpolygonoffset = lens _pointspriteMATpolygonoffset (\a b -> a {_pointspriteMATpolygonoffset = b})
pointspriteMATseparatealphafunc :: Lens' MAT (Maybe (Tree Bool))
pointspriteMATseparatealphafunc = lens _pointspriteMATseparatealphafunc (\a b -> a {_pointspriteMATseparatealphafunc = b})
pointspriteMATdepthwriting :: Lens' MAT (Maybe (Tree Bool))
pointspriteMATdepthwriting = lens _pointspriteMATdepthwriting (\a b -> a {_pointspriteMATdepthwriting = b})
pointspriteMAToffsetleft :: Lens' MAT (Maybe (Tree Float))
pointspriteMAToffsetleft = lens _pointspriteMAToffsetleft (\a b -> a {_pointspriteMAToffsetleft = b})
pointspriteMATcolormapextendv :: Lens' MAT (Maybe (Tree Int))
pointspriteMATcolormapextendv = lens _pointspriteMATcolormapextendv (\a b -> a {_pointspriteMATcolormapextendv = b})
pointspriteMATpcaptdata :: Lens' MAT (Maybe (Tree ByteString))
pointspriteMATpcaptdata = lens _pointspriteMATpcaptdata (\a b -> a {_pointspriteMATpcaptdata = b})
pointspriteMATdodeform :: Lens' MAT (Maybe (Tree Bool))
pointspriteMATdodeform = lens _pointspriteMATdodeform (\a b -> a {_pointspriteMATdodeform = b})
pointspriteMATpostmultalpha :: Lens' MAT (Maybe (Tree Bool))
pointspriteMATpostmultalpha = lens _pointspriteMATpostmultalpha (\a b -> a {_pointspriteMATpostmultalpha = b})
pointspriteMATcolor :: Lens' MAT (Vec3)
pointspriteMATcolor = lens _pointspriteMATcolor (\a b -> a {_pointspriteMATcolor = b})
pointspriteMATdeformdata :: Lens' MAT (Maybe (Tree Int))
pointspriteMATdeformdata = lens _pointspriteMATdeformdata (\a b -> a {_pointspriteMATdeformdata = b})
pointspriteMATdestblenda :: Lens' MAT (Maybe (Tree Int))
pointspriteMATdestblenda = lens _pointspriteMATdestblenda (\a b -> a {_pointspriteMATdestblenda = b})
pointspriteMATcolormapextendu :: Lens' MAT (Maybe (Tree Int))
pointspriteMATcolormapextendu = lens _pointspriteMATcolormapextendu (\a b -> a {_pointspriteMATcolormapextendu = b})
pointspriteMATblending :: Lens' MAT (Maybe (Tree Bool))
pointspriteMATblending = lens _pointspriteMATblending (\a b -> a {_pointspriteMATblending = b})
pointspriteMATpcaptpath :: Lens' MAT (Maybe (Tree ByteString))
pointspriteMATpcaptpath = lens _pointspriteMATpcaptpath (\a b -> a {_pointspriteMATpcaptpath = b})
pointspriteMATcolormap :: Lens' MAT (Maybe (Tree TOP))
pointspriteMATcolormap = lens _pointspriteMATcolormap (\a b -> a {_pointspriteMATcolormap = b})
pointspriteMATmat :: Lens' MAT (Maybe (Tree MAT))
pointspriteMATmat = lens _pointspriteMATmat (\a b -> a {_pointspriteMATmat = b})
pointspriteMATcolormapextendw :: Lens' MAT (Maybe (Tree Int))
pointspriteMATcolormapextendw = lens _pointspriteMATcolormapextendw (\a b -> a {_pointspriteMATcolormapextendw = b})
pointspriteMATattenfar :: Lens' MAT (Maybe (Tree Float))
pointspriteMATattenfar = lens _pointspriteMATattenfar (\a b -> a {_pointspriteMATattenfar = b})
pointspriteMATdestblend :: Lens' MAT (Maybe (Tree Int))
pointspriteMATdestblend = lens _pointspriteMATdestblend (\a b -> a {_pointspriteMATdestblend = b})
pointspriteMATattensizenear :: Lens' MAT (Maybe (Tree Float))
pointspriteMATattensizenear = lens _pointspriteMATattensizenear (\a b -> a {_pointspriteMATattensizenear = b})
pointspriteMATpolygonoffsetunits :: Lens' MAT (Maybe (Tree Float))
pointspriteMATpolygonoffsetunits = lens _pointspriteMATpolygonoffsetunits (\a b -> a {_pointspriteMATpolygonoffsetunits = b})
pointspriteMATattenpscale :: Lens' MAT (Maybe (Tree Float))
pointspriteMATattenpscale = lens _pointspriteMATattenpscale (\a b -> a {_pointspriteMATattenpscale = b})
pointspriteMATdepthtest :: Lens' MAT (Maybe (Tree Bool))
pointspriteMATdepthtest = lens _pointspriteMATdepthtest (\a b -> a {_pointspriteMATdepthtest = b})
pointspriteMATcolormapfilter :: Lens' MAT (Maybe (Tree Int))
pointspriteMATcolormapfilter = lens _pointspriteMATcolormapfilter (\a b -> a {_pointspriteMATcolormapfilter = b})
pointspriteMATattennear :: Lens' MAT (Maybe (Tree Float))
pointspriteMATattennear = lens _pointspriteMATattennear (\a b -> a {_pointspriteMATattennear = b})
pointspriteMATalphathreshold :: Lens' MAT (Maybe (Tree Float))
pointspriteMATalphathreshold = lens _pointspriteMATalphathreshold (\a b -> a {_pointspriteMATalphathreshold = b})
pointspriteMATdepthfunc :: Lens' MAT (Maybe (Tree Int))
pointspriteMATdepthfunc = lens _pointspriteMATdepthfunc (\a b -> a {_pointspriteMATdepthfunc = b})
pointspriteMAToffsetright :: Lens' MAT (Maybe (Tree Float))
pointspriteMAToffsetright = lens _pointspriteMAToffsetright (\a b -> a {_pointspriteMAToffsetright = b})
pointspriteMATwirewidth :: Lens' MAT (Maybe (Tree Float))
pointspriteMATwirewidth = lens _pointspriteMATwirewidth (\a b -> a {_pointspriteMATwirewidth = b})
pointspriteMATsrcblend :: Lens' MAT (Maybe (Tree Int))
pointspriteMATsrcblend = lens _pointspriteMATsrcblend (\a b -> a {_pointspriteMATsrcblend = b})
pointspriteMATtargetsop :: Lens' MAT (Maybe (Tree SOP))
pointspriteMATtargetsop = lens _pointspriteMATtargetsop (\a b -> a {_pointspriteMATtargetsop = b})
pointspriteMATattensizefar :: Lens' MAT (Maybe (Tree Float))
pointspriteMATattensizefar = lens _pointspriteMATattensizefar (\a b -> a {_pointspriteMATattensizefar = b})
pointspriteMATalphatest :: Lens' MAT (Maybe (Tree Bool))
pointspriteMATalphatest = lens _pointspriteMATalphatest (\a b -> a {_pointspriteMATalphatest = b})
pointspriteMATsrcblenda :: Lens' MAT (Maybe (Tree Int))
pointspriteMATsrcblenda = lens _pointspriteMATsrcblenda (\a b -> a {_pointspriteMATsrcblenda = b})

outMATpcaptpath :: Lens' MAT (Maybe (Tree ByteString))
outMATpcaptpath = lens _outMATpcaptpath (\a b -> a {_outMATpcaptpath = b})
outMATwireframe :: Lens' MAT (Maybe (Tree Int))
outMATwireframe = lens _outMATwireframe (\a b -> a {_outMATwireframe = b})
outMATdestblenda :: Lens' MAT (Maybe (Tree Int))
outMATdestblenda = lens _outMATdestblenda (\a b -> a {_outMATdestblenda = b})
outMATmat :: Lens' MAT (Maybe (Tree MAT))
outMATmat = lens _outMATmat (\a b -> a {_outMATmat = b})
outMATdepthfunc :: Lens' MAT (Maybe (Tree Int))
outMATdepthfunc = lens _outMATdepthfunc (\a b -> a {_outMATdepthfunc = b})
outMATcullface :: Lens' MAT (Maybe (Tree Int))
outMATcullface = lens _outMATcullface (\a b -> a {_outMATcullface = b})
outMATskelrootpath :: Lens' MAT (Maybe (Tree ByteString))
outMATskelrootpath = lens _outMATskelrootpath (\a b -> a {_outMATskelrootpath = b})
outMATdestblend :: Lens' MAT (Maybe (Tree Int))
outMATdestblend = lens _outMATdestblend (\a b -> a {_outMATdestblend = b})
outMATlabel :: Lens' MAT (Maybe (Tree ByteString))
outMATlabel = lens _outMATlabel (\a b -> a {_outMATlabel = b})
outMATalphafunc :: Lens' MAT (Maybe (Tree Int))
outMATalphafunc = lens _outMATalphafunc (\a b -> a {_outMATalphafunc = b})
outMATdepthtest :: Lens' MAT (Maybe (Tree Bool))
outMATdepthtest = lens _outMATdepthtest (\a b -> a {_outMATdepthtest = b})
outMATpolygonoffsetunits :: Lens' MAT (Maybe (Tree Float))
outMATpolygonoffsetunits = lens _outMATpolygonoffsetunits (\a b -> a {_outMATpolygonoffsetunits = b})
outMATpolygonoffsetfactor :: Lens' MAT (Maybe (Tree Float))
outMATpolygonoffsetfactor = lens _outMATpolygonoffsetfactor (\a b -> a {_outMATpolygonoffsetfactor = b})
outMATpolygonoffset :: Lens' MAT (Maybe (Tree Bool))
outMATpolygonoffset = lens _outMATpolygonoffset (\a b -> a {_outMATpolygonoffset = b})
outMATseparatealphafunc :: Lens' MAT (Maybe (Tree Bool))
outMATseparatealphafunc = lens _outMATseparatealphafunc (\a b -> a {_outMATseparatealphafunc = b})
outMATdepthwriting :: Lens' MAT (Maybe (Tree Bool))
outMATdepthwriting = lens _outMATdepthwriting (\a b -> a {_outMATdepthwriting = b})
outMATalphathreshold :: Lens' MAT (Maybe (Tree Float))
outMATalphathreshold = lens _outMATalphathreshold (\a b -> a {_outMATalphathreshold = b})
outMATpcaptdata :: Lens' MAT (Maybe (Tree ByteString))
outMATpcaptdata = lens _outMATpcaptdata (\a b -> a {_outMATpcaptdata = b})
outMATdodeform :: Lens' MAT (Maybe (Tree Bool))
outMATdodeform = lens _outMATdodeform (\a b -> a {_outMATdodeform = b})
outMATdeformdata :: Lens' MAT (Maybe (Tree Int))
outMATdeformdata = lens _outMATdeformdata (\a b -> a {_outMATdeformdata = b})
outMATwirewidth :: Lens' MAT (Maybe (Tree Float))
outMATwirewidth = lens _outMATwirewidth (\a b -> a {_outMATwirewidth = b})
outMATtargetsop :: Lens' MAT (Maybe (Tree SOP))
outMATtargetsop = lens _outMATtargetsop (\a b -> a {_outMATtargetsop = b})
outMATsrcblend :: Lens' MAT (Maybe (Tree Int))
outMATsrcblend = lens _outMATsrcblend (\a b -> a {_outMATsrcblend = b})
outMATblending :: Lens' MAT (Maybe (Tree Bool))
outMATblending = lens _outMATblending (\a b -> a {_outMATblending = b})
outMATalphatest :: Lens' MAT (Maybe (Tree Bool))
outMATalphatest = lens _outMATalphatest (\a b -> a {_outMATalphatest = b})
outMATsrcblenda :: Lens' MAT (Maybe (Tree Int))
outMATsrcblenda = lens _outMATsrcblenda (\a b -> a {_outMATsrcblenda = b})

phongMATapplypointcolor :: Lens' MAT (Maybe (Tree Bool))
phongMATapplypointcolor = lens _phongMATapplypointcolor (\a b -> a {_phongMATapplypointcolor = b})
phongMATdarknessemitmapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATdarknessemitmapextendu = lens _phongMATdarknessemitmapextendu (\a b -> a {_phongMATdarknessemitmapextendu = b})
phongMATcolormapcoord :: Lens' MAT (Maybe (Tree Int))
phongMATcolormapcoord = lens _phongMATcolormapcoord (\a b -> a {_phongMATcolormapcoord = b})
phongMATbackfacelit :: Lens' MAT (Maybe (Tree Int))
phongMATbackfacelit = lens _phongMATbackfacelit (\a b -> a {_phongMATbackfacelit = b})
phongMATnormalmapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATnormalmapextendw = lens _phongMATnormalmapextendw (\a b -> a {_phongMATnormalmapextendw = b})
phongMATemitmapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATemitmapextendw = lens _phongMATemitmapextendw (\a b -> a {_phongMATemitmapextendw = b})
phongMATtexture1mapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATtexture1mapfilter = lens _phongMATtexture1mapfilter (\a b -> a {_phongMATtexture1mapfilter = b})
phongMATcolorbuffer7rgb :: Lens' MAT (Maybe (Tree ByteString))
phongMATcolorbuffer7rgb = lens _phongMATcolorbuffer7rgb (\a b -> a {_phongMATcolorbuffer7rgb = b})
phongMATdiffusemapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATdiffusemapanisotropy = lens _phongMATdiffusemapanisotropy (\a b -> a {_phongMATdiffusemapanisotropy = b})
phongMATalphafunc :: Lens' MAT (Maybe (Tree Int))
phongMATalphafunc = lens _phongMATalphafunc (\a b -> a {_phongMATalphafunc = b})
phongMATrolloff :: Lens' MAT (Maybe (Tree Float))
phongMATrolloff = lens _phongMATrolloff (\a b -> a {_phongMATrolloff = b})
phongMATalphamapcoord :: Lens' MAT (Maybe (Tree Int))
phongMATalphamapcoord = lens _phongMATalphamapcoord (\a b -> a {_phongMATalphamapcoord = b})
phongMATwritecameradepthtoalpha :: Lens' MAT (Maybe (Tree Bool))
phongMATwritecameradepthtoalpha = lens _phongMATwritecameradepthtoalpha (\a b -> a {_phongMATwritecameradepthtoalpha = b})
phongMATdarknessemit :: Lens' MAT (Maybe (Tree Bool))
phongMATdarknessemit = lens _phongMATdarknessemit (\a b -> a {_phongMATdarknessemit = b})
phongMATrim1mapcoordinterp :: Lens' MAT (Maybe (Tree Int))
phongMATrim1mapcoordinterp = lens _phongMATrim1mapcoordinterp (\a b -> a {_phongMATrim1mapcoordinterp = b})
phongMATdepthwriting :: Lens' MAT (Maybe (Tree Bool))
phongMATdepthwriting = lens _phongMATdepthwriting (\a b -> a {_phongMATdepthwriting = b})
phongMATnormalmapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATnormalmapanisotropy = lens _phongMATnormalmapanisotropy (\a b -> a {_phongMATnormalmapanisotropy = b})
phongMATdodeform :: Lens' MAT (Maybe (Tree Bool))
phongMATdodeform = lens _phongMATdodeform (\a b -> a {_phongMATdodeform = b})
phongMATspecmapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATspecmapanisotropy = lens _phongMATspecmapanisotropy (\a b -> a {_phongMATspecmapanisotropy = b})
phongMATdarknessemitmapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATdarknessemitmapfilter = lens _phongMATdarknessemitmapfilter (\a b -> a {_phongMATdarknessemitmapfilter = b})
phongMATtexture3coord :: Lens' MAT (Maybe (Tree Int))
phongMATtexture3coord = lens _phongMATtexture3coord (\a b -> a {_phongMATtexture3coord = b})
phongMATdeformdata :: Lens' MAT (Maybe (Tree Int))
phongMATdeformdata = lens _phongMATdeformdata (\a b -> a {_phongMATdeformdata = b})
phongMATemitmapcoord :: Lens' MAT (Maybe (Tree Int))
phongMATemitmapcoord = lens _phongMATemitmapcoord (\a b -> a {_phongMATemitmapcoord = b})
phongMATrim1mapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATrim1mapextendw = lens _phongMATrim1mapextendw (\a b -> a {_phongMATrim1mapextendw = b})
phongMATemitmapcoordinterp :: Lens' MAT (Maybe (Tree Int))
phongMATemitmapcoordinterp = lens _phongMATemitmapcoordinterp (\a b -> a {_phongMATemitmapcoordinterp = b})
phongMATbumpscale :: Lens' MAT (Maybe (Tree Float))
phongMATbumpscale = lens _phongMATbumpscale (\a b -> a {_phongMATbumpscale = b})
phongMATcolorbuffer5rgb :: Lens' MAT (Maybe (Tree ByteString))
phongMATcolorbuffer5rgb = lens _phongMATcolorbuffer5rgb (\a b -> a {_phongMATcolorbuffer5rgb = b})
phongMATdarknessemitmapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATdarknessemitmapextendv = lens _phongMATdarknessemitmapextendv (\a b -> a {_phongMATdarknessemitmapextendv = b})
phongMATtexture2mapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATtexture2mapfilter = lens _phongMATtexture2mapfilter (\a b -> a {_phongMATtexture2mapfilter = b})
phongMATdestblenda :: Lens' MAT (Maybe (Tree Int))
phongMATdestblenda = lens _phongMATdestblenda (\a b -> a {_phongMATdestblenda = b})
phongMATspecmapcoord :: Lens' MAT (Maybe (Tree Int))
phongMATspecmapcoord = lens _phongMATspecmapcoord (\a b -> a {_phongMATspecmapcoord = b})
phongMATtexture4coord :: Lens' MAT (Maybe (Tree Int))
phongMATtexture4coord = lens _phongMATtexture4coord (\a b -> a {_phongMATtexture4coord = b})
phongMATrim2enable :: Lens' MAT (Maybe (Tree Bool))
phongMATrim2enable = lens _phongMATrim2enable (\a b -> a {_phongMATrim2enable = b})
phongMATalphamultlight :: Lens' MAT (Maybe (Tree Bool))
phongMATalphamultlight = lens _phongMATalphamultlight (\a b -> a {_phongMATalphamultlight = b})
phongMATcolormapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATcolormapextendu = lens _phongMATcolormapextendu (\a b -> a {_phongMATcolormapextendu = b})
phongMATalphathreshold :: Lens' MAT (Maybe (Tree Float))
phongMATalphathreshold = lens _phongMATalphathreshold (\a b -> a {_phongMATalphathreshold = b})
phongMATalphamapcoordinterp :: Lens' MAT (Maybe (Tree Int))
phongMATalphamapcoordinterp = lens _phongMATalphamapcoordinterp (\a b -> a {_phongMATalphamapcoordinterp = b})
phongMATnormalmap :: Lens' MAT (Maybe (Tree TOP))
phongMATnormalmap = lens _phongMATnormalmap (\a b -> a {_phongMATnormalmap = b})
phongMATmultitexturing :: Lens' MAT (Maybe (Tree Bool))
phongMATmultitexturing = lens _phongMATmultitexturing (\a b -> a {_phongMATmultitexturing = b})
phongMATcolormapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATcolormapanisotropy = lens _phongMATcolormapanisotropy (\a b -> a {_phongMATcolormapanisotropy = b})
phongMATtexture4 :: Lens' MAT (Maybe (Tree TOP))
phongMATtexture4 = lens _phongMATtexture4 (\a b -> a {_phongMATtexture4 = b})
phongMATdepthtest :: Lens' MAT (Maybe (Tree Bool))
phongMATdepthtest = lens _phongMATdepthtest (\a b -> a {_phongMATdepthtest = b})
phongMATemit :: Lens' MAT (Vec3)
phongMATemit = lens _phongMATemit (\a b -> a {_phongMATemit = b})
phongMATdepthfunc :: Lens' MAT (Maybe (Tree Int))
phongMATdepthfunc = lens _phongMATdepthfunc (\a b -> a {_phongMATdepthfunc = b})
phongMATemitmapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATemitmapextendu = lens _phongMATemitmapextendu (\a b -> a {_phongMATemitmapextendu = b})
phongMATtexture1mapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATtexture1mapextendw = lens _phongMATtexture1mapextendw (\a b -> a {_phongMATtexture1mapextendw = b})
phongMATalphafront :: Lens' MAT (Maybe (Tree Float))
phongMATalphafront = lens _phongMATalphafront (\a b -> a {_phongMATalphafront = b})
phongMATrim2strength :: Lens' MAT (Maybe (Tree Float))
phongMATrim2strength = lens _phongMATrim2strength (\a b -> a {_phongMATrim2strength = b})
phongMATtexture3mapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATtexture3mapextendv = lens _phongMATtexture3mapextendv (\a b -> a {_phongMATtexture3mapextendv = b})
phongMATtexture1coord :: Lens' MAT (Maybe (Tree Int))
phongMATtexture1coord = lens _phongMATtexture1coord (\a b -> a {_phongMATtexture1coord = b})
phongMATtexture4mapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATtexture4mapextendv = lens _phongMATtexture4mapextendv (\a b -> a {_phongMATtexture4mapextendv = b})
phongMATspecmapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATspecmapfilter = lens _phongMATspecmapfilter (\a b -> a {_phongMATspecmapfilter = b})
phongMATnormalmapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATnormalmapextendv = lens _phongMATnormalmapextendv (\a b -> a {_phongMATnormalmapextendv = b})
phongMATnormalmapcoordinterp :: Lens' MAT (Maybe (Tree Int))
phongMATnormalmapcoordinterp = lens _phongMATnormalmapcoordinterp (\a b -> a {_phongMATnormalmapcoordinterp = b})
phongMATskelrootpath :: Lens' MAT (Maybe (Tree ByteString))
phongMATskelrootpath = lens _phongMATskelrootpath (\a b -> a {_phongMATskelrootpath = b})
phongMATtexture4mapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATtexture4mapextendu = lens _phongMATtexture4mapextendu (\a b -> a {_phongMATtexture4mapextendu = b})
phongMATrim1mapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATrim1mapanisotropy = lens _phongMATrim1mapanisotropy (\a b -> a {_phongMATrim1mapanisotropy = b})
phongMATenvmapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATenvmapanisotropy = lens _phongMATenvmapanisotropy (\a b -> a {_phongMATenvmapanisotropy = b})
phongMATdiffusemapcoordinterp :: Lens' MAT (Maybe (Tree Int))
phongMATdiffusemapcoordinterp = lens _phongMATdiffusemapcoordinterp (\a b -> a {_phongMATdiffusemapcoordinterp = b})
phongMATpolygonoffset :: Lens' MAT (Maybe (Tree Bool))
phongMATpolygonoffset = lens _phongMATpolygonoffset (\a b -> a {_phongMATpolygonoffset = b})
phongMATseparatealphafunc :: Lens' MAT (Maybe (Tree Bool))
phongMATseparatealphafunc = lens _phongMATseparatealphafunc (\a b -> a {_phongMATseparatealphafunc = b})
phongMATpcaptdata :: Lens' MAT (Maybe (Tree ByteString))
phongMATpcaptdata = lens _phongMATpcaptdata (\a b -> a {_phongMATpcaptdata = b})
phongMATdarknessemitmap :: Lens' MAT (Maybe (Tree TOP))
phongMATdarknessemitmap = lens _phongMATdarknessemitmap (\a b -> a {_phongMATdarknessemitmap = b})
phongMATalphaside :: Lens' MAT (Maybe (Tree Float))
phongMATalphaside = lens _phongMATalphaside (\a b -> a {_phongMATalphaside = b})
phongMATtexture3 :: Lens' MAT (Maybe (Tree TOP))
phongMATtexture3 = lens _phongMATtexture3 (\a b -> a {_phongMATtexture3 = b})
phongMATenvmapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATenvmapfilter = lens _phongMATenvmapfilter (\a b -> a {_phongMATenvmapfilter = b})
phongMATshadowstrength :: Lens' MAT (Maybe (Tree Float))
phongMATshadowstrength = lens _phongMATshadowstrength (\a b -> a {_phongMATshadowstrength = b})
phongMATspecmapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATspecmapextendu = lens _phongMATspecmapextendu (\a b -> a {_phongMATspecmapextendu = b})
phongMATenvmapcolor :: Lens' MAT (Vec3)
phongMATenvmapcolor = lens _phongMATenvmapcolor (\a b -> a {_phongMATenvmapcolor = b})
phongMATpcaptpath :: Lens' MAT (Maybe (Tree ByteString))
phongMATpcaptpath = lens _phongMATpcaptpath (\a b -> a {_phongMATpcaptpath = b})
phongMATenvmapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATenvmapextendw = lens _phongMATenvmapextendw (\a b -> a {_phongMATenvmapextendw = b})
phongMATdarknessemitmapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATdarknessemitmapextendw = lens _phongMATdarknessemitmapextendw (\a b -> a {_phongMATdarknessemitmapextendw = b})
phongMATrim1width :: Lens' MAT (Maybe (Tree Float))
phongMATrim1width = lens _phongMATrim1width (\a b -> a {_phongMATrim1width = b})
phongMATenvmapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATenvmapextendu = lens _phongMATenvmapextendu (\a b -> a {_phongMATenvmapextendu = b})
phongMATrim1mapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATrim1mapfilter = lens _phongMATrim1mapfilter (\a b -> a {_phongMATrim1mapfilter = b})
phongMATtexture1coordinterp :: Lens' MAT (Maybe (Tree Int))
phongMATtexture1coordinterp = lens _phongMATtexture1coordinterp (\a b -> a {_phongMATtexture1coordinterp = b})
phongMATspec2 :: Lens' MAT (Vec3)
phongMATspec2 = lens _phongMATspec2 (\a b -> a {_phongMATspec2 = b})
phongMATambdiff :: Lens' MAT (Maybe (Tree Bool))
phongMATambdiff = lens _phongMATambdiff (\a b -> a {_phongMATambdiff = b})
phongMATinstancetexture :: Lens' MAT (Maybe (Tree ByteString))
phongMATinstancetexture = lens _phongMATinstancetexture (\a b -> a {_phongMATinstancetexture = b})
phongMATenvmaprotate :: Lens' MAT (Vec3)
phongMATenvmaprotate = lens _phongMATenvmaprotate (\a b -> a {_phongMATenvmaprotate = b})
phongMATtexture4coordnterp :: Lens' MAT (Maybe (Tree Int))
phongMATtexture4coordnterp = lens _phongMATtexture4coordnterp (\a b -> a {_phongMATtexture4coordnterp = b})
phongMATalphatest :: Lens' MAT (Maybe (Tree Bool))
phongMATalphatest = lens _phongMATalphatest (\a b -> a {_phongMATalphatest = b})
phongMATtexture2mapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATtexture2mapanisotropy = lens _phongMATtexture2mapanisotropy (\a b -> a {_phongMATtexture2mapanisotropy = b})
phongMATcolormapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATcolormapfilter = lens _phongMATcolormapfilter (\a b -> a {_phongMATcolormapfilter = b})
phongMATfrontfacelit :: Lens' MAT (Maybe (Tree Int))
phongMATfrontfacelit = lens _phongMATfrontfacelit (\a b -> a {_phongMATfrontfacelit = b})
phongMATdestblend :: Lens' MAT (Maybe (Tree Int))
phongMATdestblend = lens _phongMATdestblend (\a b -> a {_phongMATdestblend = b})
phongMATrim1mapcoord :: Lens' MAT (Maybe (Tree Int))
phongMATrim1mapcoord = lens _phongMATrim1mapcoord (\a b -> a {_phongMATrim1mapcoord = b})
phongMATrim2mapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATrim2mapanisotropy = lens _phongMATrim2mapanisotropy (\a b -> a {_phongMATrim2mapanisotropy = b})
phongMATtexture2mapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATtexture2mapextendw = lens _phongMATtexture2mapextendw (\a b -> a {_phongMATtexture2mapextendw = b})
phongMATrim1color :: Lens' MAT (Vec3)
phongMATrim1color = lens _phongMATrim1color (\a b -> a {_phongMATrim1color = b})
phongMATtexture2 :: Lens' MAT (Maybe (Tree TOP))
phongMATtexture2 = lens _phongMATtexture2 (\a b -> a {_phongMATtexture2 = b})
phongMATalphamapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATalphamapextendw = lens _phongMATalphamapextendw (\a b -> a {_phongMATalphamapextendw = b})
phongMATamb :: Lens' MAT (Vec3)
phongMATamb = lens _phongMATamb (\a b -> a {_phongMATamb = b})
phongMATcolorbuffer1rgb :: Lens' MAT (Maybe (Tree ByteString))
phongMATcolorbuffer1rgb = lens _phongMATcolorbuffer1rgb (\a b -> a {_phongMATcolorbuffer1rgb = b})
phongMATrim1strengthramp :: Lens' MAT (Maybe (Tree TOP))
phongMATrim1strengthramp = lens _phongMATrim1strengthramp (\a b -> a {_phongMATrim1strengthramp = b})
phongMATrim2mapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATrim2mapextendv = lens _phongMATrim2mapextendv (\a b -> a {_phongMATrim2mapextendv = b})
phongMATtexture2coordinterp :: Lens' MAT (Maybe (Tree Int))
phongMATtexture2coordinterp = lens _phongMATtexture2coordinterp (\a b -> a {_phongMATtexture2coordinterp = b})
phongMATcolorbuffer3rgb :: Lens' MAT (Maybe (Tree ByteString))
phongMATcolorbuffer3rgb = lens _phongMATcolorbuffer3rgb (\a b -> a {_phongMATcolorbuffer3rgb = b})
phongMATdiffusemap :: Lens' MAT (Maybe (Tree TOP))
phongMATdiffusemap = lens _phongMATdiffusemap (\a b -> a {_phongMATdiffusemap = b})
phongMATenvmaptype2d :: Lens' MAT (Maybe (Tree Int))
phongMATenvmaptype2d = lens _phongMATenvmaptype2d (\a b -> a {_phongMATenvmaptype2d = b})
phongMATrim2center :: Lens' MAT (Maybe (Tree Float))
phongMATrim2center = lens _phongMATrim2center (\a b -> a {_phongMATrim2center = b})
phongMATcullface :: Lens' MAT (Maybe (Tree Int))
phongMATcullface = lens _phongMATcullface (\a b -> a {_phongMATcullface = b})
phongMAToutputshader :: Lens' MAT (Maybe (Tree Bool))
phongMAToutputshader = lens _phongMAToutputshader (\a b -> a {_phongMAToutputshader = b})
phongMATtexture1 :: Lens' MAT (Maybe (Tree TOP))
phongMATtexture1 = lens _phongMATtexture1 (\a b -> a {_phongMATtexture1 = b})
phongMATcolormapcoordinterp :: Lens' MAT (Maybe (Tree Int))
phongMATcolormapcoordinterp = lens _phongMATcolormapcoordinterp (\a b -> a {_phongMATcolormapcoordinterp = b})
phongMATpostmultalpha :: Lens' MAT (Maybe (Tree Bool))
phongMATpostmultalpha = lens _phongMATpostmultalpha (\a b -> a {_phongMATpostmultalpha = b})
phongMATnormalmapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATnormalmapfilter = lens _phongMATnormalmapfilter (\a b -> a {_phongMATnormalmapfilter = b})
phongMATdiffusemapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATdiffusemapextendw = lens _phongMATdiffusemapextendw (\a b -> a {_phongMATdiffusemapextendw = b})
phongMATdiffusemapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATdiffusemapextendu = lens _phongMATdiffusemapextendu (\a b -> a {_phongMATdiffusemapextendu = b})
phongMATrim1strength :: Lens' MAT (Maybe (Tree Float))
phongMATrim1strength = lens _phongMATrim1strength (\a b -> a {_phongMATrim1strength = b})
phongMATcolormapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATcolormapextendv = lens _phongMATcolormapextendv (\a b -> a {_phongMATcolormapextendv = b})
phongMATspecmapcoordinterp :: Lens' MAT (Maybe (Tree Int))
phongMATspecmapcoordinterp = lens _phongMATspecmapcoordinterp (\a b -> a {_phongMATspecmapcoordinterp = b})
phongMATrim2mapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATrim2mapfilter = lens _phongMATrim2mapfilter (\a b -> a {_phongMATrim2mapfilter = b})
phongMATrim1enable :: Lens' MAT (Maybe (Tree Bool))
phongMATrim1enable = lens _phongMATrim1enable (\a b -> a {_phongMATrim1enable = b})
phongMATdarknessemitmapcoord :: Lens' MAT (Maybe (Tree Int))
phongMATdarknessemitmapcoord = lens _phongMATdarknessemitmapcoord (\a b -> a {_phongMATdarknessemitmapcoord = b})
phongMATrim2map :: Lens' MAT (Maybe (Tree TOP))
phongMATrim2map = lens _phongMATrim2map (\a b -> a {_phongMATrim2map = b})
phongMATspecmap :: Lens' MAT (Maybe (Tree TOP))
phongMATspecmap = lens _phongMATspecmap (\a b -> a {_phongMATspecmap = b})
phongMATnormalmapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATnormalmapextendu = lens _phongMATnormalmapextendu (\a b -> a {_phongMATnormalmapextendu = b})
phongMATcolormap :: Lens' MAT (Maybe (Tree TOP))
phongMATcolormap = lens _phongMATcolormap (\a b -> a {_phongMATcolormap = b})
phongMATtexture3mapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATtexture3mapextendu = lens _phongMATtexture3mapextendu (\a b -> a {_phongMATtexture3mapextendu = b})
phongMATmat :: Lens' MAT (Maybe (Tree MAT))
phongMATmat = lens _phongMATmat (\a b -> a {_phongMATmat = b})
phongMATrim1mapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATrim1mapextendu = lens _phongMATrim1mapextendu (\a b -> a {_phongMATrim1mapextendu = b})
phongMATrim2mapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATrim2mapextendu = lens _phongMATrim2mapextendu (\a b -> a {_phongMATrim2mapextendu = b})
phongMATrim2width :: Lens' MAT (Maybe (Tree Float))
phongMATrim2width = lens _phongMATrim2width (\a b -> a {_phongMATrim2width = b})
phongMATemitmapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATemitmapanisotropy = lens _phongMATemitmapanisotropy (\a b -> a {_phongMATemitmapanisotropy = b})
phongMATdiffusemapcoord :: Lens' MAT (Maybe (Tree Int))
phongMATdiffusemapcoord = lens _phongMATdiffusemapcoord (\a b -> a {_phongMATdiffusemapcoord = b})
phongMATdiff :: Lens' MAT (Vec3)
phongMATdiff = lens _phongMATdiff (\a b -> a {_phongMATdiff = b})
phongMATdiffusemapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATdiffusemapextendv = lens _phongMATdiffusemapextendv (\a b -> a {_phongMATdiffusemapextendv = b})
phongMATtexture3coordinterp :: Lens' MAT (Maybe (Tree Int))
phongMATtexture3coordinterp = lens _phongMATtexture3coordinterp (\a b -> a {_phongMATtexture3coordinterp = b})
phongMATemitmap :: Lens' MAT (Maybe (Tree TOP))
phongMATemitmap = lens _phongMATemitmap (\a b -> a {_phongMATemitmap = b})
phongMATtexture3mapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATtexture3mapanisotropy = lens _phongMATtexture3mapanisotropy (\a b -> a {_phongMATtexture3mapanisotropy = b})
phongMATpolygonoffsetunits :: Lens' MAT (Maybe (Tree Float))
phongMATpolygonoffsetunits = lens _phongMATpolygonoffsetunits (\a b -> a {_phongMATpolygonoffsetunits = b})
phongMATcolorbuffer2rgb :: Lens' MAT (Maybe (Tree ByteString))
phongMATcolorbuffer2rgb = lens _phongMATcolorbuffer2rgb (\a b -> a {_phongMATcolorbuffer2rgb = b})
phongMATmultitexexpr :: Lens' MAT (Maybe (Tree ByteString))
phongMATmultitexexpr = lens _phongMATmultitexexpr (\a b -> a {_phongMATmultitexexpr = b})
phongMATtexture2coord :: Lens' MAT (Maybe (Tree Int))
phongMATtexture2coord = lens _phongMATtexture2coord (\a b -> a {_phongMATtexture2coord = b})
phongMATcolorbuffer4rgb :: Lens' MAT (Maybe (Tree ByteString))
phongMATcolorbuffer4rgb = lens _phongMATcolorbuffer4rgb (\a b -> a {_phongMATcolorbuffer4rgb = b})
phongMATwirewidth :: Lens' MAT (Maybe (Tree Float))
phongMATwirewidth = lens _phongMATwirewidth (\a b -> a {_phongMATwirewidth = b})
phongMATrim2strengthramp :: Lens' MAT (Maybe (Tree TOP))
phongMATrim2strengthramp = lens _phongMATrim2strengthramp (\a b -> a {_phongMATrim2strengthramp = b})
phongMATblending :: Lens' MAT (Maybe (Tree Bool))
phongMATblending = lens _phongMATblending (\a b -> a {_phongMATblending = b})
phongMATenvmap :: Lens' MAT (Maybe (Tree TOP))
phongMATenvmap = lens _phongMATenvmap (\a b -> a {_phongMATenvmap = b})
phongMATalphamapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATalphamapfilter = lens _phongMATalphamapfilter (\a b -> a {_phongMATalphamapfilter = b})
phongMATtexture3mapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATtexture3mapfilter = lens _phongMATtexture3mapfilter (\a b -> a {_phongMATtexture3mapfilter = b})
phongMATtexture4mapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATtexture4mapfilter = lens _phongMATtexture4mapfilter (\a b -> a {_phongMATtexture4mapfilter = b})
phongMATtexture1mapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATtexture1mapextendu = lens _phongMATtexture1mapextendu (\a b -> a {_phongMATtexture1mapextendu = b})
phongMATenvmapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATenvmapextendv = lens _phongMATenvmapextendv (\a b -> a {_phongMATenvmapextendv = b})
phongMATtexture1mapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATtexture1mapanisotropy = lens _phongMATtexture1mapanisotropy (\a b -> a {_phongMATtexture1mapanisotropy = b})
phongMATdiffusemapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATdiffusemapfilter = lens _phongMATdiffusemapfilter (\a b -> a {_phongMATdiffusemapfilter = b})
phongMATrim2mapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATrim2mapextendw = lens _phongMATrim2mapextendw (\a b -> a {_phongMATrim2mapextendw = b})
phongMATshadowcolor :: Lens' MAT (Vec3)
phongMATshadowcolor = lens _phongMATshadowcolor (\a b -> a {_phongMATshadowcolor = b})
phongMATemitmapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATemitmapextendv = lens _phongMATemitmapextendv (\a b -> a {_phongMATemitmapextendv = b})
phongMATtexture4mapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATtexture4mapanisotropy = lens _phongMATtexture4mapanisotropy (\a b -> a {_phongMATtexture4mapanisotropy = b})
phongMATtexture2mapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATtexture2mapextendv = lens _phongMATtexture2mapextendv (\a b -> a {_phongMATtexture2mapextendv = b})
phongMATpolygonoffsetfactor :: Lens' MAT (Maybe (Tree Float))
phongMATpolygonoffsetfactor = lens _phongMATpolygonoffsetfactor (\a b -> a {_phongMATpolygonoffsetfactor = b})
phongMATrim2color :: Lens' MAT (Vec3)
phongMATrim2color = lens _phongMATrim2color (\a b -> a {_phongMATrim2color = b})
phongMATtexture1mapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATtexture1mapextendv = lens _phongMATtexture1mapextendv (\a b -> a {_phongMATtexture1mapextendv = b})
phongMATparallaxmapping :: Lens' MAT (Maybe (Tree Bool))
phongMATparallaxmapping = lens _phongMATparallaxmapping (\a b -> a {_phongMATparallaxmapping = b})
phongMATcolorbuffer6rgb :: Lens' MAT (Maybe (Tree ByteString))
phongMATcolorbuffer6rgb = lens _phongMATcolorbuffer6rgb (\a b -> a {_phongMATcolorbuffer6rgb = b})
phongMATshininess :: Lens' MAT (Maybe (Tree Float))
phongMATshininess = lens _phongMATshininess (\a b -> a {_phongMATshininess = b})
phongMATcolormapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATcolormapextendw = lens _phongMATcolormapextendw (\a b -> a {_phongMATcolormapextendw = b})
phongMATdarknessemitmapcoordinterp :: Lens' MAT (Maybe (Tree Int))
phongMATdarknessemitmapcoordinterp = lens _phongMATdarknessemitmapcoordinterp (\a b -> a {_phongMATdarknessemitmapcoordinterp = b})
phongMATrim1mapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATrim1mapextendv = lens _phongMATrim1mapextendv (\a b -> a {_phongMATrim1mapextendv = b})
phongMATrim1center :: Lens' MAT (Maybe (Tree Float))
phongMATrim1center = lens _phongMATrim1center (\a b -> a {_phongMATrim1center = b})
phongMATtexture2mapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATtexture2mapextendu = lens _phongMATtexture2mapextendu (\a b -> a {_phongMATtexture2mapextendu = b})
phongMATwireframe :: Lens' MAT (Maybe (Tree Int))
phongMATwireframe = lens _phongMATwireframe (\a b -> a {_phongMATwireframe = b})
phongMATalphamode :: Lens' MAT (Maybe (Tree Bool))
phongMATalphamode = lens _phongMATalphamode (\a b -> a {_phongMATalphamode = b})
phongMATrim1map :: Lens' MAT (Maybe (Tree TOP))
phongMATrim1map = lens _phongMATrim1map (\a b -> a {_phongMATrim1map = b})
phongMATconstant :: Lens' MAT (Vec3)
phongMATconstant = lens _phongMATconstant (\a b -> a {_phongMATconstant = b})
phongMATdarknessemitcolor :: Lens' MAT (Vec3)
phongMATdarknessemitcolor = lens _phongMATdarknessemitcolor (\a b -> a {_phongMATdarknessemitcolor = b})
phongMATtargetsop :: Lens' MAT (Maybe (Tree SOP))
phongMATtargetsop = lens _phongMATtargetsop (\a b -> a {_phongMATtargetsop = b})
phongMATshininess2 :: Lens' MAT (Maybe (Tree Float))
phongMATshininess2 = lens _phongMATshininess2 (\a b -> a {_phongMATshininess2 = b})
phongMATalphamapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATalphamapanisotropy = lens _phongMATalphamapanisotropy (\a b -> a {_phongMATalphamapanisotropy = b})
phongMATnormalmapcoord :: Lens' MAT (Maybe (Tree Int))
phongMATnormalmapcoord = lens _phongMATnormalmapcoord (\a b -> a {_phongMATnormalmapcoord = b})
phongMATtexture4mapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATtexture4mapextendw = lens _phongMATtexture4mapextendw (\a b -> a {_phongMATtexture4mapextendw = b})
phongMATdarknessemitmapanisotropy :: Lens' MAT (Maybe (Tree Int))
phongMATdarknessemitmapanisotropy = lens _phongMATdarknessemitmapanisotropy (\a b -> a {_phongMATdarknessemitmapanisotropy = b})
phongMATspecmapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATspecmapextendw = lens _phongMATspecmapextendw (\a b -> a {_phongMATspecmapextendw = b})
phongMATalphamapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATalphamapextendv = lens _phongMATalphamapextendv (\a b -> a {_phongMATalphamapextendv = b})
phongMATtexture3mapextendw :: Lens' MAT (Maybe (Tree Int))
phongMATtexture3mapextendw = lens _phongMATtexture3mapextendw (\a b -> a {_phongMATtexture3mapextendw = b})
phongMATspec :: Lens' MAT (Vec3)
phongMATspec = lens _phongMATspec (\a b -> a {_phongMATspec = b})
phongMATrim2mapcoord :: Lens' MAT (Maybe (Tree Int))
phongMATrim2mapcoord = lens _phongMATrim2mapcoord (\a b -> a {_phongMATrim2mapcoord = b})
phongMATemitmapfilter :: Lens' MAT (Maybe (Tree Int))
phongMATemitmapfilter = lens _phongMATemitmapfilter (\a b -> a {_phongMATemitmapfilter = b})
phongMATalphamapextendu :: Lens' MAT (Maybe (Tree Int))
phongMATalphamapextendu = lens _phongMATalphamapextendu (\a b -> a {_phongMATalphamapextendu = b})
phongMATrim2mapcoordinterp :: Lens' MAT (Maybe (Tree Int))
phongMATrim2mapcoordinterp = lens _phongMATrim2mapcoordinterp (\a b -> a {_phongMATrim2mapcoordinterp = b})
phongMATsrcblend :: Lens' MAT (Maybe (Tree Int))
phongMATsrcblend = lens _phongMATsrcblend (\a b -> a {_phongMATsrcblend = b})
phongMATalphamap :: Lens' MAT (Maybe (Tree TOP))
phongMATalphamap = lens _phongMATalphamap (\a b -> a {_phongMATalphamap = b})
phongMATparallaxclamp :: Lens' MAT (Maybe (Tree Float))
phongMATparallaxclamp = lens _phongMATparallaxclamp (\a b -> a {_phongMATparallaxclamp = b})
phongMATsrcblenda :: Lens' MAT (Maybe (Tree Int))
phongMATsrcblenda = lens _phongMATsrcblenda (\a b -> a {_phongMATsrcblenda = b})
phongMATspecmapextendv :: Lens' MAT (Maybe (Tree Int))
phongMATspecmapextendv = lens _phongMATspecmapextendv (\a b -> a {_phongMATspecmapextendv = b})

switchMATpcaptpath :: Lens' MAT (Maybe (Tree ByteString))
switchMATpcaptpath = lens _switchMATpcaptpath (\a b -> a {_switchMATpcaptpath = b})
switchMATwireframe :: Lens' MAT (Maybe (Tree Int))
switchMATwireframe = lens _switchMATwireframe (\a b -> a {_switchMATwireframe = b})
switchMATdestblenda :: Lens' MAT (Maybe (Tree Int))
switchMATdestblenda = lens _switchMATdestblenda (\a b -> a {_switchMATdestblenda = b})
switchMATmat :: Lens' MAT (Maybe (Tree MAT))
switchMATmat = lens _switchMATmat (\a b -> a {_switchMATmat = b})
switchMATdepthfunc :: Lens' MAT (Maybe (Tree Int))
switchMATdepthfunc = lens _switchMATdepthfunc (\a b -> a {_switchMATdepthfunc = b})
switchMATcullface :: Lens' MAT (Maybe (Tree Int))
switchMATcullface = lens _switchMATcullface (\a b -> a {_switchMATcullface = b})
switchMATskelrootpath :: Lens' MAT (Maybe (Tree ByteString))
switchMATskelrootpath = lens _switchMATskelrootpath (\a b -> a {_switchMATskelrootpath = b})
switchMATalphathreshold :: Lens' MAT (Maybe (Tree Float))
switchMATalphathreshold = lens _switchMATalphathreshold (\a b -> a {_switchMATalphathreshold = b})
switchMATalphafunc :: Lens' MAT (Maybe (Tree Int))
switchMATalphafunc = lens _switchMATalphafunc (\a b -> a {_switchMATalphafunc = b})
switchMATdepthtest :: Lens' MAT (Maybe (Tree Bool))
switchMATdepthtest = lens _switchMATdepthtest (\a b -> a {_switchMATdepthtest = b})
switchMATpolygonoffsetunits :: Lens' MAT (Maybe (Tree Float))
switchMATpolygonoffsetunits = lens _switchMATpolygonoffsetunits (\a b -> a {_switchMATpolygonoffsetunits = b})
switchMATindex :: Lens' MAT (Maybe (Tree Int))
switchMATindex = lens _switchMATindex (\a b -> a {_switchMATindex = b})
switchMATpolygonoffsetfactor :: Lens' MAT (Maybe (Tree Float))
switchMATpolygonoffsetfactor = lens _switchMATpolygonoffsetfactor (\a b -> a {_switchMATpolygonoffsetfactor = b})
switchMATpolygonoffset :: Lens' MAT (Maybe (Tree Bool))
switchMATpolygonoffset = lens _switchMATpolygonoffset (\a b -> a {_switchMATpolygonoffset = b})
switchMATseparatealphafunc :: Lens' MAT (Maybe (Tree Bool))
switchMATseparatealphafunc = lens _switchMATseparatealphafunc (\a b -> a {_switchMATseparatealphafunc = b})
switchMATdepthwriting :: Lens' MAT (Maybe (Tree Bool))
switchMATdepthwriting = lens _switchMATdepthwriting (\a b -> a {_switchMATdepthwriting = b})
switchMATdestblend :: Lens' MAT (Maybe (Tree Int))
switchMATdestblend = lens _switchMATdestblend (\a b -> a {_switchMATdestblend = b})
switchMATpcaptdata :: Lens' MAT (Maybe (Tree ByteString))
switchMATpcaptdata = lens _switchMATpcaptdata (\a b -> a {_switchMATpcaptdata = b})
switchMATdodeform :: Lens' MAT (Maybe (Tree Bool))
switchMATdodeform = lens _switchMATdodeform (\a b -> a {_switchMATdodeform = b})
switchMATdeformdata :: Lens' MAT (Maybe (Tree Int))
switchMATdeformdata = lens _switchMATdeformdata (\a b -> a {_switchMATdeformdata = b})
switchMATwirewidth :: Lens' MAT (Maybe (Tree Float))
switchMATwirewidth = lens _switchMATwirewidth (\a b -> a {_switchMATwirewidth = b})
switchMATtargetsop :: Lens' MAT (Maybe (Tree SOP))
switchMATtargetsop = lens _switchMATtargetsop (\a b -> a {_switchMATtargetsop = b})
switchMATsrcblend :: Lens' MAT (Maybe (Tree Int))
switchMATsrcblend = lens _switchMATsrcblend (\a b -> a {_switchMATsrcblend = b})
switchMATblending :: Lens' MAT (Maybe (Tree Bool))
switchMATblending = lens _switchMATblending (\a b -> a {_switchMATblending = b})
switchMATalphatest :: Lens' MAT (Maybe (Tree Bool))
switchMATalphatest = lens _switchMATalphatest (\a b -> a {_switchMATalphatest = b})
switchMATsrcblenda :: Lens' MAT (Maybe (Tree Int))
switchMATsrcblenda = lens _switchMATsrcblenda (\a b -> a {_switchMATsrcblenda = b})

depthMATpcaptpath :: Lens' MAT (Maybe (Tree ByteString))
depthMATpcaptpath = lens _depthMATpcaptpath (\a b -> a {_depthMATpcaptpath = b})
depthMATwireframe :: Lens' MAT (Maybe (Tree Int))
depthMATwireframe = lens _depthMATwireframe (\a b -> a {_depthMATwireframe = b})
depthMATdestblenda :: Lens' MAT (Maybe (Tree Int))
depthMATdestblenda = lens _depthMATdestblenda (\a b -> a {_depthMATdestblenda = b})
depthMATmat :: Lens' MAT (Maybe (Tree MAT))
depthMATmat = lens _depthMATmat (\a b -> a {_depthMATmat = b})
depthMATdepthfunc :: Lens' MAT (Maybe (Tree Int))
depthMATdepthfunc = lens _depthMATdepthfunc (\a b -> a {_depthMATdepthfunc = b})
depthMATcullface :: Lens' MAT (Maybe (Tree Int))
depthMATcullface = lens _depthMATcullface (\a b -> a {_depthMATcullface = b})
depthMATskelrootpath :: Lens' MAT (Maybe (Tree ByteString))
depthMATskelrootpath = lens _depthMATskelrootpath (\a b -> a {_depthMATskelrootpath = b})
depthMATdestblend :: Lens' MAT (Maybe (Tree Int))
depthMATdestblend = lens _depthMATdestblend (\a b -> a {_depthMATdestblend = b})
depthMATalphafunc :: Lens' MAT (Maybe (Tree Int))
depthMATalphafunc = lens _depthMATalphafunc (\a b -> a {_depthMATalphafunc = b})
depthMATdepthtest :: Lens' MAT (Maybe (Tree Bool))
depthMATdepthtest = lens _depthMATdepthtest (\a b -> a {_depthMATdepthtest = b})
depthMATpolygonoffsetunits :: Lens' MAT (Maybe (Tree Float))
depthMATpolygonoffsetunits = lens _depthMATpolygonoffsetunits (\a b -> a {_depthMATpolygonoffsetunits = b})
depthMATpolygonoffsetfactor :: Lens' MAT (Maybe (Tree Float))
depthMATpolygonoffsetfactor = lens _depthMATpolygonoffsetfactor (\a b -> a {_depthMATpolygonoffsetfactor = b})
depthMATpolygonoffset :: Lens' MAT (Maybe (Tree Bool))
depthMATpolygonoffset = lens _depthMATpolygonoffset (\a b -> a {_depthMATpolygonoffset = b})
depthMATseparatealphafunc :: Lens' MAT (Maybe (Tree Bool))
depthMATseparatealphafunc = lens _depthMATseparatealphafunc (\a b -> a {_depthMATseparatealphafunc = b})
depthMATdepthwriting :: Lens' MAT (Maybe (Tree Bool))
depthMATdepthwriting = lens _depthMATdepthwriting (\a b -> a {_depthMATdepthwriting = b})
depthMATalphathreshold :: Lens' MAT (Maybe (Tree Float))
depthMATalphathreshold = lens _depthMATalphathreshold (\a b -> a {_depthMATalphathreshold = b})
depthMATpcaptdata :: Lens' MAT (Maybe (Tree ByteString))
depthMATpcaptdata = lens _depthMATpcaptdata (\a b -> a {_depthMATpcaptdata = b})
depthMATdodeform :: Lens' MAT (Maybe (Tree Bool))
depthMATdodeform = lens _depthMATdodeform (\a b -> a {_depthMATdodeform = b})
depthMATdeformdata :: Lens' MAT (Maybe (Tree Int))
depthMATdeformdata = lens _depthMATdeformdata (\a b -> a {_depthMATdeformdata = b})
depthMATwirewidth :: Lens' MAT (Maybe (Tree Float))
depthMATwirewidth = lens _depthMATwirewidth (\a b -> a {_depthMATwirewidth = b})
depthMATtargetsop :: Lens' MAT (Maybe (Tree SOP))
depthMATtargetsop = lens _depthMATtargetsop (\a b -> a {_depthMATtargetsop = b})
depthMATsrcblend :: Lens' MAT (Maybe (Tree Int))
depthMATsrcblend = lens _depthMATsrcblend (\a b -> a {_depthMATsrcblend = b})
depthMATblending :: Lens' MAT (Maybe (Tree Bool))
depthMATblending = lens _depthMATblending (\a b -> a {_depthMATblending = b})
depthMATalphatest :: Lens' MAT (Maybe (Tree Bool))
depthMATalphatest = lens _depthMATalphatest (\a b -> a {_depthMATalphatest = b})
depthMATsrcblenda :: Lens' MAT (Maybe (Tree Int))
depthMATsrcblenda = lens _depthMATsrcblenda (\a b -> a {_depthMATsrcblenda = b})

selectMATpcaptpath :: Lens' MAT (Maybe (Tree ByteString))
selectMATpcaptpath = lens _selectMATpcaptpath (\a b -> a {_selectMATpcaptpath = b})
selectMATwireframe :: Lens' MAT (Maybe (Tree Int))
selectMATwireframe = lens _selectMATwireframe (\a b -> a {_selectMATwireframe = b})
selectMATdestblenda :: Lens' MAT (Maybe (Tree Int))
selectMATdestblenda = lens _selectMATdestblenda (\a b -> a {_selectMATdestblenda = b})
selectMATmat :: Lens' MAT (Maybe (Tree MAT))
selectMATmat = lens _selectMATmat (\a b -> a {_selectMATmat = b})
selectMATdepthfunc :: Lens' MAT (Maybe (Tree Int))
selectMATdepthfunc = lens _selectMATdepthfunc (\a b -> a {_selectMATdepthfunc = b})
selectMATselectmat :: Lens' MAT (Maybe (Tree MAT))
selectMATselectmat = lens _selectMATselectmat (\a b -> a {_selectMATselectmat = b})
selectMATskelrootpath :: Lens' MAT (Maybe (Tree ByteString))
selectMATskelrootpath = lens _selectMATskelrootpath (\a b -> a {_selectMATskelrootpath = b})
selectMATdestblend :: Lens' MAT (Maybe (Tree Int))
selectMATdestblend = lens _selectMATdestblend (\a b -> a {_selectMATdestblend = b})
selectMATalphafunc :: Lens' MAT (Maybe (Tree Int))
selectMATalphafunc = lens _selectMATalphafunc (\a b -> a {_selectMATalphafunc = b})
selectMATcullface :: Lens' MAT (Maybe (Tree Int))
selectMATcullface = lens _selectMATcullface (\a b -> a {_selectMATcullface = b})
selectMATdepthtest :: Lens' MAT (Maybe (Tree Bool))
selectMATdepthtest = lens _selectMATdepthtest (\a b -> a {_selectMATdepthtest = b})
selectMATpolygonoffsetunits :: Lens' MAT (Maybe (Tree Float))
selectMATpolygonoffsetunits = lens _selectMATpolygonoffsetunits (\a b -> a {_selectMATpolygonoffsetunits = b})
selectMATpolygonoffsetfactor :: Lens' MAT (Maybe (Tree Float))
selectMATpolygonoffsetfactor = lens _selectMATpolygonoffsetfactor (\a b -> a {_selectMATpolygonoffsetfactor = b})
selectMATpolygonoffset :: Lens' MAT (Maybe (Tree Bool))
selectMATpolygonoffset = lens _selectMATpolygonoffset (\a b -> a {_selectMATpolygonoffset = b})
selectMATseparatealphafunc :: Lens' MAT (Maybe (Tree Bool))
selectMATseparatealphafunc = lens _selectMATseparatealphafunc (\a b -> a {_selectMATseparatealphafunc = b})
selectMATdepthwriting :: Lens' MAT (Maybe (Tree Bool))
selectMATdepthwriting = lens _selectMATdepthwriting (\a b -> a {_selectMATdepthwriting = b})
selectMATalphathreshold :: Lens' MAT (Maybe (Tree Float))
selectMATalphathreshold = lens _selectMATalphathreshold (\a b -> a {_selectMATalphathreshold = b})
selectMATpcaptdata :: Lens' MAT (Maybe (Tree ByteString))
selectMATpcaptdata = lens _selectMATpcaptdata (\a b -> a {_selectMATpcaptdata = b})
selectMATdodeform :: Lens' MAT (Maybe (Tree Bool))
selectMATdodeform = lens _selectMATdodeform (\a b -> a {_selectMATdodeform = b})
selectMATdeformdata :: Lens' MAT (Maybe (Tree Int))
selectMATdeformdata = lens _selectMATdeformdata (\a b -> a {_selectMATdeformdata = b})
selectMATwirewidth :: Lens' MAT (Maybe (Tree Float))
selectMATwirewidth = lens _selectMATwirewidth (\a b -> a {_selectMATwirewidth = b})
selectMATtargetsop :: Lens' MAT (Maybe (Tree SOP))
selectMATtargetsop = lens _selectMATtargetsop (\a b -> a {_selectMATtargetsop = b})
selectMATsrcblend :: Lens' MAT (Maybe (Tree Int))
selectMATsrcblend = lens _selectMATsrcblend (\a b -> a {_selectMATsrcblend = b})
selectMATblending :: Lens' MAT (Maybe (Tree Bool))
selectMATblending = lens _selectMATblending (\a b -> a {_selectMATblending = b})
selectMATalphatest :: Lens' MAT (Maybe (Tree Bool))
selectMATalphatest = lens _selectMATalphatest (\a b -> a {_selectMATalphatest = b})
selectMATsrcblenda :: Lens' MAT (Maybe (Tree Int))
selectMATsrcblenda = lens _selectMATsrcblenda (\a b -> a {_selectMATsrcblenda = b})

constantMATpcaptpath :: Lens' MAT (Maybe (Tree ByteString))
constantMATpcaptpath = lens _constantMATpcaptpath (\a b -> a {_constantMATpcaptpath = b})
constantMATcolormap :: Lens' MAT (Maybe (Tree TOP))
constantMATcolormap = lens _constantMATcolormap (\a b -> a {_constantMATcolormap = b})
constantMATdestblenda :: Lens' MAT (Maybe (Tree Int))
constantMATdestblenda = lens _constantMATdestblenda (\a b -> a {_constantMATdestblenda = b})
constantMATmat :: Lens' MAT (Maybe (Tree MAT))
constantMATmat = lens _constantMATmat (\a b -> a {_constantMATmat = b})
constantMATalpha :: Lens' MAT (Maybe (Tree Float))
constantMATalpha = lens _constantMATalpha (\a b -> a {_constantMATalpha = b})
constantMATcolormapextendu :: Lens' MAT (Maybe (Tree Int))
constantMATcolormapextendu = lens _constantMATcolormapextendu (\a b -> a {_constantMATcolormapextendu = b})
constantMATcolormapcoord :: Lens' MAT (Maybe (Tree Int))
constantMATcolormapcoord = lens _constantMATcolormapcoord (\a b -> a {_constantMATcolormapcoord = b})
constantMATcullface :: Lens' MAT (Maybe (Tree Int))
constantMATcullface = lens _constantMATcullface (\a b -> a {_constantMATcullface = b})
constantMATskelrootpath :: Lens' MAT (Maybe (Tree ByteString))
constantMATskelrootpath = lens _constantMATskelrootpath (\a b -> a {_constantMATskelrootpath = b})
constantMATwireframe :: Lens' MAT (Maybe (Tree Int))
constantMATwireframe = lens _constantMATwireframe (\a b -> a {_constantMATwireframe = b})
constantMATcolormapcoordinterp :: Lens' MAT (Maybe (Tree Int))
constantMATcolormapcoordinterp = lens _constantMATcolormapcoordinterp (\a b -> a {_constantMATcolormapcoordinterp = b})
constantMATalphafunc :: Lens' MAT (Maybe (Tree Int))
constantMATalphafunc = lens _constantMATalphafunc (\a b -> a {_constantMATalphafunc = b})
constantMATalphathreshold :: Lens' MAT (Maybe (Tree Float))
constantMATalphathreshold = lens _constantMATalphathreshold (\a b -> a {_constantMATalphathreshold = b})
constantMATdepthtest :: Lens' MAT (Maybe (Tree Bool))
constantMATdepthtest = lens _constantMATdepthtest (\a b -> a {_constantMATdepthtest = b})
constantMATapplyprojmaps :: Lens' MAT (Maybe (Tree Bool))
constantMATapplyprojmaps = lens _constantMATapplyprojmaps (\a b -> a {_constantMATapplyprojmaps = b})
constantMATcolormapfilter :: Lens' MAT (Maybe (Tree Int))
constantMATcolormapfilter = lens _constantMATcolormapfilter (\a b -> a {_constantMATcolormapfilter = b})
constantMATpolygonoffsetfactor :: Lens' MAT (Maybe (Tree Float))
constantMATpolygonoffsetfactor = lens _constantMATpolygonoffsetfactor (\a b -> a {_constantMATpolygonoffsetfactor = b})
constantMATpolygonoffset :: Lens' MAT (Maybe (Tree Bool))
constantMATpolygonoffset = lens _constantMATpolygonoffset (\a b -> a {_constantMATpolygonoffset = b})
constantMATseparatealphafunc :: Lens' MAT (Maybe (Tree Bool))
constantMATseparatealphafunc = lens _constantMATseparatealphafunc (\a b -> a {_constantMATseparatealphafunc = b})
constantMATcolormapanisotropy :: Lens' MAT (Maybe (Tree Int))
constantMATcolormapanisotropy = lens _constantMATcolormapanisotropy (\a b -> a {_constantMATcolormapanisotropy = b})
constantMATpolygonoffsetunits :: Lens' MAT (Maybe (Tree Float))
constantMATpolygonoffsetunits = lens _constantMATpolygonoffsetunits (\a b -> a {_constantMATpolygonoffsetunits = b})
constantMATdestblend :: Lens' MAT (Maybe (Tree Int))
constantMATdestblend = lens _constantMATdestblend (\a b -> a {_constantMATdestblend = b})
constantMATcolormapextendv :: Lens' MAT (Maybe (Tree Int))
constantMATcolormapextendv = lens _constantMATcolormapextendv (\a b -> a {_constantMATcolormapextendv = b})
constantMATpcaptdata :: Lens' MAT (Maybe (Tree ByteString))
constantMATpcaptdata = lens _constantMATpcaptdata (\a b -> a {_constantMATpcaptdata = b})
constantMATdodeform :: Lens' MAT (Maybe (Tree Bool))
constantMATdodeform = lens _constantMATdodeform (\a b -> a {_constantMATdodeform = b})
constantMATsrcblend :: Lens' MAT (Maybe (Tree Int))
constantMATsrcblend = lens _constantMATsrcblend (\a b -> a {_constantMATsrcblend = b})
constantMATpostmultalpha :: Lens' MAT (Maybe (Tree Bool))
constantMATpostmultalpha = lens _constantMATpostmultalpha (\a b -> a {_constantMATpostmultalpha = b})
constantMATwirewidth :: Lens' MAT (Maybe (Tree Float))
constantMATwirewidth = lens _constantMATwirewidth (\a b -> a {_constantMATwirewidth = b})
constantMATcolor :: Lens' MAT (Vec3)
constantMATcolor = lens _constantMATcolor (\a b -> a {_constantMATcolor = b})
constantMATdeformdata :: Lens' MAT (Maybe (Tree Int))
constantMATdeformdata = lens _constantMATdeformdata (\a b -> a {_constantMATdeformdata = b})
constantMATtargetsop :: Lens' MAT (Maybe (Tree SOP))
constantMATtargetsop = lens _constantMATtargetsop (\a b -> a {_constantMATtargetsop = b})
constantMATcolormapextendw :: Lens' MAT (Maybe (Tree Int))
constantMATcolormapextendw = lens _constantMATcolormapextendw (\a b -> a {_constantMATcolormapextendw = b})
constantMATblending :: Lens' MAT (Maybe (Tree Bool))
constantMATblending = lens _constantMATblending (\a b -> a {_constantMATblending = b})
constantMATalphatest :: Lens' MAT (Maybe (Tree Bool))
constantMATalphatest = lens _constantMATalphatest (\a b -> a {_constantMATalphatest = b})
constantMATdepthfunc :: Lens' MAT (Maybe (Tree Int))
constantMATdepthfunc = lens _constantMATdepthfunc (\a b -> a {_constantMATdepthfunc = b})
constantMATdepthwriting :: Lens' MAT (Maybe (Tree Bool))
constantMATdepthwriting = lens _constantMATdepthwriting (\a b -> a {_constantMATdepthwriting = b})
constantMATsrcblenda :: Lens' MAT (Maybe (Tree Int))
constantMATsrcblenda = lens _constantMATsrcblenda (\a b -> a {_constantMATsrcblenda = b})

wireframeMATpcaptpath :: Lens' MAT (Maybe (Tree ByteString))
wireframeMATpcaptpath = lens _wireframeMATpcaptpath (\a b -> a {_wireframeMATpcaptpath = b})
wireframeMATwireframe :: Lens' MAT (Maybe (Tree Int))
wireframeMATwireframe = lens _wireframeMATwireframe (\a b -> a {_wireframeMATwireframe = b})
wireframeMATdestblenda :: Lens' MAT (Maybe (Tree Int))
wireframeMATdestblenda = lens _wireframeMATdestblenda (\a b -> a {_wireframeMATdestblenda = b})
wireframeMATmat :: Lens' MAT (Maybe (Tree MAT))
wireframeMATmat = lens _wireframeMATmat (\a b -> a {_wireframeMATmat = b})
wireframeMATalpha :: Lens' MAT (Maybe (Tree Float))
wireframeMATalpha = lens _wireframeMATalpha (\a b -> a {_wireframeMATalpha = b})
wireframeMATwireframemode :: Lens' MAT (Maybe (Tree Int))
wireframeMATwireframemode = lens _wireframeMATwireframemode (\a b -> a {_wireframeMATwireframemode = b})
wireframeMATlinewidth :: Lens' MAT (Maybe (Tree Float))
wireframeMATlinewidth = lens _wireframeMATlinewidth (\a b -> a {_wireframeMATlinewidth = b})
wireframeMATcullface :: Lens' MAT (Maybe (Tree Int))
wireframeMATcullface = lens _wireframeMATcullface (\a b -> a {_wireframeMATcullface = b})
wireframeMATskelrootpath :: Lens' MAT (Maybe (Tree ByteString))
wireframeMATskelrootpath = lens _wireframeMATskelrootpath (\a b -> a {_wireframeMATskelrootpath = b})
wireframeMATdestblend :: Lens' MAT (Maybe (Tree Int))
wireframeMATdestblend = lens _wireframeMATdestblend (\a b -> a {_wireframeMATdestblend = b})
wireframeMATalphafunc :: Lens' MAT (Maybe (Tree Int))
wireframeMATalphafunc = lens _wireframeMATalphafunc (\a b -> a {_wireframeMATalphafunc = b})
wireframeMATalphathreshold :: Lens' MAT (Maybe (Tree Float))
wireframeMATalphathreshold = lens _wireframeMATalphathreshold (\a b -> a {_wireframeMATalphathreshold = b})
wireframeMATdepthtest :: Lens' MAT (Maybe (Tree Bool))
wireframeMATdepthtest = lens _wireframeMATdepthtest (\a b -> a {_wireframeMATdepthtest = b})
wireframeMATcolor :: Lens' MAT (Vec3)
wireframeMATcolor = lens _wireframeMATcolor (\a b -> a {_wireframeMATcolor = b})
wireframeMATpolygonoffsetunits :: Lens' MAT (Maybe (Tree Float))
wireframeMATpolygonoffsetunits = lens _wireframeMATpolygonoffsetunits (\a b -> a {_wireframeMATpolygonoffsetunits = b})
wireframeMATpolygonoffsetfactor :: Lens' MAT (Maybe (Tree Float))
wireframeMATpolygonoffsetfactor = lens _wireframeMATpolygonoffsetfactor (\a b -> a {_wireframeMATpolygonoffsetfactor = b})
wireframeMATpolygonoffset :: Lens' MAT (Maybe (Tree Bool))
wireframeMATpolygonoffset = lens _wireframeMATpolygonoffset (\a b -> a {_wireframeMATpolygonoffset = b})
wireframeMATseparatealphafunc :: Lens' MAT (Maybe (Tree Bool))
wireframeMATseparatealphafunc = lens _wireframeMATseparatealphafunc (\a b -> a {_wireframeMATseparatealphafunc = b})
wireframeMATdepthwriting :: Lens' MAT (Maybe (Tree Bool))
wireframeMATdepthwriting = lens _wireframeMATdepthwriting (\a b -> a {_wireframeMATdepthwriting = b})
wireframeMATdepthfunc :: Lens' MAT (Maybe (Tree Int))
wireframeMATdepthfunc = lens _wireframeMATdepthfunc (\a b -> a {_wireframeMATdepthfunc = b})
wireframeMATpcaptdata :: Lens' MAT (Maybe (Tree ByteString))
wireframeMATpcaptdata = lens _wireframeMATpcaptdata (\a b -> a {_wireframeMATpcaptdata = b})
wireframeMATdodeform :: Lens' MAT (Maybe (Tree Bool))
wireframeMATdodeform = lens _wireframeMATdodeform (\a b -> a {_wireframeMATdodeform = b})
wireframeMATdeformdata :: Lens' MAT (Maybe (Tree Int))
wireframeMATdeformdata = lens _wireframeMATdeformdata (\a b -> a {_wireframeMATdeformdata = b})
wireframeMATwirewidth :: Lens' MAT (Maybe (Tree Float))
wireframeMATwirewidth = lens _wireframeMATwirewidth (\a b -> a {_wireframeMATwirewidth = b})
wireframeMATtargetsop :: Lens' MAT (Maybe (Tree SOP))
wireframeMATtargetsop = lens _wireframeMATtargetsop (\a b -> a {_wireframeMATtargetsop = b})
wireframeMATsrcblend :: Lens' MAT (Maybe (Tree Int))
wireframeMATsrcblend = lens _wireframeMATsrcblend (\a b -> a {_wireframeMATsrcblend = b})
wireframeMATblending :: Lens' MAT (Maybe (Tree Bool))
wireframeMATblending = lens _wireframeMATblending (\a b -> a {_wireframeMATblending = b})
wireframeMATalphatest :: Lens' MAT (Maybe (Tree Bool))
wireframeMATalphatest = lens _wireframeMATalphatest (\a b -> a {_wireframeMATalphatest = b})
wireframeMATsrcblenda :: Lens' MAT (Maybe (Tree Int))
wireframeMATsrcblenda = lens _wireframeMATsrcblenda (\a b -> a {_wireframeMATsrcblenda = b})

nullMATpcaptpath :: Lens' MAT (Maybe (Tree ByteString))
nullMATpcaptpath = lens _nullMATpcaptpath (\a b -> a {_nullMATpcaptpath = b})
nullMATwireframe :: Lens' MAT (Maybe (Tree Int))
nullMATwireframe = lens _nullMATwireframe (\a b -> a {_nullMATwireframe = b})
nullMATdestblenda :: Lens' MAT (Maybe (Tree Int))
nullMATdestblenda = lens _nullMATdestblenda (\a b -> a {_nullMATdestblenda = b})
nullMATmat :: Lens' MAT (Maybe (Tree MAT))
nullMATmat = lens _nullMATmat (\a b -> a {_nullMATmat = b})
nullMATdepthfunc :: Lens' MAT (Maybe (Tree Int))
nullMATdepthfunc = lens _nullMATdepthfunc (\a b -> a {_nullMATdepthfunc = b})
nullMATcullface :: Lens' MAT (Maybe (Tree Int))
nullMATcullface = lens _nullMATcullface (\a b -> a {_nullMATcullface = b})
nullMATskelrootpath :: Lens' MAT (Maybe (Tree ByteString))
nullMATskelrootpath = lens _nullMATskelrootpath (\a b -> a {_nullMATskelrootpath = b})
nullMATdestblend :: Lens' MAT (Maybe (Tree Int))
nullMATdestblend = lens _nullMATdestblend (\a b -> a {_nullMATdestblend = b})
nullMATalphafunc :: Lens' MAT (Maybe (Tree Int))
nullMATalphafunc = lens _nullMATalphafunc (\a b -> a {_nullMATalphafunc = b})
nullMATdepthtest :: Lens' MAT (Maybe (Tree Bool))
nullMATdepthtest = lens _nullMATdepthtest (\a b -> a {_nullMATdepthtest = b})
nullMATpolygonoffsetunits :: Lens' MAT (Maybe (Tree Float))
nullMATpolygonoffsetunits = lens _nullMATpolygonoffsetunits (\a b -> a {_nullMATpolygonoffsetunits = b})
nullMATpolygonoffsetfactor :: Lens' MAT (Maybe (Tree Float))
nullMATpolygonoffsetfactor = lens _nullMATpolygonoffsetfactor (\a b -> a {_nullMATpolygonoffsetfactor = b})
nullMATpolygonoffset :: Lens' MAT (Maybe (Tree Bool))
nullMATpolygonoffset = lens _nullMATpolygonoffset (\a b -> a {_nullMATpolygonoffset = b})
nullMATseparatealphafunc :: Lens' MAT (Maybe (Tree Bool))
nullMATseparatealphafunc = lens _nullMATseparatealphafunc (\a b -> a {_nullMATseparatealphafunc = b})
nullMATdepthwriting :: Lens' MAT (Maybe (Tree Bool))
nullMATdepthwriting = lens _nullMATdepthwriting (\a b -> a {_nullMATdepthwriting = b})
nullMATalphathreshold :: Lens' MAT (Maybe (Tree Float))
nullMATalphathreshold = lens _nullMATalphathreshold (\a b -> a {_nullMATalphathreshold = b})
nullMATpcaptdata :: Lens' MAT (Maybe (Tree ByteString))
nullMATpcaptdata = lens _nullMATpcaptdata (\a b -> a {_nullMATpcaptdata = b})
nullMATdodeform :: Lens' MAT (Maybe (Tree Bool))
nullMATdodeform = lens _nullMATdodeform (\a b -> a {_nullMATdodeform = b})
nullMATdeformdata :: Lens' MAT (Maybe (Tree Int))
nullMATdeformdata = lens _nullMATdeformdata (\a b -> a {_nullMATdeformdata = b})
nullMATwirewidth :: Lens' MAT (Maybe (Tree Float))
nullMATwirewidth = lens _nullMATwirewidth (\a b -> a {_nullMATwirewidth = b})
nullMATtargetsop :: Lens' MAT (Maybe (Tree SOP))
nullMATtargetsop = lens _nullMATtargetsop (\a b -> a {_nullMATtargetsop = b})
nullMATsrcblend :: Lens' MAT (Maybe (Tree Int))
nullMATsrcblend = lens _nullMATsrcblend (\a b -> a {_nullMATsrcblend = b})
nullMATblending :: Lens' MAT (Maybe (Tree Bool))
nullMATblending = lens _nullMATblending (\a b -> a {_nullMATblending = b})
nullMATalphatest :: Lens' MAT (Maybe (Tree Bool))
nullMATalphatest = lens _nullMATalphatest (\a b -> a {_nullMATalphatest = b})
nullMATsrcblenda :: Lens' MAT (Maybe (Tree Int))
nullMATsrcblenda = lens _nullMATsrcblenda (\a b -> a {_nullMATsrcblenda = b})

pbrMATapplypointcolor :: Lens' MAT (Maybe (Tree Bool))
pbrMATapplypointcolor = lens _pbrMATapplypointcolor (\a b -> a {_pbrMATapplypointcolor = b})
pbrMATdarknessemitmapextendu :: Lens' MAT (Maybe (Tree Int))
pbrMATdarknessemitmapextendu = lens _pbrMATdarknessemitmapextendu (\a b -> a {_pbrMATdarknessemitmapextendu = b})
pbrMATroughnessmapextendu :: Lens' MAT (Maybe (Tree Int))
pbrMATroughnessmapextendu = lens _pbrMATroughnessmapextendu (\a b -> a {_pbrMATroughnessmapextendu = b})
pbrMATbackfacelit :: Lens' MAT (Maybe (Tree Int))
pbrMATbackfacelit = lens _pbrMATbackfacelit (\a b -> a {_pbrMATbackfacelit = b})
pbrMATnormalmapextendw :: Lens' MAT (Maybe (Tree Int))
pbrMATnormalmapextendw = lens _pbrMATnormalmapextendw (\a b -> a {_pbrMATnormalmapextendw = b})
pbrMATemitmapextendw :: Lens' MAT (Maybe (Tree Int))
pbrMATemitmapextendw = lens _pbrMATemitmapextendw (\a b -> a {_pbrMATemitmapextendw = b})
pbrMATcolorbuffer7rgb :: Lens' MAT (Maybe (Tree ByteString))
pbrMATcolorbuffer7rgb = lens _pbrMATcolorbuffer7rgb (\a b -> a {_pbrMATcolorbuffer7rgb = b})
pbrMATalphafunc :: Lens' MAT (Maybe (Tree Int))
pbrMATalphafunc = lens _pbrMATalphafunc (\a b -> a {_pbrMATalphafunc = b})
pbrMATrolloff :: Lens' MAT (Maybe (Tree Float))
pbrMATrolloff = lens _pbrMATrolloff (\a b -> a {_pbrMATrolloff = b})
pbrMATroughnessmapfilter :: Lens' MAT (Maybe (Tree Int))
pbrMATroughnessmapfilter = lens _pbrMATroughnessmapfilter (\a b -> a {_pbrMATroughnessmapfilter = b})
pbrMATwritecameradepthtoalpha :: Lens' MAT (Maybe (Tree Bool))
pbrMATwritecameradepthtoalpha = lens _pbrMATwritecameradepthtoalpha (\a b -> a {_pbrMATwritecameradepthtoalpha = b})
pbrMATdarknessemit :: Lens' MAT (Maybe (Tree Bool))
pbrMATdarknessemit = lens _pbrMATdarknessemit (\a b -> a {_pbrMATdarknessemit = b})
pbrMATrim1mapfilter :: Lens' MAT (Maybe (Tree Int))
pbrMATrim1mapfilter = lens _pbrMATrim1mapfilter (\a b -> a {_pbrMATrim1mapfilter = b})
pbrMATdepthwriting :: Lens' MAT (Maybe (Tree Bool))
pbrMATdepthwriting = lens _pbrMATdepthwriting (\a b -> a {_pbrMATdepthwriting = b})
pbrMATambientocclusionmapfilter :: Lens' MAT (Maybe (Tree Int))
pbrMATambientocclusionmapfilter = lens _pbrMATambientocclusionmapfilter (\a b -> a {_pbrMATambientocclusionmapfilter = b})
pbrMATnormalmapanisotropy :: Lens' MAT (Maybe (Tree Int))
pbrMATnormalmapanisotropy = lens _pbrMATnormalmapanisotropy (\a b -> a {_pbrMATnormalmapanisotropy = b})
pbrMATdodeform :: Lens' MAT (Maybe (Tree Bool))
pbrMATdodeform = lens _pbrMATdodeform (\a b -> a {_pbrMATdodeform = b})
pbrMATdarknessemitmapfilter :: Lens' MAT (Maybe (Tree Int))
pbrMATdarknessemitmapfilter = lens _pbrMATdarknessemitmapfilter (\a b -> a {_pbrMATdarknessemitmapfilter = b})
pbrMATdeformdata :: Lens' MAT (Maybe (Tree Int))
pbrMATdeformdata = lens _pbrMATdeformdata (\a b -> a {_pbrMATdeformdata = b})
pbrMATspecularlevelmapextendu :: Lens' MAT (Maybe (Tree Int))
pbrMATspecularlevelmapextendu = lens _pbrMATspecularlevelmapextendu (\a b -> a {_pbrMATspecularlevelmapextendu = b})
pbrMATrim1mapextendw :: Lens' MAT (Maybe (Tree Int))
pbrMATrim1mapextendw = lens _pbrMATrim1mapextendw (\a b -> a {_pbrMATrim1mapextendw = b})
pbrMATemitmapcoordinterp :: Lens' MAT (Maybe (Tree Int))
pbrMATemitmapcoordinterp = lens _pbrMATemitmapcoordinterp (\a b -> a {_pbrMATemitmapcoordinterp = b})
pbrMATbumpscale :: Lens' MAT (Maybe (Tree Float))
pbrMATbumpscale = lens _pbrMATbumpscale (\a b -> a {_pbrMATbumpscale = b})
pbrMATmetallicmapcoord :: Lens' MAT (Maybe (Tree Int))
pbrMATmetallicmapcoord = lens _pbrMATmetallicmapcoord (\a b -> a {_pbrMATmetallicmapcoord = b})
pbrMATdarknessemitmapextendv :: Lens' MAT (Maybe (Tree Int))
pbrMATdarknessemitmapextendv = lens _pbrMATdarknessemitmapextendv (\a b -> a {_pbrMATdarknessemitmapextendv = b})
pbrMATdestblenda :: Lens' MAT (Maybe (Tree Int))
pbrMATdestblenda = lens _pbrMATdestblenda (\a b -> a {_pbrMATdestblenda = b})
pbrMAToutputshader :: Lens' MAT (Maybe (Tree Bool))
pbrMAToutputshader = lens _pbrMAToutputshader (\a b -> a {_pbrMAToutputshader = b})
pbrMATrim2enable :: Lens' MAT (Maybe (Tree Bool))
pbrMATrim2enable = lens _pbrMATrim2enable (\a b -> a {_pbrMATrim2enable = b})
pbrMATalphamultlight :: Lens' MAT (Maybe (Tree Bool))
pbrMATalphamultlight = lens _pbrMATalphamultlight (\a b -> a {_pbrMATalphamultlight = b})
pbrMATenvlightquality :: Lens' MAT (Maybe (Tree Float))
pbrMATenvlightquality = lens _pbrMATenvlightquality (\a b -> a {_pbrMATenvlightquality = b})
pbrMATalphathreshold :: Lens' MAT (Maybe (Tree Float))
pbrMATalphathreshold = lens _pbrMATalphathreshold (\a b -> a {_pbrMATalphathreshold = b})
pbrMATalphamapcoordinterp :: Lens' MAT (Maybe (Tree Int))
pbrMATalphamapcoordinterp = lens _pbrMATalphamapcoordinterp (\a b -> a {_pbrMATalphamapcoordinterp = b})
pbrMATspecularlevelmapchannelsource :: Lens' MAT (Maybe (Tree Int))
pbrMATspecularlevelmapchannelsource = lens _pbrMATspecularlevelmapchannelsource (\a b -> a {_pbrMATspecularlevelmapchannelsource = b})
pbrMATnormalmap :: Lens' MAT (Maybe (Tree TOP))
pbrMATnormalmap = lens _pbrMATnormalmap (\a b -> a {_pbrMATnormalmap = b})
pbrMATdepthtest :: Lens' MAT (Maybe (Tree Bool))
pbrMATdepthtest = lens _pbrMATdepthtest (\a b -> a {_pbrMATdepthtest = b})
pbrMATambientocclusionmapextendu :: Lens' MAT (Maybe (Tree Int))
pbrMATambientocclusionmapextendu = lens _pbrMATambientocclusionmapextendu (\a b -> a {_pbrMATambientocclusionmapextendu = b})
pbrMATemit :: Lens' MAT (Vec3)
pbrMATemit = lens _pbrMATemit (\a b -> a {_pbrMATemit = b})
pbrMATdepthfunc :: Lens' MAT (Maybe (Tree Int))
pbrMATdepthfunc = lens _pbrMATdepthfunc (\a b -> a {_pbrMATdepthfunc = b})
pbrMATemitmapextendu :: Lens' MAT (Maybe (Tree Int))
pbrMATemitmapextendu = lens _pbrMATemitmapextendu (\a b -> a {_pbrMATemitmapextendu = b})
pbrMATambientocclusionmap :: Lens' MAT (Maybe (Tree TOP))
pbrMATambientocclusionmap = lens _pbrMATambientocclusionmap (\a b -> a {_pbrMATambientocclusionmap = b})
pbrMATroughnessmap :: Lens' MAT (Maybe (Tree TOP))
pbrMATroughnessmap = lens _pbrMATroughnessmap (\a b -> a {_pbrMATroughnessmap = b})
pbrMATalphafront :: Lens' MAT (Maybe (Tree Float))
pbrMATalphafront = lens _pbrMATalphafront (\a b -> a {_pbrMATalphafront = b})
pbrMATspecularlevelmapextendw :: Lens' MAT (Maybe (Tree Int))
pbrMATspecularlevelmapextendw = lens _pbrMATspecularlevelmapextendw (\a b -> a {_pbrMATspecularlevelmapextendw = b})
pbrMATalphatest :: Lens' MAT (Maybe (Tree Bool))
pbrMATalphatest = lens _pbrMATalphatest (\a b -> a {_pbrMATalphatest = b})
pbrMATspecularlevelmapfilter :: Lens' MAT (Maybe (Tree Int))
pbrMATspecularlevelmapfilter = lens _pbrMATspecularlevelmapfilter (\a b -> a {_pbrMATspecularlevelmapfilter = b})
pbrMATheightmapcoord :: Lens' MAT (Maybe (Tree Int))
pbrMATheightmapcoord = lens _pbrMATheightmapcoord (\a b -> a {_pbrMATheightmapcoord = b})
pbrMATnormalmapextendv :: Lens' MAT (Maybe (Tree Int))
pbrMATnormalmapextendv = lens _pbrMATnormalmapextendv (\a b -> a {_pbrMATnormalmapextendv = b})
pbrMATnormalmapcoordinterp :: Lens' MAT (Maybe (Tree Int))
pbrMATnormalmapcoordinterp = lens _pbrMATnormalmapcoordinterp (\a b -> a {_pbrMATnormalmapcoordinterp = b})
pbrMATskelrootpath :: Lens' MAT (Maybe (Tree ByteString))
pbrMATskelrootpath = lens _pbrMATskelrootpath (\a b -> a {_pbrMATskelrootpath = b})
pbrMATroughnessmapcoord :: Lens' MAT (Maybe (Tree Int))
pbrMATroughnessmapcoord = lens _pbrMATroughnessmapcoord (\a b -> a {_pbrMATroughnessmapcoord = b})
pbrMATheightmapextendv :: Lens' MAT (Maybe (Tree Int))
pbrMATheightmapextendv = lens _pbrMATheightmapextendv (\a b -> a {_pbrMATheightmapextendv = b})
pbrMATalphamapcoord :: Lens' MAT (Maybe (Tree Int))
pbrMATalphamapcoord = lens _pbrMATalphamapcoord (\a b -> a {_pbrMATalphamapcoord = b})
pbrMATrim1mapanisotropy :: Lens' MAT (Maybe (Tree Int))
pbrMATrim1mapanisotropy = lens _pbrMATrim1mapanisotropy (\a b -> a {_pbrMATrim1mapanisotropy = b})
pbrMATwirewidth :: Lens' MAT (Maybe (Tree Float))
pbrMATwirewidth = lens _pbrMATwirewidth (\a b -> a {_pbrMATwirewidth = b})
pbrMATroughnessmapchannelsource :: Lens' MAT (Maybe (Tree Int))
pbrMATroughnessmapchannelsource = lens _pbrMATroughnessmapchannelsource (\a b -> a {_pbrMATroughnessmapchannelsource = b})
pbrMATseparatealphafunc :: Lens' MAT (Maybe (Tree Bool))
pbrMATseparatealphafunc = lens _pbrMATseparatealphafunc (\a b -> a {_pbrMATseparatealphafunc = b})
pbrMATrim2mapfilter :: Lens' MAT (Maybe (Tree Int))
pbrMATrim2mapfilter = lens _pbrMATrim2mapfilter (\a b -> a {_pbrMATrim2mapfilter = b})
pbrMATpcaptdata :: Lens' MAT (Maybe (Tree ByteString))
pbrMATpcaptdata = lens _pbrMATpcaptdata (\a b -> a {_pbrMATpcaptdata = b})
pbrMATdarknessemitmap :: Lens' MAT (Maybe (Tree TOP))
pbrMATdarknessemitmap = lens _pbrMATdarknessemitmap (\a b -> a {_pbrMATdarknessemitmap = b})
pbrMATalphaside :: Lens' MAT (Maybe (Tree Float))
pbrMATalphaside = lens _pbrMATalphaside (\a b -> a {_pbrMATalphaside = b})
pbrMATheightmapanisotropy :: Lens' MAT (Maybe (Tree Int))
pbrMATheightmapanisotropy = lens _pbrMATheightmapanisotropy (\a b -> a {_pbrMATheightmapanisotropy = b})
pbrMATshadowstrength :: Lens' MAT (Maybe (Tree Float))
pbrMATshadowstrength = lens _pbrMATshadowstrength (\a b -> a {_pbrMATshadowstrength = b})
pbrMATroughness :: Lens' MAT (Maybe (Tree Float))
pbrMATroughness = lens _pbrMATroughness (\a b -> a {_pbrMATroughness = b})
pbrMATpcaptpath :: Lens' MAT (Maybe (Tree ByteString))
pbrMATpcaptpath = lens _pbrMATpcaptpath (\a b -> a {_pbrMATpcaptpath = b})
pbrMATbasecolor :: Lens' MAT (Vec3)
pbrMATbasecolor = lens _pbrMATbasecolor (\a b -> a {_pbrMATbasecolor = b})
pbrMATrim1width :: Lens' MAT (Maybe (Tree Float))
pbrMATrim1width = lens _pbrMATrim1width (\a b -> a {_pbrMATrim1width = b})
pbrMATroughnessmapanisotropy :: Lens' MAT (Maybe (Tree Int))
pbrMATroughnessmapanisotropy = lens _pbrMATroughnessmapanisotropy (\a b -> a {_pbrMATroughnessmapanisotropy = b})
pbrMATmetalnessmapfilter :: Lens' MAT (Maybe (Tree Int))
pbrMATmetalnessmapfilter = lens _pbrMATmetalnessmapfilter (\a b -> a {_pbrMATmetalnessmapfilter = b})
pbrMATrim1mapcoordinterp :: Lens' MAT (Maybe (Tree Int))
pbrMATrim1mapcoordinterp = lens _pbrMATrim1mapcoordinterp (\a b -> a {_pbrMATrim1mapcoordinterp = b})
pbrMATbasecolormapextendw :: Lens' MAT (Maybe (Tree Int))
pbrMATbasecolormapextendw = lens _pbrMATbasecolormapextendw (\a b -> a {_pbrMATbasecolormapextendw = b})
pbrMATheightmapextendu :: Lens' MAT (Maybe (Tree Int))
pbrMATheightmapextendu = lens _pbrMATheightmapextendu (\a b -> a {_pbrMATheightmapextendu = b})
pbrMATroughnessmapcoordinterp :: Lens' MAT (Maybe (Tree Int))
pbrMATroughnessmapcoordinterp = lens _pbrMATroughnessmapcoordinterp (\a b -> a {_pbrMATroughnessmapcoordinterp = b})
pbrMATambientocclusionmapcoordinterp :: Lens' MAT (Maybe (Tree Int))
pbrMATambientocclusionmapcoordinterp = lens _pbrMATambientocclusionmapcoordinterp (\a b -> a {_pbrMATambientocclusionmapcoordinterp = b})
pbrMATinstancetexture :: Lens' MAT (Maybe (Tree ByteString))
pbrMATinstancetexture = lens _pbrMATinstancetexture (\a b -> a {_pbrMATinstancetexture = b})
pbrMATnormalmapcoord :: Lens' MAT (Maybe (Tree Int))
pbrMATnormalmapcoord = lens _pbrMATnormalmapcoord (\a b -> a {_pbrMATnormalmapcoord = b})
pbrMATrim2strength :: Lens' MAT (Maybe (Tree Float))
pbrMATrim2strength = lens _pbrMATrim2strength (\a b -> a {_pbrMATrim2strength = b})
pbrMATheightmapextendw :: Lens' MAT (Maybe (Tree Int))
pbrMATheightmapextendw = lens _pbrMATheightmapextendw (\a b -> a {_pbrMATheightmapextendw = b})
pbrMATfrontfacelit :: Lens' MAT (Maybe (Tree Int))
pbrMATfrontfacelit = lens _pbrMATfrontfacelit (\a b -> a {_pbrMATfrontfacelit = b})
pbrMATdestblend :: Lens' MAT (Maybe (Tree Int))
pbrMATdestblend = lens _pbrMATdestblend (\a b -> a {_pbrMATdestblend = b})
pbrMATrim1mapcoord :: Lens' MAT (Maybe (Tree Int))
pbrMATrim1mapcoord = lens _pbrMATrim1mapcoord (\a b -> a {_pbrMATrim1mapcoord = b})
pbrMATrim2mapanisotropy :: Lens' MAT (Maybe (Tree Int))
pbrMATrim2mapanisotropy = lens _pbrMATrim2mapanisotropy (\a b -> a {_pbrMATrim2mapanisotropy = b})
pbrMATmetallicmap :: Lens' MAT (Maybe (Tree TOP))
pbrMATmetallicmap = lens _pbrMATmetallicmap (\a b -> a {_pbrMATmetallicmap = b})
pbrMATrim1color :: Lens' MAT (Vec3)
pbrMATrim1color = lens _pbrMATrim1color (\a b -> a {_pbrMATrim1color = b})
pbrMATmetalnessmapextendu :: Lens' MAT (Maybe (Tree Int))
pbrMATmetalnessmapextendu = lens _pbrMATmetalnessmapextendu (\a b -> a {_pbrMATmetalnessmapextendu = b})
pbrMATspecularlevel :: Lens' MAT (Maybe (Tree Float))
pbrMATspecularlevel = lens _pbrMATspecularlevel (\a b -> a {_pbrMATspecularlevel = b})
pbrMATalphamapextendw :: Lens' MAT (Maybe (Tree Int))
pbrMATalphamapextendw = lens _pbrMATalphamapextendw (\a b -> a {_pbrMATalphamapextendw = b})
pbrMATconstant :: Lens' MAT (Vec3)
pbrMATconstant = lens _pbrMATconstant (\a b -> a {_pbrMATconstant = b})
pbrMATcolorbuffer1rgb :: Lens' MAT (Maybe (Tree ByteString))
pbrMATcolorbuffer1rgb = lens _pbrMATcolorbuffer1rgb (\a b -> a {_pbrMATcolorbuffer1rgb = b})
pbrMATrim2mapextendv :: Lens' MAT (Maybe (Tree Int))
pbrMATrim2mapextendv = lens _pbrMATrim2mapextendv (\a b -> a {_pbrMATrim2mapextendv = b})
pbrMATcolorbuffer3rgb :: Lens' MAT (Maybe (Tree ByteString))
pbrMATcolorbuffer3rgb = lens _pbrMATcolorbuffer3rgb (\a b -> a {_pbrMATcolorbuffer3rgb = b})
pbrMATsubstance :: Lens' MAT (Maybe (Tree TOP))
pbrMATsubstance = lens _pbrMATsubstance (\a b -> a {_pbrMATsubstance = b})
pbrMATbasecolormapcoord :: Lens' MAT (Maybe (Tree Int))
pbrMATbasecolormapcoord = lens _pbrMATbasecolormapcoord (\a b -> a {_pbrMATbasecolormapcoord = b})
pbrMATambientocclusionmapextendv :: Lens' MAT (Maybe (Tree Int))
pbrMATambientocclusionmapextendv = lens _pbrMATambientocclusionmapextendv (\a b -> a {_pbrMATambientocclusionmapextendv = b})
pbrMATrim2center :: Lens' MAT (Maybe (Tree Float))
pbrMATrim2center = lens _pbrMATrim2center (\a b -> a {_pbrMATrim2center = b})
pbrMATcullface :: Lens' MAT (Maybe (Tree Int))
pbrMATcullface = lens _pbrMATcullface (\a b -> a {_pbrMATcullface = b})
pbrMATspecularlevelmapcoordinterp :: Lens' MAT (Maybe (Tree Int))
pbrMATspecularlevelmapcoordinterp = lens _pbrMATspecularlevelmapcoordinterp (\a b -> a {_pbrMATspecularlevelmapcoordinterp = b})
pbrMATmetallicmapcoordinterp :: Lens' MAT (Maybe (Tree Int))
pbrMATmetallicmapcoordinterp = lens _pbrMATmetallicmapcoordinterp (\a b -> a {_pbrMATmetallicmapcoordinterp = b})
pbrMATambientocclusionmapcoord :: Lens' MAT (Maybe (Tree Int))
pbrMATambientocclusionmapcoord = lens _pbrMATambientocclusionmapcoord (\a b -> a {_pbrMATambientocclusionmapcoord = b})
pbrMATparallaxmapping :: Lens' MAT (Maybe (Tree Bool))
pbrMATparallaxmapping = lens _pbrMATparallaxmapping (\a b -> a {_pbrMATparallaxmapping = b})
pbrMATpostmultalpha :: Lens' MAT (Maybe (Tree Bool))
pbrMATpostmultalpha = lens _pbrMATpostmultalpha (\a b -> a {_pbrMATpostmultalpha = b})
pbrMATnormalmapfilter :: Lens' MAT (Maybe (Tree Int))
pbrMATnormalmapfilter = lens _pbrMATnormalmapfilter (\a b -> a {_pbrMATnormalmapfilter = b})
pbrMATdarknessemitmapextendw :: Lens' MAT (Maybe (Tree Int))
pbrMATdarknessemitmapextendw = lens _pbrMATdarknessemitmapextendw (\a b -> a {_pbrMATdarknessemitmapextendw = b})
pbrMATrim1strength :: Lens' MAT (Maybe (Tree Float))
pbrMATrim1strength = lens _pbrMATrim1strength (\a b -> a {_pbrMATrim1strength = b})
pbrMATheightmap :: Lens' MAT (Maybe (Tree TOP))
pbrMATheightmap = lens _pbrMATheightmap (\a b -> a {_pbrMATheightmap = b})
pbrMATrim1enable :: Lens' MAT (Maybe (Tree Bool))
pbrMATrim1enable = lens _pbrMATrim1enable (\a b -> a {_pbrMATrim1enable = b})
pbrMATdarknessemitmapcoord :: Lens' MAT (Maybe (Tree Int))
pbrMATdarknessemitmapcoord = lens _pbrMATdarknessemitmapcoord (\a b -> a {_pbrMATdarknessemitmapcoord = b})
pbrMATmetallic :: Lens' MAT (Maybe (Tree Float))
pbrMATmetallic = lens _pbrMATmetallic (\a b -> a {_pbrMATmetallic = b})
pbrMATrim2map :: Lens' MAT (Maybe (Tree TOP))
pbrMATrim2map = lens _pbrMATrim2map (\a b -> a {_pbrMATrim2map = b})
pbrMATheightmapcoordinterp :: Lens' MAT (Maybe (Tree Int))
pbrMATheightmapcoordinterp = lens _pbrMATheightmapcoordinterp (\a b -> a {_pbrMATheightmapcoordinterp = b})
pbrMATnormalmapextendu :: Lens' MAT (Maybe (Tree Int))
pbrMATnormalmapextendu = lens _pbrMATnormalmapextendu (\a b -> a {_pbrMATnormalmapextendu = b})
pbrMATroughnessmapextendw :: Lens' MAT (Maybe (Tree Int))
pbrMATroughnessmapextendw = lens _pbrMATroughnessmapextendw (\a b -> a {_pbrMATroughnessmapextendw = b})
pbrMATspecularlevelmapextendv :: Lens' MAT (Maybe (Tree Int))
pbrMATspecularlevelmapextendv = lens _pbrMATspecularlevelmapextendv (\a b -> a {_pbrMATspecularlevelmapextendv = b})
pbrMATmat :: Lens' MAT (Maybe (Tree MAT))
pbrMATmat = lens _pbrMATmat (\a b -> a {_pbrMATmat = b})
pbrMATrim1mapextendu :: Lens' MAT (Maybe (Tree Int))
pbrMATrim1mapextendu = lens _pbrMATrim1mapextendu (\a b -> a {_pbrMATrim1mapextendu = b})
pbrMATrim2mapextendu :: Lens' MAT (Maybe (Tree Int))
pbrMATrim2mapextendu = lens _pbrMATrim2mapextendu (\a b -> a {_pbrMATrim2mapextendu = b})
pbrMATbasecolormapanisotropy :: Lens' MAT (Maybe (Tree Int))
pbrMATbasecolormapanisotropy = lens _pbrMATbasecolormapanisotropy (\a b -> a {_pbrMATbasecolormapanisotropy = b})
pbrMATrim2width :: Lens' MAT (Maybe (Tree Float))
pbrMATrim2width = lens _pbrMATrim2width (\a b -> a {_pbrMATrim2width = b})
pbrMATemitmapanisotropy :: Lens' MAT (Maybe (Tree Int))
pbrMATemitmapanisotropy = lens _pbrMATemitmapanisotropy (\a b -> a {_pbrMATemitmapanisotropy = b})
pbrMATheightmapfilter :: Lens' MAT (Maybe (Tree Int))
pbrMATheightmapfilter = lens _pbrMATheightmapfilter (\a b -> a {_pbrMATheightmapfilter = b})
pbrMATbasecolormapextendv :: Lens' MAT (Maybe (Tree Int))
pbrMATbasecolormapextendv = lens _pbrMATbasecolormapextendv (\a b -> a {_pbrMATbasecolormapextendv = b})
pbrMATemitmap :: Lens' MAT (Maybe (Tree TOP))
pbrMATemitmap = lens _pbrMATemitmap (\a b -> a {_pbrMATemitmap = b})
pbrMATpolygonoffsetunits :: Lens' MAT (Maybe (Tree Float))
pbrMATpolygonoffsetunits = lens _pbrMATpolygonoffsetunits (\a b -> a {_pbrMATpolygonoffsetunits = b})
pbrMATcolorbuffer2rgb :: Lens' MAT (Maybe (Tree ByteString))
pbrMATcolorbuffer2rgb = lens _pbrMATcolorbuffer2rgb (\a b -> a {_pbrMATcolorbuffer2rgb = b})
pbrMATcolorbuffer4rgb :: Lens' MAT (Maybe (Tree ByteString))
pbrMATcolorbuffer4rgb = lens _pbrMATcolorbuffer4rgb (\a b -> a {_pbrMATcolorbuffer4rgb = b})
pbrMATbasecolormap :: Lens' MAT (Maybe (Tree TOP))
pbrMATbasecolormap = lens _pbrMATbasecolormap (\a b -> a {_pbrMATbasecolormap = b})
pbrMATspecularlevelmapcoord :: Lens' MAT (Maybe (Tree Int))
pbrMATspecularlevelmapcoord = lens _pbrMATspecularlevelmapcoord (\a b -> a {_pbrMATspecularlevelmapcoord = b})
pbrMATrim2strengthramp :: Lens' MAT (Maybe (Tree TOP))
pbrMATrim2strengthramp = lens _pbrMATrim2strengthramp (\a b -> a {_pbrMATrim2strengthramp = b})
pbrMATblending :: Lens' MAT (Maybe (Tree Bool))
pbrMATblending = lens _pbrMATblending (\a b -> a {_pbrMATblending = b})
pbrMATcolorbuffer5rgb :: Lens' MAT (Maybe (Tree ByteString))
pbrMATcolorbuffer5rgb = lens _pbrMATcolorbuffer5rgb (\a b -> a {_pbrMATcolorbuffer5rgb = b})
pbrMATalphamapfilter :: Lens' MAT (Maybe (Tree Int))
pbrMATalphamapfilter = lens _pbrMATalphamapfilter (\a b -> a {_pbrMATalphamapfilter = b})
pbrMATbasecolormapfilter :: Lens' MAT (Maybe (Tree Int))
pbrMATbasecolormapfilter = lens _pbrMATbasecolormapfilter (\a b -> a {_pbrMATbasecolormapfilter = b})
pbrMATbasecolormapextendu :: Lens' MAT (Maybe (Tree Int))
pbrMATbasecolormapextendu = lens _pbrMATbasecolormapextendu (\a b -> a {_pbrMATbasecolormapextendu = b})
pbrMATrim2mapextendw :: Lens' MAT (Maybe (Tree Int))
pbrMATrim2mapextendw = lens _pbrMATrim2mapextendw (\a b -> a {_pbrMATrim2mapextendw = b})
pbrMATheightmapchannelsource :: Lens' MAT (Maybe (Tree Int))
pbrMATheightmapchannelsource = lens _pbrMATheightmapchannelsource (\a b -> a {_pbrMATheightmapchannelsource = b})
pbrMATshadowcolor :: Lens' MAT (Vec3)
pbrMATshadowcolor = lens _pbrMATshadowcolor (\a b -> a {_pbrMATshadowcolor = b})
pbrMATemitmapextendv :: Lens' MAT (Maybe (Tree Int))
pbrMATemitmapextendv = lens _pbrMATemitmapextendv (\a b -> a {_pbrMATemitmapextendv = b})
pbrMATambientocclusionmapextendw :: Lens' MAT (Maybe (Tree Int))
pbrMATambientocclusionmapextendw = lens _pbrMATambientocclusionmapextendw (\a b -> a {_pbrMATambientocclusionmapextendw = b})
pbrMATambientocclusionmapanisotropy :: Lens' MAT (Maybe (Tree Int))
pbrMATambientocclusionmapanisotropy = lens _pbrMATambientocclusionmapanisotropy (\a b -> a {_pbrMATambientocclusionmapanisotropy = b})
pbrMATpolygonoffsetfactor :: Lens' MAT (Maybe (Tree Float))
pbrMATpolygonoffsetfactor = lens _pbrMATpolygonoffsetfactor (\a b -> a {_pbrMATpolygonoffsetfactor = b})
pbrMATmetallicmapchannelsource :: Lens' MAT (Maybe (Tree Int))
pbrMATmetallicmapchannelsource = lens _pbrMATmetallicmapchannelsource (\a b -> a {_pbrMATmetallicmapchannelsource = b})
pbrMATrim2color :: Lens' MAT (Vec3)
pbrMATrim2color = lens _pbrMATrim2color (\a b -> a {_pbrMATrim2color = b})
pbrMATroughnessmapextendv :: Lens' MAT (Maybe (Tree Int))
pbrMATroughnessmapextendv = lens _pbrMATroughnessmapextendv (\a b -> a {_pbrMATroughnessmapextendv = b})
pbrMATambientocclusion :: Lens' MAT (Maybe (Tree Float))
pbrMATambientocclusion = lens _pbrMATambientocclusion (\a b -> a {_pbrMATambientocclusion = b})
pbrMATcolorbuffer6rgb :: Lens' MAT (Maybe (Tree ByteString))
pbrMATcolorbuffer6rgb = lens _pbrMATcolorbuffer6rgb (\a b -> a {_pbrMATcolorbuffer6rgb = b})
pbrMATdarknessemitmapcoordinterp :: Lens' MAT (Maybe (Tree Int))
pbrMATdarknessemitmapcoordinterp = lens _pbrMATdarknessemitmapcoordinterp (\a b -> a {_pbrMATdarknessemitmapcoordinterp = b})
pbrMATrim1mapextendv :: Lens' MAT (Maybe (Tree Int))
pbrMATrim1mapextendv = lens _pbrMATrim1mapextendv (\a b -> a {_pbrMATrim1mapextendv = b})
pbrMATrim1center :: Lens' MAT (Maybe (Tree Float))
pbrMATrim1center = lens _pbrMATrim1center (\a b -> a {_pbrMATrim1center = b})
pbrMATmetalnessmapextendv :: Lens' MAT (Maybe (Tree Int))
pbrMATmetalnessmapextendv = lens _pbrMATmetalnessmapextendv (\a b -> a {_pbrMATmetalnessmapextendv = b})
pbrMATemitmapcoord :: Lens' MAT (Maybe (Tree Int))
pbrMATemitmapcoord = lens _pbrMATemitmapcoord (\a b -> a {_pbrMATemitmapcoord = b})
pbrMATwireframe :: Lens' MAT (Maybe (Tree Int))
pbrMATwireframe = lens _pbrMATwireframe (\a b -> a {_pbrMATwireframe = b})
pbrMATalphamode :: Lens' MAT (Maybe (Tree Bool))
pbrMATalphamode = lens _pbrMATalphamode (\a b -> a {_pbrMATalphamode = b})
pbrMATrim1map :: Lens' MAT (Maybe (Tree TOP))
pbrMATrim1map = lens _pbrMATrim1map (\a b -> a {_pbrMATrim1map = b})
pbrMATdarknessemitcolor :: Lens' MAT (Vec3)
pbrMATdarknessemitcolor = lens _pbrMATdarknessemitcolor (\a b -> a {_pbrMATdarknessemitcolor = b})
pbrMATtargetsop :: Lens' MAT (Maybe (Tree SOP))
pbrMATtargetsop = lens _pbrMATtargetsop (\a b -> a {_pbrMATtargetsop = b})
pbrMATalphamapanisotropy :: Lens' MAT (Maybe (Tree Int))
pbrMATalphamapanisotropy = lens _pbrMATalphamapanisotropy (\a b -> a {_pbrMATalphamapanisotropy = b})
pbrMATmetalnessmapanisotropy :: Lens' MAT (Maybe (Tree Int))
pbrMATmetalnessmapanisotropy = lens _pbrMATmetalnessmapanisotropy (\a b -> a {_pbrMATmetalnessmapanisotropy = b})
pbrMATpolygonoffset :: Lens' MAT (Maybe (Tree Bool))
pbrMATpolygonoffset = lens _pbrMATpolygonoffset (\a b -> a {_pbrMATpolygonoffset = b})
pbrMATrim1strengthramp :: Lens' MAT (Maybe (Tree TOP))
pbrMATrim1strengthramp = lens _pbrMATrim1strengthramp (\a b -> a {_pbrMATrim1strengthramp = b})
pbrMATdarknessemitmapanisotropy :: Lens' MAT (Maybe (Tree Int))
pbrMATdarknessemitmapanisotropy = lens _pbrMATdarknessemitmapanisotropy (\a b -> a {_pbrMATdarknessemitmapanisotropy = b})
pbrMATmetalnessmapextendw :: Lens' MAT (Maybe (Tree Int))
pbrMATmetalnessmapextendw = lens _pbrMATmetalnessmapextendw (\a b -> a {_pbrMATmetalnessmapextendw = b})
pbrMATspecularlevelmap :: Lens' MAT (Maybe (Tree TOP))
pbrMATspecularlevelmap = lens _pbrMATspecularlevelmap (\a b -> a {_pbrMATspecularlevelmap = b})
pbrMATalphamapextendv :: Lens' MAT (Maybe (Tree Int))
pbrMATalphamapextendv = lens _pbrMATalphamapextendv (\a b -> a {_pbrMATalphamapextendv = b})
pbrMATspecularlevelmapanisotropy :: Lens' MAT (Maybe (Tree Int))
pbrMATspecularlevelmapanisotropy = lens _pbrMATspecularlevelmapanisotropy (\a b -> a {_pbrMATspecularlevelmapanisotropy = b})
pbrMATrim2mapcoord :: Lens' MAT (Maybe (Tree Int))
pbrMATrim2mapcoord = lens _pbrMATrim2mapcoord (\a b -> a {_pbrMATrim2mapcoord = b})
pbrMATemitmapfilter :: Lens' MAT (Maybe (Tree Int))
pbrMATemitmapfilter = lens _pbrMATemitmapfilter (\a b -> a {_pbrMATemitmapfilter = b})
pbrMATbasecolormapcoordinterp :: Lens' MAT (Maybe (Tree Int))
pbrMATbasecolormapcoordinterp = lens _pbrMATbasecolormapcoordinterp (\a b -> a {_pbrMATbasecolormapcoordinterp = b})
pbrMATalphamapextendu :: Lens' MAT (Maybe (Tree Int))
pbrMATalphamapextendu = lens _pbrMATalphamapextendu (\a b -> a {_pbrMATalphamapextendu = b})
pbrMATrim2mapcoordinterp :: Lens' MAT (Maybe (Tree Int))
pbrMATrim2mapcoordinterp = lens _pbrMATrim2mapcoordinterp (\a b -> a {_pbrMATrim2mapcoordinterp = b})
pbrMATsrcblend :: Lens' MAT (Maybe (Tree Int))
pbrMATsrcblend = lens _pbrMATsrcblend (\a b -> a {_pbrMATsrcblend = b})
pbrMATalphamap :: Lens' MAT (Maybe (Tree TOP))
pbrMATalphamap = lens _pbrMATalphamap (\a b -> a {_pbrMATalphamap = b})
pbrMATparallaxclamp :: Lens' MAT (Maybe (Tree Float))
pbrMATparallaxclamp = lens _pbrMATparallaxclamp (\a b -> a {_pbrMATparallaxclamp = b})
pbrMATambientocclusionmapchannelsource :: Lens' MAT (Maybe (Tree Int))
pbrMATambientocclusionmapchannelsource = lens _pbrMATambientocclusionmapchannelsource (\a b -> a {_pbrMATambientocclusionmapchannelsource = b})
pbrMATsrcblenda :: Lens' MAT (Maybe (Tree Int))
pbrMATsrcblenda = lens _pbrMATsrcblenda (\a b -> a {_pbrMATsrcblenda = b})

glslMATvalue3 :: Lens' MAT (Vec4)
glslMATvalue3 = lens _glslMATvalue3 (\a b -> a {_glslMATvalue3 = b})
glslMATtop15extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop15extendw = lens _glslMATtop15extendw (\a b -> a {_glslMATtop15extendw = b})
glslMATglslversion :: Lens' MAT (Maybe (Tree Int))
glslMATglslversion = lens _glslMATglslversion (\a b -> a {_glslMATglslversion = b})
glslMATtop3extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop3extendv = lens _glslMATtop3extendv (\a b -> a {_glslMATtop3extendv = b})
glslMATtop5extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop5extendv = lens _glslMATtop5extendv (\a b -> a {_glslMATtop5extendv = b})
glslMATcullface :: Lens' MAT (Maybe (Tree Int))
glslMATcullface = lens _glslMATcullface (\a b -> a {_glslMATcullface = b})
glslMATtop9filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop9filter = lens _glslMATtop9filter (\a b -> a {_glslMATtop9filter = b})
glslMATalphafunc :: Lens' MAT (Maybe (Tree Int))
glslMATalphafunc = lens _glslMATalphafunc (\a b -> a {_glslMATalphafunc = b})
glslMATgdat :: Lens' MAT (Maybe (Tree DAT))
glslMATgdat = lens _glslMATgdat (\a b -> a {_glslMATgdat = b})
glslMATsampler7 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler7 = lens _glslMATsampler7 (\a b -> a {_glslMATsampler7 = b})
glslMATsampler3 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler3 = lens _glslMATsampler3 (\a b -> a {_glslMATsampler3 = b})
glslMATtop13extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop13extendw = lens _glslMATtop13extendw (\a b -> a {_glslMATtop13extendw = b})
glslMATvalue10 :: Lens' MAT (Vec4)
glslMATvalue10 = lens _glslMATvalue10 (\a b -> a {_glslMATvalue10 = b})
glslMATtop12anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop12anisotropy = lens _glslMATtop12anisotropy (\a b -> a {_glslMATtop12anisotropy = b})
glslMATuniname12 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname12 = lens _glslMATuniname12 (\a b -> a {_glslMATuniname12 = b})
glslMATtop1extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop1extendv = lens _glslMATtop1extendv (\a b -> a {_glslMATtop1extendv = b})
glslMATchanscope8 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchanscope8 = lens _glslMATchanscope8 (\a b -> a {_glslMATchanscope8 = b})
glslMATchanscope7 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchanscope7 = lens _glslMATchanscope7 (\a b -> a {_glslMATchanscope7 = b})
glslMATtop6extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop6extendu = lens _glslMATtop6extendu (\a b -> a {_glslMATtop6extendu = b})
glslMATtop11extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop11extendw = lens _glslMATtop11extendw (\a b -> a {_glslMATtop11extendw = b})
glslMATtop0filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop0filter = lens _glslMATtop0filter (\a b -> a {_glslMATtop0filter = b})
glslMATuniname10 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname10 = lens _glslMATuniname10 (\a b -> a {_glslMATuniname10 = b})
glslMATchopuniname7 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchopuniname7 = lens _glslMATchopuniname7 (\a b -> a {_glslMATchopuniname7 = b})
glslMATuniname11 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname11 = lens _glslMATuniname11 (\a b -> a {_glslMATuniname11 = b})
glslMATvalue19 :: Lens' MAT (Vec4)
glslMATvalue19 = lens _glslMATvalue19 (\a b -> a {_glslMATvalue19 = b})
glslMATchop6 :: Lens' MAT (Maybe (Tree CHOP))
glslMATchop6 = lens _glslMATchop6 (\a b -> a {_glslMATchop6 = b})
glslMATchopunitype2 :: Lens' MAT (Maybe (Tree Int))
glslMATchopunitype2 = lens _glslMATchopunitype2 (\a b -> a {_glslMATchopunitype2 = b})
glslMATclearuniformnames :: Lens' MAT (Maybe (Tree Bool))
glslMATclearuniformnames = lens _glslMATclearuniformnames (\a b -> a {_glslMATclearuniformnames = b})
glslMATuniname5 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname5 = lens _glslMATuniname5 (\a b -> a {_glslMATuniname5 = b})
glslMATvalue9 :: Lens' MAT (Vec4)
glslMATvalue9 = lens _glslMATvalue9 (\a b -> a {_glslMATvalue9 = b})
glslMATuniname4 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname4 = lens _glslMATuniname4 (\a b -> a {_glslMATuniname4 = b})
glslMATsampler11 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler11 = lens _glslMATsampler11 (\a b -> a {_glslMATsampler11 = b})
glslMATchopuniname9 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchopuniname9 = lens _glslMATchopuniname9 (\a b -> a {_glslMATchopuniname9 = b})
glslMATtop6 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop6 = lens _glslMATtop6 (\a b -> a {_glslMATtop6 = b})
glslMATtop11filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop11filter = lens _glslMATtop11filter (\a b -> a {_glslMATtop11filter = b})
glslMATtop4extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop4extendu = lens _glslMATtop4extendu (\a b -> a {_glslMATtop4extendu = b})
glslMATvalue13 :: Lens' MAT (Vec4)
glslMATvalue13 = lens _glslMATvalue13 (\a b -> a {_glslMATvalue13 = b})
glslMATchopunitype8 :: Lens' MAT (Maybe (Tree Int))
glslMATchopunitype8 = lens _glslMATchopunitype8 (\a b -> a {_glslMATchopunitype8 = b})
glslMATsampler1 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler1 = lens _glslMATsampler1 (\a b -> a {_glslMATsampler1 = b})
glslMATsampler13 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler13 = lens _glslMATsampler13 (\a b -> a {_glslMATsampler13 = b})
glslMATvdat :: Lens' MAT (Maybe (Tree DAT))
glslMATvdat = lens _glslMATvdat (\a b -> a {_glslMATvdat = b})
glslMATtop6anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop6anisotropy = lens _glslMATtop6anisotropy (\a b -> a {_glslMATtop6anisotropy = b})
glslMATuniname14 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname14 = lens _glslMATuniname14 (\a b -> a {_glslMATuniname14 = b})
glslMATchoparraytype8 :: Lens' MAT (Maybe (Tree Int))
glslMATchoparraytype8 = lens _glslMATchoparraytype8 (\a b -> a {_glslMATchoparraytype8 = b})
glslMATvalue17 :: Lens' MAT (Vec4)
glslMATvalue17 = lens _glslMATvalue17 (\a b -> a {_glslMATvalue17 = b})
glslMATtop2extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop2extendu = lens _glslMATtop2extendu (\a b -> a {_glslMATtop2extendu = b})
glslMATchopuniname8 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchopuniname8 = lens _glslMATchopuniname8 (\a b -> a {_glslMATchopuniname8 = b})
glslMATtop14anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop14anisotropy = lens _glslMATtop14anisotropy (\a b -> a {_glslMATtop14anisotropy = b})
glslMATtop5anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop5anisotropy = lens _glslMATtop5anisotropy (\a b -> a {_glslMATtop5anisotropy = b})
glslMATchopunitype3 :: Lens' MAT (Maybe (Tree Int))
glslMATchopunitype3 = lens _glslMATchopunitype3 (\a b -> a {_glslMATchopunitype3 = b})
glslMATchopunitype7 :: Lens' MAT (Maybe (Tree Int))
glslMATchopunitype7 = lens _glslMATchopunitype7 (\a b -> a {_glslMATchopunitype7 = b})
glslMATuniname2 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname2 = lens _glslMATuniname2 (\a b -> a {_glslMATuniname2 = b})
glslMATvalue6 :: Lens' MAT (Vec4)
glslMATvalue6 = lens _glslMATvalue6 (\a b -> a {_glslMATvalue6 = b})
glslMATtop13extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop13extendu = lens _glslMATtop13extendu (\a b -> a {_glslMATtop13extendu = b})
glslMATtop7extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop7extendw = lens _glslMATtop7extendw (\a b -> a {_glslMATtop7extendw = b})
glslMATtop5extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop5extendu = lens _glslMATtop5extendu (\a b -> a {_glslMATtop5extendu = b})
glslMATuniname0 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname0 = lens _glslMATuniname0 (\a b -> a {_glslMATuniname0 = b})
glslMATchopunitype5 :: Lens' MAT (Maybe (Tree Int))
glslMATchopunitype5 = lens _glslMATchopunitype5 (\a b -> a {_glslMATchopunitype5 = b})
glslMATvalue21 :: Lens' MAT (Vec4)
glslMATvalue21 = lens _glslMATvalue21 (\a b -> a {_glslMATvalue21 = b})
glslMATdepthtest :: Lens' MAT (Maybe (Tree Bool))
glslMATdepthtest = lens _glslMATdepthtest (\a b -> a {_glslMATdepthtest = b})
glslMATtop4extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop4extendw = lens _glslMATtop4extendw (\a b -> a {_glslMATtop4extendw = b})
glslMATsampler8 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler8 = lens _glslMATsampler8 (\a b -> a {_glslMATsampler8 = b})
glslMATchopunitype6 :: Lens' MAT (Maybe (Tree Int))
glslMATchopunitype6 = lens _glslMATchopunitype6 (\a b -> a {_glslMATchopunitype6 = b})
glslMATvalue4 :: Lens' MAT (Vec4)
glslMATvalue4 = lens _glslMATvalue4 (\a b -> a {_glslMATvalue4 = b})
glslMATtop10anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop10anisotropy = lens _glslMATtop10anisotropy (\a b -> a {_glslMATtop10anisotropy = b})
glslMATvalue15 :: Lens' MAT (Vec4)
glslMATvalue15 = lens _glslMATvalue15 (\a b -> a {_glslMATvalue15 = b})
glslMATskelrootpath :: Lens' MAT (Maybe (Tree ByteString))
glslMATskelrootpath = lens _glslMATskelrootpath (\a b -> a {_glslMATskelrootpath = b})
glslMATchop3 :: Lens' MAT (Maybe (Tree CHOP))
glslMATchop3 = lens _glslMATchop3 (\a b -> a {_glslMATchop3 = b})
glslMATtop6filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop6filter = lens _glslMATtop6filter (\a b -> a {_glslMATtop6filter = b})
glslMATunimatrixname4 :: Lens' MAT (Maybe (Tree ByteString))
glslMATunimatrixname4 = lens _glslMATunimatrixname4 (\a b -> a {_glslMATunimatrixname4 = b})
glslMATtop15 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop15 = lens _glslMATtop15 (\a b -> a {_glslMATtop15 = b})
glslMATuniname20 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname20 = lens _glslMATuniname20 (\a b -> a {_glslMATuniname20 = b})
glslMATtop7 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop7 = lens _glslMATtop7 (\a b -> a {_glslMATtop7 = b})
glslMATuniname3 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname3 = lens _glslMATuniname3 (\a b -> a {_glslMATuniname3 = b})
glslMATtop12 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop12 = lens _glslMATtop12 (\a b -> a {_glslMATtop12 = b})
glslMATpolygonoffset :: Lens' MAT (Maybe (Tree Bool))
glslMATpolygonoffset = lens _glslMATpolygonoffset (\a b -> a {_glslMATpolygonoffset = b})
glslMATseparatealphafunc :: Lens' MAT (Maybe (Tree Bool))
glslMATseparatealphafunc = lens _glslMATseparatealphafunc (\a b -> a {_glslMATseparatealphafunc = b})
glslMATchopuniname2 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchopuniname2 = lens _glslMATchopuniname2 (\a b -> a {_glslMATchopuniname2 = b})
glslMATsampler14 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler14 = lens _glslMATsampler14 (\a b -> a {_glslMATsampler14 = b})
glslMATuniname9 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname9 = lens _glslMATuniname9 (\a b -> a {_glslMATuniname9 = b})
glslMATtop3anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop3anisotropy = lens _glslMATtop3anisotropy (\a b -> a {_glslMATtop3anisotropy = b})
glslMATchop5 :: Lens' MAT (Maybe (Tree CHOP))
glslMATchop5 = lens _glslMATchop5 (\a b -> a {_glslMATchop5 = b})
glslMATchopuniname0 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchopuniname0 = lens _glslMATchopuniname0 (\a b -> a {_glslMATchopuniname0 = b})
glslMATchoparraytype6 :: Lens' MAT (Maybe (Tree Int))
glslMATchoparraytype6 = lens _glslMATchoparraytype6 (\a b -> a {_glslMATchoparraytype6 = b})
glslMATtop3 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop3 = lens _glslMATtop3 (\a b -> a {_glslMATtop3 = b})
glslMATchanscope1 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchanscope1 = lens _glslMATchanscope1 (\a b -> a {_glslMATchanscope1 = b})
glslMATtop10 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop10 = lens _glslMATtop10 (\a b -> a {_glslMATtop10 = b})
glslMATloaduniformnames :: Lens' MAT (Maybe (Tree Bool))
glslMATloaduniformnames = lens _glslMATloaduniformnames (\a b -> a {_glslMATloaduniformnames = b})
glslMATchopuniname4 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchopuniname4 = lens _glslMATchopuniname4 (\a b -> a {_glslMATchopuniname4 = b})
glslMATchopuniname1 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchopuniname1 = lens _glslMATchopuniname1 (\a b -> a {_glslMATchopuniname1 = b})
glslMATtop1extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop1extendu = lens _glslMATtop1extendu (\a b -> a {_glslMATtop1extendu = b})
glslMATtop7filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop7filter = lens _glslMATtop7filter (\a b -> a {_glslMATtop7filter = b})
glslMATvalue8 :: Lens' MAT (Vec4)
glslMATvalue8 = lens _glslMATvalue8 (\a b -> a {_glslMATvalue8 = b})
glslMATtop9extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop9extendv = lens _glslMATtop9extendv (\a b -> a {_glslMATtop9extendv = b})
glslMATtop7extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop7extendu = lens _glslMATtop7extendu (\a b -> a {_glslMATtop7extendu = b})
glslMATchoparraytype1 :: Lens' MAT (Maybe (Tree Int))
glslMATchoparraytype1 = lens _glslMATchoparraytype1 (\a b -> a {_glslMATchoparraytype1 = b})
glslMATtop2anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop2anisotropy = lens _glslMATtop2anisotropy (\a b -> a {_glslMATtop2anisotropy = b})
glslMATtop1extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop1extendw = lens _glslMATtop1extendw (\a b -> a {_glslMATtop1extendw = b})
glslMATuniname13 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname13 = lens _glslMATuniname13 (\a b -> a {_glslMATuniname13 = b})
glslMATtop2extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop2extendv = lens _glslMATtop2extendv (\a b -> a {_glslMATtop2extendv = b})
glslMATtop7anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop7anisotropy = lens _glslMATtop7anisotropy (\a b -> a {_glslMATtop7anisotropy = b})
glslMATchopunitype0 :: Lens' MAT (Maybe (Tree Int))
glslMATchopunitype0 = lens _glslMATchopunitype0 (\a b -> a {_glslMATchopunitype0 = b})
glslMATdestblend :: Lens' MAT (Maybe (Tree Int))
glslMATdestblend = lens _glslMATdestblend (\a b -> a {_glslMATdestblend = b})
glslMATtop4 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop4 = lens _glslMATtop4 (\a b -> a {_glslMATtop4 = b})
glslMATtop0extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop0extendu = lens _glslMATtop0extendu (\a b -> a {_glslMATtop0extendu = b})
glslMATchanscope0 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchanscope0 = lens _glslMATchanscope0 (\a b -> a {_glslMATchanscope0 = b})
glslMATtop13anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop13anisotropy = lens _glslMATtop13anisotropy (\a b -> a {_glslMATtop13anisotropy = b})
glslMATalphatest :: Lens' MAT (Maybe (Tree Bool))
glslMATalphatest = lens _glslMATalphatest (\a b -> a {_glslMATalphatest = b})
glslMATvalue0 :: Lens' MAT (Vec4)
glslMATvalue0 = lens _glslMATvalue0 (\a b -> a {_glslMATvalue0 = b})
glslMATtop12extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop12extendu = lens _glslMATtop12extendu (\a b -> a {_glslMATtop12extendu = b})
glslMATchoparraytype4 :: Lens' MAT (Maybe (Tree Int))
glslMATchoparraytype4 = lens _glslMATchoparraytype4 (\a b -> a {_glslMATchoparraytype4 = b})
glslMATchopunitype4 :: Lens' MAT (Maybe (Tree Int))
glslMATchopunitype4 = lens _glslMATchopunitype4 (\a b -> a {_glslMATchopunitype4 = b})
glslMATtop8anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop8anisotropy = lens _glslMATtop8anisotropy (\a b -> a {_glslMATtop8anisotropy = b})
glslMATtop1anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop1anisotropy = lens _glslMATtop1anisotropy (\a b -> a {_glslMATtop1anisotropy = b})
glslMATtop15extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop15extendu = lens _glslMATtop15extendu (\a b -> a {_glslMATtop15extendu = b})
glslMATtop14extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop14extendu = lens _glslMATtop14extendu (\a b -> a {_glslMATtop14extendu = b})
glslMATchop8 :: Lens' MAT (Maybe (Tree CHOP))
glslMATchop8 = lens _glslMATchop8 (\a b -> a {_glslMATchop8 = b})
glslMATunimatrixname3 :: Lens' MAT (Maybe (Tree ByteString))
glslMATunimatrixname3 = lens _glslMATunimatrixname3 (\a b -> a {_glslMATunimatrixname3 = b})
glslMATtop15filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop15filter = lens _glslMATtop15filter (\a b -> a {_glslMATtop15filter = b})
glslMATchopunitype9 :: Lens' MAT (Maybe (Tree Int))
glslMATchopunitype9 = lens _glslMATchopunitype9 (\a b -> a {_glslMATchopunitype9 = b})
glslMATtop11extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop11extendv = lens _glslMATtop11extendv (\a b -> a {_glslMATtop11extendv = b})
glslMATtop14extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop14extendv = lens _glslMATtop14extendv (\a b -> a {_glslMATtop14extendv = b})
glslMATdodeform :: Lens' MAT (Maybe (Tree Bool))
glslMATdodeform = lens _glslMATdodeform (\a b -> a {_glslMATdodeform = b})
glslMATtop10extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop10extendw = lens _glslMATtop10extendw (\a b -> a {_glslMATtop10extendw = b})
glslMATtop11anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop11anisotropy = lens _glslMATtop11anisotropy (\a b -> a {_glslMATtop11anisotropy = b})
glslMATtop13extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop13extendv = lens _glslMATtop13extendv (\a b -> a {_glslMATtop13extendv = b})
glslMAToutprim :: Lens' MAT (Maybe (Tree Int))
glslMAToutprim = lens _glslMAToutprim (\a b -> a {_glslMAToutprim = b})
glslMATchopuniname3 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchopuniname3 = lens _glslMATchopuniname3 (\a b -> a {_glslMATchopuniname3 = b})
glslMATtop0extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop0extendw = lens _glslMATtop0extendw (\a b -> a {_glslMATtop0extendw = b})
glslMATtop11 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop11 = lens _glslMATtop11 (\a b -> a {_glslMATtop11 = b})
glslMATvalue1 :: Lens' MAT (Vec4)
glslMATvalue1 = lens _glslMATvalue1 (\a b -> a {_glslMATvalue1 = b})
glslMATtop9anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop9anisotropy = lens _glslMATtop9anisotropy (\a b -> a {_glslMATtop9anisotropy = b})
glslMATchopuniname6 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchopuniname6 = lens _glslMATchopuniname6 (\a b -> a {_glslMATchopuniname6 = b})
glslMATalphathreshold :: Lens' MAT (Maybe (Tree Float))
glslMATalphathreshold = lens _glslMATalphathreshold (\a b -> a {_glslMATalphathreshold = b})
glslMATsampler0 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler0 = lens _glslMATsampler0 (\a b -> a {_glslMATsampler0 = b})
glslMATtop10filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop10filter = lens _glslMATtop10filter (\a b -> a {_glslMATtop10filter = b})
glslMATtop13filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop13filter = lens _glslMATtop13filter (\a b -> a {_glslMATtop13filter = b})
glslMATchoparraytype9 :: Lens' MAT (Maybe (Tree Int))
glslMATchoparraytype9 = lens _glslMATchoparraytype9 (\a b -> a {_glslMATchoparraytype9 = b})
glslMATchanscope6 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchanscope6 = lens _glslMATchanscope6 (\a b -> a {_glslMATchanscope6 = b})
glslMATtop9extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop9extendw = lens _glslMATtop9extendw (\a b -> a {_glslMATtop9extendw = b})
glslMATvalue20 :: Lens' MAT (Vec4)
glslMATvalue20 = lens _glslMATvalue20 (\a b -> a {_glslMATvalue20 = b})
glslMATuniname1 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname1 = lens _glslMATuniname1 (\a b -> a {_glslMATuniname1 = b})
glslMATnumout :: Lens' MAT (Maybe (Tree Int))
glslMATnumout = lens _glslMATnumout (\a b -> a {_glslMATnumout = b})
glslMATuniname17 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname17 = lens _glslMATuniname17 (\a b -> a {_glslMATuniname17 = b})
glslMATchanscope9 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchanscope9 = lens _glslMATchanscope9 (\a b -> a {_glslMATchanscope9 = b})
glslMATunimatrixname2 :: Lens' MAT (Maybe (Tree ByteString))
glslMATunimatrixname2 = lens _glslMATunimatrixname2 (\a b -> a {_glslMATunimatrixname2 = b})
glslMATuniname8 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname8 = lens _glslMATuniname8 (\a b -> a {_glslMATuniname8 = b})
glslMATchanscope2 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchanscope2 = lens _glslMATchanscope2 (\a b -> a {_glslMATchanscope2 = b})
glslMATsampler4 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler4 = lens _glslMATsampler4 (\a b -> a {_glslMATsampler4 = b})
glslMATdepthfunc :: Lens' MAT (Maybe (Tree Int))
glslMATdepthfunc = lens _glslMATdepthfunc (\a b -> a {_glslMATdepthfunc = b})
glslMATchopuniname5 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchopuniname5 = lens _glslMATchopuniname5 (\a b -> a {_glslMATchopuniname5 = b})
glslMATtop8extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop8extendw = lens _glslMATtop8extendw (\a b -> a {_glslMATtop8extendw = b})
glslMATtop4filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop4filter = lens _glslMATtop4filter (\a b -> a {_glslMATtop4filter = b})
glslMATchop2 :: Lens' MAT (Maybe (Tree CHOP))
glslMATchop2 = lens _glslMATchop2 (\a b -> a {_glslMATchop2 = b})
glslMATtop8filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop8filter = lens _glslMATtop8filter (\a b -> a {_glslMATtop8filter = b})
glslMATmat :: Lens' MAT (Maybe (Tree MAT))
glslMATmat = lens _glslMATmat (\a b -> a {_glslMATmat = b})
glslMATblending :: Lens' MAT (Maybe (Tree Bool))
glslMATblending = lens _glslMATblending (\a b -> a {_glslMATblending = b})
glslMATtop13 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop13 = lens _glslMATtop13 (\a b -> a {_glslMATtop13 = b})
glslMATchop9 :: Lens' MAT (Maybe (Tree CHOP))
glslMATchop9 = lens _glslMATchop9 (\a b -> a {_glslMATchop9 = b})
glslMATchop0 :: Lens' MAT (Maybe (Tree CHOP))
glslMATchop0 = lens _glslMATchop0 (\a b -> a {_glslMATchop0 = b})
glslMATuniname19 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname19 = lens _glslMATuniname19 (\a b -> a {_glslMATuniname19 = b})
glslMATsampler6 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler6 = lens _glslMATsampler6 (\a b -> a {_glslMATsampler6 = b})
glslMATvalue11 :: Lens' MAT (Vec4)
glslMATvalue11 = lens _glslMATvalue11 (\a b -> a {_glslMATvalue11 = b})
glslMATdeformdata :: Lens' MAT (Maybe (Tree Int))
glslMATdeformdata = lens _glslMATdeformdata (\a b -> a {_glslMATdeformdata = b})
glslMATtop2filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop2filter = lens _glslMATtop2filter (\a b -> a {_glslMATtop2filter = b})
glslMATuniname7 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname7 = lens _glslMATuniname7 (\a b -> a {_glslMATuniname7 = b})
glslMATtop14filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop14filter = lens _glslMATtop14filter (\a b -> a {_glslMATtop14filter = b})
glslMATpcaptpath :: Lens' MAT (Maybe (Tree ByteString))
glslMATpcaptpath = lens _glslMATpcaptpath (\a b -> a {_glslMATpcaptpath = b})
glslMATvalue5 :: Lens' MAT (Vec4)
glslMATvalue5 = lens _glslMATvalue5 (\a b -> a {_glslMATvalue5 = b})
glslMATchop1 :: Lens' MAT (Maybe (Tree CHOP))
glslMATchop1 = lens _glslMATchop1 (\a b -> a {_glslMATchop1 = b})
glslMATpolygonoffsetunits :: Lens' MAT (Maybe (Tree Float))
glslMATpolygonoffsetunits = lens _glslMATpolygonoffsetunits (\a b -> a {_glslMATpolygonoffsetunits = b})
glslMATtop5extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop5extendw = lens _glslMATtop5extendw (\a b -> a {_glslMATtop5extendw = b})
glslMATtop1 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop1 = lens _glslMATtop1 (\a b -> a {_glslMATtop1 = b})
glslMATtop1filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop1filter = lens _glslMATtop1filter (\a b -> a {_glslMATtop1filter = b})
glslMATchanscope3 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchanscope3 = lens _glslMATchanscope3 (\a b -> a {_glslMATchanscope3 = b})
glslMATsampler9 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler9 = lens _glslMATsampler9 (\a b -> a {_glslMATsampler9 = b})
glslMATchop4 :: Lens' MAT (Maybe (Tree CHOP))
glslMATchop4 = lens _glslMATchop4 (\a b -> a {_glslMATchop4 = b})
glslMATsampler12 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler12 = lens _glslMATsampler12 (\a b -> a {_glslMATsampler12 = b})
glslMATsampler2 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler2 = lens _glslMATsampler2 (\a b -> a {_glslMATsampler2 = b})
glslMATwirewidth :: Lens' MAT (Maybe (Tree Float))
glslMATwirewidth = lens _glslMATwirewidth (\a b -> a {_glslMATwirewidth = b})
glslMATtop2 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop2 = lens _glslMATtop2 (\a b -> a {_glslMATtop2 = b})
glslMATtop10extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop10extendv = lens _glslMATtop10extendv (\a b -> a {_glslMATtop10extendv = b})
glslMATtop7extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop7extendv = lens _glslMATtop7extendv (\a b -> a {_glslMATtop7extendv = b})
glslMATtop8 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop8 = lens _glslMATtop8 (\a b -> a {_glslMATtop8 = b})
glslMATunimatrixname0 :: Lens' MAT (Maybe (Tree ByteString))
glslMATunimatrixname0 = lens _glslMATunimatrixname0 (\a b -> a {_glslMATunimatrixname0 = b})
glslMATtop12filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop12filter = lens _glslMATtop12filter (\a b -> a {_glslMATtop12filter = b})
glslMATdestblenda :: Lens' MAT (Maybe (Tree Int))
glslMATdestblenda = lens _glslMATdestblenda (\a b -> a {_glslMATdestblenda = b})
glslMATchoparraytype7 :: Lens' MAT (Maybe (Tree Int))
glslMATchoparraytype7 = lens _glslMATchoparraytype7 (\a b -> a {_glslMATchoparraytype7 = b})
glslMATchop7 :: Lens' MAT (Maybe (Tree CHOP))
glslMATchop7 = lens _glslMATchop7 (\a b -> a {_glslMATchop7 = b})
glslMATtop14extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop14extendw = lens _glslMATtop14extendw (\a b -> a {_glslMATtop14extendw = b})
glslMATtop15extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop15extendv = lens _glslMATtop15extendv (\a b -> a {_glslMATtop15extendv = b})
glslMATdepthwriting :: Lens' MAT (Maybe (Tree Bool))
glslMATdepthwriting = lens _glslMATdepthwriting (\a b -> a {_glslMATdepthwriting = b})
glslMATsampler15 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler15 = lens _glslMATsampler15 (\a b -> a {_glslMATsampler15 = b})
glslMATchopunitype1 :: Lens' MAT (Maybe (Tree Int))
glslMATchopunitype1 = lens _glslMATchopunitype1 (\a b -> a {_glslMATchopunitype1 = b})
glslMATunimatrixname1 :: Lens' MAT (Maybe (Tree ByteString))
glslMATunimatrixname1 = lens _glslMATunimatrixname1 (\a b -> a {_glslMATunimatrixname1 = b})
glslMATtop0anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop0anisotropy = lens _glslMATtop0anisotropy (\a b -> a {_glslMATtop0anisotropy = b})
glslMATtop6extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop6extendv = lens _glslMATtop6extendv (\a b -> a {_glslMATtop6extendv = b})
glslMATtop0extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop0extendv = lens _glslMATtop0extendv (\a b -> a {_glslMATtop0extendv = b})
glslMATtop3extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop3extendw = lens _glslMATtop3extendw (\a b -> a {_glslMATtop3extendw = b})
glslMATpolygonoffsetfactor :: Lens' MAT (Maybe (Tree Float))
glslMATpolygonoffsetfactor = lens _glslMATpolygonoffsetfactor (\a b -> a {_glslMATpolygonoffsetfactor = b})
glslMATtop4anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop4anisotropy = lens _glslMATtop4anisotropy (\a b -> a {_glslMATtop4anisotropy = b})
glslMATinprim :: Lens' MAT (Maybe (Tree Int))
glslMATinprim = lens _glslMATinprim (\a b -> a {_glslMATinprim = b})
glslMATtwocolor :: Lens' MAT (Maybe (Tree Bool))
glslMATtwocolor = lens _glslMATtwocolor (\a b -> a {_glslMATtwocolor = b})
glslMATchoparraytype0 :: Lens' MAT (Maybe (Tree Int))
glslMATchoparraytype0 = lens _glslMATchoparraytype0 (\a b -> a {_glslMATchoparraytype0 = b})
glslMATtop4extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop4extendv = lens _glslMATtop4extendv (\a b -> a {_glslMATtop4extendv = b})
glslMATuniname16 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname16 = lens _glslMATuniname16 (\a b -> a {_glslMATuniname16 = b})
glslMATchoparraytype3 :: Lens' MAT (Maybe (Tree Int))
glslMATchoparraytype3 = lens _glslMATchoparraytype3 (\a b -> a {_glslMATchoparraytype3 = b})
glslMATtop3filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop3filter = lens _glslMATtop3filter (\a b -> a {_glslMATtop3filter = b})
glslMATpdat :: Lens' MAT (Maybe (Tree DAT))
glslMATpdat = lens _glslMATpdat (\a b -> a {_glslMATpdat = b})
glslMATtop10extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop10extendu = lens _glslMATtop10extendu (\a b -> a {_glslMATtop10extendu = b})
glslMATuniname6 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname6 = lens _glslMATuniname6 (\a b -> a {_glslMATuniname6 = b})
glslMATsampler5 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler5 = lens _glslMATsampler5 (\a b -> a {_glslMATsampler5 = b})
glslMATtop14 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop14 = lens _glslMATtop14 (\a b -> a {_glslMATtop14 = b})
glslMATtop8extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop8extendu = lens _glslMATtop8extendu (\a b -> a {_glslMATtop8extendu = b})
glslMATwireframe :: Lens' MAT (Maybe (Tree Int))
glslMATwireframe = lens _glslMATwireframe (\a b -> a {_glslMATwireframe = b})
glslMATtop3extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop3extendu = lens _glslMATtop3extendu (\a b -> a {_glslMATtop3extendu = b})
glslMATtargetsop :: Lens' MAT (Maybe (Tree SOP))
glslMATtargetsop = lens _glslMATtargetsop (\a b -> a {_glslMATtargetsop = b})
glslMATvalue2 :: Lens' MAT (Vec4)
glslMATvalue2 = lens _glslMATvalue2 (\a b -> a {_glslMATvalue2 = b})
glslMATtop9 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop9 = lens _glslMATtop9 (\a b -> a {_glslMATtop9 = b})
glslMATtop9extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop9extendu = lens _glslMATtop9extendu (\a b -> a {_glslMATtop9extendu = b})
glslMATtop2extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop2extendw = lens _glslMATtop2extendw (\a b -> a {_glslMATtop2extendw = b})
glslMATuniname21 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname21 = lens _glslMATuniname21 (\a b -> a {_glslMATuniname21 = b})
glslMATuniname15 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname15 = lens _glslMATuniname15 (\a b -> a {_glslMATuniname15 = b})
glslMATtop0 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop0 = lens _glslMATtop0 (\a b -> a {_glslMATtop0 = b})
glslMATvalue14 :: Lens' MAT (Vec4)
glslMATvalue14 = lens _glslMATvalue14 (\a b -> a {_glslMATvalue14 = b})
glslMATtop12extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop12extendw = lens _glslMATtop12extendw (\a b -> a {_glslMATtop12extendw = b})
glslMATvalue16 :: Lens' MAT (Vec4)
glslMATvalue16 = lens _glslMATvalue16 (\a b -> a {_glslMATvalue16 = b})
glslMATtop5 :: Lens' MAT (Maybe (Tree TOP))
glslMATtop5 = lens _glslMATtop5 (\a b -> a {_glslMATtop5 = b})
glslMATpcaptdata :: Lens' MAT (Maybe (Tree ByteString))
glslMATpcaptdata = lens _glslMATpcaptdata (\a b -> a {_glslMATpcaptdata = b})
glslMATtop6extendw :: Lens' MAT (Maybe (Tree Int))
glslMATtop6extendw = lens _glslMATtop6extendw (\a b -> a {_glslMATtop6extendw = b})
glslMATtop8extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop8extendv = lens _glslMATtop8extendv (\a b -> a {_glslMATtop8extendv = b})
glslMATchoparraytype2 :: Lens' MAT (Maybe (Tree Int))
glslMATchoparraytype2 = lens _glslMATchoparraytype2 (\a b -> a {_glslMATchoparraytype2 = b})
glslMATlightingspace :: Lens' MAT (Maybe (Tree Int))
glslMATlightingspace = lens _glslMATlightingspace (\a b -> a {_glslMATlightingspace = b})
glslMATuniname18 :: Lens' MAT (Maybe (Tree ByteString))
glslMATuniname18 = lens _glslMATuniname18 (\a b -> a {_glslMATuniname18 = b})
glslMATinherit :: Lens' MAT (Maybe (Tree MAT))
glslMATinherit = lens _glslMATinherit (\a b -> a {_glslMATinherit = b})
glslMATtop5filter :: Lens' MAT (Maybe (Tree Int))
glslMATtop5filter = lens _glslMATtop5filter (\a b -> a {_glslMATtop5filter = b})
glslMATchoparraytype5 :: Lens' MAT (Maybe (Tree Int))
glslMATchoparraytype5 = lens _glslMATchoparraytype5 (\a b -> a {_glslMATchoparraytype5 = b})
glslMATtop12extendv :: Lens' MAT (Maybe (Tree Int))
glslMATtop12extendv = lens _glslMATtop12extendv (\a b -> a {_glslMATtop12extendv = b})
glslMATvalue7 :: Lens' MAT (Vec4)
glslMATvalue7 = lens _glslMATvalue7 (\a b -> a {_glslMATvalue7 = b})
glslMATsrcblend :: Lens' MAT (Maybe (Tree Int))
glslMATsrcblend = lens _glslMATsrcblend (\a b -> a {_glslMATsrcblend = b})
glslMATtop11extendu :: Lens' MAT (Maybe (Tree Int))
glslMATtop11extendu = lens _glslMATtop11extendu (\a b -> a {_glslMATtop11extendu = b})
glslMATvalue18 :: Lens' MAT (Vec4)
glslMATvalue18 = lens _glslMATvalue18 (\a b -> a {_glslMATvalue18 = b})
glslMATchanscope4 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchanscope4 = lens _glslMATchanscope4 (\a b -> a {_glslMATchanscope4 = b})
glslMATvalue12 :: Lens' MAT (Vec4)
glslMATvalue12 = lens _glslMATvalue12 (\a b -> a {_glslMATvalue12 = b})
glslMATsrcblenda :: Lens' MAT (Maybe (Tree Int))
glslMATsrcblenda = lens _glslMATsrcblenda (\a b -> a {_glslMATsrcblenda = b})
glslMATchanscope5 :: Lens' MAT (Maybe (Tree ByteString))
glslMATchanscope5 = lens _glslMATchanscope5 (\a b -> a {_glslMATchanscope5 = b})
glslMATtop15anisotropy :: Lens' MAT (Maybe (Tree Int))
glslMATtop15anisotropy = lens _glslMATtop15anisotropy (\a b -> a {_glslMATtop15anisotropy = b})
glslMATsampler10 :: Lens' MAT (Maybe (Tree ByteString))
glslMATsampler10 = lens _glslMATsampler10 (\a b -> a {_glslMATsampler10 = b})

forceSOPvortex :: Lens' SOP (Maybe (Tree Float))
forceSOPvortex = lens _forceSOPvortex (\a b -> a {_forceSOPvortex = b})
forceSOPdoradial :: Lens' SOP (Maybe (Tree Bool))
forceSOPdoradial = lens _forceSOPdoradial (\a b -> a {_forceSOPdoradial = b})
forceSOPspiral :: Lens' SOP (Maybe (Tree Float))
forceSOPspiral = lens _forceSOPspiral (\a b -> a {_forceSOPspiral = b})
forceSOPdir :: Lens' SOP (Vec3)
forceSOPdir = lens _forceSOPdir (\a b -> a {_forceSOPdir = b})
forceSOPdoaxis :: Lens' SOP (Maybe (Tree Bool))
forceSOPdoaxis = lens _forceSOPdoaxis (\a b -> a {_forceSOPdoaxis = b})
forceSOPaxial :: Lens' SOP (Maybe (Tree Float))
forceSOPaxial = lens _forceSOPaxial (\a b -> a {_forceSOPaxial = b})
forceSOPradial :: Lens' SOP (Maybe (Tree Float))
forceSOPradial = lens _forceSOPradial (\a b -> a {_forceSOPradial = b})

particleSOPsplittype :: Lens' SOP (Maybe (Tree Int))
particleSOPsplittype = lens _particleSOPsplittype (\a b -> a {_particleSOPsplittype = b})
particleSOPresetpulse :: Lens' SOP (Maybe (Tree Bool))
particleSOPresetpulse = lens _particleSOPresetpulse (\a b -> a {_particleSOPresetpulse = b})
particleSOPattractmode :: Lens' SOP (Maybe (Tree Int))
particleSOPattractmode = lens _particleSOPattractmode (\a b -> a {_particleSOPattractmode = b})
particleSOPdrag :: Lens' SOP (Maybe (Tree Float))
particleSOPdrag = lens _particleSOPdrag (\a b -> a {_particleSOPdrag = b})
particleSOPgaintan :: Lens' SOP (Maybe (Tree Float))
particleSOPgaintan = lens _particleSOPgaintan (\a b -> a {_particleSOPgaintan = b})
particleSOPrmunused :: Lens' SOP (Maybe (Tree Bool))
particleSOPrmunused = lens _particleSOPrmunused (\a b -> a {_particleSOPrmunused = b})
particleSOPsplitmin :: Lens' SOP (Maybe (Tree Int))
particleSOPsplitmin = lens _particleSOPsplitmin (\a b -> a {_particleSOPsplitmin = b})
particleSOPdoid :: Lens' SOP (Maybe (Tree Bool))
particleSOPdoid = lens _particleSOPdoid (\a b -> a {_particleSOPdoid = b})
particleSOPsplitvar :: Lens' SOP (Vec3)
particleSOPsplitvar = lens _particleSOPsplitvar (\a b -> a {_particleSOPsplitvar = b})
particleSOPmass :: Lens' SOP (Maybe (Tree Float))
particleSOPmass = lens _particleSOPmass (\a b -> a {_particleSOPmass = b})
particleSOPdomass :: Lens' SOP (Maybe (Tree Bool))
particleSOPdomass = lens _particleSOPdomass (\a b -> a {_particleSOPdomass = b})
particleSOPgainnorm :: Lens' SOP (Maybe (Tree Float))
particleSOPgainnorm = lens _particleSOPgainnorm (\a b -> a {_particleSOPgainnorm = b})
particleSOPsplitmax :: Lens' SOP (Maybe (Tree Int))
particleSOPsplitmax = lens _particleSOPsplitmax (\a b -> a {_particleSOPsplitmax = b})
particleSOPbirth :: Lens' SOP (Maybe (Tree Float))
particleSOPbirth = lens _particleSOPbirth (\a b -> a {_particleSOPbirth = b})
particleSOPtimeinc :: Lens' SOP (Maybe (Tree Float))
particleSOPtimeinc = lens _particleSOPtimeinc (\a b -> a {_particleSOPtimeinc = b})
particleSOPexternal :: Lens' SOP (Vec3)
particleSOPexternal = lens _particleSOPexternal (\a b -> a {_particleSOPexternal = b})
particleSOPdodrag :: Lens' SOP (Maybe (Tree Bool))
particleSOPdodrag = lens _particleSOPdodrag (\a b -> a {_particleSOPdodrag = b})
particleSOPjitter :: Lens' SOP (Maybe (Tree Bool))
particleSOPjitter = lens _particleSOPjitter (\a b -> a {_particleSOPjitter = b})
particleSOPlimitpos :: Lens' SOP (Vec3)
particleSOPlimitpos = lens _particleSOPlimitpos (\a b -> a {_particleSOPlimitpos = b})
particleSOPprtype :: Lens' SOP (Maybe (Tree Int))
particleSOPprtype = lens _particleSOPprtype (\a b -> a {_particleSOPprtype = b})
particleSOPbehave :: Lens' SOP (Maybe (Tree Int))
particleSOPbehave = lens _particleSOPbehave (\a b -> a {_particleSOPbehave = b})
particleSOPnormals :: Lens' SOP (Maybe (Tree Bool))
particleSOPnormals = lens _particleSOPnormals (\a b -> a {_particleSOPnormals = b})
particleSOPperiod :: Lens' SOP (Maybe (Tree Float))
particleSOPperiod = lens _particleSOPperiod (\a b -> a {_particleSOPperiod = b})
particleSOPaccurate :: Lens' SOP (Maybe (Tree Bool))
particleSOPaccurate = lens _particleSOPaccurate (\a b -> a {_particleSOPaccurate = b})
particleSOPturb :: Lens' SOP (Vec3)
particleSOPturb = lens _particleSOPturb (\a b -> a {_particleSOPturb = b})
particleSOPptreuse :: Lens' SOP (Maybe (Tree Int))
particleSOPptreuse = lens _particleSOPptreuse (\a b -> a {_particleSOPptreuse = b})
particleSOPtimepreroll :: Lens' SOP (Maybe (Tree Float))
particleSOPtimepreroll = lens _particleSOPtimepreroll (\a b -> a {_particleSOPtimepreroll = b})
particleSOPhit :: Lens' SOP (Maybe (Tree Int))
particleSOPhit = lens _particleSOPhit (\a b -> a {_particleSOPhit = b})
particleSOPseed :: Lens' SOP (Maybe (Tree Int))
particleSOPseed = lens _particleSOPseed (\a b -> a {_particleSOPseed = b})
particleSOPlife :: Lens' SOP (Maybe (Tree Float))
particleSOPlife = lens _particleSOPlife (\a b -> a {_particleSOPlife = b})
particleSOPsplitvel :: Lens' SOP (Vec3)
particleSOPsplitvel = lens _particleSOPsplitvel (\a b -> a {_particleSOPsplitvel = b})
particleSOPsourcegrp :: Lens' SOP (Maybe (Tree ByteString))
particleSOPsourcegrp = lens _particleSOPsourcegrp (\a b -> a {_particleSOPsourcegrp = b})
particleSOPmaxsteps :: Lens' SOP (Maybe (Tree Int))
particleSOPmaxsteps = lens _particleSOPmaxsteps (\a b -> a {_particleSOPmaxsteps = b})
particleSOPlifevar :: Lens' SOP (Maybe (Tree Float))
particleSOPlifevar = lens _particleSOPlifevar (\a b -> a {_particleSOPlifevar = b})
particleSOPlimitneg :: Lens' SOP (Vec3)
particleSOPlimitneg = lens _particleSOPlimitneg (\a b -> a {_particleSOPlimitneg = b})
particleSOPalpha :: Lens' SOP (Maybe (Tree Float))
particleSOPalpha = lens _particleSOPalpha (\a b -> a {_particleSOPalpha = b})
particleSOPreset :: Lens' SOP (Maybe (Tree Bool))
particleSOPreset = lens _particleSOPreset (\a b -> a {_particleSOPreset = b})
particleSOPwind :: Lens' SOP (Vec3)
particleSOPwind = lens _particleSOPwind (\a b -> a {_particleSOPwind = b})

railsSOPnewg :: Lens' SOP (Maybe (Tree Bool))
railsSOPnewg = lens _railsSOPnewg (\a b -> a {_railsSOPnewg = b})
railsSOPcycle :: Lens' SOP (Maybe (Tree Int))
railsSOPcycle = lens _railsSOPcycle (\a b -> a {_railsSOPcycle = b})
railsSOPxsectgrp :: Lens' SOP (Maybe (Tree ByteString))
railsSOPxsectgrp = lens _railsSOPxsectgrp (\a b -> a {_railsSOPxsectgrp = b})
railsSOPfirstl :: Lens' SOP (Maybe (Tree Bool))
railsSOPfirstl = lens _railsSOPfirstl (\a b -> a {_railsSOPfirstl = b})
railsSOPrailname :: Lens' SOP (Maybe (Tree ByteString))
railsSOPrailname = lens _railsSOPrailname (\a b -> a {_railsSOPrailname = b})
railsSOPusedir :: Lens' SOP (Maybe (Tree Bool))
railsSOPusedir = lens _railsSOPusedir (\a b -> a {_railsSOPusedir = b})
railsSOProll :: Lens' SOP (Maybe (Tree Float))
railsSOProll = lens _railsSOProll (\a b -> a {_railsSOProll = b})
railsSOPstretch :: Lens' SOP (Maybe (Tree Bool))
railsSOPstretch = lens _railsSOPstretch (\a b -> a {_railsSOPstretch = b})
railsSOPnoflip :: Lens' SOP (Maybe (Tree Bool))
railsSOPnoflip = lens _railsSOPnoflip (\a b -> a {_railsSOPnoflip = b})
railsSOPvertex1 :: Lens' SOP (Maybe (Tree Int))
railsSOPvertex1 = lens _railsSOPvertex1 (\a b -> a {_railsSOPvertex1 = b})
railsSOPusevtx :: Lens' SOP (Maybe (Tree Bool))
railsSOPusevtx = lens _railsSOPusevtx (\a b -> a {_railsSOPusevtx = b})
railsSOPdir :: Lens' SOP (Vec3)
railsSOPdir = lens _railsSOPdir (\a b -> a {_railsSOPdir = b})
railsSOPvertex2 :: Lens' SOP (Maybe (Tree Int))
railsSOPvertex2 = lens _railsSOPvertex2 (\a b -> a {_railsSOPvertex2 = b})
railsSOPscale :: Lens' SOP (Maybe (Tree Float))
railsSOPscale = lens _railsSOPscale (\a b -> a {_railsSOPscale = b})
railsSOPrailgrp :: Lens' SOP (Maybe (Tree ByteString))
railsSOPrailgrp = lens _railsSOPrailgrp (\a b -> a {_railsSOPrailgrp = b})
railsSOPpairs :: Lens' SOP (Maybe (Tree Bool))
railsSOPpairs = lens _railsSOPpairs (\a b -> a {_railsSOPpairs = b})

cacheSOPblendpos :: Lens' SOP (Maybe (Tree Bool))
cacheSOPblendpos = lens _cacheSOPblendpos (\a b -> a {_cacheSOPblendpos = b})
cacheSOPoutputindex :: Lens' SOP (Maybe (Tree Float))
cacheSOPoutputindex = lens _cacheSOPoutputindex (\a b -> a {_cacheSOPoutputindex = b})
cacheSOPactive :: Lens' SOP (Maybe (Tree Bool))
cacheSOPactive = lens _cacheSOPactive (\a b -> a {_cacheSOPactive = b})
cacheSOPresetpulse :: Lens' SOP (Maybe (Tree Bool))
cacheSOPresetpulse = lens _cacheSOPresetpulse (\a b -> a {_cacheSOPresetpulse = b})
cacheSOPcachesize :: Lens' SOP (Maybe (Tree Int))
cacheSOPcachesize = lens _cacheSOPcachesize (\a b -> a {_cacheSOPcachesize = b})
cacheSOPcachepoints :: Lens' SOP (Maybe (Tree Bool))
cacheSOPcachepoints = lens _cacheSOPcachepoints (\a b -> a {_cacheSOPcachepoints = b})
cacheSOPprefill :: Lens' SOP (Maybe (Tree Bool))
cacheSOPprefill = lens _cacheSOPprefill (\a b -> a {_cacheSOPprefill = b})
cacheSOPreset :: Lens' SOP (Maybe (Tree Bool))
cacheSOPreset = lens _cacheSOPreset (\a b -> a {_cacheSOPreset = b})
cacheSOPstep :: Lens' SOP (Maybe (Tree Int))
cacheSOPstep = lens _cacheSOPstep (\a b -> a {_cacheSOPstep = b})

circleSOPtype :: Lens' SOP (Maybe (Tree Int))
circleSOPtype = lens _circleSOPtype (\a b -> a {_circleSOPtype = b})
circleSOPnormals :: Lens' SOP (Maybe (Tree Bool))
circleSOPnormals = lens _circleSOPnormals (\a b -> a {_circleSOPnormals = b})
circleSOPdivs :: Lens' SOP (Maybe (Tree Int))
circleSOPdivs = lens _circleSOPdivs (\a b -> a {_circleSOPdivs = b})
circleSOPtexture :: Lens' SOP (Maybe (Tree Int))
circleSOPtexture = lens _circleSOPtexture (\a b -> a {_circleSOPtexture = b})
circleSOPmodifybounds :: Lens' SOP (Maybe (Tree Bool))
circleSOPmodifybounds = lens _circleSOPmodifybounds (\a b -> a {_circleSOPmodifybounds = b})
circleSOPbeginangle :: Lens' SOP (Maybe (Tree Float))
circleSOPbeginangle = lens _circleSOPbeginangle (\a b -> a {_circleSOPbeginangle = b})
circleSOPimperfect :: Lens' SOP (Maybe (Tree Bool))
circleSOPimperfect = lens _circleSOPimperfect (\a b -> a {_circleSOPimperfect = b})
circleSOParc :: Lens' SOP (Maybe (Tree Int))
circleSOParc = lens _circleSOParc (\a b -> a {_circleSOParc = b})
circleSOPorient :: Lens' SOP (Maybe (Tree Int))
circleSOPorient = lens _circleSOPorient (\a b -> a {_circleSOPorient = b})
circleSOPrad :: Lens' SOP (Vec2)
circleSOPrad = lens _circleSOPrad (\a b -> a {_circleSOPrad = b})
circleSOPt :: Lens' SOP (Vec3)
circleSOPt = lens _circleSOPt (\a b -> a {_circleSOPt = b})
circleSOPendangle :: Lens' SOP (Maybe (Tree Float))
circleSOPendangle = lens _circleSOPendangle (\a b -> a {_circleSOPendangle = b})
circleSOPorder :: Lens' SOP (Maybe (Tree Int))
circleSOPorder = lens _circleSOPorder (\a b -> a {_circleSOPorder = b})

carveSOPdomainv2 :: Lens' SOP (Maybe (Tree Float))
carveSOPdomainv2 = lens _carveSOPdomainv2 (\a b -> a {_carveSOPdomainv2 = b})
carveSOPfirstv :: Lens' SOP (Maybe (Tree Bool))
carveSOPfirstv = lens _carveSOPfirstv (\a b -> a {_carveSOPfirstv = b})
carveSOPkeepout :: Lens' SOP (Maybe (Tree Bool))
carveSOPkeepout = lens _carveSOPkeepout (\a b -> a {_carveSOPkeepout = b})
carveSOPfirstu :: Lens' SOP (Maybe (Tree Bool))
carveSOPfirstu = lens _carveSOPfirstu (\a b -> a {_carveSOPfirstu = b})
carveSOPsecondv :: Lens' SOP (Maybe (Tree Bool))
carveSOPsecondv = lens _carveSOPsecondv (\a b -> a {_carveSOPsecondv = b})
carveSOPkeeporiginal :: Lens' SOP (Maybe (Tree Bool))
carveSOPkeeporiginal = lens _carveSOPkeeporiginal (\a b -> a {_carveSOPkeeporiginal = b})
carveSOPdomainu2 :: Lens' SOP (Maybe (Tree Float))
carveSOPdomainu2 = lens _carveSOPdomainu2 (\a b -> a {_carveSOPdomainu2 = b})
carveSOPdomainu1 :: Lens' SOP (Maybe (Tree Float))
carveSOPdomainu1 = lens _carveSOPdomainu1 (\a b -> a {_carveSOPdomainu1 = b})
carveSOPdivsu :: Lens' SOP (Maybe (Tree Int))
carveSOPdivsu = lens _carveSOPdivsu (\a b -> a {_carveSOPdivsu = b})
carveSOPdomainv1 :: Lens' SOP (Maybe (Tree Float))
carveSOPdomainv1 = lens _carveSOPdomainv1 (\a b -> a {_carveSOPdomainv1 = b})
carveSOPkeepin :: Lens' SOP (Maybe (Tree Bool))
carveSOPkeepin = lens _carveSOPkeepin (\a b -> a {_carveSOPkeepin = b})
carveSOPallvbreakpoints :: Lens' SOP (Maybe (Tree Bool))
carveSOPallvbreakpoints = lens _carveSOPallvbreakpoints (\a b -> a {_carveSOPallvbreakpoints = b})
carveSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
carveSOPgroup = lens _carveSOPgroup (\a b -> a {_carveSOPgroup = b})
carveSOPextractop :: Lens' SOP (Maybe (Tree Int))
carveSOPextractop = lens _carveSOPextractop (\a b -> a {_carveSOPextractop = b})
carveSOPsecondu :: Lens' SOP (Maybe (Tree Bool))
carveSOPsecondu = lens _carveSOPsecondu (\a b -> a {_carveSOPsecondu = b})
carveSOPallubreakpoints :: Lens' SOP (Maybe (Tree Bool))
carveSOPallubreakpoints = lens _carveSOPallubreakpoints (\a b -> a {_carveSOPallubreakpoints = b})
carveSOPdivsv :: Lens' SOP (Maybe (Tree Int))
carveSOPdivsv = lens _carveSOPdivsv (\a b -> a {_carveSOPdivsv = b})

primitiveSOPdoweight :: Lens' SOP (Maybe (Tree Float))
primitiveSOPdoweight = lens _primitiveSOPdoweight (\a b -> a {_primitiveSOPdoweight = b})
primitiveSOPcustom2val1 :: Lens' SOP (Maybe (Tree Float))
primitiveSOPcustom2val1 = lens _primitiveSOPcustom2val1 (\a b -> a {_primitiveSOPcustom2val1 = b})
primitiveSOPalpha :: Lens' SOP (Maybe (Tree Float))
primitiveSOPalpha = lens _primitiveSOPalpha (\a b -> a {_primitiveSOPalpha = b})
primitiveSOPdoclr :: Lens' SOP (Maybe (Tree Int))
primitiveSOPdoclr = lens _primitiveSOPdoclr (\a b -> a {_primitiveSOPdoclr = b})
primitiveSOPdocrease :: Lens' SOP (Maybe (Tree Int))
primitiveSOPdocrease = lens _primitiveSOPdocrease (\a b -> a {_primitiveSOPdocrease = b})
primitiveSOPtemplategrp :: Lens' SOP (Maybe (Tree ByteString))
primitiveSOPtemplategrp = lens _primitiveSOPtemplategrp (\a b -> a {_primitiveSOPtemplategrp = b})
primitiveSOPcustom2 :: Lens' SOP (Maybe (Tree ByteString))
primitiveSOPcustom2 = lens _primitiveSOPcustom2 (\a b -> a {_primitiveSOPcustom2 = b})
primitiveSOPprtype :: Lens' SOP (Maybe (Tree Int))
primitiveSOPprtype = lens _primitiveSOPprtype (\a b -> a {_primitiveSOPprtype = b})
primitiveSOPcustom1 :: Lens' SOP (Maybe (Tree ByteString))
primitiveSOPcustom1 = lens _primitiveSOPcustom1 (\a b -> a {_primitiveSOPcustom1 = b})
primitiveSOPdiff :: Lens' SOP (Vec3)
primitiveSOPdiff = lens _primitiveSOPdiff (\a b -> a {_primitiveSOPdiff = b})
primitiveSOPvtxuoff :: Lens' SOP (Maybe (Tree Int))
primitiveSOPvtxuoff = lens _primitiveSOPvtxuoff (\a b -> a {_primitiveSOPvtxuoff = b})
primitiveSOPdorot :: Lens' SOP (Maybe (Tree Int))
primitiveSOPdorot = lens _primitiveSOPdorot (\a b -> a {_primitiveSOPdorot = b})
primitiveSOPpshapeu :: Lens' SOP (Maybe (Tree Bool))
primitiveSOPpshapeu = lens _primitiveSOPpshapeu (\a b -> a {_primitiveSOPpshapeu = b})
primitiveSOPcustom1val3 :: Lens' SOP (Maybe (Tree Float))
primitiveSOPcustom1val3 = lens _primitiveSOPcustom1val3 (\a b -> a {_primitiveSOPcustom1val3 = b})
primitiveSOPxord :: Lens' SOP (Maybe (Tree Int))
primitiveSOPxord = lens _primitiveSOPxord (\a b -> a {_primitiveSOPxord = b})
primitiveSOPcrease :: Lens' SOP (Maybe (Tree Float))
primitiveSOPcrease = lens _primitiveSOPcrease (\a b -> a {_primitiveSOPcrease = b})
primitiveSOPr :: Lens' SOP (Vec3)
primitiveSOPr = lens _primitiveSOPr (\a b -> a {_primitiveSOPr = b})
primitiveSOPcustom1val2 :: Lens' SOP (Maybe (Tree Float))
primitiveSOPcustom1val2 = lens _primitiveSOPcustom1val2 (\a b -> a {_primitiveSOPcustom1val2 = b})
primitiveSOPdoprender :: Lens' SOP (Maybe (Tree Bool))
primitiveSOPdoprender = lens _primitiveSOPdoprender (\a b -> a {_primitiveSOPdoprender = b})
primitiveSOPcustom2val3 :: Lens' SOP (Maybe (Tree Float))
primitiveSOPcustom2val3 = lens _primitiveSOPcustom2val3 (\a b -> a {_primitiveSOPcustom2val3 = b})
primitiveSOPs :: Lens' SOP (Vec3)
primitiveSOPs = lens _primitiveSOPs (\a b -> a {_primitiveSOPs = b})
primitiveSOPp :: Lens' SOP (Vec3)
primitiveSOPp = lens _primitiveSOPp (\a b -> a {_primitiveSOPp = b})
primitiveSOPcustom2val4 :: Lens' SOP (Maybe (Tree Float))
primitiveSOPcustom2val4 = lens _primitiveSOPcustom2val4 (\a b -> a {_primitiveSOPcustom2val4 = b})
primitiveSOPvtxsort :: Lens' SOP (Maybe (Tree Int))
primitiveSOPvtxsort = lens _primitiveSOPvtxsort (\a b -> a {_primitiveSOPvtxsort = b})
primitiveSOPvtxvoff :: Lens' SOP (Maybe (Tree Int))
primitiveSOPvtxvoff = lens _primitiveSOPvtxvoff (\a b -> a {_primitiveSOPvtxvoff = b})
primitiveSOPdoxform :: Lens' SOP (Maybe (Tree Bool))
primitiveSOPdoxform = lens _primitiveSOPdoxform (\a b -> a {_primitiveSOPdoxform = b})
primitiveSOPcloseu :: Lens' SOP (Maybe (Tree Int))
primitiveSOPcloseu = lens _primitiveSOPcloseu (\a b -> a {_primitiveSOPcloseu = b})
primitiveSOPcustom1val4 :: Lens' SOP (Maybe (Tree Float))
primitiveSOPcustom1val4 = lens _primitiveSOPcustom1val4 (\a b -> a {_primitiveSOPcustom1val4 = b})
primitiveSOPclampu :: Lens' SOP (Maybe (Tree Int))
primitiveSOPclampu = lens _primitiveSOPclampu (\a b -> a {_primitiveSOPclampu = b})
primitiveSOPcustom1size :: Lens' SOP (Maybe (Tree Int))
primitiveSOPcustom1size = lens _primitiveSOPcustom1size (\a b -> a {_primitiveSOPcustom1size = b})
primitiveSOPcustom1val1 :: Lens' SOP (Maybe (Tree Float))
primitiveSOPcustom1val1 = lens _primitiveSOPcustom1val1 (\a b -> a {_primitiveSOPcustom1val1 = b})
primitiveSOPclampv :: Lens' SOP (Maybe (Tree Int))
primitiveSOPclampv = lens _primitiveSOPclampv (\a b -> a {_primitiveSOPclampv = b})
primitiveSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
primitiveSOPgroup = lens _primitiveSOPgroup (\a b -> a {_primitiveSOPgroup = b})
primitiveSOPrord :: Lens' SOP (Maybe (Tree Int))
primitiveSOPrord = lens _primitiveSOPrord (\a b -> a {_primitiveSOPrord = b})
primitiveSOPmetaweight :: Lens' SOP (Maybe (Tree Bool))
primitiveSOPmetaweight = lens _primitiveSOPmetaweight (\a b -> a {_primitiveSOPmetaweight = b})
primitiveSOPupvector :: Lens' SOP (Vec3)
primitiveSOPupvector = lens _primitiveSOPupvector (\a b -> a {_primitiveSOPupvector = b})
primitiveSOPcustom2val2 :: Lens' SOP (Maybe (Tree Float))
primitiveSOPcustom2val2 = lens _primitiveSOPcustom2val2 (\a b -> a {_primitiveSOPcustom2val2 = b})
primitiveSOPt :: Lens' SOP (Vec3)
primitiveSOPt = lens _primitiveSOPt (\a b -> a {_primitiveSOPt = b})
primitiveSOPclosev :: Lens' SOP (Maybe (Tree Int))
primitiveSOPclosev = lens _primitiveSOPclosev (\a b -> a {_primitiveSOPclosev = b})
primitiveSOPpshapev :: Lens' SOP (Maybe (Tree Bool))
primitiveSOPpshapev = lens _primitiveSOPpshapev (\a b -> a {_primitiveSOPpshapev = b})
primitiveSOPcustom2size :: Lens' SOP (Maybe (Tree Int))
primitiveSOPcustom2size = lens _primitiveSOPcustom2size (\a b -> a {_primitiveSOPcustom2size = b})

noiseSOPrough :: Lens' SOP (Maybe (Tree Float))
noiseSOPrough = lens _noiseSOPrough (\a b -> a {_noiseSOPrough = b})
noiseSOPtype :: Lens' SOP (Maybe (Tree Int))
noiseSOPtype = lens _noiseSOPtype (\a b -> a {_noiseSOPtype = b})
noiseSOPs :: Lens' SOP (Vec3)
noiseSOPs = lens _noiseSOPs (\a b -> a {_noiseSOPs = b})
noiseSOPattribute :: Lens' SOP (Maybe (Tree Int))
noiseSOPattribute = lens _noiseSOPattribute (\a b -> a {_noiseSOPattribute = b})
noiseSOPperiod :: Lens' SOP (Maybe (Tree Float))
noiseSOPperiod = lens _noiseSOPperiod (\a b -> a {_noiseSOPperiod = b})
noiseSOPharmon :: Lens' SOP (Maybe (Tree Int))
noiseSOPharmon = lens _noiseSOPharmon (\a b -> a {_noiseSOPharmon = b})
noiseSOPxord :: Lens' SOP (Maybe (Tree Int))
noiseSOPxord = lens _noiseSOPxord (\a b -> a {_noiseSOPxord = b})
noiseSOPp :: Lens' SOP (Vec3)
noiseSOPp = lens _noiseSOPp (\a b -> a {_noiseSOPp = b})
noiseSOPspread :: Lens' SOP (Maybe (Tree Float))
noiseSOPspread = lens _noiseSOPspread (\a b -> a {_noiseSOPspread = b})
noiseSOPseed :: Lens' SOP (Maybe (Tree Float))
noiseSOPseed = lens _noiseSOPseed (\a b -> a {_noiseSOPseed = b})
noiseSOPkeepnormals :: Lens' SOP (Maybe (Tree Bool))
noiseSOPkeepnormals = lens _noiseSOPkeepnormals (\a b -> a {_noiseSOPkeepnormals = b})
noiseSOPnumint :: Lens' SOP (Maybe (Tree Int))
noiseSOPnumint = lens _noiseSOPnumint (\a b -> a {_noiseSOPnumint = b})
noiseSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
noiseSOPgroup = lens _noiseSOPgroup (\a b -> a {_noiseSOPgroup = b})
noiseSOPrord :: Lens' SOP (Maybe (Tree Int))
noiseSOPrord = lens _noiseSOPrord (\a b -> a {_noiseSOPrord = b})
noiseSOPamp :: Lens' SOP (Maybe (Tree Float))
noiseSOPamp = lens _noiseSOPamp (\a b -> a {_noiseSOPamp = b})
noiseSOPt :: Lens' SOP (Vec3)
noiseSOPt = lens _noiseSOPt (\a b -> a {_noiseSOPt = b})
noiseSOPexp :: Lens' SOP (Maybe (Tree Float))
noiseSOPexp = lens _noiseSOPexp (\a b -> a {_noiseSOPexp = b})
noiseSOPr :: Lens' SOP (Vec3)
noiseSOPr = lens _noiseSOPr (\a b -> a {_noiseSOPr = b})



fitSOPsurftype :: Lens' SOP (Maybe (Tree Int))
fitSOPsurftype = lens _fitSOPsurftype (\a b -> a {_fitSOPsurftype = b})
fitSOPtype :: Lens' SOP (Maybe (Tree Int))
fitSOPtype = lens _fitSOPtype (\a b -> a {_fitSOPtype = b})
fitSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
fitSOPgroup = lens _fitSOPgroup (\a b -> a {_fitSOPgroup = b})
fitSOPdataparmv :: Lens' SOP (Maybe (Tree Int))
fitSOPdataparmv = lens _fitSOPdataparmv (\a b -> a {_fitSOPdataparmv = b})
fitSOPdataparmu :: Lens' SOP (Maybe (Tree Int))
fitSOPdataparmu = lens _fitSOPdataparmu (\a b -> a {_fitSOPdataparmu = b})
fitSOPclosev :: Lens' SOP (Maybe (Tree Int))
fitSOPclosev = lens _fitSOPclosev (\a b -> a {_fitSOPclosev = b})
fitSOPmultiplev :: Lens' SOP (Maybe (Tree Bool))
fitSOPmultiplev = lens _fitSOPmultiplev (\a b -> a {_fitSOPmultiplev = b})
fitSOPscope :: Lens' SOP (Maybe (Tree Int))
fitSOPscope = lens _fitSOPscope (\a b -> a {_fitSOPscope = b})
fitSOPsmooth :: Lens' SOP (Maybe (Tree Float))
fitSOPsmooth = lens _fitSOPsmooth (\a b -> a {_fitSOPsmooth = b})
fitSOPcloseu :: Lens' SOP (Maybe (Tree Int))
fitSOPcloseu = lens _fitSOPcloseu (\a b -> a {_fitSOPcloseu = b})
fitSOPcorners :: Lens' SOP (Maybe (Tree Bool))
fitSOPcorners = lens _fitSOPcorners (\a b -> a {_fitSOPcorners = b})
fitSOPmultipleu :: Lens' SOP (Maybe (Tree Bool))
fitSOPmultipleu = lens _fitSOPmultipleu (\a b -> a {_fitSOPmultipleu = b})
fitSOPtol :: Lens' SOP (Maybe (Tree Float))
fitSOPtol = lens _fitSOPtol (\a b -> a {_fitSOPtol = b})
fitSOPorderv :: Lens' SOP (Maybe (Tree Int))
fitSOPorderv = lens _fitSOPorderv (\a b -> a {_fitSOPorderv = b})
fitSOPmethod :: Lens' SOP (Maybe (Tree Int))
fitSOPmethod = lens _fitSOPmethod (\a b -> a {_fitSOPmethod = b})
fitSOPorderu :: Lens' SOP (Maybe (Tree Int))
fitSOPorderu = lens _fitSOPorderu (\a b -> a {_fitSOPorderu = b})

jointSOPsmoothtwist :: Lens' SOP (Maybe (Tree Bool))
jointSOPsmoothtwist = lens _jointSOPsmoothtwist (\a b -> a {_jointSOPsmoothtwist = b})
jointSOPdivs :: Lens' SOP (Maybe (Tree Int))
jointSOPdivs = lens _jointSOPdivs (\a b -> a {_jointSOPdivs = b})
jointSOPmintwist :: Lens' SOP (Maybe (Tree Bool))
jointSOPmintwist = lens _jointSOPmintwist (\a b -> a {_jointSOPmintwist = b})
jointSOPlrscale2 :: Lens' SOP (Maybe (Tree Float))
jointSOPlrscale2 = lens _jointSOPlrscale2 (\a b -> a {_jointSOPlrscale2 = b})
jointSOPlroffset2 :: Lens' SOP (Maybe (Tree Float))
jointSOPlroffset2 = lens _jointSOPlroffset2 (\a b -> a {_jointSOPlroffset2 = b})
jointSOPlroffset1 :: Lens' SOP (Maybe (Tree Float))
jointSOPlroffset1 = lens _jointSOPlroffset1 (\a b -> a {_jointSOPlroffset1 = b})
jointSOPpreserve1 :: Lens' SOP (Maybe (Tree Bool))
jointSOPpreserve1 = lens _jointSOPpreserve1 (\a b -> a {_jointSOPpreserve1 = b})
jointSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
jointSOPgroup = lens _jointSOPgroup (\a b -> a {_jointSOPgroup = b})
jointSOPsmoothpath :: Lens' SOP (Maybe (Tree Bool))
jointSOPsmoothpath = lens _jointSOPsmoothpath (\a b -> a {_jointSOPsmoothpath = b})
jointSOPorient :: Lens' SOP (Maybe (Tree Bool))
jointSOPorient = lens _jointSOPorient (\a b -> a {_jointSOPorient = b})
jointSOPlrscale1 :: Lens' SOP (Maybe (Tree Float))
jointSOPlrscale1 = lens _jointSOPlrscale1 (\a b -> a {_jointSOPlrscale1 = b})
jointSOPpreserve2 :: Lens' SOP (Maybe (Tree Bool))
jointSOPpreserve2 = lens _jointSOPpreserve2 (\a b -> a {_jointSOPpreserve2 = b})
jointSOPmajoraxes :: Lens' SOP (Maybe (Tree Bool))
jointSOPmajoraxes = lens _jointSOPmajoraxes (\a b -> a {_jointSOPmajoraxes = b})

switchSOPinput :: Lens' SOP (Maybe (Tree Int))
switchSOPinput = lens _switchSOPinput (\a b -> a {_switchSOPinput = b})

inSOPlabel :: Lens' SOP (Maybe (Tree ByteString))
inSOPlabel = lens _inSOPlabel (\a b -> a {_inSOPlabel = b})

boxSOPmodifybounds :: Lens' SOP (Maybe (Tree Bool))
boxSOPmodifybounds = lens _boxSOPmodifybounds (\a b -> a {_boxSOPmodifybounds = b})
boxSOPdodivs :: Lens' SOP (Maybe (Tree Bool))
boxSOPdodivs = lens _boxSOPdodivs (\a b -> a {_boxSOPdodivs = b})
boxSOPnormals :: Lens' SOP (Maybe (Tree Bool))
boxSOPnormals = lens _boxSOPnormals (\a b -> a {_boxSOPnormals = b})
boxSOPs :: Lens' SOP (Maybe (Tree Float))
boxSOPs = lens _boxSOPs (\a b -> a {_boxSOPs = b})
boxSOPsize :: Lens' SOP (Vec3)
boxSOPsize = lens _boxSOPsize (\a b -> a {_boxSOPsize = b})
boxSOPdivsz :: Lens' SOP (Maybe (Tree Int))
boxSOPdivsz = lens _boxSOPdivsz (\a b -> a {_boxSOPdivsz = b})
boxSOPdivsy :: Lens' SOP (Maybe (Tree Int))
boxSOPdivsy = lens _boxSOPdivsy (\a b -> a {_boxSOPdivsy = b})
boxSOPdivsx :: Lens' SOP (Maybe (Tree Int))
boxSOPdivsx = lens _boxSOPdivsx (\a b -> a {_boxSOPdivsx = b})
boxSOPrebar :: Lens' SOP (Maybe (Tree Bool))
boxSOPrebar = lens _boxSOPrebar (\a b -> a {_boxSOPrebar = b})
boxSOPconsolidatepts :: Lens' SOP (Maybe (Tree Bool))
boxSOPconsolidatepts = lens _boxSOPconsolidatepts (\a b -> a {_boxSOPconsolidatepts = b})
boxSOPt :: Lens' SOP (Vec3)
boxSOPt = lens _boxSOPt (\a b -> a {_boxSOPt = b})
boxSOPtexture :: Lens' SOP (Maybe (Tree Int))
boxSOPtexture = lens _boxSOPtexture (\a b -> a {_boxSOPtexture = b})

choptoSOPcompnml :: Lens' SOP (Maybe (Tree Bool))
choptoSOPcompnml = lens _choptoSOPcompnml (\a b -> a {_choptoSOPcompnml = b})
choptoSOPmapping :: Lens' SOP (Maybe (Tree Int))
choptoSOPmapping = lens _choptoSOPmapping (\a b -> a {_choptoSOPmapping = b})
choptoSOPendpos :: Lens' SOP (Vec3)
choptoSOPendpos = lens _choptoSOPendpos (\a b -> a {_choptoSOPendpos = b})
choptoSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
choptoSOPgroup = lens _choptoSOPgroup (\a b -> a {_choptoSOPgroup = b})
choptoSOPorganize :: Lens' SOP (Maybe (Tree ByteString))
choptoSOPorganize = lens _choptoSOPorganize (\a b -> a {_choptoSOPorganize = b})
choptoSOPstartpos :: Lens' SOP (Vec3)
choptoSOPstartpos = lens _choptoSOPstartpos (\a b -> a {_choptoSOPstartpos = b})
choptoSOPchop :: Lens' SOP (Maybe (Tree CHOP))
choptoSOPchop = lens _choptoSOPchop (\a b -> a {_choptoSOPchop = b})
choptoSOPcomptang :: Lens' SOP (Maybe (Tree Bool))
choptoSOPcomptang = lens _choptoSOPcomptang (\a b -> a {_choptoSOPcomptang = b})
choptoSOPmethod :: Lens' SOP (Maybe (Tree Int))
choptoSOPmethod = lens _choptoSOPmethod (\a b -> a {_choptoSOPmethod = b})
choptoSOPchanscope :: Lens' SOP (Maybe (Tree ByteString))
choptoSOPchanscope = lens _choptoSOPchanscope (\a b -> a {_choptoSOPchanscope = b})
choptoSOPattscope :: Lens' SOP (Maybe (Tree ByteString))
choptoSOPattscope = lens _choptoSOPattscope (\a b -> a {_choptoSOPattscope = b})

stitchSOPfixed :: Lens' SOP (Maybe (Tree Bool))
stitchSOPfixed = lens _stitchSOPfixed (\a b -> a {_stitchSOPfixed = b})
stitchSOPlrwidth2 :: Lens' SOP (Maybe (Tree Float))
stitchSOPlrwidth2 = lens _stitchSOPlrwidth2 (\a b -> a {_stitchSOPlrwidth2 = b})
stitchSOPleftuv1 :: Lens' SOP (Maybe (Tree Float))
stitchSOPleftuv1 = lens _stitchSOPleftuv1 (\a b -> a {_stitchSOPleftuv1 = b})
stitchSOPrightuv2 :: Lens' SOP (Maybe (Tree Float))
stitchSOPrightuv2 = lens _stitchSOPrightuv2 (\a b -> a {_stitchSOPrightuv2 = b})
stitchSOPsharp :: Lens' SOP (Maybe (Tree Bool))
stitchSOPsharp = lens _stitchSOPsharp (\a b -> a {_stitchSOPsharp = b})
stitchSOPbias :: Lens' SOP (Maybe (Tree Float))
stitchSOPbias = lens _stitchSOPbias (\a b -> a {_stitchSOPbias = b})
stitchSOPdotangent :: Lens' SOP (Maybe (Tree Bool))
stitchSOPdotangent = lens _stitchSOPdotangent (\a b -> a {_stitchSOPdotangent = b})
stitchSOPstitchop :: Lens' SOP (Maybe (Tree Int))
stitchSOPstitchop = lens _stitchSOPstitchop (\a b -> a {_stitchSOPstitchop = b})
stitchSOPloop :: Lens' SOP (Maybe (Tree Bool))
stitchSOPloop = lens _stitchSOPloop (\a b -> a {_stitchSOPloop = b})
stitchSOPinc :: Lens' SOP (Maybe (Tree Int))
stitchSOPinc = lens _stitchSOPinc (\a b -> a {_stitchSOPinc = b})
stitchSOPleftuv2 :: Lens' SOP (Maybe (Tree Float))
stitchSOPleftuv2 = lens _stitchSOPleftuv2 (\a b -> a {_stitchSOPleftuv2 = b})
stitchSOPlrwidth1 :: Lens' SOP (Maybe (Tree Float))
stitchSOPlrwidth1 = lens _stitchSOPlrwidth1 (\a b -> a {_stitchSOPlrwidth1 = b})
stitchSOPrightuv1 :: Lens' SOP (Maybe (Tree Float))
stitchSOPrightuv1 = lens _stitchSOPrightuv1 (\a b -> a {_stitchSOPrightuv1 = b})
stitchSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
stitchSOPgroup = lens _stitchSOPgroup (\a b -> a {_stitchSOPgroup = b})
stitchSOPlrscale2 :: Lens' SOP (Maybe (Tree Float))
stitchSOPlrscale2 = lens _stitchSOPlrscale2 (\a b -> a {_stitchSOPlrscale2 = b})
stitchSOPdir :: Lens' SOP (Maybe (Tree Int))
stitchSOPdir = lens _stitchSOPdir (\a b -> a {_stitchSOPdir = b})
stitchSOPlrscale1 :: Lens' SOP (Maybe (Tree Float))
stitchSOPlrscale1 = lens _stitchSOPlrscale1 (\a b -> a {_stitchSOPlrscale1 = b})
stitchSOPdostitch :: Lens' SOP (Maybe (Tree Bool))
stitchSOPdostitch = lens _stitchSOPdostitch (\a b -> a {_stitchSOPdostitch = b})
stitchSOPtolerance :: Lens' SOP (Maybe (Tree Float))
stitchSOPtolerance = lens _stitchSOPtolerance (\a b -> a {_stitchSOPtolerance = b})

extrudeSOPdofuse :: Lens' SOP (Maybe (Tree Int))
extrudeSOPdofuse = lens _extrudeSOPdofuse (\a b -> a {_extrudeSOPdofuse = b})
extrudeSOPbacktype :: Lens' SOP (Maybe (Tree Int))
extrudeSOPbacktype = lens _extrudeSOPbacktype (\a b -> a {_extrudeSOPbacktype = b})
extrudeSOPfrontgrp :: Lens' SOP (Maybe (Tree ByteString))
extrudeSOPfrontgrp = lens _extrudeSOPfrontgrp (\a b -> a {_extrudeSOPfrontgrp = b})
extrudeSOPinitextrude :: Lens' SOP (Maybe (Tree Bool))
extrudeSOPinitextrude = lens _extrudeSOPinitextrude (\a b -> a {_extrudeSOPinitextrude = b})
extrudeSOPnewg :: Lens' SOP (Maybe (Tree Bool))
extrudeSOPnewg = lens _extrudeSOPnewg (\a b -> a {_extrudeSOPnewg = b})
extrudeSOPxsectiongrp :: Lens' SOP (Maybe (Tree ByteString))
extrudeSOPxsectiongrp = lens _extrudeSOPxsectiongrp (\a b -> a {_extrudeSOPxsectiongrp = b})
extrudeSOPthickxlate :: Lens' SOP (Maybe (Tree Float))
extrudeSOPthickxlate = lens _extrudeSOPthickxlate (\a b -> a {_extrudeSOPthickxlate = b})
extrudeSOPdepthscale :: Lens' SOP (Maybe (Tree Float))
extrudeSOPdepthscale = lens _extrudeSOPdepthscale (\a b -> a {_extrudeSOPdepthscale = b})
extrudeSOPbackgrp :: Lens' SOP (Maybe (Tree ByteString))
extrudeSOPbackgrp = lens _extrudeSOPbackgrp (\a b -> a {_extrudeSOPbackgrp = b})
extrudeSOPdepthxlate :: Lens' SOP (Maybe (Tree Float))
extrudeSOPdepthxlate = lens _extrudeSOPdepthxlate (\a b -> a {_extrudeSOPdepthxlate = b})
extrudeSOPdocusp :: Lens' SOP (Maybe (Tree Bool))
extrudeSOPdocusp = lens _extrudeSOPdocusp (\a b -> a {_extrudeSOPdocusp = b})
extrudeSOPsidetype :: Lens' SOP (Maybe (Tree Int))
extrudeSOPsidetype = lens _extrudeSOPsidetype (\a b -> a {_extrudeSOPsidetype = b})
extrudeSOPsidegrp :: Lens' SOP (Maybe (Tree ByteString))
extrudeSOPsidegrp = lens _extrudeSOPsidegrp (\a b -> a {_extrudeSOPsidegrp = b})
extrudeSOPthickscale :: Lens' SOP (Maybe (Tree Float))
extrudeSOPthickscale = lens _extrudeSOPthickscale (\a b -> a {_extrudeSOPthickscale = b})
extrudeSOPsourcegrp :: Lens' SOP (Maybe (Tree ByteString))
extrudeSOPsourcegrp = lens _extrudeSOPsourcegrp (\a b -> a {_extrudeSOPsourcegrp = b})
extrudeSOPfronttype :: Lens' SOP (Maybe (Tree Int))
extrudeSOPfronttype = lens _extrudeSOPfronttype (\a b -> a {_extrudeSOPfronttype = b})
extrudeSOPsharefaces :: Lens' SOP (Maybe (Tree Bool))
extrudeSOPsharefaces = lens _extrudeSOPsharefaces (\a b -> a {_extrudeSOPsharefaces = b})
extrudeSOPremovesharedsides :: Lens' SOP (Maybe (Tree Bool))
extrudeSOPremovesharedsides = lens _extrudeSOPremovesharedsides (\a b -> a {_extrudeSOPremovesharedsides = b})
extrudeSOPvertex :: Lens' SOP (Maybe (Tree Int))
extrudeSOPvertex = lens _extrudeSOPvertex (\a b -> a {_extrudeSOPvertex = b})
extrudeSOPcuspangle :: Lens' SOP (Maybe (Tree Float))
extrudeSOPcuspangle = lens _extrudeSOPcuspangle (\a b -> a {_extrudeSOPcuspangle = b})

captureSOPsavesel :: Lens' SOP (Maybe (Tree Bool))
captureSOPsavesel = lens _captureSOPsavesel (\a b -> a {_captureSOPsavesel = b})
captureSOPsavefile :: Lens' SOP (Maybe (Tree ByteString))
captureSOPsavefile = lens _captureSOPsavefile (\a b -> a {_captureSOPsavefile = b})
captureSOPweightfrom :: Lens' SOP (Maybe (Tree Int))
captureSOPweightfrom = lens _captureSOPweightfrom (\a b -> a {_captureSOPweightfrom = b})
captureSOPautoincr :: Lens' SOP (Maybe (Tree Bool))
captureSOPautoincr = lens _captureSOPautoincr (\a b -> a {_captureSOPautoincr = b})
captureSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
captureSOPgroup = lens _captureSOPgroup (\a b -> a {_captureSOPgroup = b})
captureSOPcolor :: Lens' SOP (Maybe (Tree Int))
captureSOPcolor = lens _captureSOPcolor (\a b -> a {_captureSOPcolor = b})
captureSOPcaptframe :: Lens' SOP (Maybe (Tree Int))
captureSOPcaptframe = lens _captureSOPcaptframe (\a b -> a {_captureSOPcaptframe = b})
captureSOPsavecaptfile :: Lens' SOP (Maybe (Tree Bool))
captureSOPsavecaptfile = lens _captureSOPsavecaptfile (\a b -> a {_captureSOPsavecaptfile = b})
captureSOPcaptfile :: Lens' SOP (Maybe (Tree ByteString))
captureSOPcaptfile = lens _captureSOPcaptfile (\a b -> a {_captureSOPcaptfile = b})

metaballSOPkernel :: Lens' SOP (Maybe (Tree ByteString))
metaballSOPkernel = lens _metaballSOPkernel (\a b -> a {_metaballSOPkernel = b})
metaballSOPt :: Lens' SOP (Vec3)
metaballSOPt = lens _metaballSOPt (\a b -> a {_metaballSOPt = b})
metaballSOPnormals :: Lens' SOP (Maybe (Tree Bool))
metaballSOPnormals = lens _metaballSOPnormals (\a b -> a {_metaballSOPnormals = b})
metaballSOPmetaweight :: Lens' SOP (Maybe (Tree Float))
metaballSOPmetaweight = lens _metaballSOPmetaweight (\a b -> a {_metaballSOPmetaweight = b})
metaballSOPrad :: Lens' SOP (Vec3)
metaballSOPrad = lens _metaballSOPrad (\a b -> a {_metaballSOPrad = b})
metaballSOPexpxy :: Lens' SOP (Maybe (Tree Float))
metaballSOPexpxy = lens _metaballSOPexpxy (\a b -> a {_metaballSOPexpxy = b})
metaballSOPmodifybounds :: Lens' SOP (Maybe (Tree Bool))
metaballSOPmodifybounds = lens _metaballSOPmodifybounds (\a b -> a {_metaballSOPmodifybounds = b})
metaballSOPexpz :: Lens' SOP (Maybe (Tree Float))
metaballSOPexpz = lens _metaballSOPexpz (\a b -> a {_metaballSOPexpz = b})

pointSOPcustom3 :: Lens' SOP (Maybe (Tree ByteString))
pointSOPcustom3 = lens _pointSOPcustom3 (\a b -> a {_pointSOPcustom3 = b})
pointSOPcustom3val1 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom3val1 = lens _pointSOPcustom3val1 (\a b -> a {_pointSOPcustom3val1 = b})
pointSOPcustom4type :: Lens' SOP (Maybe (Tree Int))
pointSOPcustom4type = lens _pointSOPcustom4type (\a b -> a {_pointSOPcustom4type = b})
pointSOPalpha :: Lens' SOP (Maybe (Tree Float))
pointSOPalpha = lens _pointSOPalpha (\a b -> a {_pointSOPalpha = b})
pointSOPradiusf :: Lens' SOP (Maybe (Tree Float))
pointSOPradiusf = lens _pointSOPradiusf (\a b -> a {_pointSOPradiusf = b})
pointSOPscalef :: Lens' SOP (Maybe (Tree Float))
pointSOPscalef = lens _pointSOPscalef (\a b -> a {_pointSOPscalef = b})
pointSOPspringk :: Lens' SOP (Maybe (Tree Float))
pointSOPspringk = lens _pointSOPspringk (\a b -> a {_pointSOPspringk = b})
pointSOPdotension :: Lens' SOP (Maybe (Tree Int))
pointSOPdotension = lens _pointSOPdotension (\a b -> a {_pointSOPdotension = b})
pointSOPdonml :: Lens' SOP (Maybe (Tree Int))
pointSOPdonml = lens _pointSOPdonml (\a b -> a {_pointSOPdonml = b})
pointSOPcustom1type :: Lens' SOP (Maybe (Tree Int))
pointSOPcustom1type = lens _pointSOPcustom1type (\a b -> a {_pointSOPcustom1type = b})
pointSOPcustom1val3 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom1val3 = lens _pointSOPcustom1val3 (\a b -> a {_pointSOPcustom1val3 = b})
pointSOPcustom4val4 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom4val4 = lens _pointSOPcustom4val4 (\a b -> a {_pointSOPcustom4val4 = b})
pointSOPradialf :: Lens' SOP (Maybe (Tree Float))
pointSOPradialf = lens _pointSOPradialf (\a b -> a {_pointSOPradialf = b})
pointSOPdomass :: Lens' SOP (Maybe (Tree Int))
pointSOPdomass = lens _pointSOPdomass (\a b -> a {_pointSOPdomass = b})
pointSOPcustom2val4 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom2val4 = lens _pointSOPcustom2val4 (\a b -> a {_pointSOPcustom2val4 = b})
pointSOPdoedgef :: Lens' SOP (Maybe (Tree Int))
pointSOPdoedgef = lens _pointSOPdoedgef (\a b -> a {_pointSOPdoedgef = b})
pointSOPcustom1val4 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom1val4 = lens _pointSOPcustom1val4 (\a b -> a {_pointSOPcustom1val4 = b})
pointSOPdodirf :: Lens' SOP (Maybe (Tree Int))
pointSOPdodirf = lens _pointSOPdodirf (\a b -> a {_pointSOPdodirf = b})
pointSOPdrag :: Lens' SOP (Maybe (Tree Float))
pointSOPdrag = lens _pointSOPdrag (\a b -> a {_pointSOPdrag = b})
pointSOPdonormalf :: Lens' SOP (Maybe (Tree Int))
pointSOPdonormalf = lens _pointSOPdonormalf (\a b -> a {_pointSOPdonormalf = b})
pointSOPmass :: Lens' SOP (Maybe (Tree Float))
pointSOPmass = lens _pointSOPmass (\a b -> a {_pointSOPmass = b})
pointSOPdovel :: Lens' SOP (Maybe (Tree Int))
pointSOPdovel = lens _pointSOPdovel (\a b -> a {_pointSOPdovel = b})
pointSOPdoweight :: Lens' SOP (Maybe (Tree Int))
pointSOPdoweight = lens _pointSOPdoweight (\a b -> a {_pointSOPdoweight = b})
pointSOPdopscale :: Lens' SOP (Maybe (Tree Int))
pointSOPdopscale = lens _pointSOPdopscale (\a b -> a {_pointSOPdopscale = b})
pointSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
pointSOPgroup = lens _pointSOPgroup (\a b -> a {_pointSOPgroup = b})
pointSOPcustom2val1 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom2val1 = lens _pointSOPcustom2val1 (\a b -> a {_pointSOPcustom2val1 = b})
pointSOPv :: Lens' SOP (Vec3)
pointSOPv = lens _pointSOPv (\a b -> a {_pointSOPv = b})
pointSOPdoup :: Lens' SOP (Maybe (Tree Int))
pointSOPdoup = lens _pointSOPdoup (\a b -> a {_pointSOPdoup = b})
pointSOPdoclr :: Lens' SOP (Maybe (Tree Int))
pointSOPdoclr = lens _pointSOPdoclr (\a b -> a {_pointSOPdoclr = b})
pointSOPcustom3type :: Lens' SOP (Maybe (Tree Int))
pointSOPcustom3type = lens _pointSOPcustom3type (\a b -> a {_pointSOPcustom3type = b})
pointSOPcustom4val2 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom4val2 = lens _pointSOPcustom4val2 (\a b -> a {_pointSOPcustom4val2 = b})
pointSOPweight :: Lens' SOP (Maybe (Tree Float))
pointSOPweight = lens _pointSOPweight (\a b -> a {_pointSOPweight = b})
pointSOPcustom2 :: Lens' SOP (Maybe (Tree ByteString))
pointSOPcustom2 = lens _pointSOPcustom2 (\a b -> a {_pointSOPcustom2 = b})
pointSOPcustom1 :: Lens' SOP (Maybe (Tree ByteString))
pointSOPcustom1 = lens _pointSOPcustom1 (\a b -> a {_pointSOPcustom1 = b})
pointSOPdiff :: Lens' SOP (Vec3)
pointSOPdiff = lens _pointSOPdiff (\a b -> a {_pointSOPdiff = b})
pointSOPdoradius :: Lens' SOP (Maybe (Tree Int))
pointSOPdoradius = lens _pointSOPdoradius (\a b -> a {_pointSOPdoradius = b})
pointSOPdirf :: Lens' SOP (Vec3)
pointSOPdirf = lens _pointSOPdirf (\a b -> a {_pointSOPdirf = b})
pointSOPup :: Lens' SOP (Vec3)
pointSOPup = lens _pointSOPup (\a b -> a {_pointSOPup = b})
pointSOPcustom4val3 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom4val3 = lens _pointSOPcustom4val3 (\a b -> a {_pointSOPcustom4val3 = b})
pointSOPcustom3val3 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom3val3 = lens _pointSOPcustom3val3 (\a b -> a {_pointSOPcustom3val3 = b})
pointSOPcustom2val2 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom2val2 = lens _pointSOPcustom2val2 (\a b -> a {_pointSOPcustom2val2 = b})
pointSOPdoscale :: Lens' SOP (Maybe (Tree Int))
pointSOPdoscale = lens _pointSOPdoscale (\a b -> a {_pointSOPdoscale = b})
pointSOPcustom1val2 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom1val2 = lens _pointSOPcustom1val2 (\a b -> a {_pointSOPcustom1val2 = b})
pointSOPedgef :: Lens' SOP (Maybe (Tree Float))
pointSOPedgef = lens _pointSOPedgef (\a b -> a {_pointSOPedgef = b})
pointSOPtension :: Lens' SOP (Maybe (Tree Float))
pointSOPtension = lens _pointSOPtension (\a b -> a {_pointSOPtension = b})
pointSOPt :: Lens' SOP (Vec3)
pointSOPt = lens _pointSOPt (\a b -> a {_pointSOPt = b})
pointSOPdoradialf :: Lens' SOP (Maybe (Tree Int))
pointSOPdoradialf = lens _pointSOPdoradialf (\a b -> a {_pointSOPdoradialf = b})
pointSOPcustom4 :: Lens' SOP (Maybe (Tree ByteString))
pointSOPcustom4 = lens _pointSOPcustom4 (\a b -> a {_pointSOPcustom4 = b})
pointSOPmap :: Lens' SOP (Vec3)
pointSOPmap = lens _pointSOPmap (\a b -> a {_pointSOPmap = b})
pointSOPcustom3val2 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom3val2 = lens _pointSOPcustom3val2 (\a b -> a {_pointSOPcustom3val2 = b})
pointSOPcustom4val1 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom4val1 = lens _pointSOPcustom4val1 (\a b -> a {_pointSOPcustom4val1 = b})
pointSOPcustom1val1 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom1val1 = lens _pointSOPcustom1val1 (\a b -> a {_pointSOPcustom1val1 = b})
pointSOPcustom2type :: Lens' SOP (Maybe (Tree Int))
pointSOPcustom2type = lens _pointSOPcustom2type (\a b -> a {_pointSOPcustom2type = b})
pointSOPdouvw :: Lens' SOP (Maybe (Tree Int))
pointSOPdouvw = lens _pointSOPdouvw (\a b -> a {_pointSOPdouvw = b})
pointSOPnormalf :: Lens' SOP (Maybe (Tree Float))
pointSOPnormalf = lens _pointSOPnormalf (\a b -> a {_pointSOPnormalf = b})
pointSOPpscale :: Lens' SOP (Maybe (Tree Float))
pointSOPpscale = lens _pointSOPpscale (\a b -> a {_pointSOPpscale = b})
pointSOPcustom3val4 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom3val4 = lens _pointSOPcustom3val4 (\a b -> a {_pointSOPcustom3val4 = b})
pointSOPcustom2val3 :: Lens' SOP (Maybe (Tree Float))
pointSOPcustom2val3 = lens _pointSOPcustom2val3 (\a b -> a {_pointSOPcustom2val3 = b})
pointSOPdospringk :: Lens' SOP (Maybe (Tree Int))
pointSOPdospringk = lens _pointSOPdospringk (\a b -> a {_pointSOPdospringk = b})
pointSOPn :: Lens' SOP (Vec3)
pointSOPn = lens _pointSOPn (\a b -> a {_pointSOPn = b})

convertSOPlodtrim :: Lens' SOP (Maybe (Tree Float))
convertSOPlodtrim = lens _convertSOPlodtrim (\a b -> a {_convertSOPlodtrim = b})
convertSOPfromtype :: Lens' SOP (Maybe (Tree Int))
convertSOPfromtype = lens _convertSOPfromtype (\a b -> a {_convertSOPfromtype = b})
convertSOPsurftype :: Lens' SOP (Maybe (Tree Int))
convertSOPsurftype = lens _convertSOPsurftype (\a b -> a {_convertSOPsurftype = b})
convertSOPdivu :: Lens' SOP (Maybe (Tree Int))
convertSOPdivu = lens _convertSOPdivu (\a b -> a {_convertSOPdivu = b})
convertSOPdivtrim :: Lens' SOP (Maybe (Tree Int))
convertSOPdivtrim = lens _convertSOPdivtrim (\a b -> a {_convertSOPdivtrim = b})
convertSOPinterphull :: Lens' SOP (Maybe (Tree Bool))
convertSOPinterphull = lens _convertSOPinterphull (\a b -> a {_convertSOPinterphull = b})
convertSOPlodu :: Lens' SOP (Maybe (Tree Float))
convertSOPlodu = lens _convertSOPlodu (\a b -> a {_convertSOPlodu = b})
convertSOPlodv :: Lens' SOP (Maybe (Tree Float))
convertSOPlodv = lens _convertSOPlodv (\a b -> a {_convertSOPlodv = b})
convertSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
convertSOPgroup = lens _convertSOPgroup (\a b -> a {_convertSOPgroup = b})
convertSOPorderv :: Lens' SOP (Maybe (Tree Int))
convertSOPorderv = lens _convertSOPorderv (\a b -> a {_convertSOPorderv = b})
convertSOPprtype :: Lens' SOP (Maybe (Tree Int))
convertSOPprtype = lens _convertSOPprtype (\a b -> a {_convertSOPprtype = b})
convertSOPdivv :: Lens' SOP (Maybe (Tree Int))
convertSOPdivv = lens _convertSOPdivv (\a b -> a {_convertSOPdivv = b})
convertSOPorderu :: Lens' SOP (Maybe (Tree Int))
convertSOPorderu = lens _convertSOPorderu (\a b -> a {_convertSOPorderu = b})
convertSOPtotype :: Lens' SOP (Maybe (Tree Int))
convertSOPtotype = lens _convertSOPtotype (\a b -> a {_convertSOPtotype = b})
convertSOPnew :: Lens' SOP (Maybe (Tree Bool))
convertSOPnew = lens _convertSOPnew (\a b -> a {_convertSOPnew = b})

limitSOPchanz :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchanz = lens _limitSOPchanz (\a b -> a {_limitSOPchanz = b})
limitSOPchanb :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchanb = lens _limitSOPchanb (\a b -> a {_limitSOPchanb = b})
limitSOPchanrad :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchanrad = lens _limitSOPchanrad (\a b -> a {_limitSOPchanrad = b})
limitSOPzlimitmin :: Lens' SOP (Maybe (Tree Float))
limitSOPzlimitmin = lens _limitSOPzlimitmin (\a b -> a {_limitSOPzlimitmin = b})
limitSOPcustomattrib0chan1 :: Lens' SOP (Maybe (Tree ByteString))
limitSOPcustomattrib0chan1 = lens _limitSOPcustomattrib0chan1 (\a b -> a {_limitSOPcustomattrib0chan1 = b})
limitSOPcustomattrib1chan2 :: Lens' SOP (Maybe (Tree ByteString))
limitSOPcustomattrib1chan2 = lens _limitSOPcustomattrib1chan2 (\a b -> a {_limitSOPcustomattrib1chan2 = b})
limitSOPchanrz :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchanrz = lens _limitSOPchanrz (\a b -> a {_limitSOPchanrz = b})
limitSOPtexturew :: Lens' SOP (Maybe (Tree ByteString))
limitSOPtexturew = lens _limitSOPtexturew (\a b -> a {_limitSOPtexturew = b})
limitSOPrad :: Lens' SOP (Maybe (Tree Float))
limitSOPrad = lens _limitSOPrad (\a b -> a {_limitSOPrad = b})
limitSOPtexture :: Lens' SOP (Maybe (Tree Bool))
limitSOPtexture = lens _limitSOPtexture (\a b -> a {_limitSOPtexture = b})
limitSOPoutput :: Lens' SOP (Maybe (Tree Int))
limitSOPoutput = lens _limitSOPoutput (\a b -> a {_limitSOPoutput = b})
limitSOPcustomattrib1chan0 :: Lens' SOP (Maybe (Tree ByteString))
limitSOPcustomattrib1chan0 = lens _limitSOPcustomattrib1chan0 (\a b -> a {_limitSOPcustomattrib1chan0 = b})
limitSOPtexoffset2 :: Lens' SOP (Maybe (Tree Float))
limitSOPtexoffset2 = lens _limitSOPtexoffset2 (\a b -> a {_limitSOPtexoffset2 = b})
limitSOPzlimitmax :: Lens' SOP (Maybe (Tree Float))
limitSOPzlimitmax = lens _limitSOPzlimitmax (\a b -> a {_limitSOPzlimitmax = b})
limitSOPcustomattrib1chan3 :: Lens' SOP (Maybe (Tree ByteString))
limitSOPcustomattrib1chan3 = lens _limitSOPcustomattrib1chan3 (\a b -> a {_limitSOPcustomattrib1chan3 = b})
limitSOPchanry :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchanry = lens _limitSOPchanry (\a b -> a {_limitSOPchanry = b})
limitSOPcustomattrib0chan2 :: Lens' SOP (Maybe (Tree ByteString))
limitSOPcustomattrib0chan2 = lens _limitSOPcustomattrib0chan2 (\a b -> a {_limitSOPcustomattrib0chan2 = b})
limitSOProtate :: Lens' SOP (Vec3)
limitSOProtate = lens _limitSOProtate (\a b -> a {_limitSOProtate = b})
limitSOPchanrx :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchanrx = lens _limitSOPchanrx (\a b -> a {_limitSOPchanrx = b})
limitSOPdorotate :: Lens' SOP (Maybe (Tree Int))
limitSOPdorotate = lens _limitSOPdorotate (\a b -> a {_limitSOPdorotate = b})
limitSOPcustomattrib1chan1 :: Lens' SOP (Maybe (Tree ByteString))
limitSOPcustomattrib1chan1 = lens _limitSOPcustomattrib1chan1 (\a b -> a {_limitSOPcustomattrib1chan1 = b})
limitSOPflipsmooth :: Lens' SOP (Maybe (Tree Float))
limitSOPflipsmooth = lens _limitSOPflipsmooth (\a b -> a {_limitSOPflipsmooth = b})
limitSOPchanalpha :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchanalpha = lens _limitSOPchanalpha (\a b -> a {_limitSOPchanalpha = b})
limitSOPchop :: Lens' SOP (Maybe (Tree CHOP))
limitSOPchop = lens _limitSOPchop (\a b -> a {_limitSOPchop = b})
limitSOPchanx :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchanx = lens _limitSOPchanx (\a b -> a {_limitSOPchanx = b})
limitSOPxlimitmax :: Lens' SOP (Maybe (Tree Float))
limitSOPxlimitmax = lens _limitSOPxlimitmax (\a b -> a {_limitSOPxlimitmax = b})
limitSOPylimitmin :: Lens' SOP (Maybe (Tree Float))
limitSOPylimitmin = lens _limitSOPylimitmin (\a b -> a {_limitSOPylimitmin = b})
limitSOPchanradx :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchanradx = lens _limitSOPchanradx (\a b -> a {_limitSOPchanradx = b})
limitSOPtexscale1 :: Lens' SOP (Maybe (Tree Float))
limitSOPtexscale1 = lens _limitSOPtexscale1 (\a b -> a {_limitSOPtexscale1 = b})
limitSOPchang :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchang = lens _limitSOPchang (\a b -> a {_limitSOPchang = b})
limitSOPchanradz :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchanradz = lens _limitSOPchanradz (\a b -> a {_limitSOPchanradz = b})
limitSOPcustomattrib1 :: Lens' SOP (Maybe (Tree ByteString))
limitSOPcustomattrib1 = lens _limitSOPcustomattrib1 (\a b -> a {_limitSOPcustomattrib1 = b})
limitSOPcustomattrib0chan0 :: Lens' SOP (Maybe (Tree ByteString))
limitSOPcustomattrib0chan0 = lens _limitSOPcustomattrib0chan0 (\a b -> a {_limitSOPcustomattrib0chan0 = b})
limitSOPchanr :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchanr = lens _limitSOPchanr (\a b -> a {_limitSOPchanr = b})
limitSOPcustomattrib0 :: Lens' SOP (Maybe (Tree ByteString))
limitSOPcustomattrib0 = lens _limitSOPcustomattrib0 (\a b -> a {_limitSOPcustomattrib0 = b})
limitSOPtexoffset1 :: Lens' SOP (Maybe (Tree Float))
limitSOPtexoffset1 = lens _limitSOPtexoffset1 (\a b -> a {_limitSOPtexoffset1 = b})
limitSOPdivisions :: Lens' SOP (Maybe (Tree Int))
limitSOPdivisions = lens _limitSOPdivisions (\a b -> a {_limitSOPdivisions = b})
limitSOPtexscale2 :: Lens' SOP (Maybe (Tree Float))
limitSOPtexscale2 = lens _limitSOPtexscale2 (\a b -> a {_limitSOPtexscale2 = b})
limitSOPcustomattrib0chan3 :: Lens' SOP (Maybe (Tree ByteString))
limitSOPcustomattrib0chan3 = lens _limitSOPcustomattrib0chan3 (\a b -> a {_limitSOPcustomattrib0chan3 = b})
limitSOPnormals :: Lens' SOP (Maybe (Tree Bool))
limitSOPnormals = lens _limitSOPnormals (\a b -> a {_limitSOPnormals = b})
limitSOPylimitmax :: Lens' SOP (Maybe (Tree Float))
limitSOPylimitmax = lens _limitSOPylimitmax (\a b -> a {_limitSOPylimitmax = b})
limitSOPxlimitmin :: Lens' SOP (Maybe (Tree Float))
limitSOPxlimitmin = lens _limitSOPxlimitmin (\a b -> a {_limitSOPxlimitmin = b})
limitSOPchany :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchany = lens _limitSOPchany (\a b -> a {_limitSOPchany = b})
limitSOPrord :: Lens' SOP (Maybe (Tree Int))
limitSOPrord = lens _limitSOPrord (\a b -> a {_limitSOPrord = b})
limitSOPchanrady :: Lens' SOP (Maybe (Tree ByteString))
limitSOPchanrady = lens _limitSOPchanrady (\a b -> a {_limitSOPchanrady = b})
limitSOPorient :: Lens' SOP (Maybe (Tree Bool))
limitSOPorient = lens _limitSOPorient (\a b -> a {_limitSOPorient = b})
limitSOPdolimit :: Lens' SOP (Maybe (Tree Int))
limitSOPdolimit = lens _limitSOPdolimit (\a b -> a {_limitSOPdolimit = b})

booleanSOPcreategroup :: Lens' SOP (Maybe (Tree Bool))
booleanSOPcreategroup = lens _booleanSOPcreategroup (\a b -> a {_booleanSOPcreategroup = b})
booleanSOPgroupa :: Lens' SOP (Maybe (Tree ByteString))
booleanSOPgroupa = lens _booleanSOPgroupa (\a b -> a {_booleanSOPgroupa = b})
booleanSOPaccattrib :: Lens' SOP (Maybe (Tree Bool))
booleanSOPaccattrib = lens _booleanSOPaccattrib (\a b -> a {_booleanSOPaccattrib = b})
booleanSOPbooleanop :: Lens' SOP (Maybe (Tree Int))
booleanSOPbooleanop = lens _booleanSOPbooleanop (\a b -> a {_booleanSOPbooleanop = b})
booleanSOPgroupb :: Lens' SOP (Maybe (Tree ByteString))
booleanSOPgroupb = lens _booleanSOPgroupb (\a b -> a {_booleanSOPgroupb = b})

kinectSOPnormals :: Lens' SOP (Maybe (Tree Bool))
kinectSOPnormals = lens _kinectSOPnormals (\a b -> a {_kinectSOPnormals = b})
kinectSOPskeleton :: Lens' SOP (Maybe (Tree Int))
kinectSOPskeleton = lens _kinectSOPskeleton (\a b -> a {_kinectSOPskeleton = b})
kinectSOPhwversion :: Lens' SOP (Maybe (Tree Int))
kinectSOPhwversion = lens _kinectSOPhwversion (\a b -> a {_kinectSOPhwversion = b})
kinectSOPneardepthmode :: Lens' SOP (Maybe (Tree Bool))
kinectSOPneardepthmode = lens _kinectSOPneardepthmode (\a b -> a {_kinectSOPneardepthmode = b})
kinectSOPsensor :: Lens' SOP (Maybe (Tree ByteString))
kinectSOPsensor = lens _kinectSOPsensor (\a b -> a {_kinectSOPsensor = b})

materialSOPmat :: Lens' SOP (Maybe (Tree MAT))
materialSOPmat = lens _materialSOPmat (\a b -> a {_materialSOPmat = b})

sweepSOPcycle :: Lens' SOP (Maybe (Tree Int))
sweepSOPcycle = lens _sweepSOPcycle (\a b -> a {_sweepSOPcycle = b})
sweepSOPpathgrp :: Lens' SOP (Maybe (Tree ByteString))
sweepSOPpathgrp = lens _sweepSOPpathgrp (\a b -> a {_sweepSOPpathgrp = b})
sweepSOPangle :: Lens' SOP (Maybe (Tree Bool))
sweepSOPangle = lens _sweepSOPangle (\a b -> a {_sweepSOPangle = b})
sweepSOPrefgrp :: Lens' SOP (Maybe (Tree ByteString))
sweepSOPrefgrp = lens _sweepSOPrefgrp (\a b -> a {_sweepSOPrefgrp = b})
sweepSOPaimatref :: Lens' SOP (Maybe (Tree Bool))
sweepSOPaimatref = lens _sweepSOPaimatref (\a b -> a {_sweepSOPaimatref = b})
sweepSOPfast :: Lens' SOP (Maybe (Tree Bool))
sweepSOPfast = lens _sweepSOPfast (\a b -> a {_sweepSOPfast = b})
sweepSOProll :: Lens' SOP (Maybe (Tree Float))
sweepSOProll = lens _sweepSOProll (\a b -> a {_sweepSOProll = b})
sweepSOPtwist :: Lens' SOP (Maybe (Tree Float))
sweepSOPtwist = lens _sweepSOPtwist (\a b -> a {_sweepSOPtwist = b})
sweepSOPnoflip :: Lens' SOP (Maybe (Tree Bool))
sweepSOPnoflip = lens _sweepSOPnoflip (\a b -> a {_sweepSOPnoflip = b})
sweepSOPskin :: Lens' SOP (Maybe (Tree Int))
sweepSOPskin = lens _sweepSOPskin (\a b -> a {_sweepSOPskin = b})
sweepSOPsweepgrp :: Lens' SOP (Maybe (Tree ByteString))
sweepSOPsweepgrp = lens _sweepSOPsweepgrp (\a b -> a {_sweepSOPsweepgrp = b})
sweepSOPnewg :: Lens' SOP (Maybe (Tree Bool))
sweepSOPnewg = lens _sweepSOPnewg (\a b -> a {_sweepSOPnewg = b})
sweepSOPusevtx :: Lens' SOP (Maybe (Tree Bool))
sweepSOPusevtx = lens _sweepSOPusevtx (\a b -> a {_sweepSOPusevtx = b})
sweepSOPxgrp :: Lens' SOP (Maybe (Tree ByteString))
sweepSOPxgrp = lens _sweepSOPxgrp (\a b -> a {_sweepSOPxgrp = b})
sweepSOPscale :: Lens' SOP (Maybe (Tree Float))
sweepSOPscale = lens _sweepSOPscale (\a b -> a {_sweepSOPscale = b})
sweepSOPvertex :: Lens' SOP (Maybe (Tree Int))
sweepSOPvertex = lens _sweepSOPvertex (\a b -> a {_sweepSOPvertex = b})
sweepSOPskipcoin :: Lens' SOP (Maybe (Tree Bool))
sweepSOPskipcoin = lens _sweepSOPskipcoin (\a b -> a {_sweepSOPskipcoin = b})

trimSOPoptype :: Lens' SOP (Maybe (Tree Int))
trimSOPoptype = lens _trimSOPoptype (\a b -> a {_trimSOPoptype = b})
trimSOPtrimtol :: Lens' SOP (Maybe (Tree Float))
trimSOPtrimtol = lens _trimSOPtrimtol (\a b -> a {_trimSOPtrimtol = b})
trimSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
trimSOPgroup = lens _trimSOPgroup (\a b -> a {_trimSOPgroup = b})
trimSOPaltitude :: Lens' SOP (Maybe (Tree Int))
trimSOPaltitude = lens _trimSOPaltitude (\a b -> a {_trimSOPaltitude = b})
trimSOPbigloop :: Lens' SOP (Maybe (Tree Bool))
trimSOPbigloop = lens _trimSOPbigloop (\a b -> a {_trimSOPbigloop = b})
trimSOPindividual :: Lens' SOP (Maybe (Tree Bool))
trimSOPindividual = lens _trimSOPindividual (\a b -> a {_trimSOPindividual = b})

outSOPlabel :: Lens' SOP (Maybe (Tree ByteString))
outSOPlabel = lens _outSOPlabel (\a b -> a {_outSOPlabel = b})

bridgeSOProtatet3 :: Lens' SOP (Maybe (Tree Float))
bridgeSOProtatet3 = lens _bridgeSOProtatet3 (\a b -> a {_bridgeSOProtatet3 = b})
bridgeSOPisodivs :: Lens' SOP (Maybe (Tree Int))
bridgeSOPisodivs = lens _bridgeSOPisodivs (\a b -> a {_bridgeSOPisodivs = b})
bridgeSOPcsharp :: Lens' SOP (Maybe (Tree Bool))
bridgeSOPcsharp = lens _bridgeSOPcsharp (\a b -> a {_bridgeSOPcsharp = b})
bridgeSOPcircular :: Lens' SOP (Maybe (Tree Bool))
bridgeSOPcircular = lens _bridgeSOPcircular (\a b -> a {_bridgeSOPcircular = b})
bridgeSOPscalet3 :: Lens' SOP (Maybe (Tree Float))
bridgeSOPscalet3 = lens _bridgeSOPscalet3 (\a b -> a {_bridgeSOPscalet3 = b})
bridgeSOPsdivs :: Lens' SOP (Maybe (Tree Int))
bridgeSOPsdivs = lens _bridgeSOPsdivs (\a b -> a {_bridgeSOPsdivs = b})
bridgeSOPinc :: Lens' SOP (Maybe (Tree Int))
bridgeSOPinc = lens _bridgeSOPinc (\a b -> a {_bridgeSOPinc = b})
bridgeSOPfrenet :: Lens' SOP (Maybe (Tree Int))
bridgeSOPfrenet = lens _bridgeSOPfrenet (\a b -> a {_bridgeSOPfrenet = b})
bridgeSOPscalet1 :: Lens' SOP (Maybe (Tree Float))
bridgeSOPscalet1 = lens _bridgeSOPscalet1 (\a b -> a {_bridgeSOPscalet1 = b})
bridgeSOPscalec2 :: Lens' SOP (Maybe (Tree Float))
bridgeSOPscalec2 = lens _bridgeSOPscalec2 (\a b -> a {_bridgeSOPscalec2 = b})
bridgeSOProtatet2 :: Lens' SOP (Maybe (Tree Float))
bridgeSOProtatet2 = lens _bridgeSOProtatet2 (\a b -> a {_bridgeSOProtatet2 = b})
bridgeSOPtolerance :: Lens' SOP (Maybe (Tree Float))
bridgeSOPtolerance = lens _bridgeSOPtolerance (\a b -> a {_bridgeSOPtolerance = b})
bridgeSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
bridgeSOPgroup = lens _bridgeSOPgroup (\a b -> a {_bridgeSOPgroup = b})
bridgeSOPbridge :: Lens' SOP (Maybe (Tree Int))
bridgeSOPbridge = lens _bridgeSOPbridge (\a b -> a {_bridgeSOPbridge = b})
bridgeSOProtatet1 :: Lens' SOP (Maybe (Tree Float))
bridgeSOProtatet1 = lens _bridgeSOProtatet1 (\a b -> a {_bridgeSOProtatet1 = b})
bridgeSOPscalec3 :: Lens' SOP (Maybe (Tree Float))
bridgeSOPscalec3 = lens _bridgeSOPscalec3 (\a b -> a {_bridgeSOPscalec3 = b})
bridgeSOPscalet2 :: Lens' SOP (Maybe (Tree Float))
bridgeSOPscalet2 = lens _bridgeSOPscalet2 (\a b -> a {_bridgeSOPscalet2 = b})
bridgeSOPcurvature :: Lens' SOP (Maybe (Tree Bool))
bridgeSOPcurvature = lens _bridgeSOPcurvature (\a b -> a {_bridgeSOPcurvature = b})
bridgeSOPorder :: Lens' SOP (Maybe (Tree Int))
bridgeSOPorder = lens _bridgeSOPorder (\a b -> a {_bridgeSOPorder = b})
bridgeSOPscalec1 :: Lens' SOP (Maybe (Tree Float))
bridgeSOPscalec1 = lens _bridgeSOPscalec1 (\a b -> a {_bridgeSOPscalec1 = b})

facetSOPinline :: Lens' SOP (Maybe (Tree Bool))
facetSOPinline = lens _facetSOPinline (\a b -> a {_facetSOPinline = b})
facetSOPremove :: Lens' SOP (Maybe (Tree Bool))
facetSOPremove = lens _facetSOPremove (\a b -> a {_facetSOPremove = b})
facetSOPangle :: Lens' SOP (Maybe (Tree Float))
facetSOPangle = lens _facetSOPangle (\a b -> a {_facetSOPangle = b})
facetSOPprenml :: Lens' SOP (Maybe (Tree Bool))
facetSOPprenml = lens _facetSOPprenml (\a b -> a {_facetSOPprenml = b})
facetSOPcusp :: Lens' SOP (Maybe (Tree Bool))
facetSOPcusp = lens _facetSOPcusp (\a b -> a {_facetSOPcusp = b})
facetSOPinlinedist :: Lens' SOP (Maybe (Tree Float))
facetSOPinlinedist = lens _facetSOPinlinedist (\a b -> a {_facetSOPinlinedist = b})
facetSOPpostnml :: Lens' SOP (Maybe (Tree Bool))
facetSOPpostnml = lens _facetSOPpostnml (\a b -> a {_facetSOPpostnml = b})
facetSOPdist :: Lens' SOP (Maybe (Tree Float))
facetSOPdist = lens _facetSOPdist (\a b -> a {_facetSOPdist = b})
facetSOPunit :: Lens' SOP (Maybe (Tree Bool))
facetSOPunit = lens _facetSOPunit (\a b -> a {_facetSOPunit = b})
facetSOPorientpolys :: Lens' SOP (Maybe (Tree Bool))
facetSOPorientpolys = lens _facetSOPorientpolys (\a b -> a {_facetSOPorientpolys = b})
facetSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
facetSOPgroup = lens _facetSOPgroup (\a b -> a {_facetSOPgroup = b})
facetSOPunique :: Lens' SOP (Maybe (Tree Bool))
facetSOPunique = lens _facetSOPunique (\a b -> a {_facetSOPunique = b})
facetSOPcons :: Lens' SOP (Maybe (Tree Int))
facetSOPcons = lens _facetSOPcons (\a b -> a {_facetSOPcons = b})

surfsectSOPstep :: Lens' SOP (Maybe (Tree Int))
surfsectSOPstep = lens _surfsectSOPstep (\a b -> a {_surfsectSOPstep = b})
surfsectSOPtol2d :: Lens' SOP (Maybe (Tree Float))
surfsectSOPtol2d = lens _surfsectSOPtol2d (\a b -> a {_surfsectSOPtol2d = b})
surfsectSOPinsidea :: Lens' SOP (Maybe (Tree Bool))
surfsectSOPinsidea = lens _surfsectSOPinsidea (\a b -> a {_surfsectSOPinsidea = b})
surfsectSOPmindholes :: Lens' SOP (Maybe (Tree Bool))
surfsectSOPmindholes = lens _surfsectSOPmindholes (\a b -> a {_surfsectSOPmindholes = b})
surfsectSOPboolop :: Lens' SOP (Maybe (Tree Int))
surfsectSOPboolop = lens _surfsectSOPboolop (\a b -> a {_surfsectSOPboolop = b})
surfsectSOPjoin :: Lens' SOP (Maybe (Tree Bool))
surfsectSOPjoin = lens _surfsectSOPjoin (\a b -> a {_surfsectSOPjoin = b})
surfsectSOPprofilesa :: Lens' SOP (Maybe (Tree ByteString))
surfsectSOPprofilesa = lens _surfsectSOPprofilesa (\a b -> a {_surfsectSOPprofilesa = b})
surfsectSOPinsideb :: Lens' SOP (Maybe (Tree Bool))
surfsectSOPinsideb = lens _surfsectSOPinsideb (\a b -> a {_surfsectSOPinsideb = b})
surfsectSOPcreategroupa :: Lens' SOP (Maybe (Tree Bool))
surfsectSOPcreategroupa = lens _surfsectSOPcreategroupa (\a b -> a {_surfsectSOPcreategroupa = b})
surfsectSOPoutsideb :: Lens' SOP (Maybe (Tree Bool))
surfsectSOPoutsideb = lens _surfsectSOPoutsideb (\a b -> a {_surfsectSOPoutsideb = b})
surfsectSOPcreategroupb :: Lens' SOP (Maybe (Tree Bool))
surfsectSOPcreategroupb = lens _surfsectSOPcreategroupb (\a b -> a {_surfsectSOPcreategroupb = b})
surfsectSOPoutsidea :: Lens' SOP (Maybe (Tree Bool))
surfsectSOPoutsidea = lens _surfsectSOPoutsidea (\a b -> a {_surfsectSOPoutsidea = b})
surfsectSOPprofilesb :: Lens' SOP (Maybe (Tree ByteString))
surfsectSOPprofilesb = lens _surfsectSOPprofilesb (\a b -> a {_surfsectSOPprofilesb = b})
surfsectSOPgroupb :: Lens' SOP (Maybe (Tree ByteString))
surfsectSOPgroupb = lens _surfsectSOPgroupb (\a b -> a {_surfsectSOPgroupb = b})
surfsectSOPtol3d :: Lens' SOP (Maybe (Tree Float))
surfsectSOPtol3d = lens _surfsectSOPtol3d (\a b -> a {_surfsectSOPtol3d = b})
surfsectSOPgroupa :: Lens' SOP (Maybe (Tree ByteString))
surfsectSOPgroupa = lens _surfsectSOPgroupa (\a b -> a {_surfsectSOPgroupa = b})
surfsectSOPtarget :: Lens' SOP (Maybe (Tree Int))
surfsectSOPtarget = lens _surfsectSOPtarget (\a b -> a {_surfsectSOPtarget = b})

raySOPhitgrp :: Lens' SOP (Maybe (Tree ByteString))
raySOPhitgrp = lens _raySOPhitgrp (\a b -> a {_raySOPhitgrp = b})
raySOPnewgrp :: Lens' SOP (Maybe (Tree Bool))
raySOPnewgrp = lens _raySOPnewgrp (\a b -> a {_raySOPnewgrp = b})
raySOPdotrans :: Lens' SOP (Maybe (Tree Bool))
raySOPdotrans = lens _raySOPdotrans (\a b -> a {_raySOPdotrans = b})
raySOPputdist :: Lens' SOP (Maybe (Tree Bool))
raySOPputdist = lens _raySOPputdist (\a b -> a {_raySOPputdist = b})
raySOPlift :: Lens' SOP (Maybe (Tree Float))
raySOPlift = lens _raySOPlift (\a b -> a {_raySOPlift = b})
raySOPseed :: Lens' SOP (Maybe (Tree Int))
raySOPseed = lens _raySOPseed (\a b -> a {_raySOPseed = b})
raySOPlookfar :: Lens' SOP (Maybe (Tree Bool))
raySOPlookfar = lens _raySOPlookfar (\a b -> a {_raySOPlookfar = b})
raySOPgroup :: Lens' SOP (Maybe (Tree ByteString))
raySOPgroup = lens _raySOPgroup (\a b -> a {_raySOPgroup = b})
raySOPbounces :: Lens' SOP (Maybe (Tree Int))
raySOPbounces = lens _raySOPbounces (\a b -> a {_raySOPbounces = b})
raySOPbouncegeo :: Lens' SOP (Maybe (Tree Bool))
raySOPbouncegeo = lens _raySOPbouncegeo (\a b -> a {_raySOPbouncegeo = b})
raySOPscale :: Lens' SOP (Maybe (Tree Float))
raySOPscale = lens _raySOPscale (\a b -> a {_raySOPscale = b})
raySOPnormal :: Lens' SOP (Maybe (Tree Int))
raySOPnormal = lens _raySOPnormal (\a b -> a {_raySOPnormal = b})
raySOPmethod :: Lens' SOP (Maybe (Tree Int))
raySOPmethod = lens _raySOPmethod (\a b -> a {_raySOPmethod = b})
raySOPjitter :: Lens' SOP (Maybe (Tree Float))
raySOPjitter = lens _raySOPjitter (\a b -> a {_raySOPjitter = b})
raySOPsample :: Lens' SOP (Maybe (Tree Int))
raySOPsample = lens _raySOPsample (\a b -> a {_raySOPsample = b})

bonegroupSOPbonesperpoint :: Lens' SOP (Maybe (Tree Int))
bonegroupSOPbonesperpoint = lens _bonegroupSOPbonesperpoint (\a b -> a {_bonegroupSOPbonesperpoint = b})
bonegroupSOPbonespergroup :: Lens' SOP (Maybe (Tree Int))
bonegroupSOPbonespergroup = lens _bonegroupSOPbonespergroup (\a b -> a {_bonegroupSOPbonespergroup = b})

torusSOPcols :: Lens' SOP (Maybe (Tree Int))
torusSOPcols = lens _torusSOPcols (\a b -> a {_torusSOPcols = b})
torusSOPsurftype :: Lens' SOP (Maybe (Tree Int))
torusSOPsurftype = lens _torusSOPsurftype (\a b -> a {_torusSOPsurftype = b})
torusSOPendanglev :: Lens' SOP (Maybe (Tree Float))
torusSOPendanglev = lens _torusSOPendanglev (\a b -> a {_torusSOPendanglev = b})
torusSOPclosev :: Lens' SOP (Maybe (Tree Bool))
torusSOPclosev = lens _torusSOPclosev (\a b -> a {_torusSOPclosev = b})
torusSOPbeginangleu :: Lens' SOP (Maybe (Tree Float))
torusSOPbeginangleu = lens _torusSOPbeginangleu (\a b -> a {_torusSOPbeginangleu = b})
torusSOPorderv :: Lens' SOP (Maybe (Tree Int))
torusSOPorderv = lens _torusSOPorderv (\a b -> a {_torusSOPorderv = b})
torusSOPrad :: Lens' SOP (Vec2)
torusSOPrad = lens _torusSOPrad (\a b -> a {_torusSOPrad = b})
torusSOPtexture :: Lens' SOP (Maybe (Tree Int))
torusSOPtexture = lens _torusSOPtexture (\a b -> a {_torusSOPtexture = b})
torusSOPangleoffset :: Lens' SOP (Maybe (Tree Float))
torusSOPangleoffset = lens _torusSOPangleoffset (\a b -> a {_torusSOPangleoffset = b})
torusSOPcapu :: Lens' SOP (Maybe (Tree Bool))
torusSOPcapu = lens _torusSOPcapu (\a b -> a {_torusSOPcapu = b})
torusSOPendangleu :: Lens' SOP (Maybe (Tree Float))
torusSOPendangleu = lens _torusSOPendangleu (\a b -> a {_torusSOPendangleu = b})
torusSOPtype :: Lens' SOP (Maybe (Tree Int))
torusSOPtype = lens _torusSOPtype (\a b -> a {_torusSOPtype = b})
torusSOPnormals :: Lens' SOP (Maybe (Tree Bool))
torusSOPnormals = lens _torusSOPnormals (\a b -> a {_torusSOPnormals = b})
torusSOPbeginanglev :: Lens' SOP (Maybe (Tree Float))
torusSOPbeginanglev = lens _torusSOPbeginanglev (\a b -> a {_torusSOPbeginanglev = b})
torusSOPorderu :: Lens' SOP (Maybe (Tree Int))
torusSOPorderu = lens _torusSOPorderu (\a b -> a {_torusSOPorderu = b})
torusSOPcapv :: Lens' SOP (Maybe (Tree Bool))
torusSOPcapv = lens _torusSOPcapv (\a b -> a {_torusSOPcapv = b})
torusSOProws :: Lens' SOP (Maybe (Tree Int))
torusSOProws = lens _torusSOProws (\a b -> a {_torusSOProws = b})
torusSOPimperfect :: Lens' SOP (Maybe (Tree Bool))
torusSOPimperfect = lens _torusSOPimperfect (\a b -> a {_torusSOPimperfect = b})
torusSOPcloseu :: Lens' SOP (Maybe (Tree Bool))
torusSOPcloseu = lens _torusSOPcloseu (\a b -> a {_torusSOPcloseu = b})
torusSOPmodifybounds :: Lens' SOP (Maybe (Tree Bool))
torusSOPmodifybounds = lens _torusSOPmodifybounds (\a b -> a {_torusSOPmodifybounds = b})
torusSOPorient :: Lens' SOP (Maybe (Tree Int))
torusSOPorient = lens _torusSOPorient (\a b -> a {_torusSOPorient = b})
torusSOPt :: Lens' SOP (Vec3)
torusSOPt = lens _torusSOPt (\a b -> a {_torusSOPt = b})

wireframeSOPfast :: Lens' SOP (Maybe (Tree Bool))
wireframeSOPfast = lens _wireframeSOPfast (\a b -> a {_wireframeSOPfast = b})
wireframeSOPradius :: Lens' SOP (Maybe (Tree Float))
wireframeSOPradius = lens _wireframeSOPradius (\a b -> a {_wireframeSOPradius = b})
wireframeSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
wireframeSOPgroup = lens _wireframeSOPgroup (\a b -> a {_wireframeSOPgroup = b})
wireframeSOPcorners :: Lens' SOP (Maybe (Tree Bool))
wireframeSOPcorners = lens _wireframeSOPcorners (\a b -> a {_wireframeSOPcorners = b})
wireframeSOPremove :: Lens' SOP (Maybe (Tree Bool))
wireframeSOPremove = lens _wireframeSOPremove (\a b -> a {_wireframeSOPremove = b})
wireframeSOPcaps :: Lens' SOP (Maybe (Tree Bool))
wireframeSOPcaps = lens _wireframeSOPcaps (\a b -> a {_wireframeSOPcaps = b})

addSOPusept0 :: Lens' SOP (Maybe (Tree Bool))
addSOPusept0 = lens _addSOPusept0 (\a b -> a {_addSOPusept0 = b})
addSOPpt4 :: Lens' SOP (Vec3)
addSOPpt4 = lens _addSOPpt4 (\a b -> a {_addSOPpt4 = b})
addSOPpointdat :: Lens' SOP (Maybe (Tree DAT))
addSOPpointdat = lens _addSOPpointdat (\a b -> a {_addSOPpointdat = b})
addSOPusept3 :: Lens' SOP (Maybe (Tree Bool))
addSOPusept3 = lens _addSOPusept3 (\a b -> a {_addSOPusept3 = b})
addSOPadd :: Lens' SOP (Maybe (Tree Int))
addSOPadd = lens _addSOPadd (\a b -> a {_addSOPadd = b})
addSOPclosed3 :: Lens' SOP (Maybe (Tree Bool))
addSOPclosed3 = lens _addSOPclosed3 (\a b -> a {_addSOPclosed3 = b})
addSOPprim4 :: Lens' SOP (Maybe (Tree ByteString))
addSOPprim4 = lens _addSOPprim4 (\a b -> a {_addSOPprim4 = b})
addSOPclosed4 :: Lens' SOP (Maybe (Tree Bool))
addSOPclosed4 = lens _addSOPclosed4 (\a b -> a {_addSOPclosed4 = b})
addSOPprim0 :: Lens' SOP (Maybe (Tree ByteString))
addSOPprim0 = lens _addSOPprim0 (\a b -> a {_addSOPprim0 = b})
addSOPusept4 :: Lens' SOP (Maybe (Tree Bool))
addSOPusept4 = lens _addSOPusept4 (\a b -> a {_addSOPusept4 = b})
addSOPpt1 :: Lens' SOP (Vec3)
addSOPpt1 = lens _addSOPpt1 (\a b -> a {_addSOPpt1 = b})
addSOPkeep :: Lens' SOP (Maybe (Tree Bool))
addSOPkeep = lens _addSOPkeep (\a b -> a {_addSOPkeep = b})
addSOPprim3 :: Lens' SOP (Maybe (Tree ByteString))
addSOPprim3 = lens _addSOPprim3 (\a b -> a {_addSOPprim3 = b})
addSOPweight2 :: Lens' SOP (Maybe (Tree Float))
addSOPweight2 = lens _addSOPweight2 (\a b -> a {_addSOPweight2 = b})
addSOPusept2 :: Lens' SOP (Maybe (Tree Bool))
addSOPusept2 = lens _addSOPusept2 (\a b -> a {_addSOPusept2 = b})
addSOPclosed1 :: Lens' SOP (Maybe (Tree Bool))
addSOPclosed1 = lens _addSOPclosed1 (\a b -> a {_addSOPclosed1 = b})
addSOPweight5 :: Lens' SOP (Maybe (Tree Float))
addSOPweight5 = lens _addSOPweight5 (\a b -> a {_addSOPweight5 = b})
addSOPpt3 :: Lens' SOP (Vec3)
addSOPpt3 = lens _addSOPpt3 (\a b -> a {_addSOPpt3 = b})
addSOPweight3 :: Lens' SOP (Maybe (Tree Float))
addSOPweight3 = lens _addSOPweight3 (\a b -> a {_addSOPweight3 = b})
addSOPremove :: Lens' SOP (Maybe (Tree Bool))
addSOPremove = lens _addSOPremove (\a b -> a {_addSOPremove = b})
addSOPnamedattribs :: Lens' SOP (Maybe (Tree Bool))
addSOPnamedattribs = lens _addSOPnamedattribs (\a b -> a {_addSOPnamedattribs = b})
addSOPprim5 :: Lens' SOP (Maybe (Tree ByteString))
addSOPprim5 = lens _addSOPprim5 (\a b -> a {_addSOPprim5 = b})
addSOPclosed5 :: Lens' SOP (Maybe (Tree Bool))
addSOPclosed5 = lens _addSOPclosed5 (\a b -> a {_addSOPclosed5 = b})
addSOPpt2 :: Lens' SOP (Vec3)
addSOPpt2 = lens _addSOPpt2 (\a b -> a {_addSOPpt2 = b})
addSOPnormals :: Lens' SOP (Maybe (Tree Bool))
addSOPnormals = lens _addSOPnormals (\a b -> a {_addSOPnormals = b})
addSOPusept5 :: Lens' SOP (Maybe (Tree Bool))
addSOPusept5 = lens _addSOPusept5 (\a b -> a {_addSOPusept5 = b})
addSOPpolydat :: Lens' SOP (Maybe (Tree DAT))
addSOPpolydat = lens _addSOPpolydat (\a b -> a {_addSOPpolydat = b})
addSOPclosed0 :: Lens' SOP (Maybe (Tree Bool))
addSOPclosed0 = lens _addSOPclosed0 (\a b -> a {_addSOPclosed0 = b})
addSOPpt5 :: Lens' SOP (Vec3)
addSOPpt5 = lens _addSOPpt5 (\a b -> a {_addSOPpt5 = b})
addSOPweight1 :: Lens' SOP (Maybe (Tree Float))
addSOPweight1 = lens _addSOPweight1 (\a b -> a {_addSOPweight1 = b})
addSOPweight4 :: Lens' SOP (Maybe (Tree Float))
addSOPweight4 = lens _addSOPweight4 (\a b -> a {_addSOPweight4 = b})
addSOPinc :: Lens' SOP (Maybe (Tree Int))
addSOPinc = lens _addSOPinc (\a b -> a {_addSOPinc = b})
addSOPclosedall :: Lens' SOP (Maybe (Tree Bool))
addSOPclosedall = lens _addSOPclosedall (\a b -> a {_addSOPclosedall = b})
addSOPclosed2 :: Lens' SOP (Maybe (Tree Bool))
addSOPclosed2 = lens _addSOPclosed2 (\a b -> a {_addSOPclosed2 = b})
addSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
addSOPgroup = lens _addSOPgroup (\a b -> a {_addSOPgroup = b})
addSOPprim1 :: Lens' SOP (Maybe (Tree ByteString))
addSOPprim1 = lens _addSOPprim1 (\a b -> a {_addSOPprim1 = b})
addSOPusept1 :: Lens' SOP (Maybe (Tree Bool))
addSOPusept1 = lens _addSOPusept1 (\a b -> a {_addSOPusept1 = b})
addSOPpt0 :: Lens' SOP (Vec3)
addSOPpt0 = lens _addSOPpt0 (\a b -> a {_addSOPpt0 = b})
addSOPprim2 :: Lens' SOP (Maybe (Tree ByteString))
addSOPprim2 = lens _addSOPprim2 (\a b -> a {_addSOPprim2 = b})
addSOPweight0 :: Lens' SOP (Maybe (Tree Float))
addSOPweight0 = lens _addSOPweight0 (\a b -> a {_addSOPweight0 = b})

textureSOPxord :: Lens' SOP (Maybe (Tree Int))
textureSOPxord = lens _textureSOPxord (\a b -> a {_textureSOPxord = b})
textureSOPtype :: Lens' SOP (Maybe (Tree Int))
textureSOPtype = lens _textureSOPtype (\a b -> a {_textureSOPtype = b})
textureSOPangle :: Lens' SOP (Maybe (Tree Float))
textureSOPangle = lens _textureSOPangle (\a b -> a {_textureSOPangle = b})
textureSOPs :: Lens' SOP (Vec3)
textureSOPs = lens _textureSOPs (\a b -> a {_textureSOPs = b})
textureSOPp :: Lens' SOP (Vec3)
textureSOPp = lens _textureSOPp (\a b -> a {_textureSOPp = b})
textureSOPoffset :: Lens' SOP (Vec3)
textureSOPoffset = lens _textureSOPoffset (\a b -> a {_textureSOPoffset = b})
textureSOPrord :: Lens' SOP (Maybe (Tree Int))
textureSOPrord = lens _textureSOPrord (\a b -> a {_textureSOPrord = b})
textureSOPcoord :: Lens' SOP (Maybe (Tree Int))
textureSOPcoord = lens _textureSOPcoord (\a b -> a {_textureSOPcoord = b})
textureSOPscaletwo :: Lens' SOP (Vec3)
textureSOPscaletwo = lens _textureSOPscaletwo (\a b -> a {_textureSOPscaletwo = b})
textureSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
textureSOPgroup = lens _textureSOPgroup (\a b -> a {_textureSOPgroup = b})
textureSOPfixseams :: Lens' SOP (Maybe (Tree Bool))
textureSOPfixseams = lens _textureSOPfixseams (\a b -> a {_textureSOPfixseams = b})
textureSOPtexlayer :: Lens' SOP (Maybe (Tree Int))
textureSOPtexlayer = lens _textureSOPtexlayer (\a b -> a {_textureSOPtexlayer = b})
textureSOPt :: Lens' SOP (Vec3)
textureSOPt = lens _textureSOPt (\a b -> a {_textureSOPt = b})
textureSOPaxis :: Lens' SOP (Maybe (Tree Int))
textureSOPaxis = lens _textureSOPaxis (\a b -> a {_textureSOPaxis = b})
textureSOPr :: Lens' SOP (Vec3)
textureSOPr = lens _textureSOPr (\a b -> a {_textureSOPr = b})

deformSOPdelcaptatr :: Lens' SOP (Maybe (Tree Bool))
deformSOPdelcaptatr = lens _deformSOPdelcaptatr (\a b -> a {_deformSOPdelcaptatr = b})
deformSOPdelcolatr :: Lens' SOP (Maybe (Tree Bool))
deformSOPdelcolatr = lens _deformSOPdelcolatr (\a b -> a {_deformSOPdelcolatr = b})
deformSOPdonormal :: Lens' SOP (Maybe (Tree Bool))
deformSOPdonormal = lens _deformSOPdonormal (\a b -> a {_deformSOPdonormal = b})
deformSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
deformSOPgroup = lens _deformSOPgroup (\a b -> a {_deformSOPgroup = b})

openvrSOPmodel :: Lens' SOP (Maybe (Tree ByteString))
openvrSOPmodel = lens _openvrSOPmodel (\a b -> a {_openvrSOPmodel = b})

curvesectSOPextractpt :: Lens' SOP (Maybe (Tree Bool))
curvesectSOPextractpt = lens _curvesectSOPextractpt (\a b -> a {_curvesectSOPextractpt = b})
curvesectSOPleft :: Lens' SOP (Maybe (Tree Int))
curvesectSOPleft = lens _curvesectSOPleft (\a b -> a {_curvesectSOPleft = b})
curvesectSOPkeeporiginal :: Lens' SOP (Maybe (Tree Bool))
curvesectSOPkeeporiginal = lens _curvesectSOPkeeporiginal (\a b -> a {_curvesectSOPkeeporiginal = b})
curvesectSOPleftgroup :: Lens' SOP (Maybe (Tree ByteString))
curvesectSOPleftgroup = lens _curvesectSOPleftgroup (\a b -> a {_curvesectSOPleftgroup = b})
curvesectSOPrightgroup :: Lens' SOP (Maybe (Tree ByteString))
curvesectSOPrightgroup = lens _curvesectSOPrightgroup (\a b -> a {_curvesectSOPrightgroup = b})
curvesectSOPxsect :: Lens' SOP (Maybe (Tree Bool))
curvesectSOPxsect = lens _curvesectSOPxsect (\a b -> a {_curvesectSOPxsect = b})
curvesectSOPright :: Lens' SOP (Maybe (Tree Int))
curvesectSOPright = lens _curvesectSOPright (\a b -> a {_curvesectSOPright = b})
curvesectSOPtolerance :: Lens' SOP (Maybe (Tree Float))
curvesectSOPtolerance = lens _curvesectSOPtolerance (\a b -> a {_curvesectSOPtolerance = b})
curvesectSOPaffect :: Lens' SOP (Maybe (Tree Int))
curvesectSOPaffect = lens _curvesectSOPaffect (\a b -> a {_curvesectSOPaffect = b})

lsystemSOPvertinc :: Lens' SOP (Maybe (Tree Float))
lsystemSOPvertinc = lens _lsystemSOPvertinc (\a b -> a {_lsystemSOPvertinc = b})
lsystemSOPcols :: Lens' SOP (Maybe (Tree Int))
lsystemSOPcols = lens _lsystemSOPcols (\a b -> a {_lsystemSOPcols = b})
lsystemSOPcolormap :: Lens' SOP (Maybe (Tree TOP))
lsystemSOPcolormap = lens _lsystemSOPcolormap (\a b -> a {_lsystemSOPcolormap = b})
lsystemSOPcontangl :: Lens' SOP (Maybe (Tree Bool))
lsystemSOPcontangl = lens _lsystemSOPcontangl (\a b -> a {_lsystemSOPcontangl = b})
lsystemSOPcontwidth :: Lens' SOP (Maybe (Tree Bool))
lsystemSOPcontwidth = lens _lsystemSOPcontwidth (\a b -> a {_lsystemSOPcontwidth = b})
lsystemSOPthickinit :: Lens' SOP (Maybe (Tree Float))
lsystemSOPthickinit = lens _lsystemSOPthickinit (\a b -> a {_lsystemSOPthickinit = b})
lsystemSOPpointwidth :: Lens' SOP (Maybe (Tree Bool))
lsystemSOPpointwidth = lens _lsystemSOPpointwidth (\a b -> a {_lsystemSOPpointwidth = b})
lsystemSOPgenerations :: Lens' SOP (Maybe (Tree Float))
lsystemSOPgenerations = lens _lsystemSOPgenerations (\a b -> a {_lsystemSOPgenerations = b})
lsystemSOPstampa :: Lens' SOP (Maybe (Tree ByteString))
lsystemSOPstampa = lens _lsystemSOPstampa (\a b -> a {_lsystemSOPstampa = b})
lsystemSOPinc :: Lens' SOP (Vec2)
lsystemSOPinc = lens _lsystemSOPinc (\a b -> a {_lsystemSOPinc = b})
lsystemSOPvarc :: Lens' SOP (Maybe (Tree Float))
lsystemSOPvarc = lens _lsystemSOPvarc (\a b -> a {_lsystemSOPvarc = b})
lsystemSOPgrpprefix :: Lens' SOP (Maybe (Tree ByteString))
lsystemSOPgrpprefix = lens _lsystemSOPgrpprefix (\a b -> a {_lsystemSOPgrpprefix = b})
lsystemSOPstampb :: Lens' SOP (Maybe (Tree ByteString))
lsystemSOPstampb = lens _lsystemSOPstampb (\a b -> a {_lsystemSOPstampb = b})
lsystemSOPsmooth :: Lens' SOP (Maybe (Tree Float))
lsystemSOPsmooth = lens _lsystemSOPsmooth (\a b -> a {_lsystemSOPsmooth = b})
lsystemSOPdocolor :: Lens' SOP (Maybe (Tree Bool))
lsystemSOPdocolor = lens _lsystemSOPdocolor (\a b -> a {_lsystemSOPdocolor = b})
lsystemSOProws :: Lens' SOP (Maybe (Tree Int))
lsystemSOProws = lens _lsystemSOProws (\a b -> a {_lsystemSOProws = b})
lsystemSOPvarb :: Lens' SOP (Maybe (Tree Float))
lsystemSOPvarb = lens _lsystemSOPvarb (\a b -> a {_lsystemSOPvarb = b})
lsystemSOPcontlength :: Lens' SOP (Maybe (Tree Bool))
lsystemSOPcontlength = lens _lsystemSOPcontlength (\a b -> a {_lsystemSOPcontlength = b})
lsystemSOPrandseed :: Lens' SOP (Maybe (Tree Int))
lsystemSOPrandseed = lens _lsystemSOPrandseed (\a b -> a {_lsystemSOPrandseed = b})
lsystemSOPtension :: Lens' SOP (Maybe (Tree Float))
lsystemSOPtension = lens _lsystemSOPtension (\a b -> a {_lsystemSOPtension = b})
lsystemSOPtype :: Lens' SOP (Maybe (Tree Int))
lsystemSOPtype = lens _lsystemSOPtype (\a b -> a {_lsystemSOPtype = b})
lsystemSOPgravity :: Lens' SOP (Maybe (Tree Float))
lsystemSOPgravity = lens _lsystemSOPgravity (\a b -> a {_lsystemSOPgravity = b})
lsystemSOPrules :: Lens' SOP (Maybe (Tree DAT))
lsystemSOPrules = lens _lsystemSOPrules (\a b -> a {_lsystemSOPrules = b})
lsystemSOPpictop :: Lens' SOP (Maybe (Tree TOP))
lsystemSOPpictop = lens _lsystemSOPpictop (\a b -> a {_lsystemSOPpictop = b})
lsystemSOPstepscale :: Lens' SOP (Maybe (Tree Float))
lsystemSOPstepscale = lens _lsystemSOPstepscale (\a b -> a {_lsystemSOPstepscale = b})
lsystemSOPanglescale :: Lens' SOP (Maybe (Tree Float))
lsystemSOPanglescale = lens _lsystemSOPanglescale (\a b -> a {_lsystemSOPanglescale = b})
lsystemSOPrandscale :: Lens' SOP (Maybe (Tree Float))
lsystemSOPrandscale = lens _lsystemSOPrandscale (\a b -> a {_lsystemSOPrandscale = b})
lsystemSOPchanprefix :: Lens' SOP (Maybe (Tree ByteString))
lsystemSOPchanprefix = lens _lsystemSOPchanprefix (\a b -> a {_lsystemSOPchanprefix = b})
lsystemSOPstepinit :: Lens' SOP (Maybe (Tree Float))
lsystemSOPstepinit = lens _lsystemSOPstepinit (\a b -> a {_lsystemSOPstepinit = b})
lsystemSOPthickscale :: Lens' SOP (Maybe (Tree Float))
lsystemSOPthickscale = lens _lsystemSOPthickscale (\a b -> a {_lsystemSOPthickscale = b})
lsystemSOPstampc :: Lens' SOP (Maybe (Tree ByteString))
lsystemSOPstampc = lens _lsystemSOPstampc (\a b -> a {_lsystemSOPstampc = b})
lsystemSOPangleinit :: Lens' SOP (Maybe (Tree Float))
lsystemSOPangleinit = lens _lsystemSOPangleinit (\a b -> a {_lsystemSOPangleinit = b})
lsystemSOPdotexture :: Lens' SOP (Maybe (Tree Bool))
lsystemSOPdotexture = lens _lsystemSOPdotexture (\a b -> a {_lsystemSOPdotexture = b})
lsystemSOPvard :: Lens' SOP (Maybe (Tree Float))
lsystemSOPvard = lens _lsystemSOPvard (\a b -> a {_lsystemSOPvard = b})

fractalSOPvtxnms :: Lens' SOP (Maybe (Tree Bool))
fractalSOPvtxnms = lens _fractalSOPvtxnms (\a b -> a {_fractalSOPvtxnms = b})
fractalSOPsmooth :: Lens' SOP (Maybe (Tree Float))
fractalSOPsmooth = lens _fractalSOPsmooth (\a b -> a {_fractalSOPsmooth = b})
fractalSOPfixed :: Lens' SOP (Maybe (Tree Bool))
fractalSOPfixed = lens _fractalSOPfixed (\a b -> a {_fractalSOPfixed = b})
fractalSOPseed :: Lens' SOP (Maybe (Tree Int))
fractalSOPseed = lens _fractalSOPseed (\a b -> a {_fractalSOPseed = b})
fractalSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
fractalSOPgroup = lens _fractalSOPgroup (\a b -> a {_fractalSOPgroup = b})
fractalSOPdivs :: Lens' SOP (Maybe (Tree Int))
fractalSOPdivs = lens _fractalSOPdivs (\a b -> a {_fractalSOPdivs = b})
fractalSOPdir :: Lens' SOP (Vec3)
fractalSOPdir = lens _fractalSOPdir (\a b -> a {_fractalSOPdir = b})
fractalSOPscale :: Lens' SOP (Maybe (Tree Float))
fractalSOPscale = lens _fractalSOPscale (\a b -> a {_fractalSOPscale = b})

copySOPmulvtx :: Lens' SOP (Maybe (Tree ByteString))
copySOPmulvtx = lens _copySOPmulvtx (\a b -> a {_copySOPmulvtx = b})
copySOPnprims :: Lens' SOP (Maybe (Tree Int))
copySOPnprims = lens _copySOPnprims (\a b -> a {_copySOPnprims = b})
copySOPparam8 :: Lens' SOP (Maybe (Tree ByteString))
copySOPparam8 = lens _copySOPparam8 (\a b -> a {_copySOPparam8 = b})
copySOPval6 :: Lens' SOP (Maybe (Tree Float))
copySOPval6 = lens _copySOPval6 (\a b -> a {_copySOPval6 = b})
copySOPvlength :: Lens' SOP (Maybe (Tree Bool))
copySOPvlength = lens _copySOPvlength (\a b -> a {_copySOPvlength = b})
copySOPval3 :: Lens' SOP (Maybe (Tree Float))
copySOPval3 = lens _copySOPval3 (\a b -> a {_copySOPval3 = b})
copySOPsubprim :: Lens' SOP (Maybe (Tree ByteString))
copySOPsubprim = lens _copySOPsubprim (\a b -> a {_copySOPsubprim = b})
copySOPncy :: Lens' SOP (Maybe (Tree Int))
copySOPncy = lens _copySOPncy (\a b -> a {_copySOPncy = b})
copySOPr :: Lens' SOP (Vec3)
copySOPr = lens _copySOPr (\a b -> a {_copySOPr = b})
copySOPval5 :: Lens' SOP (Maybe (Tree Float))
copySOPval5 = lens _copySOPval5 (\a b -> a {_copySOPval5 = b})
copySOPsetpt :: Lens' SOP (Maybe (Tree ByteString))
copySOPsetpt = lens _copySOPsetpt (\a b -> a {_copySOPsetpt = b})
copySOPsubvtx :: Lens' SOP (Maybe (Tree ByteString))
copySOPsubvtx = lens _copySOPsubvtx (\a b -> a {_copySOPsubvtx = b})
copySOPp :: Lens' SOP (Vec3)
copySOPp = lens _copySOPp (\a b -> a {_copySOPp = b})
copySOPval7 :: Lens' SOP (Maybe (Tree Float))
copySOPval7 = lens _copySOPval7 (\a b -> a {_copySOPval7 = b})
copySOPval4 :: Lens' SOP (Maybe (Tree Float))
copySOPval4 = lens _copySOPval4 (\a b -> a {_copySOPval4 = b})
copySOPval2 :: Lens' SOP (Maybe (Tree Float))
copySOPval2 = lens _copySOPval2 (\a b -> a {_copySOPval2 = b})
copySOPval1 :: Lens' SOP (Maybe (Tree Float))
copySOPval1 = lens _copySOPval1 (\a b -> a {_copySOPval1 = b})
copySOPcopyg :: Lens' SOP (Maybe (Tree ByteString))
copySOPcopyg = lens _copySOPcopyg (\a b -> a {_copySOPcopyg = b})
copySOPaddprim :: Lens' SOP (Maybe (Tree ByteString))
copySOPaddprim = lens _copySOPaddprim (\a b -> a {_copySOPaddprim = b})
copySOPaddpt :: Lens' SOP (Maybe (Tree ByteString))
copySOPaddpt = lens _copySOPaddpt (\a b -> a {_copySOPaddpt = b})
copySOPcum :: Lens' SOP (Maybe (Tree Bool))
copySOPcum = lens _copySOPcum (\a b -> a {_copySOPcum = b})
copySOPsetprim :: Lens' SOP (Maybe (Tree ByteString))
copySOPsetprim = lens _copySOPsetprim (\a b -> a {_copySOPsetprim = b})
copySOPparam4 :: Lens' SOP (Maybe (Tree ByteString))
copySOPparam4 = lens _copySOPparam4 (\a b -> a {_copySOPparam4 = b})
copySOPparam10 :: Lens' SOP (Maybe (Tree ByteString))
copySOPparam10 = lens _copySOPparam10 (\a b -> a {_copySOPparam10 = b})
copySOPtemplategrp :: Lens' SOP (Maybe (Tree ByteString))
copySOPtemplategrp = lens _copySOPtemplategrp (\a b -> a {_copySOPtemplategrp = b})
copySOPparam2 :: Lens' SOP (Maybe (Tree ByteString))
copySOPparam2 = lens _copySOPparam2 (\a b -> a {_copySOPparam2 = b})
copySOPupvector :: Lens' SOP (Vec3)
copySOPupvector = lens _copySOPupvector (\a b -> a {_copySOPupvector = b})
copySOPval9 :: Lens' SOP (Maybe (Tree Float))
copySOPval9 = lens _copySOPval9 (\a b -> a {_copySOPval9 = b})
copySOPnewg :: Lens' SOP (Maybe (Tree Bool))
copySOPnewg = lens _copySOPnewg (\a b -> a {_copySOPnewg = b})
copySOPparam1 :: Lens' SOP (Maybe (Tree ByteString))
copySOPparam1 = lens _copySOPparam1 (\a b -> a {_copySOPparam1 = b})
copySOPnml :: Lens' SOP (Maybe (Tree Bool))
copySOPnml = lens _copySOPnml (\a b -> a {_copySOPnml = b})
copySOPparam3 :: Lens' SOP (Maybe (Tree ByteString))
copySOPparam3 = lens _copySOPparam3 (\a b -> a {_copySOPparam3 = b})
copySOPxord :: Lens' SOP (Maybe (Tree Int))
copySOPxord = lens _copySOPxord (\a b -> a {_copySOPxord = b})
copySOPscale :: Lens' SOP (Maybe (Tree Float))
copySOPscale = lens _copySOPscale (\a b -> a {_copySOPscale = b})
copySOPsetvtx :: Lens' SOP (Maybe (Tree ByteString))
copySOPsetvtx = lens _copySOPsetvtx (\a b -> a {_copySOPsetvtx = b})
copySOPparam5 :: Lens' SOP (Maybe (Tree ByteString))
copySOPparam5 = lens _copySOPparam5 (\a b -> a {_copySOPparam5 = b})
copySOPaddvtx :: Lens' SOP (Maybe (Tree ByteString))
copySOPaddvtx = lens _copySOPaddvtx (\a b -> a {_copySOPaddvtx = b})
copySOPs :: Lens' SOP (Vec3)
copySOPs = lens _copySOPs (\a b -> a {_copySOPs = b})
copySOPval10 :: Lens' SOP (Maybe (Tree Float))
copySOPval10 = lens _copySOPval10 (\a b -> a {_copySOPval10 = b})
copySOPparam6 :: Lens' SOP (Maybe (Tree ByteString))
copySOPparam6 = lens _copySOPparam6 (\a b -> a {_copySOPparam6 = b})
copySOPstamp :: Lens' SOP (Maybe (Tree Bool))
copySOPstamp = lens _copySOPstamp (\a b -> a {_copySOPstamp = b})
copySOPparam9 :: Lens' SOP (Maybe (Tree ByteString))
copySOPparam9 = lens _copySOPparam9 (\a b -> a {_copySOPparam9 = b})
copySOPmulpt :: Lens' SOP (Maybe (Tree ByteString))
copySOPmulpt = lens _copySOPmulpt (\a b -> a {_copySOPmulpt = b})
copySOPval8 :: Lens' SOP (Maybe (Tree Float))
copySOPval8 = lens _copySOPval8 (\a b -> a {_copySOPval8 = b})
copySOPparam7 :: Lens' SOP (Maybe (Tree ByteString))
copySOPparam7 = lens _copySOPparam7 (\a b -> a {_copySOPparam7 = b})
copySOPsourcegrp :: Lens' SOP (Maybe (Tree ByteString))
copySOPsourcegrp = lens _copySOPsourcegrp (\a b -> a {_copySOPsourcegrp = b})
copySOPrord :: Lens' SOP (Maybe (Tree Int))
copySOPrord = lens _copySOPrord (\a b -> a {_copySOPrord = b})
copySOPsubpt :: Lens' SOP (Maybe (Tree ByteString))
copySOPsubpt = lens _copySOPsubpt (\a b -> a {_copySOPsubpt = b})
copySOPdoattr :: Lens' SOP (Maybe (Tree Bool))
copySOPdoattr = lens _copySOPdoattr (\a b -> a {_copySOPdoattr = b})
copySOPt :: Lens' SOP (Vec3)
copySOPt = lens _copySOPt (\a b -> a {_copySOPt = b})
copySOPmulprim :: Lens' SOP (Maybe (Tree ByteString))
copySOPmulprim = lens _copySOPmulprim (\a b -> a {_copySOPmulprim = b})

tristripSOPmaxstriplength :: Lens' SOP (Maybe (Tree Int))
tristripSOPmaxstriplength = lens _tristripSOPmaxstriplength (\a b -> a {_tristripSOPmaxstriplength = b})
tristripSOPconstrainstriplength :: Lens' SOP (Maybe (Tree Bool))
tristripSOPconstrainstriplength = lens _tristripSOPconstrainstriplength (\a b -> a {_tristripSOPconstrainstriplength = b})
tristripSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
tristripSOPgroup = lens _tristripSOPgroup (\a b -> a {_tristripSOPgroup = b})

cplusplusSOPplugin :: Lens' SOP (Maybe (Tree ByteString))
cplusplusSOPplugin = lens _cplusplusSOPplugin (\a b -> a {_cplusplusSOPplugin = b})
cplusplusSOPreinitpulse :: Lens' SOP (Maybe (Tree Bool))
cplusplusSOPreinitpulse = lens _cplusplusSOPreinitpulse (\a b -> a {_cplusplusSOPreinitpulse = b})
cplusplusSOPunloadplugin :: Lens' SOP (Maybe (Tree Bool))
cplusplusSOPunloadplugin = lens _cplusplusSOPunloadplugin (\a b -> a {_cplusplusSOPunloadplugin = b})
cplusplusSOPreinit :: Lens' SOP (Maybe (Tree Bool))
cplusplusSOPreinit = lens _cplusplusSOPreinit (\a b -> a {_cplusplusSOPreinit = b})

magnetSOPdeformgrp :: Lens' SOP (Maybe (Tree ByteString))
magnetSOPdeformgrp = lens _magnetSOPdeformgrp (\a b -> a {_magnetSOPdeformgrp = b})
magnetSOPposition :: Lens' SOP (Maybe (Tree Bool))
magnetSOPposition = lens _magnetSOPposition (\a b -> a {_magnetSOPposition = b})
magnetSOPs :: Lens' SOP (Vec3)
magnetSOPs = lens _magnetSOPs (\a b -> a {_magnetSOPs = b})
magnetSOPp :: Lens' SOP (Vec3)
magnetSOPp = lens _magnetSOPp (\a b -> a {_magnetSOPp = b})
magnetSOPcolor :: Lens' SOP (Maybe (Tree Bool))
magnetSOPcolor = lens _magnetSOPcolor (\a b -> a {_magnetSOPcolor = b})
magnetSOPvelocity :: Lens' SOP (Maybe (Tree Bool))
magnetSOPvelocity = lens _magnetSOPvelocity (\a b -> a {_magnetSOPvelocity = b})
magnetSOPmagnetgrp :: Lens' SOP (Maybe (Tree ByteString))
magnetSOPmagnetgrp = lens _magnetSOPmagnetgrp (\a b -> a {_magnetSOPmagnetgrp = b})
magnetSOPrord :: Lens' SOP (Maybe (Tree Int))
magnetSOPrord = lens _magnetSOPrord (\a b -> a {_magnetSOPrord = b})
magnetSOPnml :: Lens' SOP (Maybe (Tree Bool))
magnetSOPnml = lens _magnetSOPnml (\a b -> a {_magnetSOPnml = b})
magnetSOPt :: Lens' SOP (Vec3)
magnetSOPt = lens _magnetSOPt (\a b -> a {_magnetSOPt = b})
magnetSOPxord :: Lens' SOP (Maybe (Tree Int))
magnetSOPxord = lens _magnetSOPxord (\a b -> a {_magnetSOPxord = b})
magnetSOPr :: Lens' SOP (Vec3)
magnetSOPr = lens _magnetSOPr (\a b -> a {_magnetSOPr = b})

rectangleSOPt :: Lens' SOP (Vec3)
rectangleSOPt = lens _rectangleSOPt (\a b -> a {_rectangleSOPt = b})
rectangleSOPnormals :: Lens' SOP (Maybe (Tree Bool))
rectangleSOPnormals = lens _rectangleSOPnormals (\a b -> a {_rectangleSOPnormals = b})
rectangleSOPcamz :: Lens' SOP (Maybe (Tree Float))
rectangleSOPcamz = lens _rectangleSOPcamz (\a b -> a {_rectangleSOPcamz = b})
rectangleSOPsize :: Lens' SOP (Vec2)
rectangleSOPsize = lens _rectangleSOPsize (\a b -> a {_rectangleSOPsize = b})
rectangleSOPorient :: Lens' SOP (Maybe (Tree Int))
rectangleSOPorient = lens _rectangleSOPorient (\a b -> a {_rectangleSOPorient = b})
rectangleSOPmodifybounds :: Lens' SOP (Maybe (Tree Bool))
rectangleSOPmodifybounds = lens _rectangleSOPmodifybounds (\a b -> a {_rectangleSOPmodifybounds = b})
rectangleSOPtexture :: Lens' SOP (Maybe (Tree Int))
rectangleSOPtexture = lens _rectangleSOPtexture (\a b -> a {_rectangleSOPtexture = b})

sphereSOPcols :: Lens' SOP (Maybe (Tree Int))
sphereSOPcols = lens _sphereSOPcols (\a b -> a {_sphereSOPcols = b})
sphereSOPsurftype :: Lens' SOP (Maybe (Tree Int))
sphereSOPsurftype = lens _sphereSOPsurftype (\a b -> a {_sphereSOPsurftype = b})
sphereSOPtype :: Lens' SOP (Maybe (Tree Int))
sphereSOPtype = lens _sphereSOPtype (\a b -> a {_sphereSOPtype = b})
sphereSOPnormals :: Lens' SOP (Maybe (Tree Bool))
sphereSOPnormals = lens _sphereSOPnormals (\a b -> a {_sphereSOPnormals = b})
sphereSOPtexture :: Lens' SOP (Maybe (Tree Int))
sphereSOPtexture = lens _sphereSOPtexture (\a b -> a {_sphereSOPtexture = b})
sphereSOPaccurate :: Lens' SOP (Maybe (Tree Bool))
sphereSOPaccurate = lens _sphereSOPaccurate (\a b -> a {_sphereSOPaccurate = b})
sphereSOPfreq :: Lens' SOP (Maybe (Tree Int))
sphereSOPfreq = lens _sphereSOPfreq (\a b -> a {_sphereSOPfreq = b})
sphereSOPmodifybounds :: Lens' SOP (Maybe (Tree Bool))
sphereSOPmodifybounds = lens _sphereSOPmodifybounds (\a b -> a {_sphereSOPmodifybounds = b})
sphereSOPimperfect :: Lens' SOP (Maybe (Tree Bool))
sphereSOPimperfect = lens _sphereSOPimperfect (\a b -> a {_sphereSOPimperfect = b})
sphereSOProws :: Lens' SOP (Maybe (Tree Int))
sphereSOProws = lens _sphereSOProws (\a b -> a {_sphereSOProws = b})
sphereSOPrad :: Lens' SOP (Vec3)
sphereSOPrad = lens _sphereSOPrad (\a b -> a {_sphereSOPrad = b})
sphereSOPorderv :: Lens' SOP (Maybe (Tree Int))
sphereSOPorderv = lens _sphereSOPorderv (\a b -> a {_sphereSOPorderv = b})
sphereSOPorient :: Lens' SOP (Maybe (Tree Int))
sphereSOPorient = lens _sphereSOPorient (\a b -> a {_sphereSOPorient = b})
sphereSOPt :: Lens' SOP (Vec3)
sphereSOPt = lens _sphereSOPt (\a b -> a {_sphereSOPt = b})
sphereSOPorderu :: Lens' SOP (Maybe (Tree Int))
sphereSOPorderu = lens _sphereSOPorderu (\a b -> a {_sphereSOPorderu = b})
sphereSOPupole :: Lens' SOP (Maybe (Tree Bool))
sphereSOPupole = lens _sphereSOPupole (\a b -> a {_sphereSOPupole = b})

dattoSOPdetaildat :: Lens' SOP (Maybe (Tree DAT))
dattoSOPdetaildat = lens _dattoSOPdetaildat (\a b -> a {_dattoSOPdetaildat = b})
dattoSOPprtype :: Lens' SOP (Maybe (Tree Int))
dattoSOPprtype = lens _dattoSOPprtype (\a b -> a {_dattoSOPprtype = b})
dattoSOPverticesdat :: Lens' SOP (Maybe (Tree DAT))
dattoSOPverticesdat = lens _dattoSOPverticesdat (\a b -> a {_dattoSOPverticesdat = b})
dattoSOPprimsdat :: Lens' SOP (Maybe (Tree DAT))
dattoSOPprimsdat = lens _dattoSOPprimsdat (\a b -> a {_dattoSOPprimsdat = b})
dattoSOPclosedv :: Lens' SOP (Maybe (Tree Bool))
dattoSOPclosedv = lens _dattoSOPclosedv (\a b -> a {_dattoSOPclosedv = b})
dattoSOPfloat :: Lens' SOP (Maybe (Tree ByteString))
dattoSOPfloat = lens _dattoSOPfloat (\a b -> a {_dattoSOPfloat = b})
dattoSOPstring :: Lens' SOP (Maybe (Tree ByteString))
dattoSOPstring = lens _dattoSOPstring (\a b -> a {_dattoSOPstring = b})
dattoSOPclosed :: Lens' SOP (Maybe (Tree Bool))
dattoSOPclosed = lens _dattoSOPclosed (\a b -> a {_dattoSOPclosed = b})
dattoSOPint :: Lens' SOP (Maybe (Tree ByteString))
dattoSOPint = lens _dattoSOPint (\a b -> a {_dattoSOPint = b})
dattoSOPbuild :: Lens' SOP (Maybe (Tree Int))
dattoSOPbuild = lens _dattoSOPbuild (\a b -> a {_dattoSOPbuild = b})
dattoSOPpointsdat :: Lens' SOP (Maybe (Tree DAT))
dattoSOPpointsdat = lens _dattoSOPpointsdat (\a b -> a {_dattoSOPpointsdat = b})
dattoSOPn :: Lens' SOP (Maybe (Tree Int))
dattoSOPn = lens _dattoSOPn (\a b -> a {_dattoSOPn = b})
dattoSOPmerge :: Lens' SOP (Maybe (Tree Int))
dattoSOPmerge = lens _dattoSOPmerge (\a b -> a {_dattoSOPmerge = b})
dattoSOPconnect :: Lens' SOP (Maybe (Tree Int))
dattoSOPconnect = lens _dattoSOPconnect (\a b -> a {_dattoSOPconnect = b})

textSOPreadingdirection :: Lens' SOP (Maybe (Tree Int))
textSOPreadingdirection = lens _textSOPreadingdirection (\a b -> a {_textSOPreadingdirection = b})
textSOPwordwrap :: Lens' SOP (Maybe (Tree Bool))
textSOPwordwrap = lens _textSOPwordwrap (\a b -> a {_textSOPwordwrap = b})
textSOPitalic :: Lens' SOP (Maybe (Tree Bool))
textSOPitalic = lens _textSOPitalic (\a b -> a {_textSOPitalic = b})
textSOPfontfile :: Lens' SOP (Maybe (Tree ByteString))
textSOPfontfile = lens _textSOPfontfile (\a b -> a {_textSOPfontfile = b})
textSOPalignx :: Lens' SOP (Maybe (Tree Int))
textSOPalignx = lens _textSOPalignx (\a b -> a {_textSOPalignx = b})
textSOPtext :: Lens' SOP (Maybe (Tree ByteString))
textSOPtext = lens _textSOPtext (\a b -> a {_textSOPtext = b})
textSOPxord :: Lens' SOP (Maybe (Tree Int))
textSOPxord = lens _textSOPxord (\a b -> a {_textSOPxord = b})
textSOPr :: Lens' SOP (Vec3)
textSOPr = lens _textSOPr (\a b -> a {_textSOPr = b})
textSOPlegacyparsing :: Lens' SOP (Maybe (Tree Bool))
textSOPlegacyparsing = lens _textSOPlegacyparsing (\a b -> a {_textSOPlegacyparsing = b})
textSOPfontsizey :: Lens' SOP (Maybe (Tree Float))
textSOPfontsizey = lens _textSOPfontsizey (\a b -> a {_textSOPfontsizey = b})
textSOPlinespacing :: Lens' SOP (Maybe (Tree Float))
textSOPlinespacing = lens _textSOPlinespacing (\a b -> a {_textSOPlinespacing = b})
textSOPkeepfontratio :: Lens' SOP (Maybe (Tree Bool))
textSOPkeepfontratio = lens _textSOPkeepfontratio (\a b -> a {_textSOPkeepfontratio = b})
textSOPs :: Lens' SOP (Vec3)
textSOPs = lens _textSOPs (\a b -> a {_textSOPs = b})
textSOPp :: Lens' SOP (Vec3)
textSOPp = lens _textSOPp (\a b -> a {_textSOPp = b})
textSOPlevelofdetail :: Lens' SOP (Maybe (Tree Int))
textSOPlevelofdetail = lens _textSOPlevelofdetail (\a b -> a {_textSOPlevelofdetail = b})
textSOPfontsizex :: Lens' SOP (Maybe (Tree Float))
textSOPfontsizex = lens _textSOPfontsizex (\a b -> a {_textSOPfontsizex = b})
textSOPkerning1 :: Lens' SOP (Maybe (Tree Float))
textSOPkerning1 = lens _textSOPkerning1 (\a b -> a {_textSOPkerning1 = b})
textSOPfont :: Lens' SOP (Maybe (Tree ByteString))
textSOPfont = lens _textSOPfont (\a b -> a {_textSOPfont = b})
textSOPwordwrapsize :: Lens' SOP (Maybe (Tree Float))
textSOPwordwrapsize = lens _textSOPwordwrapsize (\a b -> a {_textSOPwordwrapsize = b})
textSOPlanguage :: Lens' SOP (Maybe (Tree ByteString))
textSOPlanguage = lens _textSOPlanguage (\a b -> a {_textSOPlanguage = b})
textSOPbold :: Lens' SOP (Maybe (Tree Bool))
textSOPbold = lens _textSOPbold (\a b -> a {_textSOPbold = b})
textSOPrord :: Lens' SOP (Maybe (Tree Int))
textSOPrord = lens _textSOPrord (\a b -> a {_textSOPrord = b})
textSOPt :: Lens' SOP (Vec3)
textSOPt = lens _textSOPt (\a b -> a {_textSOPt = b})
textSOPkerning2 :: Lens' SOP (Maybe (Tree Float))
textSOPkerning2 = lens _textSOPkerning2 (\a b -> a {_textSOPkerning2 = b})

linethickSOPstartwidth2 :: Lens' SOP (Maybe (Tree Float))
linethickSOPstartwidth2 = lens _linethickSOPstartwidth2 (\a b -> a {_linethickSOPstartwidth2 = b})
linethickSOPdomain2 :: Lens' SOP (Maybe (Tree Float))
linethickSOPdomain2 = lens _linethickSOPdomain2 (\a b -> a {_linethickSOPdomain2 = b})
linethickSOPshape :: Lens' SOP (Maybe (Tree Int))
linethickSOPshape = lens _linethickSOPshape (\a b -> a {_linethickSOPshape = b})
linethickSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
linethickSOPgroup = lens _linethickSOPgroup (\a b -> a {_linethickSOPgroup = b})
linethickSOPstartwidth1 :: Lens' SOP (Maybe (Tree Float))
linethickSOPstartwidth1 = lens _linethickSOPstartwidth1 (\a b -> a {_linethickSOPstartwidth1 = b})
linethickSOPsymmetric :: Lens' SOP (Maybe (Tree Bool))
linethickSOPsymmetric = lens _linethickSOPsymmetric (\a b -> a {_linethickSOPsymmetric = b})
linethickSOPdivisions :: Lens' SOP (Maybe (Tree Int))
linethickSOPdivisions = lens _linethickSOPdivisions (\a b -> a {_linethickSOPdivisions = b})
linethickSOProws :: Lens' SOP (Maybe (Tree Int))
linethickSOProws = lens _linethickSOProws (\a b -> a {_linethickSOProws = b})
linethickSOPdomain1 :: Lens' SOP (Maybe (Tree Float))
linethickSOPdomain1 = lens _linethickSOPdomain1 (\a b -> a {_linethickSOPdomain1 = b})
linethickSOPendwidth2 :: Lens' SOP (Maybe (Tree Float))
linethickSOPendwidth2 = lens _linethickSOPendwidth2 (\a b -> a {_linethickSOPendwidth2 = b})
linethickSOPendwidth1 :: Lens' SOP (Maybe (Tree Float))
linethickSOPendwidth1 = lens _linethickSOPendwidth1 (\a b -> a {_linethickSOPendwidth1 = b})

traceSOPaddtexture :: Lens' SOP (Maybe (Tree Bool))
traceSOPaddtexture = lens _traceSOPaddtexture (\a b -> a {_traceSOPaddtexture = b})
traceSOPnormals :: Lens' SOP (Maybe (Tree Bool))
traceSOPnormals = lens _traceSOPnormals (\a b -> a {_traceSOPnormals = b})
traceSOPfitcurve :: Lens' SOP (Maybe (Tree Bool))
traceSOPfitcurve = lens _traceSOPfitcurve (\a b -> a {_traceSOPfitcurve = b})
traceSOPdelborder :: Lens' SOP (Maybe (Tree Bool))
traceSOPdelborder = lens _traceSOPdelborder (\a b -> a {_traceSOPdelborder = b})
traceSOPconvpoly :: Lens' SOP (Maybe (Tree Bool))
traceSOPconvpoly = lens _traceSOPconvpoly (\a b -> a {_traceSOPconvpoly = b})
traceSOPstep :: Lens' SOP (Maybe (Tree Float))
traceSOPstep = lens _traceSOPstep (\a b -> a {_traceSOPstep = b})
traceSOPbordwidth :: Lens' SOP (Maybe (Tree Int))
traceSOPbordwidth = lens _traceSOPbordwidth (\a b -> a {_traceSOPbordwidth = b})
traceSOPtop :: Lens' SOP (Maybe (Tree TOP))
traceSOPtop = lens _traceSOPtop (\a b -> a {_traceSOPtop = b})
traceSOPlod :: Lens' SOP (Maybe (Tree Float))
traceSOPlod = lens _traceSOPlod (\a b -> a {_traceSOPlod = b})
traceSOPdoresample :: Lens' SOP (Maybe (Tree Bool))
traceSOPdoresample = lens _traceSOPdoresample (\a b -> a {_traceSOPdoresample = b})
traceSOPdosmooth :: Lens' SOP (Maybe (Tree Bool))
traceSOPdosmooth = lens _traceSOPdosmooth (\a b -> a {_traceSOPdosmooth = b})
traceSOPthresh :: Lens' SOP (Maybe (Tree Float))
traceSOPthresh = lens _traceSOPthresh (\a b -> a {_traceSOPthresh = b})
traceSOPerror :: Lens' SOP (Maybe (Tree Float))
traceSOPerror = lens _traceSOPerror (\a b -> a {_traceSOPerror = b})
traceSOPhole :: Lens' SOP (Maybe (Tree Bool))
traceSOPhole = lens _traceSOPhole (\a b -> a {_traceSOPhole = b})
traceSOPcorner :: Lens' SOP (Maybe (Tree Float))
traceSOPcorner = lens _traceSOPcorner (\a b -> a {_traceSOPcorner = b})

sortSOPptsort :: Lens' SOP (Maybe (Tree Int))
sortSOPptsort = lens _sortSOPptsort (\a b -> a {_sortSOPptsort = b})
sortSOPpointoffset :: Lens' SOP (Maybe (Tree Int))
sortSOPpointoffset = lens _sortSOPpointoffset (\a b -> a {_sortSOPpointoffset = b})
sortSOPprimsort :: Lens' SOP (Maybe (Tree Int))
sortSOPprimsort = lens _sortSOPprimsort (\a b -> a {_sortSOPprimsort = b})
sortSOPpointdir :: Lens' SOP (Vec3)
sortSOPpointdir = lens _sortSOPpointdir (\a b -> a {_sortSOPpointdir = b})
sortSOPpartdir :: Lens' SOP (Vec3)
sortSOPpartdir = lens _sortSOPpartdir (\a b -> a {_sortSOPpartdir = b})
sortSOPprimseed :: Lens' SOP (Maybe (Tree Int))
sortSOPprimseed = lens _sortSOPprimseed (\a b -> a {_sortSOPprimseed = b})
sortSOPpointprox :: Lens' SOP (Vec3)
sortSOPpointprox = lens _sortSOPpointprox (\a b -> a {_sortSOPpointprox = b})
sortSOPpartreverse :: Lens' SOP (Maybe (Tree Bool))
sortSOPpartreverse = lens _sortSOPpartreverse (\a b -> a {_sortSOPpartreverse = b})
sortSOPpartoffset :: Lens' SOP (Maybe (Tree Int))
sortSOPpartoffset = lens _sortSOPpartoffset (\a b -> a {_sortSOPpartoffset = b})
sortSOPprimoffset :: Lens' SOP (Maybe (Tree Int))
sortSOPprimoffset = lens _sortSOPprimoffset (\a b -> a {_sortSOPprimoffset = b})
sortSOPpointseed :: Lens' SOP (Maybe (Tree Int))
sortSOPpointseed = lens _sortSOPpointseed (\a b -> a {_sortSOPpointseed = b})
sortSOPprimprox :: Lens' SOP (Vec3)
sortSOPprimprox = lens _sortSOPprimprox (\a b -> a {_sortSOPprimprox = b})
sortSOPpartsort :: Lens' SOP (Maybe (Tree Int))
sortSOPpartsort = lens _sortSOPpartsort (\a b -> a {_sortSOPpartsort = b})
sortSOPpartprox :: Lens' SOP (Vec3)
sortSOPpartprox = lens _sortSOPpartprox (\a b -> a {_sortSOPpartprox = b})
sortSOPprimdir :: Lens' SOP (Vec3)
sortSOPprimdir = lens _sortSOPprimdir (\a b -> a {_sortSOPprimdir = b})

joinSOPknotmult :: Lens' SOP (Maybe (Tree Bool))
joinSOPknotmult = lens _joinSOPknotmult (\a b -> a {_joinSOPknotmult = b})
joinSOPblend :: Lens' SOP (Maybe (Tree Bool))
joinSOPblend = lens _joinSOPblend (\a b -> a {_joinSOPblend = b})
joinSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
joinSOPgroup = lens _joinSOPgroup (\a b -> a {_joinSOPgroup = b})
joinSOPdir :: Lens' SOP (Maybe (Tree Int))
joinSOPdir = lens _joinSOPdir (\a b -> a {_joinSOPdir = b})
joinSOPbias :: Lens' SOP (Maybe (Tree Float))
joinSOPbias = lens _joinSOPbias (\a b -> a {_joinSOPbias = b})
joinSOPprim :: Lens' SOP (Maybe (Tree Bool))
joinSOPprim = lens _joinSOPprim (\a b -> a {_joinSOPprim = b})
joinSOPjoinop :: Lens' SOP (Maybe (Tree Int))
joinSOPjoinop = lens _joinSOPjoinop (\a b -> a {_joinSOPjoinop = b})
joinSOPinc :: Lens' SOP (Maybe (Tree Int))
joinSOPinc = lens _joinSOPinc (\a b -> a {_joinSOPinc = b})
joinSOPloop :: Lens' SOP (Maybe (Tree Bool))
joinSOPloop = lens _joinSOPloop (\a b -> a {_joinSOPloop = b})
joinSOPtolerance :: Lens' SOP (Maybe (Tree Float))
joinSOPtolerance = lens _joinSOPtolerance (\a b -> a {_joinSOPtolerance = b})
joinSOPproximity :: Lens' SOP (Maybe (Tree Bool))
joinSOPproximity = lens _joinSOPproximity (\a b -> a {_joinSOPproximity = b})

polystitchSOPangle :: Lens' SOP (Maybe (Tree Float))
polystitchSOPangle = lens _polystitchSOPangle (\a b -> a {_polystitchSOPangle = b})
polystitchSOPstitch :: Lens' SOP (Maybe (Tree ByteString))
polystitchSOPstitch = lens _polystitchSOPstitch (\a b -> a {_polystitchSOPstitch = b})
polystitchSOPconsolidate :: Lens' SOP (Maybe (Tree Bool))
polystitchSOPconsolidate = lens _polystitchSOPconsolidate (\a b -> a {_polystitchSOPconsolidate = b})
polystitchSOPfindcorner :: Lens' SOP (Maybe (Tree Bool))
polystitchSOPfindcorner = lens _polystitchSOPfindcorner (\a b -> a {_polystitchSOPfindcorner = b})
polystitchSOPcorners :: Lens' SOP (Maybe (Tree ByteString))
polystitchSOPcorners = lens _polystitchSOPcorners (\a b -> a {_polystitchSOPcorners = b})
polystitchSOPtol3d :: Lens' SOP (Maybe (Tree Float))
polystitchSOPtol3d = lens _polystitchSOPtol3d (\a b -> a {_polystitchSOPtol3d = b})

blendSOPblend1v4 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend1v4 = lens _blendSOPblend1v4 (\a b -> a {_blendSOPblend1v4 = b})
blendSOPblend4v3 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend4v3 = lens _blendSOPblend4v3 (\a b -> a {_blendSOPblend4v3 = b})
blendSOPblend4v1 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend4v1 = lens _blendSOPblend4v1 (\a b -> a {_blendSOPblend4v1 = b})
blendSOPblend1v3 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend1v3 = lens _blendSOPblend1v3 (\a b -> a {_blendSOPblend1v3 = b})
blendSOPdoup :: Lens' SOP (Maybe (Tree Bool))
blendSOPdoup = lens _blendSOPdoup (\a b -> a {_blendSOPdoup = b})
blendSOPblend3v2 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend3v2 = lens _blendSOPblend3v2 (\a b -> a {_blendSOPblend3v2 = b})
blendSOPdoclr :: Lens' SOP (Maybe (Tree Bool))
blendSOPdoclr = lens _blendSOPdoclr (\a b -> a {_blendSOPdoclr = b})
blendSOPblend2v2 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend2v2 = lens _blendSOPblend2v2 (\a b -> a {_blendSOPblend2v2 = b})
blendSOPblend1v2 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend1v2 = lens _blendSOPblend1v2 (\a b -> a {_blendSOPblend1v2 = b})
blendSOPdonml :: Lens' SOP (Maybe (Tree Bool))
blendSOPdonml = lens _blendSOPdonml (\a b -> a {_blendSOPdonml = b})
blendSOPdiff :: Lens' SOP (Maybe (Tree Bool))
blendSOPdiff = lens _blendSOPdiff (\a b -> a {_blendSOPdiff = b})
blendSOPblend3v3 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend3v3 = lens _blendSOPblend3v3 (\a b -> a {_blendSOPblend3v3 = b})
blendSOPblend3v1 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend3v1 = lens _blendSOPblend3v1 (\a b -> a {_blendSOPblend3v1 = b})
blendSOPblend2v3 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend2v3 = lens _blendSOPblend2v3 (\a b -> a {_blendSOPblend2v3 = b})
blendSOPdouvw :: Lens' SOP (Maybe (Tree Bool))
blendSOPdouvw = lens _blendSOPdouvw (\a b -> a {_blendSOPdouvw = b})
blendSOPdopos :: Lens' SOP (Maybe (Tree Bool))
blendSOPdopos = lens _blendSOPdopos (\a b -> a {_blendSOPdopos = b})
blendSOPblend4v2 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend4v2 = lens _blendSOPblend4v2 (\a b -> a {_blendSOPblend4v2 = b})
blendSOPblend4v4 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend4v4 = lens _blendSOPblend4v4 (\a b -> a {_blendSOPblend4v4 = b})
blendSOPblend3v4 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend3v4 = lens _blendSOPblend3v4 (\a b -> a {_blendSOPblend3v4 = b})
blendSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
blendSOPgroup = lens _blendSOPgroup (\a b -> a {_blendSOPgroup = b})
blendSOPblend1v1 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend1v1 = lens _blendSOPblend1v1 (\a b -> a {_blendSOPblend1v1 = b})
blendSOPblend2v4 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend2v4 = lens _blendSOPblend2v4 (\a b -> a {_blendSOPblend2v4 = b})
blendSOPblend2v1 :: Lens' SOP (Maybe (Tree Float))
blendSOPblend2v1 = lens _blendSOPblend2v1 (\a b -> a {_blendSOPblend2v1 = b})

lodSOPpolysonly :: Lens' SOP (Maybe (Tree Bool))
lodSOPpolysonly = lens _lodSOPpolysonly (\a b -> a {_lodSOPpolysonly = b})
lodSOPtriangulate :: Lens' SOP (Maybe (Tree Bool))
lodSOPtriangulate = lens _lodSOPtriangulate (\a b -> a {_lodSOPtriangulate = b})
lodSOPtstrips :: Lens' SOP (Maybe (Tree Bool))
lodSOPtstrips = lens _lodSOPtstrips (\a b -> a {_lodSOPtstrips = b})
lodSOPsteppercent :: Lens' SOP (Maybe (Tree Float))
lodSOPsteppercent = lens _lodSOPsteppercent (\a b -> a {_lodSOPsteppercent = b})
lodSOPminpercent :: Lens' SOP (Maybe (Tree Float))
lodSOPminpercent = lens _lodSOPminpercent (\a b -> a {_lodSOPminpercent = b})
lodSOPdistance :: Lens' SOP (Maybe (Tree Float))
lodSOPdistance = lens _lodSOPdistance (\a b -> a {_lodSOPdistance = b})
lodSOPlengthweight :: Lens' SOP (Maybe (Tree Float))
lodSOPlengthweight = lens _lodSOPlengthweight (\a b -> a {_lodSOPlengthweight = b})
lodSOPborderweight :: Lens' SOP (Maybe (Tree Float))
lodSOPborderweight = lens _lodSOPborderweight (\a b -> a {_lodSOPborderweight = b})

creepSOPs :: Lens' SOP (Vec3)
creepSOPs = lens _creepSOPs (\a b -> a {_creepSOPs = b})
creepSOPt :: Lens' SOP (Vec3)
creepSOPt = lens _creepSOPt (\a b -> a {_creepSOPt = b})
creepSOPr :: Lens' SOP (Vec3)
creepSOPr = lens _creepSOPr (\a b -> a {_creepSOPr = b})
creepSOPreset :: Lens' SOP (Maybe (Tree Bool))
creepSOPreset = lens _creepSOPreset (\a b -> a {_creepSOPreset = b})
creepSOPresetmethod :: Lens' SOP (Maybe (Tree Int))
creepSOPresetmethod = lens _creepSOPresetmethod (\a b -> a {_creepSOPresetmethod = b})

polysplineSOPtension :: Lens' SOP (Maybe (Tree Float))
polysplineSOPtension = lens _polysplineSOPtension (\a b -> a {_polysplineSOPtension = b})
polysplineSOPedgedivs :: Lens' SOP (Maybe (Tree Int))
polysplineSOPedgedivs = lens _polysplineSOPedgedivs (\a b -> a {_polysplineSOPedgedivs = b})
polysplineSOPclosure :: Lens' SOP (Maybe (Tree Int))
polysplineSOPclosure = lens _polysplineSOPclosure (\a b -> a {_polysplineSOPclosure = b})
polysplineSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
polysplineSOPgroup = lens _polysplineSOPgroup (\a b -> a {_polysplineSOPgroup = b})
polysplineSOPsegsize :: Lens' SOP (Maybe (Tree Float))
polysplineSOPsegsize = lens _polysplineSOPsegsize (\a b -> a {_polysplineSOPsegsize = b})
polysplineSOPdivide :: Lens' SOP (Maybe (Tree Int))
polysplineSOPdivide = lens _polysplineSOPdivide (\a b -> a {_polysplineSOPdivide = b})
polysplineSOPbasis :: Lens' SOP (Maybe (Tree Int))
polysplineSOPbasis = lens _polysplineSOPbasis (\a b -> a {_polysplineSOPbasis = b})
polysplineSOPpolydivs :: Lens' SOP (Maybe (Tree Int))
polysplineSOPpolydivs = lens _polysplineSOPpolydivs (\a b -> a {_polysplineSOPpolydivs = b})
polysplineSOPfirst :: Lens' SOP (Maybe (Tree Int))
polysplineSOPfirst = lens _polysplineSOPfirst (\a b -> a {_polysplineSOPfirst = b})
polysplineSOPlast :: Lens' SOP (Maybe (Tree Int))
polysplineSOPlast = lens _polysplineSOPlast (\a b -> a {_polysplineSOPlast = b})

curveclaySOPsharp :: Lens' SOP (Maybe (Tree Float))
curveclaySOPsharp = lens _curveclaySOPsharp (\a b -> a {_curveclaySOPsharp = b})
curveclaySOPfacegroup :: Lens' SOP (Maybe (Tree ByteString))
curveclaySOPfacegroup = lens _curveclaySOPfacegroup (\a b -> a {_curveclaySOPfacegroup = b})
curveclaySOPdivs :: Lens' SOP (Maybe (Tree Int))
curveclaySOPdivs = lens _curveclaySOPdivs (\a b -> a {_curveclaySOPdivs = b})
curveclaySOPprojop :: Lens' SOP (Maybe (Tree Int))
curveclaySOPprojop = lens _curveclaySOPprojop (\a b -> a {_curveclaySOPprojop = b})
curveclaySOPindividual :: Lens' SOP (Maybe (Tree Bool))
curveclaySOPindividual = lens _curveclaySOPindividual (\a b -> a {_curveclaySOPindividual = b})
curveclaySOPprojdir3 :: Lens' SOP (Maybe (Tree Float))
curveclaySOPprojdir3 = lens _curveclaySOPprojdir3 (\a b -> a {_curveclaySOPprojdir3 = b})
curveclaySOPsurfgroup :: Lens' SOP (Maybe (Tree ByteString))
curveclaySOPsurfgroup = lens _curveclaySOPsurfgroup (\a b -> a {_curveclaySOPsurfgroup = b})
curveclaySOPrefine :: Lens' SOP (Maybe (Tree Float))
curveclaySOPrefine = lens _curveclaySOPrefine (\a b -> a {_curveclaySOPrefine = b})
curveclaySOPprojdir2 :: Lens' SOP (Maybe (Tree Float))
curveclaySOPprojdir2 = lens _curveclaySOPprojdir2 (\a b -> a {_curveclaySOPprojdir2 = b})
curveclaySOPdeformdir1 :: Lens' SOP (Maybe (Tree Float))
curveclaySOPdeformdir1 = lens _curveclaySOPdeformdir1 (\a b -> a {_curveclaySOPdeformdir1 = b})
curveclaySOPdeformdir3 :: Lens' SOP (Maybe (Tree Float))
curveclaySOPdeformdir3 = lens _curveclaySOPdeformdir3 (\a b -> a {_curveclaySOPdeformdir3 = b})
curveclaySOPdeformlen :: Lens' SOP (Maybe (Tree Float))
curveclaySOPdeformlen = lens _curveclaySOPdeformlen (\a b -> a {_curveclaySOPdeformlen = b})
curveclaySOPdeforminside :: Lens' SOP (Maybe (Tree Bool))
curveclaySOPdeforminside = lens _curveclaySOPdeforminside (\a b -> a {_curveclaySOPdeforminside = b})
curveclaySOPprojdir1 :: Lens' SOP (Maybe (Tree Float))
curveclaySOPprojdir1 = lens _curveclaySOPprojdir1 (\a b -> a {_curveclaySOPprojdir1 = b})
curveclaySOPdeformdir2 :: Lens' SOP (Maybe (Tree Float))
curveclaySOPdeformdir2 = lens _curveclaySOPdeformdir2 (\a b -> a {_curveclaySOPdeformdir2 = b})
curveclaySOPdeformop :: Lens' SOP (Maybe (Tree Int))
curveclaySOPdeformop = lens _curveclaySOPdeformop (\a b -> a {_curveclaySOPdeformop = b})

projectSOPmaptype :: Lens' SOP (Maybe (Tree Int))
projectSOPmaptype = lens _projectSOPmaptype (\a b -> a {_projectSOPmaptype = b})
projectSOPvector3 :: Lens' SOP (Maybe (Tree Float))
projectSOPvector3 = lens _projectSOPvector3 (\a b -> a {_projectSOPvector3 = b})
projectSOPprojside :: Lens' SOP (Maybe (Tree Int))
projectSOPprojside = lens _projectSOPprojside (\a b -> a {_projectSOPprojside = b})
projectSOPuvgap :: Lens' SOP (Maybe (Tree Float))
projectSOPuvgap = lens _projectSOPuvgap (\a b -> a {_projectSOPuvgap = b})
projectSOPvrange1 :: Lens' SOP (Maybe (Tree Float))
projectSOPvrange1 = lens _projectSOPvrange1 (\a b -> a {_projectSOPvrange1 = b})
projectSOPaxis :: Lens' SOP (Maybe (Tree Int))
projectSOPaxis = lens _projectSOPaxis (\a b -> a {_projectSOPaxis = b})
projectSOPurange2 :: Lens' SOP (Maybe (Tree Float))
projectSOPurange2 = lens _projectSOPurange2 (\a b -> a {_projectSOPurange2 = b})
projectSOPufrom :: Lens' SOP (Maybe (Tree Int))
projectSOPufrom = lens _projectSOPufrom (\a b -> a {_projectSOPufrom = b})
projectSOPftolerance :: Lens' SOP (Maybe (Tree Float))
projectSOPftolerance = lens _projectSOPftolerance (\a b -> a {_projectSOPftolerance = b})
projectSOPcycle :: Lens' SOP (Maybe (Tree Int))
projectSOPcycle = lens _projectSOPcycle (\a b -> a {_projectSOPcycle = b})
projectSOPcsharp :: Lens' SOP (Maybe (Tree Bool))
projectSOPcsharp = lens _projectSOPcsharp (\a b -> a {_projectSOPcsharp = b})
projectSOPuserange :: Lens' SOP (Maybe (Tree Bool))
projectSOPuserange = lens _projectSOPuserange (\a b -> a {_projectSOPuserange = b})
projectSOPfacegroup :: Lens' SOP (Maybe (Tree ByteString))
projectSOPfacegroup = lens _projectSOPfacegroup (\a b -> a {_projectSOPfacegroup = b})
projectSOPsurfgroup :: Lens' SOP (Maybe (Tree ByteString))
projectSOPsurfgroup = lens _projectSOPsurfgroup (\a b -> a {_projectSOPsurfgroup = b})
projectSOPaccurate :: Lens' SOP (Maybe (Tree Bool))
projectSOPaccurate = lens _projectSOPaccurate (\a b -> a {_projectSOPaccurate = b})
projectSOPsdivs :: Lens' SOP (Maybe (Tree Int))
projectSOPsdivs = lens _projectSOPsdivs (\a b -> a {_projectSOPsdivs = b})
projectSOPvector1 :: Lens' SOP (Maybe (Tree Float))
projectSOPvector1 = lens _projectSOPvector1 (\a b -> a {_projectSOPvector1 = b})
projectSOPvfrom :: Lens' SOP (Maybe (Tree Int))
projectSOPvfrom = lens _projectSOPvfrom (\a b -> a {_projectSOPvfrom = b})
projectSOPvector2 :: Lens' SOP (Maybe (Tree Float))
projectSOPvector2 = lens _projectSOPvector2 (\a b -> a {_projectSOPvector2 = b})
projectSOPrtolerance :: Lens' SOP (Maybe (Tree Float))
projectSOPrtolerance = lens _projectSOPrtolerance (\a b -> a {_projectSOPrtolerance = b})
projectSOPvrange2 :: Lens' SOP (Maybe (Tree Float))
projectSOPvrange2 = lens _projectSOPvrange2 (\a b -> a {_projectSOPvrange2 = b})
projectSOPorder :: Lens' SOP (Maybe (Tree Int))
projectSOPorder = lens _projectSOPorder (\a b -> a {_projectSOPorder = b})
projectSOPurange1 :: Lens' SOP (Maybe (Tree Float))
projectSOPurange1 = lens _projectSOPurange1 (\a b -> a {_projectSOPurange1 = b})

fileinSOPflipfacing :: Lens' SOP (Maybe (Tree Bool))
fileinSOPflipfacing = lens _fileinSOPflipfacing (\a b -> a {_fileinSOPflipfacing = b})
fileinSOPrefreshpulse :: Lens' SOP (Maybe (Tree Bool))
fileinSOPrefreshpulse = lens _fileinSOPrefreshpulse (\a b -> a {_fileinSOPrefreshpulse = b})
fileinSOPfile :: Lens' SOP (Maybe (Tree ByteString))
fileinSOPfile = lens _fileinSOPfile (\a b -> a {_fileinSOPfile = b})
fileinSOPnormals :: Lens' SOP (Maybe (Tree Bool))
fileinSOPnormals = lens _fileinSOPnormals (\a b -> a {_fileinSOPnormals = b})
fileinSOPrefresh :: Lens' SOP (Maybe (Tree Bool))
fileinSOPrefresh = lens _fileinSOPrefresh (\a b -> a {_fileinSOPrefresh = b})

sequenceblendSOPdopos :: Lens' SOP (Maybe (Tree Bool))
sequenceblendSOPdopos = lens _sequenceblendSOPdopos (\a b -> a {_sequenceblendSOPdopos = b})
sequenceblendSOPdoup :: Lens' SOP (Maybe (Tree Bool))
sequenceblendSOPdoup = lens _sequenceblendSOPdoup (\a b -> a {_sequenceblendSOPdoup = b})
sequenceblendSOPdouvw :: Lens' SOP (Maybe (Tree Bool))
sequenceblendSOPdouvw = lens _sequenceblendSOPdouvw (\a b -> a {_sequenceblendSOPdouvw = b})
sequenceblendSOPdoclr :: Lens' SOP (Maybe (Tree Bool))
sequenceblendSOPdoclr = lens _sequenceblendSOPdoclr (\a b -> a {_sequenceblendSOPdoclr = b})
sequenceblendSOPdonml :: Lens' SOP (Maybe (Tree Bool))
sequenceblendSOPdonml = lens _sequenceblendSOPdonml (\a b -> a {_sequenceblendSOPdonml = b})
sequenceblendSOPblend :: Lens' SOP (Maybe (Tree Float))
sequenceblendSOPblend = lens _sequenceblendSOPblend (\a b -> a {_sequenceblendSOPblend = b})

capSOPfirstv :: Lens' SOP (Maybe (Tree Int))
capSOPfirstv = lens _capSOPfirstv (\a b -> a {_capSOPfirstv = b})
capSOPfirstu :: Lens' SOP (Maybe (Tree Int))
capSOPfirstu = lens _capSOPfirstu (\a b -> a {_capSOPfirstu = b})
capSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
capSOPgroup = lens _capSOPgroup (\a b -> a {_capSOPgroup = b})
capSOPdivsv2 :: Lens' SOP (Maybe (Tree Int))
capSOPdivsv2 = lens _capSOPdivsv2 (\a b -> a {_capSOPdivsv2 = b})
capSOPlastv :: Lens' SOP (Maybe (Tree Int))
capSOPlastv = lens _capSOPlastv (\a b -> a {_capSOPlastv = b})
capSOPscaleu2 :: Lens' SOP (Maybe (Tree Float))
capSOPscaleu2 = lens _capSOPscaleu2 (\a b -> a {_capSOPscaleu2 = b})
capSOPdivsv1 :: Lens' SOP (Maybe (Tree Int))
capSOPdivsv1 = lens _capSOPdivsv1 (\a b -> a {_capSOPdivsv1 = b})
capSOPscaleu1 :: Lens' SOP (Maybe (Tree Float))
capSOPscaleu1 = lens _capSOPscaleu1 (\a b -> a {_capSOPscaleu1 = b})
capSOPlastu :: Lens' SOP (Maybe (Tree Int))
capSOPlastu = lens _capSOPlastu (\a b -> a {_capSOPlastu = b})
capSOPdivsu2 :: Lens' SOP (Maybe (Tree Int))
capSOPdivsu2 = lens _capSOPdivsu2 (\a b -> a {_capSOPdivsu2 = b})
capSOPdivsu1 :: Lens' SOP (Maybe (Tree Int))
capSOPdivsu1 = lens _capSOPdivsu1 (\a b -> a {_capSOPdivsu1 = b})
capSOPpshapeu :: Lens' SOP (Maybe (Tree Bool))
capSOPpshapeu = lens _capSOPpshapeu (\a b -> a {_capSOPpshapeu = b})
capSOPscalev2 :: Lens' SOP (Maybe (Tree Float))
capSOPscalev2 = lens _capSOPscalev2 (\a b -> a {_capSOPscalev2 = b})
capSOPpshapev :: Lens' SOP (Maybe (Tree Bool))
capSOPpshapev = lens _capSOPpshapev (\a b -> a {_capSOPpshapev = b})
capSOPscalev1 :: Lens' SOP (Maybe (Tree Float))
capSOPscalev1 = lens _capSOPscalev1 (\a b -> a {_capSOPscalev1 = b})

alembicSOPinterp :: Lens' SOP (Maybe (Tree Int))
alembicSOPinterp = lens _alembicSOPinterp (\a b -> a {_alembicSOPinterp = b})
alembicSOPcompnml :: Lens' SOP (Maybe (Tree Bool))
alembicSOPcompnml = lens _alembicSOPcompnml (\a b -> a {_alembicSOPcompnml = b})
alembicSOPxform :: Lens' SOP (Maybe (Tree Int))
alembicSOPxform = lens _alembicSOPxform (\a b -> a {_alembicSOPxform = b})
alembicSOPtimeunit :: Lens' SOP (Maybe (Tree Int))
alembicSOPtimeunit = lens _alembicSOPtimeunit (\a b -> a {_alembicSOPtimeunit = b})
alembicSOPfile :: Lens' SOP (Maybe (Tree ByteString))
alembicSOPfile = lens _alembicSOPfile (\a b -> a {_alembicSOPfile = b})
alembicSOPloadfile :: Lens' SOP (Maybe (Tree Bool))
alembicSOPloadfile = lens _alembicSOPloadfile (\a b -> a {_alembicSOPloadfile = b})
alembicSOPstraightgpu :: Lens' SOP (Maybe (Tree Bool))
alembicSOPstraightgpu = lens _alembicSOPstraightgpu (\a b -> a {_alembicSOPstraightgpu = b})
alembicSOPobjectpath :: Lens' SOP (Maybe (Tree ByteString))
alembicSOPobjectpath = lens _alembicSOPobjectpath (\a b -> a {_alembicSOPobjectpath = b})
alembicSOPtime :: Lens' SOP (Maybe (Tree Float))
alembicSOPtime = lens _alembicSOPtime (\a b -> a {_alembicSOPtime = b})

objectmergeSOPsop4 :: Lens' SOP (Maybe (Tree SOP))
objectmergeSOPsop4 = lens _objectmergeSOPsop4 (\a b -> a {_objectmergeSOPsop4 = b})
objectmergeSOPsop1 :: Lens' SOP (Maybe (Tree SOP))
objectmergeSOPsop1 = lens _objectmergeSOPsop1 (\a b -> a {_objectmergeSOPsop1 = b})
objectmergeSOPsop6 :: Lens' SOP (Maybe (Tree SOP))
objectmergeSOPsop6 = lens _objectmergeSOPsop6 (\a b -> a {_objectmergeSOPsop6 = b})
objectmergeSOPsop9 :: Lens' SOP (Maybe (Tree SOP))
objectmergeSOPsop9 = lens _objectmergeSOPsop9 (\a b -> a {_objectmergeSOPsop9 = b})
objectmergeSOPsop10 :: Lens' SOP (Maybe (Tree SOP))
objectmergeSOPsop10 = lens _objectmergeSOPsop10 (\a b -> a {_objectmergeSOPsop10 = b})
objectmergeSOPsop3 :: Lens' SOP (Maybe (Tree SOP))
objectmergeSOPsop3 = lens _objectmergeSOPsop3 (\a b -> a {_objectmergeSOPsop3 = b})
objectmergeSOPsop5 :: Lens' SOP (Maybe (Tree SOP))
objectmergeSOPsop5 = lens _objectmergeSOPsop5 (\a b -> a {_objectmergeSOPsop5 = b})
objectmergeSOPsop8 :: Lens' SOP (Maybe (Tree SOP))
objectmergeSOPsop8 = lens _objectmergeSOPsop8 (\a b -> a {_objectmergeSOPsop8 = b})
objectmergeSOPsop7 :: Lens' SOP (Maybe (Tree SOP))
objectmergeSOPsop7 = lens _objectmergeSOPsop7 (\a b -> a {_objectmergeSOPsop7 = b})
objectmergeSOPsop2 :: Lens' SOP (Maybe (Tree SOP))
objectmergeSOPsop2 = lens _objectmergeSOPsop2 (\a b -> a {_objectmergeSOPsop2 = b})



basisSOPulength :: Lens' SOP (Maybe (Tree Float))
basisSOPulength = lens _basisSOPulength (\a b -> a {_basisSOPulength = b})
basisSOPuraise :: Lens' SOP (Maybe (Tree Bool))
basisSOPuraise = lens _basisSOPuraise (\a b -> a {_basisSOPuraise = b})
basisSOPvbasis :: Lens' SOP (Maybe (Tree Bool))
basisSOPvbasis = lens _basisSOPvbasis (\a b -> a {_basisSOPvbasis = b})
basisSOPvparmtype :: Lens' SOP (Maybe (Tree Int))
basisSOPvparmtype = lens _basisSOPvparmtype (\a b -> a {_basisSOPvparmtype = b})
basisSOPuorigin :: Lens' SOP (Maybe (Tree Float))
basisSOPuorigin = lens _basisSOPuorigin (\a b -> a {_basisSOPuorigin = b})
basisSOPuread :: Lens' SOP (Maybe (Tree Bool))
basisSOPuread = lens _basisSOPuread (\a b -> a {_basisSOPuread = b})
basisSOPvrange1 :: Lens' SOP (Maybe (Tree Float))
basisSOPvrange1 = lens _basisSOPvrange1 (\a b -> a {_basisSOPvrange1 = b})
basisSOPvlength :: Lens' SOP (Maybe (Tree Float))
basisSOPvlength = lens _basisSOPvlength (\a b -> a {_basisSOPvlength = b})
basisSOPuconcat :: Lens' SOP (Maybe (Tree Bool))
basisSOPuconcat = lens _basisSOPuconcat (\a b -> a {_basisSOPuconcat = b})
basisSOPurange2 :: Lens' SOP (Maybe (Tree Float))
basisSOPurange2 = lens _basisSOPurange2 (\a b -> a {_basisSOPurange2 = b})
basisSOPorderv :: Lens' SOP (Maybe (Tree Int))
basisSOPorderv = lens _basisSOPorderv (\a b -> a {_basisSOPorderv = b})
basisSOPuknots :: Lens' SOP (Maybe (Tree ByteString))
basisSOPuknots = lens _basisSOPuknots (\a b -> a {_basisSOPuknots = b})
basisSOPvread :: Lens' SOP (Maybe (Tree Bool))
basisSOPvread = lens _basisSOPvread (\a b -> a {_basisSOPvread = b})
basisSOPvdoscale :: Lens' SOP (Maybe (Tree Bool))
basisSOPvdoscale = lens _basisSOPvdoscale (\a b -> a {_basisSOPvdoscale = b})
basisSOPubasis :: Lens' SOP (Maybe (Tree Bool))
basisSOPubasis = lens _basisSOPubasis (\a b -> a {_basisSOPubasis = b})
basisSOPudoscale :: Lens' SOP (Maybe (Tree Bool))
basisSOPudoscale = lens _basisSOPudoscale (\a b -> a {_basisSOPudoscale = b})
basisSOPvdoorigin :: Lens' SOP (Maybe (Tree Bool))
basisSOPvdoorigin = lens _basisSOPvdoorigin (\a b -> a {_basisSOPvdoorigin = b})
basisSOPvbias :: Lens' SOP (Maybe (Tree Float))
basisSOPvbias = lens _basisSOPvbias (\a b -> a {_basisSOPvbias = b})
basisSOPvraise :: Lens' SOP (Maybe (Tree Bool))
basisSOPvraise = lens _basisSOPvraise (\a b -> a {_basisSOPvraise = b})
basisSOPorderu :: Lens' SOP (Maybe (Tree Int))
basisSOPorderu = lens _basisSOPorderu (\a b -> a {_basisSOPorderu = b})
basisSOPvscale :: Lens' SOP (Maybe (Tree Float))
basisSOPvscale = lens _basisSOPvscale (\a b -> a {_basisSOPvscale = b})
basisSOPubias :: Lens' SOP (Maybe (Tree Float))
basisSOPubias = lens _basisSOPubias (\a b -> a {_basisSOPubias = b})
basisSOPuscale :: Lens' SOP (Maybe (Tree Float))
basisSOPuscale = lens _basisSOPuscale (\a b -> a {_basisSOPuscale = b})
basisSOPvknots :: Lens' SOP (Maybe (Tree ByteString))
basisSOPvknots = lens _basisSOPvknots (\a b -> a {_basisSOPvknots = b})
basisSOPvconcat :: Lens' SOP (Maybe (Tree Bool))
basisSOPvconcat = lens _basisSOPvconcat (\a b -> a {_basisSOPvconcat = b})
basisSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
basisSOPgroup = lens _basisSOPgroup (\a b -> a {_basisSOPgroup = b})
basisSOPudolength :: Lens' SOP (Maybe (Tree Bool))
basisSOPudolength = lens _basisSOPudolength (\a b -> a {_basisSOPudolength = b})
basisSOPudoorigin :: Lens' SOP (Maybe (Tree Bool))
basisSOPudoorigin = lens _basisSOPudoorigin (\a b -> a {_basisSOPudoorigin = b})
basisSOPvdolength :: Lens' SOP (Maybe (Tree Bool))
basisSOPvdolength = lens _basisSOPvdolength (\a b -> a {_basisSOPvdolength = b})
basisSOPuparmtype :: Lens' SOP (Maybe (Tree Int))
basisSOPuparmtype = lens _basisSOPuparmtype (\a b -> a {_basisSOPuparmtype = b})
basisSOPvrange2 :: Lens' SOP (Maybe (Tree Float))
basisSOPvrange2 = lens _basisSOPvrange2 (\a b -> a {_basisSOPvrange2 = b})
basisSOPurange1 :: Lens' SOP (Maybe (Tree Float))
basisSOPurange1 = lens _basisSOPurange1 (\a b -> a {_basisSOPurange1 = b})
basisSOPvorigin :: Lens' SOP (Maybe (Tree Float))
basisSOPvorigin = lens _basisSOPvorigin (\a b -> a {_basisSOPvorigin = b})

attributeSOPfrompt1 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfrompt1 = lens _attributeSOPfrompt1 (\a b -> a {_attributeSOPfrompt1 = b})
attributeSOPtopt1 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtopt1 = lens _attributeSOPtopt1 (\a b -> a {_attributeSOPtopt1 = b})
attributeSOPtodtl2 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtodtl2 = lens _attributeSOPtodtl2 (\a b -> a {_attributeSOPtodtl2 = b})
attributeSOPprimdel :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPprimdel = lens _attributeSOPprimdel (\a b -> a {_attributeSOPprimdel = b})
attributeSOPtopt2 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtopt2 = lens _attributeSOPtopt2 (\a b -> a {_attributeSOPtopt2 = b})
attributeSOPtovtx4 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtovtx4 = lens _attributeSOPtovtx4 (\a b -> a {_attributeSOPtovtx4 = b})
attributeSOPfromvtx1 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfromvtx1 = lens _attributeSOPfromvtx1 (\a b -> a {_attributeSOPfromvtx1 = b})
attributeSOPtovtx2 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtovtx2 = lens _attributeSOPtovtx2 (\a b -> a {_attributeSOPtovtx2 = b})
attributeSOPtodtl3 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtodtl3 = lens _attributeSOPtodtl3 (\a b -> a {_attributeSOPtodtl3 = b})
attributeSOPtovtx0 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtovtx0 = lens _attributeSOPtovtx0 (\a b -> a {_attributeSOPtovtx0 = b})
attributeSOPfromvtx3 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfromvtx3 = lens _attributeSOPfromvtx3 (\a b -> a {_attributeSOPfromvtx3 = b})
attributeSOPtopt4 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtopt4 = lens _attributeSOPtopt4 (\a b -> a {_attributeSOPtopt4 = b})
attributeSOPtopr3 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtopr3 = lens _attributeSOPtopr3 (\a b -> a {_attributeSOPtopr3 = b})
attributeSOPtodtl0 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtodtl0 = lens _attributeSOPtodtl0 (\a b -> a {_attributeSOPtodtl0 = b})
attributeSOPtovtx3 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtovtx3 = lens _attributeSOPtovtx3 (\a b -> a {_attributeSOPtovtx3 = b})
attributeSOPfrompt0 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfrompt0 = lens _attributeSOPfrompt0 (\a b -> a {_attributeSOPfrompt0 = b})
attributeSOPfromdtl1 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfromdtl1 = lens _attributeSOPfromdtl1 (\a b -> a {_attributeSOPfromdtl1 = b})
attributeSOPptdel :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPptdel = lens _attributeSOPptdel (\a b -> a {_attributeSOPptdel = b})
attributeSOPfrompr2 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfrompr2 = lens _attributeSOPfrompr2 (\a b -> a {_attributeSOPfrompr2 = b})
attributeSOPfromdtl4 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfromdtl4 = lens _attributeSOPfromdtl4 (\a b -> a {_attributeSOPfromdtl4 = b})
attributeSOPfrompr1 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfrompr1 = lens _attributeSOPfrompr1 (\a b -> a {_attributeSOPfrompr1 = b})
attributeSOPfrompt2 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfrompt2 = lens _attributeSOPfrompt2 (\a b -> a {_attributeSOPfrompt2 = b})
attributeSOPtopr2 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtopr2 = lens _attributeSOPtopr2 (\a b -> a {_attributeSOPtopr2 = b})
attributeSOPtovtx1 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtovtx1 = lens _attributeSOPtovtx1 (\a b -> a {_attributeSOPtovtx1 = b})
attributeSOPfrompr3 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfrompr3 = lens _attributeSOPfrompr3 (\a b -> a {_attributeSOPfrompr3 = b})
attributeSOPtodtl4 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtodtl4 = lens _attributeSOPtodtl4 (\a b -> a {_attributeSOPtodtl4 = b})
attributeSOPtopr1 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtopr1 = lens _attributeSOPtopr1 (\a b -> a {_attributeSOPtopr1 = b})
attributeSOPtopt0 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtopt0 = lens _attributeSOPtopt0 (\a b -> a {_attributeSOPtopt0 = b})
attributeSOPtopr4 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtopr4 = lens _attributeSOPtopr4 (\a b -> a {_attributeSOPtopr4 = b})
attributeSOPfrompt4 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfrompt4 = lens _attributeSOPfrompt4 (\a b -> a {_attributeSOPfrompt4 = b})
attributeSOPdtldel :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPdtldel = lens _attributeSOPdtldel (\a b -> a {_attributeSOPdtldel = b})
attributeSOPfrompt3 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfrompt3 = lens _attributeSOPfrompt3 (\a b -> a {_attributeSOPfrompt3 = b})
attributeSOPtopt3 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtopt3 = lens _attributeSOPtopt3 (\a b -> a {_attributeSOPtopt3 = b})
attributeSOPfromvtx0 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfromvtx0 = lens _attributeSOPfromvtx0 (\a b -> a {_attributeSOPfromvtx0 = b})
attributeSOPfromvtx4 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfromvtx4 = lens _attributeSOPfromvtx4 (\a b -> a {_attributeSOPfromvtx4 = b})
attributeSOPvtxdel :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPvtxdel = lens _attributeSOPvtxdel (\a b -> a {_attributeSOPvtxdel = b})
attributeSOPtodtl1 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtodtl1 = lens _attributeSOPtodtl1 (\a b -> a {_attributeSOPtodtl1 = b})
attributeSOPfromdtl3 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfromdtl3 = lens _attributeSOPfromdtl3 (\a b -> a {_attributeSOPfromdtl3 = b})
attributeSOPfromdtl0 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfromdtl0 = lens _attributeSOPfromdtl0 (\a b -> a {_attributeSOPfromdtl0 = b})
attributeSOPfrompr0 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfrompr0 = lens _attributeSOPfrompr0 (\a b -> a {_attributeSOPfrompr0 = b})
attributeSOPfromdtl2 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfromdtl2 = lens _attributeSOPfromdtl2 (\a b -> a {_attributeSOPfromdtl2 = b})
attributeSOPtopr0 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPtopr0 = lens _attributeSOPtopr0 (\a b -> a {_attributeSOPtopr0 = b})
attributeSOPfromvtx2 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfromvtx2 = lens _attributeSOPfromvtx2 (\a b -> a {_attributeSOPfromvtx2 = b})
attributeSOPfrompr4 :: Lens' SOP (Maybe (Tree ByteString))
attributeSOPfrompr4 = lens _attributeSOPfrompr4 (\a b -> a {_attributeSOPfrompr4 = b})

selectSOPsop :: Lens' SOP (Maybe (Tree SOP))
selectSOPsop = lens _selectSOPsop (\a b -> a {_selectSOPsop = b})

alignSOPleftuv1 :: Lens' SOP (Maybe (Tree Float))
alignSOPleftuv1 = lens _alignSOPleftuv1 (\a b -> a {_alignSOPleftuv1 = b})
alignSOPrightuv2 :: Lens' SOP (Maybe (Tree Float))
alignSOPrightuv2 = lens _alignSOPrightuv2 (\a b -> a {_alignSOPrightuv2 = b})
alignSOPs :: Lens' SOP (Vec3)
alignSOPs = lens _alignSOPs (\a b -> a {_alignSOPs = b})
alignSOPalign :: Lens' SOP (Maybe (Tree Int))
alignSOPalign = lens _alignSOPalign (\a b -> a {_alignSOPalign = b})
alignSOPp :: Lens' SOP (Vec3)
alignSOPp = lens _alignSOPp (\a b -> a {_alignSOPp = b})
alignSOPbias :: Lens' SOP (Maybe (Tree Float))
alignSOPbias = lens _alignSOPbias (\a b -> a {_alignSOPbias = b})
alignSOPinc :: Lens' SOP (Maybe (Tree Int))
alignSOPinc = lens _alignSOPinc (\a b -> a {_alignSOPinc = b})
alignSOPindividual :: Lens' SOP (Maybe (Tree Bool))
alignSOPindividual = lens _alignSOPindividual (\a b -> a {_alignSOPindividual = b})
alignSOPdotrans :: Lens' SOP (Maybe (Tree Bool))
alignSOPdotrans = lens _alignSOPdotrans (\a b -> a {_alignSOPdotrans = b})
alignSOPleftuv2 :: Lens' SOP (Maybe (Tree Float))
alignSOPleftuv2 = lens _alignSOPleftuv2 (\a b -> a {_alignSOPleftuv2 = b})
alignSOPrightuv1 :: Lens' SOP (Maybe (Tree Float))
alignSOPrightuv1 = lens _alignSOPrightuv1 (\a b -> a {_alignSOPrightuv1 = b})
alignSOPr :: Lens' SOP (Vec3)
alignSOPr = lens _alignSOPr (\a b -> a {_alignSOPr = b})
alignSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
alignSOPgroup = lens _alignSOPgroup (\a b -> a {_alignSOPgroup = b})
alignSOPrord :: Lens' SOP (Maybe (Tree Int))
alignSOPrord = lens _alignSOPrord (\a b -> a {_alignSOPrord = b})
alignSOPrightuvend2 :: Lens' SOP (Maybe (Tree Float))
alignSOPrightuvend2 = lens _alignSOPrightuvend2 (\a b -> a {_alignSOPrightuvend2 = b})
alignSOPdorotate :: Lens' SOP (Maybe (Tree Bool))
alignSOPdorotate = lens _alignSOPdorotate (\a b -> a {_alignSOPdorotate = b})
alignSOPt :: Lens' SOP (Vec3)
alignSOPt = lens _alignSOPt (\a b -> a {_alignSOPt = b})
alignSOPxord :: Lens' SOP (Maybe (Tree Int))
alignSOPxord = lens _alignSOPxord (\a b -> a {_alignSOPxord = b})
alignSOPrightuvend1 :: Lens' SOP (Maybe (Tree Float))
alignSOPrightuvend1 = lens _alignSOPrightuvend1 (\a b -> a {_alignSOPrightuvend1 = b})

fontSOPtype :: Lens' SOP (Maybe (Tree Int))
fontSOPtype = lens _fontSOPtype (\a b -> a {_fontSOPtype = b})
fontSOPfile :: Lens' SOP (Maybe (Tree ByteString))
fontSOPfile = lens _fontSOPfile (\a b -> a {_fontSOPfile = b})
fontSOPs :: Lens' SOP (Vec2)
fontSOPs = lens _fontSOPs (\a b -> a {_fontSOPs = b})
fontSOPvcenter :: Lens' SOP (Maybe (Tree Bool))
fontSOPvcenter = lens _fontSOPvcenter (\a b -> a {_fontSOPvcenter = b})
fontSOPtexture :: Lens' SOP (Maybe (Tree Int))
fontSOPtexture = lens _fontSOPtexture (\a b -> a {_fontSOPtexture = b})
fontSOPitalic :: Lens' SOP (Maybe (Tree Float))
fontSOPitalic = lens _fontSOPitalic (\a b -> a {_fontSOPitalic = b})
fontSOPkern :: Lens' SOP (Vec2)
fontSOPkern = lens _fontSOPkern (\a b -> a {_fontSOPkern = b})
fontSOPhcenter :: Lens' SOP (Maybe (Tree Bool))
fontSOPhcenter = lens _fontSOPhcenter (\a b -> a {_fontSOPhcenter = b})
fontSOPlod :: Lens' SOP (Maybe (Tree Float))
fontSOPlod = lens _fontSOPlod (\a b -> a {_fontSOPlod = b})
fontSOPtext :: Lens' SOP (Maybe (Tree ByteString))
fontSOPtext = lens _fontSOPtext (\a b -> a {_fontSOPtext = b})
fontSOPt :: Lens' SOP (Vec3)
fontSOPt = lens _fontSOPt (\a b -> a {_fontSOPt = b})
fontSOPhole :: Lens' SOP (Maybe (Tree Bool))
fontSOPhole = lens _fontSOPhole (\a b -> a {_fontSOPhole = b})

twistSOPstrength :: Lens' SOP (Maybe (Tree Float))
twistSOPstrength = lens _twistSOPstrength (\a b -> a {_twistSOPstrength = b})
twistSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
twistSOPgroup = lens _twistSOPgroup (\a b -> a {_twistSOPgroup = b})
twistSOPp :: Lens' SOP (Vec3)
twistSOPp = lens _twistSOPp (\a b -> a {_twistSOPp = b})
twistSOProll :: Lens' SOP (Maybe (Tree Float))
twistSOProll = lens _twistSOProll (\a b -> a {_twistSOProll = b})
twistSOPsaxis :: Lens' SOP (Maybe (Tree Int))
twistSOPsaxis = lens _twistSOPsaxis (\a b -> a {_twistSOPsaxis = b})
twistSOPpaxis :: Lens' SOP (Maybe (Tree Int))
twistSOPpaxis = lens _twistSOPpaxis (\a b -> a {_twistSOPpaxis = b})
twistSOPop :: Lens' SOP (Maybe (Tree Int))
twistSOPop = lens _twistSOPop (\a b -> a {_twistSOPop = b})

revolveSOPcap :: Lens' SOP (Maybe (Tree Bool))
revolveSOPcap = lens _revolveSOPcap (\a b -> a {_revolveSOPcap = b})
revolveSOPsurftype :: Lens' SOP (Maybe (Tree Int))
revolveSOPsurftype = lens _revolveSOPsurftype (\a b -> a {_revolveSOPsurftype = b})
revolveSOPtype :: Lens' SOP (Maybe (Tree Int))
revolveSOPtype = lens _revolveSOPtype (\a b -> a {_revolveSOPtype = b})
revolveSOPpolys :: Lens' SOP (Maybe (Tree Bool))
revolveSOPpolys = lens _revolveSOPpolys (\a b -> a {_revolveSOPpolys = b})
revolveSOPdivs :: Lens' SOP (Maybe (Tree Int))
revolveSOPdivs = lens _revolveSOPdivs (\a b -> a {_revolveSOPdivs = b})
revolveSOPorigin :: Lens' SOP (Vec3)
revolveSOPorigin = lens _revolveSOPorigin (\a b -> a {_revolveSOPorigin = b})
revolveSOPbeginangle :: Lens' SOP (Maybe (Tree Float))
revolveSOPbeginangle = lens _revolveSOPbeginangle (\a b -> a {_revolveSOPbeginangle = b})
revolveSOPimperfect :: Lens' SOP (Maybe (Tree Bool))
revolveSOPimperfect = lens _revolveSOPimperfect (\a b -> a {_revolveSOPimperfect = b})
revolveSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
revolveSOPgroup = lens _revolveSOPgroup (\a b -> a {_revolveSOPgroup = b})
revolveSOPdir :: Lens' SOP (Vec3)
revolveSOPdir = lens _revolveSOPdir (\a b -> a {_revolveSOPdir = b})
revolveSOPendangle :: Lens' SOP (Maybe (Tree Float))
revolveSOPendangle = lens _revolveSOPendangle (\a b -> a {_revolveSOPendangle = b})
revolveSOPorder :: Lens' SOP (Maybe (Tree Int))
revolveSOPorder = lens _revolveSOPorder (\a b -> a {_revolveSOPorder = b})

polyloftSOPpointgroup4 :: Lens' SOP (Maybe (Tree ByteString))
polyloftSOPpointgroup4 = lens _polyloftSOPpointgroup4 (\a b -> a {_polyloftSOPpointgroup4 = b})
polyloftSOPpointgroup2 :: Lens' SOP (Maybe (Tree ByteString))
polyloftSOPpointgroup2 = lens _polyloftSOPpointgroup2 (\a b -> a {_polyloftSOPpointgroup2 = b})
polyloftSOPpointgroup1 :: Lens' SOP (Maybe (Tree ByteString))
polyloftSOPpointgroup1 = lens _polyloftSOPpointgroup1 (\a b -> a {_polyloftSOPpointgroup1 = b})
polyloftSOPconsolidate :: Lens' SOP (Maybe (Tree Bool))
polyloftSOPconsolidate = lens _polyloftSOPconsolidate (\a b -> a {_polyloftSOPconsolidate = b})
polyloftSOPclosev :: Lens' SOP (Maybe (Tree Int))
polyloftSOPclosev = lens _polyloftSOPclosev (\a b -> a {_polyloftSOPclosev = b})
polyloftSOPpointgroup0 :: Lens' SOP (Maybe (Tree ByteString))
polyloftSOPpointgroup0 = lens _polyloftSOPpointgroup0 (\a b -> a {_polyloftSOPpointgroup0 = b})
polyloftSOPcloseu :: Lens' SOP (Maybe (Tree Int))
polyloftSOPcloseu = lens _polyloftSOPcloseu (\a b -> a {_polyloftSOPcloseu = b})
polyloftSOPpointgroup3 :: Lens' SOP (Maybe (Tree ByteString))
polyloftSOPpointgroup3 = lens _polyloftSOPpointgroup3 (\a b -> a {_polyloftSOPpointgroup3 = b})
polyloftSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
polyloftSOPgroup = lens _polyloftSOPgroup (\a b -> a {_polyloftSOPgroup = b})
polyloftSOPpolygroup :: Lens' SOP (Maybe (Tree ByteString))
polyloftSOPpolygroup = lens _polyloftSOPpolygroup (\a b -> a {_polyloftSOPpolygroup = b})
polyloftSOPcreategroup :: Lens' SOP (Maybe (Tree Bool))
polyloftSOPcreategroup = lens _polyloftSOPcreategroup (\a b -> a {_polyloftSOPcreategroup = b})
polyloftSOPprim :: Lens' SOP (Maybe (Tree Bool))
polyloftSOPprim = lens _polyloftSOPprim (\a b -> a {_polyloftSOPprim = b})
polyloftSOPpointgroup5 :: Lens' SOP (Maybe (Tree ByteString))
polyloftSOPpointgroup5 = lens _polyloftSOPpointgroup5 (\a b -> a {_polyloftSOPpointgroup5 = b})
polyloftSOPminimize :: Lens' SOP (Maybe (Tree Int))
polyloftSOPminimize = lens _polyloftSOPminimize (\a b -> a {_polyloftSOPminimize = b})
polyloftSOPdist :: Lens' SOP (Maybe (Tree Float))
polyloftSOPdist = lens _polyloftSOPdist (\a b -> a {_polyloftSOPdist = b})
polyloftSOPproximity :: Lens' SOP (Maybe (Tree Bool))
polyloftSOPproximity = lens _polyloftSOPproximity (\a b -> a {_polyloftSOPproximity = b})

polypatchSOPconnecttype :: Lens' SOP (Maybe (Tree Int))
polypatchSOPconnecttype = lens _polypatchSOPconnecttype (\a b -> a {_polypatchSOPconnecttype = b})
polypatchSOPlastvclamp :: Lens' SOP (Maybe (Tree Int))
polypatchSOPlastvclamp = lens _polypatchSOPlastvclamp (\a b -> a {_polypatchSOPlastvclamp = b})
polypatchSOPpolys :: Lens' SOP (Maybe (Tree Bool))
polypatchSOPpolys = lens _polypatchSOPpolys (\a b -> a {_polypatchSOPpolys = b})
polypatchSOPdivisionsx :: Lens' SOP (Maybe (Tree Int))
polypatchSOPdivisionsx = lens _polypatchSOPdivisionsx (\a b -> a {_polypatchSOPdivisionsx = b})
polypatchSOPfirstvclamp :: Lens' SOP (Maybe (Tree Int))
polypatchSOPfirstvclamp = lens _polypatchSOPfirstvclamp (\a b -> a {_polypatchSOPfirstvclamp = b})
polypatchSOPlastuclamp :: Lens' SOP (Maybe (Tree Int))
polypatchSOPlastuclamp = lens _polypatchSOPlastuclamp (\a b -> a {_polypatchSOPlastuclamp = b})
polypatchSOPfirstuclamp :: Lens' SOP (Maybe (Tree Int))
polypatchSOPfirstuclamp = lens _polypatchSOPfirstuclamp (\a b -> a {_polypatchSOPfirstuclamp = b})
polypatchSOPcloseu :: Lens' SOP (Maybe (Tree Int))
polypatchSOPcloseu = lens _polypatchSOPcloseu (\a b -> a {_polypatchSOPcloseu = b})
polypatchSOPbasis :: Lens' SOP (Maybe (Tree Int))
polypatchSOPbasis = lens _polypatchSOPbasis (\a b -> a {_polypatchSOPbasis = b})
polypatchSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
polypatchSOPgroup = lens _polypatchSOPgroup (\a b -> a {_polypatchSOPgroup = b})
polypatchSOPclosev :: Lens' SOP (Maybe (Tree Int))
polypatchSOPclosev = lens _polypatchSOPclosev (\a b -> a {_polypatchSOPclosev = b})
polypatchSOPdivisionsy :: Lens' SOP (Maybe (Tree Int))
polypatchSOPdivisionsy = lens _polypatchSOPdivisionsy (\a b -> a {_polypatchSOPdivisionsy = b})



filletSOPlrwidth2 :: Lens' SOP (Maybe (Tree Float))
filletSOPlrwidth2 = lens _filletSOPlrwidth2 (\a b -> a {_filletSOPlrwidth2 = b})
filletSOPleftuv1 :: Lens' SOP (Maybe (Tree Float))
filletSOPleftuv1 = lens _filletSOPleftuv1 (\a b -> a {_filletSOPleftuv1 = b})
filletSOPrightuv2 :: Lens' SOP (Maybe (Tree Float))
filletSOPrightuv2 = lens _filletSOPrightuv2 (\a b -> a {_filletSOPrightuv2 = b})
filletSOPprimtype :: Lens' SOP (Maybe (Tree Int))
filletSOPprimtype = lens _filletSOPprimtype (\a b -> a {_filletSOPprimtype = b})
filletSOPlrscale2 :: Lens' SOP (Maybe (Tree Float))
filletSOPlrscale2 = lens _filletSOPlrscale2 (\a b -> a {_filletSOPlrscale2 = b})
filletSOPseamless :: Lens' SOP (Maybe (Tree Bool))
filletSOPseamless = lens _filletSOPseamless (\a b -> a {_filletSOPseamless = b})
filletSOPinc :: Lens' SOP (Maybe (Tree Int))
filletSOPinc = lens _filletSOPinc (\a b -> a {_filletSOPinc = b})
filletSOPfillet :: Lens' SOP (Maybe (Tree Int))
filletSOPfillet = lens _filletSOPfillet (\a b -> a {_filletSOPfillet = b})
filletSOPloop :: Lens' SOP (Maybe (Tree Bool))
filletSOPloop = lens _filletSOPloop (\a b -> a {_filletSOPloop = b})
filletSOPlroffset1 :: Lens' SOP (Maybe (Tree Float))
filletSOPlroffset1 = lens _filletSOPlroffset1 (\a b -> a {_filletSOPlroffset1 = b})
filletSOPfillettype :: Lens' SOP (Maybe (Tree Int))
filletSOPfillettype = lens _filletSOPfillettype (\a b -> a {_filletSOPfillettype = b})
filletSOPleftuv2 :: Lens' SOP (Maybe (Tree Float))
filletSOPleftuv2 = lens _filletSOPleftuv2 (\a b -> a {_filletSOPleftuv2 = b})
filletSOPlrwidth1 :: Lens' SOP (Maybe (Tree Float))
filletSOPlrwidth1 = lens _filletSOPlrwidth1 (\a b -> a {_filletSOPlrwidth1 = b})
filletSOPrightuv1 :: Lens' SOP (Maybe (Tree Float))
filletSOPrightuv1 = lens _filletSOPrightuv1 (\a b -> a {_filletSOPrightuv1 = b})
filletSOPcut :: Lens' SOP (Maybe (Tree Bool))
filletSOPcut = lens _filletSOPcut (\a b -> a {_filletSOPcut = b})
filletSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
filletSOPgroup = lens _filletSOPgroup (\a b -> a {_filletSOPgroup = b})
filletSOPlroffset2 :: Lens' SOP (Maybe (Tree Float))
filletSOPlroffset2 = lens _filletSOPlroffset2 (\a b -> a {_filletSOPlroffset2 = b})
filletSOPdir :: Lens' SOP (Maybe (Tree Int))
filletSOPdir = lens _filletSOPdir (\a b -> a {_filletSOPdir = b})
filletSOPlrscale1 :: Lens' SOP (Maybe (Tree Float))
filletSOPlrscale1 = lens _filletSOPlrscale1 (\a b -> a {_filletSOPlrscale1 = b})
filletSOPorder :: Lens' SOP (Maybe (Tree Int))
filletSOPorder = lens _filletSOPorder (\a b -> a {_filletSOPorder = b})

inversecurveSOPchop :: Lens' SOP (Maybe (Tree CHOP))
inversecurveSOPchop = lens _inversecurveSOPchop (\a b -> a {_inversecurveSOPchop = b})

trailSOPreset :: Lens' SOP (Maybe (Tree Bool))
trailSOPreset = lens _trailSOPreset (\a b -> a {_trailSOPreset = b})
trailSOPresetpulse :: Lens' SOP (Maybe (Tree Bool))
trailSOPresetpulse = lens _trailSOPresetpulse (\a b -> a {_trailSOPresetpulse = b})
trailSOPsurftype :: Lens' SOP (Maybe (Tree Int))
trailSOPsurftype = lens _trailSOPsurftype (\a b -> a {_trailSOPsurftype = b})
trailSOPresult :: Lens' SOP (Maybe (Tree Int))
trailSOPresult = lens _trailSOPresult (\a b -> a {_trailSOPresult = b})
trailSOPcache :: Lens' SOP (Maybe (Tree Int))
trailSOPcache = lens _trailSOPcache (\a b -> a {_trailSOPcache = b})
trailSOPaccurate :: Lens' SOP (Maybe (Tree Bool))
trailSOPaccurate = lens _trailSOPaccurate (\a b -> a {_trailSOPaccurate = b})
trailSOPevalframe :: Lens' SOP (Maybe (Tree Bool))
trailSOPevalframe = lens _trailSOPevalframe (\a b -> a {_trailSOPevalframe = b})
trailSOPinc :: Lens' SOP (Maybe (Tree Int))
trailSOPinc = lens _trailSOPinc (\a b -> a {_trailSOPinc = b})
trailSOPlength :: Lens' SOP (Maybe (Tree Int))
trailSOPlength = lens _trailSOPlength (\a b -> a {_trailSOPlength = b})
trailSOPvelscale :: Lens' SOP (Maybe (Tree Float))
trailSOPvelscale = lens _trailSOPvelscale (\a b -> a {_trailSOPvelscale = b})
trailSOPclose :: Lens' SOP (Maybe (Tree Bool))
trailSOPclose = lens _trailSOPclose (\a b -> a {_trailSOPclose = b})

attributecreateSOPcompnml :: Lens' SOP (Maybe (Tree Bool))
attributecreateSOPcompnml = lens _attributecreateSOPcompnml (\a b -> a {_attributecreateSOPcompnml = b})
attributecreateSOPcomptang :: Lens' SOP (Maybe (Tree Bool))
attributecreateSOPcomptang = lens _attributecreateSOPcomptang (\a b -> a {_attributecreateSOPcomptang = b})

latticeSOPkernel :: Lens' SOP (Maybe (Tree ByteString))
latticeSOPkernel = lens _latticeSOPkernel (\a b -> a {_latticeSOPkernel = b})
latticeSOPdivsx :: Lens' SOP (Maybe (Tree Int))
latticeSOPdivsx = lens _latticeSOPdivsx (\a b -> a {_latticeSOPdivsx = b})
latticeSOPradius :: Lens' SOP (Maybe (Tree Float))
latticeSOPradius = lens _latticeSOPradius (\a b -> a {_latticeSOPradius = b})
latticeSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
latticeSOPgroup = lens _latticeSOPgroup (\a b -> a {_latticeSOPgroup = b})
latticeSOPdivsy :: Lens' SOP (Maybe (Tree Int))
latticeSOPdivsy = lens _latticeSOPdivsy (\a b -> a {_latticeSOPdivsy = b})
latticeSOPdivsz :: Lens' SOP (Maybe (Tree Int))
latticeSOPdivsz = lens _latticeSOPdivsz (\a b -> a {_latticeSOPdivsz = b})

tubeSOPcols :: Lens' SOP (Maybe (Tree Int))
tubeSOPcols = lens _tubeSOPcols (\a b -> a {_tubeSOPcols = b})
tubeSOPorderv :: Lens' SOP (Maybe (Tree Int))
tubeSOPorderv = lens _tubeSOPorderv (\a b -> a {_tubeSOPorderv = b})
tubeSOPsurftype :: Lens' SOP (Maybe (Tree Int))
tubeSOPsurftype = lens _tubeSOPsurftype (\a b -> a {_tubeSOPsurftype = b})
tubeSOPtype :: Lens' SOP (Maybe (Tree Int))
tubeSOPtype = lens _tubeSOPtype (\a b -> a {_tubeSOPtype = b})
tubeSOPnormals :: Lens' SOP (Maybe (Tree Bool))
tubeSOPnormals = lens _tubeSOPnormals (\a b -> a {_tubeSOPnormals = b})
tubeSOPtexture :: Lens' SOP (Maybe (Tree Int))
tubeSOPtexture = lens _tubeSOPtexture (\a b -> a {_tubeSOPtexture = b})
tubeSOPmodifybounds :: Lens' SOP (Maybe (Tree Bool))
tubeSOPmodifybounds = lens _tubeSOPmodifybounds (\a b -> a {_tubeSOPmodifybounds = b})
tubeSOPcap :: Lens' SOP (Maybe (Tree Bool))
tubeSOPcap = lens _tubeSOPcap (\a b -> a {_tubeSOPcap = b})
tubeSOPimperfect :: Lens' SOP (Maybe (Tree Bool))
tubeSOPimperfect = lens _tubeSOPimperfect (\a b -> a {_tubeSOPimperfect = b})
tubeSOPrad2 :: Lens' SOP (Maybe (Tree Float))
tubeSOPrad2 = lens _tubeSOPrad2 (\a b -> a {_tubeSOPrad2 = b})
tubeSOProws :: Lens' SOP (Maybe (Tree Int))
tubeSOProws = lens _tubeSOProws (\a b -> a {_tubeSOProws = b})
tubeSOPorient :: Lens' SOP (Maybe (Tree Int))
tubeSOPorient = lens _tubeSOPorient (\a b -> a {_tubeSOPorient = b})
tubeSOPrad1 :: Lens' SOP (Maybe (Tree Float))
tubeSOPrad1 = lens _tubeSOPrad1 (\a b -> a {_tubeSOPrad1 = b})
tubeSOPheight :: Lens' SOP (Maybe (Tree Float))
tubeSOPheight = lens _tubeSOPheight (\a b -> a {_tubeSOPheight = b})
tubeSOPt :: Lens' SOP (Vec3)
tubeSOPt = lens _tubeSOPt (\a b -> a {_tubeSOPt = b})
tubeSOPorderu :: Lens' SOP (Maybe (Tree Int))
tubeSOPorderu = lens _tubeSOPorderu (\a b -> a {_tubeSOPorderu = b})

armSOPshoulder3t :: Lens' SOP (Vec3)
armSOPshoulder3t = lens _armSOPshoulder3t (\a b -> a {_armSOPshoulder3t = b})
armSOPwrist1t :: Lens' SOP (Vec3)
armSOPwrist1t = lens _armSOPwrist1t (\a b -> a {_armSOPwrist1t = b})
armSOPshoulder :: Lens' SOP (Maybe (Tree Float))
armSOPshoulder = lens _armSOPshoulder (\a b -> a {_armSOPshoulder = b})
armSOPelbow3t :: Lens' SOP (Vec3)
armSOPelbow3t = lens _armSOPelbow3t (\a b -> a {_armSOPelbow3t = b})
armSOPflipelbow :: Lens' SOP (Maybe (Tree Bool))
armSOPflipelbow = lens _armSOPflipelbow (\a b -> a {_armSOPflipelbow = b})
armSOPshoulder1t :: Lens' SOP (Vec3)
armSOPshoulder1t = lens _armSOPshoulder1t (\a b -> a {_armSOPshoulder1t = b})
armSOPaxis :: Lens' SOP (Maybe (Tree Int))
armSOPaxis = lens _armSOPaxis (\a b -> a {_armSOPaxis = b})
armSOPwrist5t :: Lens' SOP (Vec3)
armSOPwrist5t = lens _armSOPwrist5t (\a b -> a {_armSOPwrist5t = b})
armSOPcapttype :: Lens' SOP (Maybe (Tree Int))
armSOPcapttype = lens _armSOPcapttype (\a b -> a {_armSOPcapttype = b})
armSOPelbow :: Lens' SOP (Maybe (Tree Float))
armSOPelbow = lens _armSOPelbow (\a b -> a {_armSOPelbow = b})
armSOProtatehand :: Lens' SOP (Maybe (Tree Bool))
armSOProtatehand = lens _armSOProtatehand (\a b -> a {_armSOProtatehand = b})
armSOPelbow1t :: Lens' SOP (Vec3)
armSOPelbow1t = lens _armSOPelbow1t (\a b -> a {_armSOPelbow1t = b})
armSOPwrist3t :: Lens' SOP (Vec3)
armSOPwrist3t = lens _armSOPwrist3t (\a b -> a {_armSOPwrist3t = b})
armSOPclavlength :: Lens' SOP (Maybe (Tree Float))
armSOPclavlength = lens _armSOPclavlength (\a b -> a {_armSOPclavlength = b})
armSOPelbow4t :: Lens' SOP (Vec3)
armSOPelbow4t = lens _armSOPelbow4t (\a b -> a {_armSOPelbow4t = b})
armSOPwrist :: Lens' SOP (Maybe (Tree Float))
armSOPwrist = lens _armSOPwrist (\a b -> a {_armSOPwrist = b})
armSOPs :: Lens' SOP (Vec3)
armSOPs = lens _armSOPs (\a b -> a {_armSOPs = b})
armSOPshoulder2t :: Lens' SOP (Vec3)
armSOPshoulder2t = lens _armSOPshoulder2t (\a b -> a {_armSOPshoulder2t = b})
armSOPshoulder4t :: Lens' SOP (Vec3)
armSOPshoulder4t = lens _armSOPshoulder4t (\a b -> a {_armSOPshoulder4t = b})
armSOPwrist4t :: Lens' SOP (Vec3)
armSOPwrist4t = lens _armSOPwrist4t (\a b -> a {_armSOPwrist4t = b})
armSOPhandlength :: Lens' SOP (Maybe (Tree Float))
armSOPhandlength = lens _armSOPhandlength (\a b -> a {_armSOPhandlength = b})
armSOPhumlength :: Lens' SOP (Maybe (Tree Float))
armSOPhumlength = lens _armSOPhumlength (\a b -> a {_armSOPhumlength = b})
armSOPelbowtwist :: Lens' SOP (Maybe (Tree Float))
armSOPelbowtwist = lens _armSOPelbowtwist (\a b -> a {_armSOPelbowtwist = b})
armSOPulnalength :: Lens' SOP (Maybe (Tree Float))
armSOPulnalength = lens _armSOPulnalength (\a b -> a {_armSOPulnalength = b})
armSOPelbow2t :: Lens' SOP (Vec3)
armSOPelbow2t = lens _armSOPelbow2t (\a b -> a {_armSOPelbow2t = b})
armSOPbonerad :: Lens' SOP (Maybe (Tree Float))
armSOPbonerad = lens _armSOPbonerad (\a b -> a {_armSOPbonerad = b})
armSOPr :: Lens' SOP (Vec3)
armSOPr = lens _armSOPr (\a b -> a {_armSOPr = b})
armSOPwrist2t :: Lens' SOP (Vec3)
armSOPwrist2t = lens _armSOPwrist2t (\a b -> a {_armSOPwrist2t = b})
armSOPshoulder5t :: Lens' SOP (Vec3)
armSOPshoulder5t = lens _armSOPshoulder5t (\a b -> a {_armSOPshoulder5t = b})
armSOPt :: Lens' SOP (Vec3)
armSOPt = lens _armSOPt (\a b -> a {_armSOPt = b})
armSOPautoelbow :: Lens' SOP (Maybe (Tree Bool))
armSOPautoelbow = lens _armSOPautoelbow (\a b -> a {_armSOPautoelbow = b})
armSOPelbow5t :: Lens' SOP (Vec3)
armSOPelbow5t = lens _armSOPelbow5t (\a b -> a {_armSOPelbow5t = b})

transformSOPfromy :: Lens' SOP (Maybe (Tree Int))
transformSOPfromy = lens _transformSOPfromy (\a b -> a {_transformSOPfromy = b})
transformSOPposttx :: Lens' SOP (Maybe (Tree Int))
transformSOPposttx = lens _transformSOPposttx (\a b -> a {_transformSOPposttx = b})
transformSOPpostscalez :: Lens' SOP (Maybe (Tree Int))
transformSOPpostscalez = lens _transformSOPpostscalez (\a b -> a {_transformSOPpostscalez = b})
transformSOPpostscalex :: Lens' SOP (Maybe (Tree Int))
transformSOPpostscalex = lens _transformSOPpostscalex (\a b -> a {_transformSOPpostscalex = b})
transformSOPvlength :: Lens' SOP (Maybe (Tree Bool))
transformSOPvlength = lens _transformSOPvlength (\a b -> a {_transformSOPvlength = b})
transformSOPupvector :: Lens' SOP (Vec3)
transformSOPupvector = lens _transformSOPupvector (\a b -> a {_transformSOPupvector = b})
transformSOPposttz :: Lens' SOP (Maybe (Tree Int))
transformSOPposttz = lens _transformSOPposttz (\a b -> a {_transformSOPposttz = b})
transformSOPtoy :: Lens' SOP (Maybe (Tree Int))
transformSOPtoy = lens _transformSOPtoy (\a b -> a {_transformSOPtoy = b})
transformSOPxord :: Lens' SOP (Maybe (Tree Int))
transformSOPxord = lens _transformSOPxord (\a b -> a {_transformSOPxord = b})
transformSOPr :: Lens' SOP (Vec3)
transformSOPr = lens _transformSOPr (\a b -> a {_transformSOPr = b})
transformSOPfromz :: Lens' SOP (Maybe (Tree Int))
transformSOPfromz = lens _transformSOPfromz (\a b -> a {_transformSOPfromz = b})
transformSOPfromx :: Lens' SOP (Maybe (Tree Int))
transformSOPfromx = lens _transformSOPfromx (\a b -> a {_transformSOPfromx = b})
transformSOPtox :: Lens' SOP (Maybe (Tree Int))
transformSOPtox = lens _transformSOPtox (\a b -> a {_transformSOPtox = b})
transformSOPpostscaley :: Lens' SOP (Maybe (Tree Int))
transformSOPpostscaley = lens _transformSOPpostscaley (\a b -> a {_transformSOPpostscaley = b})
transformSOPs :: Lens' SOP (Vec3)
transformSOPs = lens _transformSOPs (\a b -> a {_transformSOPs = b})
transformSOPp :: Lens' SOP (Vec3)
transformSOPp = lens _transformSOPp (\a b -> a {_transformSOPp = b})
transformSOPpostscale :: Lens' SOP (Maybe (Tree Int))
transformSOPpostscale = lens _transformSOPpostscale (\a b -> a {_transformSOPpostscale = b})
transformSOPpostty :: Lens' SOP (Maybe (Tree Int))
transformSOPpostty = lens _transformSOPpostty (\a b -> a {_transformSOPpostty = b})
transformSOPtoz :: Lens' SOP (Maybe (Tree Int))
transformSOPtoz = lens _transformSOPtoz (\a b -> a {_transformSOPtoz = b})
transformSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
transformSOPgroup = lens _transformSOPgroup (\a b -> a {_transformSOPgroup = b})
transformSOPrord :: Lens' SOP (Maybe (Tree Int))
transformSOPrord = lens _transformSOPrord (\a b -> a {_transformSOPrord = b})
transformSOPscale :: Lens' SOP (Maybe (Tree Float))
transformSOPscale = lens _transformSOPscale (\a b -> a {_transformSOPscale = b})
transformSOPt :: Lens' SOP (Vec3)
transformSOPt = lens _transformSOPt (\a b -> a {_transformSOPt = b})

vertexSOPcustom3val2 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom3val2 = lens _vertexSOPcustom3val2 (\a b -> a {_vertexSOPcustom3val2 = b})
vertexSOPcustom2val1 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom2val1 = lens _vertexSOPcustom2val1 (\a b -> a {_vertexSOPcustom2val1 = b})
vertexSOPcustom4type :: Lens' SOP (Maybe (Tree Int))
vertexSOPcustom4type = lens _vertexSOPcustom4type (\a b -> a {_vertexSOPcustom4type = b})
vertexSOPalpha :: Lens' SOP (Maybe (Tree Float))
vertexSOPalpha = lens _vertexSOPalpha (\a b -> a {_vertexSOPalpha = b})
vertexSOPdoclr :: Lens' SOP (Maybe (Tree Int))
vertexSOPdoclr = lens _vertexSOPdoclr (\a b -> a {_vertexSOPdoclr = b})
vertexSOPdocrease :: Lens' SOP (Maybe (Tree Int))
vertexSOPdocrease = lens _vertexSOPdocrease (\a b -> a {_vertexSOPdocrease = b})
vertexSOPcustom4val2 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom4val2 = lens _vertexSOPcustom4val2 (\a b -> a {_vertexSOPcustom4val2 = b})
vertexSOPcustom3val4 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom3val4 = lens _vertexSOPcustom3val4 (\a b -> a {_vertexSOPcustom3val4 = b})
vertexSOPcustom2 :: Lens' SOP (Maybe (Tree ByteString))
vertexSOPcustom2 = lens _vertexSOPcustom2 (\a b -> a {_vertexSOPcustom2 = b})
vertexSOPcustom1 :: Lens' SOP (Maybe (Tree ByteString))
vertexSOPcustom1 = lens _vertexSOPcustom1 (\a b -> a {_vertexSOPcustom1 = b})
vertexSOPdiff :: Lens' SOP (Vec3)
vertexSOPdiff = lens _vertexSOPdiff (\a b -> a {_vertexSOPdiff = b})
vertexSOPcustom1val3 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom1val3 = lens _vertexSOPcustom1val3 (\a b -> a {_vertexSOPcustom1val3 = b})
vertexSOPcustom2val4 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom2val4 = lens _vertexSOPcustom2val4 (\a b -> a {_vertexSOPcustom2val4 = b})
vertexSOPcustom4val3 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom4val3 = lens _vertexSOPcustom4val3 (\a b -> a {_vertexSOPcustom4val3 = b})
vertexSOPcustom3val3 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom3val3 = lens _vertexSOPcustom3val3 (\a b -> a {_vertexSOPcustom3val3 = b})
vertexSOPcrease :: Lens' SOP (Maybe (Tree Float))
vertexSOPcrease = lens _vertexSOPcrease (\a b -> a {_vertexSOPcrease = b})
vertexSOPcustom3val1 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom3val1 = lens _vertexSOPcustom3val1 (\a b -> a {_vertexSOPcustom3val1 = b})
vertexSOPcustom1val2 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom1val2 = lens _vertexSOPcustom1val2 (\a b -> a {_vertexSOPcustom1val2 = b})
vertexSOPcustom4val1 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom4val1 = lens _vertexSOPcustom4val1 (\a b -> a {_vertexSOPcustom4val1 = b})
vertexSOPcustom3type :: Lens' SOP (Maybe (Tree Int))
vertexSOPcustom3type = lens _vertexSOPcustom3type (\a b -> a {_vertexSOPcustom3type = b})
vertexSOPcustom4 :: Lens' SOP (Maybe (Tree ByteString))
vertexSOPcustom4 = lens _vertexSOPcustom4 (\a b -> a {_vertexSOPcustom4 = b})
vertexSOPmap :: Lens' SOP (Vec3)
vertexSOPmap = lens _vertexSOPmap (\a b -> a {_vertexSOPmap = b})
vertexSOPcustom3 :: Lens' SOP (Maybe (Tree ByteString))
vertexSOPcustom3 = lens _vertexSOPcustom3 (\a b -> a {_vertexSOPcustom3 = b})
vertexSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
vertexSOPgroup = lens _vertexSOPgroup (\a b -> a {_vertexSOPgroup = b})
vertexSOPcustom4val4 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom4val4 = lens _vertexSOPcustom4val4 (\a b -> a {_vertexSOPcustom4val4 = b})
vertexSOPcustom1val4 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom1val4 = lens _vertexSOPcustom1val4 (\a b -> a {_vertexSOPcustom1val4 = b})
vertexSOPcustom1val1 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom1val1 = lens _vertexSOPcustom1val1 (\a b -> a {_vertexSOPcustom1val1 = b})
vertexSOPcustom2type :: Lens' SOP (Maybe (Tree Int))
vertexSOPcustom2type = lens _vertexSOPcustom2type (\a b -> a {_vertexSOPcustom2type = b})
vertexSOPdouvw :: Lens' SOP (Maybe (Tree Int))
vertexSOPdouvw = lens _vertexSOPdouvw (\a b -> a {_vertexSOPdouvw = b})
vertexSOPcustom1type :: Lens' SOP (Maybe (Tree Int))
vertexSOPcustom1type = lens _vertexSOPcustom1type (\a b -> a {_vertexSOPcustom1type = b})
vertexSOPcustom2val2 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom2val2 = lens _vertexSOPcustom2val2 (\a b -> a {_vertexSOPcustom2val2 = b})
vertexSOPcustom2val3 :: Lens' SOP (Maybe (Tree Float))
vertexSOPcustom2val3 = lens _vertexSOPcustom2val3 (\a b -> a {_vertexSOPcustom2val3 = b})

groupSOPselect2 :: Lens' SOP (Maybe (Tree Int))
groupSOPselect2 = lens _groupSOPselect2 (\a b -> a {_groupSOPselect2 = b})
groupSOPnot1 :: Lens' SOP (Maybe (Tree Bool))
groupSOPnot1 = lens _groupSOPnot1 (\a b -> a {_groupSOPnot1 = b})
groupSOPusenumber :: Lens' SOP (Maybe (Tree Bool))
groupSOPusenumber = lens _groupSOPusenumber (\a b -> a {_groupSOPusenumber = b})
groupSOPpreserve :: Lens' SOP (Maybe (Tree Bool))
groupSOPpreserve = lens _groupSOPpreserve (\a b -> a {_groupSOPpreserve = b})
groupSOPop1 :: Lens' SOP (Maybe (Tree Int))
groupSOPop1 = lens _groupSOPop1 (\a b -> a {_groupSOPop1 = b})
groupSOPgrp4 :: Lens' SOP (Maybe (Tree ByteString))
groupSOPgrp4 = lens _groupSOPgrp4 (\a b -> a {_groupSOPgrp4 = b})
groupSOPgrp3 :: Lens' SOP (Maybe (Tree ByteString))
groupSOPgrp3 = lens _groupSOPgrp3 (\a b -> a {_groupSOPgrp3 = b})
groupSOPgrp1 :: Lens' SOP (Maybe (Tree ByteString))
groupSOPgrp1 = lens _groupSOPgrp1 (\a b -> a {_groupSOPgrp1 = b})
groupSOPnot4 :: Lens' SOP (Maybe (Tree Bool))
groupSOPnot4 = lens _groupSOPnot4 (\a b -> a {_groupSOPnot4 = b})
groupSOPtransfer :: Lens' SOP (Maybe (Tree Bool))
groupSOPtransfer = lens _groupSOPtransfer (\a b -> a {_groupSOPtransfer = b})
groupSOPedgestep :: Lens' SOP (Maybe (Tree Int))
groupSOPedgestep = lens _groupSOPedgestep (\a b -> a {_groupSOPedgestep = b})
groupSOPdir :: Lens' SOP (Vec3)
groupSOPdir = lens _groupSOPdir (\a b -> a {_groupSOPdir = b})
groupSOPdoangle :: Lens' SOP (Maybe (Tree Bool))
groupSOPdoangle = lens _groupSOPdoangle (\a b -> a {_groupSOPdoangle = b})
groupSOPdestroyname :: Lens' SOP (Maybe (Tree ByteString))
groupSOPdestroyname = lens _groupSOPdestroyname (\a b -> a {_groupSOPdestroyname = b})
groupSOPboundarygroups :: Lens' SOP (Maybe (Tree Bool))
groupSOPboundarygroups = lens _groupSOPboundarygroups (\a b -> a {_groupSOPboundarygroups = b})
groupSOPentity :: Lens' SOP (Maybe (Tree Int))
groupSOPentity = lens _groupSOPentity (\a b -> a {_groupSOPentity = b})
groupSOPusenormal :: Lens' SOP (Maybe (Tree Bool))
groupSOPusenormal = lens _groupSOPusenormal (\a b -> a {_groupSOPusenormal = b})
groupSOPselect1 :: Lens' SOP (Maybe (Tree Int))
groupSOPselect1 = lens _groupSOPselect1 (\a b -> a {_groupSOPselect1 = b})
groupSOPuseedges :: Lens' SOP (Maybe (Tree Bool))
groupSOPuseedges = lens _groupSOPuseedges (\a b -> a {_groupSOPuseedges = b})
groupSOPrangeend :: Lens' SOP (Maybe (Tree Int))
groupSOPrangeend = lens _groupSOPrangeend (\a b -> a {_groupSOPrangeend = b})
groupSOPgeotype :: Lens' SOP (Maybe (Tree Int))
groupSOPgeotype = lens _groupSOPgeotype (\a b -> a {_groupSOPgeotype = b})
groupSOPop2 :: Lens' SOP (Maybe (Tree Int))
groupSOPop2 = lens _groupSOPop2 (\a b -> a {_groupSOPop2 = b})
groupSOPgrp2 :: Lens' SOP (Maybe (Tree ByteString))
groupSOPgrp2 = lens _groupSOPgrp2 (\a b -> a {_groupSOPgrp2 = b})
groupSOPrangestart :: Lens' SOP (Maybe (Tree Int))
groupSOPrangestart = lens _groupSOPrangestart (\a b -> a {_groupSOPrangestart = b})
groupSOPangle :: Lens' SOP (Maybe (Tree Float))
groupSOPangle = lens _groupSOPangle (\a b -> a {_groupSOPangle = b})
groupSOPnewname :: Lens' SOP (Maybe (Tree ByteString))
groupSOPnewname = lens _groupSOPnewname (\a b -> a {_groupSOPnewname = b})
groupSOPcrname :: Lens' SOP (Maybe (Tree ByteString))
groupSOPcrname = lens _groupSOPcrname (\a b -> a {_groupSOPcrname = b})
groupSOPnot3 :: Lens' SOP (Maybe (Tree Bool))
groupSOPnot3 = lens _groupSOPnot3 (\a b -> a {_groupSOPnot3 = b})
groupSOPcnvtname :: Lens' SOP (Maybe (Tree ByteString))
groupSOPcnvtname = lens _groupSOPcnvtname (\a b -> a {_groupSOPcnvtname = b})
groupSOPusebounds :: Lens' SOP (Maybe (Tree Bool))
groupSOPusebounds = lens _groupSOPusebounds (\a b -> a {_groupSOPusebounds = b})
groupSOPordered :: Lens' SOP (Maybe (Tree Bool))
groupSOPordered = lens _groupSOPordered (\a b -> a {_groupSOPordered = b})
groupSOPpattern :: Lens' SOP (Maybe (Tree ByteString))
groupSOPpattern = lens _groupSOPpattern (\a b -> a {_groupSOPpattern = b})
groupSOPboundtype :: Lens' SOP (Maybe (Tree Int))
groupSOPboundtype = lens _groupSOPboundtype (\a b -> a {_groupSOPboundtype = b})
groupSOPgroupop :: Lens' SOP (Maybe (Tree Int))
groupSOPgroupop = lens _groupSOPgroupop (\a b -> a {_groupSOPgroupop = b})
groupSOPdodepth :: Lens' SOP (Maybe (Tree Bool))
groupSOPdodepth = lens _groupSOPdodepth (\a b -> a {_groupSOPdodepth = b})
groupSOPop3 :: Lens' SOP (Maybe (Tree Int))
groupSOPop3 = lens _groupSOPop3 (\a b -> a {_groupSOPop3 = b})
groupSOPfilter :: Lens' SOP (Maybe (Tree Int))
groupSOPfilter = lens _groupSOPfilter (\a b -> a {_groupSOPfilter = b})
groupSOPsize :: Lens' SOP (Vec3)
groupSOPsize = lens _groupSOPsize (\a b -> a {_groupSOPsize = b})
groupSOPedgeangle :: Lens' SOP (Maybe (Tree Float))
groupSOPedgeangle = lens _groupSOPedgeangle (\a b -> a {_groupSOPedgeangle = b})
groupSOPoldname :: Lens' SOP (Maybe (Tree ByteString))
groupSOPoldname = lens _groupSOPoldname (\a b -> a {_groupSOPoldname = b})
groupSOPgrpequal :: Lens' SOP (Maybe (Tree ByteString))
groupSOPgrpequal = lens _groupSOPgrpequal (\a b -> a {_groupSOPgrpequal = b})
groupSOPnot2 :: Lens' SOP (Maybe (Tree Bool))
groupSOPnot2 = lens _groupSOPnot2 (\a b -> a {_groupSOPnot2 = b})
groupSOPcnvtype :: Lens' SOP (Maybe (Tree Int))
groupSOPcnvtype = lens _groupSOPcnvtype (\a b -> a {_groupSOPcnvtype = b})
groupSOPconvertg :: Lens' SOP (Maybe (Tree ByteString))
groupSOPconvertg = lens _groupSOPconvertg (\a b -> a {_groupSOPconvertg = b})
groupSOPunshared :: Lens' SOP (Maybe (Tree Bool))
groupSOPunshared = lens _groupSOPunshared (\a b -> a {_groupSOPunshared = b})
groupSOPt :: Lens' SOP (Vec3)
groupSOPt = lens _groupSOPt (\a b -> a {_groupSOPt = b})
groupSOPpoint :: Lens' SOP (Maybe (Tree Int))
groupSOPpoint = lens _groupSOPpoint (\a b -> a {_groupSOPpoint = b})

refineSOPdomainv2 :: Lens' SOP (Maybe (Tree Float))
refineSOPdomainv2 = lens _refineSOPdomainv2 (\a b -> a {_refineSOPdomainv2 = b})
refineSOPfirstv :: Lens' SOP (Maybe (Tree Bool))
refineSOPfirstv = lens _refineSOPfirstv (\a b -> a {_refineSOPfirstv = b})
refineSOPrefinev :: Lens' SOP (Maybe (Tree Int))
refineSOPrefinev = lens _refineSOPrefinev (\a b -> a {_refineSOPrefinev = b})
refineSOPfirstu :: Lens' SOP (Maybe (Tree Bool))
refineSOPfirstu = lens _refineSOPfirstu (\a b -> a {_refineSOPfirstu = b})
refineSOPsecondv :: Lens' SOP (Maybe (Tree Bool))
refineSOPsecondv = lens _refineSOPsecondv (\a b -> a {_refineSOPsecondv = b})
refineSOPunrefinev :: Lens' SOP (Maybe (Tree Int))
refineSOPunrefinev = lens _refineSOPunrefinev (\a b -> a {_refineSOPunrefinev = b})
refineSOPtolv :: Lens' SOP (Maybe (Tree Float))
refineSOPtolv = lens _refineSOPtolv (\a b -> a {_refineSOPtolv = b})
refineSOPdomainu2 :: Lens' SOP (Maybe (Tree Float))
refineSOPdomainu2 = lens _refineSOPdomainu2 (\a b -> a {_refineSOPdomainu2 = b})
refineSOPdomainu1 :: Lens' SOP (Maybe (Tree Float))
refineSOPdomainu1 = lens _refineSOPdomainu1 (\a b -> a {_refineSOPdomainu1 = b})
refineSOPunrefineu :: Lens' SOP (Maybe (Tree Int))
refineSOPunrefineu = lens _refineSOPunrefineu (\a b -> a {_refineSOPunrefineu = b})
refineSOPdivsu :: Lens' SOP (Maybe (Tree Int))
refineSOPdivsu = lens _refineSOPdivsu (\a b -> a {_refineSOPdivsu = b})
refineSOPdomainv1 :: Lens' SOP (Maybe (Tree Float))
refineSOPdomainv1 = lens _refineSOPdomainv1 (\a b -> a {_refineSOPdomainv1 = b})
refineSOPtolu :: Lens' SOP (Maybe (Tree Float))
refineSOPtolu = lens _refineSOPtolu (\a b -> a {_refineSOPtolu = b})
refineSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
refineSOPgroup = lens _refineSOPgroup (\a b -> a {_refineSOPgroup = b})
refineSOPsubdivspace :: Lens' SOP (Maybe (Tree Int))
refineSOPsubdivspace = lens _refineSOPsubdivspace (\a b -> a {_refineSOPsubdivspace = b})
refineSOPsecondu :: Lens' SOP (Maybe (Tree Bool))
refineSOPsecondu = lens _refineSOPsecondu (\a b -> a {_refineSOPsecondu = b})
refineSOPrefineu :: Lens' SOP (Maybe (Tree Int))
refineSOPrefineu = lens _refineSOPrefineu (\a b -> a {_refineSOPrefineu = b})
refineSOPrefinespace :: Lens' SOP (Maybe (Tree Int))
refineSOPrefinespace = lens _refineSOPrefinespace (\a b -> a {_refineSOPrefinespace = b})
refineSOPdivsv :: Lens' SOP (Maybe (Tree Int))
refineSOPdivsv = lens _refineSOPdivsv (\a b -> a {_refineSOPdivsv = b})

divideSOPplanar :: Lens' SOP (Maybe (Tree Bool))
divideSOPplanar = lens _divideSOPplanar (\a b -> a {_divideSOPplanar = b})
divideSOPangle :: Lens' SOP (Vec3)
divideSOPangle = lens _divideSOPangle (\a b -> a {_divideSOPangle = b})
divideSOPdivs :: Lens' SOP (Maybe (Tree Int))
divideSOPdivs = lens _divideSOPdivs (\a b -> a {_divideSOPdivs = b})
divideSOPconvex :: Lens' SOP (Maybe (Tree Bool))
divideSOPconvex = lens _divideSOPconvex (\a b -> a {_divideSOPconvex = b})
divideSOPoffset :: Lens' SOP (Vec3)
divideSOPoffset = lens _divideSOPoffset (\a b -> a {_divideSOPoffset = b})
divideSOPsize :: Lens' SOP (Vec3)
divideSOPsize = lens _divideSOPsize (\a b -> a {_divideSOPsize = b})
divideSOPweight1 :: Lens' SOP (Maybe (Tree Float))
divideSOPweight1 = lens _divideSOPweight1 (\a b -> a {_divideSOPweight1 = b})
divideSOPsmooth :: Lens' SOP (Maybe (Tree Bool))
divideSOPsmooth = lens _divideSOPsmooth (\a b -> a {_divideSOPsmooth = b})
divideSOPdual :: Lens' SOP (Maybe (Tree Bool))
divideSOPdual = lens _divideSOPdual (\a b -> a {_divideSOPdual = b})
divideSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
divideSOPgroup = lens _divideSOPgroup (\a b -> a {_divideSOPgroup = b})
divideSOPbrick :: Lens' SOP (Maybe (Tree Bool))
divideSOPbrick = lens _divideSOPbrick (\a b -> a {_divideSOPbrick = b})
divideSOPweight2 :: Lens' SOP (Maybe (Tree Float))
divideSOPweight2 = lens _divideSOPweight2 (\a b -> a {_divideSOPweight2 = b})
divideSOPremovesh :: Lens' SOP (Maybe (Tree Bool))
divideSOPremovesh = lens _divideSOPremovesh (\a b -> a {_divideSOPremovesh = b})
divideSOPnumsides :: Lens' SOP (Maybe (Tree Int))
divideSOPnumsides = lens _divideSOPnumsides (\a b -> a {_divideSOPnumsides = b})

resampleSOPmeasure :: Lens' SOP (Maybe (Tree Int))
resampleSOPmeasure = lens _resampleSOPmeasure (\a b -> a {_resampleSOPmeasure = b})
resampleSOPsegs :: Lens' SOP (Maybe (Tree Int))
resampleSOPsegs = lens _resampleSOPsegs (\a b -> a {_resampleSOPsegs = b})
resampleSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
resampleSOPgroup = lens _resampleSOPgroup (\a b -> a {_resampleSOPgroup = b})
resampleSOPlod :: Lens' SOP (Maybe (Tree Float))
resampleSOPlod = lens _resampleSOPlod (\a b -> a {_resampleSOPlod = b})
resampleSOPlast :: Lens' SOP (Maybe (Tree Bool))
resampleSOPlast = lens _resampleSOPlast (\a b -> a {_resampleSOPlast = b})
resampleSOPmethod :: Lens' SOP (Maybe (Tree Int))
resampleSOPmethod = lens _resampleSOPmethod (\a b -> a {_resampleSOPmethod = b})
resampleSOPdosegs :: Lens' SOP (Maybe (Tree Bool))
resampleSOPdosegs = lens _resampleSOPdosegs (\a b -> a {_resampleSOPdosegs = b})
resampleSOPdolength :: Lens' SOP (Maybe (Tree Bool))
resampleSOPdolength = lens _resampleSOPdolength (\a b -> a {_resampleSOPdolength = b})
resampleSOPedge :: Lens' SOP (Maybe (Tree Bool))
resampleSOPedge = lens _resampleSOPedge (\a b -> a {_resampleSOPedge = b})
resampleSOPlength :: Lens' SOP (Maybe (Tree Float))
resampleSOPlength = lens _resampleSOPlength (\a b -> a {_resampleSOPlength = b})

clipSOPbelow :: Lens' SOP (Maybe (Tree ByteString))
clipSOPbelow = lens _clipSOPbelow (\a b -> a {_clipSOPbelow = b})
clipSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
clipSOPgroup = lens _clipSOPgroup (\a b -> a {_clipSOPgroup = b})
clipSOPnewg :: Lens' SOP (Maybe (Tree Bool))
clipSOPnewg = lens _clipSOPnewg (\a b -> a {_clipSOPnewg = b})
clipSOPclipop :: Lens' SOP (Maybe (Tree Int))
clipSOPclipop = lens _clipSOPclipop (\a b -> a {_clipSOPclipop = b})
clipSOPdir :: Lens' SOP (Vec3)
clipSOPdir = lens _clipSOPdir (\a b -> a {_clipSOPdir = b})
clipSOPdist :: Lens' SOP (Maybe (Tree Float))
clipSOPdist = lens _clipSOPdist (\a b -> a {_clipSOPdist = b})
clipSOPabove :: Lens' SOP (Maybe (Tree ByteString))
clipSOPabove = lens _clipSOPabove (\a b -> a {_clipSOPabove = b})

springSOPresetpulse :: Lens' SOP (Maybe (Tree Bool))
springSOPresetpulse = lens _springSOPresetpulse (\a b -> a {_springSOPresetpulse = b})
springSOPfixed :: Lens' SOP (Maybe (Tree ByteString))
springSOPfixed = lens _springSOPfixed (\a b -> a {_springSOPfixed = b})
springSOPattractmode :: Lens' SOP (Maybe (Tree Int))
springSOPattractmode = lens _springSOPattractmode (\a b -> a {_springSOPattractmode = b})
springSOPgaintan :: Lens' SOP (Maybe (Tree Float))
springSOPgaintan = lens _springSOPgaintan (\a b -> a {_springSOPgaintan = b})
springSOPspringk :: Lens' SOP (Maybe (Tree Float))
springSOPspringk = lens _springSOPspringk (\a b -> a {_springSOPspringk = b})
springSOPgainnorm :: Lens' SOP (Maybe (Tree Float))
springSOPgainnorm = lens _springSOPgainnorm (\a b -> a {_springSOPgainnorm = b})
springSOPtimeinc :: Lens' SOP (Maybe (Tree Float))
springSOPtimeinc = lens _springSOPtimeinc (\a b -> a {_springSOPtimeinc = b})
springSOPcopygroups :: Lens' SOP (Maybe (Tree Bool))
springSOPcopygroups = lens _springSOPcopygroups (\a b -> a {_springSOPcopygroups = b})
springSOPrevertfixed :: Lens' SOP (Maybe (Tree Bool))
springSOPrevertfixed = lens _springSOPrevertfixed (\a b -> a {_springSOPrevertfixed = b})
springSOPexternal :: Lens' SOP (Vec3)
springSOPexternal = lens _springSOPexternal (\a b -> a {_springSOPexternal = b})
springSOPdodrag :: Lens' SOP (Maybe (Tree Bool))
springSOPdodrag = lens _springSOPdodrag (\a b -> a {_springSOPdodrag = b})
springSOPlimitpos :: Lens' SOP (Vec3)
springSOPlimitpos = lens _springSOPlimitpos (\a b -> a {_springSOPlimitpos = b})
springSOPtension :: Lens' SOP (Maybe (Tree Float))
springSOPtension = lens _springSOPtension (\a b -> a {_springSOPtension = b})
springSOPdomass :: Lens' SOP (Maybe (Tree Bool))
springSOPdomass = lens _springSOPdomass (\a b -> a {_springSOPdomass = b})
springSOPperiod :: Lens' SOP (Maybe (Tree Float))
springSOPperiod = lens _springSOPperiod (\a b -> a {_springSOPperiod = b})
springSOPaccurate :: Lens' SOP (Maybe (Tree Bool))
springSOPaccurate = lens _springSOPaccurate (\a b -> a {_springSOPaccurate = b})
springSOPturb :: Lens' SOP (Vec3)
springSOPturb = lens _springSOPturb (\a b -> a {_springSOPturb = b})
springSOPtimepreroll :: Lens' SOP (Maybe (Tree Float))
springSOPtimepreroll = lens _springSOPtimepreroll (\a b -> a {_springSOPtimepreroll = b})
springSOPhit :: Lens' SOP (Maybe (Tree Int))
springSOPhit = lens _springSOPhit (\a b -> a {_springSOPhit = b})
springSOPseed :: Lens' SOP (Maybe (Tree Int))
springSOPseed = lens _springSOPseed (\a b -> a {_springSOPseed = b})
springSOPdrag :: Lens' SOP (Maybe (Tree Float))
springSOPdrag = lens _springSOPdrag (\a b -> a {_springSOPdrag = b})
springSOPmass :: Lens' SOP (Maybe (Tree Float))
springSOPmass = lens _springSOPmass (\a b -> a {_springSOPmass = b})
springSOPlimitneg :: Lens' SOP (Vec3)
springSOPlimitneg = lens _springSOPlimitneg (\a b -> a {_springSOPlimitneg = b})
springSOPspringbehavior :: Lens' SOP (Maybe (Tree Int))
springSOPspringbehavior = lens _springSOPspringbehavior (\a b -> a {_springSOPspringbehavior = b})
springSOPreset :: Lens' SOP (Maybe (Tree Bool))
springSOPreset = lens _springSOPreset (\a b -> a {_springSOPreset = b})
springSOPwind :: Lens' SOP (Vec3)
springSOPwind = lens _springSOPwind (\a b -> a {_springSOPwind = b})

superquadSOPcols :: Lens' SOP (Maybe (Tree Int))
superquadSOPcols = lens _superquadSOPcols (\a b -> a {_superquadSOPcols = b})
superquadSOPsurftype :: Lens' SOP (Maybe (Tree Int))
superquadSOPsurftype = lens _superquadSOPsurftype (\a b -> a {_superquadSOPsurftype = b})
superquadSOPtype :: Lens' SOP (Maybe (Tree Int))
superquadSOPtype = lens _superquadSOPtype (\a b -> a {_superquadSOPtype = b})
superquadSOPnormals :: Lens' SOP (Maybe (Tree Bool))
superquadSOPnormals = lens _superquadSOPnormals (\a b -> a {_superquadSOPnormals = b})
superquadSOPangle :: Lens' SOP (Maybe (Tree Float))
superquadSOPangle = lens _superquadSOPangle (\a b -> a {_superquadSOPangle = b})
superquadSOPexpxy :: Lens' SOP (Maybe (Tree Float))
superquadSOPexpxy = lens _superquadSOPexpxy (\a b -> a {_superquadSOPexpxy = b})
superquadSOPmodifybounds :: Lens' SOP (Maybe (Tree Bool))
superquadSOPmodifybounds = lens _superquadSOPmodifybounds (\a b -> a {_superquadSOPmodifybounds = b})
superquadSOPexpz :: Lens' SOP (Maybe (Tree Float))
superquadSOPexpz = lens _superquadSOPexpz (\a b -> a {_superquadSOPexpz = b})
superquadSOProws :: Lens' SOP (Maybe (Tree Int))
superquadSOProws = lens _superquadSOProws (\a b -> a {_superquadSOProws = b})
superquadSOPrad :: Lens' SOP (Vec3)
superquadSOPrad = lens _superquadSOPrad (\a b -> a {_superquadSOPrad = b})
superquadSOPorient :: Lens' SOP (Maybe (Tree Int))
superquadSOPorient = lens _superquadSOPorient (\a b -> a {_superquadSOPorient = b})
superquadSOPt :: Lens' SOP (Vec3)
superquadSOPt = lens _superquadSOPt (\a b -> a {_superquadSOPt = b})
superquadSOPtexture :: Lens' SOP (Maybe (Tree Int))
superquadSOPtexture = lens _superquadSOPtexture (\a b -> a {_superquadSOPtexture = b})
superquadSOPcusp :: Lens' SOP (Maybe (Tree Bool))
superquadSOPcusp = lens _superquadSOPcusp (\a b -> a {_superquadSOPcusp = b})
superquadSOPupole :: Lens' SOP (Maybe (Tree Bool))
superquadSOPupole = lens _superquadSOPupole (\a b -> a {_superquadSOPupole = b})

profileSOPvrange1 :: Lens' SOP (Maybe (Tree Float))
profileSOPvrange1 = lens _profileSOPvrange1 (\a b -> a {_profileSOPvrange1 = b})
profileSOPcsharp :: Lens' SOP (Maybe (Tree Bool))
profileSOPcsharp = lens _profileSOPcsharp (\a b -> a {_profileSOPcsharp = b})
profileSOPsdivs :: Lens' SOP (Maybe (Tree Int))
profileSOPsdivs = lens _profileSOPsdivs (\a b -> a {_profileSOPsdivs = b})
profileSOPurange2 :: Lens' SOP (Maybe (Tree Float))
profileSOPurange2 = lens _profileSOPurange2 (\a b -> a {_profileSOPurange2 = b})
profileSOPdelprof :: Lens' SOP (Maybe (Tree Bool))
profileSOPdelprof = lens _profileSOPdelprof (\a b -> a {_profileSOPdelprof = b})
profileSOPmaptype :: Lens' SOP (Maybe (Tree Int))
profileSOPmaptype = lens _profileSOPmaptype (\a b -> a {_profileSOPmaptype = b})
profileSOPsmooth :: Lens' SOP (Maybe (Tree Bool))
profileSOPsmooth = lens _profileSOPsmooth (\a b -> a {_profileSOPsmooth = b})
profileSOPkeepsurf :: Lens' SOP (Maybe (Tree Bool))
profileSOPkeepsurf = lens _profileSOPkeepsurf (\a b -> a {_profileSOPkeepsurf = b})
profileSOPtolerance :: Lens' SOP (Maybe (Tree Float))
profileSOPtolerance = lens _profileSOPtolerance (\a b -> a {_profileSOPtolerance = b})
profileSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
profileSOPgroup = lens _profileSOPgroup (\a b -> a {_profileSOPgroup = b})
profileSOPparametric :: Lens' SOP (Maybe (Tree Bool))
profileSOPparametric = lens _profileSOPparametric (\a b -> a {_profileSOPparametric = b})
profileSOPvrange2 :: Lens' SOP (Maybe (Tree Float))
profileSOPvrange2 = lens _profileSOPvrange2 (\a b -> a {_profileSOPvrange2 = b})
profileSOPorder :: Lens' SOP (Maybe (Tree Int))
profileSOPorder = lens _profileSOPorder (\a b -> a {_profileSOPorder = b})
profileSOPurange1 :: Lens' SOP (Maybe (Tree Float))
profileSOPurange1 = lens _profileSOPurange1 (\a b -> a {_profileSOPurange1 = b})

gridSOPinterpu :: Lens' SOP (Maybe (Tree Bool))
gridSOPinterpu = lens _gridSOPinterpu (\a b -> a {_gridSOPinterpu = b})
gridSOPcols :: Lens' SOP (Maybe (Tree Int))
gridSOPcols = lens _gridSOPcols (\a b -> a {_gridSOPcols = b})
gridSOPsurftype :: Lens' SOP (Maybe (Tree Int))
gridSOPsurftype = lens _gridSOPsurftype (\a b -> a {_gridSOPsurftype = b})
gridSOPtype :: Lens' SOP (Maybe (Tree Int))
gridSOPtype = lens _gridSOPtype (\a b -> a {_gridSOPtype = b})
gridSOPnormals :: Lens' SOP (Maybe (Tree Bool))
gridSOPnormals = lens _gridSOPnormals (\a b -> a {_gridSOPnormals = b})
gridSOPsize :: Lens' SOP (Vec2)
gridSOPsize = lens _gridSOPsize (\a b -> a {_gridSOPsize = b})
gridSOPtexture :: Lens' SOP (Maybe (Tree Int))
gridSOPtexture = lens _gridSOPtexture (\a b -> a {_gridSOPtexture = b})
gridSOProws :: Lens' SOP (Maybe (Tree Int))
gridSOProws = lens _gridSOProws (\a b -> a {_gridSOProws = b})
gridSOPinterpv :: Lens' SOP (Maybe (Tree Bool))
gridSOPinterpv = lens _gridSOPinterpv (\a b -> a {_gridSOPinterpv = b})
gridSOPmodifybounds :: Lens' SOP (Maybe (Tree Bool))
gridSOPmodifybounds = lens _gridSOPmodifybounds (\a b -> a {_gridSOPmodifybounds = b})
gridSOPorderv :: Lens' SOP (Maybe (Tree Int))
gridSOPorderv = lens _gridSOPorderv (\a b -> a {_gridSOPorderv = b})
gridSOPorient :: Lens' SOP (Maybe (Tree Int))
gridSOPorient = lens _gridSOPorient (\a b -> a {_gridSOPorient = b})
gridSOPt :: Lens' SOP (Vec3)
gridSOPt = lens _gridSOPt (\a b -> a {_gridSOPt = b})
gridSOPorderu :: Lens' SOP (Maybe (Tree Int))
gridSOPorderu = lens _gridSOPorderu (\a b -> a {_gridSOPorderu = b})

holeSOPangle :: Lens' SOP (Maybe (Tree Float))
holeSOPangle = lens _holeSOPangle (\a b -> a {_holeSOPangle = b})
holeSOPunbridge :: Lens' SOP (Maybe (Tree Bool))
holeSOPunbridge = lens _holeSOPunbridge (\a b -> a {_holeSOPunbridge = b})
holeSOPsnap :: Lens' SOP (Maybe (Tree Bool))
holeSOPsnap = lens _holeSOPsnap (\a b -> a {_holeSOPsnap = b})
holeSOPdist :: Lens' SOP (Maybe (Tree Float))
holeSOPdist = lens _holeSOPdist (\a b -> a {_holeSOPdist = b})
holeSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
holeSOPgroup = lens _holeSOPgroup (\a b -> a {_holeSOPgroup = b})

skinSOPsurftype :: Lens' SOP (Maybe (Tree Int))
skinSOPsurftype = lens _skinSOPsurftype (\a b -> a {_skinSOPsurftype = b})
skinSOPvprims :: Lens' SOP (Maybe (Tree ByteString))
skinSOPvprims = lens _skinSOPvprims (\a b -> a {_skinSOPvprims = b})
skinSOPpolys :: Lens' SOP (Maybe (Tree Bool))
skinSOPpolys = lens _skinSOPpolys (\a b -> a {_skinSOPpolys = b})
skinSOPprim :: Lens' SOP (Maybe (Tree Bool))
skinSOPprim = lens _skinSOPprim (\a b -> a {_skinSOPprim = b})
skinSOPorderv :: Lens' SOP (Maybe (Tree Int))
skinSOPorderv = lens _skinSOPorderv (\a b -> a {_skinSOPorderv = b})
skinSOPinc :: Lens' SOP (Maybe (Tree Int))
skinSOPinc = lens _skinSOPinc (\a b -> a {_skinSOPinc = b})
skinSOPuprims :: Lens' SOP (Maybe (Tree ByteString))
skinSOPuprims = lens _skinSOPuprims (\a b -> a {_skinSOPuprims = b})
skinSOPskinops :: Lens' SOP (Maybe (Tree Int))
skinSOPskinops = lens _skinSOPskinops (\a b -> a {_skinSOPskinops = b})
skinSOPforce :: Lens' SOP (Maybe (Tree Bool))
skinSOPforce = lens _skinSOPforce (\a b -> a {_skinSOPforce = b})
skinSOPclosev :: Lens' SOP (Maybe (Tree Int))
skinSOPclosev = lens _skinSOPclosev (\a b -> a {_skinSOPclosev = b})
skinSOPkeepshape :: Lens' SOP (Maybe (Tree Bool))
skinSOPkeepshape = lens _skinSOPkeepshape (\a b -> a {_skinSOPkeepshape = b})

lineSOPpoints :: Lens' SOP (Maybe (Tree Int))
lineSOPpoints = lens _lineSOPpoints (\a b -> a {_lineSOPpoints = b})
lineSOPpb :: Lens' SOP (Vec3)
lineSOPpb = lens _lineSOPpb (\a b -> a {_lineSOPpb = b})
lineSOPtexture :: Lens' SOP (Maybe (Tree Int))
lineSOPtexture = lens _lineSOPtexture (\a b -> a {_lineSOPtexture = b})
lineSOPpa :: Lens' SOP (Vec3)
lineSOPpa = lens _lineSOPpa (\a b -> a {_lineSOPpa = b})

deleteSOPselect2 :: Lens' SOP (Maybe (Tree Int))
deleteSOPselect2 = lens _deleteSOPselect2 (\a b -> a {_deleteSOPselect2 = b})
deleteSOPusenumber :: Lens' SOP (Maybe (Tree Bool))
deleteSOPusenumber = lens _deleteSOPusenumber (\a b -> a {_deleteSOPusenumber = b})
deleteSOPrangestart :: Lens' SOP (Maybe (Tree Int))
deleteSOPrangestart = lens _deleteSOPrangestart (\a b -> a {_deleteSOPrangestart = b})
deleteSOPremovegrp :: Lens' SOP (Maybe (Tree Bool))
deleteSOPremovegrp = lens _deleteSOPremovegrp (\a b -> a {_deleteSOPremovegrp = b})
deleteSOPusebounds :: Lens' SOP (Maybe (Tree Bool))
deleteSOPusebounds = lens _deleteSOPusebounds (\a b -> a {_deleteSOPusebounds = b})
deleteSOPdir :: Lens' SOP (Vec3)
deleteSOPdir = lens _deleteSOPdir (\a b -> a {_deleteSOPdir = b})
deleteSOPentity :: Lens' SOP (Maybe (Tree Int))
deleteSOPentity = lens _deleteSOPentity (\a b -> a {_deleteSOPentity = b})
deleteSOPpattern :: Lens' SOP (Maybe (Tree ByteString))
deleteSOPpattern = lens _deleteSOPpattern (\a b -> a {_deleteSOPpattern = b})
deleteSOPrangeend :: Lens' SOP (Maybe (Tree Int))
deleteSOPrangeend = lens _deleteSOPrangeend (\a b -> a {_deleteSOPrangeend = b})
deleteSOPusenormal :: Lens' SOP (Maybe (Tree Bool))
deleteSOPusenormal = lens _deleteSOPusenormal (\a b -> a {_deleteSOPusenormal = b})
deleteSOPfilter :: Lens' SOP (Maybe (Tree Int))
deleteSOPfilter = lens _deleteSOPfilter (\a b -> a {_deleteSOPfilter = b})
deleteSOPkeeppoints :: Lens' SOP (Maybe (Tree Bool))
deleteSOPkeeppoints = lens _deleteSOPkeeppoints (\a b -> a {_deleteSOPkeeppoints = b})
deleteSOPangle :: Lens' SOP (Maybe (Tree Float))
deleteSOPangle = lens _deleteSOPangle (\a b -> a {_deleteSOPangle = b})
deleteSOPselect1 :: Lens' SOP (Maybe (Tree Int))
deleteSOPselect1 = lens _deleteSOPselect1 (\a b -> a {_deleteSOPselect1 = b})
deleteSOPsize :: Lens' SOP (Vec3)
deleteSOPsize = lens _deleteSOPsize (\a b -> a {_deleteSOPsize = b})
deleteSOPnegate :: Lens' SOP (Maybe (Tree Int))
deleteSOPnegate = lens _deleteSOPnegate (\a b -> a {_deleteSOPnegate = b})
deleteSOPgroupop :: Lens' SOP (Maybe (Tree Int))
deleteSOPgroupop = lens _deleteSOPgroupop (\a b -> a {_deleteSOPgroupop = b})
deleteSOPboundtype :: Lens' SOP (Maybe (Tree Int))
deleteSOPboundtype = lens _deleteSOPboundtype (\a b -> a {_deleteSOPboundtype = b})
deleteSOPgroup :: Lens' SOP (Maybe (Tree ByteString))
deleteSOPgroup = lens _deleteSOPgroup (\a b -> a {_deleteSOPgroup = b})
deleteSOPt :: Lens' SOP (Vec3)
deleteSOPt = lens _deleteSOPt (\a b -> a {_deleteSOPt = b})
deleteSOPgeotype :: Lens' SOP (Maybe (Tree Int))
deleteSOPgeotype = lens _deleteSOPgeotype (\a b -> a {_deleteSOPgeotype = b})

polyreduceSOPreduce :: Lens' SOP (Maybe (Tree ByteString))
polyreduceSOPreduce = lens _polyreduceSOPreduce (\a b -> a {_polyreduceSOPreduce = b})
polyreduceSOPmeshinvert :: Lens' SOP (Maybe (Tree Bool))
polyreduceSOPmeshinvert = lens _polyreduceSOPmeshinvert (\a b -> a {_polyreduceSOPmeshinvert = b})
polyreduceSOPpercentage :: Lens' SOP (Maybe (Tree Float))
polyreduceSOPpercentage = lens _polyreduceSOPpercentage (\a b -> a {_polyreduceSOPpercentage = b})
polyreduceSOPdistance :: Lens' SOP (Maybe (Tree Float))
polyreduceSOPdistance = lens _polyreduceSOPdistance (\a b -> a {_polyreduceSOPdistance = b})
polyreduceSOPlengthweight :: Lens' SOP (Maybe (Tree Float))
polyreduceSOPlengthweight = lens _polyreduceSOPlengthweight (\a b -> a {_polyreduceSOPlengthweight = b})
polyreduceSOPcreaseweight :: Lens' SOP (Maybe (Tree Float))
polyreduceSOPcreaseweight = lens _polyreduceSOPcreaseweight (\a b -> a {_polyreduceSOPcreaseweight = b})
polyreduceSOPborderweight :: Lens' SOP (Maybe (Tree Float))
polyreduceSOPborderweight = lens _polyreduceSOPborderweight (\a b -> a {_polyreduceSOPborderweight = b})
polyreduceSOPkeepedges :: Lens' SOP (Maybe (Tree Bool))
polyreduceSOPkeepedges = lens _polyreduceSOPkeepedges (\a b -> a {_polyreduceSOPkeepedges = b})
polyreduceSOPtriangulate :: Lens' SOP (Maybe (Tree Bool))
polyreduceSOPtriangulate = lens _polyreduceSOPtriangulate (\a b -> a {_polyreduceSOPtriangulate = b})
polyreduceSOPoriginalpoints :: Lens' SOP (Maybe (Tree Bool))
polyreduceSOPoriginalpoints = lens _polyreduceSOPoriginalpoints (\a b -> a {_polyreduceSOPoriginalpoints = b})
polyreduceSOPnumpolys :: Lens' SOP (Maybe (Tree Int))
polyreduceSOPnumpolys = lens _polyreduceSOPnumpolys (\a b -> a {_polyreduceSOPnumpolys = b})
polyreduceSOPminpercent :: Lens' SOP (Maybe (Tree Float))
polyreduceSOPminpercent = lens _polyreduceSOPminpercent (\a b -> a {_polyreduceSOPminpercent = b})
polyreduceSOPcreases :: Lens' SOP (Maybe (Tree ByteString))
polyreduceSOPcreases = lens _polyreduceSOPcreases (\a b -> a {_polyreduceSOPcreases = b})

spriteSOPxyzchop :: Lens' SOP (Maybe (Tree CHOP))
spriteSOPxyzchop = lens _spriteSOPxyzchop (\a b -> a {_spriteSOPxyzchop = b})
spriteSOPfalloffend :: Lens' SOP (Maybe (Tree Float))
spriteSOPfalloffend = lens _spriteSOPfalloffend (\a b -> a {_spriteSOPfalloffend = b})
spriteSOPalphachop :: Lens' SOP (Maybe (Tree CHOP))
spriteSOPalphachop = lens _spriteSOPalphachop (\a b -> a {_spriteSOPalphachop = b})
spriteSOPwidthchop :: Lens' SOP (Maybe (Tree CHOP))
spriteSOPwidthchop = lens _spriteSOPwidthchop (\a b -> a {_spriteSOPwidthchop = b})
spriteSOPcolorchop :: Lens' SOP (Maybe (Tree CHOP))
spriteSOPcolorchop = lens _spriteSOPcolorchop (\a b -> a {_spriteSOPcolorchop = b})
spriteSOPconstantwidthnear :: Lens' SOP (Maybe (Tree Float))
spriteSOPconstantwidthnear = lens _spriteSOPconstantwidthnear (\a b -> a {_spriteSOPconstantwidthnear = b})
spriteSOPperspectivewidth :: Lens' SOP (Maybe (Tree Float))
spriteSOPperspectivewidth = lens _spriteSOPperspectivewidth (\a b -> a {_spriteSOPperspectivewidth = b})
spriteSOPfalloffstart :: Lens' SOP (Maybe (Tree Float))
spriteSOPfalloffstart = lens _spriteSOPfalloffstart (\a b -> a {_spriteSOPfalloffstart = b})
spriteSOPconstantwidth :: Lens' SOP (Maybe (Tree Float))
spriteSOPconstantwidth = lens _spriteSOPconstantwidth (\a b -> a {_spriteSOPconstantwidth = b})
spriteSOPconstantwitdhfar :: Lens' SOP (Maybe (Tree Float))
spriteSOPconstantwitdhfar = lens _spriteSOPconstantwitdhfar (\a b -> a {_spriteSOPconstantwitdhfar = b})

subdivideSOPcloseholes :: Lens' SOP (Maybe (Tree Int))
subdivideSOPcloseholes = lens _subdivideSOPcloseholes (\a b -> a {_subdivideSOPcloseholes = b})
subdivideSOPsubdivide :: Lens' SOP (Maybe (Tree ByteString))
subdivideSOPsubdivide = lens _subdivideSOPsubdivide (\a b -> a {_subdivideSOPsubdivide = b})
subdivideSOPoverridecrease :: Lens' SOP (Maybe (Tree Bool))
subdivideSOPoverridecrease = lens _subdivideSOPoverridecrease (\a b -> a {_subdivideSOPoverridecrease = b})
subdivideSOPbias :: Lens' SOP (Maybe (Tree Float))
subdivideSOPbias = lens _subdivideSOPbias (\a b -> a {_subdivideSOPbias = b})
subdivideSOPsurroundpoly :: Lens' SOP (Maybe (Tree Int))
subdivideSOPsurroundpoly = lens _subdivideSOPsurroundpoly (\a b -> a {_subdivideSOPsurroundpoly = b})
subdivideSOPoutputcrease :: Lens' SOP (Maybe (Tree Bool))
subdivideSOPoutputcrease = lens _subdivideSOPoutputcrease (\a b -> a {_subdivideSOPoutputcrease = b})
subdivideSOPoutcreasegroup :: Lens' SOP (Maybe (Tree ByteString))
subdivideSOPoutcreasegroup = lens _subdivideSOPoutcreasegroup (\a b -> a {_subdivideSOPoutcreasegroup = b})
subdivideSOPiterations :: Lens' SOP (Maybe (Tree Int))
subdivideSOPiterations = lens _subdivideSOPiterations (\a b -> a {_subdivideSOPiterations = b})
subdivideSOPcreaseweight :: Lens' SOP (Maybe (Tree Float))
subdivideSOPcreaseweight = lens _subdivideSOPcreaseweight (\a b -> a {_subdivideSOPcreaseweight = b})
subdivideSOPcreases :: Lens' SOP (Maybe (Tree ByteString))
subdivideSOPcreases = lens _subdivideSOPcreases (\a b -> a {_subdivideSOPcreases = b})

isosurfaceSOPnormals :: Lens' SOP (Maybe (Tree Bool))
isosurfaceSOPnormals = lens _isosurfaceSOPnormals (\a b -> a {_isosurfaceSOPnormals = b})
isosurfaceSOPmin :: Lens' SOP (Vec3)
isosurfaceSOPmin = lens _isosurfaceSOPmin (\a b -> a {_isosurfaceSOPmin = b})
isosurfaceSOPfunc :: Lens' SOP (Maybe (Tree Float))
isosurfaceSOPfunc = lens _isosurfaceSOPfunc (\a b -> a {_isosurfaceSOPfunc = b})
isosurfaceSOPdivsz :: Lens' SOP (Maybe (Tree Int))
isosurfaceSOPdivsz = lens _isosurfaceSOPdivsz (\a b -> a {_isosurfaceSOPdivsz = b})
isosurfaceSOPdivsy :: Lens' SOP (Maybe (Tree Int))
isosurfaceSOPdivsy = lens _isosurfaceSOPdivsy (\a b -> a {_isosurfaceSOPdivsy = b})
isosurfaceSOPmax :: Lens' SOP (Vec3)
isosurfaceSOPmax = lens _isosurfaceSOPmax (\a b -> a {_isosurfaceSOPmax = b})
isosurfaceSOPdivsx :: Lens' SOP (Maybe (Tree Int))
isosurfaceSOPdivsx = lens _isosurfaceSOPdivsx (\a b -> a {_isosurfaceSOPdivsx = b})

captureregionSOPcolor :: Lens' SOP (Vec3)
captureregionSOPcolor = lens _captureregionSOPcolor (\a b -> a {_captureregionSOPcolor = b})
captureregionSOPbheight :: Lens' SOP (Maybe (Tree Float))
captureregionSOPbheight = lens _captureregionSOPbheight (\a b -> a {_captureregionSOPbheight = b})
captureregionSOPbcap :: Lens' SOP (Vec3)
captureregionSOPbcap = lens _captureregionSOPbcap (\a b -> a {_captureregionSOPbcap = b})
captureregionSOPtcap :: Lens' SOP (Vec3)
captureregionSOPtcap = lens _captureregionSOPtcap (\a b -> a {_captureregionSOPtcap = b})
captureregionSOPweight2 :: Lens' SOP (Maybe (Tree Float))
captureregionSOPweight2 = lens _captureregionSOPweight2 (\a b -> a {_captureregionSOPweight2 = b})
captureregionSOPorient :: Lens' SOP (Maybe (Tree Int))
captureregionSOPorient = lens _captureregionSOPorient (\a b -> a {_captureregionSOPorient = b})
captureregionSOPt :: Lens' SOP (Vec3)
captureregionSOPt = lens _captureregionSOPt (\a b -> a {_captureregionSOPt = b})
captureregionSOPtheight :: Lens' SOP (Maybe (Tree Float))
captureregionSOPtheight = lens _captureregionSOPtheight (\a b -> a {_captureregionSOPtheight = b})
captureregionSOPweight1 :: Lens' SOP (Maybe (Tree Float))
captureregionSOPweight1 = lens _captureregionSOPweight1 (\a b -> a {_captureregionSOPweight1 = b})

scriptSOPcallbacks :: Lens' SOP (Maybe (Tree DAT))
scriptSOPcallbacks = lens _scriptSOPcallbacks (\a b -> a {_scriptSOPcallbacks = b})
scriptSOPsetuppars :: Lens' SOP (Maybe (Tree Bool))
scriptSOPsetuppars = lens _scriptSOPsetuppars (\a b -> a {_scriptSOPsetuppars = b})

claySOPvsharp :: Lens' SOP (Maybe (Tree Float))
claySOPvsharp = lens _claySOPvsharp (\a b -> a {_claySOPvsharp = b})
claySOPuvsnap1 :: Lens' SOP (Maybe (Tree Float))
claySOPuvsnap1 = lens _claySOPuvsnap1 (\a b -> a {_claySOPuvsnap1 = b})
claySOPv :: Lens' SOP (Maybe (Tree Float))
claySOPv = lens _claySOPv (\a b -> a {_claySOPv = b})
claySOPu :: Lens' SOP (Maybe (Tree Float))
claySOPu = lens _claySOPu (\a b -> a {_claySOPu = b})
claySOPvusebias :: Lens' SOP (Maybe (Tree Bool))
claySOPvusebias = lens _claySOPvusebias (\a b -> a {_claySOPvusebias = b})
claySOPubias :: Lens' SOP (Maybe (Tree Float))
claySOPubias = lens _claySOPubias (\a b -> a {_claySOPubias = b})
claySOPdir :: Lens' SOP (Vec3)
claySOPdir = lens _claySOPdir (\a b -> a {_claySOPdir = b})
claySOPvwarp :: Lens' SOP (Maybe (Tree Bool))
claySOPvwarp = lens _claySOPvwarp (\a b -> a {_claySOPvwarp = b})
claySOPxord :: Lens' SOP (Maybe (Tree Int))
claySOPxord = lens _claySOPxord (\a b -> a {_claySOPxord = b})
claySOPdist :: Lens' SOP (Maybe (Tree Float))
claySOPdist = lens _claySOPdist (\a b -> a {_claySOPdist = b})
claySOPr :: Lens' SOP (Vec3)
claySOPr = lens _claySOPr (\a b -> a {_claySOPr = b})
claySOPs :: Lens' SOP (Vec3)
claySOPs = lens _claySOPs (\a b -> a {_claySOPs = b})
claySOPp :: Lens' SOP (Vec3)
claySOPp = lens _claySOPp (\a b -> a {_claySOPp = b})
claySOPvbias :: Lens' SOP (Maybe (Tree Float))
claySOPvbias = lens _claySOPvbias (\a b -> a {_claySOPvbias = b})
claySOPusharp :: Lens' SOP (Maybe (Tree Float))
claySOPusharp = lens _claySOPusharp (\a b -> a {_claySOPusharp = b})
claySOPuwarp :: Lens' SOP (Maybe (Tree Bool))
claySOPuwarp = lens _claySOPuwarp (\a b -> a {_claySOPuwarp = b})
claySOPcoord :: Lens' SOP (Vec3)
claySOPcoord = lens _claySOPcoord (\a b -> a {_claySOPcoord = b})
claySOPgroup :: Lens' SOP (Maybe (Tree ByteString))
claySOPgroup = lens _claySOPgroup (\a b -> a {_claySOPgroup = b})
claySOPrord :: Lens' SOP (Maybe (Tree Int))
claySOPrord = lens _claySOPrord (\a b -> a {_claySOPrord = b})
claySOPuvsnap2 :: Lens' SOP (Maybe (Tree Float))
claySOPuvsnap2 = lens _claySOPuvsnap2 (\a b -> a {_claySOPuvsnap2 = b})
claySOPt :: Lens' SOP (Vec3)
claySOPt = lens _claySOPt (\a b -> a {_claySOPt = b})
claySOPnormal :: Lens' SOP (Maybe (Tree Bool))
claySOPnormal = lens _claySOPnormal (\a b -> a {_claySOPnormal = b})
claySOPuusebias :: Lens' SOP (Maybe (Tree Bool))
claySOPuusebias = lens _claySOPuusebias (\a b -> a {_claySOPuusebias = b})

remapTOPfillmode :: Lens' TOP (Maybe (Tree Int))
remapTOPfillmode = lens _remapTOPfillmode (\a b -> a {_remapTOPfillmode = b})
remapTOPresmult :: Lens' TOP (Maybe (Tree Bool))
remapTOPresmult = lens _remapTOPresmult (\a b -> a {_remapTOPresmult = b})
remapTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
remapTOPaspect2 = lens _remapTOPaspect2 (\a b -> a {_remapTOPaspect2 = b})
remapTOPformat :: Lens' TOP (Maybe (Tree Int))
remapTOPformat = lens _remapTOPformat (\a b -> a {_remapTOPformat = b})
remapTOPresmenu :: Lens' TOP (Maybe (Tree Int))
remapTOPresmenu = lens _remapTOPresmenu (\a b -> a {_remapTOPresmenu = b})
remapTOPnpasses :: Lens' TOP (Maybe (Tree Int))
remapTOPnpasses = lens _remapTOPnpasses (\a b -> a {_remapTOPnpasses = b})
remapTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
remapTOPresolutionw = lens _remapTOPresolutionw (\a b -> a {_remapTOPresolutionw = b})
remapTOPextend :: Lens' TOP (Maybe (Tree Int))
remapTOPextend = lens _remapTOPextend (\a b -> a {_remapTOPextend = b})
remapTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
remapTOPaspect1 = lens _remapTOPaspect1 (\a b -> a {_remapTOPaspect1 = b})
remapTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
remapTOPoutputresolution = lens _remapTOPoutputresolution (\a b -> a {_remapTOPoutputresolution = b})
remapTOPfliphorz :: Lens' TOP (Maybe (Tree Bool))
remapTOPfliphorz = lens _remapTOPfliphorz (\a b -> a {_remapTOPfliphorz = b})
remapTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
remapTOPresolutionh = lens _remapTOPresolutionh (\a b -> a {_remapTOPresolutionh = b})
remapTOPchanmask :: Lens' TOP (Maybe (Tree Int))
remapTOPchanmask = lens _remapTOPchanmask (\a b -> a {_remapTOPchanmask = b})
remapTOParmenu :: Lens' TOP (Maybe (Tree Int))
remapTOParmenu = lens _remapTOParmenu (\a b -> a {_remapTOParmenu = b})
remapTOPvertsource :: Lens' TOP (Maybe (Tree Int))
remapTOPvertsource = lens _remapTOPvertsource (\a b -> a {_remapTOPvertsource = b})
remapTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
remapTOPfiltertype = lens _remapTOPfiltertype (\a b -> a {_remapTOPfiltertype = b})
remapTOPhorzsource :: Lens' TOP (Maybe (Tree Int))
remapTOPhorzsource = lens _remapTOPhorzsource (\a b -> a {_remapTOPhorzsource = b})
remapTOPflipvert :: Lens' TOP (Maybe (Tree Bool))
remapTOPflipvert = lens _remapTOPflipvert (\a b -> a {_remapTOPflipvert = b})
remapTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
remapTOPoutputaspect = lens _remapTOPoutputaspect (\a b -> a {_remapTOPoutputaspect = b})
remapTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
remapTOPinputfiltertype = lens _remapTOPinputfiltertype (\a b -> a {_remapTOPinputfiltertype = b})

moviefileoutTOPquality :: Lens' TOP (Maybe (Tree Float))
moviefileoutTOPquality = lens _moviefileoutTOPquality (\a b -> a {_moviefileoutTOPquality = b})
moviefileoutTOPkeyframeinterval :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPkeyframeinterval = lens _moviefileoutTOPkeyframeinterval (\a b -> a {_moviefileoutTOPkeyframeinterval = b})
moviefileoutTOPaddframe :: Lens' TOP (Maybe (Tree Bool))
moviefileoutTOPaddframe = lens _moviefileoutTOPaddframe (\a b -> a {_moviefileoutTOPaddframe = b})
moviefileoutTOPformat :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPformat = lens _moviefileoutTOPformat (\a b -> a {_moviefileoutTOPformat = b})
moviefileoutTOPfile :: Lens' TOP (Maybe (Tree ByteString))
moviefileoutTOPfile = lens _moviefileoutTOPfile (\a b -> a {_moviefileoutTOPfile = b})
moviefileoutTOPhapsecondarycompression :: Lens' TOP (Maybe (Tree Bool))
moviefileoutTOPhapsecondarycompression = lens _moviefileoutTOPhapsecondarycompression (\a b -> a {_moviefileoutTOPhapsecondarycompression = b})
moviefileoutTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPinputfiltertype = lens _moviefileoutTOPinputfiltertype (\a b -> a {_moviefileoutTOPinputfiltertype = b})
moviefileoutTOPfps :: Lens' TOP (Maybe (Tree Float))
moviefileoutTOPfps = lens _moviefileoutTOPfps (\a b -> a {_moviefileoutTOPfps = b})
moviefileoutTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPoutputresolution = lens _moviefileoutTOPoutputresolution (\a b -> a {_moviefileoutTOPoutputresolution = b})
moviefileoutTOPfillmode :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPfillmode = lens _moviefileoutTOPfillmode (\a b -> a {_moviefileoutTOPfillmode = b})
moviefileoutTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPresolutionw = lens _moviefileoutTOPresolutionw (\a b -> a {_moviefileoutTOPresolutionw = b})
moviefileoutTOPaudiobitrate :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPaudiobitrate = lens _moviefileoutTOPaudiobitrate (\a b -> a {_moviefileoutTOPaudiobitrate = b})
moviefileoutTOPprofile :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPprofile = lens _moviefileoutTOPprofile (\a b -> a {_moviefileoutTOPprofile = b})
moviefileoutTOPbitratemode :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPbitratemode = lens _moviefileoutTOPbitratemode (\a b -> a {_moviefileoutTOPbitratemode = b})
moviefileoutTOPmoviepixelformat :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPmoviepixelformat = lens _moviefileoutTOPmoviepixelformat (\a b -> a {_moviefileoutTOPmoviepixelformat = b})
moviefileoutTOPn :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPn = lens _moviefileoutTOPn (\a b -> a {_moviefileoutTOPn = b})
moviefileoutTOPvideocodec :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPvideocodec = lens _moviefileoutTOPvideocodec (\a b -> a {_moviefileoutTOPvideocodec = b})
moviefileoutTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
moviefileoutTOPaspect2 = lens _moviefileoutTOPaspect2 (\a b -> a {_moviefileoutTOPaspect2 = b})
moviefileoutTOPimagefiletype :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPimagefiletype = lens _moviefileoutTOPimagefiletype (\a b -> a {_moviefileoutTOPimagefiletype = b})
moviefileoutTOPavgbitrate :: Lens' TOP (Maybe (Tree Float))
moviefileoutTOPavgbitrate = lens _moviefileoutTOPavgbitrate (\a b -> a {_moviefileoutTOPavgbitrate = b})
moviefileoutTOPaudiocodec :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPaudiocodec = lens _moviefileoutTOPaudiocodec (\a b -> a {_moviefileoutTOPaudiocodec = b})
moviefileoutTOPpeakbitrate :: Lens' TOP (Maybe (Tree Float))
moviefileoutTOPpeakbitrate = lens _moviefileoutTOPpeakbitrate (\a b -> a {_moviefileoutTOPpeakbitrate = b})
moviefileoutTOPresmult :: Lens' TOP (Maybe (Tree Bool))
moviefileoutTOPresmult = lens _moviefileoutTOPresmult (\a b -> a {_moviefileoutTOPresmult = b})
moviefileoutTOPtype :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPtype = lens _moviefileoutTOPtype (\a b -> a {_moviefileoutTOPtype = b})
moviefileoutTOPresmenu :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPresmenu = lens _moviefileoutTOPresmenu (\a b -> a {_moviefileoutTOPresmenu = b})
moviefileoutTOPencodetestmode :: Lens' TOP (Maybe (Tree Bool))
moviefileoutTOPencodetestmode = lens _moviefileoutTOPencodetestmode (\a b -> a {_moviefileoutTOPencodetestmode = b})
moviefileoutTOPchanmask :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPchanmask = lens _moviefileoutTOPchanmask (\a b -> a {_moviefileoutTOPchanmask = b})
moviefileoutTOPaudiochop :: Lens' TOP (Maybe (Tree CHOP))
moviefileoutTOPaudiochop = lens _moviefileoutTOPaudiochop (\a b -> a {_moviefileoutTOPaudiochop = b})
moviefileoutTOPmipmaps :: Lens' TOP (Maybe (Tree Bool))
moviefileoutTOPmipmaps = lens _moviefileoutTOPmipmaps (\a b -> a {_moviefileoutTOPmipmaps = b})
moviefileoutTOPnpasses :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPnpasses = lens _moviefileoutTOPnpasses (\a b -> a {_moviefileoutTOPnpasses = b})
moviefileoutTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPoutputaspect = lens _moviefileoutTOPoutputaspect (\a b -> a {_moviefileoutTOPoutputaspect = b})
moviefileoutTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPresolutionh = lens _moviefileoutTOPresolutionh (\a b -> a {_moviefileoutTOPresolutionh = b})
moviefileoutTOParmenu :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOParmenu = lens _moviefileoutTOParmenu (\a b -> a {_moviefileoutTOParmenu = b})
moviefileoutTOPmaxthread :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPmaxthread = lens _moviefileoutTOPmaxthread (\a b -> a {_moviefileoutTOPmaxthread = b})
moviefileoutTOPstallforopen :: Lens' TOP (Maybe (Tree Bool))
moviefileoutTOPstallforopen = lens _moviefileoutTOPstallforopen (\a b -> a {_moviefileoutTOPstallforopen = b})
moviefileoutTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
moviefileoutTOPaspect1 = lens _moviefileoutTOPaspect1 (\a b -> a {_moviefileoutTOPaspect1 = b})
moviefileoutTOPrecord :: Lens' TOP (Maybe (Tree Bool))
moviefileoutTOPrecord = lens _moviefileoutTOPrecord (\a b -> a {_moviefileoutTOPrecord = b})
moviefileoutTOPpause :: Lens' TOP (Maybe (Tree Bool))
moviefileoutTOPpause = lens _moviefileoutTOPpause (\a b -> a {_moviefileoutTOPpause = b})
moviefileoutTOPentropymode :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPentropymode = lens _moviefileoutTOPentropymode (\a b -> a {_moviefileoutTOPentropymode = b})
moviefileoutTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
moviefileoutTOPfiltertype = lens _moviefileoutTOPfiltertype (\a b -> a {_moviefileoutTOPfiltertype = b})

glslmultiTOPdepth :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPdepth = lens _glslmultiTOPdepth (\a b -> a {_glslmultiTOPdepth = b})
glslmultiTOPvalue3 :: Lens' TOP (Vec4)
glslmultiTOPvalue3 = lens _glslmultiTOPvalue3 (\a b -> a {_glslmultiTOPvalue3 = b})
glslmultiTOPglslversion :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPglslversion = lens _glslmultiTOPglslversion (\a b -> a {_glslmultiTOPglslversion = b})
glslmultiTOPfillmode :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPfillmode = lens _glslmultiTOPfillmode (\a b -> a {_glslmultiTOPfillmode = b})
glslmultiTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPresolutionw = lens _glslmultiTOPresolutionw (\a b -> a {_glslmultiTOPresolutionw = b})
glslmultiTOPacsize0 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacsize0 = lens _glslmultiTOPacsize0 (\a b -> a {_glslmultiTOPacsize0 = b})
glslmultiTOPclearvalue :: Lens' TOP (Vec4)
glslmultiTOPclearvalue = lens _glslmultiTOPclearvalue (\a b -> a {_glslmultiTOPclearvalue = b})
glslmultiTOPvalue24 :: Lens' TOP (Vec4)
glslmultiTOPvalue24 = lens _glslmultiTOPvalue24 (\a b -> a {_glslmultiTOPvalue24 = b})
glslmultiTOPdispatchsizey :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPdispatchsizey = lens _glslmultiTOPdispatchsizey (\a b -> a {_glslmultiTOPdispatchsizey = b})
glslmultiTOPvalue10 :: Lens' TOP (Vec4)
glslmultiTOPvalue10 = lens _glslmultiTOPvalue10 (\a b -> a {_glslmultiTOPvalue10 = b})
glslmultiTOPresmenu :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPresmenu = lens _glslmultiTOPresmenu (\a b -> a {_glslmultiTOPresmenu = b})
glslmultiTOPuniname12 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname12 = lens _glslmultiTOPuniname12 (\a b -> a {_glslmultiTOPuniname12 = b})
glslmultiTOPuniname25 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname25 = lens _glslmultiTOPuniname25 (\a b -> a {_glslmultiTOPuniname25 = b})
glslmultiTOPchopunitype9 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchopunitype9 = lens _glslmultiTOPchopunitype9 (\a b -> a {_glslmultiTOPchopunitype9 = b})
glslmultiTOPacinitval0 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacinitval0 = lens _glslmultiTOPacinitval0 (\a b -> a {_glslmultiTOPacinitval0 = b})
glslmultiTOPuniname1 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname1 = lens _glslmultiTOPuniname1 (\a b -> a {_glslmultiTOPuniname1 = b})
glslmultiTOPmatuniname2 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPmatuniname2 = lens _glslmultiTOPmatuniname2 (\a b -> a {_glslmultiTOPmatuniname2 = b})
glslmultiTOPuniname10 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname10 = lens _glslmultiTOPuniname10 (\a b -> a {_glslmultiTOPuniname10 = b})
glslmultiTOPchopuniname7 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPchopuniname7 = lens _glslmultiTOPchopuniname7 (\a b -> a {_glslmultiTOPchopuniname7 = b})
glslmultiTOPuniname11 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname11 = lens _glslmultiTOPuniname11 (\a b -> a {_glslmultiTOPuniname11 = b})
glslmultiTOPvalue23 :: Lens' TOP (Vec4)
glslmultiTOPvalue23 = lens _glslmultiTOPvalue23 (\a b -> a {_glslmultiTOPvalue23 = b})
glslmultiTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPoutputaspect = lens _glslmultiTOPoutputaspect (\a b -> a {_glslmultiTOPoutputaspect = b})
glslmultiTOPvalue19 :: Lens' TOP (Vec4)
glslmultiTOPvalue19 = lens _glslmultiTOPvalue19 (\a b -> a {_glslmultiTOPvalue19 = b})
glslmultiTOPchopunitype2 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchopunitype2 = lens _glslmultiTOPchopunitype2 (\a b -> a {_glslmultiTOPchopunitype2 = b})
glslmultiTOPuniname5 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname5 = lens _glslmultiTOPuniname5 (\a b -> a {_glslmultiTOPuniname5 = b})
glslmultiTOPuniname4 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname4 = lens _glslmultiTOPuniname4 (\a b -> a {_glslmultiTOPuniname4 = b})
glslmultiTOPuniname23 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname23 = lens _glslmultiTOPuniname23 (\a b -> a {_glslmultiTOPuniname23 = b})
glslmultiTOPvalue2 :: Lens' TOP (Vec4)
glslmultiTOPvalue2 = lens _glslmultiTOPvalue2 (\a b -> a {_glslmultiTOPvalue2 = b})
glslmultiTOPresmult :: Lens' TOP (Maybe (Tree Bool))
glslmultiTOPresmult = lens _glslmultiTOPresmult (\a b -> a {_glslmultiTOPresmult = b})
glslmultiTOPchopuniname9 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPchopuniname9 = lens _glslmultiTOPchopuniname9 (\a b -> a {_glslmultiTOPchopuniname9 = b})
glslmultiTOPacsize1 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacsize1 = lens _glslmultiTOPacsize1 (\a b -> a {_glslmultiTOPacsize1 = b})
glslmultiTOPvalue13 :: Lens' TOP (Vec4)
glslmultiTOPvalue13 = lens _glslmultiTOPvalue13 (\a b -> a {_glslmultiTOPvalue13 = b})
glslmultiTOPacsingleval1 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacsingleval1 = lens _glslmultiTOPacsingleval1 (\a b -> a {_glslmultiTOPacsingleval1 = b})
glslmultiTOPacinitval1 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacinitval1 = lens _glslmultiTOPacinitval1 (\a b -> a {_glslmultiTOPacinitval1 = b})
glslmultiTOPchopuniname4 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPchopuniname4 = lens _glslmultiTOPchopuniname4 (\a b -> a {_glslmultiTOPchopuniname4 = b})
glslmultiTOPchop6 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPchop6 = lens _glslmultiTOPchop6 (\a b -> a {_glslmultiTOPchop6 = b})
glslmultiTOPuniname14 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname14 = lens _glslmultiTOPuniname14 (\a b -> a {_glslmultiTOPuniname14 = b})
glslmultiTOPchoparraytype8 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchoparraytype8 = lens _glslmultiTOPchoparraytype8 (\a b -> a {_glslmultiTOPchoparraytype8 = b})
glslmultiTOPvalue17 :: Lens' TOP (Vec4)
glslmultiTOPvalue17 = lens _glslmultiTOPvalue17 (\a b -> a {_glslmultiTOPvalue17 = b})
glslmultiTOPchopunitype4 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchopunitype4 = lens _glslmultiTOPchopunitype4 (\a b -> a {_glslmultiTOPchopunitype4 = b})
glslmultiTOPchopuniname8 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPchopuniname8 = lens _glslmultiTOPchopuniname8 (\a b -> a {_glslmultiTOPchopuniname8 = b})
glslmultiTOPchanmask :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchanmask = lens _glslmultiTOPchanmask (\a b -> a {_glslmultiTOPchanmask = b})
glslmultiTOPchopuniname1 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPchopuniname1 = lens _glslmultiTOPchopuniname1 (\a b -> a {_glslmultiTOPchopuniname1 = b})
glslmultiTOPoutputaccess :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPoutputaccess = lens _glslmultiTOPoutputaccess (\a b -> a {_glslmultiTOPoutputaccess = b})
glslmultiTOPuniname2 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname2 = lens _glslmultiTOPuniname2 (\a b -> a {_glslmultiTOPuniname2 = b})
glslmultiTOPvalue6 :: Lens' TOP (Vec4)
glslmultiTOPvalue6 = lens _glslmultiTOPvalue6 (\a b -> a {_glslmultiTOPvalue6 = b})
glslmultiTOParmenu :: Lens' TOP (Maybe (Tree Int))
glslmultiTOParmenu = lens _glslmultiTOParmenu (\a b -> a {_glslmultiTOParmenu = b})
glslmultiTOPuniname3 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname3 = lens _glslmultiTOPuniname3 (\a b -> a {_glslmultiTOPuniname3 = b})
glslmultiTOPvalue21 :: Lens' TOP (Vec4)
glslmultiTOPvalue21 = lens _glslmultiTOPvalue21 (\a b -> a {_glslmultiTOPvalue21 = b})
glslmultiTOPchopunitype3 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchopunitype3 = lens _glslmultiTOPchopunitype3 (\a b -> a {_glslmultiTOPchopunitype3 = b})
glslmultiTOPchopunitype6 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchopunitype6 = lens _glslmultiTOPchopunitype6 (\a b -> a {_glslmultiTOPchopunitype6 = b})
glslmultiTOPvalue4 :: Lens' TOP (Vec4)
glslmultiTOPvalue4 = lens _glslmultiTOPvalue4 (\a b -> a {_glslmultiTOPvalue4 = b})
glslmultiTOPvalue15 :: Lens' TOP (Vec4)
glslmultiTOPvalue15 = lens _glslmultiTOPvalue15 (\a b -> a {_glslmultiTOPvalue15 = b})
glslmultiTOPchop3 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPchop3 = lens _glslmultiTOPchop3 (\a b -> a {_glslmultiTOPchop3 = b})
glslmultiTOPclearoutputs :: Lens' TOP (Maybe (Tree Bool))
glslmultiTOPclearoutputs = lens _glslmultiTOPclearoutputs (\a b -> a {_glslmultiTOPclearoutputs = b})
glslmultiTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPfiltertype = lens _glslmultiTOPfiltertype (\a b -> a {_glslmultiTOPfiltertype = b})
glslmultiTOPuniname20 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname20 = lens _glslmultiTOPuniname20 (\a b -> a {_glslmultiTOPuniname20 = b})
glslmultiTOPmatuniname1 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPmatuniname1 = lens _glslmultiTOPmatuniname1 (\a b -> a {_glslmultiTOPmatuniname1 = b})
glslmultiTOPchopuniname2 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPchopuniname2 = lens _glslmultiTOPchopuniname2 (\a b -> a {_glslmultiTOPchopuniname2 = b})
glslmultiTOPuniname9 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname9 = lens _glslmultiTOPuniname9 (\a b -> a {_glslmultiTOPuniname9 = b})
glslmultiTOPchoparraytype1 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchoparraytype1 = lens _glslmultiTOPchoparraytype1 (\a b -> a {_glslmultiTOPchoparraytype1 = b})
glslmultiTOPchopuniname0 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPchopuniname0 = lens _glslmultiTOPchopuniname0 (\a b -> a {_glslmultiTOPchopuniname0 = b})
glslmultiTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPresolutionh = lens _glslmultiTOPresolutionh (\a b -> a {_glslmultiTOPresolutionh = b})
glslmultiTOPuniname27 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname27 = lens _glslmultiTOPuniname27 (\a b -> a {_glslmultiTOPuniname27 = b})
glslmultiTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
glslmultiTOPaspect1 = lens _glslmultiTOPaspect1 (\a b -> a {_glslmultiTOPaspect1 = b})
glslmultiTOPnumcolorbufs :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPnumcolorbufs = lens _glslmultiTOPnumcolorbufs (\a b -> a {_glslmultiTOPnumcolorbufs = b})
glslmultiTOPinputmapping :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPinputmapping = lens _glslmultiTOPinputmapping (\a b -> a {_glslmultiTOPinputmapping = b})
glslmultiTOPvalue27 :: Lens' TOP (Vec4)
glslmultiTOPvalue27 = lens _glslmultiTOPvalue27 (\a b -> a {_glslmultiTOPvalue27 = b})
glslmultiTOPchop2 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPchop2 = lens _glslmultiTOPchop2 (\a b -> a {_glslmultiTOPchop2 = b})
glslmultiTOPvalue8 :: Lens' TOP (Vec4)
glslmultiTOPvalue8 = lens _glslmultiTOPvalue8 (\a b -> a {_glslmultiTOPvalue8 = b})
glslmultiTOPchop5 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPchop5 = lens _glslmultiTOPchop5 (\a b -> a {_glslmultiTOPchop5 = b})
glslmultiTOPuniname13 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname13 = lens _glslmultiTOPuniname13 (\a b -> a {_glslmultiTOPuniname13 = b})
glslmultiTOPchopunitype0 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchopunitype0 = lens _glslmultiTOPchopunitype0 (\a b -> a {_glslmultiTOPchopunitype0 = b})
glslmultiTOPacinitval2 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacinitval2 = lens _glslmultiTOPacinitval2 (\a b -> a {_glslmultiTOPacinitval2 = b})
glslmultiTOPacbinding3 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacbinding3 = lens _glslmultiTOPacbinding3 (\a b -> a {_glslmultiTOPacbinding3 = b})
glslmultiTOPuniname28 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname28 = lens _glslmultiTOPuniname28 (\a b -> a {_glslmultiTOPuniname28 = b})
glslmultiTOPvalue0 :: Lens' TOP (Vec4)
glslmultiTOPvalue0 = lens _glslmultiTOPvalue0 (\a b -> a {_glslmultiTOPvalue0 = b})
glslmultiTOPacchopval2 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPacchopval2 = lens _glslmultiTOPacchopval2 (\a b -> a {_glslmultiTOPacchopval2 = b})
glslmultiTOPchoparraytype4 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchoparraytype4 = lens _glslmultiTOPchoparraytype4 (\a b -> a {_glslmultiTOPchoparraytype4 = b})
glslmultiTOPchopunitype8 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchopunitype8 = lens _glslmultiTOPchopunitype8 (\a b -> a {_glslmultiTOPchopunitype8 = b})
glslmultiTOPinputextendw :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPinputextendw = lens _glslmultiTOPinputextendw (\a b -> a {_glslmultiTOPinputextendw = b})
glslmultiTOPuniname0 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname0 = lens _glslmultiTOPuniname0 (\a b -> a {_glslmultiTOPuniname0 = b})
glslmultiTOPuniname26 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname26 = lens _glslmultiTOPuniname26 (\a b -> a {_glslmultiTOPuniname26 = b})
glslmultiTOPacsize3 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacsize3 = lens _glslmultiTOPacsize3 (\a b -> a {_glslmultiTOPacsize3 = b})
glslmultiTOPcustomdepth :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPcustomdepth = lens _glslmultiTOPcustomdepth (\a b -> a {_glslmultiTOPcustomdepth = b})
glslmultiTOPmatuniname3 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPmatuniname3 = lens _glslmultiTOPmatuniname3 (\a b -> a {_glslmultiTOPmatuniname3 = b})
glslmultiTOPacbinding2 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacbinding2 = lens _glslmultiTOPacbinding2 (\a b -> a {_glslmultiTOPacbinding2 = b})
glslmultiTOPchoparraytype5 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchoparraytype5 = lens _glslmultiTOPchoparraytype5 (\a b -> a {_glslmultiTOPchoparraytype5 = b})
glslmultiTOPnval :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPnval = lens _glslmultiTOPnval (\a b -> a {_glslmultiTOPnval = b})
glslmultiTOPmode :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPmode = lens _glslmultiTOPmode (\a b -> a {_glslmultiTOPmode = b})
glslmultiTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
glslmultiTOPaspect2 = lens _glslmultiTOPaspect2 (\a b -> a {_glslmultiTOPaspect2 = b})
glslmultiTOPformat :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPformat = lens _glslmultiTOPformat (\a b -> a {_glslmultiTOPformat = b})
glslmultiTOPvalue29 :: Lens' TOP (Vec4)
glslmultiTOPvalue29 = lens _glslmultiTOPvalue29 (\a b -> a {_glslmultiTOPvalue29 = b})
glslmultiTOPacinitval3 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacinitval3 = lens _glslmultiTOPacinitval3 (\a b -> a {_glslmultiTOPacinitval3 = b})
glslmultiTOPchopuniname3 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPchopuniname3 = lens _glslmultiTOPchopuniname3 (\a b -> a {_glslmultiTOPchopuniname3 = b})
glslmultiTOPcomputedat :: Lens' TOP (Maybe (Tree DAT))
glslmultiTOPcomputedat = lens _glslmultiTOPcomputedat (\a b -> a {_glslmultiTOPcomputedat = b})
glslmultiTOPacchopval0 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPacchopval0 = lens _glslmultiTOPacchopval0 (\a b -> a {_glslmultiTOPacchopval0 = b})
glslmultiTOPpixeldat :: Lens' TOP (Maybe (Tree DAT))
glslmultiTOPpixeldat = lens _glslmultiTOPpixeldat (\a b -> a {_glslmultiTOPpixeldat = b})
glslmultiTOPvalue20 :: Lens' TOP (Vec4)
glslmultiTOPvalue20 = lens _glslmultiTOPvalue20 (\a b -> a {_glslmultiTOPvalue20 = b})
glslmultiTOPvalue25 :: Lens' TOP (Vec4)
glslmultiTOPvalue25 = lens _glslmultiTOPvalue25 (\a b -> a {_glslmultiTOPvalue25 = b})
glslmultiTOPchoparraytype6 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchoparraytype6 = lens _glslmultiTOPchoparraytype6 (\a b -> a {_glslmultiTOPchoparraytype6 = b})
glslmultiTOPchoparraytype9 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchoparraytype9 = lens _glslmultiTOPchoparraytype9 (\a b -> a {_glslmultiTOPchoparraytype9 = b})
glslmultiTOPtype :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPtype = lens _glslmultiTOPtype (\a b -> a {_glslmultiTOPtype = b})
glslmultiTOPacsingleval0 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacsingleval0 = lens _glslmultiTOPacsingleval0 (\a b -> a {_glslmultiTOPacsingleval0 = b})
glslmultiTOPchopuniname6 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPchopuniname6 = lens _glslmultiTOPchopuniname6 (\a b -> a {_glslmultiTOPchopuniname6 = b})
glslmultiTOPuniname17 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname17 = lens _glslmultiTOPuniname17 (\a b -> a {_glslmultiTOPuniname17 = b})
glslmultiTOPuniname8 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname8 = lens _glslmultiTOPuniname8 (\a b -> a {_glslmultiTOPuniname8 = b})
glslmultiTOPchopuniname5 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPchopuniname5 = lens _glslmultiTOPchopuniname5 (\a b -> a {_glslmultiTOPchopuniname5 = b})
glslmultiTOPmatuniname7 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPmatuniname7 = lens _glslmultiTOPmatuniname7 (\a b -> a {_glslmultiTOPmatuniname7 = b})
glslmultiTOPchop7 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPchop7 = lens _glslmultiTOPchop7 (\a b -> a {_glslmultiTOPchop7 = b})
glslmultiTOPchop9 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPchop9 = lens _glslmultiTOPchop9 (\a b -> a {_glslmultiTOPchop9 = b})
glslmultiTOPenablevectorpage3 :: Lens' TOP (Maybe (Tree Bool))
glslmultiTOPenablevectorpage3 = lens _glslmultiTOPenablevectorpage3 (\a b -> a {_glslmultiTOPenablevectorpage3 = b})
glslmultiTOPchop0 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPchop0 = lens _glslmultiTOPchop0 (\a b -> a {_glslmultiTOPchop0 = b})
glslmultiTOPuniname19 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname19 = lens _glslmultiTOPuniname19 (\a b -> a {_glslmultiTOPuniname19 = b})
glslmultiTOPvalue11 :: Lens' TOP (Vec4)
glslmultiTOPvalue11 = lens _glslmultiTOPvalue11 (\a b -> a {_glslmultiTOPvalue11 = b})
glslmultiTOPuniname7 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname7 = lens _glslmultiTOPuniname7 (\a b -> a {_glslmultiTOPuniname7 = b})
glslmultiTOPloaduniformnames :: Lens' TOP (Maybe (Tree Bool))
glslmultiTOPloaduniformnames = lens _glslmultiTOPloaduniformnames (\a b -> a {_glslmultiTOPloaduniformnames = b})
glslmultiTOPuniname29 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname29 = lens _glslmultiTOPuniname29 (\a b -> a {_glslmultiTOPuniname29 = b})
glslmultiTOPvalue5 :: Lens' TOP (Vec4)
glslmultiTOPvalue5 = lens _glslmultiTOPvalue5 (\a b -> a {_glslmultiTOPvalue5 = b})
glslmultiTOPchop1 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPchop1 = lens _glslmultiTOPchop1 (\a b -> a {_glslmultiTOPchop1 = b})
glslmultiTOPvalue9 :: Lens' TOP (Vec4)
glslmultiTOPvalue9 = lens _glslmultiTOPvalue9 (\a b -> a {_glslmultiTOPvalue9 = b})
glslmultiTOPchop4 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPchop4 = lens _glslmultiTOPchop4 (\a b -> a {_glslmultiTOPchop4 = b})
glslmultiTOPmatuniname9 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPmatuniname9 = lens _glslmultiTOPmatuniname9 (\a b -> a {_glslmultiTOPmatuniname9 = b})
glslmultiTOPdispatchsizez :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPdispatchsizez = lens _glslmultiTOPdispatchsizez (\a b -> a {_glslmultiTOPdispatchsizez = b})
glslmultiTOPchopunitype5 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchopunitype5 = lens _glslmultiTOPchopunitype5 (\a b -> a {_glslmultiTOPchopunitype5 = b})
glslmultiTOPchoparraytype7 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchoparraytype7 = lens _glslmultiTOPchoparraytype7 (\a b -> a {_glslmultiTOPchoparraytype7 = b})
glslmultiTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPinputfiltertype = lens _glslmultiTOPinputfiltertype (\a b -> a {_glslmultiTOPinputfiltertype = b})
glslmultiTOPmatuniname4 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPmatuniname4 = lens _glslmultiTOPmatuniname4 (\a b -> a {_glslmultiTOPmatuniname4 = b})
glslmultiTOPchopunitype1 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchopunitype1 = lens _glslmultiTOPchopunitype1 (\a b -> a {_glslmultiTOPchopunitype1 = b})
glslmultiTOPmatuniname8 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPmatuniname8 = lens _glslmultiTOPmatuniname8 (\a b -> a {_glslmultiTOPmatuniname8 = b})
glslmultiTOPvalue26 :: Lens' TOP (Vec4)
glslmultiTOPvalue26 = lens _glslmultiTOPvalue26 (\a b -> a {_glslmultiTOPvalue26 = b})
glslmultiTOPuniname21 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname21 = lens _glslmultiTOPuniname21 (\a b -> a {_glslmultiTOPuniname21 = b})
glslmultiTOPvalue28 :: Lens' TOP (Vec4)
glslmultiTOPvalue28 = lens _glslmultiTOPvalue28 (\a b -> a {_glslmultiTOPvalue28 = b})
glslmultiTOPacsingleval2 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacsingleval2 = lens _glslmultiTOPacsingleval2 (\a b -> a {_glslmultiTOPacsingleval2 = b})
glslmultiTOPvalue14 :: Lens' TOP (Vec4)
glslmultiTOPvalue14 = lens _glslmultiTOPvalue14 (\a b -> a {_glslmultiTOPvalue14 = b})
glslmultiTOPuniname24 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname24 = lens _glslmultiTOPuniname24 (\a b -> a {_glslmultiTOPuniname24 = b})
glslmultiTOPacbinding0 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacbinding0 = lens _glslmultiTOPacbinding0 (\a b -> a {_glslmultiTOPacbinding0 = b})
glslmultiTOPuniname16 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname16 = lens _glslmultiTOPuniname16 (\a b -> a {_glslmultiTOPuniname16 = b})
glslmultiTOPchoparraytype3 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchoparraytype3 = lens _glslmultiTOPchoparraytype3 (\a b -> a {_glslmultiTOPchoparraytype3 = b})
glslmultiTOPnpasses :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPnpasses = lens _glslmultiTOPnpasses (\a b -> a {_glslmultiTOPnpasses = b})
glslmultiTOPchop8 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPchop8 = lens _glslmultiTOPchop8 (\a b -> a {_glslmultiTOPchop8 = b})
glslmultiTOPacchopval1 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPacchopval1 = lens _glslmultiTOPacchopval1 (\a b -> a {_glslmultiTOPacchopval1 = b})
glslmultiTOPacchopval3 :: Lens' TOP (Maybe (Tree CHOP))
glslmultiTOPacchopval3 = lens _glslmultiTOPacchopval3 (\a b -> a {_glslmultiTOPacchopval3 = b})
glslmultiTOPinputextenduv :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPinputextenduv = lens _glslmultiTOPinputextenduv (\a b -> a {_glslmultiTOPinputextenduv = b})
glslmultiTOPvalue22 :: Lens' TOP (Vec4)
glslmultiTOPvalue22 = lens _glslmultiTOPvalue22 (\a b -> a {_glslmultiTOPvalue22 = b})
glslmultiTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPoutputresolution = lens _glslmultiTOPoutputresolution (\a b -> a {_glslmultiTOPoutputresolution = b})
glslmultiTOPacsize2 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacsize2 = lens _glslmultiTOPacsize2 (\a b -> a {_glslmultiTOPacsize2 = b})
glslmultiTOPmatuniname0 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPmatuniname0 = lens _glslmultiTOPmatuniname0 (\a b -> a {_glslmultiTOPmatuniname0 = b})
glslmultiTOPmatuniname6 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPmatuniname6 = lens _glslmultiTOPmatuniname6 (\a b -> a {_glslmultiTOPmatuniname6 = b})
glslmultiTOPacbinding1 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacbinding1 = lens _glslmultiTOPacbinding1 (\a b -> a {_glslmultiTOPacbinding1 = b})
glslmultiTOPuniname15 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname15 = lens _glslmultiTOPuniname15 (\a b -> a {_glslmultiTOPuniname15 = b})
glslmultiTOPvalue1 :: Lens' TOP (Vec4)
glslmultiTOPvalue1 = lens _glslmultiTOPvalue1 (\a b -> a {_glslmultiTOPvalue1 = b})
glslmultiTOPvalue16 :: Lens' TOP (Vec4)
glslmultiTOPvalue16 = lens _glslmultiTOPvalue16 (\a b -> a {_glslmultiTOPvalue16 = b})
glslmultiTOPmatuniname5 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPmatuniname5 = lens _glslmultiTOPmatuniname5 (\a b -> a {_glslmultiTOPmatuniname5 = b})
glslmultiTOPdispatchsizex :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPdispatchsizex = lens _glslmultiTOPdispatchsizex (\a b -> a {_glslmultiTOPdispatchsizex = b})
glslmultiTOPvertexdat :: Lens' TOP (Maybe (Tree DAT))
glslmultiTOPvertexdat = lens _glslmultiTOPvertexdat (\a b -> a {_glslmultiTOPvertexdat = b})
glslmultiTOPchoparraytype2 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchoparraytype2 = lens _glslmultiTOPchoparraytype2 (\a b -> a {_glslmultiTOPchoparraytype2 = b})
glslmultiTOPuniname18 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname18 = lens _glslmultiTOPuniname18 (\a b -> a {_glslmultiTOPuniname18 = b})
glslmultiTOPchopunitype7 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchopunitype7 = lens _glslmultiTOPchopunitype7 (\a b -> a {_glslmultiTOPchopunitype7 = b})
glslmultiTOPuniname6 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname6 = lens _glslmultiTOPuniname6 (\a b -> a {_glslmultiTOPuniname6 = b})
glslmultiTOPvalue7 :: Lens' TOP (Vec4)
glslmultiTOPvalue7 = lens _glslmultiTOPvalue7 (\a b -> a {_glslmultiTOPvalue7 = b})
glslmultiTOPuniname22 :: Lens' TOP (Maybe (Tree ByteString))
glslmultiTOPuniname22 = lens _glslmultiTOPuniname22 (\a b -> a {_glslmultiTOPuniname22 = b})
glslmultiTOPvalue18 :: Lens' TOP (Vec4)
glslmultiTOPvalue18 = lens _glslmultiTOPvalue18 (\a b -> a {_glslmultiTOPvalue18 = b})
glslmultiTOPacsingleval3 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPacsingleval3 = lens _glslmultiTOPacsingleval3 (\a b -> a {_glslmultiTOPacsingleval3 = b})
glslmultiTOPvalue12 :: Lens' TOP (Vec4)
glslmultiTOPvalue12 = lens _glslmultiTOPvalue12 (\a b -> a {_glslmultiTOPvalue12 = b})
glslmultiTOPchoparraytype0 :: Lens' TOP (Maybe (Tree Int))
glslmultiTOPchoparraytype0 = lens _glslmultiTOPchoparraytype0 (\a b -> a {_glslmultiTOPchoparraytype0 = b})

substanceselectTOPsubstance :: Lens' TOP (Maybe (Tree TOP))
substanceselectTOPsubstance = lens _substanceselectTOPsubstance (\a b -> a {_substanceselectTOPsubstance = b})
substanceselectTOPresmult :: Lens' TOP (Maybe (Tree Bool))
substanceselectTOPresmult = lens _substanceselectTOPresmult (\a b -> a {_substanceselectTOPresmult = b})
substanceselectTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
substanceselectTOPaspect2 = lens _substanceselectTOPaspect2 (\a b -> a {_substanceselectTOPaspect2 = b})
substanceselectTOPformat :: Lens' TOP (Maybe (Tree Int))
substanceselectTOPformat = lens _substanceselectTOPformat (\a b -> a {_substanceselectTOPformat = b})
substanceselectTOPoutput :: Lens' TOP (Maybe (Tree ByteString))
substanceselectTOPoutput = lens _substanceselectTOPoutput (\a b -> a {_substanceselectTOPoutput = b})
substanceselectTOPresmenu :: Lens' TOP (Maybe (Tree Int))
substanceselectTOPresmenu = lens _substanceselectTOPresmenu (\a b -> a {_substanceselectTOPresmenu = b})
substanceselectTOPnpasses :: Lens' TOP (Maybe (Tree Int))
substanceselectTOPnpasses = lens _substanceselectTOPnpasses (\a b -> a {_substanceselectTOPnpasses = b})
substanceselectTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
substanceselectTOPinputfiltertype = lens _substanceselectTOPinputfiltertype (\a b -> a {_substanceselectTOPinputfiltertype = b})
substanceselectTOPchanmask :: Lens' TOP (Maybe (Tree Int))
substanceselectTOPchanmask = lens _substanceselectTOPchanmask (\a b -> a {_substanceselectTOPchanmask = b})
substanceselectTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
substanceselectTOPoutputresolution = lens _substanceselectTOPoutputresolution (\a b -> a {_substanceselectTOPoutputresolution = b})
substanceselectTOPfillmode :: Lens' TOP (Maybe (Tree Int))
substanceselectTOPfillmode = lens _substanceselectTOPfillmode (\a b -> a {_substanceselectTOPfillmode = b})
substanceselectTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
substanceselectTOPresolutionw = lens _substanceselectTOPresolutionw (\a b -> a {_substanceselectTOPresolutionw = b})
substanceselectTOParmenu :: Lens' TOP (Maybe (Tree Int))
substanceselectTOParmenu = lens _substanceselectTOParmenu (\a b -> a {_substanceselectTOParmenu = b})
substanceselectTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
substanceselectTOPfiltertype = lens _substanceselectTOPfiltertype (\a b -> a {_substanceselectTOPfiltertype = b})
substanceselectTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
substanceselectTOPaspect1 = lens _substanceselectTOPaspect1 (\a b -> a {_substanceselectTOPaspect1 = b})
substanceselectTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
substanceselectTOPresolutionh = lens _substanceselectTOPresolutionh (\a b -> a {_substanceselectTOPresolutionh = b})
substanceselectTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
substanceselectTOPoutputaspect = lens _substanceselectTOPoutputaspect (\a b -> a {_substanceselectTOPoutputaspect = b})

photoshopinTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
photoshopinTOPaspect2 = lens _photoshopinTOPaspect2 (\a b -> a {_photoshopinTOPaspect2 = b})
photoshopinTOPformat :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPformat = lens _photoshopinTOPformat (\a b -> a {_photoshopinTOPformat = b})
photoshopinTOPactive :: Lens' TOP (Maybe (Tree Bool))
photoshopinTOPactive = lens _photoshopinTOPactive (\a b -> a {_photoshopinTOPactive = b})
photoshopinTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPoutputresolution = lens _photoshopinTOPoutputresolution (\a b -> a {_photoshopinTOPoutputresolution = b})
photoshopinTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPinputfiltertype = lens _photoshopinTOPinputfiltertype (\a b -> a {_photoshopinTOPinputfiltertype = b})
photoshopinTOPchanmask :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPchanmask = lens _photoshopinTOPchanmask (\a b -> a {_photoshopinTOPchanmask = b})
photoshopinTOPaddress :: Lens' TOP (Maybe (Tree ByteString))
photoshopinTOPaddress = lens _photoshopinTOPaddress (\a b -> a {_photoshopinTOPaddress = b})
photoshopinTOPfillmode :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPfillmode = lens _photoshopinTOPfillmode (\a b -> a {_photoshopinTOPfillmode = b})
photoshopinTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPresolutionw = lens _photoshopinTOPresolutionw (\a b -> a {_photoshopinTOPresolutionw = b})
photoshopinTOParmenu :: Lens' TOP (Maybe (Tree Int))
photoshopinTOParmenu = lens _photoshopinTOParmenu (\a b -> a {_photoshopinTOParmenu = b})
photoshopinTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPfiltertype = lens _photoshopinTOPfiltertype (\a b -> a {_photoshopinTOPfiltertype = b})
photoshopinTOPimageformat :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPimageformat = lens _photoshopinTOPimageformat (\a b -> a {_photoshopinTOPimageformat = b})
photoshopinTOPlockeddocument :: Lens' TOP (Maybe (Tree ByteString))
photoshopinTOPlockeddocument = lens _photoshopinTOPlockeddocument (\a b -> a {_photoshopinTOPlockeddocument = b})
photoshopinTOPresmult :: Lens' TOP (Maybe (Tree Bool))
photoshopinTOPresmult = lens _photoshopinTOPresmult (\a b -> a {_photoshopinTOPresmult = b})
photoshopinTOPresmenu :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPresmenu = lens _photoshopinTOPresmenu (\a b -> a {_photoshopinTOPresmenu = b})
photoshopinTOPunlock :: Lens' TOP (Maybe (Tree Bool))
photoshopinTOPunlock = lens _photoshopinTOPunlock (\a b -> a {_photoshopinTOPunlock = b})
photoshopinTOPpassword :: Lens' TOP (Maybe (Tree ByteString))
photoshopinTOPpassword = lens _photoshopinTOPpassword (\a b -> a {_photoshopinTOPpassword = b})
photoshopinTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPresolutionh = lens _photoshopinTOPresolutionh (\a b -> a {_photoshopinTOPresolutionh = b})
photoshopinTOPnpasses :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPnpasses = lens _photoshopinTOPnpasses (\a b -> a {_photoshopinTOPnpasses = b})
photoshopinTOPlocktocurrent :: Lens' TOP (Maybe (Tree Bool))
photoshopinTOPlocktocurrent = lens _photoshopinTOPlocktocurrent (\a b -> a {_photoshopinTOPlocktocurrent = b})
photoshopinTOPupdatemode :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPupdatemode = lens _photoshopinTOPupdatemode (\a b -> a {_photoshopinTOPupdatemode = b})
photoshopinTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
photoshopinTOPaspect1 = lens _photoshopinTOPaspect1 (\a b -> a {_photoshopinTOPaspect1 = b})
photoshopinTOPupdate :: Lens' TOP (Maybe (Tree Bool))
photoshopinTOPupdate = lens _photoshopinTOPupdate (\a b -> a {_photoshopinTOPupdate = b})
photoshopinTOPmaxupdaterate :: Lens' TOP (Maybe (Tree Float))
photoshopinTOPmaxupdaterate = lens _photoshopinTOPmaxupdaterate (\a b -> a {_photoshopinTOPmaxupdaterate = b})
photoshopinTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
photoshopinTOPoutputaspect = lens _photoshopinTOPoutputaspect (\a b -> a {_photoshopinTOPoutputaspect = b})

outTOPresmult :: Lens' TOP (Maybe (Tree Bool))
outTOPresmult = lens _outTOPresmult (\a b -> a {_outTOPresmult = b})
outTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
outTOPaspect2 = lens _outTOPaspect2 (\a b -> a {_outTOPaspect2 = b})
outTOPformat :: Lens' TOP (Maybe (Tree Int))
outTOPformat = lens _outTOPformat (\a b -> a {_outTOPformat = b})
outTOPresmenu :: Lens' TOP (Maybe (Tree Int))
outTOPresmenu = lens _outTOPresmenu (\a b -> a {_outTOPresmenu = b})
outTOPnpasses :: Lens' TOP (Maybe (Tree Int))
outTOPnpasses = lens _outTOPnpasses (\a b -> a {_outTOPnpasses = b})
outTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
outTOPinputfiltertype = lens _outTOPinputfiltertype (\a b -> a {_outTOPinputfiltertype = b})
outTOPchanmask :: Lens' TOP (Maybe (Tree Int))
outTOPchanmask = lens _outTOPchanmask (\a b -> a {_outTOPchanmask = b})
outTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
outTOPoutputresolution = lens _outTOPoutputresolution (\a b -> a {_outTOPoutputresolution = b})
outTOPfillmode :: Lens' TOP (Maybe (Tree Int))
outTOPfillmode = lens _outTOPfillmode (\a b -> a {_outTOPfillmode = b})
outTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
outTOPresolutionw = lens _outTOPresolutionw (\a b -> a {_outTOPresolutionw = b})
outTOParmenu :: Lens' TOP (Maybe (Tree Int))
outTOParmenu = lens _outTOParmenu (\a b -> a {_outTOParmenu = b})
outTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
outTOPfiltertype = lens _outTOPfiltertype (\a b -> a {_outTOPfiltertype = b})
outTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
outTOPaspect1 = lens _outTOPaspect1 (\a b -> a {_outTOPaspect1 = b})
outTOPlabel :: Lens' TOP (Maybe (Tree ByteString))
outTOPlabel = lens _outTOPlabel (\a b -> a {_outTOPlabel = b})
outTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
outTOPresolutionh = lens _outTOPresolutionh (\a b -> a {_outTOPresolutionh = b})
outTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
outTOPoutputaspect = lens _outTOPoutputaspect (\a b -> a {_outTOPoutputaspect = b})

syphonspoutoutTOPresmult :: Lens' TOP (Maybe (Tree Bool))
syphonspoutoutTOPresmult = lens _syphonspoutoutTOPresmult (\a b -> a {_syphonspoutoutTOPresmult = b})
syphonspoutoutTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
syphonspoutoutTOPaspect2 = lens _syphonspoutoutTOPaspect2 (\a b -> a {_syphonspoutoutTOPaspect2 = b})
syphonspoutoutTOPformat :: Lens' TOP (Maybe (Tree Int))
syphonspoutoutTOPformat = lens _syphonspoutoutTOPformat (\a b -> a {_syphonspoutoutTOPformat = b})
syphonspoutoutTOPactive :: Lens' TOP (Maybe (Tree Bool))
syphonspoutoutTOPactive = lens _syphonspoutoutTOPactive (\a b -> a {_syphonspoutoutTOPactive = b})
syphonspoutoutTOPresmenu :: Lens' TOP (Maybe (Tree Int))
syphonspoutoutTOPresmenu = lens _syphonspoutoutTOPresmenu (\a b -> a {_syphonspoutoutTOPresmenu = b})
syphonspoutoutTOPnpasses :: Lens' TOP (Maybe (Tree Int))
syphonspoutoutTOPnpasses = lens _syphonspoutoutTOPnpasses (\a b -> a {_syphonspoutoutTOPnpasses = b})
syphonspoutoutTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
syphonspoutoutTOPinputfiltertype = lens _syphonspoutoutTOPinputfiltertype (\a b -> a {_syphonspoutoutTOPinputfiltertype = b})
syphonspoutoutTOPchanmask :: Lens' TOP (Maybe (Tree Int))
syphonspoutoutTOPchanmask = lens _syphonspoutoutTOPchanmask (\a b -> a {_syphonspoutoutTOPchanmask = b})
syphonspoutoutTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
syphonspoutoutTOPoutputresolution = lens _syphonspoutoutTOPoutputresolution (\a b -> a {_syphonspoutoutTOPoutputresolution = b})
syphonspoutoutTOPfillmode :: Lens' TOP (Maybe (Tree Int))
syphonspoutoutTOPfillmode = lens _syphonspoutoutTOPfillmode (\a b -> a {_syphonspoutoutTOPfillmode = b})
syphonspoutoutTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
syphonspoutoutTOPresolutionh = lens _syphonspoutoutTOPresolutionh (\a b -> a {_syphonspoutoutTOPresolutionh = b})
syphonspoutoutTOParmenu :: Lens' TOP (Maybe (Tree Int))
syphonspoutoutTOParmenu = lens _syphonspoutoutTOParmenu (\a b -> a {_syphonspoutoutTOParmenu = b})
syphonspoutoutTOPsendername :: Lens' TOP (Maybe (Tree ByteString))
syphonspoutoutTOPsendername = lens _syphonspoutoutTOPsendername (\a b -> a {_syphonspoutoutTOPsendername = b})
syphonspoutoutTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
syphonspoutoutTOPaspect1 = lens _syphonspoutoutTOPaspect1 (\a b -> a {_syphonspoutoutTOPaspect1 = b})
syphonspoutoutTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
syphonspoutoutTOPresolutionw = lens _syphonspoutoutTOPresolutionw (\a b -> a {_syphonspoutoutTOPresolutionw = b})
syphonspoutoutTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
syphonspoutoutTOPoutputaspect = lens _syphonspoutoutTOPoutputaspect (\a b -> a {_syphonspoutoutTOPoutputaspect = b})
syphonspoutoutTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
syphonspoutoutTOPfiltertype = lens _syphonspoutoutTOPfiltertype (\a b -> a {_syphonspoutoutTOPfiltertype = b})

lumablurTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
lumablurTOPaspect2 = lens _lumablurTOPaspect2 (\a b -> a {_lumablurTOPaspect2 = b})
lumablurTOPformat :: Lens' TOP (Maybe (Tree Int))
lumablurTOPformat = lens _lumablurTOPformat (\a b -> a {_lumablurTOPformat = b})
lumablurTOPextend :: Lens' TOP (Maybe (Tree Int))
lumablurTOPextend = lens _lumablurTOPextend (\a b -> a {_lumablurTOPextend = b})
lumablurTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
lumablurTOPaspect1 = lens _lumablurTOPaspect1 (\a b -> a {_lumablurTOPaspect1 = b})
lumablurTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
lumablurTOPoutputresolution = lens _lumablurTOPoutputresolution (\a b -> a {_lumablurTOPoutputresolution = b})
lumablurTOPfillmode :: Lens' TOP (Maybe (Tree Int))
lumablurTOPfillmode = lens _lumablurTOPfillmode (\a b -> a {_lumablurTOPfillmode = b})
lumablurTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
lumablurTOPresolutionw = lens _lumablurTOPresolutionw (\a b -> a {_lumablurTOPresolutionw = b})
lumablurTOParmenu :: Lens' TOP (Maybe (Tree Int))
lumablurTOParmenu = lens _lumablurTOParmenu (\a b -> a {_lumablurTOParmenu = b})
lumablurTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
lumablurTOPfiltertype = lens _lumablurTOPfiltertype (\a b -> a {_lumablurTOPfiltertype = b})
lumablurTOPtype :: Lens' TOP (Maybe (Tree Int))
lumablurTOPtype = lens _lumablurTOPtype (\a b -> a {_lumablurTOPtype = b})
lumablurTOPwidthchan :: Lens' TOP (Maybe (Tree Int))
lumablurTOPwidthchan = lens _lumablurTOPwidthchan (\a b -> a {_lumablurTOPwidthchan = b})
lumablurTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
lumablurTOPinputfiltertype = lens _lumablurTOPinputfiltertype (\a b -> a {_lumablurTOPinputfiltertype = b})
lumablurTOPresmult :: Lens' TOP (Maybe (Tree Bool))
lumablurTOPresmult = lens _lumablurTOPresmult (\a b -> a {_lumablurTOPresmult = b})
lumablurTOPblackvalue :: Lens' TOP (Maybe (Tree Float))
lumablurTOPblackvalue = lens _lumablurTOPblackvalue (\a b -> a {_lumablurTOPblackvalue = b})
lumablurTOPresmenu :: Lens' TOP (Maybe (Tree Int))
lumablurTOPresmenu = lens _lumablurTOPresmenu (\a b -> a {_lumablurTOPresmenu = b})
lumablurTOPblackwidth :: Lens' TOP (Maybe (Tree Int))
lumablurTOPblackwidth = lens _lumablurTOPblackwidth (\a b -> a {_lumablurTOPblackwidth = b})
lumablurTOPwhitewidth :: Lens' TOP (Maybe (Tree Int))
lumablurTOPwhitewidth = lens _lumablurTOPwhitewidth (\a b -> a {_lumablurTOPwhitewidth = b})
lumablurTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
lumablurTOPresolutionh = lens _lumablurTOPresolutionh (\a b -> a {_lumablurTOPresolutionh = b})
lumablurTOPnpasses :: Lens' TOP (Maybe (Tree Int))
lumablurTOPnpasses = lens _lumablurTOPnpasses (\a b -> a {_lumablurTOPnpasses = b})
lumablurTOPchanmask :: Lens' TOP (Maybe (Tree Int))
lumablurTOPchanmask = lens _lumablurTOPchanmask (\a b -> a {_lumablurTOPchanmask = b})
lumablurTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
lumablurTOPoutputaspect = lens _lumablurTOPoutputaspect (\a b -> a {_lumablurTOPoutputaspect = b})
lumablurTOPwhitevalue :: Lens' TOP (Maybe (Tree Float))
lumablurTOPwhitevalue = lens _lumablurTOPwhitevalue (\a b -> a {_lumablurTOPwhitevalue = b})

blobtrackTOPresetpulse :: Lens' TOP (Maybe (Tree Bool))
blobtrackTOPresetpulse = lens _blobtrackTOPresetpulse (\a b -> a {_blobtrackTOPresetpulse = b})
blobtrackTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
blobtrackTOPaspect2 = lens _blobtrackTOPaspect2 (\a b -> a {_blobtrackTOPaspect2 = b})
blobtrackTOPrevivetime :: Lens' TOP (Maybe (Tree Float))
blobtrackTOPrevivetime = lens _blobtrackTOPrevivetime (\a b -> a {_blobtrackTOPrevivetime = b})
blobtrackTOPmonosource :: Lens' TOP (Maybe (Tree Int))
blobtrackTOPmonosource = lens _blobtrackTOPmonosource (\a b -> a {_blobtrackTOPmonosource = b})
blobtrackTOPdeleteoverlap :: Lens' TOP (Maybe (Tree Bool))
blobtrackTOPdeleteoverlap = lens _blobtrackTOPdeleteoverlap (\a b -> a {_blobtrackTOPdeleteoverlap = b})
blobtrackTOPchanmask :: Lens' TOP (Maybe (Tree Int))
blobtrackTOPchanmask = lens _blobtrackTOPchanmask (\a b -> a {_blobtrackTOPchanmask = b})
blobtrackTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
blobtrackTOPoutputresolution = lens _blobtrackTOPoutputresolution (\a b -> a {_blobtrackTOPoutputresolution = b})
blobtrackTOPfillmode :: Lens' TOP (Maybe (Tree Int))
blobtrackTOPfillmode = lens _blobtrackTOPfillmode (\a b -> a {_blobtrackTOPfillmode = b})
blobtrackTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
blobtrackTOPresolutionw = lens _blobtrackTOPresolutionw (\a b -> a {_blobtrackTOPresolutionw = b})
blobtrackTOPdeletenearby :: Lens' TOP (Maybe (Tree Bool))
blobtrackTOPdeletenearby = lens _blobtrackTOPdeletenearby (\a b -> a {_blobtrackTOPdeletenearby = b})
blobtrackTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
blobtrackTOPfiltertype = lens _blobtrackTOPfiltertype (\a b -> a {_blobtrackTOPfiltertype = b})
blobtrackTOPdeleteoverlaptol :: Lens' TOP (Maybe (Tree Float))
blobtrackTOPdeleteoverlaptol = lens _blobtrackTOPdeleteoverlaptol (\a b -> a {_blobtrackTOPdeleteoverlaptol = b})
blobtrackTOPmaxblobsize :: Lens' TOP (Maybe (Tree Float))
blobtrackTOPmaxblobsize = lens _blobtrackTOPmaxblobsize (\a b -> a {_blobtrackTOPmaxblobsize = b})
blobtrackTOPmaxmovedistance :: Lens' TOP (Maybe (Tree Float))
blobtrackTOPmaxmovedistance = lens _blobtrackTOPmaxmovedistance (\a b -> a {_blobtrackTOPmaxmovedistance = b})
blobtrackTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
blobtrackTOPinputfiltertype = lens _blobtrackTOPinputfiltertype (\a b -> a {_blobtrackTOPinputfiltertype = b})
blobtrackTOPresmult :: Lens' TOP (Maybe (Tree Bool))
blobtrackTOPresmult = lens _blobtrackTOPresmult (\a b -> a {_blobtrackTOPresmult = b})
blobtrackTOPblobcolor :: Lens' TOP (Vec3)
blobtrackTOPblobcolor = lens _blobtrackTOPblobcolor (\a b -> a {_blobtrackTOPblobcolor = b})
blobtrackTOPresmenu :: Lens' TOP (Maybe (Tree Int))
blobtrackTOPresmenu = lens _blobtrackTOPresmenu (\a b -> a {_blobtrackTOPresmenu = b})
blobtrackTOPformat :: Lens' TOP (Maybe (Tree Int))
blobtrackTOPformat = lens _blobtrackTOPformat (\a b -> a {_blobtrackTOPformat = b})
blobtrackTOPdeletenearbytol :: Lens' TOP (Maybe (Tree Float))
blobtrackTOPdeletenearbytol = lens _blobtrackTOPdeletenearbytol (\a b -> a {_blobtrackTOPdeletenearbytol = b})
blobtrackTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
blobtrackTOPresolutionh = lens _blobtrackTOPresolutionh (\a b -> a {_blobtrackTOPresolutionh = b})
blobtrackTOPrevivearea :: Lens' TOP (Maybe (Tree Float))
blobtrackTOPrevivearea = lens _blobtrackTOPrevivearea (\a b -> a {_blobtrackTOPrevivearea = b})
blobtrackTOPminblobsize :: Lens' TOP (Maybe (Tree Float))
blobtrackTOPminblobsize = lens _blobtrackTOPminblobsize (\a b -> a {_blobtrackTOPminblobsize = b})
blobtrackTOParmenu :: Lens' TOP (Maybe (Tree Int))
blobtrackTOParmenu = lens _blobtrackTOParmenu (\a b -> a {_blobtrackTOParmenu = b})
blobtrackTOPnpasses :: Lens' TOP (Maybe (Tree Int))
blobtrackTOPnpasses = lens _blobtrackTOPnpasses (\a b -> a {_blobtrackTOPnpasses = b})
blobtrackTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
blobtrackTOPaspect1 = lens _blobtrackTOPaspect1 (\a b -> a {_blobtrackTOPaspect1 = b})
blobtrackTOPrevivedistance :: Lens' TOP (Maybe (Tree Float))
blobtrackTOPrevivedistance = lens _blobtrackTOPrevivedistance (\a b -> a {_blobtrackTOPrevivedistance = b})
blobtrackTOPdrawblobs :: Lens' TOP (Maybe (Tree Bool))
blobtrackTOPdrawblobs = lens _blobtrackTOPdrawblobs (\a b -> a {_blobtrackTOPdrawblobs = b})
blobtrackTOPreviveblobs :: Lens' TOP (Maybe (Tree Bool))
blobtrackTOPreviveblobs = lens _blobtrackTOPreviveblobs (\a b -> a {_blobtrackTOPreviveblobs = b})
blobtrackTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
blobtrackTOPoutputaspect = lens _blobtrackTOPoutputaspect (\a b -> a {_blobtrackTOPoutputaspect = b})
blobtrackTOPreset :: Lens' TOP (Maybe (Tree Bool))
blobtrackTOPreset = lens _blobtrackTOPreset (\a b -> a {_blobtrackTOPreset = b})
blobtrackTOPdeletedist :: Lens' TOP (Maybe (Tree Float))
blobtrackTOPdeletedist = lens _blobtrackTOPdeletedist (\a b -> a {_blobtrackTOPdeletedist = b})

tileTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
tileTOPaspect2 = lens _tileTOPaspect2 (\a b -> a {_tileTOPaspect2 = b})
tileTOPformat :: Lens' TOP (Maybe (Tree Int))
tileTOPformat = lens _tileTOPformat (\a b -> a {_tileTOPformat = b})
tileTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
tileTOPoutputresolution = lens _tileTOPoutputresolution (\a b -> a {_tileTOPoutputresolution = b})
tileTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
tileTOPinputfiltertype = lens _tileTOPinputfiltertype (\a b -> a {_tileTOPinputfiltertype = b})
tileTOPoverlapuunit :: Lens' TOP (Maybe (Tree Int))
tileTOPoverlapuunit = lens _tileTOPoverlapuunit (\a b -> a {_tileTOPoverlapuunit = b})
tileTOPcropleftunit :: Lens' TOP (Maybe (Tree Int))
tileTOPcropleftunit = lens _tileTOPcropleftunit (\a b -> a {_tileTOPcropleftunit = b})
tileTOPfillmode :: Lens' TOP (Maybe (Tree Int))
tileTOPfillmode = lens _tileTOPfillmode (\a b -> a {_tileTOPfillmode = b})
tileTOPoverlapvunit :: Lens' TOP (Maybe (Tree Int))
tileTOPoverlapvunit = lens _tileTOPoverlapvunit (\a b -> a {_tileTOPoverlapvunit = b})
tileTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
tileTOPresolutionw = lens _tileTOPresolutionw (\a b -> a {_tileTOPresolutionw = b})
tileTOPcropbottomunit :: Lens' TOP (Maybe (Tree Int))
tileTOPcropbottomunit = lens _tileTOPcropbottomunit (\a b -> a {_tileTOPcropbottomunit = b})
tileTOPcropbottom :: Lens' TOP (Maybe (Tree Float))
tileTOPcropbottom = lens _tileTOPcropbottom (\a b -> a {_tileTOPcropbottom = b})
tileTOPrepeatx :: Lens' TOP (Maybe (Tree Int))
tileTOPrepeatx = lens _tileTOPrepeatx (\a b -> a {_tileTOPrepeatx = b})
tileTOPcroprightunit :: Lens' TOP (Maybe (Tree Int))
tileTOPcroprightunit = lens _tileTOPcroprightunit (\a b -> a {_tileTOPcroprightunit = b})
tileTOPflipx :: Lens' TOP (Maybe (Tree Bool))
tileTOPflipx = lens _tileTOPflipx (\a b -> a {_tileTOPflipx = b})
tileTOPrepeaty :: Lens' TOP (Maybe (Tree Int))
tileTOPrepeaty = lens _tileTOPrepeaty (\a b -> a {_tileTOPrepeaty = b})
tileTOParmenu :: Lens' TOP (Maybe (Tree Int))
tileTOParmenu = lens _tileTOParmenu (\a b -> a {_tileTOParmenu = b})
tileTOPresmult :: Lens' TOP (Maybe (Tree Bool))
tileTOPresmult = lens _tileTOPresmult (\a b -> a {_tileTOPresmult = b})
tileTOPresmenu :: Lens' TOP (Maybe (Tree Int))
tileTOPresmenu = lens _tileTOPresmenu (\a b -> a {_tileTOPresmenu = b})
tileTOPoverlapu :: Lens' TOP (Maybe (Tree Float))
tileTOPoverlapu = lens _tileTOPoverlapu (\a b -> a {_tileTOPoverlapu = b})
tileTOPchanmask :: Lens' TOP (Maybe (Tree Int))
tileTOPchanmask = lens _tileTOPchanmask (\a b -> a {_tileTOPchanmask = b})
tileTOPoverlapv :: Lens' TOP (Maybe (Tree Float))
tileTOPoverlapv = lens _tileTOPoverlapv (\a b -> a {_tileTOPoverlapv = b})
tileTOPreflecty :: Lens' TOP (Maybe (Tree Bool))
tileTOPreflecty = lens _tileTOPreflecty (\a b -> a {_tileTOPreflecty = b})
tileTOPnpasses :: Lens' TOP (Maybe (Tree Int))
tileTOPnpasses = lens _tileTOPnpasses (\a b -> a {_tileTOPnpasses = b})
tileTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
tileTOPoutputaspect = lens _tileTOPoutputaspect (\a b -> a {_tileTOPoutputaspect = b})
tileTOPflop :: Lens' TOP (Maybe (Tree Bool))
tileTOPflop = lens _tileTOPflop (\a b -> a {_tileTOPflop = b})
tileTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
tileTOPresolutionh = lens _tileTOPresolutionh (\a b -> a {_tileTOPresolutionh = b})
tileTOPcropleft :: Lens' TOP (Maybe (Tree Float))
tileTOPcropleft = lens _tileTOPcropleft (\a b -> a {_tileTOPcropleft = b})
tileTOPreflectx :: Lens' TOP (Maybe (Tree Bool))
tileTOPreflectx = lens _tileTOPreflectx (\a b -> a {_tileTOPreflectx = b})
tileTOPcroptopunit :: Lens' TOP (Maybe (Tree Int))
tileTOPcroptopunit = lens _tileTOPcroptopunit (\a b -> a {_tileTOPcroptopunit = b})
tileTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
tileTOPaspect1 = lens _tileTOPaspect1 (\a b -> a {_tileTOPaspect1 = b})
tileTOPflipy :: Lens' TOP (Maybe (Tree Bool))
tileTOPflipy = lens _tileTOPflipy (\a b -> a {_tileTOPflipy = b})
tileTOPcroptop :: Lens' TOP (Maybe (Tree Float))
tileTOPcroptop = lens _tileTOPcroptop (\a b -> a {_tileTOPcroptop = b})
tileTOPcropright :: Lens' TOP (Maybe (Tree Float))
tileTOPcropright = lens _tileTOPcropright (\a b -> a {_tileTOPcropright = b})
tileTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
tileTOPfiltertype = lens _tileTOPfiltertype (\a b -> a {_tileTOPfiltertype = b})

blurTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
blurTOPaspect2 = lens _blurTOPaspect2 (\a b -> a {_blurTOPaspect2 = b})
blurTOPformat :: Lens' TOP (Maybe (Tree Int))
blurTOPformat = lens _blurTOPformat (\a b -> a {_blurTOPformat = b})
blurTOPpreshrink :: Lens' TOP (Maybe (Tree Int))
blurTOPpreshrink = lens _blurTOPpreshrink (\a b -> a {_blurTOPpreshrink = b})
blurTOPoffset2 :: Lens' TOP (Maybe (Tree Float))
blurTOPoffset2 = lens _blurTOPoffset2 (\a b -> a {_blurTOPoffset2 = b})
blurTOPextend :: Lens' TOP (Maybe (Tree Int))
blurTOPextend = lens _blurTOPextend (\a b -> a {_blurTOPextend = b})
blurTOPchanmask :: Lens' TOP (Maybe (Tree Int))
blurTOPchanmask = lens _blurTOPchanmask (\a b -> a {_blurTOPchanmask = b})
blurTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
blurTOPoutputresolution = lens _blurTOPoutputresolution (\a b -> a {_blurTOPoutputresolution = b})
blurTOPfillmode :: Lens' TOP (Maybe (Tree Int))
blurTOPfillmode = lens _blurTOPfillmode (\a b -> a {_blurTOPfillmode = b})
blurTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
blurTOPresolutionw = lens _blurTOPresolutionw (\a b -> a {_blurTOPresolutionw = b})
blurTOParmenu :: Lens' TOP (Maybe (Tree Int))
blurTOParmenu = lens _blurTOParmenu (\a b -> a {_blurTOParmenu = b})
blurTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
blurTOPfiltertype = lens _blurTOPfiltertype (\a b -> a {_blurTOPfiltertype = b})
blurTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
blurTOPresolutionh = lens _blurTOPresolutionh (\a b -> a {_blurTOPresolutionh = b})
blurTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
blurTOPinputfiltertype = lens _blurTOPinputfiltertype (\a b -> a {_blurTOPinputfiltertype = b})
blurTOPoffset1 :: Lens' TOP (Maybe (Tree Float))
blurTOPoffset1 = lens _blurTOPoffset1 (\a b -> a {_blurTOPoffset1 = b})
blurTOPresmult :: Lens' TOP (Maybe (Tree Bool))
blurTOPresmult = lens _blurTOPresmult (\a b -> a {_blurTOPresmult = b})
blurTOPtype :: Lens' TOP (Maybe (Tree Int))
blurTOPtype = lens _blurTOPtype (\a b -> a {_blurTOPtype = b})
blurTOPresmenu :: Lens' TOP (Maybe (Tree Int))
blurTOPresmenu = lens _blurTOPresmenu (\a b -> a {_blurTOPresmenu = b})
blurTOPsize :: Lens' TOP (Maybe (Tree Int))
blurTOPsize = lens _blurTOPsize (\a b -> a {_blurTOPsize = b})
blurTOPoffsetunit :: Lens' TOP (Maybe (Tree Int))
blurTOPoffsetunit = lens _blurTOPoffsetunit (\a b -> a {_blurTOPoffsetunit = b})
blurTOPdither :: Lens' TOP (Maybe (Tree Bool))
blurTOPdither = lens _blurTOPdither (\a b -> a {_blurTOPdither = b})
blurTOProtate :: Lens' TOP (Maybe (Tree Float))
blurTOProtate = lens _blurTOProtate (\a b -> a {_blurTOProtate = b})
blurTOPnpasses :: Lens' TOP (Maybe (Tree Int))
blurTOPnpasses = lens _blurTOPnpasses (\a b -> a {_blurTOPnpasses = b})
blurTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
blurTOPaspect1 = lens _blurTOPaspect1 (\a b -> a {_blurTOPaspect1 = b})
blurTOPmethod :: Lens' TOP (Maybe (Tree Int))
blurTOPmethod = lens _blurTOPmethod (\a b -> a {_blurTOPmethod = b})
blurTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
blurTOPoutputaspect = lens _blurTOPoutputaspect (\a b -> a {_blurTOPoutputaspect = b})

hsvadjustTOPstartcolor :: Lens' TOP (Vec3)
hsvadjustTOPstartcolor = lens _hsvadjustTOPstartcolor (\a b -> a {_hsvadjustTOPstartcolor = b})
hsvadjustTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
hsvadjustTOPaspect2 = lens _hsvadjustTOPaspect2 (\a b -> a {_hsvadjustTOPaspect2 = b})
hsvadjustTOPformat :: Lens' TOP (Maybe (Tree Int))
hsvadjustTOPformat = lens _hsvadjustTOPformat (\a b -> a {_hsvadjustTOPformat = b})
hsvadjustTOPhueoffset :: Lens' TOP (Maybe (Tree Float))
hsvadjustTOPhueoffset = lens _hsvadjustTOPhueoffset (\a b -> a {_hsvadjustTOPhueoffset = b})
hsvadjustTOPvaluerange :: Lens' TOP (Maybe (Tree Float))
hsvadjustTOPvaluerange = lens _hsvadjustTOPvaluerange (\a b -> a {_hsvadjustTOPvaluerange = b})
hsvadjustTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
hsvadjustTOPinputfiltertype = lens _hsvadjustTOPinputfiltertype (\a b -> a {_hsvadjustTOPinputfiltertype = b})
hsvadjustTOPchanmask :: Lens' TOP (Maybe (Tree Int))
hsvadjustTOPchanmask = lens _hsvadjustTOPchanmask (\a b -> a {_hsvadjustTOPchanmask = b})
hsvadjustTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
hsvadjustTOPoutputresolution = lens _hsvadjustTOPoutputresolution (\a b -> a {_hsvadjustTOPoutputresolution = b})
hsvadjustTOPfillmode :: Lens' TOP (Maybe (Tree Int))
hsvadjustTOPfillmode = lens _hsvadjustTOPfillmode (\a b -> a {_hsvadjustTOPfillmode = b})
hsvadjustTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
hsvadjustTOPresolutionw = lens _hsvadjustTOPresolutionw (\a b -> a {_hsvadjustTOPresolutionw = b})
hsvadjustTOPhuerange :: Lens' TOP (Maybe (Tree Float))
hsvadjustTOPhuerange = lens _hsvadjustTOPhuerange (\a b -> a {_hsvadjustTOPhuerange = b})
hsvadjustTOParmenu :: Lens' TOP (Maybe (Tree Int))
hsvadjustTOParmenu = lens _hsvadjustTOParmenu (\a b -> a {_hsvadjustTOParmenu = b})
hsvadjustTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
hsvadjustTOPfiltertype = lens _hsvadjustTOPfiltertype (\a b -> a {_hsvadjustTOPfiltertype = b})
hsvadjustTOPsaturationmult :: Lens' TOP (Maybe (Tree Float))
hsvadjustTOPsaturationmult = lens _hsvadjustTOPsaturationmult (\a b -> a {_hsvadjustTOPsaturationmult = b})
hsvadjustTOPsaturationrange :: Lens' TOP (Maybe (Tree Float))
hsvadjustTOPsaturationrange = lens _hsvadjustTOPsaturationrange (\a b -> a {_hsvadjustTOPsaturationrange = b})
hsvadjustTOPvaluefalloff :: Lens' TOP (Maybe (Tree Float))
hsvadjustTOPvaluefalloff = lens _hsvadjustTOPvaluefalloff (\a b -> a {_hsvadjustTOPvaluefalloff = b})
hsvadjustTOPhuefalloff :: Lens' TOP (Maybe (Tree Float))
hsvadjustTOPhuefalloff = lens _hsvadjustTOPhuefalloff (\a b -> a {_hsvadjustTOPhuefalloff = b})
hsvadjustTOPvaluemult :: Lens' TOP (Maybe (Tree Float))
hsvadjustTOPvaluemult = lens _hsvadjustTOPvaluemult (\a b -> a {_hsvadjustTOPvaluemult = b})
hsvadjustTOPresmult :: Lens' TOP (Maybe (Tree Bool))
hsvadjustTOPresmult = lens _hsvadjustTOPresmult (\a b -> a {_hsvadjustTOPresmult = b})
hsvadjustTOPresmenu :: Lens' TOP (Maybe (Tree Int))
hsvadjustTOPresmenu = lens _hsvadjustTOPresmenu (\a b -> a {_hsvadjustTOPresmenu = b})
hsvadjustTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
hsvadjustTOPresolutionh = lens _hsvadjustTOPresolutionh (\a b -> a {_hsvadjustTOPresolutionh = b})
hsvadjustTOPsaturationfalloff :: Lens' TOP (Maybe (Tree Float))
hsvadjustTOPsaturationfalloff = lens _hsvadjustTOPsaturationfalloff (\a b -> a {_hsvadjustTOPsaturationfalloff = b})
hsvadjustTOPnpasses :: Lens' TOP (Maybe (Tree Int))
hsvadjustTOPnpasses = lens _hsvadjustTOPnpasses (\a b -> a {_hsvadjustTOPnpasses = b})
hsvadjustTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
hsvadjustTOPaspect1 = lens _hsvadjustTOPaspect1 (\a b -> a {_hsvadjustTOPaspect1 = b})
hsvadjustTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
hsvadjustTOPoutputaspect = lens _hsvadjustTOPoutputaspect (\a b -> a {_hsvadjustTOPoutputaspect = b})

renderselectTOPresmult :: Lens' TOP (Maybe (Tree Bool))
renderselectTOPresmult = lens _renderselectTOPresmult (\a b -> a {_renderselectTOPresmult = b})
renderselectTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
renderselectTOPaspect2 = lens _renderselectTOPaspect2 (\a b -> a {_renderselectTOPaspect2 = b})
renderselectTOPformat :: Lens' TOP (Maybe (Tree Int))
renderselectTOPformat = lens _renderselectTOPformat (\a b -> a {_renderselectTOPformat = b})
renderselectTOPresmenu :: Lens' TOP (Maybe (Tree Int))
renderselectTOPresmenu = lens _renderselectTOPresmenu (\a b -> a {_renderselectTOPresmenu = b})
renderselectTOPnpasses :: Lens' TOP (Maybe (Tree Int))
renderselectTOPnpasses = lens _renderselectTOPnpasses (\a b -> a {_renderselectTOPnpasses = b})
renderselectTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
renderselectTOPinputfiltertype = lens _renderselectTOPinputfiltertype (\a b -> a {_renderselectTOPinputfiltertype = b})
renderselectTOPchanmask :: Lens' TOP (Maybe (Tree Int))
renderselectTOPchanmask = lens _renderselectTOPchanmask (\a b -> a {_renderselectTOPchanmask = b})
renderselectTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
renderselectTOPoutputresolution = lens _renderselectTOPoutputresolution (\a b -> a {_renderselectTOPoutputresolution = b})
renderselectTOPfillmode :: Lens' TOP (Maybe (Tree Int))
renderselectTOPfillmode = lens _renderselectTOPfillmode (\a b -> a {_renderselectTOPfillmode = b})
renderselectTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
renderselectTOPresolutionh = lens _renderselectTOPresolutionh (\a b -> a {_renderselectTOPresolutionh = b})
renderselectTOPpeellayerindex :: Lens' TOP (Maybe (Tree Int))
renderselectTOPpeellayerindex = lens _renderselectTOPpeellayerindex (\a b -> a {_renderselectTOPpeellayerindex = b})
renderselectTOParmenu :: Lens' TOP (Maybe (Tree Int))
renderselectTOParmenu = lens _renderselectTOParmenu (\a b -> a {_renderselectTOParmenu = b})
renderselectTOPtop :: Lens' TOP (Maybe (Tree TOP))
renderselectTOPtop = lens _renderselectTOPtop (\a b -> a {_renderselectTOPtop = b})
renderselectTOPcolorbufindex :: Lens' TOP (Maybe (Tree Int))
renderselectTOPcolorbufindex = lens _renderselectTOPcolorbufindex (\a b -> a {_renderselectTOPcolorbufindex = b})
renderselectTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
renderselectTOPaspect1 = lens _renderselectTOPaspect1 (\a b -> a {_renderselectTOPaspect1 = b})
renderselectTOPcameraindex :: Lens' TOP (Maybe (Tree Int))
renderselectTOPcameraindex = lens _renderselectTOPcameraindex (\a b -> a {_renderselectTOPcameraindex = b})
renderselectTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
renderselectTOPresolutionw = lens _renderselectTOPresolutionw (\a b -> a {_renderselectTOPresolutionw = b})
renderselectTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
renderselectTOPoutputaspect = lens _renderselectTOPoutputaspect (\a b -> a {_renderselectTOPoutputaspect = b})
renderselectTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
renderselectTOPfiltertype = lens _renderselectTOPfiltertype (\a b -> a {_renderselectTOPfiltertype = b})

fitTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
fitTOPaspect2 = lens _fitTOPaspect2 (\a b -> a {_fitTOPaspect2 = b})
fitTOPfit :: Lens' TOP (Maybe (Tree Int))
fitTOPfit = lens _fitTOPfit (\a b -> a {_fitTOPfit = b})
fitTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
fitTOPinputfiltertype = lens _fitTOPinputfiltertype (\a b -> a {_fitTOPinputfiltertype = b})
fitTOPchanmask :: Lens' TOP (Maybe (Tree Int))
fitTOPchanmask = lens _fitTOPchanmask (\a b -> a {_fitTOPchanmask = b})
fitTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
fitTOPoutputresolution = lens _fitTOPoutputresolution (\a b -> a {_fitTOPoutputresolution = b})
fitTOPfillmode :: Lens' TOP (Maybe (Tree Int))
fitTOPfillmode = lens _fitTOPfillmode (\a b -> a {_fitTOPfillmode = b})
fitTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
fitTOPresolutionw = lens _fitTOPresolutionw (\a b -> a {_fitTOPresolutionw = b})
fitTOParmenu :: Lens' TOP (Maybe (Tree Int))
fitTOParmenu = lens _fitTOParmenu (\a b -> a {_fitTOParmenu = b})
fitTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
fitTOPfiltertype = lens _fitTOPfiltertype (\a b -> a {_fitTOPfiltertype = b})
fitTOPformat :: Lens' TOP (Maybe (Tree Int))
fitTOPformat = lens _fitTOPformat (\a b -> a {_fitTOPformat = b})
fitTOPbgcolor :: Lens' TOP (Vec4)
fitTOPbgcolor = lens _fitTOPbgcolor (\a b -> a {_fitTOPbgcolor = b})
fitTOPxord :: Lens' TOP (Maybe (Tree Int))
fitTOPxord = lens _fitTOPxord (\a b -> a {_fitTOPxord = b})
fitTOPresmult :: Lens' TOP (Maybe (Tree Bool))
fitTOPresmult = lens _fitTOPresmult (\a b -> a {_fitTOPresmult = b})
fitTOPpunit :: Lens' TOP (Maybe (Tree Int))
fitTOPpunit = lens _fitTOPpunit (\a b -> a {_fitTOPpunit = b})
fitTOPs :: Lens' TOP (Vec2)
fitTOPs = lens _fitTOPs (\a b -> a {_fitTOPs = b})
fitTOPresmenu :: Lens' TOP (Maybe (Tree Int))
fitTOPresmenu = lens _fitTOPresmenu (\a b -> a {_fitTOPresmenu = b})
fitTOPp :: Lens' TOP (Vec2)
fitTOPp = lens _fitTOPp (\a b -> a {_fitTOPp = b})
fitTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
fitTOPresolutionh = lens _fitTOPresolutionh (\a b -> a {_fitTOPresolutionh = b})
fitTOPtunit :: Lens' TOP (Maybe (Tree Int))
fitTOPtunit = lens _fitTOPtunit (\a b -> a {_fitTOPtunit = b})
fitTOPnpasses :: Lens' TOP (Maybe (Tree Int))
fitTOPnpasses = lens _fitTOPnpasses (\a b -> a {_fitTOPnpasses = b})
fitTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
fitTOPaspect1 = lens _fitTOPaspect1 (\a b -> a {_fitTOPaspect1 = b})
fitTOPt :: Lens' TOP (Vec2)
fitTOPt = lens _fitTOPt (\a b -> a {_fitTOPt = b})
fitTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
fitTOPoutputaspect = lens _fitTOPoutputaspect (\a b -> a {_fitTOPoutputaspect = b})

ndiinTOPresmult :: Lens' TOP (Maybe (Tree Bool))
ndiinTOPresmult = lens _ndiinTOPresmult (\a b -> a {_ndiinTOPresmult = b})
ndiinTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
ndiinTOPaspect2 = lens _ndiinTOPaspect2 (\a b -> a {_ndiinTOPaspect2 = b})
ndiinTOPformat :: Lens' TOP (Maybe (Tree Int))
ndiinTOPformat = lens _ndiinTOPformat (\a b -> a {_ndiinTOPformat = b})
ndiinTOPactive :: Lens' TOP (Maybe (Tree Bool))
ndiinTOPactive = lens _ndiinTOPactive (\a b -> a {_ndiinTOPactive = b})
ndiinTOPresmenu :: Lens' TOP (Maybe (Tree Int))
ndiinTOPresmenu = lens _ndiinTOPresmenu (\a b -> a {_ndiinTOPresmenu = b})
ndiinTOPbandwidth :: Lens' TOP (Maybe (Tree Int))
ndiinTOPbandwidth = lens _ndiinTOPbandwidth (\a b -> a {_ndiinTOPbandwidth = b})
ndiinTOPnpasses :: Lens' TOP (Maybe (Tree Int))
ndiinTOPnpasses = lens _ndiinTOPnpasses (\a b -> a {_ndiinTOPnpasses = b})
ndiinTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
ndiinTOPinputfiltertype = lens _ndiinTOPinputfiltertype (\a b -> a {_ndiinTOPinputfiltertype = b})
ndiinTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
ndiinTOPaspect1 = lens _ndiinTOPaspect1 (\a b -> a {_ndiinTOPaspect1 = b})
ndiinTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
ndiinTOPoutputresolution = lens _ndiinTOPoutputresolution (\a b -> a {_ndiinTOPoutputresolution = b})
ndiinTOPfillmode :: Lens' TOP (Maybe (Tree Int))
ndiinTOPfillmode = lens _ndiinTOPfillmode (\a b -> a {_ndiinTOPfillmode = b})
ndiinTOPname :: Lens' TOP (Maybe (Tree ByteString))
ndiinTOPname = lens _ndiinTOPname (\a b -> a {_ndiinTOPname = b})
ndiinTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
ndiinTOPresolutionh = lens _ndiinTOPresolutionh (\a b -> a {_ndiinTOPresolutionh = b})
ndiinTOPchanmask :: Lens' TOP (Maybe (Tree Int))
ndiinTOPchanmask = lens _ndiinTOPchanmask (\a b -> a {_ndiinTOPchanmask = b})
ndiinTOParmenu :: Lens' TOP (Maybe (Tree Int))
ndiinTOParmenu = lens _ndiinTOParmenu (\a b -> a {_ndiinTOParmenu = b})
ndiinTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
ndiinTOPfiltertype = lens _ndiinTOPfiltertype (\a b -> a {_ndiinTOPfiltertype = b})
ndiinTOPgrouptable :: Lens' TOP (Maybe (Tree DAT))
ndiinTOPgrouptable = lens _ndiinTOPgrouptable (\a b -> a {_ndiinTOPgrouptable = b})
ndiinTOPextraips :: Lens' TOP (Maybe (Tree ByteString))
ndiinTOPextraips = lens _ndiinTOPextraips (\a b -> a {_ndiinTOPextraips = b})
ndiinTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
ndiinTOPresolutionw = lens _ndiinTOPresolutionw (\a b -> a {_ndiinTOPresolutionw = b})
ndiinTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
ndiinTOPoutputaspect = lens _ndiinTOPoutputaspect (\a b -> a {_ndiinTOPoutputaspect = b})

embossTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
embossTOPaspect2 = lens _embossTOPaspect2 (\a b -> a {_embossTOPaspect2 = b})
embossTOPformat :: Lens' TOP (Maybe (Tree Int))
embossTOPformat = lens _embossTOPformat (\a b -> a {_embossTOPformat = b})
embossTOPoffset2 :: Lens' TOP (Maybe (Tree Float))
embossTOPoffset2 = lens _embossTOPoffset2 (\a b -> a {_embossTOPoffset2 = b})
embossTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
embossTOPinputfiltertype = lens _embossTOPinputfiltertype (\a b -> a {_embossTOPinputfiltertype = b})
embossTOPchanmask :: Lens' TOP (Maybe (Tree Int))
embossTOPchanmask = lens _embossTOPchanmask (\a b -> a {_embossTOPchanmask = b})
embossTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
embossTOPoutputresolution = lens _embossTOPoutputresolution (\a b -> a {_embossTOPoutputresolution = b})
embossTOPfillmode :: Lens' TOP (Maybe (Tree Int))
embossTOPfillmode = lens _embossTOPfillmode (\a b -> a {_embossTOPfillmode = b})
embossTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
embossTOPresolutionw = lens _embossTOPresolutionw (\a b -> a {_embossTOPresolutionw = b})
embossTOPselect :: Lens' TOP (Maybe (Tree Int))
embossTOPselect = lens _embossTOPselect (\a b -> a {_embossTOPselect = b})
embossTOParmenu :: Lens' TOP (Maybe (Tree Int))
embossTOParmenu = lens _embossTOParmenu (\a b -> a {_embossTOParmenu = b})
embossTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
embossTOPfiltertype = lens _embossTOPfiltertype (\a b -> a {_embossTOPfiltertype = b})
embossTOPdirection :: Lens' TOP (Maybe (Tree Float))
embossTOPdirection = lens _embossTOPdirection (\a b -> a {_embossTOPdirection = b})
embossTOPoffset1 :: Lens' TOP (Maybe (Tree Float))
embossTOPoffset1 = lens _embossTOPoffset1 (\a b -> a {_embossTOPoffset1 = b})
embossTOPresmult :: Lens' TOP (Maybe (Tree Bool))
embossTOPresmult = lens _embossTOPresmult (\a b -> a {_embossTOPresmult = b})
embossTOPresmenu :: Lens' TOP (Maybe (Tree Int))
embossTOPresmenu = lens _embossTOPresmenu (\a b -> a {_embossTOPresmenu = b})
embossTOPoffsetunit :: Lens' TOP (Maybe (Tree Int))
embossTOPoffsetunit = lens _embossTOPoffsetunit (\a b -> a {_embossTOPoffsetunit = b})
embossTOPstrength :: Lens' TOP (Maybe (Tree Float))
embossTOPstrength = lens _embossTOPstrength (\a b -> a {_embossTOPstrength = b})
embossTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
embossTOPresolutionh = lens _embossTOPresolutionh (\a b -> a {_embossTOPresolutionh = b})
embossTOPnpasses :: Lens' TOP (Maybe (Tree Int))
embossTOPnpasses = lens _embossTOPnpasses (\a b -> a {_embossTOPnpasses = b})
embossTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
embossTOPaspect1 = lens _embossTOPaspect1 (\a b -> a {_embossTOPaspect1 = b})
embossTOPmethod :: Lens' TOP (Maybe (Tree Int))
embossTOPmethod = lens _embossTOPmethod (\a b -> a {_embossTOPmethod = b})
embossTOPmidpoint :: Lens' TOP (Maybe (Tree Float))
embossTOPmidpoint = lens _embossTOPmidpoint (\a b -> a {_embossTOPmidpoint = b})
embossTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
embossTOPoutputaspect = lens _embossTOPoutputaspect (\a b -> a {_embossTOPoutputaspect = b})

displaceTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
displaceTOPaspect2 = lens _displaceTOPaspect2 (\a b -> a {_displaceTOPaspect2 = b})
displaceTOPformat :: Lens' TOP (Maybe (Tree Int))
displaceTOPformat = lens _displaceTOPformat (\a b -> a {_displaceTOPformat = b})
displaceTOPoffset2 :: Lens' TOP (Maybe (Tree Float))
displaceTOPoffset2 = lens _displaceTOPoffset2 (\a b -> a {_displaceTOPoffset2 = b})
displaceTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
displaceTOPinputfiltertype = lens _displaceTOPinputfiltertype (\a b -> a {_displaceTOPinputfiltertype = b})
displaceTOPhorzsource :: Lens' TOP (Maybe (Tree Int))
displaceTOPhorzsource = lens _displaceTOPhorzsource (\a b -> a {_displaceTOPhorzsource = b})
displaceTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
displaceTOPoutputresolution = lens _displaceTOPoutputresolution (\a b -> a {_displaceTOPoutputresolution = b})
displaceTOPfillmode :: Lens' TOP (Maybe (Tree Int))
displaceTOPfillmode = lens _displaceTOPfillmode (\a b -> a {_displaceTOPfillmode = b})
displaceTOPdisplaceweight2 :: Lens' TOP (Maybe (Tree Float))
displaceTOPdisplaceweight2 = lens _displaceTOPdisplaceweight2 (\a b -> a {_displaceTOPdisplaceweight2 = b})
displaceTOPmidpoint1 :: Lens' TOP (Maybe (Tree Float))
displaceTOPmidpoint1 = lens _displaceTOPmidpoint1 (\a b -> a {_displaceTOPmidpoint1 = b})
displaceTOParmenu :: Lens' TOP (Maybe (Tree Int))
displaceTOParmenu = lens _displaceTOParmenu (\a b -> a {_displaceTOParmenu = b})
displaceTOPvertsource :: Lens' TOP (Maybe (Tree Int))
displaceTOPvertsource = lens _displaceTOPvertsource (\a b -> a {_displaceTOPvertsource = b})
displaceTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
displaceTOPfiltertype = lens _displaceTOPfiltertype (\a b -> a {_displaceTOPfiltertype = b})
displaceTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
displaceTOPresolutionw = lens _displaceTOPresolutionw (\a b -> a {_displaceTOPresolutionw = b})
displaceTOPdisplaceweight1 :: Lens' TOP (Maybe (Tree Float))
displaceTOPdisplaceweight1 = lens _displaceTOPdisplaceweight1 (\a b -> a {_displaceTOPdisplaceweight1 = b})
displaceTOPoffset1 :: Lens' TOP (Maybe (Tree Float))
displaceTOPoffset1 = lens _displaceTOPoffset1 (\a b -> a {_displaceTOPoffset1 = b})
displaceTOPresmult :: Lens' TOP (Maybe (Tree Bool))
displaceTOPresmult = lens _displaceTOPresmult (\a b -> a {_displaceTOPresmult = b})
displaceTOPresmenu :: Lens' TOP (Maybe (Tree Int))
displaceTOPresmenu = lens _displaceTOPresmenu (\a b -> a {_displaceTOPresmenu = b})
displaceTOPchanmask :: Lens' TOP (Maybe (Tree Int))
displaceTOPchanmask = lens _displaceTOPchanmask (\a b -> a {_displaceTOPchanmask = b})
displaceTOPmidpoint2 :: Lens' TOP (Maybe (Tree Float))
displaceTOPmidpoint2 = lens _displaceTOPmidpoint2 (\a b -> a {_displaceTOPmidpoint2 = b})
displaceTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
displaceTOPoutputaspect = lens _displaceTOPoutputaspect (\a b -> a {_displaceTOPoutputaspect = b})
displaceTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
displaceTOPresolutionh = lens _displaceTOPresolutionh (\a b -> a {_displaceTOPresolutionh = b})
displaceTOPoffsetweight :: Lens' TOP (Maybe (Tree Float))
displaceTOPoffsetweight = lens _displaceTOPoffsetweight (\a b -> a {_displaceTOPoffsetweight = b})
displaceTOPnpasses :: Lens' TOP (Maybe (Tree Int))
displaceTOPnpasses = lens _displaceTOPnpasses (\a b -> a {_displaceTOPnpasses = b})
displaceTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
displaceTOPaspect1 = lens _displaceTOPaspect1 (\a b -> a {_displaceTOPaspect1 = b})
displaceTOPuvweight :: Lens' TOP (Maybe (Tree Float))
displaceTOPuvweight = lens _displaceTOPuvweight (\a b -> a {_displaceTOPuvweight = b})
displaceTOPextend :: Lens' TOP (Maybe (Tree Int))
displaceTOPextend = lens _displaceTOPextend (\a b -> a {_displaceTOPextend = b})

multiplyTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
multiplyTOPaspect2 = lens _multiplyTOPaspect2 (\a b -> a {_multiplyTOPaspect2 = b})
multiplyTOPformat :: Lens' TOP (Maybe (Tree Int))
multiplyTOPformat = lens _multiplyTOPformat (\a b -> a {_multiplyTOPformat = b})
multiplyTOPextend :: Lens' TOP (Maybe (Tree Int))
multiplyTOPextend = lens _multiplyTOPextend (\a b -> a {_multiplyTOPextend = b})
multiplyTOPchanmask :: Lens' TOP (Maybe (Tree Int))
multiplyTOPchanmask = lens _multiplyTOPchanmask (\a b -> a {_multiplyTOPchanmask = b})
multiplyTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
multiplyTOPoutputresolution = lens _multiplyTOPoutputresolution (\a b -> a {_multiplyTOPoutputresolution = b})
multiplyTOPfillmode :: Lens' TOP (Maybe (Tree Int))
multiplyTOPfillmode = lens _multiplyTOPfillmode (\a b -> a {_multiplyTOPfillmode = b})
multiplyTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
multiplyTOPresolutionw = lens _multiplyTOPresolutionw (\a b -> a {_multiplyTOPresolutionw = b})
multiplyTOParmenu :: Lens' TOP (Maybe (Tree Int))
multiplyTOParmenu = lens _multiplyTOParmenu (\a b -> a {_multiplyTOParmenu = b})
multiplyTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
multiplyTOPfiltertype = lens _multiplyTOPfiltertype (\a b -> a {_multiplyTOPfiltertype = b})
multiplyTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
multiplyTOPinputfiltertype = lens _multiplyTOPinputfiltertype (\a b -> a {_multiplyTOPinputfiltertype = b})
multiplyTOPresmult :: Lens' TOP (Maybe (Tree Bool))
multiplyTOPresmult = lens _multiplyTOPresmult (\a b -> a {_multiplyTOPresmult = b})
multiplyTOPpunit :: Lens' TOP (Maybe (Tree Int))
multiplyTOPpunit = lens _multiplyTOPpunit (\a b -> a {_multiplyTOPpunit = b})
multiplyTOPs :: Lens' TOP (Vec2)
multiplyTOPs = lens _multiplyTOPs (\a b -> a {_multiplyTOPs = b})
multiplyTOPresmenu :: Lens' TOP (Maybe (Tree Int))
multiplyTOPresmenu = lens _multiplyTOPresmenu (\a b -> a {_multiplyTOPresmenu = b})
multiplyTOPp :: Lens' TOP (Vec2)
multiplyTOPp = lens _multiplyTOPp (\a b -> a {_multiplyTOPp = b})
multiplyTOPsize :: Lens' TOP (Maybe (Tree Int))
multiplyTOPsize = lens _multiplyTOPsize (\a b -> a {_multiplyTOPsize = b})
multiplyTOPnpasses :: Lens' TOP (Maybe (Tree Int))
multiplyTOPnpasses = lens _multiplyTOPnpasses (\a b -> a {_multiplyTOPnpasses = b})
multiplyTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
multiplyTOPoutputaspect = lens _multiplyTOPoutputaspect (\a b -> a {_multiplyTOPoutputaspect = b})
multiplyTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
multiplyTOPresolutionh = lens _multiplyTOPresolutionh (\a b -> a {_multiplyTOPresolutionh = b})
multiplyTOPtunit :: Lens' TOP (Maybe (Tree Int))
multiplyTOPtunit = lens _multiplyTOPtunit (\a b -> a {_multiplyTOPtunit = b})
multiplyTOPprefit :: Lens' TOP (Maybe (Tree Int))
multiplyTOPprefit = lens _multiplyTOPprefit (\a b -> a {_multiplyTOPprefit = b})
multiplyTOPr :: Lens' TOP (Maybe (Tree Float))
multiplyTOPr = lens _multiplyTOPr (\a b -> a {_multiplyTOPr = b})
multiplyTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
multiplyTOPaspect1 = lens _multiplyTOPaspect1 (\a b -> a {_multiplyTOPaspect1 = b})
multiplyTOPjustifyh :: Lens' TOP (Maybe (Tree Int))
multiplyTOPjustifyh = lens _multiplyTOPjustifyh (\a b -> a {_multiplyTOPjustifyh = b})
multiplyTOPt :: Lens' TOP (Vec2)
multiplyTOPt = lens _multiplyTOPt (\a b -> a {_multiplyTOPt = b})
multiplyTOPjustifyv :: Lens' TOP (Maybe (Tree Int))
multiplyTOPjustifyv = lens _multiplyTOPjustifyv (\a b -> a {_multiplyTOPjustifyv = b})

insideTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
insideTOPaspect2 = lens _insideTOPaspect2 (\a b -> a {_insideTOPaspect2 = b})
insideTOPformat :: Lens' TOP (Maybe (Tree Int))
insideTOPformat = lens _insideTOPformat (\a b -> a {_insideTOPformat = b})
insideTOPextend :: Lens' TOP (Maybe (Tree Int))
insideTOPextend = lens _insideTOPextend (\a b -> a {_insideTOPextend = b})
insideTOPchanmask :: Lens' TOP (Maybe (Tree Int))
insideTOPchanmask = lens _insideTOPchanmask (\a b -> a {_insideTOPchanmask = b})
insideTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
insideTOPoutputresolution = lens _insideTOPoutputresolution (\a b -> a {_insideTOPoutputresolution = b})
insideTOPfillmode :: Lens' TOP (Maybe (Tree Int))
insideTOPfillmode = lens _insideTOPfillmode (\a b -> a {_insideTOPfillmode = b})
insideTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
insideTOPresolutionw = lens _insideTOPresolutionw (\a b -> a {_insideTOPresolutionw = b})
insideTOParmenu :: Lens' TOP (Maybe (Tree Int))
insideTOParmenu = lens _insideTOParmenu (\a b -> a {_insideTOParmenu = b})
insideTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
insideTOPfiltertype = lens _insideTOPfiltertype (\a b -> a {_insideTOPfiltertype = b})
insideTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
insideTOPinputfiltertype = lens _insideTOPinputfiltertype (\a b -> a {_insideTOPinputfiltertype = b})
insideTOPresmult :: Lens' TOP (Maybe (Tree Bool))
insideTOPresmult = lens _insideTOPresmult (\a b -> a {_insideTOPresmult = b})
insideTOPpunit :: Lens' TOP (Maybe (Tree Int))
insideTOPpunit = lens _insideTOPpunit (\a b -> a {_insideTOPpunit = b})
insideTOPs :: Lens' TOP (Vec2)
insideTOPs = lens _insideTOPs (\a b -> a {_insideTOPs = b})
insideTOPresmenu :: Lens' TOP (Maybe (Tree Int))
insideTOPresmenu = lens _insideTOPresmenu (\a b -> a {_insideTOPresmenu = b})
insideTOPp :: Lens' TOP (Vec2)
insideTOPp = lens _insideTOPp (\a b -> a {_insideTOPp = b})
insideTOPsize :: Lens' TOP (Maybe (Tree Int))
insideTOPsize = lens _insideTOPsize (\a b -> a {_insideTOPsize = b})
insideTOPnpasses :: Lens' TOP (Maybe (Tree Int))
insideTOPnpasses = lens _insideTOPnpasses (\a b -> a {_insideTOPnpasses = b})
insideTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
insideTOPoutputaspect = lens _insideTOPoutputaspect (\a b -> a {_insideTOPoutputaspect = b})
insideTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
insideTOPresolutionh = lens _insideTOPresolutionh (\a b -> a {_insideTOPresolutionh = b})
insideTOPtunit :: Lens' TOP (Maybe (Tree Int))
insideTOPtunit = lens _insideTOPtunit (\a b -> a {_insideTOPtunit = b})
insideTOPprefit :: Lens' TOP (Maybe (Tree Int))
insideTOPprefit = lens _insideTOPprefit (\a b -> a {_insideTOPprefit = b})
insideTOPr :: Lens' TOP (Maybe (Tree Float))
insideTOPr = lens _insideTOPr (\a b -> a {_insideTOPr = b})
insideTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
insideTOPaspect1 = lens _insideTOPaspect1 (\a b -> a {_insideTOPaspect1 = b})
insideTOPjustifyh :: Lens' TOP (Maybe (Tree Int))
insideTOPjustifyh = lens _insideTOPjustifyh (\a b -> a {_insideTOPjustifyh = b})
insideTOPt :: Lens' TOP (Vec2)
insideTOPt = lens _insideTOPt (\a b -> a {_insideTOPt = b})
insideTOPjustifyv :: Lens' TOP (Maybe (Tree Int))
insideTOPjustifyv = lens _insideTOPjustifyv (\a b -> a {_insideTOPjustifyv = b})

nullTOPresmult :: Lens' TOP (Maybe (Tree Bool))
nullTOPresmult = lens _nullTOPresmult (\a b -> a {_nullTOPresmult = b})
nullTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
nullTOPaspect2 = lens _nullTOPaspect2 (\a b -> a {_nullTOPaspect2 = b})
nullTOPformat :: Lens' TOP (Maybe (Tree Int))
nullTOPformat = lens _nullTOPformat (\a b -> a {_nullTOPformat = b})
nullTOPresmenu :: Lens' TOP (Maybe (Tree Int))
nullTOPresmenu = lens _nullTOPresmenu (\a b -> a {_nullTOPresmenu = b})
nullTOPnpasses :: Lens' TOP (Maybe (Tree Int))
nullTOPnpasses = lens _nullTOPnpasses (\a b -> a {_nullTOPnpasses = b})
nullTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
nullTOPinputfiltertype = lens _nullTOPinputfiltertype (\a b -> a {_nullTOPinputfiltertype = b})
nullTOPchanmask :: Lens' TOP (Maybe (Tree Int))
nullTOPchanmask = lens _nullTOPchanmask (\a b -> a {_nullTOPchanmask = b})
nullTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
nullTOPoutputresolution = lens _nullTOPoutputresolution (\a b -> a {_nullTOPoutputresolution = b})
nullTOPfillmode :: Lens' TOP (Maybe (Tree Int))
nullTOPfillmode = lens _nullTOPfillmode (\a b -> a {_nullTOPfillmode = b})
nullTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
nullTOPresolutionw = lens _nullTOPresolutionw (\a b -> a {_nullTOPresolutionw = b})
nullTOParmenu :: Lens' TOP (Maybe (Tree Int))
nullTOParmenu = lens _nullTOParmenu (\a b -> a {_nullTOParmenu = b})
nullTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
nullTOPfiltertype = lens _nullTOPfiltertype (\a b -> a {_nullTOPfiltertype = b})
nullTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
nullTOPaspect1 = lens _nullTOPaspect1 (\a b -> a {_nullTOPaspect1 = b})
nullTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
nullTOPresolutionh = lens _nullTOPresolutionh (\a b -> a {_nullTOPresolutionh = b})
nullTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
nullTOPoutputaspect = lens _nullTOPoutputaspect (\a b -> a {_nullTOPoutputaspect = b})

ssaoTOPsamplesteps :: Lens' TOP (Maybe (Tree Int))
ssaoTOPsamplesteps = lens _ssaoTOPsamplesteps (\a b -> a {_ssaoTOPsamplesteps = b})
ssaoTOPquality :: Lens' TOP (Maybe (Tree Int))
ssaoTOPquality = lens _ssaoTOPquality (\a b -> a {_ssaoTOPquality = b})
ssaoTOPssaopassres :: Lens' TOP (Maybe (Tree Int))
ssaoTOPssaopassres = lens _ssaoTOPssaopassres (\a b -> a {_ssaoTOPssaopassres = b})
ssaoTOPsurfaceavoid :: Lens' TOP (Maybe (Tree Float))
ssaoTOPsurfaceavoid = lens _ssaoTOPsurfaceavoid (\a b -> a {_ssaoTOPsurfaceavoid = b})
ssaoTOPcombinewithcolor :: Lens' TOP (Maybe (Tree Bool))
ssaoTOPcombinewithcolor = lens _ssaoTOPcombinewithcolor (\a b -> a {_ssaoTOPcombinewithcolor = b})
ssaoTOPcontrast :: Lens' TOP (Maybe (Tree Float))
ssaoTOPcontrast = lens _ssaoTOPcontrast (\a b -> a {_ssaoTOPcontrast = b})
ssaoTOPchanmask :: Lens' TOP (Maybe (Tree Int))
ssaoTOPchanmask = lens _ssaoTOPchanmask (\a b -> a {_ssaoTOPchanmask = b})
ssaoTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
ssaoTOPoutputresolution = lens _ssaoTOPoutputresolution (\a b -> a {_ssaoTOPoutputresolution = b})
ssaoTOPresmult :: Lens' TOP (Maybe (Tree Bool))
ssaoTOPresmult = lens _ssaoTOPresmult (\a b -> a {_ssaoTOPresmult = b})
ssaoTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
ssaoTOPresolutionw = lens _ssaoTOPresolutionw (\a b -> a {_ssaoTOPresolutionw = b})
ssaoTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
ssaoTOPaspect2 = lens _ssaoTOPaspect2 (\a b -> a {_ssaoTOPaspect2 = b})
ssaoTOPattenuation :: Lens' TOP (Maybe (Tree Float))
ssaoTOPattenuation = lens _ssaoTOPattenuation (\a b -> a {_ssaoTOPattenuation = b})
ssaoTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
ssaoTOPfiltertype = lens _ssaoTOPfiltertype (\a b -> a {_ssaoTOPfiltertype = b})
ssaoTOPformat :: Lens' TOP (Maybe (Tree Int))
ssaoTOPformat = lens _ssaoTOPformat (\a b -> a {_ssaoTOPformat = b})
ssaoTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
ssaoTOPinputfiltertype = lens _ssaoTOPinputfiltertype (\a b -> a {_ssaoTOPinputfiltertype = b})
ssaoTOPsampledirs :: Lens' TOP (Maybe (Tree Int))
ssaoTOPsampledirs = lens _ssaoTOPsampledirs (\a b -> a {_ssaoTOPsampledirs = b})
ssaoTOPresmenu :: Lens' TOP (Maybe (Tree Int))
ssaoTOPresmenu = lens _ssaoTOPresmenu (\a b -> a {_ssaoTOPresmenu = b})
ssaoTOPnpasses :: Lens' TOP (Maybe (Tree Int))
ssaoTOPnpasses = lens _ssaoTOPnpasses (\a b -> a {_ssaoTOPnpasses = b})
ssaoTOPedgethresh :: Lens' TOP (Maybe (Tree Float))
ssaoTOPedgethresh = lens _ssaoTOPedgethresh (\a b -> a {_ssaoTOPedgethresh = b})
ssaoTOPfillmode :: Lens' TOP (Maybe (Tree Int))
ssaoTOPfillmode = lens _ssaoTOPfillmode (\a b -> a {_ssaoTOPfillmode = b})
ssaoTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
ssaoTOPresolutionh = lens _ssaoTOPresolutionh (\a b -> a {_ssaoTOPresolutionh = b})
ssaoTOPssaoradius :: Lens' TOP (Maybe (Tree Float))
ssaoTOPssaoradius = lens _ssaoTOPssaoradius (\a b -> a {_ssaoTOPssaoradius = b})
ssaoTOParmenu :: Lens' TOP (Maybe (Tree Int))
ssaoTOParmenu = lens _ssaoTOParmenu (\a b -> a {_ssaoTOParmenu = b})
ssaoTOPblursharpness :: Lens' TOP (Maybe (Tree Float))
ssaoTOPblursharpness = lens _ssaoTOPblursharpness (\a b -> a {_ssaoTOPblursharpness = b})
ssaoTOPblurradius :: Lens' TOP (Maybe (Tree Float))
ssaoTOPblurradius = lens _ssaoTOPblurradius (\a b -> a {_ssaoTOPblurradius = b})
ssaoTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
ssaoTOPaspect1 = lens _ssaoTOPaspect1 (\a b -> a {_ssaoTOPaspect1 = b})
ssaoTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
ssaoTOPoutputaspect = lens _ssaoTOPoutputaspect (\a b -> a {_ssaoTOPoutputaspect = b})

opencolorioTOPpower :: Lens' TOP (Vec3)
opencolorioTOPpower = lens _opencolorioTOPpower (\a b -> a {_opencolorioTOPpower = b})
opencolorioTOPdisplay :: Lens' TOP (Maybe (Tree ByteString))
opencolorioTOPdisplay = lens _opencolorioTOPdisplay (\a b -> a {_opencolorioTOPdisplay = b})
opencolorioTOPincolorspace :: Lens' TOP (Maybe (Tree ByteString))
opencolorioTOPincolorspace = lens _opencolorioTOPincolorspace (\a b -> a {_opencolorioTOPincolorspace = b})
opencolorioTOPprecision :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPprecision = lens _opencolorioTOPprecision (\a b -> a {_opencolorioTOPprecision = b})
opencolorioTOPformat :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPformat = lens _opencolorioTOPformat (\a b -> a {_opencolorioTOPformat = b})
opencolorioTOPcdlmode :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPcdlmode = lens _opencolorioTOPcdlmode (\a b -> a {_opencolorioTOPcdlmode = b})
opencolorioTOPcdldirection :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPcdldirection = lens _opencolorioTOPcdldirection (\a b -> a {_opencolorioTOPcdldirection = b})
opencolorioTOPoffset :: Lens' TOP (Vec3)
opencolorioTOPoffset = lens _opencolorioTOPoffset (\a b -> a {_opencolorioTOPoffset = b})
opencolorioTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPinputfiltertype = lens _opencolorioTOPinputfiltertype (\a b -> a {_opencolorioTOPinputfiltertype = b})
opencolorioTOPconfig :: Lens' TOP (Maybe (Tree ByteString))
opencolorioTOPconfig = lens _opencolorioTOPconfig (\a b -> a {_opencolorioTOPconfig = b})
opencolorioTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPoutputresolution = lens _opencolorioTOPoutputresolution (\a b -> a {_opencolorioTOPoutputresolution = b})
opencolorioTOPinterpolation :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPinterpolation = lens _opencolorioTOPinterpolation (\a b -> a {_opencolorioTOPinterpolation = b})
opencolorioTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPresolutionw = lens _opencolorioTOPresolutionw (\a b -> a {_opencolorioTOPresolutionw = b})
opencolorioTOPoutcolorspace :: Lens' TOP (Maybe (Tree ByteString))
opencolorioTOPoutcolorspace = lens _opencolorioTOPoutcolorspace (\a b -> a {_opencolorioTOPoutcolorspace = b})
opencolorioTOPreloadconfig :: Lens' TOP (Maybe (Tree Bool))
opencolorioTOPreloadconfig = lens _opencolorioTOPreloadconfig (\a b -> a {_opencolorioTOPreloadconfig = b})
opencolorioTOPgain :: Lens' TOP (Maybe (Tree Float))
opencolorioTOPgain = lens _opencolorioTOPgain (\a b -> a {_opencolorioTOPgain = b})
opencolorioTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPfiltertype = lens _opencolorioTOPfiltertype (\a b -> a {_opencolorioTOPfiltertype = b})
opencolorioTOPsaturation :: Lens' TOP (Maybe (Tree Float))
opencolorioTOPsaturation = lens _opencolorioTOPsaturation (\a b -> a {_opencolorioTOPsaturation = b})
opencolorioTOPcolorspace :: Lens' TOP (Maybe (Tree ByteString))
opencolorioTOPcolorspace = lens _opencolorioTOPcolorspace (\a b -> a {_opencolorioTOPcolorspace = b})
opencolorioTOPuseoutput :: Lens' TOP (Maybe (Tree Bool))
opencolorioTOPuseoutput = lens _opencolorioTOPuseoutput (\a b -> a {_opencolorioTOPuseoutput = b})
opencolorioTOPlutsize :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPlutsize = lens _opencolorioTOPlutsize (\a b -> a {_opencolorioTOPlutsize = b})
opencolorioTOPchanmask :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPchanmask = lens _opencolorioTOPchanmask (\a b -> a {_opencolorioTOPchanmask = b})
opencolorioTOPresmult :: Lens' TOP (Maybe (Tree Bool))
opencolorioTOPresmult = lens _opencolorioTOPresmult (\a b -> a {_opencolorioTOPresmult = b})
opencolorioTOPusecolorspacetransform :: Lens' TOP (Maybe (Tree Bool))
opencolorioTOPusecolorspacetransform = lens _opencolorioTOPusecolorspacetransform (\a b -> a {_opencolorioTOPusecolorspacetransform = b})
opencolorioTOPfiledirection :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPfiledirection = lens _opencolorioTOPfiledirection (\a b -> a {_opencolorioTOPfiledirection = b})
opencolorioTOPresmenu :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPresmenu = lens _opencolorioTOPresmenu (\a b -> a {_opencolorioTOPresmenu = b})
opencolorioTOPfilesource :: Lens' TOP (Maybe (Tree ByteString))
opencolorioTOPfilesource = lens _opencolorioTOPfilesource (\a b -> a {_opencolorioTOPfilesource = b})
opencolorioTOPnpasses :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPnpasses = lens _opencolorioTOPnpasses (\a b -> a {_opencolorioTOPnpasses = b})
opencolorioTOPgamma :: Lens' TOP (Maybe (Tree Float))
opencolorioTOPgamma = lens _opencolorioTOPgamma (\a b -> a {_opencolorioTOPgamma = b})
opencolorioTOPccfile :: Lens' TOP (Maybe (Tree ByteString))
opencolorioTOPccfile = lens _opencolorioTOPccfile (\a b -> a {_opencolorioTOPccfile = b})
opencolorioTOPfillmode :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPfillmode = lens _opencolorioTOPfillmode (\a b -> a {_opencolorioTOPfillmode = b})
opencolorioTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPresolutionh = lens _opencolorioTOPresolutionh (\a b -> a {_opencolorioTOPresolutionh = b})
opencolorioTOPslope :: Lens' TOP (Vec3)
opencolorioTOPslope = lens _opencolorioTOPslope (\a b -> a {_opencolorioTOPslope = b})
opencolorioTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
opencolorioTOPaspect2 = lens _opencolorioTOPaspect2 (\a b -> a {_opencolorioTOPaspect2 = b})
opencolorioTOParmenu :: Lens' TOP (Maybe (Tree Int))
opencolorioTOParmenu = lens _opencolorioTOParmenu (\a b -> a {_opencolorioTOParmenu = b})
opencolorioTOPview :: Lens' TOP (Maybe (Tree ByteString))
opencolorioTOPview = lens _opencolorioTOPview (\a b -> a {_opencolorioTOPview = b})
opencolorioTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
opencolorioTOPaspect1 = lens _opencolorioTOPaspect1 (\a b -> a {_opencolorioTOPaspect1 = b})
opencolorioTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
opencolorioTOPoutputaspect = lens _opencolorioTOPoutputaspect (\a b -> a {_opencolorioTOPoutputaspect = b})
opencolorioTOPusefiletransform :: Lens' TOP (Maybe (Tree Bool))
opencolorioTOPusefiletransform = lens _opencolorioTOPusefiletransform (\a b -> a {_opencolorioTOPusefiletransform = b})

circleTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
circleTOPaspect2 = lens _circleTOPaspect2 (\a b -> a {_circleTOPaspect2 = b})
circleTOPformat :: Lens' TOP (Maybe (Tree Int))
circleTOPformat = lens _circleTOPformat (\a b -> a {_circleTOPformat = b})
circleTOPsoftnessunit :: Lens' TOP (Maybe (Tree Int))
circleTOPsoftnessunit = lens _circleTOPsoftnessunit (\a b -> a {_circleTOPsoftnessunit = b})
circleTOPendarcangle :: Lens' TOP (Maybe (Tree Float))
circleTOPendarcangle = lens _circleTOPendarcangle (\a b -> a {_circleTOPendarcangle = b})
circleTOPchanmask :: Lens' TOP (Maybe (Tree Int))
circleTOPchanmask = lens _circleTOPchanmask (\a b -> a {_circleTOPchanmask = b})
circleTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
circleTOPoutputresolution = lens _circleTOPoutputresolution (\a b -> a {_circleTOPoutputresolution = b})
circleTOPborderoffset :: Lens' TOP (Maybe (Tree Float))
circleTOPborderoffset = lens _circleTOPborderoffset (\a b -> a {_circleTOPborderoffset = b})
circleTOPfillcolor :: Lens' TOP (Vec3)
circleTOPfillcolor = lens _circleTOPfillcolor (\a b -> a {_circleTOPfillcolor = b})
circleTOPantialias :: Lens' TOP (Maybe (Tree Bool))
circleTOPantialias = lens _circleTOPantialias (\a b -> a {_circleTOPantialias = b})
circleTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
circleTOPresolutionw = lens _circleTOPresolutionw (\a b -> a {_circleTOPresolutionw = b})
circleTOParmenu :: Lens' TOP (Maybe (Tree Int))
circleTOParmenu = lens _circleTOParmenu (\a b -> a {_circleTOParmenu = b})
circleTOPradius :: Lens' TOP (Vec2)
circleTOPradius = lens _circleTOPradius (\a b -> a {_circleTOPradius = b})
circleTOPborderwidth :: Lens' TOP (Maybe (Tree Float))
circleTOPborderwidth = lens _circleTOPborderwidth (\a b -> a {_circleTOPborderwidth = b})
circleTOPfillalpha :: Lens' TOP (Maybe (Tree Float))
circleTOPfillalpha = lens _circleTOPfillalpha (\a b -> a {_circleTOPfillalpha = b})
circleTOPbgcolor :: Lens' TOP (Vec3)
circleTOPbgcolor = lens _circleTOPbgcolor (\a b -> a {_circleTOPbgcolor = b})
circleTOPradiusunit :: Lens' TOP (Maybe (Tree Int))
circleTOPradiusunit = lens _circleTOPradiusunit (\a b -> a {_circleTOPradiusunit = b})
circleTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
circleTOPinputfiltertype = lens _circleTOPinputfiltertype (\a b -> a {_circleTOPinputfiltertype = b})
circleTOPbeginarcangle :: Lens' TOP (Maybe (Tree Float))
circleTOPbeginarcangle = lens _circleTOPbeginarcangle (\a b -> a {_circleTOPbeginarcangle = b})
circleTOPcenterunit :: Lens' TOP (Maybe (Tree Int))
circleTOPcenterunit = lens _circleTOPcenterunit (\a b -> a {_circleTOPcenterunit = b})
circleTOPresmult :: Lens' TOP (Maybe (Tree Bool))
circleTOPresmult = lens _circleTOPresmult (\a b -> a {_circleTOPresmult = b})
circleTOPispolygon :: Lens' TOP (Maybe (Tree Bool))
circleTOPispolygon = lens _circleTOPispolygon (\a b -> a {_circleTOPispolygon = b})
circleTOPresmenu :: Lens' TOP (Maybe (Tree Int))
circleTOPresmenu = lens _circleTOPresmenu (\a b -> a {_circleTOPresmenu = b})
circleTOPmultrgbbyalpha :: Lens' TOP (Maybe (Tree Bool))
circleTOPmultrgbbyalpha = lens _circleTOPmultrgbbyalpha (\a b -> a {_circleTOPmultrgbbyalpha = b})
circleTOPbgalpha :: Lens' TOP (Maybe (Tree Float))
circleTOPbgalpha = lens _circleTOPbgalpha (\a b -> a {_circleTOPbgalpha = b})
circleTOPborder :: Lens' TOP (Vec3)
circleTOPborder = lens _circleTOPborder (\a b -> a {_circleTOPborder = b})
circleTOPfillmode :: Lens' TOP (Maybe (Tree Int))
circleTOPfillmode = lens _circleTOPfillmode (\a b -> a {_circleTOPfillmode = b})
circleTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
circleTOPresolutionh = lens _circleTOPresolutionh (\a b -> a {_circleTOPresolutionh = b})
circleTOProtate :: Lens' TOP (Maybe (Tree Float))
circleTOProtate = lens _circleTOProtate (\a b -> a {_circleTOProtate = b})
circleTOPcenter :: Lens' TOP (Vec2)
circleTOPcenter = lens _circleTOPcenter (\a b -> a {_circleTOPcenter = b})
circleTOPsoftness :: Lens' TOP (Maybe (Tree Float))
circleTOPsoftness = lens _circleTOPsoftness (\a b -> a {_circleTOPsoftness = b})
circleTOPborderalpha :: Lens' TOP (Maybe (Tree Float))
circleTOPborderalpha = lens _circleTOPborderalpha (\a b -> a {_circleTOPborderalpha = b})
circleTOPnpasses :: Lens' TOP (Maybe (Tree Int))
circleTOPnpasses = lens _circleTOPnpasses (\a b -> a {_circleTOPnpasses = b})
circleTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
circleTOPaspect1 = lens _circleTOPaspect1 (\a b -> a {_circleTOPaspect1 = b})
circleTOPsides :: Lens' TOP (Maybe (Tree Int))
circleTOPsides = lens _circleTOPsides (\a b -> a {_circleTOPsides = b})
circleTOPborderwidthunit :: Lens' TOP (Maybe (Tree Int))
circleTOPborderwidthunit = lens _circleTOPborderwidthunit (\a b -> a {_circleTOPborderwidthunit = b})
circleTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
circleTOPoutputaspect = lens _circleTOPoutputaspect (\a b -> a {_circleTOPoutputaspect = b})
circleTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
circleTOPfiltertype = lens _circleTOPfiltertype (\a b -> a {_circleTOPfiltertype = b})

substanceTOPresmult :: Lens' TOP (Maybe (Tree Bool))
substanceTOPresmult = lens _substanceTOPresmult (\a b -> a {_substanceTOPresmult = b})
substanceTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
substanceTOPaspect2 = lens _substanceTOPaspect2 (\a b -> a {_substanceTOPaspect2 = b})
substanceTOPformat :: Lens' TOP (Maybe (Tree Int))
substanceTOPformat = lens _substanceTOPformat (\a b -> a {_substanceTOPformat = b})
substanceTOPfile :: Lens' TOP (Maybe (Tree ByteString))
substanceTOPfile = lens _substanceTOPfile (\a b -> a {_substanceTOPfile = b})
substanceTOPresmenu :: Lens' TOP (Maybe (Tree Int))
substanceTOPresmenu = lens _substanceTOPresmenu (\a b -> a {_substanceTOPresmenu = b})
substanceTOPnpasses :: Lens' TOP (Maybe (Tree Int))
substanceTOPnpasses = lens _substanceTOPnpasses (\a b -> a {_substanceTOPnpasses = b})
substanceTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
substanceTOPinputfiltertype = lens _substanceTOPinputfiltertype (\a b -> a {_substanceTOPinputfiltertype = b})
substanceTOPchanmask :: Lens' TOP (Maybe (Tree Int))
substanceTOPchanmask = lens _substanceTOPchanmask (\a b -> a {_substanceTOPchanmask = b})
substanceTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
substanceTOPoutputresolution = lens _substanceTOPoutputresolution (\a b -> a {_substanceTOPoutputresolution = b})
substanceTOPfillmode :: Lens' TOP (Maybe (Tree Int))
substanceTOPfillmode = lens _substanceTOPfillmode (\a b -> a {_substanceTOPfillmode = b})
substanceTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
substanceTOPresolutionw = lens _substanceTOPresolutionw (\a b -> a {_substanceTOPresolutionw = b})
substanceTOPgraph :: Lens' TOP (Maybe (Tree ByteString))
substanceTOPgraph = lens _substanceTOPgraph (\a b -> a {_substanceTOPgraph = b})
substanceTOPreloadconfig :: Lens' TOP (Maybe (Tree Bool))
substanceTOPreloadconfig = lens _substanceTOPreloadconfig (\a b -> a {_substanceTOPreloadconfig = b})
substanceTOParmenu :: Lens' TOP (Maybe (Tree Int))
substanceTOParmenu = lens _substanceTOParmenu (\a b -> a {_substanceTOParmenu = b})
substanceTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
substanceTOPfiltertype = lens _substanceTOPfiltertype (\a b -> a {_substanceTOPfiltertype = b})
substanceTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
substanceTOPaspect1 = lens _substanceTOPaspect1 (\a b -> a {_substanceTOPaspect1 = b})
substanceTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
substanceTOPresolutionh = lens _substanceTOPresolutionh (\a b -> a {_substanceTOPresolutionh = b})
substanceTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
substanceTOPoutputaspect = lens _substanceTOPoutputaspect (\a b -> a {_substanceTOPoutputaspect = b})
substanceTOPoutput :: Lens' TOP (Maybe (Tree ByteString))
substanceTOPoutput = lens _substanceTOPoutput (\a b -> a {_substanceTOPoutput = b})

subtractTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
subtractTOPaspect2 = lens _subtractTOPaspect2 (\a b -> a {_subtractTOPaspect2 = b})
subtractTOPformat :: Lens' TOP (Maybe (Tree Int))
subtractTOPformat = lens _subtractTOPformat (\a b -> a {_subtractTOPformat = b})
subtractTOPextend :: Lens' TOP (Maybe (Tree Int))
subtractTOPextend = lens _subtractTOPextend (\a b -> a {_subtractTOPextend = b})
subtractTOPchanmask :: Lens' TOP (Maybe (Tree Int))
subtractTOPchanmask = lens _subtractTOPchanmask (\a b -> a {_subtractTOPchanmask = b})
subtractTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
subtractTOPoutputresolution = lens _subtractTOPoutputresolution (\a b -> a {_subtractTOPoutputresolution = b})
subtractTOPfillmode :: Lens' TOP (Maybe (Tree Int))
subtractTOPfillmode = lens _subtractTOPfillmode (\a b -> a {_subtractTOPfillmode = b})
subtractTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
subtractTOPresolutionw = lens _subtractTOPresolutionw (\a b -> a {_subtractTOPresolutionw = b})
subtractTOParmenu :: Lens' TOP (Maybe (Tree Int))
subtractTOParmenu = lens _subtractTOParmenu (\a b -> a {_subtractTOParmenu = b})
subtractTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
subtractTOPfiltertype = lens _subtractTOPfiltertype (\a b -> a {_subtractTOPfiltertype = b})
subtractTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
subtractTOPinputfiltertype = lens _subtractTOPinputfiltertype (\a b -> a {_subtractTOPinputfiltertype = b})
subtractTOPresmult :: Lens' TOP (Maybe (Tree Bool))
subtractTOPresmult = lens _subtractTOPresmult (\a b -> a {_subtractTOPresmult = b})
subtractTOPpunit :: Lens' TOP (Maybe (Tree Int))
subtractTOPpunit = lens _subtractTOPpunit (\a b -> a {_subtractTOPpunit = b})
subtractTOPs :: Lens' TOP (Vec2)
subtractTOPs = lens _subtractTOPs (\a b -> a {_subtractTOPs = b})
subtractTOPresmenu :: Lens' TOP (Maybe (Tree Int))
subtractTOPresmenu = lens _subtractTOPresmenu (\a b -> a {_subtractTOPresmenu = b})
subtractTOPp :: Lens' TOP (Vec2)
subtractTOPp = lens _subtractTOPp (\a b -> a {_subtractTOPp = b})
subtractTOPsize :: Lens' TOP (Maybe (Tree Int))
subtractTOPsize = lens _subtractTOPsize (\a b -> a {_subtractTOPsize = b})
subtractTOPnpasses :: Lens' TOP (Maybe (Tree Int))
subtractTOPnpasses = lens _subtractTOPnpasses (\a b -> a {_subtractTOPnpasses = b})
subtractTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
subtractTOPoutputaspect = lens _subtractTOPoutputaspect (\a b -> a {_subtractTOPoutputaspect = b})
subtractTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
subtractTOPresolutionh = lens _subtractTOPresolutionh (\a b -> a {_subtractTOPresolutionh = b})
subtractTOPtunit :: Lens' TOP (Maybe (Tree Int))
subtractTOPtunit = lens _subtractTOPtunit (\a b -> a {_subtractTOPtunit = b})
subtractTOPprefit :: Lens' TOP (Maybe (Tree Int))
subtractTOPprefit = lens _subtractTOPprefit (\a b -> a {_subtractTOPprefit = b})
subtractTOPr :: Lens' TOP (Maybe (Tree Float))
subtractTOPr = lens _subtractTOPr (\a b -> a {_subtractTOPr = b})
subtractTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
subtractTOPaspect1 = lens _subtractTOPaspect1 (\a b -> a {_subtractTOPaspect1 = b})
subtractTOPjustifyh :: Lens' TOP (Maybe (Tree Int))
subtractTOPjustifyh = lens _subtractTOPjustifyh (\a b -> a {_subtractTOPjustifyh = b})
subtractTOPt :: Lens' TOP (Vec2)
subtractTOPt = lens _subtractTOPt (\a b -> a {_subtractTOPt = b})
subtractTOPjustifyv :: Lens' TOP (Maybe (Tree Int))
subtractTOPjustifyv = lens _subtractTOPjustifyv (\a b -> a {_subtractTOPjustifyv = b})

projectionTOPresmult :: Lens' TOP (Maybe (Tree Bool))
projectionTOPresmult = lens _projectionTOPresmult (\a b -> a {_projectionTOPresmult = b})
projectionTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
projectionTOPaspect2 = lens _projectionTOPaspect2 (\a b -> a {_projectionTOPaspect2 = b})
projectionTOPfov :: Lens' TOP (Maybe (Tree Float))
projectionTOPfov = lens _projectionTOPfov (\a b -> a {_projectionTOPfov = b})
projectionTOPoutput :: Lens' TOP (Maybe (Tree Int))
projectionTOPoutput = lens _projectionTOPoutput (\a b -> a {_projectionTOPoutput = b})
projectionTOPresmenu :: Lens' TOP (Maybe (Tree Int))
projectionTOPresmenu = lens _projectionTOPresmenu (\a b -> a {_projectionTOPresmenu = b})
projectionTOPnpasses :: Lens' TOP (Maybe (Tree Int))
projectionTOPnpasses = lens _projectionTOPnpasses (\a b -> a {_projectionTOPnpasses = b})
projectionTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
projectionTOPinputfiltertype = lens _projectionTOPinputfiltertype (\a b -> a {_projectionTOPinputfiltertype = b})
projectionTOPchanmask :: Lens' TOP (Maybe (Tree Int))
projectionTOPchanmask = lens _projectionTOPchanmask (\a b -> a {_projectionTOPchanmask = b})
projectionTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
projectionTOPoutputresolution = lens _projectionTOPoutputresolution (\a b -> a {_projectionTOPoutputresolution = b})
projectionTOPfillmode :: Lens' TOP (Maybe (Tree Int))
projectionTOPfillmode = lens _projectionTOPfillmode (\a b -> a {_projectionTOPfillmode = b})
projectionTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
projectionTOPresolutionh = lens _projectionTOPresolutionh (\a b -> a {_projectionTOPresolutionh = b})
projectionTOParmenu :: Lens' TOP (Maybe (Tree Int))
projectionTOParmenu = lens _projectionTOParmenu (\a b -> a {_projectionTOParmenu = b})
projectionTOPr :: Lens' TOP (Vec3)
projectionTOPr = lens _projectionTOPr (\a b -> a {_projectionTOPr = b})
projectionTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
projectionTOPaspect1 = lens _projectionTOPaspect1 (\a b -> a {_projectionTOPaspect1 = b})
projectionTOPformat :: Lens' TOP (Maybe (Tree Int))
projectionTOPformat = lens _projectionTOPformat (\a b -> a {_projectionTOPformat = b})
projectionTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
projectionTOPresolutionw = lens _projectionTOPresolutionw (\a b -> a {_projectionTOPresolutionw = b})
projectionTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
projectionTOPoutputaspect = lens _projectionTOPoutputaspect (\a b -> a {_projectionTOPoutputaspect = b})
projectionTOPinput :: Lens' TOP (Maybe (Tree Int))
projectionTOPinput = lens _projectionTOPinput (\a b -> a {_projectionTOPinput = b})
projectionTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
projectionTOPfiltertype = lens _projectionTOPfiltertype (\a b -> a {_projectionTOPfiltertype = b})

texture3dTOPresetpulse :: Lens' TOP (Maybe (Tree Bool))
texture3dTOPresetpulse = lens _texture3dTOPresetpulse (\a b -> a {_texture3dTOPresetpulse = b})
texture3dTOPreplaceindex :: Lens' TOP (Maybe (Tree Int))
texture3dTOPreplaceindex = lens _texture3dTOPreplaceindex (\a b -> a {_texture3dTOPreplaceindex = b})
texture3dTOPformat :: Lens' TOP (Maybe (Tree Int))
texture3dTOPformat = lens _texture3dTOPformat (\a b -> a {_texture3dTOPformat = b})
texture3dTOPactive :: Lens' TOP (Maybe (Tree Bool))
texture3dTOPactive = lens _texture3dTOPactive (\a b -> a {_texture3dTOPactive = b})
texture3dTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
texture3dTOPinputfiltertype = lens _texture3dTOPinputfiltertype (\a b -> a {_texture3dTOPinputfiltertype = b})
texture3dTOPreplacesingle :: Lens' TOP (Maybe (Tree Bool))
texture3dTOPreplacesingle = lens _texture3dTOPreplacesingle (\a b -> a {_texture3dTOPreplacesingle = b})
texture3dTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
texture3dTOPoutputresolution = lens _texture3dTOPoutputresolution (\a b -> a {_texture3dTOPoutputresolution = b})
texture3dTOPprefill :: Lens' TOP (Maybe (Tree Bool))
texture3dTOPprefill = lens _texture3dTOPprefill (\a b -> a {_texture3dTOPprefill = b})
texture3dTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
texture3dTOPresolutionw = lens _texture3dTOPresolutionw (\a b -> a {_texture3dTOPresolutionw = b})
texture3dTOParmenu :: Lens' TOP (Maybe (Tree Int))
texture3dTOParmenu = lens _texture3dTOParmenu (\a b -> a {_texture3dTOParmenu = b})
texture3dTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
texture3dTOPfiltertype = lens _texture3dTOPfiltertype (\a b -> a {_texture3dTOPfiltertype = b})
texture3dTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
texture3dTOPaspect2 = lens _texture3dTOPaspect2 (\a b -> a {_texture3dTOPaspect2 = b})
texture3dTOPstep :: Lens' TOP (Maybe (Tree Int))
texture3dTOPstep = lens _texture3dTOPstep (\a b -> a {_texture3dTOPstep = b})
texture3dTOPprefillpulse :: Lens' TOP (Maybe (Tree Bool))
texture3dTOPprefillpulse = lens _texture3dTOPprefillpulse (\a b -> a {_texture3dTOPprefillpulse = b})
texture3dTOPresmult :: Lens' TOP (Maybe (Tree Bool))
texture3dTOPresmult = lens _texture3dTOPresmult (\a b -> a {_texture3dTOPresmult = b})
texture3dTOPtype :: Lens' TOP (Maybe (Tree Int))
texture3dTOPtype = lens _texture3dTOPtype (\a b -> a {_texture3dTOPtype = b})
texture3dTOPresmenu :: Lens' TOP (Maybe (Tree Int))
texture3dTOPresmenu = lens _texture3dTOPresmenu (\a b -> a {_texture3dTOPresmenu = b})
texture3dTOPcachesize :: Lens' TOP (Maybe (Tree Int))
texture3dTOPcachesize = lens _texture3dTOPcachesize (\a b -> a {_texture3dTOPcachesize = b})
texture3dTOPchanmask :: Lens' TOP (Maybe (Tree Int))
texture3dTOPchanmask = lens _texture3dTOPchanmask (\a b -> a {_texture3dTOPchanmask = b})
texture3dTOPfillmode :: Lens' TOP (Maybe (Tree Int))
texture3dTOPfillmode = lens _texture3dTOPfillmode (\a b -> a {_texture3dTOPfillmode = b})
texture3dTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
texture3dTOPresolutionh = lens _texture3dTOPresolutionh (\a b -> a {_texture3dTOPresolutionh = b})
texture3dTOPnpasses :: Lens' TOP (Maybe (Tree Int))
texture3dTOPnpasses = lens _texture3dTOPnpasses (\a b -> a {_texture3dTOPnpasses = b})
texture3dTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
texture3dTOPaspect1 = lens _texture3dTOPaspect1 (\a b -> a {_texture3dTOPaspect1 = b})
texture3dTOPresetsinglepulse :: Lens' TOP (Maybe (Tree Bool))
texture3dTOPresetsinglepulse = lens _texture3dTOPresetsinglepulse (\a b -> a {_texture3dTOPresetsinglepulse = b})
texture3dTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
texture3dTOPoutputaspect = lens _texture3dTOPoutputaspect (\a b -> a {_texture3dTOPoutputaspect = b})
texture3dTOPreset :: Lens' TOP (Maybe (Tree Bool))
texture3dTOPreset = lens _texture3dTOPreset (\a b -> a {_texture3dTOPreset = b})

packTOPresmult :: Lens' TOP (Maybe (Tree Bool))
packTOPresmult = lens _packTOPresmult (\a b -> a {_packTOPresmult = b})
packTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
packTOPaspect2 = lens _packTOPaspect2 (\a b -> a {_packTOPaspect2 = b})
packTOPformat :: Lens' TOP (Maybe (Tree Int))
packTOPformat = lens _packTOPformat (\a b -> a {_packTOPformat = b})
packTOPresmenu :: Lens' TOP (Maybe (Tree Int))
packTOPresmenu = lens _packTOPresmenu (\a b -> a {_packTOPresmenu = b})
packTOPnpasses :: Lens' TOP (Maybe (Tree Int))
packTOPnpasses = lens _packTOPnpasses (\a b -> a {_packTOPnpasses = b})
packTOPfillmode :: Lens' TOP (Maybe (Tree Int))
packTOPfillmode = lens _packTOPfillmode (\a b -> a {_packTOPfillmode = b})
packTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
packTOPinputfiltertype = lens _packTOPinputfiltertype (\a b -> a {_packTOPinputfiltertype = b})
packTOPchanmask :: Lens' TOP (Maybe (Tree Int))
packTOPchanmask = lens _packTOPchanmask (\a b -> a {_packTOPchanmask = b})
packTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
packTOPoutputresolution = lens _packTOPoutputresolution (\a b -> a {_packTOPoutputresolution = b})
packTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
packTOPresolutionh = lens _packTOPresolutionh (\a b -> a {_packTOPresolutionh = b})
packTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
packTOPresolutionw = lens _packTOPresolutionw (\a b -> a {_packTOPresolutionw = b})
packTOParmenu :: Lens' TOP (Maybe (Tree Int))
packTOParmenu = lens _packTOParmenu (\a b -> a {_packTOParmenu = b})
packTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
packTOPfiltertype = lens _packTOPfiltertype (\a b -> a {_packTOPfiltertype = b})
packTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
packTOPaspect1 = lens _packTOPaspect1 (\a b -> a {_packTOPaspect1 = b})
packTOPpacktype :: Lens' TOP (Maybe (Tree Int))
packTOPpacktype = lens _packTOPpacktype (\a b -> a {_packTOPpacktype = b})
packTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
packTOPoutputaspect = lens _packTOPoutputaspect (\a b -> a {_packTOPoutputaspect = b})

moviefileinTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
moviefileinTOPaspect2 = lens _moviefileinTOPaspect2 (\a b -> a {_moviefileinTOPaspect2 = b})
moviefileinTOPformat :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPformat = lens _moviefileinTOPformat (\a b -> a {_moviefileinTOPformat = b})
moviefileinTOPhighperfread :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPhighperfread = lens _moviefileinTOPhighperfread (\a b -> a {_moviefileinTOPhighperfread = b})
moviefileinTOPcuepulse :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPcuepulse = lens _moviefileinTOPcuepulse (\a b -> a {_moviefileinTOPcuepulse = b})
moviefileinTOPbottomhalfalpha :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPbottomhalfalpha = lens _moviefileinTOPbottomhalfalpha (\a b -> a {_moviefileinTOPbottomhalfalpha = b})
moviefileinTOPfillmode :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPfillmode = lens _moviefileinTOPfillmode (\a b -> a {_moviefileinTOPfillmode = b})
moviefileinTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPresolutionw = lens _moviefileinTOPresolutionw (\a b -> a {_moviefileinTOPresolutionw = b})
moviefileinTOPtrim :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPtrim = lens _moviefileinTOPtrim (\a b -> a {_moviefileinTOPtrim = b})
moviefileinTOParmenu :: Lens' TOP (Maybe (Tree Int))
moviefileinTOParmenu = lens _moviefileinTOParmenu (\a b -> a {_moviefileinTOParmenu = b})
moviefileinTOPdeinterlace :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPdeinterlace = lens _moviefileinTOPdeinterlace (\a b -> a {_moviefileinTOPdeinterlace = b})
moviefileinTOPprecedence :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPprecedence = lens _moviefileinTOPprecedence (\a b -> a {_moviefileinTOPprecedence = b})
moviefileinTOPasyncupload :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPasyncupload = lens _moviefileinTOPasyncupload (\a b -> a {_moviefileinTOPasyncupload = b})
moviefileinTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPresolutionh = lens _moviefileinTOPresolutionh (\a b -> a {_moviefileinTOPresolutionh = b})
moviefileinTOPtendunit :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPtendunit = lens _moviefileinTOPtendunit (\a b -> a {_moviefileinTOPtendunit = b})
moviefileinTOPloadingerrorimage :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPloadingerrorimage = lens _moviefileinTOPloadingerrorimage (\a b -> a {_moviefileinTOPloadingerrorimage = b})
moviefileinTOPindex :: Lens' TOP (Maybe (Tree Float))
moviefileinTOPindex = lens _moviefileinTOPindex (\a b -> a {_moviefileinTOPindex = b})
moviefileinTOPaudioloop :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPaudioloop = lens _moviefileinTOPaudioloop (\a b -> a {_moviefileinTOPaudioloop = b})
moviefileinTOPplaymode :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPplaymode = lens _moviefileinTOPplaymode (\a b -> a {_moviefileinTOPplaymode = b})
moviefileinTOPresmenu :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPresmenu = lens _moviefileinTOPresmenu (\a b -> a {_moviefileinTOPresmenu = b})
moviefileinTOPtstartunit :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPtstartunit = lens _moviefileinTOPtstartunit (\a b -> a {_moviefileinTOPtstartunit = b})
moviefileinTOPspeed :: Lens' TOP (Maybe (Tree Float))
moviefileinTOPspeed = lens _moviefileinTOPspeed (\a b -> a {_moviefileinTOPspeed = b})
moviefileinTOPimageindexing :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPimageindexing = lens _moviefileinTOPimageindexing (\a b -> a {_moviefileinTOPimageindexing = b})
moviefileinTOPplay :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPplay = lens _moviefileinTOPplay (\a b -> a {_moviefileinTOPplay = b})
moviefileinTOPnpasses :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPnpasses = lens _moviefileinTOPnpasses (\a b -> a {_moviefileinTOPnpasses = b})
moviefileinTOPloopcrossfadeunit :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPloopcrossfadeunit = lens _moviefileinTOPloopcrossfadeunit (\a b -> a {_moviefileinTOPloopcrossfadeunit = b})
moviefileinTOPstepsize :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPstepsize = lens _moviefileinTOPstepsize (\a b -> a {_moviefileinTOPstepsize = b})
moviefileinTOPcuepointunit :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPcuepointunit = lens _moviefileinTOPcuepointunit (\a b -> a {_moviefileinTOPcuepointunit = b})
moviefileinTOPopentimeout :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPopentimeout = lens _moviefileinTOPopentimeout (\a b -> a {_moviefileinTOPopentimeout = b})
moviefileinTOPreload :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPreload = lens _moviefileinTOPreload (\a b -> a {_moviefileinTOPreload = b})
moviefileinTOPsamplerate :: Lens' TOP (Maybe (Tree Float))
moviefileinTOPsamplerate = lens _moviefileinTOPsamplerate (\a b -> a {_moviefileinTOPsamplerate = b})
moviefileinTOPinterp :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPinterp = lens _moviefileinTOPinterp (\a b -> a {_moviefileinTOPinterp = b})
moviefileinTOPfile :: Lens' TOP (Maybe (Tree ByteString))
moviefileinTOPfile = lens _moviefileinTOPfile (\a b -> a {_moviefileinTOPfile = b})
moviefileinTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPoutputresolution = lens _moviefileinTOPoutputresolution (\a b -> a {_moviefileinTOPoutputresolution = b})
moviefileinTOPcuepoint :: Lens' TOP (Maybe (Tree Float))
moviefileinTOPcuepoint = lens _moviefileinTOPcuepoint (\a b -> a {_moviefileinTOPcuepoint = b})
moviefileinTOPprereadframes :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPprereadframes = lens _moviefileinTOPprereadframes (\a b -> a {_moviefileinTOPprereadframes = b})
moviefileinTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
moviefileinTOPaspect1 = lens _moviefileinTOPaspect1 (\a b -> a {_moviefileinTOPaspect1 = b})
moviefileinTOPupdateimage :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPupdateimage = lens _moviefileinTOPupdateimage (\a b -> a {_moviefileinTOPupdateimage = b})
moviefileinTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPfiltertype = lens _moviefileinTOPfiltertype (\a b -> a {_moviefileinTOPfiltertype = b})
moviefileinTOPhighperfreadfactor :: Lens' TOP (Maybe (Tree Float))
moviefileinTOPhighperfreadfactor = lens _moviefileinTOPhighperfreadfactor (\a b -> a {_moviefileinTOPhighperfreadfactor = b})
moviefileinTOPtend :: Lens' TOP (Maybe (Tree Float))
moviefileinTOPtend = lens _moviefileinTOPtend (\a b -> a {_moviefileinTOPtend = b})
moviefileinTOPcuebehavior :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPcuebehavior = lens _moviefileinTOPcuebehavior (\a b -> a {_moviefileinTOPcuebehavior = b})
moviefileinTOPinputsrgb :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPinputsrgb = lens _moviefileinTOPinputsrgb (\a b -> a {_moviefileinTOPinputsrgb = b})
moviefileinTOPtextendright :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPtextendright = lens _moviefileinTOPtextendright (\a b -> a {_moviefileinTOPtextendright = b})
moviefileinTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPinputfiltertype = lens _moviefileinTOPinputfiltertype (\a b -> a {_moviefileinTOPinputfiltertype = b})
moviefileinTOPtstart :: Lens' TOP (Maybe (Tree Float))
moviefileinTOPtstart = lens _moviefileinTOPtstart (\a b -> a {_moviefileinTOPtstart = b})
moviefileinTOPresmult :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPresmult = lens _moviefileinTOPresmult (\a b -> a {_moviefileinTOPresmult = b})
moviefileinTOPframetimeoutstrat :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPframetimeoutstrat = lens _moviefileinTOPframetimeoutstrat (\a b -> a {_moviefileinTOPframetimeoutstrat = b})
moviefileinTOPreloadpulse :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPreloadpulse = lens _moviefileinTOPreloadpulse (\a b -> a {_moviefileinTOPreloadpulse = b})
moviefileinTOPindexunit :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPindexunit = lens _moviefileinTOPindexunit (\a b -> a {_moviefileinTOPindexunit = b})
moviefileinTOPloopcrossfade :: Lens' TOP (Maybe (Tree Float))
moviefileinTOPloopcrossfade = lens _moviefileinTOPloopcrossfade (\a b -> a {_moviefileinTOPloopcrossfade = b})
moviefileinTOPoverridesample :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPoverridesample = lens _moviefileinTOPoverridesample (\a b -> a {_moviefileinTOPoverridesample = b})
moviefileinTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPoutputaspect = lens _moviefileinTOPoutputaspect (\a b -> a {_moviefileinTOPoutputaspect = b})
moviefileinTOPmultalpha :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPmultalpha = lens _moviefileinTOPmultalpha (\a b -> a {_moviefileinTOPmultalpha = b})
moviefileinTOPtextendleft :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPtextendleft = lens _moviefileinTOPtextendleft (\a b -> a {_moviefileinTOPtextendleft = b})
moviefileinTOPchanmask :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPchanmask = lens _moviefileinTOPchanmask (\a b -> a {_moviefileinTOPchanmask = b})
moviefileinTOPframetimeout :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPframetimeout = lens _moviefileinTOPframetimeout (\a b -> a {_moviefileinTOPframetimeout = b})
moviefileinTOPcue :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPcue = lens _moviefileinTOPcue (\a b -> a {_moviefileinTOPcue = b})
moviefileinTOPmaxdecodecpus :: Lens' TOP (Maybe (Tree Int))
moviefileinTOPmaxdecodecpus = lens _moviefileinTOPmaxdecodecpus (\a b -> a {_moviefileinTOPmaxdecodecpus = b})
moviefileinTOPalwaysloadinitial :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPalwaysloadinitial = lens _moviefileinTOPalwaysloadinitial (\a b -> a {_moviefileinTOPalwaysloadinitial = b})
moviefileinTOPusecpucache :: Lens' TOP (Maybe (Tree Bool))
moviefileinTOPusecpucache = lens _moviefileinTOPusecpucache (\a b -> a {_moviefileinTOPusecpucache = b})

selectTOPresmult :: Lens' TOP (Maybe (Tree Bool))
selectTOPresmult = lens _selectTOPresmult (\a b -> a {_selectTOPresmult = b})
selectTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
selectTOPaspect2 = lens _selectTOPaspect2 (\a b -> a {_selectTOPaspect2 = b})
selectTOPformat :: Lens' TOP (Maybe (Tree Int))
selectTOPformat = lens _selectTOPformat (\a b -> a {_selectTOPformat = b})
selectTOPresmenu :: Lens' TOP (Maybe (Tree Int))
selectTOPresmenu = lens _selectTOPresmenu (\a b -> a {_selectTOPresmenu = b})
selectTOPnpasses :: Lens' TOP (Maybe (Tree Int))
selectTOPnpasses = lens _selectTOPnpasses (\a b -> a {_selectTOPnpasses = b})
selectTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
selectTOPinputfiltertype = lens _selectTOPinputfiltertype (\a b -> a {_selectTOPinputfiltertype = b})
selectTOPchanmask :: Lens' TOP (Maybe (Tree Int))
selectTOPchanmask = lens _selectTOPchanmask (\a b -> a {_selectTOPchanmask = b})
selectTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
selectTOPoutputresolution = lens _selectTOPoutputresolution (\a b -> a {_selectTOPoutputresolution = b})
selectTOPfillmode :: Lens' TOP (Maybe (Tree Int))
selectTOPfillmode = lens _selectTOPfillmode (\a b -> a {_selectTOPfillmode = b})
selectTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
selectTOPresolutionw = lens _selectTOPresolutionw (\a b -> a {_selectTOPresolutionw = b})
selectTOParmenu :: Lens' TOP (Maybe (Tree Int))
selectTOParmenu = lens _selectTOParmenu (\a b -> a {_selectTOParmenu = b})
selectTOPtop :: Lens' TOP (Maybe (Tree TOP))
selectTOPtop = lens _selectTOPtop (\a b -> a {_selectTOPtop = b})
selectTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
selectTOPfiltertype = lens _selectTOPfiltertype (\a b -> a {_selectTOPfiltertype = b})
selectTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
selectTOPaspect1 = lens _selectTOPaspect1 (\a b -> a {_selectTOPaspect1 = b})
selectTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
selectTOPresolutionh = lens _selectTOPresolutionh (\a b -> a {_selectTOPresolutionh = b})
selectTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
selectTOPoutputaspect = lens _selectTOPoutputaspect (\a b -> a {_selectTOPoutputaspect = b})

feedbackTOPresetpulse :: Lens' TOP (Maybe (Tree Bool))
feedbackTOPresetpulse = lens _feedbackTOPresetpulse (\a b -> a {_feedbackTOPresetpulse = b})
feedbackTOPresmult :: Lens' TOP (Maybe (Tree Bool))
feedbackTOPresmult = lens _feedbackTOPresmult (\a b -> a {_feedbackTOPresmult = b})
feedbackTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
feedbackTOPaspect2 = lens _feedbackTOPaspect2 (\a b -> a {_feedbackTOPaspect2 = b})
feedbackTOPformat :: Lens' TOP (Maybe (Tree Int))
feedbackTOPformat = lens _feedbackTOPformat (\a b -> a {_feedbackTOPformat = b})
feedbackTOPresmenu :: Lens' TOP (Maybe (Tree Int))
feedbackTOPresmenu = lens _feedbackTOPresmenu (\a b -> a {_feedbackTOPresmenu = b})
feedbackTOPnpasses :: Lens' TOP (Maybe (Tree Int))
feedbackTOPnpasses = lens _feedbackTOPnpasses (\a b -> a {_feedbackTOPnpasses = b})
feedbackTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
feedbackTOPinputfiltertype = lens _feedbackTOPinputfiltertype (\a b -> a {_feedbackTOPinputfiltertype = b})
feedbackTOPchanmask :: Lens' TOP (Maybe (Tree Int))
feedbackTOPchanmask = lens _feedbackTOPchanmask (\a b -> a {_feedbackTOPchanmask = b})
feedbackTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
feedbackTOPoutputresolution = lens _feedbackTOPoutputresolution (\a b -> a {_feedbackTOPoutputresolution = b})
feedbackTOPfillmode :: Lens' TOP (Maybe (Tree Int))
feedbackTOPfillmode = lens _feedbackTOPfillmode (\a b -> a {_feedbackTOPfillmode = b})
feedbackTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
feedbackTOPresolutionh = lens _feedbackTOPresolutionh (\a b -> a {_feedbackTOPresolutionh = b})
feedbackTOParmenu :: Lens' TOP (Maybe (Tree Int))
feedbackTOParmenu = lens _feedbackTOParmenu (\a b -> a {_feedbackTOParmenu = b})
feedbackTOPtop :: Lens' TOP (Maybe (Tree TOP))
feedbackTOPtop = lens _feedbackTOPtop (\a b -> a {_feedbackTOPtop = b})
feedbackTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
feedbackTOPfiltertype = lens _feedbackTOPfiltertype (\a b -> a {_feedbackTOPfiltertype = b})
feedbackTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
feedbackTOPaspect1 = lens _feedbackTOPaspect1 (\a b -> a {_feedbackTOPaspect1 = b})
feedbackTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
feedbackTOPresolutionw = lens _feedbackTOPresolutionw (\a b -> a {_feedbackTOPresolutionw = b})
feedbackTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
feedbackTOPoutputaspect = lens _feedbackTOPoutputaspect (\a b -> a {_feedbackTOPoutputaspect = b})
feedbackTOPreset :: Lens' TOP (Maybe (Tree Bool))
feedbackTOPreset = lens _feedbackTOPreset (\a b -> a {_feedbackTOPreset = b})

rampTOPinterp :: Lens' TOP (Maybe (Tree Int))
rampTOPinterp = lens _rampTOPinterp (\a b -> a {_rampTOPinterp = b})
rampTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
rampTOPaspect2 = lens _rampTOPaspect2 (\a b -> a {_rampTOPaspect2 = b})
rampTOPformat :: Lens' TOP (Maybe (Tree Int))
rampTOPformat = lens _rampTOPformat (\a b -> a {_rampTOPformat = b})
rampTOPcolor4 :: Lens' TOP (Maybe (Tree Float))
rampTOPcolor4 = lens _rampTOPcolor4 (\a b -> a {_rampTOPcolor4 = b})
rampTOPcolor1 :: Lens' TOP (Maybe (Tree Float))
rampTOPcolor1 = lens _rampTOPcolor1 (\a b -> a {_rampTOPcolor1 = b})
rampTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
rampTOPinputfiltertype = lens _rampTOPinputfiltertype (\a b -> a {_rampTOPinputfiltertype = b})
rampTOPchanmask :: Lens' TOP (Maybe (Tree Int))
rampTOPchanmask = lens _rampTOPchanmask (\a b -> a {_rampTOPchanmask = b})
rampTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
rampTOPoutputresolution = lens _rampTOPoutputresolution (\a b -> a {_rampTOPoutputresolution = b})
rampTOPresmult :: Lens' TOP (Maybe (Tree Bool))
rampTOPresmult = lens _rampTOPresmult (\a b -> a {_rampTOPresmult = b})
rampTOPantialias :: Lens' TOP (Maybe (Tree Int))
rampTOPantialias = lens _rampTOPantialias (\a b -> a {_rampTOPantialias = b})
rampTOParmenu :: Lens' TOP (Maybe (Tree Int))
rampTOParmenu = lens _rampTOParmenu (\a b -> a {_rampTOParmenu = b})
rampTOPphase :: Lens' TOP (Maybe (Tree Float))
rampTOPphase = lens _rampTOPphase (\a b -> a {_rampTOPphase = b})
rampTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
rampTOPfiltertype = lens _rampTOPfiltertype (\a b -> a {_rampTOPfiltertype = b})
rampTOPposition2 :: Lens' TOP (Maybe (Tree Float))
rampTOPposition2 = lens _rampTOPposition2 (\a b -> a {_rampTOPposition2 = b})
rampTOPcolor3 :: Lens' TOP (Maybe (Tree Float))
rampTOPcolor3 = lens _rampTOPcolor3 (\a b -> a {_rampTOPcolor3 = b})
rampTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
rampTOPresolutionw = lens _rampTOPresolutionw (\a b -> a {_rampTOPresolutionw = b})
rampTOPposition1 :: Lens' TOP (Maybe (Tree Float))
rampTOPposition1 = lens _rampTOPposition1 (\a b -> a {_rampTOPposition1 = b})
rampTOPextendleft :: Lens' TOP (Maybe (Tree Int))
rampTOPextendleft = lens _rampTOPextendleft (\a b -> a {_rampTOPextendleft = b})
rampTOPtension :: Lens' TOP (Maybe (Tree Float))
rampTOPtension = lens _rampTOPtension (\a b -> a {_rampTOPtension = b})
rampTOPtype :: Lens' TOP (Maybe (Tree Int))
rampTOPtype = lens _rampTOPtype (\a b -> a {_rampTOPtype = b})
rampTOPresmenu :: Lens' TOP (Maybe (Tree Int))
rampTOPresmenu = lens _rampTOPresmenu (\a b -> a {_rampTOPresmenu = b})
rampTOPmultrgbbyalpha :: Lens' TOP (Maybe (Tree Bool))
rampTOPmultrgbbyalpha = lens _rampTOPmultrgbbyalpha (\a b -> a {_rampTOPmultrgbbyalpha = b})
rampTOPperiod :: Lens' TOP (Maybe (Tree Float))
rampTOPperiod = lens _rampTOPperiod (\a b -> a {_rampTOPperiod = b})
rampTOPextendright :: Lens' TOP (Maybe (Tree Int))
rampTOPextendright = lens _rampTOPextendright (\a b -> a {_rampTOPextendright = b})
rampTOPfillmode :: Lens' TOP (Maybe (Tree Int))
rampTOPfillmode = lens _rampTOPfillmode (\a b -> a {_rampTOPfillmode = b})
rampTOPdither :: Lens' TOP (Maybe (Tree Bool))
rampTOPdither = lens _rampTOPdither (\a b -> a {_rampTOPdither = b})
rampTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
rampTOPresolutionh = lens _rampTOPresolutionh (\a b -> a {_rampTOPresolutionh = b})
rampTOPfitaspect :: Lens' TOP (Maybe (Tree Int))
rampTOPfitaspect = lens _rampTOPfitaspect (\a b -> a {_rampTOPfitaspect = b})
rampTOPnpasses :: Lens' TOP (Maybe (Tree Int))
rampTOPnpasses = lens _rampTOPnpasses (\a b -> a {_rampTOPnpasses = b})
rampTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
rampTOPaspect1 = lens _rampTOPaspect1 (\a b -> a {_rampTOPaspect1 = b})
rampTOPcolor2 :: Lens' TOP (Maybe (Tree Float))
rampTOPcolor2 = lens _rampTOPcolor2 (\a b -> a {_rampTOPcolor2 = b})
rampTOPdat :: Lens' TOP (Maybe (Tree DAT))
rampTOPdat = lens _rampTOPdat (\a b -> a {_rampTOPdat = b})
rampTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
rampTOPoutputaspect = lens _rampTOPoutputaspect (\a b -> a {_rampTOPoutputaspect = b})

analyzeTOPresmult :: Lens' TOP (Maybe (Tree Bool))
analyzeTOPresmult = lens _analyzeTOPresmult (\a b -> a {_analyzeTOPresmult = b})
analyzeTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
analyzeTOPaspect2 = lens _analyzeTOPaspect2 (\a b -> a {_analyzeTOPaspect2 = b})
analyzeTOPformat :: Lens' TOP (Maybe (Tree Int))
analyzeTOPformat = lens _analyzeTOPformat (\a b -> a {_analyzeTOPformat = b})
analyzeTOPresmenu :: Lens' TOP (Maybe (Tree Int))
analyzeTOPresmenu = lens _analyzeTOPresmenu (\a b -> a {_analyzeTOPresmenu = b})
analyzeTOPnpasses :: Lens' TOP (Maybe (Tree Int))
analyzeTOPnpasses = lens _analyzeTOPnpasses (\a b -> a {_analyzeTOPnpasses = b})
analyzeTOPfillmode :: Lens' TOP (Maybe (Tree Int))
analyzeTOPfillmode = lens _analyzeTOPfillmode (\a b -> a {_analyzeTOPfillmode = b})
analyzeTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
analyzeTOPinputfiltertype = lens _analyzeTOPinputfiltertype (\a b -> a {_analyzeTOPinputfiltertype = b})
analyzeTOPchanmask :: Lens' TOP (Maybe (Tree Int))
analyzeTOPchanmask = lens _analyzeTOPchanmask (\a b -> a {_analyzeTOPchanmask = b})
analyzeTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
analyzeTOPoutputresolution = lens _analyzeTOPoutputresolution (\a b -> a {_analyzeTOPoutputresolution = b})
analyzeTOPscope :: Lens' TOP (Maybe (Tree Int))
analyzeTOPscope = lens _analyzeTOPscope (\a b -> a {_analyzeTOPscope = b})
analyzeTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
analyzeTOPresolutionh = lens _analyzeTOPresolutionh (\a b -> a {_analyzeTOPresolutionh = b})
analyzeTOPselect :: Lens' TOP (Maybe (Tree Int))
analyzeTOPselect = lens _analyzeTOPselect (\a b -> a {_analyzeTOPselect = b})
analyzeTOParmenu :: Lens' TOP (Maybe (Tree Int))
analyzeTOParmenu = lens _analyzeTOParmenu (\a b -> a {_analyzeTOParmenu = b})
analyzeTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
analyzeTOPfiltertype = lens _analyzeTOPfiltertype (\a b -> a {_analyzeTOPfiltertype = b})
analyzeTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
analyzeTOPaspect1 = lens _analyzeTOPaspect1 (\a b -> a {_analyzeTOPaspect1 = b})
analyzeTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
analyzeTOPresolutionw = lens _analyzeTOPresolutionw (\a b -> a {_analyzeTOPresolutionw = b})
analyzeTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
analyzeTOPoutputaspect = lens _analyzeTOPoutputaspect (\a b -> a {_analyzeTOPoutputaspect = b})
analyzeTOPop :: Lens' TOP (Maybe (Tree Int))
analyzeTOPop = lens _analyzeTOPop (\a b -> a {_analyzeTOPop = b})

addTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
addTOPaspect2 = lens _addTOPaspect2 (\a b -> a {_addTOPaspect2 = b})
addTOPformat :: Lens' TOP (Maybe (Tree Int))
addTOPformat = lens _addTOPformat (\a b -> a {_addTOPformat = b})
addTOPextend :: Lens' TOP (Maybe (Tree Int))
addTOPextend = lens _addTOPextend (\a b -> a {_addTOPextend = b})
addTOPchanmask :: Lens' TOP (Maybe (Tree Int))
addTOPchanmask = lens _addTOPchanmask (\a b -> a {_addTOPchanmask = b})
addTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
addTOPoutputresolution = lens _addTOPoutputresolution (\a b -> a {_addTOPoutputresolution = b})
addTOPfillmode :: Lens' TOP (Maybe (Tree Int))
addTOPfillmode = lens _addTOPfillmode (\a b -> a {_addTOPfillmode = b})
addTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
addTOPresolutionw = lens _addTOPresolutionw (\a b -> a {_addTOPresolutionw = b})
addTOParmenu :: Lens' TOP (Maybe (Tree Int))
addTOParmenu = lens _addTOParmenu (\a b -> a {_addTOParmenu = b})
addTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
addTOPfiltertype = lens _addTOPfiltertype (\a b -> a {_addTOPfiltertype = b})
addTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
addTOPinputfiltertype = lens _addTOPinputfiltertype (\a b -> a {_addTOPinputfiltertype = b})
addTOPresmult :: Lens' TOP (Maybe (Tree Bool))
addTOPresmult = lens _addTOPresmult (\a b -> a {_addTOPresmult = b})
addTOPpunit :: Lens' TOP (Maybe (Tree Int))
addTOPpunit = lens _addTOPpunit (\a b -> a {_addTOPpunit = b})
addTOPs :: Lens' TOP (Vec2)
addTOPs = lens _addTOPs (\a b -> a {_addTOPs = b})
addTOPresmenu :: Lens' TOP (Maybe (Tree Int))
addTOPresmenu = lens _addTOPresmenu (\a b -> a {_addTOPresmenu = b})
addTOPp :: Lens' TOP (Vec2)
addTOPp = lens _addTOPp (\a b -> a {_addTOPp = b})
addTOPsize :: Lens' TOP (Maybe (Tree Int))
addTOPsize = lens _addTOPsize (\a b -> a {_addTOPsize = b})
addTOPnpasses :: Lens' TOP (Maybe (Tree Int))
addTOPnpasses = lens _addTOPnpasses (\a b -> a {_addTOPnpasses = b})
addTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
addTOPoutputaspect = lens _addTOPoutputaspect (\a b -> a {_addTOPoutputaspect = b})
addTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
addTOPresolutionh = lens _addTOPresolutionh (\a b -> a {_addTOPresolutionh = b})
addTOPtunit :: Lens' TOP (Maybe (Tree Int))
addTOPtunit = lens _addTOPtunit (\a b -> a {_addTOPtunit = b})
addTOPprefit :: Lens' TOP (Maybe (Tree Int))
addTOPprefit = lens _addTOPprefit (\a b -> a {_addTOPprefit = b})
addTOPr :: Lens' TOP (Maybe (Tree Float))
addTOPr = lens _addTOPr (\a b -> a {_addTOPr = b})
addTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
addTOPaspect1 = lens _addTOPaspect1 (\a b -> a {_addTOPaspect1 = b})
addTOPjustifyh :: Lens' TOP (Maybe (Tree Int))
addTOPjustifyh = lens _addTOPjustifyh (\a b -> a {_addTOPjustifyh = b})
addTOPt :: Lens' TOP (Vec2)
addTOPt = lens _addTOPt (\a b -> a {_addTOPt = b})
addTOPjustifyv :: Lens' TOP (Maybe (Tree Int))
addTOPjustifyv = lens _addTOPjustifyv (\a b -> a {_addTOPjustifyv = b})

textTOPfontcolor :: Lens' TOP (Vec3)
textTOPfontcolor = lens _textTOPfontcolor (\a b -> a {_textTOPfontcolor = b})
textTOPleftborder :: Lens' TOP (Maybe (Tree Int))
textTOPleftborder = lens _textTOPleftborder (\a b -> a {_textTOPleftborder = b})
textTOPreadingdirection :: Lens' TOP (Maybe (Tree Int))
textTOPreadingdirection = lens _textTOPreadingdirection (\a b -> a {_textTOPreadingdirection = b})
textTOPdispmethod :: Lens' TOP (Maybe (Tree Int))
textTOPdispmethod = lens _textTOPdispmethod (\a b -> a {_textTOPdispmethod = b})
textTOPresmenu :: Lens' TOP (Maybe (Tree Int))
textTOPresmenu = lens _textTOPresmenu (\a b -> a {_textTOPresmenu = b})
textTOPtopborder :: Lens' TOP (Maybe (Tree Int))
textTOPtopborder = lens _textTOPtopborder (\a b -> a {_textTOPtopborder = b})
textTOPbordera :: Lens' TOP (Vec3)
textTOPbordera = lens _textTOPbordera (\a b -> a {_textTOPbordera = b})
textTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
textTOPinputfiltertype = lens _textTOPinputfiltertype (\a b -> a {_textTOPinputfiltertype = b})
textTOPaligny :: Lens' TOP (Maybe (Tree Int))
textTOPaligny = lens _textTOPaligny (\a b -> a {_textTOPaligny = b})
textTOPitalic :: Lens' TOP (Maybe (Tree Bool))
textTOPitalic = lens _textTOPitalic (\a b -> a {_textTOPitalic = b})
textTOPfillmode :: Lens' TOP (Maybe (Tree Int))
textTOPfillmode = lens _textTOPfillmode (\a b -> a {_textTOPfillmode = b})
textTOPrightborderi :: Lens' TOP (Maybe (Tree Int))
textTOPrightborderi = lens _textTOPrightborderi (\a b -> a {_textTOPrightborderi = b})
textTOPantialias :: Lens' TOP (Maybe (Tree ByteString))
textTOPantialias = lens _textTOPantialias (\a b -> a {_textTOPantialias = b})
textTOPfontalpha :: Lens' TOP (Maybe (Tree Float))
textTOPfontalpha = lens _textTOPfontalpha (\a b -> a {_textTOPfontalpha = b})
textTOPcharset :: Lens' TOP (Maybe (Tree Int))
textTOPcharset = lens _textTOPcharset (\a b -> a {_textTOPcharset = b})
textTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
textTOPfiltertype = lens _textTOPfiltertype (\a b -> a {_textTOPfiltertype = b})
textTOPfontsizeyunit :: Lens' TOP (Maybe (Tree Int))
textTOPfontsizeyunit = lens _textTOPfontsizeyunit (\a b -> a {_textTOPfontsizeyunit = b})
textTOPposition2 :: Lens' TOP (Maybe (Tree Float))
textTOPposition2 = lens _textTOPposition2 (\a b -> a {_textTOPposition2 = b})
textTOPbgcolor :: Lens' TOP (Vec3)
textTOPbgcolor = lens _textTOPbgcolor (\a b -> a {_textTOPbgcolor = b})
textTOPposttext :: Lens' TOP (Maybe (Tree ByteString))
textTOPposttext = lens _textTOPposttext (\a b -> a {_textTOPposttext = b})
textTOPfield :: Lens' TOP (Maybe (Tree COMP))
textTOPfield = lens _textTOPfield (\a b -> a {_textTOPfield = b})
textTOPposition1 :: Lens' TOP (Maybe (Tree Float))
textTOPposition1 = lens _textTOPposition1 (\a b -> a {_textTOPposition1 = b})
textTOPlegacyparsing :: Lens' TOP (Maybe (Tree Bool))
textTOPlegacyparsing = lens _textTOPlegacyparsing (\a b -> a {_textTOPlegacyparsing = b})
textTOParmenu :: Lens' TOP (Maybe (Tree Int))
textTOParmenu = lens _textTOParmenu (\a b -> a {_textTOParmenu = b})
textTOPlinespacing :: Lens' TOP (Maybe (Tree Float))
textTOPlinespacing = lens _textTOPlinespacing (\a b -> a {_textTOPlinespacing = b})
textTOPkeepfontratio :: Lens' TOP (Maybe (Tree Bool))
textTOPkeepfontratio = lens _textTOPkeepfontratio (\a b -> a {_textTOPkeepfontratio = b})
textTOPvaluetouse :: Lens' TOP (Maybe (Tree Float))
textTOPvaluetouse = lens _textTOPvaluetouse (\a b -> a {_textTOPvaluetouse = b})
textTOPborderspace1 :: Lens' TOP (Maybe (Tree Float))
textTOPborderspace1 = lens _textTOPborderspace1 (\a b -> a {_textTOPborderspace1 = b})
textTOProwindex :: Lens' TOP (Maybe (Tree Int))
textTOProwindex = lens _textTOProwindex (\a b -> a {_textTOProwindex = b})
textTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
textTOPresolutionh = lens _textTOPresolutionh (\a b -> a {_textTOPresolutionh = b})
textTOPcolindex :: Lens' TOP (Maybe (Tree Int))
textTOPcolindex = lens _textTOPcolindex (\a b -> a {_textTOPcolindex = b})
textTOPkerning1 :: Lens' TOP (Maybe (Tree Float))
textTOPkerning1 = lens _textTOPkerning1 (\a b -> a {_textTOPkerning1 = b})
textTOPnpasses :: Lens' TOP (Maybe (Tree Int))
textTOPnpasses = lens _textTOPnpasses (\a b -> a {_textTOPnpasses = b})
textTOPlanguage :: Lens' TOP (Maybe (Tree ByteString))
textTOPlanguage = lens _textTOPlanguage (\a b -> a {_textTOPlanguage = b})
textTOPcompoverinput :: Lens' TOP (Maybe (Tree Bool))
textTOPcompoverinput = lens _textTOPcompoverinput (\a b -> a {_textTOPcompoverinput = b})
textTOPwordwrap :: Lens' TOP (Maybe (Tree Bool))
textTOPwordwrap = lens _textTOPwordwrap (\a b -> a {_textTOPwordwrap = b})
textTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
textTOPresolutionw = lens _textTOPresolutionw (\a b -> a {_textTOPresolutionw = b})
textTOPchop :: Lens' TOP (Maybe (Tree CHOP))
textTOPchop = lens _textTOPchop (\a b -> a {_textTOPchop = b})
textTOPlinespacingunit :: Lens' TOP (Maybe (Tree Int))
textTOPlinespacingunit = lens _textTOPlinespacingunit (\a b -> a {_textTOPlinespacingunit = b})
textTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
textTOPoutputaspect = lens _textTOPoutputaspect (\a b -> a {_textTOPoutputaspect = b})
textTOPborderaalpha :: Lens' TOP (Maybe (Tree Float))
textTOPborderaalpha = lens _textTOPborderaalpha (\a b -> a {_textTOPborderaalpha = b})
textTOPchopvaluereplace :: Lens' TOP (Maybe (Tree Bool))
textTOPchopvaluereplace = lens _textTOPchopvaluereplace (\a b -> a {_textTOPchopvaluereplace = b})
textTOPformat :: Lens' TOP (Maybe (Tree Int))
textTOPformat = lens _textTOPformat (\a b -> a {_textTOPformat = b})
textTOPstrokewidth :: Lens' TOP (Maybe (Tree Int))
textTOPstrokewidth = lens _textTOPstrokewidth (\a b -> a {_textTOPstrokewidth = b})
textTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
textTOPoutputresolution = lens _textTOPoutputresolution (\a b -> a {_textTOPoutputresolution = b})
textTOPbottomborderi :: Lens' TOP (Maybe (Tree Int))
textTOPbottomborderi = lens _textTOPbottomborderi (\a b -> a {_textTOPbottomborderi = b})
textTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
textTOPaspect1 = lens _textTOPaspect1 (\a b -> a {_textTOPaspect1 = b})
textTOPborderb :: Lens' TOP (Vec3)
textTOPborderb = lens _textTOPborderb (\a b -> a {_textTOPborderb = b})
textTOPresmult :: Lens' TOP (Maybe (Tree Bool))
textTOPresmult = lens _textTOPresmult (\a b -> a {_textTOPresmult = b})
textTOPfontfile :: Lens' TOP (Maybe (Tree ByteString))
textTOPfontfile = lens _textTOPfontfile (\a b -> a {_textTOPfontfile = b})
textTOPtopborderi :: Lens' TOP (Maybe (Tree Int))
textTOPtopborderi = lens _textTOPtopborderi (\a b -> a {_textTOPtopborderi = b})
textTOPfontsizexunit :: Lens' TOP (Maybe (Tree Int))
textTOPfontsizexunit = lens _textTOPfontsizexunit (\a b -> a {_textTOPfontsizexunit = b})
textTOPleftborderi :: Lens' TOP (Maybe (Tree Int))
textTOPleftborderi = lens _textTOPleftborderi (\a b -> a {_textTOPleftborderi = b})
textTOPappendvalue :: Lens' TOP (Maybe (Tree Bool))
textTOPappendvalue = lens _textTOPappendvalue (\a b -> a {_textTOPappendvalue = b})
textTOPtext :: Lens' TOP (Maybe (Tree ByteString))
textTOPtext = lens _textTOPtext (\a b -> a {_textTOPtext = b})
textTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
textTOPaspect2 = lens _textTOPaspect2 (\a b -> a {_textTOPaspect2 = b})
textTOPleadingzero :: Lens' TOP (Maybe (Tree Bool))
textTOPleadingzero = lens _textTOPleadingzero (\a b -> a {_textTOPleadingzero = b})
textTOPborderspace2 :: Lens' TOP (Maybe (Tree Float))
textTOPborderspace2 = lens _textTOPborderspace2 (\a b -> a {_textTOPborderspace2 = b})
textTOPrightborder :: Lens' TOP (Maybe (Tree Int))
textTOPrightborder = lens _textTOPrightborder (\a b -> a {_textTOPrightborder = b})
textTOPbottomborder :: Lens' TOP (Maybe (Tree Int))
textTOPbottomborder = lens _textTOPbottomborder (\a b -> a {_textTOPbottomborder = b})
textTOPtotaldigits :: Lens' TOP (Maybe (Tree Int))
textTOPtotaldigits = lens _textTOPtotaldigits (\a b -> a {_textTOPtotaldigits = b})
textTOPspecdat :: Lens' TOP (Maybe (Tree DAT))
textTOPspecdat = lens _textTOPspecdat (\a b -> a {_textTOPspecdat = b})
textTOPfontsizey :: Lens' TOP (Maybe (Tree Float))
textTOPfontsizey = lens _textTOPfontsizey (\a b -> a {_textTOPfontsizey = b})
textTOPdecimaldigits :: Lens' TOP (Maybe (Tree Int))
textTOPdecimaldigits = lens _textTOPdecimaldigits (\a b -> a {_textTOPdecimaldigits = b})
textTOPmultrgbbyalpha :: Lens' TOP (Maybe (Tree Bool))
textTOPmultrgbbyalpha = lens _textTOPmultrgbbyalpha (\a b -> a {_textTOPmultrgbbyalpha = b})
textTOPborderbalpha :: Lens' TOP (Maybe (Tree Float))
textTOPborderbalpha = lens _textTOPborderbalpha (\a b -> a {_textTOPborderbalpha = b})
textTOPfontautosize :: Lens' TOP (Maybe (Tree Int))
textTOPfontautosize = lens _textTOPfontautosize (\a b -> a {_textTOPfontautosize = b})
textTOPbgalpha :: Lens' TOP (Maybe (Tree Float))
textTOPbgalpha = lens _textTOPbgalpha (\a b -> a {_textTOPbgalpha = b})
textTOPfont :: Lens' TOP (Maybe (Tree ByteString))
textTOPfont = lens _textTOPfont (\a b -> a {_textTOPfont = b})
textTOPalignx :: Lens' TOP (Maybe (Tree Int))
textTOPalignx = lens _textTOPalignx (\a b -> a {_textTOPalignx = b})
textTOPbold :: Lens' TOP (Maybe (Tree Bool))
textTOPbold = lens _textTOPbold (\a b -> a {_textTOPbold = b})
textTOPchanmask :: Lens' TOP (Maybe (Tree Int))
textTOPchanmask = lens _textTOPchanmask (\a b -> a {_textTOPchanmask = b})
textTOPdat :: Lens' TOP (Maybe (Tree DAT))
textTOPdat = lens _textTOPdat (\a b -> a {_textTOPdat = b})
textTOPfontsizex :: Lens' TOP (Maybe (Tree Float))
textTOPfontsizex = lens _textTOPfontsizex (\a b -> a {_textTOPfontsizex = b})
textTOPpositionunit :: Lens' TOP (Maybe (Tree Int))
textTOPpositionunit = lens _textTOPpositionunit (\a b -> a {_textTOPpositionunit = b})
textTOPkerning2 :: Lens' TOP (Maybe (Tree Float))
textTOPkerning2 = lens _textTOPkerning2 (\a b -> a {_textTOPkerning2 = b})

kinectTOPtoofarvalue :: Lens' TOP (Maybe (Tree Float))
kinectTOPtoofarvalue = lens _kinectTOPtoofarvalue (\a b -> a {_kinectTOPtoofarvalue = b})
kinectTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
kinectTOPaspect2 = lens _kinectTOPaspect2 (\a b -> a {_kinectTOPaspect2 = b})
kinectTOPformat :: Lens' TOP (Maybe (Tree Int))
kinectTOPformat = lens _kinectTOPformat (\a b -> a {_kinectTOPformat = b})
kinectTOPactive :: Lens' TOP (Maybe (Tree Bool))
kinectTOPactive = lens _kinectTOPactive (\a b -> a {_kinectTOPactive = b})
kinectTOPimage :: Lens' TOP (Maybe (Tree Int))
kinectTOPimage = lens _kinectTOPimage (\a b -> a {_kinectTOPimage = b})
kinectTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
kinectTOPinputfiltertype = lens _kinectTOPinputfiltertype (\a b -> a {_kinectTOPinputfiltertype = b})
kinectTOPchanmask :: Lens' TOP (Maybe (Tree Int))
kinectTOPchanmask = lens _kinectTOPchanmask (\a b -> a {_kinectTOPchanmask = b})
kinectTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
kinectTOPoutputresolution = lens _kinectTOPoutputresolution (\a b -> a {_kinectTOPoutputresolution = b})
kinectTOPfillmode :: Lens' TOP (Maybe (Tree Int))
kinectTOPfillmode = lens _kinectTOPfillmode (\a b -> a {_kinectTOPfillmode = b})
kinectTOPtooclosevalue :: Lens' TOP (Maybe (Tree Float))
kinectTOPtooclosevalue = lens _kinectTOPtooclosevalue (\a b -> a {_kinectTOPtooclosevalue = b})
kinectTOPremap :: Lens' TOP (Maybe (Tree Bool))
kinectTOPremap = lens _kinectTOPremap (\a b -> a {_kinectTOPremap = b})
kinectTOParmenu :: Lens' TOP (Maybe (Tree Int))
kinectTOParmenu = lens _kinectTOParmenu (\a b -> a {_kinectTOParmenu = b})
kinectTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
kinectTOPfiltertype = lens _kinectTOPfiltertype (\a b -> a {_kinectTOPfiltertype = b})
kinectTOPskeleton :: Lens' TOP (Maybe (Tree Int))
kinectTOPskeleton = lens _kinectTOPskeleton (\a b -> a {_kinectTOPskeleton = b})
kinectTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
kinectTOPresolutionw = lens _kinectTOPresolutionw (\a b -> a {_kinectTOPresolutionw = b})
kinectTOPmirrorimage :: Lens' TOP (Maybe (Tree Bool))
kinectTOPmirrorimage = lens _kinectTOPmirrorimage (\a b -> a {_kinectTOPmirrorimage = b})
kinectTOPunknownpointvalue :: Lens' TOP (Maybe (Tree Int))
kinectTOPunknownpointvalue = lens _kinectTOPunknownpointvalue (\a b -> a {_kinectTOPunknownpointvalue = b})
kinectTOPresmult :: Lens' TOP (Maybe (Tree Bool))
kinectTOPresmult = lens _kinectTOPresmult (\a b -> a {_kinectTOPresmult = b})
kinectTOPsensor :: Lens' TOP (Maybe (Tree ByteString))
kinectTOPsensor = lens _kinectTOPsensor (\a b -> a {_kinectTOPsensor = b})
kinectTOPresmenu :: Lens' TOP (Maybe (Tree Int))
kinectTOPresmenu = lens _kinectTOPresmenu (\a b -> a {_kinectTOPresmenu = b})
kinectTOPunknownvalue :: Lens' TOP (Maybe (Tree Float))
kinectTOPunknownvalue = lens _kinectTOPunknownvalue (\a b -> a {_kinectTOPunknownvalue = b})
kinectTOPhwversion :: Lens' TOP (Maybe (Tree Int))
kinectTOPhwversion = lens _kinectTOPhwversion (\a b -> a {_kinectTOPhwversion = b})
kinectTOPcamerares :: Lens' TOP (Maybe (Tree Int))
kinectTOPcamerares = lens _kinectTOPcamerares (\a b -> a {_kinectTOPcamerares = b})
kinectTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
kinectTOPresolutionh = lens _kinectTOPresolutionh (\a b -> a {_kinectTOPresolutionh = b})
kinectTOPnpasses :: Lens' TOP (Maybe (Tree Int))
kinectTOPnpasses = lens _kinectTOPnpasses (\a b -> a {_kinectTOPnpasses = b})
kinectTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
kinectTOPaspect1 = lens _kinectTOPaspect1 (\a b -> a {_kinectTOPaspect1 = b})
kinectTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
kinectTOPoutputaspect = lens _kinectTOPoutputaspect (\a b -> a {_kinectTOPoutputaspect = b})
kinectTOPneardepthmode :: Lens' TOP (Maybe (Tree Bool))
kinectTOPneardepthmode = lens _kinectTOPneardepthmode (\a b -> a {_kinectTOPneardepthmode = b})

cropTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
cropTOPaspect2 = lens _cropTOPaspect2 (\a b -> a {_cropTOPaspect2 = b})
cropTOPformat :: Lens' TOP (Maybe (Tree Int))
cropTOPformat = lens _cropTOPformat (\a b -> a {_cropTOPformat = b})
cropTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
cropTOPoutputresolution = lens _cropTOPoutputresolution (\a b -> a {_cropTOPoutputresolution = b})
cropTOPextend :: Lens' TOP (Maybe (Tree Int))
cropTOPextend = lens _cropTOPextend (\a b -> a {_cropTOPextend = b})
cropTOPchanmask :: Lens' TOP (Maybe (Tree Int))
cropTOPchanmask = lens _cropTOPchanmask (\a b -> a {_cropTOPchanmask = b})
cropTOPcropleftunit :: Lens' TOP (Maybe (Tree Int))
cropTOPcropleftunit = lens _cropTOPcropleftunit (\a b -> a {_cropTOPcropleftunit = b})
cropTOPfillmode :: Lens' TOP (Maybe (Tree Int))
cropTOPfillmode = lens _cropTOPfillmode (\a b -> a {_cropTOPfillmode = b})
cropTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
cropTOPresolutionw = lens _cropTOPresolutionw (\a b -> a {_cropTOPresolutionw = b})
cropTOParmenu :: Lens' TOP (Maybe (Tree Int))
cropTOParmenu = lens _cropTOParmenu (\a b -> a {_cropTOParmenu = b})
cropTOPcropleft :: Lens' TOP (Maybe (Tree Float))
cropTOPcropleft = lens _cropTOPcropleft (\a b -> a {_cropTOPcropleft = b})
cropTOPcropbottom :: Lens' TOP (Maybe (Tree Float))
cropTOPcropbottom = lens _cropTOPcropbottom (\a b -> a {_cropTOPcropbottom = b})
cropTOPcroprightunit :: Lens' TOP (Maybe (Tree Int))
cropTOPcroprightunit = lens _cropTOPcroprightunit (\a b -> a {_cropTOPcroprightunit = b})
cropTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
cropTOPinputfiltertype = lens _cropTOPinputfiltertype (\a b -> a {_cropTOPinputfiltertype = b})
cropTOPresmult :: Lens' TOP (Maybe (Tree Bool))
cropTOPresmult = lens _cropTOPresmult (\a b -> a {_cropTOPresmult = b})
cropTOPcropright :: Lens' TOP (Maybe (Tree Float))
cropTOPcropright = lens _cropTOPcropright (\a b -> a {_cropTOPcropright = b})
cropTOPresmenu :: Lens' TOP (Maybe (Tree Int))
cropTOPresmenu = lens _cropTOPresmenu (\a b -> a {_cropTOPresmenu = b})
cropTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
cropTOPresolutionh = lens _cropTOPresolutionh (\a b -> a {_cropTOPresolutionh = b})
cropTOPcropbottomunit :: Lens' TOP (Maybe (Tree Int))
cropTOPcropbottomunit = lens _cropTOPcropbottomunit (\a b -> a {_cropTOPcropbottomunit = b})
cropTOPnpasses :: Lens' TOP (Maybe (Tree Int))
cropTOPnpasses = lens _cropTOPnpasses (\a b -> a {_cropTOPnpasses = b})
cropTOPcroptopunit :: Lens' TOP (Maybe (Tree Int))
cropTOPcroptopunit = lens _cropTOPcroptopunit (\a b -> a {_cropTOPcroptopunit = b})
cropTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
cropTOPaspect1 = lens _cropTOPaspect1 (\a b -> a {_cropTOPaspect1 = b})
cropTOPcroptop :: Lens' TOP (Maybe (Tree Float))
cropTOPcroptop = lens _cropTOPcroptop (\a b -> a {_cropTOPcroptop = b})
cropTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
cropTOPoutputaspect = lens _cropTOPoutputaspect (\a b -> a {_cropTOPoutputaspect = b})
cropTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
cropTOPfiltertype = lens _cropTOPfiltertype (\a b -> a {_cropTOPfiltertype = b})

prefiltermapTOPresmult :: Lens' TOP (Maybe (Tree Bool))
prefiltermapTOPresmult = lens _prefiltermapTOPresmult (\a b -> a {_prefiltermapTOPresmult = b})
prefiltermapTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
prefiltermapTOPaspect2 = lens _prefiltermapTOPaspect2 (\a b -> a {_prefiltermapTOPaspect2 = b})
prefiltermapTOPformat :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOPformat = lens _prefiltermapTOPformat (\a b -> a {_prefiltermapTOPformat = b})
prefiltermapTOPoutput :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOPoutput = lens _prefiltermapTOPoutput (\a b -> a {_prefiltermapTOPoutput = b})
prefiltermapTOPresmenu :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOPresmenu = lens _prefiltermapTOPresmenu (\a b -> a {_prefiltermapTOPresmenu = b})
prefiltermapTOPnpasses :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOPnpasses = lens _prefiltermapTOPnpasses (\a b -> a {_prefiltermapTOPnpasses = b})
prefiltermapTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOPinputfiltertype = lens _prefiltermapTOPinputfiltertype (\a b -> a {_prefiltermapTOPinputfiltertype = b})
prefiltermapTOPchanmask :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOPchanmask = lens _prefiltermapTOPchanmask (\a b -> a {_prefiltermapTOPchanmask = b})
prefiltermapTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOPoutputresolution = lens _prefiltermapTOPoutputresolution (\a b -> a {_prefiltermapTOPoutputresolution = b})
prefiltermapTOPfillmode :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOPfillmode = lens _prefiltermapTOPfillmode (\a b -> a {_prefiltermapTOPfillmode = b})
prefiltermapTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOPresolutionw = lens _prefiltermapTOPresolutionw (\a b -> a {_prefiltermapTOPresolutionw = b})
prefiltermapTOParmenu :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOParmenu = lens _prefiltermapTOParmenu (\a b -> a {_prefiltermapTOParmenu = b})
prefiltermapTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOPfiltertype = lens _prefiltermapTOPfiltertype (\a b -> a {_prefiltermapTOPfiltertype = b})
prefiltermapTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
prefiltermapTOPaspect1 = lens _prefiltermapTOPaspect1 (\a b -> a {_prefiltermapTOPaspect1 = b})
prefiltermapTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOPresolutionh = lens _prefiltermapTOPresolutionh (\a b -> a {_prefiltermapTOPresolutionh = b})
prefiltermapTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
prefiltermapTOPoutputaspect = lens _prefiltermapTOPoutputaspect (\a b -> a {_prefiltermapTOPoutputaspect = b})

overTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
overTOPaspect2 = lens _overTOPaspect2 (\a b -> a {_overTOPaspect2 = b})
overTOPformat :: Lens' TOP (Maybe (Tree Int))
overTOPformat = lens _overTOPformat (\a b -> a {_overTOPformat = b})
overTOPextend :: Lens' TOP (Maybe (Tree Int))
overTOPextend = lens _overTOPextend (\a b -> a {_overTOPextend = b})
overTOPchanmask :: Lens' TOP (Maybe (Tree Int))
overTOPchanmask = lens _overTOPchanmask (\a b -> a {_overTOPchanmask = b})
overTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
overTOPoutputresolution = lens _overTOPoutputresolution (\a b -> a {_overTOPoutputresolution = b})
overTOPfillmode :: Lens' TOP (Maybe (Tree Int))
overTOPfillmode = lens _overTOPfillmode (\a b -> a {_overTOPfillmode = b})
overTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
overTOPresolutionw = lens _overTOPresolutionw (\a b -> a {_overTOPresolutionw = b})
overTOParmenu :: Lens' TOP (Maybe (Tree Int))
overTOParmenu = lens _overTOParmenu (\a b -> a {_overTOParmenu = b})
overTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
overTOPfiltertype = lens _overTOPfiltertype (\a b -> a {_overTOPfiltertype = b})
overTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
overTOPinputfiltertype = lens _overTOPinputfiltertype (\a b -> a {_overTOPinputfiltertype = b})
overTOPresmult :: Lens' TOP (Maybe (Tree Bool))
overTOPresmult = lens _overTOPresmult (\a b -> a {_overTOPresmult = b})
overTOPpunit :: Lens' TOP (Maybe (Tree Int))
overTOPpunit = lens _overTOPpunit (\a b -> a {_overTOPpunit = b})
overTOPs :: Lens' TOP (Vec2)
overTOPs = lens _overTOPs (\a b -> a {_overTOPs = b})
overTOPresmenu :: Lens' TOP (Maybe (Tree Int))
overTOPresmenu = lens _overTOPresmenu (\a b -> a {_overTOPresmenu = b})
overTOPp :: Lens' TOP (Vec2)
overTOPp = lens _overTOPp (\a b -> a {_overTOPp = b})
overTOPsize :: Lens' TOP (Maybe (Tree Int))
overTOPsize = lens _overTOPsize (\a b -> a {_overTOPsize = b})
overTOPnpasses :: Lens' TOP (Maybe (Tree Int))
overTOPnpasses = lens _overTOPnpasses (\a b -> a {_overTOPnpasses = b})
overTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
overTOPoutputaspect = lens _overTOPoutputaspect (\a b -> a {_overTOPoutputaspect = b})
overTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
overTOPresolutionh = lens _overTOPresolutionh (\a b -> a {_overTOPresolutionh = b})
overTOPtunit :: Lens' TOP (Maybe (Tree Int))
overTOPtunit = lens _overTOPtunit (\a b -> a {_overTOPtunit = b})
overTOPprefit :: Lens' TOP (Maybe (Tree Int))
overTOPprefit = lens _overTOPprefit (\a b -> a {_overTOPprefit = b})
overTOPr :: Lens' TOP (Maybe (Tree Float))
overTOPr = lens _overTOPr (\a b -> a {_overTOPr = b})
overTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
overTOPaspect1 = lens _overTOPaspect1 (\a b -> a {_overTOPaspect1 = b})
overTOPjustifyh :: Lens' TOP (Maybe (Tree Int))
overTOPjustifyh = lens _overTOPjustifyh (\a b -> a {_overTOPjustifyh = b})
overTOPt :: Lens' TOP (Vec2)
overTOPt = lens _overTOPt (\a b -> a {_overTOPt = b})
overTOPjustifyv :: Lens' TOP (Maybe (Tree Int))
overTOPjustifyv = lens _overTOPjustifyv (\a b -> a {_overTOPjustifyv = b})

compositeTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
compositeTOPaspect2 = lens _compositeTOPaspect2 (\a b -> a {_compositeTOPaspect2 = b})
compositeTOPformat :: Lens' TOP (Maybe (Tree Int))
compositeTOPformat = lens _compositeTOPformat (\a b -> a {_compositeTOPformat = b})
compositeTOPpreviewgrid :: Lens' TOP (Maybe (Tree Bool))
compositeTOPpreviewgrid = lens _compositeTOPpreviewgrid (\a b -> a {_compositeTOPpreviewgrid = b})
compositeTOPextend :: Lens' TOP (Maybe (Tree Int))
compositeTOPextend = lens _compositeTOPextend (\a b -> a {_compositeTOPextend = b})
compositeTOPchanmask :: Lens' TOP (Maybe (Tree Int))
compositeTOPchanmask = lens _compositeTOPchanmask (\a b -> a {_compositeTOPchanmask = b})
compositeTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
compositeTOPoutputresolution = lens _compositeTOPoutputresolution (\a b -> a {_compositeTOPoutputresolution = b})
compositeTOPfillmode :: Lens' TOP (Maybe (Tree Int))
compositeTOPfillmode = lens _compositeTOPfillmode (\a b -> a {_compositeTOPfillmode = b})
compositeTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
compositeTOPresolutionw = lens _compositeTOPresolutionw (\a b -> a {_compositeTOPresolutionw = b})
compositeTOPinputindex :: Lens' TOP (Maybe (Tree Int))
compositeTOPinputindex = lens _compositeTOPinputindex (\a b -> a {_compositeTOPinputindex = b})
compositeTOPprefit :: Lens' TOP (Maybe (Tree Int))
compositeTOPprefit = lens _compositeTOPprefit (\a b -> a {_compositeTOPprefit = b})
compositeTOPtop :: Lens' TOP (Maybe (Tree TOP))
compositeTOPtop = lens _compositeTOPtop (\a b -> a {_compositeTOPtop = b})
compositeTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
compositeTOPfiltertype = lens _compositeTOPfiltertype (\a b -> a {_compositeTOPfiltertype = b})
compositeTOPpunit :: Lens' TOP (Maybe (Tree Int))
compositeTOPpunit = lens _compositeTOPpunit (\a b -> a {_compositeTOPpunit = b})
compositeTOPtstep :: Lens' TOP (Vec2)
compositeTOPtstep = lens _compositeTOPtstep (\a b -> a {_compositeTOPtstep = b})
compositeTOPr :: Lens' TOP (Maybe (Tree Float))
compositeTOPr = lens _compositeTOPr (\a b -> a {_compositeTOPr = b})
compositeTOPresmult :: Lens' TOP (Maybe (Tree Bool))
compositeTOPresmult = lens _compositeTOPresmult (\a b -> a {_compositeTOPresmult = b})
compositeTOPoperand :: Lens' TOP (Maybe (Tree Int))
compositeTOPoperand = lens _compositeTOPoperand (\a b -> a {_compositeTOPoperand = b})
compositeTOPresmenu :: Lens' TOP (Maybe (Tree Int))
compositeTOPresmenu = lens _compositeTOPresmenu (\a b -> a {_compositeTOPresmenu = b})
compositeTOPs :: Lens' TOP (Vec2)
compositeTOPs = lens _compositeTOPs (\a b -> a {_compositeTOPs = b})
compositeTOPsize :: Lens' TOP (Maybe (Tree Int))
compositeTOPsize = lens _compositeTOPsize (\a b -> a {_compositeTOPsize = b})
compositeTOPtstepunit :: Lens' TOP (Maybe (Tree Int))
compositeTOPtstepunit = lens _compositeTOPtstepunit (\a b -> a {_compositeTOPtstepunit = b})
compositeTOPp :: Lens' TOP (Vec2)
compositeTOPp = lens _compositeTOPp (\a b -> a {_compositeTOPp = b})
compositeTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
compositeTOPoutputaspect = lens _compositeTOPoutputaspect (\a b -> a {_compositeTOPoutputaspect = b})
compositeTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
compositeTOPresolutionh = lens _compositeTOPresolutionh (\a b -> a {_compositeTOPresolutionh = b})
compositeTOPtunit :: Lens' TOP (Maybe (Tree Int))
compositeTOPtunit = lens _compositeTOPtunit (\a b -> a {_compositeTOPtunit = b})
compositeTOParmenu :: Lens' TOP (Maybe (Tree Int))
compositeTOParmenu = lens _compositeTOParmenu (\a b -> a {_compositeTOParmenu = b})
compositeTOPselectinput :: Lens' TOP (Maybe (Tree Bool))
compositeTOPselectinput = lens _compositeTOPselectinput (\a b -> a {_compositeTOPselectinput = b})
compositeTOPnpasses :: Lens' TOP (Maybe (Tree Int))
compositeTOPnpasses = lens _compositeTOPnpasses (\a b -> a {_compositeTOPnpasses = b})
compositeTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
compositeTOPaspect1 = lens _compositeTOPaspect1 (\a b -> a {_compositeTOPaspect1 = b})
compositeTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
compositeTOPinputfiltertype = lens _compositeTOPinputfiltertype (\a b -> a {_compositeTOPinputfiltertype = b})
compositeTOPjustifyh :: Lens' TOP (Maybe (Tree Int))
compositeTOPjustifyh = lens _compositeTOPjustifyh (\a b -> a {_compositeTOPjustifyh = b})
compositeTOPt :: Lens' TOP (Vec2)
compositeTOPt = lens _compositeTOPt (\a b -> a {_compositeTOPt = b})
compositeTOPjustifyv :: Lens' TOP (Maybe (Tree Int))
compositeTOPjustifyv = lens _compositeTOPjustifyv (\a b -> a {_compositeTOPjustifyv = b})
compositeTOPswaporder :: Lens' TOP (Maybe (Tree Bool))
compositeTOPswaporder = lens _compositeTOPswaporder (\a b -> a {_compositeTOPswaporder = b})

webrenderTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
webrenderTOPaspect2 = lens _webrenderTOPaspect2 (\a b -> a {_webrenderTOPaspect2 = b})
webrenderTOPformat :: Lens' TOP (Maybe (Tree Int))
webrenderTOPformat = lens _webrenderTOPformat (\a b -> a {_webrenderTOPformat = b})
webrenderTOPtransparent :: Lens' TOP (Maybe (Tree Bool))
webrenderTOPtransparent = lens _webrenderTOPtransparent (\a b -> a {_webrenderTOPtransparent = b})
webrenderTOPactive :: Lens' TOP (Maybe (Tree Bool))
webrenderTOPactive = lens _webrenderTOPactive (\a b -> a {_webrenderTOPactive = b})
webrenderTOPchanmask :: Lens' TOP (Maybe (Tree Int))
webrenderTOPchanmask = lens _webrenderTOPchanmask (\a b -> a {_webrenderTOPchanmask = b})
webrenderTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
webrenderTOPoutputresolution = lens _webrenderTOPoutputresolution (\a b -> a {_webrenderTOPoutputresolution = b})
webrenderTOPautorestart :: Lens' TOP (Maybe (Tree Bool))
webrenderTOPautorestart = lens _webrenderTOPautorestart (\a b -> a {_webrenderTOPautorestart = b})
webrenderTOPusedat :: Lens' TOP (Maybe (Tree Bool))
webrenderTOPusedat = lens _webrenderTOPusedat (\a b -> a {_webrenderTOPusedat = b})
webrenderTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
webrenderTOPresolutionw = lens _webrenderTOPresolutionw (\a b -> a {_webrenderTOPresolutionw = b})
webrenderTOParmenu :: Lens' TOP (Maybe (Tree Int))
webrenderTOParmenu = lens _webrenderTOParmenu (\a b -> a {_webrenderTOParmenu = b})
webrenderTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
webrenderTOPfiltertype = lens _webrenderTOPfiltertype (\a b -> a {_webrenderTOPfiltertype = b})
webrenderTOPresetcount :: Lens' TOP (Maybe (Tree Bool))
webrenderTOPresetcount = lens _webrenderTOPresetcount (\a b -> a {_webrenderTOPresetcount = b})
webrenderTOPaudio :: Lens' TOP (Maybe (Tree Bool))
webrenderTOPaudio = lens _webrenderTOPaudio (\a b -> a {_webrenderTOPaudio = b})
webrenderTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
webrenderTOPinputfiltertype = lens _webrenderTOPinputfiltertype (\a b -> a {_webrenderTOPinputfiltertype = b})
webrenderTOPoptions :: Lens' TOP (Maybe (Tree ByteString))
webrenderTOPoptions = lens _webrenderTOPoptions (\a b -> a {_webrenderTOPoptions = b})
webrenderTOPfillmode :: Lens' TOP (Maybe (Tree Int))
webrenderTOPfillmode = lens _webrenderTOPfillmode (\a b -> a {_webrenderTOPfillmode = b})
webrenderTOPresmult :: Lens' TOP (Maybe (Tree Bool))
webrenderTOPresmult = lens _webrenderTOPresmult (\a b -> a {_webrenderTOPresmult = b})
webrenderTOPresmenu :: Lens' TOP (Maybe (Tree Int))
webrenderTOPresmenu = lens _webrenderTOPresmenu (\a b -> a {_webrenderTOPresmenu = b})
webrenderTOPmaxrenderrate :: Lens' TOP (Maybe (Tree Int))
webrenderTOPmaxrenderrate = lens _webrenderTOPmaxrenderrate (\a b -> a {_webrenderTOPmaxrenderrate = b})
webrenderTOPurl :: Lens' TOP (Maybe (Tree ByteString))
webrenderTOPurl = lens _webrenderTOPurl (\a b -> a {_webrenderTOPurl = b})
webrenderTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
webrenderTOPresolutionh = lens _webrenderTOPresolutionh (\a b -> a {_webrenderTOPresolutionh = b})
webrenderTOPnpasses :: Lens' TOP (Maybe (Tree Int))
webrenderTOPnpasses = lens _webrenderTOPnpasses (\a b -> a {_webrenderTOPnpasses = b})
webrenderTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
webrenderTOPaspect1 = lens _webrenderTOPaspect1 (\a b -> a {_webrenderTOPaspect1 = b})
webrenderTOPautorestartpulse :: Lens' TOP (Maybe (Tree Bool))
webrenderTOPautorestartpulse = lens _webrenderTOPautorestartpulse (\a b -> a {_webrenderTOPautorestartpulse = b})
webrenderTOPupdatewhenloaded :: Lens' TOP (Maybe (Tree Bool))
webrenderTOPupdatewhenloaded = lens _webrenderTOPupdatewhenloaded (\a b -> a {_webrenderTOPupdatewhenloaded = b})
webrenderTOPdat :: Lens' TOP (Maybe (Tree DAT))
webrenderTOPdat = lens _webrenderTOPdat (\a b -> a {_webrenderTOPdat = b})
webrenderTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
webrenderTOPoutputaspect = lens _webrenderTOPoutputaspect (\a b -> a {_webrenderTOPoutputaspect = b})
webrenderTOPreload :: Lens' TOP (Maybe (Tree Bool))
webrenderTOPreload = lens _webrenderTOPreload (\a b -> a {_webrenderTOPreload = b})

antialiasTOPquality :: Lens' TOP (Maybe (Tree Int))
antialiasTOPquality = lens _antialiasTOPquality (\a b -> a {_antialiasTOPquality = b})
antialiasTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
antialiasTOPaspect2 = lens _antialiasTOPaspect2 (\a b -> a {_antialiasTOPaspect2 = b})
antialiasTOPformat :: Lens' TOP (Maybe (Tree Int))
antialiasTOPformat = lens _antialiasTOPformat (\a b -> a {_antialiasTOPformat = b})
antialiasTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
antialiasTOPoutputresolution = lens _antialiasTOPoutputresolution (\a b -> a {_antialiasTOPoutputresolution = b})
antialiasTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
antialiasTOPinputfiltertype = lens _antialiasTOPinputfiltertype (\a b -> a {_antialiasTOPinputfiltertype = b})
antialiasTOPedgethreshold :: Lens' TOP (Maybe (Tree Float))
antialiasTOPedgethreshold = lens _antialiasTOPedgethreshold (\a b -> a {_antialiasTOPedgethreshold = b})
antialiasTOPmaxsearchsteps :: Lens' TOP (Maybe (Tree Int))
antialiasTOPmaxsearchsteps = lens _antialiasTOPmaxsearchsteps (\a b -> a {_antialiasTOPmaxsearchsteps = b})
antialiasTOPfillmode :: Lens' TOP (Maybe (Tree Int))
antialiasTOPfillmode = lens _antialiasTOPfillmode (\a b -> a {_antialiasTOPfillmode = b})
antialiasTOPcornerrounding :: Lens' TOP (Maybe (Tree Int))
antialiasTOPcornerrounding = lens _antialiasTOPcornerrounding (\a b -> a {_antialiasTOPcornerrounding = b})
antialiasTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
antialiasTOPresolutionw = lens _antialiasTOPresolutionw (\a b -> a {_antialiasTOPresolutionw = b})
antialiasTOParmenu :: Lens' TOP (Maybe (Tree Int))
antialiasTOParmenu = lens _antialiasTOParmenu (\a b -> a {_antialiasTOParmenu = b})
antialiasTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
antialiasTOPfiltertype = lens _antialiasTOPfiltertype (\a b -> a {_antialiasTOPfiltertype = b})
antialiasTOPmaxdiagsearchsteps :: Lens' TOP (Maybe (Tree Int))
antialiasTOPmaxdiagsearchsteps = lens _antialiasTOPmaxdiagsearchsteps (\a b -> a {_antialiasTOPmaxdiagsearchsteps = b})
antialiasTOPresmult :: Lens' TOP (Maybe (Tree Bool))
antialiasTOPresmult = lens _antialiasTOPresmult (\a b -> a {_antialiasTOPresmult = b})
antialiasTOPresmenu :: Lens' TOP (Maybe (Tree Int))
antialiasTOPresmenu = lens _antialiasTOPresmenu (\a b -> a {_antialiasTOPresmenu = b})
antialiasTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
antialiasTOPaspect1 = lens _antialiasTOPaspect1 (\a b -> a {_antialiasTOPaspect1 = b})
antialiasTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
antialiasTOPresolutionh = lens _antialiasTOPresolutionh (\a b -> a {_antialiasTOPresolutionh = b})
antialiasTOPoutputedges :: Lens' TOP (Maybe (Tree Bool))
antialiasTOPoutputedges = lens _antialiasTOPoutputedges (\a b -> a {_antialiasTOPoutputedges = b})
antialiasTOPnpasses :: Lens' TOP (Maybe (Tree Int))
antialiasTOPnpasses = lens _antialiasTOPnpasses (\a b -> a {_antialiasTOPnpasses = b})
antialiasTOPchanmask :: Lens' TOP (Maybe (Tree Int))
antialiasTOPchanmask = lens _antialiasTOPchanmask (\a b -> a {_antialiasTOPchanmask = b})
antialiasTOPedgedetectsource :: Lens' TOP (Maybe (Tree Int))
antialiasTOPedgedetectsource = lens _antialiasTOPedgedetectsource (\a b -> a {_antialiasTOPedgedetectsource = b})
antialiasTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
antialiasTOPoutputaspect = lens _antialiasTOPoutputaspect (\a b -> a {_antialiasTOPoutputaspect = b})

rgbtohsvTOPresmult :: Lens' TOP (Maybe (Tree Bool))
rgbtohsvTOPresmult = lens _rgbtohsvTOPresmult (\a b -> a {_rgbtohsvTOPresmult = b})
rgbtohsvTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
rgbtohsvTOPaspect2 = lens _rgbtohsvTOPaspect2 (\a b -> a {_rgbtohsvTOPaspect2 = b})
rgbtohsvTOPformat :: Lens' TOP (Maybe (Tree Int))
rgbtohsvTOPformat = lens _rgbtohsvTOPformat (\a b -> a {_rgbtohsvTOPformat = b})
rgbtohsvTOPresmenu :: Lens' TOP (Maybe (Tree Int))
rgbtohsvTOPresmenu = lens _rgbtohsvTOPresmenu (\a b -> a {_rgbtohsvTOPresmenu = b})
rgbtohsvTOPnpasses :: Lens' TOP (Maybe (Tree Int))
rgbtohsvTOPnpasses = lens _rgbtohsvTOPnpasses (\a b -> a {_rgbtohsvTOPnpasses = b})
rgbtohsvTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
rgbtohsvTOPinputfiltertype = lens _rgbtohsvTOPinputfiltertype (\a b -> a {_rgbtohsvTOPinputfiltertype = b})
rgbtohsvTOPchanmask :: Lens' TOP (Maybe (Tree Int))
rgbtohsvTOPchanmask = lens _rgbtohsvTOPchanmask (\a b -> a {_rgbtohsvTOPchanmask = b})
rgbtohsvTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
rgbtohsvTOPoutputresolution = lens _rgbtohsvTOPoutputresolution (\a b -> a {_rgbtohsvTOPoutputresolution = b})
rgbtohsvTOPfillmode :: Lens' TOP (Maybe (Tree Int))
rgbtohsvTOPfillmode = lens _rgbtohsvTOPfillmode (\a b -> a {_rgbtohsvTOPfillmode = b})
rgbtohsvTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
rgbtohsvTOPresolutionw = lens _rgbtohsvTOPresolutionw (\a b -> a {_rgbtohsvTOPresolutionw = b})
rgbtohsvTOParmenu :: Lens' TOP (Maybe (Tree Int))
rgbtohsvTOParmenu = lens _rgbtohsvTOParmenu (\a b -> a {_rgbtohsvTOParmenu = b})
rgbtohsvTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
rgbtohsvTOPfiltertype = lens _rgbtohsvTOPfiltertype (\a b -> a {_rgbtohsvTOPfiltertype = b})
rgbtohsvTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
rgbtohsvTOPaspect1 = lens _rgbtohsvTOPaspect1 (\a b -> a {_rgbtohsvTOPaspect1 = b})
rgbtohsvTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
rgbtohsvTOPresolutionh = lens _rgbtohsvTOPresolutionh (\a b -> a {_rgbtohsvTOPresolutionh = b})
rgbtohsvTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
rgbtohsvTOPoutputaspect = lens _rgbtohsvTOPoutputaspect (\a b -> a {_rgbtohsvTOPoutputaspect = b})

convolveTOPfillmode :: Lens' TOP (Maybe (Tree Int))
convolveTOPfillmode = lens _convolveTOPfillmode (\a b -> a {_convolveTOPfillmode = b})
convolveTOPapplytoalpha :: Lens' TOP (Maybe (Tree Bool))
convolveTOPapplytoalpha = lens _convolveTOPapplytoalpha (\a b -> a {_convolveTOPapplytoalpha = b})
convolveTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
convolveTOPaspect2 = lens _convolveTOPaspect2 (\a b -> a {_convolveTOPaspect2 = b})
convolveTOPformat :: Lens' TOP (Maybe (Tree Int))
convolveTOPformat = lens _convolveTOPformat (\a b -> a {_convolveTOPformat = b})
convolveTOPresmenu :: Lens' TOP (Maybe (Tree Int))
convolveTOPresmenu = lens _convolveTOPresmenu (\a b -> a {_convolveTOPresmenu = b})
convolveTOPnpasses :: Lens' TOP (Maybe (Tree Int))
convolveTOPnpasses = lens _convolveTOPnpasses (\a b -> a {_convolveTOPnpasses = b})
convolveTOPnormalize :: Lens' TOP (Maybe (Tree Bool))
convolveTOPnormalize = lens _convolveTOPnormalize (\a b -> a {_convolveTOPnormalize = b})
convolveTOPoffset :: Lens' TOP (Maybe (Tree Float))
convolveTOPoffset = lens _convolveTOPoffset (\a b -> a {_convolveTOPoffset = b})
convolveTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
convolveTOPinputfiltertype = lens _convolveTOPinputfiltertype (\a b -> a {_convolveTOPinputfiltertype = b})
convolveTOPchanmask :: Lens' TOP (Maybe (Tree Int))
convolveTOPchanmask = lens _convolveTOPchanmask (\a b -> a {_convolveTOPchanmask = b})
convolveTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
convolveTOPoutputresolution = lens _convolveTOPoutputresolution (\a b -> a {_convolveTOPoutputresolution = b})
convolveTOPresmult :: Lens' TOP (Maybe (Tree Bool))
convolveTOPresmult = lens _convolveTOPresmult (\a b -> a {_convolveTOPresmult = b})
convolveTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
convolveTOPresolutionh = lens _convolveTOPresolutionh (\a b -> a {_convolveTOPresolutionh = b})
convolveTOParmenu :: Lens' TOP (Maybe (Tree Int))
convolveTOParmenu = lens _convolveTOParmenu (\a b -> a {_convolveTOParmenu = b})
convolveTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
convolveTOPfiltertype = lens _convolveTOPfiltertype (\a b -> a {_convolveTOPfiltertype = b})
convolveTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
convolveTOPaspect1 = lens _convolveTOPaspect1 (\a b -> a {_convolveTOPaspect1 = b})
convolveTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
convolveTOPresolutionw = lens _convolveTOPresolutionw (\a b -> a {_convolveTOPresolutionw = b})
convolveTOPdat :: Lens' TOP (Maybe (Tree DAT))
convolveTOPdat = lens _convolveTOPdat (\a b -> a {_convolveTOPdat = b})
convolveTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
convolveTOPoutputaspect = lens _convolveTOPoutputaspect (\a b -> a {_convolveTOPoutputaspect = b})

edgeTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
edgeTOPaspect2 = lens _edgeTOPaspect2 (\a b -> a {_edgeTOPaspect2 = b})
edgeTOPformat :: Lens' TOP (Maybe (Tree Int))
edgeTOPformat = lens _edgeTOPformat (\a b -> a {_edgeTOPformat = b})
edgeTOPoffset2 :: Lens' TOP (Maybe (Tree Float))
edgeTOPoffset2 = lens _edgeTOPoffset2 (\a b -> a {_edgeTOPoffset2 = b})
edgeTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
edgeTOPinputfiltertype = lens _edgeTOPinputfiltertype (\a b -> a {_edgeTOPinputfiltertype = b})
edgeTOPchanmask :: Lens' TOP (Maybe (Tree Int))
edgeTOPchanmask = lens _edgeTOPchanmask (\a b -> a {_edgeTOPchanmask = b})
edgeTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
edgeTOPoutputresolution = lens _edgeTOPoutputresolution (\a b -> a {_edgeTOPoutputresolution = b})
edgeTOPfillmode :: Lens' TOP (Maybe (Tree Int))
edgeTOPfillmode = lens _edgeTOPfillmode (\a b -> a {_edgeTOPfillmode = b})
edgeTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
edgeTOPresolutionw = lens _edgeTOPresolutionw (\a b -> a {_edgeTOPresolutionw = b})
edgeTOPedgecolor :: Lens' TOP (Vec4)
edgeTOPedgecolor = lens _edgeTOPedgecolor (\a b -> a {_edgeTOPedgecolor = b})
edgeTOPselect :: Lens' TOP (Maybe (Tree Int))
edgeTOPselect = lens _edgeTOPselect (\a b -> a {_edgeTOPselect = b})
edgeTOParmenu :: Lens' TOP (Maybe (Tree Int))
edgeTOParmenu = lens _edgeTOParmenu (\a b -> a {_edgeTOParmenu = b})
edgeTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
edgeTOPfiltertype = lens _edgeTOPfiltertype (\a b -> a {_edgeTOPfiltertype = b})
edgeTOPoffset1 :: Lens' TOP (Maybe (Tree Float))
edgeTOPoffset1 = lens _edgeTOPoffset1 (\a b -> a {_edgeTOPoffset1 = b})
edgeTOPblacklevel :: Lens' TOP (Maybe (Tree Float))
edgeTOPblacklevel = lens _edgeTOPblacklevel (\a b -> a {_edgeTOPblacklevel = b})
edgeTOPresmult :: Lens' TOP (Maybe (Tree Bool))
edgeTOPresmult = lens _edgeTOPresmult (\a b -> a {_edgeTOPresmult = b})
edgeTOPresmenu :: Lens' TOP (Maybe (Tree Int))
edgeTOPresmenu = lens _edgeTOPresmenu (\a b -> a {_edgeTOPresmenu = b})
edgeTOPoffsetunit :: Lens' TOP (Maybe (Tree Int))
edgeTOPoffsetunit = lens _edgeTOPoffsetunit (\a b -> a {_edgeTOPoffsetunit = b})
edgeTOPstrength :: Lens' TOP (Maybe (Tree Float))
edgeTOPstrength = lens _edgeTOPstrength (\a b -> a {_edgeTOPstrength = b})
edgeTOPalphaoutputmenu :: Lens' TOP (Maybe (Tree Int))
edgeTOPalphaoutputmenu = lens _edgeTOPalphaoutputmenu (\a b -> a {_edgeTOPalphaoutputmenu = b})
edgeTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
edgeTOPresolutionh = lens _edgeTOPresolutionh (\a b -> a {_edgeTOPresolutionh = b})
edgeTOPcompinput :: Lens' TOP (Maybe (Tree Bool))
edgeTOPcompinput = lens _edgeTOPcompinput (\a b -> a {_edgeTOPcompinput = b})
edgeTOPnpasses :: Lens' TOP (Maybe (Tree Int))
edgeTOPnpasses = lens _edgeTOPnpasses (\a b -> a {_edgeTOPnpasses = b})
edgeTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
edgeTOPaspect1 = lens _edgeTOPaspect1 (\a b -> a {_edgeTOPaspect1 = b})
edgeTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
edgeTOPoutputaspect = lens _edgeTOPoutputaspect (\a b -> a {_edgeTOPoutputaspect = b})

slopeTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
slopeTOPaspect2 = lens _slopeTOPaspect2 (\a b -> a {_slopeTOPaspect2 = b})
slopeTOPgreen :: Lens' TOP (Maybe (Tree Int))
slopeTOPgreen = lens _slopeTOPgreen (\a b -> a {_slopeTOPgreen = b})
slopeTOPblue :: Lens' TOP (Maybe (Tree Int))
slopeTOPblue = lens _slopeTOPblue (\a b -> a {_slopeTOPblue = b})
slopeTOPalpha :: Lens' TOP (Maybe (Tree Int))
slopeTOPalpha = lens _slopeTOPalpha (\a b -> a {_slopeTOPalpha = b})
slopeTOPchanmask :: Lens' TOP (Maybe (Tree Int))
slopeTOPchanmask = lens _slopeTOPchanmask (\a b -> a {_slopeTOPchanmask = b})
slopeTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
slopeTOPoutputresolution = lens _slopeTOPoutputresolution (\a b -> a {_slopeTOPoutputresolution = b})
slopeTOPfillmode :: Lens' TOP (Maybe (Tree Int))
slopeTOPfillmode = lens _slopeTOPfillmode (\a b -> a {_slopeTOPfillmode = b})
slopeTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
slopeTOPresolutionw = lens _slopeTOPresolutionw (\a b -> a {_slopeTOPresolutionw = b})
slopeTOParmenu :: Lens' TOP (Maybe (Tree Int))
slopeTOParmenu = lens _slopeTOParmenu (\a b -> a {_slopeTOParmenu = b})
slopeTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
slopeTOPfiltertype = lens _slopeTOPfiltertype (\a b -> a {_slopeTOPfiltertype = b})
slopeTOPformat :: Lens' TOP (Maybe (Tree Int))
slopeTOPformat = lens _slopeTOPformat (\a b -> a {_slopeTOPformat = b})
slopeTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
slopeTOPinputfiltertype = lens _slopeTOPinputfiltertype (\a b -> a {_slopeTOPinputfiltertype = b})
slopeTOPoffset1 :: Lens' TOP (Maybe (Tree Float))
slopeTOPoffset1 = lens _slopeTOPoffset1 (\a b -> a {_slopeTOPoffset1 = b})
slopeTOPresmult :: Lens' TOP (Maybe (Tree Bool))
slopeTOPresmult = lens _slopeTOPresmult (\a b -> a {_slopeTOPresmult = b})
slopeTOPzeropoint :: Lens' TOP (Maybe (Tree Float))
slopeTOPzeropoint = lens _slopeTOPzeropoint (\a b -> a {_slopeTOPzeropoint = b})
slopeTOPresmenu :: Lens' TOP (Maybe (Tree Int))
slopeTOPresmenu = lens _slopeTOPresmenu (\a b -> a {_slopeTOPresmenu = b})
slopeTOPoffsetunit :: Lens' TOP (Maybe (Tree Int))
slopeTOPoffsetunit = lens _slopeTOPoffsetunit (\a b -> a {_slopeTOPoffsetunit = b})
slopeTOPstrength :: Lens' TOP (Maybe (Tree Float))
slopeTOPstrength = lens _slopeTOPstrength (\a b -> a {_slopeTOPstrength = b})
slopeTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
slopeTOPresolutionh = lens _slopeTOPresolutionh (\a b -> a {_slopeTOPresolutionh = b})
slopeTOPred :: Lens' TOP (Maybe (Tree Int))
slopeTOPred = lens _slopeTOPred (\a b -> a {_slopeTOPred = b})
slopeTOPnpasses :: Lens' TOP (Maybe (Tree Int))
slopeTOPnpasses = lens _slopeTOPnpasses (\a b -> a {_slopeTOPnpasses = b})
slopeTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
slopeTOPaspect1 = lens _slopeTOPaspect1 (\a b -> a {_slopeTOPaspect1 = b})
slopeTOPmethod :: Lens' TOP (Maybe (Tree Int))
slopeTOPmethod = lens _slopeTOPmethod (\a b -> a {_slopeTOPmethod = b})
slopeTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
slopeTOPoutputaspect = lens _slopeTOPoutputaspect (\a b -> a {_slopeTOPoutputaspect = b})
slopeTOPoffset2 :: Lens' TOP (Maybe (Tree Float))
slopeTOPoffset2 = lens _slopeTOPoffset2 (\a b -> a {_slopeTOPoffset2 = b})

normalmapTOPresmult :: Lens' TOP (Maybe (Tree Bool))
normalmapTOPresmult = lens _normalmapTOPresmult (\a b -> a {_normalmapTOPresmult = b})
normalmapTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
normalmapTOPaspect2 = lens _normalmapTOPaspect2 (\a b -> a {_normalmapTOPaspect2 = b})
normalmapTOPformat :: Lens' TOP (Maybe (Tree Int))
normalmapTOPformat = lens _normalmapTOPformat (\a b -> a {_normalmapTOPformat = b})
normalmapTOPoffset2 :: Lens' TOP (Maybe (Tree Float))
normalmapTOPoffset2 = lens _normalmapTOPoffset2 (\a b -> a {_normalmapTOPoffset2 = b})
normalmapTOPresmenu :: Lens' TOP (Maybe (Tree Int))
normalmapTOPresmenu = lens _normalmapTOPresmenu (\a b -> a {_normalmapTOPresmenu = b})
normalmapTOPnpasses :: Lens' TOP (Maybe (Tree Int))
normalmapTOPnpasses = lens _normalmapTOPnpasses (\a b -> a {_normalmapTOPnpasses = b})
normalmapTOPoffsetunit :: Lens' TOP (Maybe (Tree Int))
normalmapTOPoffsetunit = lens _normalmapTOPoffsetunit (\a b -> a {_normalmapTOPoffsetunit = b})
normalmapTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
normalmapTOPinputfiltertype = lens _normalmapTOPinputfiltertype (\a b -> a {_normalmapTOPinputfiltertype = b})
normalmapTOPheightmap :: Lens' TOP (Maybe (Tree Bool))
normalmapTOPheightmap = lens _normalmapTOPheightmap (\a b -> a {_normalmapTOPheightmap = b})
normalmapTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
normalmapTOPoutputresolution = lens _normalmapTOPoutputresolution (\a b -> a {_normalmapTOPoutputresolution = b})
normalmapTOPfillmode :: Lens' TOP (Maybe (Tree Int))
normalmapTOPfillmode = lens _normalmapTOPfillmode (\a b -> a {_normalmapTOPfillmode = b})
normalmapTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
normalmapTOPresolutionw = lens _normalmapTOPresolutionw (\a b -> a {_normalmapTOPresolutionw = b})
normalmapTOPchanmask :: Lens' TOP (Maybe (Tree Int))
normalmapTOPchanmask = lens _normalmapTOPchanmask (\a b -> a {_normalmapTOPchanmask = b})
normalmapTOParmenu :: Lens' TOP (Maybe (Tree Int))
normalmapTOParmenu = lens _normalmapTOParmenu (\a b -> a {_normalmapTOParmenu = b})
normalmapTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
normalmapTOPfiltertype = lens _normalmapTOPfiltertype (\a b -> a {_normalmapTOPfiltertype = b})
normalmapTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
normalmapTOPaspect1 = lens _normalmapTOPaspect1 (\a b -> a {_normalmapTOPaspect1 = b})
normalmapTOPmethod :: Lens' TOP (Maybe (Tree Int))
normalmapTOPmethod = lens _normalmapTOPmethod (\a b -> a {_normalmapTOPmethod = b})
normalmapTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
normalmapTOPresolutionh = lens _normalmapTOPresolutionh (\a b -> a {_normalmapTOPresolutionh = b})
normalmapTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
normalmapTOPoutputaspect = lens _normalmapTOPoutputaspect (\a b -> a {_normalmapTOPoutputaspect = b})
normalmapTOPoffset1 :: Lens' TOP (Maybe (Tree Float))
normalmapTOPoffset1 = lens _normalmapTOPoffset1 (\a b -> a {_normalmapTOPoffset1 = b})
normalmapTOPsource :: Lens' TOP (Maybe (Tree Int))
normalmapTOPsource = lens _normalmapTOPsource (\a b -> a {_normalmapTOPsource = b})

thresholdTOParmenu :: Lens' TOP (Maybe (Tree Int))
thresholdTOParmenu = lens _thresholdTOParmenu (\a b -> a {_thresholdTOParmenu = b})
thresholdTOPresmult :: Lens' TOP (Maybe (Tree Bool))
thresholdTOPresmult = lens _thresholdTOPresmult (\a b -> a {_thresholdTOPresmult = b})
thresholdTOPcomparator :: Lens' TOP (Maybe (Tree Int))
thresholdTOPcomparator = lens _thresholdTOPcomparator (\a b -> a {_thresholdTOPcomparator = b})
thresholdTOPformat :: Lens' TOP (Maybe (Tree Int))
thresholdTOPformat = lens _thresholdTOPformat (\a b -> a {_thresholdTOPformat = b})
thresholdTOPresmenu :: Lens' TOP (Maybe (Tree Int))
thresholdTOPresmenu = lens _thresholdTOPresmenu (\a b -> a {_thresholdTOPresmenu = b})
thresholdTOPnpasses :: Lens' TOP (Maybe (Tree Int))
thresholdTOPnpasses = lens _thresholdTOPnpasses (\a b -> a {_thresholdTOPnpasses = b})
thresholdTOPfillmode :: Lens' TOP (Maybe (Tree Int))
thresholdTOPfillmode = lens _thresholdTOPfillmode (\a b -> a {_thresholdTOPfillmode = b})
thresholdTOPsoften :: Lens' TOP (Maybe (Tree Float))
thresholdTOPsoften = lens _thresholdTOPsoften (\a b -> a {_thresholdTOPsoften = b})
thresholdTOPalpha :: Lens' TOP (Maybe (Tree Int))
thresholdTOPalpha = lens _thresholdTOPalpha (\a b -> a {_thresholdTOPalpha = b})
thresholdTOPchanmask :: Lens' TOP (Maybe (Tree Int))
thresholdTOPchanmask = lens _thresholdTOPchanmask (\a b -> a {_thresholdTOPchanmask = b})
thresholdTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
thresholdTOPoutputresolution = lens _thresholdTOPoutputresolution (\a b -> a {_thresholdTOPoutputresolution = b})
thresholdTOPthreshold :: Lens' TOP (Maybe (Tree Float))
thresholdTOPthreshold = lens _thresholdTOPthreshold (\a b -> a {_thresholdTOPthreshold = b})
thresholdTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
thresholdTOPresolutionh = lens _thresholdTOPresolutionh (\a b -> a {_thresholdTOPresolutionh = b})
thresholdTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
thresholdTOPaspect2 = lens _thresholdTOPaspect2 (\a b -> a {_thresholdTOPaspect2 = b})
thresholdTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
thresholdTOPfiltertype = lens _thresholdTOPfiltertype (\a b -> a {_thresholdTOPfiltertype = b})
thresholdTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
thresholdTOPaspect1 = lens _thresholdTOPaspect1 (\a b -> a {_thresholdTOPaspect1 = b})
thresholdTOPrgb :: Lens' TOP (Maybe (Tree Int))
thresholdTOPrgb = lens _thresholdTOPrgb (\a b -> a {_thresholdTOPrgb = b})
thresholdTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
thresholdTOPresolutionw = lens _thresholdTOPresolutionw (\a b -> a {_thresholdTOPresolutionw = b})
thresholdTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
thresholdTOPoutputaspect = lens _thresholdTOPoutputaspect (\a b -> a {_thresholdTOPoutputaspect = b})
thresholdTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
thresholdTOPinputfiltertype = lens _thresholdTOPinputfiltertype (\a b -> a {_thresholdTOPinputfiltertype = b})

cplusplusTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
cplusplusTOPaspect2 = lens _cplusplusTOPaspect2 (\a b -> a {_cplusplusTOPaspect2 = b})
cplusplusTOPformat :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPformat = lens _cplusplusTOPformat (\a b -> a {_cplusplusTOPformat = b})
cplusplusTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPinputfiltertype = lens _cplusplusTOPinputfiltertype (\a b -> a {_cplusplusTOPinputfiltertype = b})
cplusplusTOPchanmask :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPchanmask = lens _cplusplusTOPchanmask (\a b -> a {_cplusplusTOPchanmask = b})
cplusplusTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPoutputresolution = lens _cplusplusTOPoutputresolution (\a b -> a {_cplusplusTOPoutputresolution = b})
cplusplusTOPfillmode :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPfillmode = lens _cplusplusTOPfillmode (\a b -> a {_cplusplusTOPfillmode = b})
cplusplusTOPantialias :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPantialias = lens _cplusplusTOPantialias (\a b -> a {_cplusplusTOPantialias = b})
cplusplusTOParmenu :: Lens' TOP (Maybe (Tree Int))
cplusplusTOParmenu = lens _cplusplusTOParmenu (\a b -> a {_cplusplusTOParmenu = b})
cplusplusTOPstencilbuffer :: Lens' TOP (Maybe (Tree Bool))
cplusplusTOPstencilbuffer = lens _cplusplusTOPstencilbuffer (\a b -> a {_cplusplusTOPstencilbuffer = b})
cplusplusTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPresolutionw = lens _cplusplusTOPresolutionw (\a b -> a {_cplusplusTOPresolutionw = b})
cplusplusTOPresmult :: Lens' TOP (Maybe (Tree Bool))
cplusplusTOPresmult = lens _cplusplusTOPresmult (\a b -> a {_cplusplusTOPresmult = b})
cplusplusTOPunloadplugin :: Lens' TOP (Maybe (Tree Bool))
cplusplusTOPunloadplugin = lens _cplusplusTOPunloadplugin (\a b -> a {_cplusplusTOPunloadplugin = b})
cplusplusTOPresmenu :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPresmenu = lens _cplusplusTOPresmenu (\a b -> a {_cplusplusTOPresmenu = b})
cplusplusTOPplugin :: Lens' TOP (Maybe (Tree ByteString))
cplusplusTOPplugin = lens _cplusplusTOPplugin (\a b -> a {_cplusplusTOPplugin = b})
cplusplusTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPresolutionh = lens _cplusplusTOPresolutionh (\a b -> a {_cplusplusTOPresolutionh = b})
cplusplusTOPnpasses :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPnpasses = lens _cplusplusTOPnpasses (\a b -> a {_cplusplusTOPnpasses = b})
cplusplusTOPnumcolorbufs :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPnumcolorbufs = lens _cplusplusTOPnumcolorbufs (\a b -> a {_cplusplusTOPnumcolorbufs = b})
cplusplusTOPreinitpulse :: Lens' TOP (Maybe (Tree Bool))
cplusplusTOPreinitpulse = lens _cplusplusTOPreinitpulse (\a b -> a {_cplusplusTOPreinitpulse = b})
cplusplusTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
cplusplusTOPaspect1 = lens _cplusplusTOPaspect1 (\a b -> a {_cplusplusTOPaspect1 = b})
cplusplusTOPdepthbuffer :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPdepthbuffer = lens _cplusplusTOPdepthbuffer (\a b -> a {_cplusplusTOPdepthbuffer = b})
cplusplusTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPoutputaspect = lens _cplusplusTOPoutputaspect (\a b -> a {_cplusplusTOPoutputaspect = b})
cplusplusTOPreinit :: Lens' TOP (Maybe (Tree Bool))
cplusplusTOPreinit = lens _cplusplusTOPreinit (\a b -> a {_cplusplusTOPreinit = b})
cplusplusTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
cplusplusTOPfiltertype = lens _cplusplusTOPfiltertype (\a b -> a {_cplusplusTOPfiltertype = b})

switchTOPindex :: Lens' TOP (Maybe (Tree Float))
switchTOPindex = lens _switchTOPindex (\a b -> a {_switchTOPindex = b})
switchTOPresmult :: Lens' TOP (Maybe (Tree Bool))
switchTOPresmult = lens _switchTOPresmult (\a b -> a {_switchTOPresmult = b})
switchTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
switchTOPaspect2 = lens _switchTOPaspect2 (\a b -> a {_switchTOPaspect2 = b})
switchTOPformat :: Lens' TOP (Maybe (Tree Int))
switchTOPformat = lens _switchTOPformat (\a b -> a {_switchTOPformat = b})
switchTOPresmenu :: Lens' TOP (Maybe (Tree Int))
switchTOPresmenu = lens _switchTOPresmenu (\a b -> a {_switchTOPresmenu = b})
switchTOPnpasses :: Lens' TOP (Maybe (Tree Int))
switchTOPnpasses = lens _switchTOPnpasses (\a b -> a {_switchTOPnpasses = b})
switchTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
switchTOPinputfiltertype = lens _switchTOPinputfiltertype (\a b -> a {_switchTOPinputfiltertype = b})
switchTOPchanmask :: Lens' TOP (Maybe (Tree Int))
switchTOPchanmask = lens _switchTOPchanmask (\a b -> a {_switchTOPchanmask = b})
switchTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
switchTOPoutputresolution = lens _switchTOPoutputresolution (\a b -> a {_switchTOPoutputresolution = b})
switchTOPfillmode :: Lens' TOP (Maybe (Tree Int))
switchTOPfillmode = lens _switchTOPfillmode (\a b -> a {_switchTOPfillmode = b})
switchTOPblend :: Lens' TOP (Maybe (Tree Bool))
switchTOPblend = lens _switchTOPblend (\a b -> a {_switchTOPblend = b})
switchTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
switchTOPresolutionw = lens _switchTOPresolutionw (\a b -> a {_switchTOPresolutionw = b})
switchTOParmenu :: Lens' TOP (Maybe (Tree Int))
switchTOParmenu = lens _switchTOParmenu (\a b -> a {_switchTOParmenu = b})
switchTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
switchTOPfiltertype = lens _switchTOPfiltertype (\a b -> a {_switchTOPfiltertype = b})
switchTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
switchTOPaspect1 = lens _switchTOPaspect1 (\a b -> a {_switchTOPaspect1 = b})
switchTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
switchTOPresolutionh = lens _switchTOPresolutionh (\a b -> a {_switchTOPresolutionh = b})
switchTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
switchTOPoutputaspect = lens _switchTOPoutputaspect (\a b -> a {_switchTOPoutputaspect = b})

matteTOPresmult :: Lens' TOP (Maybe (Tree Bool))
matteTOPresmult = lens _matteTOPresmult (\a b -> a {_matteTOPresmult = b})
matteTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
matteTOPaspect2 = lens _matteTOPaspect2 (\a b -> a {_matteTOPaspect2 = b})
matteTOPformat :: Lens' TOP (Maybe (Tree Int))
matteTOPformat = lens _matteTOPformat (\a b -> a {_matteTOPformat = b})
matteTOPresmenu :: Lens' TOP (Maybe (Tree Int))
matteTOPresmenu = lens _matteTOPresmenu (\a b -> a {_matteTOPresmenu = b})
matteTOPnpasses :: Lens' TOP (Maybe (Tree Int))
matteTOPnpasses = lens _matteTOPnpasses (\a b -> a {_matteTOPnpasses = b})
matteTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
matteTOPinputfiltertype = lens _matteTOPinputfiltertype (\a b -> a {_matteTOPinputfiltertype = b})
matteTOPchanmask :: Lens' TOP (Maybe (Tree Int))
matteTOPchanmask = lens _matteTOPchanmask (\a b -> a {_matteTOPchanmask = b})
matteTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
matteTOPoutputresolution = lens _matteTOPoutputresolution (\a b -> a {_matteTOPoutputresolution = b})
matteTOPfillmode :: Lens' TOP (Maybe (Tree Int))
matteTOPfillmode = lens _matteTOPfillmode (\a b -> a {_matteTOPfillmode = b})
matteTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
matteTOPresolutionh = lens _matteTOPresolutionh (\a b -> a {_matteTOPresolutionh = b})
matteTOParmenu :: Lens' TOP (Maybe (Tree Int))
matteTOParmenu = lens _matteTOParmenu (\a b -> a {_matteTOParmenu = b})
matteTOPswitchinputs :: Lens' TOP (Maybe (Tree Float))
matteTOPswitchinputs = lens _matteTOPswitchinputs (\a b -> a {_matteTOPswitchinputs = b})
matteTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
matteTOPfiltertype = lens _matteTOPfiltertype (\a b -> a {_matteTOPfiltertype = b})
matteTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
matteTOPaspect1 = lens _matteTOPaspect1 (\a b -> a {_matteTOPaspect1 = b})
matteTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
matteTOPresolutionw = lens _matteTOPresolutionw (\a b -> a {_matteTOPresolutionw = b})
matteTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
matteTOPoutputaspect = lens _matteTOPoutputaspect (\a b -> a {_matteTOPoutputaspect = b})
matteTOPmattechannel :: Lens' TOP (Maybe (Tree Int))
matteTOPmattechannel = lens _matteTOPmattechannel (\a b -> a {_matteTOPmattechannel = b})

lumalevelTOPoutlow :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPoutlow = lens _lumalevelTOPoutlow (\a b -> a {_lumalevelTOPoutlow = b})
lumalevelTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPaspect2 = lens _lumalevelTOPaspect2 (\a b -> a {_lumalevelTOPaspect2 = b})
lumalevelTOPbrightness1 :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPbrightness1 = lens _lumalevelTOPbrightness1 (\a b -> a {_lumalevelTOPbrightness1 = b})
lumalevelTOPclamphigh :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPclamphigh = lens _lumalevelTOPclamphigh (\a b -> a {_lumalevelTOPclamphigh = b})
lumalevelTOPouthigh :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPouthigh = lens _lumalevelTOPouthigh (\a b -> a {_lumalevelTOPouthigh = b})
lumalevelTOPcontrast :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPcontrast = lens _lumalevelTOPcontrast (\a b -> a {_lumalevelTOPcontrast = b})
lumalevelTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPaspect1 = lens _lumalevelTOPaspect1 (\a b -> a {_lumalevelTOPaspect1 = b})
lumalevelTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
lumalevelTOPoutputresolution = lens _lumalevelTOPoutputresolution (\a b -> a {_lumalevelTOPoutputresolution = b})
lumalevelTOPfillmode :: Lens' TOP (Maybe (Tree Int))
lumalevelTOPfillmode = lens _lumalevelTOPfillmode (\a b -> a {_lumalevelTOPfillmode = b})
lumalevelTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
lumalevelTOPresolutionw = lens _lumalevelTOPresolutionw (\a b -> a {_lumalevelTOPresolutionw = b})
lumalevelTOPopacity :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPopacity = lens _lumalevelTOPopacity (\a b -> a {_lumalevelTOPopacity = b})
lumalevelTOParmenu :: Lens' TOP (Maybe (Tree Int))
lumalevelTOParmenu = lens _lumalevelTOParmenu (\a b -> a {_lumalevelTOParmenu = b})
lumalevelTOPgamma2 :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPgamma2 = lens _lumalevelTOPgamma2 (\a b -> a {_lumalevelTOPgamma2 = b})
lumalevelTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
lumalevelTOPfiltertype = lens _lumalevelTOPfiltertype (\a b -> a {_lumalevelTOPfiltertype = b})
lumalevelTOPinvert :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPinvert = lens _lumalevelTOPinvert (\a b -> a {_lumalevelTOPinvert = b})
lumalevelTOPinhigh :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPinhigh = lens _lumalevelTOPinhigh (\a b -> a {_lumalevelTOPinhigh = b})
lumalevelTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
lumalevelTOPinputfiltertype = lens _lumalevelTOPinputfiltertype (\a b -> a {_lumalevelTOPinputfiltertype = b})
lumalevelTOPsource :: Lens' TOP (Maybe (Tree Int))
lumalevelTOPsource = lens _lumalevelTOPsource (\a b -> a {_lumalevelTOPsource = b})
lumalevelTOPblacklevel :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPblacklevel = lens _lumalevelTOPblacklevel (\a b -> a {_lumalevelTOPblacklevel = b})
lumalevelTOPresmult :: Lens' TOP (Maybe (Tree Bool))
lumalevelTOPresmult = lens _lumalevelTOPresmult (\a b -> a {_lumalevelTOPresmult = b})
lumalevelTOPresmenu :: Lens' TOP (Maybe (Tree Int))
lumalevelTOPresmenu = lens _lumalevelTOPresmenu (\a b -> a {_lumalevelTOPresmenu = b})
lumalevelTOPchanmask :: Lens' TOP (Maybe (Tree Int))
lumalevelTOPchanmask = lens _lumalevelTOPchanmask (\a b -> a {_lumalevelTOPchanmask = b})
lumalevelTOPgamma1 :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPgamma1 = lens _lumalevelTOPgamma1 (\a b -> a {_lumalevelTOPgamma1 = b})
lumalevelTOPsoften :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPsoften = lens _lumalevelTOPsoften (\a b -> a {_lumalevelTOPsoften = b})
lumalevelTOPthreshold :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPthreshold = lens _lumalevelTOPthreshold (\a b -> a {_lumalevelTOPthreshold = b})
lumalevelTOPformat :: Lens' TOP (Maybe (Tree Int))
lumalevelTOPformat = lens _lumalevelTOPformat (\a b -> a {_lumalevelTOPformat = b})
lumalevelTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
lumalevelTOPresolutionh = lens _lumalevelTOPresolutionh (\a b -> a {_lumalevelTOPresolutionh = b})
lumalevelTOPbrightness2 :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPbrightness2 = lens _lumalevelTOPbrightness2 (\a b -> a {_lumalevelTOPbrightness2 = b})
lumalevelTOPnpasses :: Lens' TOP (Maybe (Tree Int))
lumalevelTOPnpasses = lens _lumalevelTOPnpasses (\a b -> a {_lumalevelTOPnpasses = b})
lumalevelTOPstepsize :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPstepsize = lens _lumalevelTOPstepsize (\a b -> a {_lumalevelTOPstepsize = b})
lumalevelTOPclamplow :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPclamplow = lens _lumalevelTOPclamplow (\a b -> a {_lumalevelTOPclamplow = b})
lumalevelTOPinlow :: Lens' TOP (Maybe (Tree Float))
lumalevelTOPinlow = lens _lumalevelTOPinlow (\a b -> a {_lumalevelTOPinlow = b})
lumalevelTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
lumalevelTOPoutputaspect = lens _lumalevelTOPoutputaspect (\a b -> a {_lumalevelTOPoutputaspect = b})

cacheselectTOPindex :: Lens' TOP (Maybe (Tree Int))
cacheselectTOPindex = lens _cacheselectTOPindex (\a b -> a {_cacheselectTOPindex = b})
cacheselectTOPresmult :: Lens' TOP (Maybe (Tree Bool))
cacheselectTOPresmult = lens _cacheselectTOPresmult (\a b -> a {_cacheselectTOPresmult = b})
cacheselectTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
cacheselectTOPaspect2 = lens _cacheselectTOPaspect2 (\a b -> a {_cacheselectTOPaspect2 = b})
cacheselectTOPformat :: Lens' TOP (Maybe (Tree Int))
cacheselectTOPformat = lens _cacheselectTOPformat (\a b -> a {_cacheselectTOPformat = b})
cacheselectTOPresmenu :: Lens' TOP (Maybe (Tree Int))
cacheselectTOPresmenu = lens _cacheselectTOPresmenu (\a b -> a {_cacheselectTOPresmenu = b})
cacheselectTOPnpasses :: Lens' TOP (Maybe (Tree Int))
cacheselectTOPnpasses = lens _cacheselectTOPnpasses (\a b -> a {_cacheselectTOPnpasses = b})
cacheselectTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
cacheselectTOPinputfiltertype = lens _cacheselectTOPinputfiltertype (\a b -> a {_cacheselectTOPinputfiltertype = b})
cacheselectTOPchanmask :: Lens' TOP (Maybe (Tree Int))
cacheselectTOPchanmask = lens _cacheselectTOPchanmask (\a b -> a {_cacheselectTOPchanmask = b})
cacheselectTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
cacheselectTOPoutputresolution = lens _cacheselectTOPoutputresolution (\a b -> a {_cacheselectTOPoutputresolution = b})
cacheselectTOPfillmode :: Lens' TOP (Maybe (Tree Int))
cacheselectTOPfillmode = lens _cacheselectTOPfillmode (\a b -> a {_cacheselectTOPfillmode = b})
cacheselectTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
cacheselectTOPresolutionw = lens _cacheselectTOPresolutionw (\a b -> a {_cacheselectTOPresolutionw = b})
cacheselectTOPcachetop :: Lens' TOP (Maybe (Tree TOP))
cacheselectTOPcachetop = lens _cacheselectTOPcachetop (\a b -> a {_cacheselectTOPcachetop = b})
cacheselectTOParmenu :: Lens' TOP (Maybe (Tree Int))
cacheselectTOParmenu = lens _cacheselectTOParmenu (\a b -> a {_cacheselectTOParmenu = b})
cacheselectTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
cacheselectTOPfiltertype = lens _cacheselectTOPfiltertype (\a b -> a {_cacheselectTOPfiltertype = b})
cacheselectTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
cacheselectTOPaspect1 = lens _cacheselectTOPaspect1 (\a b -> a {_cacheselectTOPaspect1 = b})
cacheselectTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
cacheselectTOPresolutionh = lens _cacheselectTOPresolutionh (\a b -> a {_cacheselectTOPresolutionh = b})
cacheselectTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
cacheselectTOPoutputaspect = lens _cacheselectTOPoutputaspect (\a b -> a {_cacheselectTOPoutputaspect = b})

underTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
underTOPaspect2 = lens _underTOPaspect2 (\a b -> a {_underTOPaspect2 = b})
underTOPformat :: Lens' TOP (Maybe (Tree Int))
underTOPformat = lens _underTOPformat (\a b -> a {_underTOPformat = b})
underTOPextend :: Lens' TOP (Maybe (Tree Int))
underTOPextend = lens _underTOPextend (\a b -> a {_underTOPextend = b})
underTOPchanmask :: Lens' TOP (Maybe (Tree Int))
underTOPchanmask = lens _underTOPchanmask (\a b -> a {_underTOPchanmask = b})
underTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
underTOPoutputresolution = lens _underTOPoutputresolution (\a b -> a {_underTOPoutputresolution = b})
underTOPfillmode :: Lens' TOP (Maybe (Tree Int))
underTOPfillmode = lens _underTOPfillmode (\a b -> a {_underTOPfillmode = b})
underTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
underTOPresolutionw = lens _underTOPresolutionw (\a b -> a {_underTOPresolutionw = b})
underTOParmenu :: Lens' TOP (Maybe (Tree Int))
underTOParmenu = lens _underTOParmenu (\a b -> a {_underTOParmenu = b})
underTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
underTOPfiltertype = lens _underTOPfiltertype (\a b -> a {_underTOPfiltertype = b})
underTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
underTOPinputfiltertype = lens _underTOPinputfiltertype (\a b -> a {_underTOPinputfiltertype = b})
underTOPresmult :: Lens' TOP (Maybe (Tree Bool))
underTOPresmult = lens _underTOPresmult (\a b -> a {_underTOPresmult = b})
underTOPpunit :: Lens' TOP (Maybe (Tree Int))
underTOPpunit = lens _underTOPpunit (\a b -> a {_underTOPpunit = b})
underTOPs :: Lens' TOP (Vec2)
underTOPs = lens _underTOPs (\a b -> a {_underTOPs = b})
underTOPresmenu :: Lens' TOP (Maybe (Tree Int))
underTOPresmenu = lens _underTOPresmenu (\a b -> a {_underTOPresmenu = b})
underTOPp :: Lens' TOP (Vec2)
underTOPp = lens _underTOPp (\a b -> a {_underTOPp = b})
underTOPsize :: Lens' TOP (Maybe (Tree Int))
underTOPsize = lens _underTOPsize (\a b -> a {_underTOPsize = b})
underTOPnpasses :: Lens' TOP (Maybe (Tree Int))
underTOPnpasses = lens _underTOPnpasses (\a b -> a {_underTOPnpasses = b})
underTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
underTOPoutputaspect = lens _underTOPoutputaspect (\a b -> a {_underTOPoutputaspect = b})
underTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
underTOPresolutionh = lens _underTOPresolutionh (\a b -> a {_underTOPresolutionh = b})
underTOPtunit :: Lens' TOP (Maybe (Tree Int))
underTOPtunit = lens _underTOPtunit (\a b -> a {_underTOPtunit = b})
underTOPprefit :: Lens' TOP (Maybe (Tree Int))
underTOPprefit = lens _underTOPprefit (\a b -> a {_underTOPprefit = b})
underTOPr :: Lens' TOP (Maybe (Tree Float))
underTOPr = lens _underTOPr (\a b -> a {_underTOPr = b})
underTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
underTOPaspect1 = lens _underTOPaspect1 (\a b -> a {_underTOPaspect1 = b})
underTOPjustifyh :: Lens' TOP (Maybe (Tree Int))
underTOPjustifyh = lens _underTOPjustifyh (\a b -> a {_underTOPjustifyh = b})
underTOPt :: Lens' TOP (Vec2)
underTOPt = lens _underTOPt (\a b -> a {_underTOPt = b})
underTOPjustifyv :: Lens' TOP (Maybe (Tree Int))
underTOPjustifyv = lens _underTOPjustifyv (\a b -> a {_underTOPjustifyv = b})

renderTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
renderTOPaspect2 = lens _renderTOPaspect2 (\a b -> a {_renderTOPaspect2 = b})
renderTOPoverdraw :: Lens' TOP (Maybe (Tree Bool))
renderTOPoverdraw = lens _renderTOPoverdraw (\a b -> a {_renderTOPoverdraw = b})
renderTOPvalue3 :: Lens' TOP (Vec4)
renderTOPvalue3 = lens _renderTOPvalue3 (\a b -> a {_renderTOPvalue3 = b})
renderTOPfillmode :: Lens' TOP (Maybe (Tree Int))
renderTOPfillmode = lens _renderTOPfillmode (\a b -> a {_renderTOPfillmode = b})
renderTOPcullface :: Lens' TOP (Maybe (Tree Int))
renderTOPcullface = lens _renderTOPcullface (\a b -> a {_renderTOPcullface = b})
renderTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
renderTOPresolutionw = lens _renderTOPresolutionw (\a b -> a {_renderTOPresolutionw = b})
renderTOPnumcolorbufs :: Lens' TOP (Maybe (Tree Int))
renderTOPnumcolorbufs = lens _renderTOPnumcolorbufs (\a b -> a {_renderTOPnumcolorbufs = b})
renderTOParmenu :: Lens' TOP (Maybe (Tree Int))
renderTOParmenu = lens _renderTOParmenu (\a b -> a {_renderTOParmenu = b})
renderTOPsampler0 :: Lens' TOP (Maybe (Tree ByteString))
renderTOPsampler0 = lens _renderTOPsampler0 (\a b -> a {_renderTOPsampler0 = b})
renderTOPformat :: Lens' TOP (Maybe (Tree Int))
renderTOPformat = lens _renderTOPformat (\a b -> a {_renderTOPformat = b})
renderTOPsampler3 :: Lens' TOP (Maybe (Tree ByteString))
renderTOPsampler3 = lens _renderTOPsampler3 (\a b -> a {_renderTOPsampler3 = b})
renderTOPresmenu :: Lens' TOP (Maybe (Tree Int))
renderTOPresmenu = lens _renderTOPresmenu (\a b -> a {_renderTOPresmenu = b})
renderTOPtop1extendv :: Lens' TOP (Maybe (Tree Int))
renderTOPtop1extendv = lens _renderTOPtop1extendv (\a b -> a {_renderTOPtop1extendv = b})
renderTOPuniname1 :: Lens' TOP (Maybe (Tree ByteString))
renderTOPuniname1 = lens _renderTOPuniname1 (\a b -> a {_renderTOPuniname1 = b})
renderTOPcropbottom :: Lens' TOP (Maybe (Tree Float))
renderTOPcropbottom = lens _renderTOPcropbottom (\a b -> a {_renderTOPcropbottom = b})
renderTOPsampler4 :: Lens' TOP (Maybe (Tree ByteString))
renderTOPsampler4 = lens _renderTOPsampler4 (\a b -> a {_renderTOPsampler4 = b})
renderTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
renderTOPoutputaspect = lens _renderTOPoutputaspect (\a b -> a {_renderTOPoutputaspect = b})
renderTOPmulticamerahint :: Lens' TOP (Maybe (Tree Int))
renderTOPmulticamerahint = lens _renderTOPmulticamerahint (\a b -> a {_renderTOPmulticamerahint = b})
renderTOPtop4filter :: Lens' TOP (Maybe (Tree Int))
renderTOPtop4filter = lens _renderTOPtop4filter (\a b -> a {_renderTOPtop4filter = b})
renderTOPoverridemat :: Lens' TOP (Maybe (Tree MAT))
renderTOPoverridemat = lens _renderTOPoverridemat (\a b -> a {_renderTOPoverridemat = b})
renderTOPorderindtrans :: Lens' TOP (Maybe (Tree Bool))
renderTOPorderindtrans = lens _renderTOPorderindtrans (\a b -> a {_renderTOPorderindtrans = b})
renderTOPtop4extendv :: Lens' TOP (Maybe (Tree Int))
renderTOPtop4extendv = lens _renderTOPtop4extendv (\a b -> a {_renderTOPtop4extendv = b})
renderTOPuniname4 :: Lens' TOP (Maybe (Tree ByteString))
renderTOPuniname4 = lens _renderTOPuniname4 (\a b -> a {_renderTOPuniname4 = b})
renderTOPvalue2 :: Lens' TOP (Vec4)
renderTOPvalue2 = lens _renderTOPvalue2 (\a b -> a {_renderTOPvalue2 = b})
renderTOPcropbottomunit :: Lens' TOP (Maybe (Tree Int))
renderTOPcropbottomunit = lens _renderTOPcropbottomunit (\a b -> a {_renderTOPcropbottomunit = b})
renderTOPcropleft :: Lens' TOP (Maybe (Tree Float))
renderTOPcropleft = lens _renderTOPcropleft (\a b -> a {_renderTOPcropleft = b})
renderTOPtop2extendu :: Lens' TOP (Maybe (Tree Int))
renderTOPtop2extendu = lens _renderTOPtop2extendu (\a b -> a {_renderTOPtop2extendu = b})
renderTOPpolygonoffsetunits :: Lens' TOP (Maybe (Tree Float))
renderTOPpolygonoffsetunits = lens _renderTOPpolygonoffsetunits (\a b -> a {_renderTOPpolygonoffsetunits = b})
renderTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
renderTOPinputfiltertype = lens _renderTOPinputfiltertype (\a b -> a {_renderTOPinputfiltertype = b})
renderTOPtop1 :: Lens' TOP (Maybe (Tree TOP))
renderTOPtop1 = lens _renderTOPtop1 (\a b -> a {_renderTOPtop1 = b})
renderTOPtop1filter :: Lens' TOP (Maybe (Tree Int))
renderTOPtop1filter = lens _renderTOPtop1filter (\a b -> a {_renderTOPtop1filter = b})
renderTOPresmult :: Lens' TOP (Maybe (Tree Bool))
renderTOPresmult = lens _renderTOPresmult (\a b -> a {_renderTOPresmult = b})
renderTOPtop2extendw :: Lens' TOP (Maybe (Tree Int))
renderTOPtop2extendw = lens _renderTOPtop2extendw (\a b -> a {_renderTOPtop2extendw = b})
renderTOPsampler2 :: Lens' TOP (Maybe (Tree ByteString))
renderTOPsampler2 = lens _renderTOPsampler2 (\a b -> a {_renderTOPsampler2 = b})
renderTOPdither :: Lens' TOP (Maybe (Tree Bool))
renderTOPdither = lens _renderTOPdither (\a b -> a {_renderTOPdither = b})
renderTOPuniname2 :: Lens' TOP (Maybe (Tree ByteString))
renderTOPuniname2 = lens _renderTOPuniname2 (\a b -> a {_renderTOPuniname2 = b})
renderTOPtop2 :: Lens' TOP (Maybe (Tree TOP))
renderTOPtop2 = lens _renderTOPtop2 (\a b -> a {_renderTOPtop2 = b})
renderTOPcroptopunit :: Lens' TOP (Maybe (Tree Int))
renderTOPcroptopunit = lens _renderTOPcroptopunit (\a b -> a {_renderTOPcroptopunit = b})
renderTOPuniname0 :: Lens' TOP (Maybe (Tree ByteString))
renderTOPuniname0 = lens _renderTOPuniname0 (\a b -> a {_renderTOPuniname0 = b})
renderTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
renderTOPfiltertype = lens _renderTOPfiltertype (\a b -> a {_renderTOPfiltertype = b})
renderTOPtop4extendw :: Lens' TOP (Maybe (Tree Int))
renderTOPtop4extendw = lens _renderTOPtop4extendw (\a b -> a {_renderTOPtop4extendw = b})
renderTOPsampler1 :: Lens' TOP (Maybe (Tree ByteString))
renderTOPsampler1 = lens _renderTOPsampler1 (\a b -> a {_renderTOPsampler1 = b})
renderTOPrender :: Lens' TOP (Maybe (Tree Bool))
renderTOPrender = lens _renderTOPrender (\a b -> a {_renderTOPrender = b})
renderTOPvalue4 :: Lens' TOP (Vec4)
renderTOPvalue4 = lens _renderTOPvalue4 (\a b -> a {_renderTOPvalue4 = b})
renderTOPantialias :: Lens' TOP (Maybe (Tree Int))
renderTOPantialias = lens _renderTOPantialias (\a b -> a {_renderTOPantialias = b})
renderTOPdrawdepthonly :: Lens' TOP (Maybe (Tree Bool))
renderTOPdrawdepthonly = lens _renderTOPdrawdepthonly (\a b -> a {_renderTOPdrawdepthonly = b})
renderTOPdepthformat :: Lens' TOP (Maybe (Tree Int))
renderTOPdepthformat = lens _renderTOPdepthformat (\a b -> a {_renderTOPdepthformat = b})
renderTOPcroprightunit :: Lens' TOP (Maybe (Tree Int))
renderTOPcroprightunit = lens _renderTOPcroprightunit (\a b -> a {_renderTOPcroprightunit = b})
renderTOPtop0anisotropy :: Lens' TOP (Maybe (Tree Int))
renderTOPtop0anisotropy = lens _renderTOPtop0anisotropy (\a b -> a {_renderTOPtop0anisotropy = b})
renderTOPrendermode :: Lens' TOP (Maybe (Tree Int))
renderTOPrendermode = lens _renderTOPrendermode (\a b -> a {_renderTOPrendermode = b})
renderTOPtop0extendv :: Lens' TOP (Maybe (Tree Int))
renderTOPtop0extendv = lens _renderTOPtop0extendv (\a b -> a {_renderTOPtop0extendv = b})
renderTOPtop0 :: Lens' TOP (Maybe (Tree TOP))
renderTOPtop0 = lens _renderTOPtop0 (\a b -> a {_renderTOPtop0 = b})
renderTOPtop3extendw :: Lens' TOP (Maybe (Tree Int))
renderTOPtop3extendw = lens _renderTOPtop3extendw (\a b -> a {_renderTOPtop3extendw = b})
renderTOPtop0filter :: Lens' TOP (Maybe (Tree Int))
renderTOPtop0filter = lens _renderTOPtop0filter (\a b -> a {_renderTOPtop0filter = b})
renderTOPpolygonoffsetfactor :: Lens' TOP (Maybe (Tree Float))
renderTOPpolygonoffsetfactor = lens _renderTOPpolygonoffsetfactor (\a b -> a {_renderTOPpolygonoffsetfactor = b})
renderTOPpolygonoffset :: Lens' TOP (Maybe (Tree Bool))
renderTOPpolygonoffset = lens _renderTOPpolygonoffset (\a b -> a {_renderTOPpolygonoffset = b})
renderTOPcropright :: Lens' TOP (Maybe (Tree Float))
renderTOPcropright = lens _renderTOPcropright (\a b -> a {_renderTOPcropright = b})
renderTOPtop3anisotropy :: Lens' TOP (Maybe (Tree Int))
renderTOPtop3anisotropy = lens _renderTOPtop3anisotropy (\a b -> a {_renderTOPtop3anisotropy = b})
renderTOPtop3extendv :: Lens' TOP (Maybe (Tree Int))
renderTOPtop3extendv = lens _renderTOPtop3extendv (\a b -> a {_renderTOPtop3extendv = b})
renderTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
renderTOPresolutionh = lens _renderTOPresolutionh (\a b -> a {_renderTOPresolutionh = b})
renderTOPtop3filter :: Lens' TOP (Maybe (Tree Int))
renderTOPtop3filter = lens _renderTOPtop3filter (\a b -> a {_renderTOPtop3filter = b})
renderTOPallowbufblending :: Lens' TOP (Maybe (Tree Bool))
renderTOPallowbufblending = lens _renderTOPallowbufblending (\a b -> a {_renderTOPallowbufblending = b})
renderTOPtop3 :: Lens' TOP (Maybe (Tree TOP))
renderTOPtop3 = lens _renderTOPtop3 (\a b -> a {_renderTOPtop3 = b})
renderTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
renderTOPaspect1 = lens _renderTOPaspect1 (\a b -> a {_renderTOPaspect1 = b})
renderTOPtop4extendu :: Lens' TOP (Maybe (Tree Int))
renderTOPtop4extendu = lens _renderTOPtop4extendu (\a b -> a {_renderTOPtop4extendu = b})
renderTOPcoloroutputneeded :: Lens' TOP (Maybe (Tree Bool))
renderTOPcoloroutputneeded = lens _renderTOPcoloroutputneeded (\a b -> a {_renderTOPcoloroutputneeded = b})
renderTOPtop1extendu :: Lens' TOP (Maybe (Tree Int))
renderTOPtop1extendu = lens _renderTOPtop1extendu (\a b -> a {_renderTOPtop1extendu = b})
renderTOPalphatocoverage :: Lens' TOP (Maybe (Tree Bool))
renderTOPalphatocoverage = lens _renderTOPalphatocoverage (\a b -> a {_renderTOPalphatocoverage = b})
renderTOPtop3extendu :: Lens' TOP (Maybe (Tree Int))
renderTOPtop3extendu = lens _renderTOPtop3extendu (\a b -> a {_renderTOPtop3extendu = b})
renderTOPtop2anisotropy :: Lens' TOP (Maybe (Tree Int))
renderTOPtop2anisotropy = lens _renderTOPtop2anisotropy (\a b -> a {_renderTOPtop2anisotropy = b})
renderTOPcropleftunit :: Lens' TOP (Maybe (Tree Int))
renderTOPcropleftunit = lens _renderTOPcropleftunit (\a b -> a {_renderTOPcropleftunit = b})
renderTOPtop1extendw :: Lens' TOP (Maybe (Tree Int))
renderTOPtop1extendw = lens _renderTOPtop1extendw (\a b -> a {_renderTOPtop1extendw = b})
renderTOPtop2extendv :: Lens' TOP (Maybe (Tree Int))
renderTOPtop2extendv = lens _renderTOPtop2extendv (\a b -> a {_renderTOPtop2extendv = b})
renderTOPtop4anisotropy :: Lens' TOP (Maybe (Tree Int))
renderTOPtop4anisotropy = lens _renderTOPtop4anisotropy (\a b -> a {_renderTOPtop4anisotropy = b})
renderTOPtop4 :: Lens' TOP (Maybe (Tree TOP))
renderTOPtop4 = lens _renderTOPtop4 (\a b -> a {_renderTOPtop4 = b})
renderTOPoverdrawlimit :: Lens' TOP (Maybe (Tree Int))
renderTOPoverdrawlimit = lens _renderTOPoverdrawlimit (\a b -> a {_renderTOPoverdrawlimit = b})
renderTOPvalue1 :: Lens' TOP (Vec4)
renderTOPvalue1 = lens _renderTOPvalue1 (\a b -> a {_renderTOPvalue1 = b})
renderTOPtop0extendu :: Lens' TOP (Maybe (Tree Int))
renderTOPtop0extendu = lens _renderTOPtop0extendu (\a b -> a {_renderTOPtop0extendu = b})
renderTOPvalue0 :: Lens' TOP (Vec4)
renderTOPvalue0 = lens _renderTOPvalue0 (\a b -> a {_renderTOPvalue0 = b})
renderTOPdepthpeel :: Lens' TOP (Maybe (Tree Bool))
renderTOPdepthpeel = lens _renderTOPdepthpeel (\a b -> a {_renderTOPdepthpeel = b})
renderTOPtop0extendw :: Lens' TOP (Maybe (Tree Int))
renderTOPtop0extendw = lens _renderTOPtop0extendw (\a b -> a {_renderTOPtop0extendw = b})
renderTOPtranspeellayers :: Lens' TOP (Maybe (Tree Int))
renderTOPtranspeellayers = lens _renderTOPtranspeellayers (\a b -> a {_renderTOPtranspeellayers = b})
renderTOPtop1anisotropy :: Lens' TOP (Maybe (Tree Int))
renderTOPtop1anisotropy = lens _renderTOPtop1anisotropy (\a b -> a {_renderTOPtop1anisotropy = b})
renderTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
renderTOPoutputresolution = lens _renderTOPoutputresolution (\a b -> a {_renderTOPoutputresolution = b})
renderTOPuniname3 :: Lens' TOP (Maybe (Tree ByteString))
renderTOPuniname3 = lens _renderTOPuniname3 (\a b -> a {_renderTOPuniname3 = b})
renderTOPnpasses :: Lens' TOP (Maybe (Tree Int))
renderTOPnpasses = lens _renderTOPnpasses (\a b -> a {_renderTOPnpasses = b})
renderTOPchanmask :: Lens' TOP (Maybe (Tree Int))
renderTOPchanmask = lens _renderTOPchanmask (\a b -> a {_renderTOPchanmask = b})
renderTOPcroptop :: Lens' TOP (Maybe (Tree Float))
renderTOPcroptop = lens _renderTOPcroptop (\a b -> a {_renderTOPcroptop = b})
renderTOPtop2filter :: Lens' TOP (Maybe (Tree Int))
renderTOPtop2filter = lens _renderTOPtop2filter (\a b -> a {_renderTOPtop2filter = b})

constantTOPresmult :: Lens' TOP (Maybe (Tree Bool))
constantTOPresmult = lens _constantTOPresmult (\a b -> a {_constantTOPresmult = b})
constantTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
constantTOPaspect2 = lens _constantTOPaspect2 (\a b -> a {_constantTOPaspect2 = b})
constantTOPformat :: Lens' TOP (Maybe (Tree Int))
constantTOPformat = lens _constantTOPformat (\a b -> a {_constantTOPformat = b})
constantTOPrgbaunit :: Lens' TOP (Maybe (Tree Int))
constantTOPrgbaunit = lens _constantTOPrgbaunit (\a b -> a {_constantTOPrgbaunit = b})
constantTOPmultrgbbyalpha :: Lens' TOP (Maybe (Tree Bool))
constantTOPmultrgbbyalpha = lens _constantTOPmultrgbbyalpha (\a b -> a {_constantTOPmultrgbbyalpha = b})
constantTOPnpasses :: Lens' TOP (Maybe (Tree Int))
constantTOPnpasses = lens _constantTOPnpasses (\a b -> a {_constantTOPnpasses = b})
constantTOPcolor :: Lens' TOP (Vec3)
constantTOPcolor = lens _constantTOPcolor (\a b -> a {_constantTOPcolor = b})
constantTOPalpha :: Lens' TOP (Maybe (Tree Float))
constantTOPalpha = lens _constantTOPalpha (\a b -> a {_constantTOPalpha = b})
constantTOPresmenu :: Lens' TOP (Maybe (Tree Int))
constantTOPresmenu = lens _constantTOPresmenu (\a b -> a {_constantTOPresmenu = b})
constantTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
constantTOPoutputresolution = lens _constantTOPoutputresolution (\a b -> a {_constantTOPoutputresolution = b})
constantTOPfillmode :: Lens' TOP (Maybe (Tree Int))
constantTOPfillmode = lens _constantTOPfillmode (\a b -> a {_constantTOPfillmode = b})
constantTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
constantTOPresolutionh = lens _constantTOPresolutionh (\a b -> a {_constantTOPresolutionh = b})
constantTOPchanmask :: Lens' TOP (Maybe (Tree Int))
constantTOPchanmask = lens _constantTOPchanmask (\a b -> a {_constantTOPchanmask = b})
constantTOParmenu :: Lens' TOP (Maybe (Tree Int))
constantTOParmenu = lens _constantTOParmenu (\a b -> a {_constantTOParmenu = b})
constantTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
constantTOPfiltertype = lens _constantTOPfiltertype (\a b -> a {_constantTOPfiltertype = b})
constantTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
constantTOPaspect1 = lens _constantTOPaspect1 (\a b -> a {_constantTOPaspect1 = b})
constantTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
constantTOPresolutionw = lens _constantTOPresolutionw (\a b -> a {_constantTOPresolutionw = b})
constantTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
constantTOPoutputaspect = lens _constantTOPoutputaspect (\a b -> a {_constantTOPoutputaspect = b})
constantTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
constantTOPinputfiltertype = lens _constantTOPinputfiltertype (\a b -> a {_constantTOPinputfiltertype = b})

screengrabTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
screengrabTOPaspect2 = lens _screengrabTOPaspect2 (\a b -> a {_screengrabTOPaspect2 = b})
screengrabTOPformat :: Lens' TOP (Maybe (Tree Int))
screengrabTOPformat = lens _screengrabTOPformat (\a b -> a {_screengrabTOPformat = b})
screengrabTOPactive :: Lens' TOP (Maybe (Tree Bool))
screengrabTOPactive = lens _screengrabTOPactive (\a b -> a {_screengrabTOPactive = b})
screengrabTOPbottomunit :: Lens' TOP (Maybe (Tree Int))
screengrabTOPbottomunit = lens _screengrabTOPbottomunit (\a b -> a {_screengrabTOPbottomunit = b})
screengrabTOPactivepulse :: Lens' TOP (Maybe (Tree Bool))
screengrabTOPactivepulse = lens _screengrabTOPactivepulse (\a b -> a {_screengrabTOPactivepulse = b})
screengrabTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
screengrabTOPinputfiltertype = lens _screengrabTOPinputfiltertype (\a b -> a {_screengrabTOPinputfiltertype = b})
screengrabTOPchanmask :: Lens' TOP (Maybe (Tree Int))
screengrabTOPchanmask = lens _screengrabTOPchanmask (\a b -> a {_screengrabTOPchanmask = b})
screengrabTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
screengrabTOPoutputresolution = lens _screengrabTOPoutputresolution (\a b -> a {_screengrabTOPoutputresolution = b})
screengrabTOPresmult :: Lens' TOP (Maybe (Tree Bool))
screengrabTOPresmult = lens _screengrabTOPresmult (\a b -> a {_screengrabTOPresmult = b})
screengrabTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
screengrabTOPresolutionw = lens _screengrabTOPresolutionw (\a b -> a {_screengrabTOPresolutionw = b})
screengrabTOParmenu :: Lens' TOP (Maybe (Tree Int))
screengrabTOParmenu = lens _screengrabTOParmenu (\a b -> a {_screengrabTOParmenu = b})
screengrabTOPtop :: Lens' TOP (Maybe (Tree Float))
screengrabTOPtop = lens _screengrabTOPtop (\a b -> a {_screengrabTOPtop = b})
screengrabTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
screengrabTOPfiltertype = lens _screengrabTOPfiltertype (\a b -> a {_screengrabTOPfiltertype = b})
screengrabTOPbottom :: Lens' TOP (Maybe (Tree Float))
screengrabTOPbottom = lens _screengrabTOPbottom (\a b -> a {_screengrabTOPbottom = b})
screengrabTOPleftunit :: Lens' TOP (Maybe (Tree Int))
screengrabTOPleftunit = lens _screengrabTOPleftunit (\a b -> a {_screengrabTOPleftunit = b})
screengrabTOPleft :: Lens' TOP (Maybe (Tree Float))
screengrabTOPleft = lens _screengrabTOPleft (\a b -> a {_screengrabTOPleft = b})
screengrabTOPresmenu :: Lens' TOP (Maybe (Tree Int))
screengrabTOPresmenu = lens _screengrabTOPresmenu (\a b -> a {_screengrabTOPresmenu = b})
screengrabTOPdelayed :: Lens' TOP (Maybe (Tree Bool))
screengrabTOPdelayed = lens _screengrabTOPdelayed (\a b -> a {_screengrabTOPdelayed = b})
screengrabTOPrightunit :: Lens' TOP (Maybe (Tree Int))
screengrabTOPrightunit = lens _screengrabTOPrightunit (\a b -> a {_screengrabTOPrightunit = b})
screengrabTOPfillmode :: Lens' TOP (Maybe (Tree Int))
screengrabTOPfillmode = lens _screengrabTOPfillmode (\a b -> a {_screengrabTOPfillmode = b})
screengrabTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
screengrabTOPresolutionh = lens _screengrabTOPresolutionh (\a b -> a {_screengrabTOPresolutionh = b})
screengrabTOPtopunit :: Lens' TOP (Maybe (Tree Int))
screengrabTOPtopunit = lens _screengrabTOPtopunit (\a b -> a {_screengrabTOPtopunit = b})
screengrabTOPnpasses :: Lens' TOP (Maybe (Tree Int))
screengrabTOPnpasses = lens _screengrabTOPnpasses (\a b -> a {_screengrabTOPnpasses = b})
screengrabTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
screengrabTOPaspect1 = lens _screengrabTOPaspect1 (\a b -> a {_screengrabTOPaspect1 = b})
screengrabTOPright :: Lens' TOP (Maybe (Tree Float))
screengrabTOPright = lens _screengrabTOPright (\a b -> a {_screengrabTOPright = b})
screengrabTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
screengrabTOPoutputaspect = lens _screengrabTOPoutputaspect (\a b -> a {_screengrabTOPoutputaspect = b})

realsenseTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
realsenseTOPaspect2 = lens _realsenseTOPaspect2 (\a b -> a {_realsenseTOPaspect2 = b})
realsenseTOPformat :: Lens' TOP (Maybe (Tree Int))
realsenseTOPformat = lens _realsenseTOPformat (\a b -> a {_realsenseTOPformat = b})
realsenseTOPactive :: Lens' TOP (Maybe (Tree Bool))
realsenseTOPactive = lens _realsenseTOPactive (\a b -> a {_realsenseTOPactive = b})
realsenseTOPimage :: Lens' TOP (Maybe (Tree Int))
realsenseTOPimage = lens _realsenseTOPimage (\a b -> a {_realsenseTOPimage = b})
realsenseTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
realsenseTOPinputfiltertype = lens _realsenseTOPinputfiltertype (\a b -> a {_realsenseTOPinputfiltertype = b})
realsenseTOPchanmask :: Lens' TOP (Maybe (Tree Int))
realsenseTOPchanmask = lens _realsenseTOPchanmask (\a b -> a {_realsenseTOPchanmask = b})
realsenseTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
realsenseTOPoutputresolution = lens _realsenseTOPoutputresolution (\a b -> a {_realsenseTOPoutputresolution = b})
realsenseTOPfillmode :: Lens' TOP (Maybe (Tree Int))
realsenseTOPfillmode = lens _realsenseTOPfillmode (\a b -> a {_realsenseTOPfillmode = b})
realsenseTOPcolorres :: Lens' TOP (Maybe (Tree ByteString))
realsenseTOPcolorres = lens _realsenseTOPcolorres (\a b -> a {_realsenseTOPcolorres = b})
realsenseTOPapi :: Lens' TOP (Maybe (Tree Int))
realsenseTOPapi = lens _realsenseTOPapi (\a b -> a {_realsenseTOPapi = b})
realsenseTOParmenu :: Lens' TOP (Maybe (Tree Int))
realsenseTOParmenu = lens _realsenseTOParmenu (\a b -> a {_realsenseTOParmenu = b})
realsenseTOPtradeoff :: Lens' TOP (Maybe (Tree Int))
realsenseTOPtradeoff = lens _realsenseTOPtradeoff (\a b -> a {_realsenseTOPtradeoff = b})
realsenseTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
realsenseTOPresolutionw = lens _realsenseTOPresolutionw (\a b -> a {_realsenseTOPresolutionw = b})
realsenseTOPmirrorimage :: Lens' TOP (Maybe (Tree Bool))
realsenseTOPmirrorimage = lens _realsenseTOPmirrorimage (\a b -> a {_realsenseTOPmirrorimage = b})
realsenseTOPresmult :: Lens' TOP (Maybe (Tree Bool))
realsenseTOPresmult = lens _realsenseTOPresmult (\a b -> a {_realsenseTOPresmult = b})
realsenseTOPsensor :: Lens' TOP (Maybe (Tree ByteString))
realsenseTOPsensor = lens _realsenseTOPsensor (\a b -> a {_realsenseTOPsensor = b})
realsenseTOPresmenu :: Lens' TOP (Maybe (Tree Int))
realsenseTOPresmenu = lens _realsenseTOPresmenu (\a b -> a {_realsenseTOPresmenu = b})
realsenseTOPmaxdepth :: Lens' TOP (Maybe (Tree Float))
realsenseTOPmaxdepth = lens _realsenseTOPmaxdepth (\a b -> a {_realsenseTOPmaxdepth = b})
realsenseTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
realsenseTOPresolutionh = lens _realsenseTOPresolutionh (\a b -> a {_realsenseTOPresolutionh = b})
realsenseTOPnpasses :: Lens' TOP (Maybe (Tree Int))
realsenseTOPnpasses = lens _realsenseTOPnpasses (\a b -> a {_realsenseTOPnpasses = b})
realsenseTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
realsenseTOPaspect1 = lens _realsenseTOPaspect1 (\a b -> a {_realsenseTOPaspect1 = b})
realsenseTOPmodel :: Lens' TOP (Maybe (Tree Int))
realsenseTOPmodel = lens _realsenseTOPmodel (\a b -> a {_realsenseTOPmodel = b})
realsenseTOPdefaulttradeoff :: Lens' TOP (Maybe (Tree Bool))
realsenseTOPdefaulttradeoff = lens _realsenseTOPdefaulttradeoff (\a b -> a {_realsenseTOPdefaulttradeoff = b})
realsenseTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
realsenseTOPoutputaspect = lens _realsenseTOPoutputaspect (\a b -> a {_realsenseTOPoutputaspect = b})
realsenseTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
realsenseTOPfiltertype = lens _realsenseTOPfiltertype (\a b -> a {_realsenseTOPfiltertype = b})

reorderTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
reorderTOPaspect2 = lens _reorderTOPaspect2 (\a b -> a {_reorderTOPaspect2 = b})
reorderTOPformat :: Lens' TOP (Maybe (Tree Int))
reorderTOPformat = lens _reorderTOPformat (\a b -> a {_reorderTOPformat = b})
reorderTOPoutputgreenchan :: Lens' TOP (Maybe (Tree Int))
reorderTOPoutputgreenchan = lens _reorderTOPoutputgreenchan (\a b -> a {_reorderTOPoutputgreenchan = b})
reorderTOPoutputred :: Lens' TOP (Maybe (Tree Int))
reorderTOPoutputred = lens _reorderTOPoutputred (\a b -> a {_reorderTOPoutputred = b})
reorderTOPchanmask :: Lens' TOP (Maybe (Tree Int))
reorderTOPchanmask = lens _reorderTOPchanmask (\a b -> a {_reorderTOPchanmask = b})
reorderTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
reorderTOPoutputresolution = lens _reorderTOPoutputresolution (\a b -> a {_reorderTOPoutputresolution = b})
reorderTOPfillmode :: Lens' TOP (Maybe (Tree Int))
reorderTOPfillmode = lens _reorderTOPfillmode (\a b -> a {_reorderTOPfillmode = b})
reorderTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
reorderTOPresolutionw = lens _reorderTOPresolutionw (\a b -> a {_reorderTOPresolutionw = b})
reorderTOParmenu :: Lens' TOP (Maybe (Tree Int))
reorderTOParmenu = lens _reorderTOParmenu (\a b -> a {_reorderTOParmenu = b})
reorderTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
reorderTOPfiltertype = lens _reorderTOPfiltertype (\a b -> a {_reorderTOPfiltertype = b})
reorderTOPoutputblue :: Lens' TOP (Maybe (Tree Int))
reorderTOPoutputblue = lens _reorderTOPoutputblue (\a b -> a {_reorderTOPoutputblue = b})
reorderTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
reorderTOPinputfiltertype = lens _reorderTOPinputfiltertype (\a b -> a {_reorderTOPinputfiltertype = b})
reorderTOPresmult :: Lens' TOP (Maybe (Tree Bool))
reorderTOPresmult = lens _reorderTOPresmult (\a b -> a {_reorderTOPresmult = b})
reorderTOPoutputgreen :: Lens' TOP (Maybe (Tree Int))
reorderTOPoutputgreen = lens _reorderTOPoutputgreen (\a b -> a {_reorderTOPoutputgreen = b})
reorderTOPresmenu :: Lens' TOP (Maybe (Tree Int))
reorderTOPresmenu = lens _reorderTOPresmenu (\a b -> a {_reorderTOPresmenu = b})
reorderTOPoutputalpha :: Lens' TOP (Maybe (Tree Int))
reorderTOPoutputalpha = lens _reorderTOPoutputalpha (\a b -> a {_reorderTOPoutputalpha = b})
reorderTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
reorderTOPresolutionh = lens _reorderTOPresolutionh (\a b -> a {_reorderTOPresolutionh = b})
reorderTOPnpasses :: Lens' TOP (Maybe (Tree Int))
reorderTOPnpasses = lens _reorderTOPnpasses (\a b -> a {_reorderTOPnpasses = b})
reorderTOPoutputbluechan :: Lens' TOP (Maybe (Tree Int))
reorderTOPoutputbluechan = lens _reorderTOPoutputbluechan (\a b -> a {_reorderTOPoutputbluechan = b})
reorderTOPoutputredchan :: Lens' TOP (Maybe (Tree Int))
reorderTOPoutputredchan = lens _reorderTOPoutputredchan (\a b -> a {_reorderTOPoutputredchan = b})
reorderTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
reorderTOPaspect1 = lens _reorderTOPaspect1 (\a b -> a {_reorderTOPaspect1 = b})
reorderTOPoutputalphachan :: Lens' TOP (Maybe (Tree Int))
reorderTOPoutputalphachan = lens _reorderTOPoutputalphachan (\a b -> a {_reorderTOPoutputalphachan = b})
reorderTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
reorderTOPoutputaspect = lens _reorderTOPoutputaspect (\a b -> a {_reorderTOPoutputaspect = b})

monochromeTOPresmult :: Lens' TOP (Maybe (Tree Bool))
monochromeTOPresmult = lens _monochromeTOPresmult (\a b -> a {_monochromeTOPresmult = b})
monochromeTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
monochromeTOPaspect2 = lens _monochromeTOPaspect2 (\a b -> a {_monochromeTOPaspect2 = b})
monochromeTOPformat :: Lens' TOP (Maybe (Tree Int))
monochromeTOPformat = lens _monochromeTOPformat (\a b -> a {_monochromeTOPformat = b})
monochromeTOPresmenu :: Lens' TOP (Maybe (Tree Int))
monochromeTOPresmenu = lens _monochromeTOPresmenu (\a b -> a {_monochromeTOPresmenu = b})
monochromeTOPnpasses :: Lens' TOP (Maybe (Tree Int))
monochromeTOPnpasses = lens _monochromeTOPnpasses (\a b -> a {_monochromeTOPnpasses = b})
monochromeTOPchanmask :: Lens' TOP (Maybe (Tree Int))
monochromeTOPchanmask = lens _monochromeTOPchanmask (\a b -> a {_monochromeTOPchanmask = b})
monochromeTOPalpha :: Lens' TOP (Maybe (Tree Int))
monochromeTOPalpha = lens _monochromeTOPalpha (\a b -> a {_monochromeTOPalpha = b})
monochromeTOPmono :: Lens' TOP (Maybe (Tree Float))
monochromeTOPmono = lens _monochromeTOPmono (\a b -> a {_monochromeTOPmono = b})
monochromeTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
monochromeTOPoutputresolution = lens _monochromeTOPoutputresolution (\a b -> a {_monochromeTOPoutputresolution = b})
monochromeTOPfillmode :: Lens' TOP (Maybe (Tree Int))
monochromeTOPfillmode = lens _monochromeTOPfillmode (\a b -> a {_monochromeTOPfillmode = b})
monochromeTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
monochromeTOPresolutionh = lens _monochromeTOPresolutionh (\a b -> a {_monochromeTOPresolutionh = b})
monochromeTOParmenu :: Lens' TOP (Maybe (Tree Int))
monochromeTOParmenu = lens _monochromeTOParmenu (\a b -> a {_monochromeTOParmenu = b})
monochromeTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
monochromeTOPfiltertype = lens _monochromeTOPfiltertype (\a b -> a {_monochromeTOPfiltertype = b})
monochromeTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
monochromeTOPaspect1 = lens _monochromeTOPaspect1 (\a b -> a {_monochromeTOPaspect1 = b})
monochromeTOPrgb :: Lens' TOP (Maybe (Tree Int))
monochromeTOPrgb = lens _monochromeTOPrgb (\a b -> a {_monochromeTOPrgb = b})
monochromeTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
monochromeTOPresolutionw = lens _monochromeTOPresolutionw (\a b -> a {_monochromeTOPresolutionw = b})
monochromeTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
monochromeTOPoutputaspect = lens _monochromeTOPoutputaspect (\a b -> a {_monochromeTOPoutputaspect = b})
monochromeTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
monochromeTOPinputfiltertype = lens _monochromeTOPinputfiltertype (\a b -> a {_monochromeTOPinputfiltertype = b})

glslTOPdepth :: Lens' TOP (Maybe (Tree Int))
glslTOPdepth = lens _glslTOPdepth (\a b -> a {_glslTOPdepth = b})
glslTOPvalue3 :: Lens' TOP (Vec4)
glslTOPvalue3 = lens _glslTOPvalue3 (\a b -> a {_glslTOPvalue3 = b})
glslTOPglslversion :: Lens' TOP (Maybe (Tree Int))
glslTOPglslversion = lens _glslTOPglslversion (\a b -> a {_glslTOPglslversion = b})
glslTOPfillmode :: Lens' TOP (Maybe (Tree Int))
glslTOPfillmode = lens _glslTOPfillmode (\a b -> a {_glslTOPfillmode = b})
glslTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
glslTOPresolutionw = lens _glslTOPresolutionw (\a b -> a {_glslTOPresolutionw = b})
glslTOPacsize0 :: Lens' TOP (Maybe (Tree Int))
glslTOPacsize0 = lens _glslTOPacsize0 (\a b -> a {_glslTOPacsize0 = b})
glslTOPclearvalue :: Lens' TOP (Vec4)
glslTOPclearvalue = lens _glslTOPclearvalue (\a b -> a {_glslTOPclearvalue = b})
glslTOPvalue24 :: Lens' TOP (Vec4)
glslTOPvalue24 = lens _glslTOPvalue24 (\a b -> a {_glslTOPvalue24 = b})
glslTOPdispatchsizey :: Lens' TOP (Maybe (Tree Int))
glslTOPdispatchsizey = lens _glslTOPdispatchsizey (\a b -> a {_glslTOPdispatchsizey = b})
glslTOPvalue10 :: Lens' TOP (Vec4)
glslTOPvalue10 = lens _glslTOPvalue10 (\a b -> a {_glslTOPvalue10 = b})
glslTOPresmenu :: Lens' TOP (Maybe (Tree Int))
glslTOPresmenu = lens _glslTOPresmenu (\a b -> a {_glslTOPresmenu = b})
glslTOPuniname12 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname12 = lens _glslTOPuniname12 (\a b -> a {_glslTOPuniname12 = b})
glslTOPuniname25 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname25 = lens _glslTOPuniname25 (\a b -> a {_glslTOPuniname25 = b})
glslTOPchopunitype9 :: Lens' TOP (Maybe (Tree Int))
glslTOPchopunitype9 = lens _glslTOPchopunitype9 (\a b -> a {_glslTOPchopunitype9 = b})
glslTOPacinitval0 :: Lens' TOP (Maybe (Tree Int))
glslTOPacinitval0 = lens _glslTOPacinitval0 (\a b -> a {_glslTOPacinitval0 = b})
glslTOPuniname1 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname1 = lens _glslTOPuniname1 (\a b -> a {_glslTOPuniname1 = b})
glslTOPmatuniname2 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPmatuniname2 = lens _glslTOPmatuniname2 (\a b -> a {_glslTOPmatuniname2 = b})
glslTOPuniname10 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname10 = lens _glslTOPuniname10 (\a b -> a {_glslTOPuniname10 = b})
glslTOPchopuniname7 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPchopuniname7 = lens _glslTOPchopuniname7 (\a b -> a {_glslTOPchopuniname7 = b})
glslTOPuniname11 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname11 = lens _glslTOPuniname11 (\a b -> a {_glslTOPuniname11 = b})
glslTOPvalue23 :: Lens' TOP (Vec4)
glslTOPvalue23 = lens _glslTOPvalue23 (\a b -> a {_glslTOPvalue23 = b})
glslTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
glslTOPoutputaspect = lens _glslTOPoutputaspect (\a b -> a {_glslTOPoutputaspect = b})
glslTOPvalue19 :: Lens' TOP (Vec4)
glslTOPvalue19 = lens _glslTOPvalue19 (\a b -> a {_glslTOPvalue19 = b})
glslTOPchopunitype2 :: Lens' TOP (Maybe (Tree Int))
glslTOPchopunitype2 = lens _glslTOPchopunitype2 (\a b -> a {_glslTOPchopunitype2 = b})
glslTOPuniname5 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname5 = lens _glslTOPuniname5 (\a b -> a {_glslTOPuniname5 = b})
glslTOPuniname4 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname4 = lens _glslTOPuniname4 (\a b -> a {_glslTOPuniname4 = b})
glslTOPuniname23 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname23 = lens _glslTOPuniname23 (\a b -> a {_glslTOPuniname23 = b})
glslTOPvalue2 :: Lens' TOP (Vec4)
glslTOPvalue2 = lens _glslTOPvalue2 (\a b -> a {_glslTOPvalue2 = b})
glslTOPresmult :: Lens' TOP (Maybe (Tree Bool))
glslTOPresmult = lens _glslTOPresmult (\a b -> a {_glslTOPresmult = b})
glslTOPchopuniname9 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPchopuniname9 = lens _glslTOPchopuniname9 (\a b -> a {_glslTOPchopuniname9 = b})
glslTOPacsize1 :: Lens' TOP (Maybe (Tree Int))
glslTOPacsize1 = lens _glslTOPacsize1 (\a b -> a {_glslTOPacsize1 = b})
glslTOPvalue13 :: Lens' TOP (Vec4)
glslTOPvalue13 = lens _glslTOPvalue13 (\a b -> a {_glslTOPvalue13 = b})
glslTOPacsingleval1 :: Lens' TOP (Maybe (Tree Int))
glslTOPacsingleval1 = lens _glslTOPacsingleval1 (\a b -> a {_glslTOPacsingleval1 = b})
glslTOPacinitval1 :: Lens' TOP (Maybe (Tree Int))
glslTOPacinitval1 = lens _glslTOPacinitval1 (\a b -> a {_glslTOPacinitval1 = b})
glslTOPchopuniname4 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPchopuniname4 = lens _glslTOPchopuniname4 (\a b -> a {_glslTOPchopuniname4 = b})
glslTOPchop6 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPchop6 = lens _glslTOPchop6 (\a b -> a {_glslTOPchop6 = b})
glslTOPuniname14 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname14 = lens _glslTOPuniname14 (\a b -> a {_glslTOPuniname14 = b})
glslTOPchoparraytype8 :: Lens' TOP (Maybe (Tree Int))
glslTOPchoparraytype8 = lens _glslTOPchoparraytype8 (\a b -> a {_glslTOPchoparraytype8 = b})
glslTOPvalue17 :: Lens' TOP (Vec4)
glslTOPvalue17 = lens _glslTOPvalue17 (\a b -> a {_glslTOPvalue17 = b})
glslTOPchopunitype4 :: Lens' TOP (Maybe (Tree Int))
glslTOPchopunitype4 = lens _glslTOPchopunitype4 (\a b -> a {_glslTOPchopunitype4 = b})
glslTOPchopuniname8 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPchopuniname8 = lens _glslTOPchopuniname8 (\a b -> a {_glslTOPchopuniname8 = b})
glslTOPchanmask :: Lens' TOP (Maybe (Tree Int))
glslTOPchanmask = lens _glslTOPchanmask (\a b -> a {_glslTOPchanmask = b})
glslTOPchopuniname1 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPchopuniname1 = lens _glslTOPchopuniname1 (\a b -> a {_glslTOPchopuniname1 = b})
glslTOPoutputaccess :: Lens' TOP (Maybe (Tree Int))
glslTOPoutputaccess = lens _glslTOPoutputaccess (\a b -> a {_glslTOPoutputaccess = b})
glslTOPuniname2 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname2 = lens _glslTOPuniname2 (\a b -> a {_glslTOPuniname2 = b})
glslTOPvalue6 :: Lens' TOP (Vec4)
glslTOPvalue6 = lens _glslTOPvalue6 (\a b -> a {_glslTOPvalue6 = b})
glslTOParmenu :: Lens' TOP (Maybe (Tree Int))
glslTOParmenu = lens _glslTOParmenu (\a b -> a {_glslTOParmenu = b})
glslTOPuniname3 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname3 = lens _glslTOPuniname3 (\a b -> a {_glslTOPuniname3 = b})
glslTOPvalue21 :: Lens' TOP (Vec4)
glslTOPvalue21 = lens _glslTOPvalue21 (\a b -> a {_glslTOPvalue21 = b})
glslTOPchopunitype3 :: Lens' TOP (Maybe (Tree Int))
glslTOPchopunitype3 = lens _glslTOPchopunitype3 (\a b -> a {_glslTOPchopunitype3 = b})
glslTOPchopunitype6 :: Lens' TOP (Maybe (Tree Int))
glslTOPchopunitype6 = lens _glslTOPchopunitype6 (\a b -> a {_glslTOPchopunitype6 = b})
glslTOPvalue4 :: Lens' TOP (Vec4)
glslTOPvalue4 = lens _glslTOPvalue4 (\a b -> a {_glslTOPvalue4 = b})
glslTOPvalue15 :: Lens' TOP (Vec4)
glslTOPvalue15 = lens _glslTOPvalue15 (\a b -> a {_glslTOPvalue15 = b})
glslTOPchop3 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPchop3 = lens _glslTOPchop3 (\a b -> a {_glslTOPchop3 = b})
glslTOPclearoutputs :: Lens' TOP (Maybe (Tree Bool))
glslTOPclearoutputs = lens _glslTOPclearoutputs (\a b -> a {_glslTOPclearoutputs = b})
glslTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
glslTOPfiltertype = lens _glslTOPfiltertype (\a b -> a {_glslTOPfiltertype = b})
glslTOPuniname20 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname20 = lens _glslTOPuniname20 (\a b -> a {_glslTOPuniname20 = b})
glslTOPmatuniname1 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPmatuniname1 = lens _glslTOPmatuniname1 (\a b -> a {_glslTOPmatuniname1 = b})
glslTOPchopuniname2 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPchopuniname2 = lens _glslTOPchopuniname2 (\a b -> a {_glslTOPchopuniname2 = b})
glslTOPuniname9 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname9 = lens _glslTOPuniname9 (\a b -> a {_glslTOPuniname9 = b})
glslTOPchoparraytype1 :: Lens' TOP (Maybe (Tree Int))
glslTOPchoparraytype1 = lens _glslTOPchoparraytype1 (\a b -> a {_glslTOPchoparraytype1 = b})
glslTOPchopuniname0 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPchopuniname0 = lens _glslTOPchopuniname0 (\a b -> a {_glslTOPchopuniname0 = b})
glslTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
glslTOPresolutionh = lens _glslTOPresolutionh (\a b -> a {_glslTOPresolutionh = b})
glslTOPuniname27 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname27 = lens _glslTOPuniname27 (\a b -> a {_glslTOPuniname27 = b})
glslTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
glslTOPaspect1 = lens _glslTOPaspect1 (\a b -> a {_glslTOPaspect1 = b})
glslTOPnumcolorbufs :: Lens' TOP (Maybe (Tree Int))
glslTOPnumcolorbufs = lens _glslTOPnumcolorbufs (\a b -> a {_glslTOPnumcolorbufs = b})
glslTOPinputmapping :: Lens' TOP (Maybe (Tree Int))
glslTOPinputmapping = lens _glslTOPinputmapping (\a b -> a {_glslTOPinputmapping = b})
glslTOPvalue27 :: Lens' TOP (Vec4)
glslTOPvalue27 = lens _glslTOPvalue27 (\a b -> a {_glslTOPvalue27 = b})
glslTOPchop2 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPchop2 = lens _glslTOPchop2 (\a b -> a {_glslTOPchop2 = b})
glslTOPvalue8 :: Lens' TOP (Vec4)
glslTOPvalue8 = lens _glslTOPvalue8 (\a b -> a {_glslTOPvalue8 = b})
glslTOPchop5 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPchop5 = lens _glslTOPchop5 (\a b -> a {_glslTOPchop5 = b})
glslTOPuniname13 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname13 = lens _glslTOPuniname13 (\a b -> a {_glslTOPuniname13 = b})
glslTOPchopunitype0 :: Lens' TOP (Maybe (Tree Int))
glslTOPchopunitype0 = lens _glslTOPchopunitype0 (\a b -> a {_glslTOPchopunitype0 = b})
glslTOPacinitval2 :: Lens' TOP (Maybe (Tree Int))
glslTOPacinitval2 = lens _glslTOPacinitval2 (\a b -> a {_glslTOPacinitval2 = b})
glslTOPacbinding3 :: Lens' TOP (Maybe (Tree Int))
glslTOPacbinding3 = lens _glslTOPacbinding3 (\a b -> a {_glslTOPacbinding3 = b})
glslTOPuniname28 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname28 = lens _glslTOPuniname28 (\a b -> a {_glslTOPuniname28 = b})
glslTOPvalue0 :: Lens' TOP (Vec4)
glslTOPvalue0 = lens _glslTOPvalue0 (\a b -> a {_glslTOPvalue0 = b})
glslTOPacchopval2 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPacchopval2 = lens _glslTOPacchopval2 (\a b -> a {_glslTOPacchopval2 = b})
glslTOPchoparraytype4 :: Lens' TOP (Maybe (Tree Int))
glslTOPchoparraytype4 = lens _glslTOPchoparraytype4 (\a b -> a {_glslTOPchoparraytype4 = b})
glslTOPchopunitype8 :: Lens' TOP (Maybe (Tree Int))
glslTOPchopunitype8 = lens _glslTOPchopunitype8 (\a b -> a {_glslTOPchopunitype8 = b})
glslTOPinputextendw :: Lens' TOP (Maybe (Tree Int))
glslTOPinputextendw = lens _glslTOPinputextendw (\a b -> a {_glslTOPinputextendw = b})
glslTOPuniname0 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname0 = lens _glslTOPuniname0 (\a b -> a {_glslTOPuniname0 = b})
glslTOPuniname26 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname26 = lens _glslTOPuniname26 (\a b -> a {_glslTOPuniname26 = b})
glslTOPacsize3 :: Lens' TOP (Maybe (Tree Int))
glslTOPacsize3 = lens _glslTOPacsize3 (\a b -> a {_glslTOPacsize3 = b})
glslTOPcustomdepth :: Lens' TOP (Maybe (Tree Int))
glslTOPcustomdepth = lens _glslTOPcustomdepth (\a b -> a {_glslTOPcustomdepth = b})
glslTOPmatuniname3 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPmatuniname3 = lens _glslTOPmatuniname3 (\a b -> a {_glslTOPmatuniname3 = b})
glslTOPacbinding2 :: Lens' TOP (Maybe (Tree Int))
glslTOPacbinding2 = lens _glslTOPacbinding2 (\a b -> a {_glslTOPacbinding2 = b})
glslTOPchoparraytype5 :: Lens' TOP (Maybe (Tree Int))
glslTOPchoparraytype5 = lens _glslTOPchoparraytype5 (\a b -> a {_glslTOPchoparraytype5 = b})
glslTOPnval :: Lens' TOP (Maybe (Tree Int))
glslTOPnval = lens _glslTOPnval (\a b -> a {_glslTOPnval = b})
glslTOPmode :: Lens' TOP (Maybe (Tree Int))
glslTOPmode = lens _glslTOPmode (\a b -> a {_glslTOPmode = b})
glslTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
glslTOPaspect2 = lens _glslTOPaspect2 (\a b -> a {_glslTOPaspect2 = b})
glslTOPformat :: Lens' TOP (Maybe (Tree Int))
glslTOPformat = lens _glslTOPformat (\a b -> a {_glslTOPformat = b})
glslTOPvalue29 :: Lens' TOP (Vec4)
glslTOPvalue29 = lens _glslTOPvalue29 (\a b -> a {_glslTOPvalue29 = b})
glslTOPacinitval3 :: Lens' TOP (Maybe (Tree Int))
glslTOPacinitval3 = lens _glslTOPacinitval3 (\a b -> a {_glslTOPacinitval3 = b})
glslTOPchopuniname3 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPchopuniname3 = lens _glslTOPchopuniname3 (\a b -> a {_glslTOPchopuniname3 = b})
glslTOPcomputedat :: Lens' TOP (Maybe (Tree DAT))
glslTOPcomputedat = lens _glslTOPcomputedat (\a b -> a {_glslTOPcomputedat = b})
glslTOPacchopval0 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPacchopval0 = lens _glslTOPacchopval0 (\a b -> a {_glslTOPacchopval0 = b})
glslTOPpixeldat :: Lens' TOP (Maybe (Tree DAT))
glslTOPpixeldat = lens _glslTOPpixeldat (\a b -> a {_glslTOPpixeldat = b})
glslTOPvalue20 :: Lens' TOP (Vec4)
glslTOPvalue20 = lens _glslTOPvalue20 (\a b -> a {_glslTOPvalue20 = b})
glslTOPvalue25 :: Lens' TOP (Vec4)
glslTOPvalue25 = lens _glslTOPvalue25 (\a b -> a {_glslTOPvalue25 = b})
glslTOPchoparraytype6 :: Lens' TOP (Maybe (Tree Int))
glslTOPchoparraytype6 = lens _glslTOPchoparraytype6 (\a b -> a {_glslTOPchoparraytype6 = b})
glslTOPchoparraytype9 :: Lens' TOP (Maybe (Tree Int))
glslTOPchoparraytype9 = lens _glslTOPchoparraytype9 (\a b -> a {_glslTOPchoparraytype9 = b})
glslTOPtype :: Lens' TOP (Maybe (Tree Int))
glslTOPtype = lens _glslTOPtype (\a b -> a {_glslTOPtype = b})
glslTOPacsingleval0 :: Lens' TOP (Maybe (Tree Int))
glslTOPacsingleval0 = lens _glslTOPacsingleval0 (\a b -> a {_glslTOPacsingleval0 = b})
glslTOPchopuniname6 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPchopuniname6 = lens _glslTOPchopuniname6 (\a b -> a {_glslTOPchopuniname6 = b})
glslTOPuniname17 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname17 = lens _glslTOPuniname17 (\a b -> a {_glslTOPuniname17 = b})
glslTOPuniname8 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname8 = lens _glslTOPuniname8 (\a b -> a {_glslTOPuniname8 = b})
glslTOPchopuniname5 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPchopuniname5 = lens _glslTOPchopuniname5 (\a b -> a {_glslTOPchopuniname5 = b})
glslTOPmatuniname7 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPmatuniname7 = lens _glslTOPmatuniname7 (\a b -> a {_glslTOPmatuniname7 = b})
glslTOPchop7 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPchop7 = lens _glslTOPchop7 (\a b -> a {_glslTOPchop7 = b})
glslTOPchop9 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPchop9 = lens _glslTOPchop9 (\a b -> a {_glslTOPchop9 = b})
glslTOPenablevectorpage3 :: Lens' TOP (Maybe (Tree Bool))
glslTOPenablevectorpage3 = lens _glslTOPenablevectorpage3 (\a b -> a {_glslTOPenablevectorpage3 = b})
glslTOPchop0 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPchop0 = lens _glslTOPchop0 (\a b -> a {_glslTOPchop0 = b})
glslTOPuniname19 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname19 = lens _glslTOPuniname19 (\a b -> a {_glslTOPuniname19 = b})
glslTOPvalue11 :: Lens' TOP (Vec4)
glslTOPvalue11 = lens _glslTOPvalue11 (\a b -> a {_glslTOPvalue11 = b})
glslTOPuniname7 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname7 = lens _glslTOPuniname7 (\a b -> a {_glslTOPuniname7 = b})
glslTOPloaduniformnames :: Lens' TOP (Maybe (Tree Bool))
glslTOPloaduniformnames = lens _glslTOPloaduniformnames (\a b -> a {_glslTOPloaduniformnames = b})
glslTOPuniname29 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname29 = lens _glslTOPuniname29 (\a b -> a {_glslTOPuniname29 = b})
glslTOPvalue5 :: Lens' TOP (Vec4)
glslTOPvalue5 = lens _glslTOPvalue5 (\a b -> a {_glslTOPvalue5 = b})
glslTOPchop1 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPchop1 = lens _glslTOPchop1 (\a b -> a {_glslTOPchop1 = b})
glslTOPvalue9 :: Lens' TOP (Vec4)
glslTOPvalue9 = lens _glslTOPvalue9 (\a b -> a {_glslTOPvalue9 = b})
glslTOPchop4 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPchop4 = lens _glslTOPchop4 (\a b -> a {_glslTOPchop4 = b})
glslTOPmatuniname9 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPmatuniname9 = lens _glslTOPmatuniname9 (\a b -> a {_glslTOPmatuniname9 = b})
glslTOPdispatchsizez :: Lens' TOP (Maybe (Tree Int))
glslTOPdispatchsizez = lens _glslTOPdispatchsizez (\a b -> a {_glslTOPdispatchsizez = b})
glslTOPchopunitype5 :: Lens' TOP (Maybe (Tree Int))
glslTOPchopunitype5 = lens _glslTOPchopunitype5 (\a b -> a {_glslTOPchopunitype5 = b})
glslTOPchoparraytype7 :: Lens' TOP (Maybe (Tree Int))
glslTOPchoparraytype7 = lens _glslTOPchoparraytype7 (\a b -> a {_glslTOPchoparraytype7 = b})
glslTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
glslTOPinputfiltertype = lens _glslTOPinputfiltertype (\a b -> a {_glslTOPinputfiltertype = b})
glslTOPmatuniname4 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPmatuniname4 = lens _glslTOPmatuniname4 (\a b -> a {_glslTOPmatuniname4 = b})
glslTOPchopunitype1 :: Lens' TOP (Maybe (Tree Int))
glslTOPchopunitype1 = lens _glslTOPchopunitype1 (\a b -> a {_glslTOPchopunitype1 = b})
glslTOPmatuniname8 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPmatuniname8 = lens _glslTOPmatuniname8 (\a b -> a {_glslTOPmatuniname8 = b})
glslTOPvalue26 :: Lens' TOP (Vec4)
glslTOPvalue26 = lens _glslTOPvalue26 (\a b -> a {_glslTOPvalue26 = b})
glslTOPuniname21 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname21 = lens _glslTOPuniname21 (\a b -> a {_glslTOPuniname21 = b})
glslTOPvalue28 :: Lens' TOP (Vec4)
glslTOPvalue28 = lens _glslTOPvalue28 (\a b -> a {_glslTOPvalue28 = b})
glslTOPacsingleval2 :: Lens' TOP (Maybe (Tree Int))
glslTOPacsingleval2 = lens _glslTOPacsingleval2 (\a b -> a {_glslTOPacsingleval2 = b})
glslTOPvalue14 :: Lens' TOP (Vec4)
glslTOPvalue14 = lens _glslTOPvalue14 (\a b -> a {_glslTOPvalue14 = b})
glslTOPuniname24 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname24 = lens _glslTOPuniname24 (\a b -> a {_glslTOPuniname24 = b})
glslTOPacbinding0 :: Lens' TOP (Maybe (Tree Int))
glslTOPacbinding0 = lens _glslTOPacbinding0 (\a b -> a {_glslTOPacbinding0 = b})
glslTOPuniname16 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname16 = lens _glslTOPuniname16 (\a b -> a {_glslTOPuniname16 = b})
glslTOPchoparraytype3 :: Lens' TOP (Maybe (Tree Int))
glslTOPchoparraytype3 = lens _glslTOPchoparraytype3 (\a b -> a {_glslTOPchoparraytype3 = b})
glslTOPnpasses :: Lens' TOP (Maybe (Tree Int))
glslTOPnpasses = lens _glslTOPnpasses (\a b -> a {_glslTOPnpasses = b})
glslTOPchop8 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPchop8 = lens _glslTOPchop8 (\a b -> a {_glslTOPchop8 = b})
glslTOPacchopval1 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPacchopval1 = lens _glslTOPacchopval1 (\a b -> a {_glslTOPacchopval1 = b})
glslTOPacchopval3 :: Lens' TOP (Maybe (Tree CHOP))
glslTOPacchopval3 = lens _glslTOPacchopval3 (\a b -> a {_glslTOPacchopval3 = b})
glslTOPinputextenduv :: Lens' TOP (Maybe (Tree Int))
glslTOPinputextenduv = lens _glslTOPinputextenduv (\a b -> a {_glslTOPinputextenduv = b})
glslTOPvalue22 :: Lens' TOP (Vec4)
glslTOPvalue22 = lens _glslTOPvalue22 (\a b -> a {_glslTOPvalue22 = b})
glslTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
glslTOPoutputresolution = lens _glslTOPoutputresolution (\a b -> a {_glslTOPoutputresolution = b})
glslTOPacsize2 :: Lens' TOP (Maybe (Tree Int))
glslTOPacsize2 = lens _glslTOPacsize2 (\a b -> a {_glslTOPacsize2 = b})
glslTOPmatuniname0 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPmatuniname0 = lens _glslTOPmatuniname0 (\a b -> a {_glslTOPmatuniname0 = b})
glslTOPmatuniname6 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPmatuniname6 = lens _glslTOPmatuniname6 (\a b -> a {_glslTOPmatuniname6 = b})
glslTOPacbinding1 :: Lens' TOP (Maybe (Tree Int))
glslTOPacbinding1 = lens _glslTOPacbinding1 (\a b -> a {_glslTOPacbinding1 = b})
glslTOPuniname15 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname15 = lens _glslTOPuniname15 (\a b -> a {_glslTOPuniname15 = b})
glslTOPvalue1 :: Lens' TOP (Vec4)
glslTOPvalue1 = lens _glslTOPvalue1 (\a b -> a {_glslTOPvalue1 = b})
glslTOPvalue16 :: Lens' TOP (Vec4)
glslTOPvalue16 = lens _glslTOPvalue16 (\a b -> a {_glslTOPvalue16 = b})
glslTOPmatuniname5 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPmatuniname5 = lens _glslTOPmatuniname5 (\a b -> a {_glslTOPmatuniname5 = b})
glslTOPdispatchsizex :: Lens' TOP (Maybe (Tree Int))
glslTOPdispatchsizex = lens _glslTOPdispatchsizex (\a b -> a {_glslTOPdispatchsizex = b})
glslTOPvertexdat :: Lens' TOP (Maybe (Tree DAT))
glslTOPvertexdat = lens _glslTOPvertexdat (\a b -> a {_glslTOPvertexdat = b})
glslTOPchoparraytype2 :: Lens' TOP (Maybe (Tree Int))
glslTOPchoparraytype2 = lens _glslTOPchoparraytype2 (\a b -> a {_glslTOPchoparraytype2 = b})
glslTOPuniname18 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname18 = lens _glslTOPuniname18 (\a b -> a {_glslTOPuniname18 = b})
glslTOPchopunitype7 :: Lens' TOP (Maybe (Tree Int))
glslTOPchopunitype7 = lens _glslTOPchopunitype7 (\a b -> a {_glslTOPchopunitype7 = b})
glslTOPuniname6 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname6 = lens _glslTOPuniname6 (\a b -> a {_glslTOPuniname6 = b})
glslTOPvalue7 :: Lens' TOP (Vec4)
glslTOPvalue7 = lens _glslTOPvalue7 (\a b -> a {_glslTOPvalue7 = b})
glslTOPuniname22 :: Lens' TOP (Maybe (Tree ByteString))
glslTOPuniname22 = lens _glslTOPuniname22 (\a b -> a {_glslTOPuniname22 = b})
glslTOPvalue18 :: Lens' TOP (Vec4)
glslTOPvalue18 = lens _glslTOPvalue18 (\a b -> a {_glslTOPvalue18 = b})
glslTOPacsingleval3 :: Lens' TOP (Maybe (Tree Int))
glslTOPacsingleval3 = lens _glslTOPacsingleval3 (\a b -> a {_glslTOPacsingleval3 = b})
glslTOPvalue12 :: Lens' TOP (Vec4)
glslTOPvalue12 = lens _glslTOPvalue12 (\a b -> a {_glslTOPvalue12 = b})
glslTOPchoparraytype0 :: Lens' TOP (Maybe (Tree Int))
glslTOPchoparraytype0 = lens _glslTOPchoparraytype0 (\a b -> a {_glslTOPchoparraytype0 = b})

crossTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
crossTOPaspect2 = lens _crossTOPaspect2 (\a b -> a {_crossTOPaspect2 = b})
crossTOPformat :: Lens' TOP (Maybe (Tree Int))
crossTOPformat = lens _crossTOPformat (\a b -> a {_crossTOPformat = b})
crossTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
crossTOPinputfiltertype = lens _crossTOPinputfiltertype (\a b -> a {_crossTOPinputfiltertype = b})
crossTOPchanmask :: Lens' TOP (Maybe (Tree Int))
crossTOPchanmask = lens _crossTOPchanmask (\a b -> a {_crossTOPchanmask = b})
crossTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
crossTOPoutputresolution = lens _crossTOPoutputresolution (\a b -> a {_crossTOPoutputresolution = b})
crossTOPfillmode :: Lens' TOP (Maybe (Tree Int))
crossTOPfillmode = lens _crossTOPfillmode (\a b -> a {_crossTOPfillmode = b})
crossTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
crossTOPresolutionw = lens _crossTOPresolutionw (\a b -> a {_crossTOPresolutionw = b})
crossTOParmenu :: Lens' TOP (Maybe (Tree Int))
crossTOParmenu = lens _crossTOParmenu (\a b -> a {_crossTOParmenu = b})
crossTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
crossTOPfiltertype = lens _crossTOPfiltertype (\a b -> a {_crossTOPfiltertype = b})
crossTOPr :: Lens' TOP (Maybe (Tree Float))
crossTOPr = lens _crossTOPr (\a b -> a {_crossTOPr = b})
crossTOPextend :: Lens' TOP (Maybe (Tree Int))
crossTOPextend = lens _crossTOPextend (\a b -> a {_crossTOPextend = b})
crossTOPresmult :: Lens' TOP (Maybe (Tree Bool))
crossTOPresmult = lens _crossTOPresmult (\a b -> a {_crossTOPresmult = b})
crossTOPpunit :: Lens' TOP (Maybe (Tree Int))
crossTOPpunit = lens _crossTOPpunit (\a b -> a {_crossTOPpunit = b})
crossTOPs :: Lens' TOP (Vec2)
crossTOPs = lens _crossTOPs (\a b -> a {_crossTOPs = b})
crossTOPresmenu :: Lens' TOP (Maybe (Tree Int))
crossTOPresmenu = lens _crossTOPresmenu (\a b -> a {_crossTOPresmenu = b})
crossTOPp :: Lens' TOP (Vec2)
crossTOPp = lens _crossTOPp (\a b -> a {_crossTOPp = b})
crossTOPcross :: Lens' TOP (Maybe (Tree Float))
crossTOPcross = lens _crossTOPcross (\a b -> a {_crossTOPcross = b})
crossTOPsize :: Lens' TOP (Maybe (Tree Int))
crossTOPsize = lens _crossTOPsize (\a b -> a {_crossTOPsize = b})
crossTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
crossTOPresolutionh = lens _crossTOPresolutionh (\a b -> a {_crossTOPresolutionh = b})
crossTOPtunit :: Lens' TOP (Maybe (Tree Int))
crossTOPtunit = lens _crossTOPtunit (\a b -> a {_crossTOPtunit = b})
crossTOPprefit :: Lens' TOP (Maybe (Tree Int))
crossTOPprefit = lens _crossTOPprefit (\a b -> a {_crossTOPprefit = b})
crossTOPnpasses :: Lens' TOP (Maybe (Tree Int))
crossTOPnpasses = lens _crossTOPnpasses (\a b -> a {_crossTOPnpasses = b})
crossTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
crossTOPaspect1 = lens _crossTOPaspect1 (\a b -> a {_crossTOPaspect1 = b})
crossTOPt :: Lens' TOP (Vec2)
crossTOPt = lens _crossTOPt (\a b -> a {_crossTOPt = b})
crossTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
crossTOPoutputaspect = lens _crossTOPoutputaspect (\a b -> a {_crossTOPoutputaspect = b})

inTOPresmult :: Lens' TOP (Maybe (Tree Bool))
inTOPresmult = lens _inTOPresmult (\a b -> a {_inTOPresmult = b})
inTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
inTOPaspect2 = lens _inTOPaspect2 (\a b -> a {_inTOPaspect2 = b})
inTOPformat :: Lens' TOP (Maybe (Tree Int))
inTOPformat = lens _inTOPformat (\a b -> a {_inTOPformat = b})
inTOPresmenu :: Lens' TOP (Maybe (Tree Int))
inTOPresmenu = lens _inTOPresmenu (\a b -> a {_inTOPresmenu = b})
inTOPnpasses :: Lens' TOP (Maybe (Tree Int))
inTOPnpasses = lens _inTOPnpasses (\a b -> a {_inTOPnpasses = b})
inTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
inTOPinputfiltertype = lens _inTOPinputfiltertype (\a b -> a {_inTOPinputfiltertype = b})
inTOPchanmask :: Lens' TOP (Maybe (Tree Int))
inTOPchanmask = lens _inTOPchanmask (\a b -> a {_inTOPchanmask = b})
inTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
inTOPoutputresolution = lens _inTOPoutputresolution (\a b -> a {_inTOPoutputresolution = b})
inTOPfillmode :: Lens' TOP (Maybe (Tree Int))
inTOPfillmode = lens _inTOPfillmode (\a b -> a {_inTOPfillmode = b})
inTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
inTOPresolutionw = lens _inTOPresolutionw (\a b -> a {_inTOPresolutionw = b})
inTOParmenu :: Lens' TOP (Maybe (Tree Int))
inTOParmenu = lens _inTOParmenu (\a b -> a {_inTOParmenu = b})
inTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
inTOPfiltertype = lens _inTOPfiltertype (\a b -> a {_inTOPfiltertype = b})
inTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
inTOPaspect1 = lens _inTOPaspect1 (\a b -> a {_inTOPaspect1 = b})
inTOPlabel :: Lens' TOP (Maybe (Tree ByteString))
inTOPlabel = lens _inTOPlabel (\a b -> a {_inTOPlabel = b})
inTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
inTOPresolutionh = lens _inTOPresolutionh (\a b -> a {_inTOPresolutionh = b})
inTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
inTOPoutputaspect = lens _inTOPoutputaspect (\a b -> a {_inTOPoutputaspect = b})

layoutTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
layoutTOPaspect2 = lens _layoutTOPaspect2 (\a b -> a {_layoutTOPaspect2 = b})
layoutTOPfit :: Lens' TOP (Maybe (Tree Int))
layoutTOPfit = lens _layoutTOPfit (\a b -> a {_layoutTOPfit = b})
layoutTOPalign :: Lens' TOP (Maybe (Tree Int))
layoutTOPalign = lens _layoutTOPalign (\a b -> a {_layoutTOPalign = b})
layoutTOPscaleres :: Lens' TOP (Maybe (Tree Bool))
layoutTOPscaleres = lens _layoutTOPscaleres (\a b -> a {_layoutTOPscaleres = b})
layoutTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
layoutTOPinputfiltertype = lens _layoutTOPinputfiltertype (\a b -> a {_layoutTOPinputfiltertype = b})
layoutTOPchanmask :: Lens' TOP (Maybe (Tree Int))
layoutTOPchanmask = lens _layoutTOPchanmask (\a b -> a {_layoutTOPchanmask = b})
layoutTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
layoutTOPoutputresolution = lens _layoutTOPoutputresolution (\a b -> a {_layoutTOPoutputresolution = b})
layoutTOPfillmode :: Lens' TOP (Maybe (Tree Int))
layoutTOPfillmode = lens _layoutTOPfillmode (\a b -> a {_layoutTOPfillmode = b})
layoutTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
layoutTOPresolutionw = lens _layoutTOPresolutionw (\a b -> a {_layoutTOPresolutionw = b})
layoutTOParmenu :: Lens' TOP (Maybe (Tree Int))
layoutTOParmenu = lens _layoutTOParmenu (\a b -> a {_layoutTOParmenu = b})
layoutTOPtop :: Lens' TOP (Maybe (Tree TOP))
layoutTOPtop = lens _layoutTOPtop (\a b -> a {_layoutTOPtop = b})
layoutTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
layoutTOPfiltertype = lens _layoutTOPfiltertype (\a b -> a {_layoutTOPfiltertype = b})
layoutTOPformat :: Lens' TOP (Maybe (Tree Int))
layoutTOPformat = lens _layoutTOPformat (\a b -> a {_layoutTOPformat = b})
layoutTOPbgcolor :: Lens' TOP (Vec4)
layoutTOPbgcolor = lens _layoutTOPbgcolor (\a b -> a {_layoutTOPbgcolor = b})
layoutTOPmaxcols :: Lens' TOP (Maybe (Tree Int))
layoutTOPmaxcols = lens _layoutTOPmaxcols (\a b -> a {_layoutTOPmaxcols = b})
layoutTOPresmult :: Lens' TOP (Maybe (Tree Bool))
layoutTOPresmult = lens _layoutTOPresmult (\a b -> a {_layoutTOPresmult = b})
layoutTOPresmenu :: Lens' TOP (Maybe (Tree Int))
layoutTOPresmenu = lens _layoutTOPresmenu (\a b -> a {_layoutTOPresmenu = b})
layoutTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
layoutTOPresolutionh = lens _layoutTOPresolutionh (\a b -> a {_layoutTOPresolutionh = b})
layoutTOPnpasses :: Lens' TOP (Maybe (Tree Int))
layoutTOPnpasses = lens _layoutTOPnpasses (\a b -> a {_layoutTOPnpasses = b})
layoutTOPfillbg :: Lens' TOP (Maybe (Tree Bool))
layoutTOPfillbg = lens _layoutTOPfillbg (\a b -> a {_layoutTOPfillbg = b})
layoutTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
layoutTOPaspect1 = lens _layoutTOPaspect1 (\a b -> a {_layoutTOPaspect1 = b})
layoutTOPmaxrows :: Lens' TOP (Maybe (Tree Int))
layoutTOPmaxrows = lens _layoutTOPmaxrows (\a b -> a {_layoutTOPmaxrows = b})
layoutTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
layoutTOPoutputaspect = lens _layoutTOPoutputaspect (\a b -> a {_layoutTOPoutputaspect = b})

screenTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
screenTOPaspect2 = lens _screenTOPaspect2 (\a b -> a {_screenTOPaspect2 = b})
screenTOPformat :: Lens' TOP (Maybe (Tree Int))
screenTOPformat = lens _screenTOPformat (\a b -> a {_screenTOPformat = b})
screenTOPextend :: Lens' TOP (Maybe (Tree Int))
screenTOPextend = lens _screenTOPextend (\a b -> a {_screenTOPextend = b})
screenTOPchanmask :: Lens' TOP (Maybe (Tree Int))
screenTOPchanmask = lens _screenTOPchanmask (\a b -> a {_screenTOPchanmask = b})
screenTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
screenTOPoutputresolution = lens _screenTOPoutputresolution (\a b -> a {_screenTOPoutputresolution = b})
screenTOPfillmode :: Lens' TOP (Maybe (Tree Int))
screenTOPfillmode = lens _screenTOPfillmode (\a b -> a {_screenTOPfillmode = b})
screenTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
screenTOPresolutionw = lens _screenTOPresolutionw (\a b -> a {_screenTOPresolutionw = b})
screenTOParmenu :: Lens' TOP (Maybe (Tree Int))
screenTOParmenu = lens _screenTOParmenu (\a b -> a {_screenTOParmenu = b})
screenTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
screenTOPfiltertype = lens _screenTOPfiltertype (\a b -> a {_screenTOPfiltertype = b})
screenTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
screenTOPinputfiltertype = lens _screenTOPinputfiltertype (\a b -> a {_screenTOPinputfiltertype = b})
screenTOPresmult :: Lens' TOP (Maybe (Tree Bool))
screenTOPresmult = lens _screenTOPresmult (\a b -> a {_screenTOPresmult = b})
screenTOPpunit :: Lens' TOP (Maybe (Tree Int))
screenTOPpunit = lens _screenTOPpunit (\a b -> a {_screenTOPpunit = b})
screenTOPs :: Lens' TOP (Vec2)
screenTOPs = lens _screenTOPs (\a b -> a {_screenTOPs = b})
screenTOPresmenu :: Lens' TOP (Maybe (Tree Int))
screenTOPresmenu = lens _screenTOPresmenu (\a b -> a {_screenTOPresmenu = b})
screenTOPp :: Lens' TOP (Vec2)
screenTOPp = lens _screenTOPp (\a b -> a {_screenTOPp = b})
screenTOPsize :: Lens' TOP (Maybe (Tree Int))
screenTOPsize = lens _screenTOPsize (\a b -> a {_screenTOPsize = b})
screenTOPnpasses :: Lens' TOP (Maybe (Tree Int))
screenTOPnpasses = lens _screenTOPnpasses (\a b -> a {_screenTOPnpasses = b})
screenTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
screenTOPoutputaspect = lens _screenTOPoutputaspect (\a b -> a {_screenTOPoutputaspect = b})
screenTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
screenTOPresolutionh = lens _screenTOPresolutionh (\a b -> a {_screenTOPresolutionh = b})
screenTOPtunit :: Lens' TOP (Maybe (Tree Int))
screenTOPtunit = lens _screenTOPtunit (\a b -> a {_screenTOPtunit = b})
screenTOPprefit :: Lens' TOP (Maybe (Tree Int))
screenTOPprefit = lens _screenTOPprefit (\a b -> a {_screenTOPprefit = b})
screenTOPr :: Lens' TOP (Maybe (Tree Float))
screenTOPr = lens _screenTOPr (\a b -> a {_screenTOPr = b})
screenTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
screenTOPaspect1 = lens _screenTOPaspect1 (\a b -> a {_screenTOPaspect1 = b})
screenTOPjustifyh :: Lens' TOP (Maybe (Tree Int))
screenTOPjustifyh = lens _screenTOPjustifyh (\a b -> a {_screenTOPjustifyh = b})
screenTOPt :: Lens' TOP (Vec2)
screenTOPt = lens _screenTOPt (\a b -> a {_screenTOPt = b})
screenTOPjustifyv :: Lens' TOP (Maybe (Tree Int))
screenTOPjustifyv = lens _screenTOPjustifyv (\a b -> a {_screenTOPjustifyv = b})

flipTOPresmult :: Lens' TOP (Maybe (Tree Bool))
flipTOPresmult = lens _flipTOPresmult (\a b -> a {_flipTOPresmult = b})
flipTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
flipTOPaspect2 = lens _flipTOPaspect2 (\a b -> a {_flipTOPaspect2 = b})
flipTOPformat :: Lens' TOP (Maybe (Tree Int))
flipTOPformat = lens _flipTOPformat (\a b -> a {_flipTOPformat = b})
flipTOPresmenu :: Lens' TOP (Maybe (Tree Int))
flipTOPresmenu = lens _flipTOPresmenu (\a b -> a {_flipTOPresmenu = b})
flipTOPnpasses :: Lens' TOP (Maybe (Tree Int))
flipTOPnpasses = lens _flipTOPnpasses (\a b -> a {_flipTOPnpasses = b})
flipTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
flipTOPinputfiltertype = lens _flipTOPinputfiltertype (\a b -> a {_flipTOPinputfiltertype = b})
flipTOPchanmask :: Lens' TOP (Maybe (Tree Int))
flipTOPchanmask = lens _flipTOPchanmask (\a b -> a {_flipTOPchanmask = b})
flipTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
flipTOPoutputresolution = lens _flipTOPoutputresolution (\a b -> a {_flipTOPoutputresolution = b})
flipTOPfillmode :: Lens' TOP (Maybe (Tree Int))
flipTOPfillmode = lens _flipTOPfillmode (\a b -> a {_flipTOPfillmode = b})
flipTOPflop :: Lens' TOP (Maybe (Tree Int))
flipTOPflop = lens _flipTOPflop (\a b -> a {_flipTOPflop = b})
flipTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
flipTOPresolutionh = lens _flipTOPresolutionh (\a b -> a {_flipTOPresolutionh = b})
flipTOParmenu :: Lens' TOP (Maybe (Tree Int))
flipTOParmenu = lens _flipTOParmenu (\a b -> a {_flipTOParmenu = b})
flipTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
flipTOPfiltertype = lens _flipTOPfiltertype (\a b -> a {_flipTOPfiltertype = b})
flipTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
flipTOPaspect1 = lens _flipTOPaspect1 (\a b -> a {_flipTOPaspect1 = b})
flipTOPflipy :: Lens' TOP (Maybe (Tree Bool))
flipTOPflipy = lens _flipTOPflipy (\a b -> a {_flipTOPflipy = b})
flipTOPflipx :: Lens' TOP (Maybe (Tree Bool))
flipTOPflipx = lens _flipTOPflipx (\a b -> a {_flipTOPflipx = b})
flipTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
flipTOPresolutionw = lens _flipTOPresolutionw (\a b -> a {_flipTOPresolutionw = b})
flipTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
flipTOPoutputaspect = lens _flipTOPoutputaspect (\a b -> a {_flipTOPoutputaspect = b})

directxinTOPresmult :: Lens' TOP (Maybe (Tree Bool))
directxinTOPresmult = lens _directxinTOPresmult (\a b -> a {_directxinTOPresmult = b})
directxinTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
directxinTOPaspect2 = lens _directxinTOPaspect2 (\a b -> a {_directxinTOPaspect2 = b})
directxinTOPformat :: Lens' TOP (Maybe (Tree Int))
directxinTOPformat = lens _directxinTOPformat (\a b -> a {_directxinTOPformat = b})
directxinTOPresmenu :: Lens' TOP (Maybe (Tree Int))
directxinTOPresmenu = lens _directxinTOPresmenu (\a b -> a {_directxinTOPresmenu = b})
directxinTOPnpasses :: Lens' TOP (Maybe (Tree Int))
directxinTOPnpasses = lens _directxinTOPnpasses (\a b -> a {_directxinTOPnpasses = b})
directxinTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
directxinTOPinputfiltertype = lens _directxinTOPinputfiltertype (\a b -> a {_directxinTOPinputfiltertype = b})
directxinTOPchanmask :: Lens' TOP (Maybe (Tree Int))
directxinTOPchanmask = lens _directxinTOPchanmask (\a b -> a {_directxinTOPchanmask = b})
directxinTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
directxinTOPoutputresolution = lens _directxinTOPoutputresolution (\a b -> a {_directxinTOPoutputresolution = b})
directxinTOPfillmode :: Lens' TOP (Maybe (Tree Int))
directxinTOPfillmode = lens _directxinTOPfillmode (\a b -> a {_directxinTOPfillmode = b})
directxinTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
directxinTOPresolutionw = lens _directxinTOPresolutionw (\a b -> a {_directxinTOPresolutionw = b})
directxinTOPhandle :: Lens' TOP (Maybe (Tree ByteString))
directxinTOPhandle = lens _directxinTOPhandle (\a b -> a {_directxinTOPhandle = b})
directxinTOParmenu :: Lens' TOP (Maybe (Tree Int))
directxinTOParmenu = lens _directxinTOParmenu (\a b -> a {_directxinTOParmenu = b})
directxinTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
directxinTOPfiltertype = lens _directxinTOPfiltertype (\a b -> a {_directxinTOPfiltertype = b})
directxinTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
directxinTOPaspect1 = lens _directxinTOPaspect1 (\a b -> a {_directxinTOPaspect1 = b})
directxinTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
directxinTOPresolutionh = lens _directxinTOPresolutionh (\a b -> a {_directxinTOPresolutionh = b})
directxinTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
directxinTOPoutputaspect = lens _directxinTOPoutputaspect (\a b -> a {_directxinTOPoutputaspect = b})

cornerpinTOPextractp42 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPextractp42 = lens _cornerpinTOPextractp42 (\a b -> a {_cornerpinTOPextractp42 = b})
cornerpinTOPgridrefine :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPgridrefine = lens _cornerpinTOPgridrefine (\a b -> a {_cornerpinTOPgridrefine = b})
cornerpinTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPaspect2 = lens _cornerpinTOPaspect2 (\a b -> a {_cornerpinTOPaspect2 = b})
cornerpinTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPinputfiltertype = lens _cornerpinTOPinputfiltertype (\a b -> a {_cornerpinTOPinputfiltertype = b})
cornerpinTOPformat :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPformat = lens _cornerpinTOPformat (\a b -> a {_cornerpinTOPformat = b})
cornerpinTOPextractp22 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPextractp22 = lens _cornerpinTOPextractp22 (\a b -> a {_cornerpinTOPextractp22 = b})
cornerpinTOPextractp12 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPextractp12 = lens _cornerpinTOPextractp12 (\a b -> a {_cornerpinTOPextractp12 = b})
cornerpinTOPextractp11 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPextractp11 = lens _cornerpinTOPextractp11 (\a b -> a {_cornerpinTOPextractp11 = b})
cornerpinTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPoutputresolution = lens _cornerpinTOPoutputresolution (\a b -> a {_cornerpinTOPoutputresolution = b})
cornerpinTOPresmult :: Lens' TOP (Maybe (Tree Bool))
cornerpinTOPresmult = lens _cornerpinTOPresmult (\a b -> a {_cornerpinTOPresmult = b})
cornerpinTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPresolutionw = lens _cornerpinTOPresolutionw (\a b -> a {_cornerpinTOPresolutionw = b})
cornerpinTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPfiltertype = lens _cornerpinTOPfiltertype (\a b -> a {_cornerpinTOPfiltertype = b})
cornerpinTOParmenu :: Lens' TOP (Maybe (Tree Int))
cornerpinTOParmenu = lens _cornerpinTOParmenu (\a b -> a {_cornerpinTOParmenu = b})
cornerpinTOPpinp12 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPpinp12 = lens _cornerpinTOPpinp12 (\a b -> a {_cornerpinTOPpinp12 = b})
cornerpinTOPpinp32 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPpinp32 = lens _cornerpinTOPpinp32 (\a b -> a {_cornerpinTOPpinp32 = b})
cornerpinTOPpinp2unit :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPpinp2unit = lens _cornerpinTOPpinp2unit (\a b -> a {_cornerpinTOPpinp2unit = b})
cornerpinTOPbgcolor :: Lens' TOP (Vec4)
cornerpinTOPbgcolor = lens _cornerpinTOPbgcolor (\a b -> a {_cornerpinTOPbgcolor = b})
cornerpinTOPchanmask :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPchanmask = lens _cornerpinTOPchanmask (\a b -> a {_cornerpinTOPchanmask = b})
cornerpinTOPextractp2unit :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPextractp2unit = lens _cornerpinTOPextractp2unit (\a b -> a {_cornerpinTOPextractp2unit = b})
cornerpinTOPpinp4unit :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPpinp4unit = lens _cornerpinTOPpinp4unit (\a b -> a {_cornerpinTOPpinp4unit = b})
cornerpinTOPextractp3unit :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPextractp3unit = lens _cornerpinTOPextractp3unit (\a b -> a {_cornerpinTOPextractp3unit = b})
cornerpinTOPextractp41 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPextractp41 = lens _cornerpinTOPextractp41 (\a b -> a {_cornerpinTOPextractp41 = b})
cornerpinTOPresmenu :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPresmenu = lens _cornerpinTOPresmenu (\a b -> a {_cornerpinTOPresmenu = b})
cornerpinTOPnpasses :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPnpasses = lens _cornerpinTOPnpasses (\a b -> a {_cornerpinTOPnpasses = b})
cornerpinTOPpinp41 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPpinp41 = lens _cornerpinTOPpinp41 (\a b -> a {_cornerpinTOPpinp41 = b})
cornerpinTOPpinp11 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPpinp11 = lens _cornerpinTOPpinp11 (\a b -> a {_cornerpinTOPpinp11 = b})
cornerpinTOPpinp21 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPpinp21 = lens _cornerpinTOPpinp21 (\a b -> a {_cornerpinTOPpinp21 = b})
cornerpinTOPfillmode :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPfillmode = lens _cornerpinTOPfillmode (\a b -> a {_cornerpinTOPfillmode = b})
cornerpinTOPpinp3unit :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPpinp3unit = lens _cornerpinTOPpinp3unit (\a b -> a {_cornerpinTOPpinp3unit = b})
cornerpinTOPextractp4unit :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPextractp4unit = lens _cornerpinTOPextractp4unit (\a b -> a {_cornerpinTOPextractp4unit = b})
cornerpinTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPresolutionh = lens _cornerpinTOPresolutionh (\a b -> a {_cornerpinTOPresolutionh = b})
cornerpinTOPpinp42 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPpinp42 = lens _cornerpinTOPpinp42 (\a b -> a {_cornerpinTOPpinp42 = b})
cornerpinTOPextractp1unit :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPextractp1unit = lens _cornerpinTOPextractp1unit (\a b -> a {_cornerpinTOPextractp1unit = b})
cornerpinTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPoutputaspect = lens _cornerpinTOPoutputaspect (\a b -> a {_cornerpinTOPoutputaspect = b})
cornerpinTOPextractp32 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPextractp32 = lens _cornerpinTOPextractp32 (\a b -> a {_cornerpinTOPextractp32 = b})
cornerpinTOPpinp31 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPpinp31 = lens _cornerpinTOPpinp31 (\a b -> a {_cornerpinTOPpinp31 = b})
cornerpinTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPaspect1 = lens _cornerpinTOPaspect1 (\a b -> a {_cornerpinTOPaspect1 = b})
cornerpinTOPextractp21 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPextractp21 = lens _cornerpinTOPextractp21 (\a b -> a {_cornerpinTOPextractp21 = b})
cornerpinTOPextractp31 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPextractp31 = lens _cornerpinTOPextractp31 (\a b -> a {_cornerpinTOPextractp31 = b})
cornerpinTOPpinp1unit :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPpinp1unit = lens _cornerpinTOPpinp1unit (\a b -> a {_cornerpinTOPpinp1unit = b})
cornerpinTOPextend :: Lens' TOP (Maybe (Tree Int))
cornerpinTOPextend = lens _cornerpinTOPextend (\a b -> a {_cornerpinTOPextend = b})
cornerpinTOPpinp22 :: Lens' TOP (Maybe (Tree Float))
cornerpinTOPpinp22 = lens _cornerpinTOPpinp22 (\a b -> a {_cornerpinTOPpinp22 = b})

opviewerTOPpreservealpha :: Lens' TOP (Maybe (Tree Bool))
opviewerTOPpreservealpha = lens _opviewerTOPpreservealpha (\a b -> a {_opviewerTOPpreservealpha = b})
opviewerTOPresmult :: Lens' TOP (Maybe (Tree Bool))
opviewerTOPresmult = lens _opviewerTOPresmult (\a b -> a {_opviewerTOPresmult = b})
opviewerTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
opviewerTOPaspect2 = lens _opviewerTOPaspect2 (\a b -> a {_opviewerTOPaspect2 = b})
opviewerTOParmenu :: Lens' TOP (Maybe (Tree Int))
opviewerTOParmenu = lens _opviewerTOParmenu (\a b -> a {_opviewerTOParmenu = b})
opviewerTOPresmenu :: Lens' TOP (Maybe (Tree Int))
opviewerTOPresmenu = lens _opviewerTOPresmenu (\a b -> a {_opviewerTOPresmenu = b})
opviewerTOPnpasses :: Lens' TOP (Maybe (Tree Int))
opviewerTOPnpasses = lens _opviewerTOPnpasses (\a b -> a {_opviewerTOPnpasses = b})
opviewerTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
opviewerTOPinputfiltertype = lens _opviewerTOPinputfiltertype (\a b -> a {_opviewerTOPinputfiltertype = b})
opviewerTOPchanmask :: Lens' TOP (Maybe (Tree Int))
opviewerTOPchanmask = lens _opviewerTOPchanmask (\a b -> a {_opviewerTOPchanmask = b})
opviewerTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
opviewerTOPoutputresolution = lens _opviewerTOPoutputresolution (\a b -> a {_opviewerTOPoutputresolution = b})
opviewerTOPfillmode :: Lens' TOP (Maybe (Tree Int))
opviewerTOPfillmode = lens _opviewerTOPfillmode (\a b -> a {_opviewerTOPfillmode = b})
opviewerTOPformat :: Lens' TOP (Maybe (Tree Int))
opviewerTOPformat = lens _opviewerTOPformat (\a b -> a {_opviewerTOPformat = b})
opviewerTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
opviewerTOPresolutionh = lens _opviewerTOPresolutionh (\a b -> a {_opviewerTOPresolutionh = b})
opviewerTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
opviewerTOPfiltertype = lens _opviewerTOPfiltertype (\a b -> a {_opviewerTOPfiltertype = b})
opviewerTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
opviewerTOPaspect1 = lens _opviewerTOPaspect1 (\a b -> a {_opviewerTOPaspect1 = b})
opviewerTOPallowpanel :: Lens' TOP (Maybe (Tree Bool))
opviewerTOPallowpanel = lens _opviewerTOPallowpanel (\a b -> a {_opviewerTOPallowpanel = b})
opviewerTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
opviewerTOPresolutionw = lens _opviewerTOPresolutionw (\a b -> a {_opviewerTOPresolutionw = b})
opviewerTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
opviewerTOPoutputaspect = lens _opviewerTOPoutputaspect (\a b -> a {_opviewerTOPoutputaspect = b})

viosoTOParmenu :: Lens' TOP (Maybe (Tree Int))
viosoTOParmenu = lens _viosoTOParmenu (\a b -> a {_viosoTOParmenu = b})
viosoTOPresmult :: Lens' TOP (Maybe (Tree Bool))
viosoTOPresmult = lens _viosoTOPresmult (\a b -> a {_viosoTOPresmult = b})
viosoTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
viosoTOPaspect2 = lens _viosoTOPaspect2 (\a b -> a {_viosoTOPaspect2 = b})
viosoTOPformat :: Lens' TOP (Maybe (Tree Int))
viosoTOPformat = lens _viosoTOPformat (\a b -> a {_viosoTOPformat = b})
viosoTOPfilter :: Lens' TOP (Maybe (Tree Int))
viosoTOPfilter = lens _viosoTOPfilter (\a b -> a {_viosoTOPfilter = b})
viosoTOPresmenu :: Lens' TOP (Maybe (Tree Int))
viosoTOPresmenu = lens _viosoTOPresmenu (\a b -> a {_viosoTOPresmenu = b})
viosoTOPnpasses :: Lens' TOP (Maybe (Tree Int))
viosoTOPnpasses = lens _viosoTOPnpasses (\a b -> a {_viosoTOPnpasses = b})
viosoTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
viosoTOPinputfiltertype = lens _viosoTOPinputfiltertype (\a b -> a {_viosoTOPinputfiltertype = b})
viosoTOPchanmask :: Lens' TOP (Maybe (Tree Int))
viosoTOPchanmask = lens _viosoTOPchanmask (\a b -> a {_viosoTOPchanmask = b})
viosoTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
viosoTOPoutputresolution = lens _viosoTOPoutputresolution (\a b -> a {_viosoTOPoutputresolution = b})
viosoTOPfillmode :: Lens' TOP (Maybe (Tree Int))
viosoTOPfillmode = lens _viosoTOPfillmode (\a b -> a {_viosoTOPfillmode = b})
viosoTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
viosoTOPresolutionh = lens _viosoTOPresolutionh (\a b -> a {_viosoTOPresolutionh = b})
viosoTOPprojectorindex :: Lens' TOP (Maybe (Tree Int))
viosoTOPprojectorindex = lens _viosoTOPprojectorindex (\a b -> a {_viosoTOPprojectorindex = b})
viosoTOPconfigfile :: Lens' TOP (Maybe (Tree ByteString))
viosoTOPconfigfile = lens _viosoTOPconfigfile (\a b -> a {_viosoTOPconfigfile = b})
viosoTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
viosoTOPaspect1 = lens _viosoTOPaspect1 (\a b -> a {_viosoTOPaspect1 = b})
viosoTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
viosoTOPresolutionw = lens _viosoTOPresolutionw (\a b -> a {_viosoTOPresolutionw = b})
viosoTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
viosoTOPoutputaspect = lens _viosoTOPoutputaspect (\a b -> a {_viosoTOPoutputaspect = b})
viosoTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
viosoTOPfiltertype = lens _viosoTOPfiltertype (\a b -> a {_viosoTOPfiltertype = b})

lookupTOPdarkuvunit :: Lens' TOP (Maybe (Tree Int))
lookupTOPdarkuvunit = lens _lookupTOPdarkuvunit (\a b -> a {_lookupTOPdarkuvunit = b})
lookupTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
lookupTOPaspect2 = lens _lookupTOPaspect2 (\a b -> a {_lookupTOPaspect2 = b})
lookupTOPclampchopvalues :: Lens' TOP (Maybe (Tree Bool))
lookupTOPclampchopvalues = lens _lookupTOPclampchopvalues (\a b -> a {_lookupTOPclampchopvalues = b})
lookupTOPformat :: Lens' TOP (Maybe (Tree Int))
lookupTOPformat = lens _lookupTOPformat (\a b -> a {_lookupTOPformat = b})
lookupTOPlightuv2 :: Lens' TOP (Maybe (Tree Float))
lookupTOPlightuv2 = lens _lookupTOPlightuv2 (\a b -> a {_lookupTOPlightuv2 = b})
lookupTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
lookupTOPinputfiltertype = lens _lookupTOPinputfiltertype (\a b -> a {_lookupTOPinputfiltertype = b})
lookupTOPdarkuv2 :: Lens' TOP (Maybe (Tree Float))
lookupTOPdarkuv2 = lens _lookupTOPdarkuv2 (\a b -> a {_lookupTOPdarkuv2 = b})
lookupTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
lookupTOPoutputresolution = lens _lookupTOPoutputresolution (\a b -> a {_lookupTOPoutputresolution = b})
lookupTOPfillmode :: Lens' TOP (Maybe (Tree Int))
lookupTOPfillmode = lens _lookupTOPfillmode (\a b -> a {_lookupTOPfillmode = b})
lookupTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
lookupTOPresolutionw = lens _lookupTOPresolutionw (\a b -> a {_lookupTOPresolutionw = b})
lookupTOParmenu :: Lens' TOP (Maybe (Tree Int))
lookupTOParmenu = lens _lookupTOParmenu (\a b -> a {_lookupTOParmenu = b})
lookupTOPusesourceluminance :: Lens' TOP (Maybe (Tree Bool))
lookupTOPusesourceluminance = lens _lookupTOPusesourceluminance (\a b -> a {_lookupTOPusesourceluminance = b})
lookupTOPdisplaylookup :: Lens' TOP (Maybe (Tree Bool))
lookupTOPdisplaylookup = lens _lookupTOPdisplaylookup (\a b -> a {_lookupTOPdisplaylookup = b})
lookupTOPlightuv1 :: Lens' TOP (Maybe (Tree Float))
lookupTOPlightuv1 = lens _lookupTOPlightuv1 (\a b -> a {_lookupTOPlightuv1 = b})
lookupTOPchop :: Lens' TOP (Maybe (Tree CHOP))
lookupTOPchop = lens _lookupTOPchop (\a b -> a {_lookupTOPchop = b})
lookupTOPdarkuv1 :: Lens' TOP (Maybe (Tree Float))
lookupTOPdarkuv1 = lens _lookupTOPdarkuv1 (\a b -> a {_lookupTOPdarkuv1 = b})
lookupTOPresmult :: Lens' TOP (Maybe (Tree Bool))
lookupTOPresmult = lens _lookupTOPresmult (\a b -> a {_lookupTOPresmult = b})
lookupTOPresmenu :: Lens' TOP (Maybe (Tree Int))
lookupTOPresmenu = lens _lookupTOPresmenu (\a b -> a {_lookupTOPresmenu = b})
lookupTOPchanmask :: Lens' TOP (Maybe (Tree Int))
lookupTOPchanmask = lens _lookupTOPchanmask (\a b -> a {_lookupTOPchanmask = b})
lookupTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
lookupTOPresolutionh = lens _lookupTOPresolutionh (\a b -> a {_lookupTOPresolutionh = b})
lookupTOPnpasses :: Lens' TOP (Maybe (Tree Int))
lookupTOPnpasses = lens _lookupTOPnpasses (\a b -> a {_lookupTOPnpasses = b})
lookupTOPlightuvunit :: Lens' TOP (Maybe (Tree Int))
lookupTOPlightuvunit = lens _lookupTOPlightuvunit (\a b -> a {_lookupTOPlightuvunit = b})
lookupTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
lookupTOPaspect1 = lens _lookupTOPaspect1 (\a b -> a {_lookupTOPaspect1 = b})
lookupTOPmethod :: Lens' TOP (Maybe (Tree Int))
lookupTOPmethod = lens _lookupTOPmethod (\a b -> a {_lookupTOPmethod = b})
lookupTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
lookupTOPoutputaspect = lens _lookupTOPoutputaspect (\a b -> a {_lookupTOPoutputaspect = b})
lookupTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
lookupTOPfiltertype = lens _lookupTOPfiltertype (\a b -> a {_lookupTOPfiltertype = b})

videodeviceoutTOPfirstfield :: Lens' TOP (Maybe (Tree Bool))
videodeviceoutTOPfirstfield = lens _videodeviceoutTOPfirstfield (\a b -> a {_videodeviceoutTOPfirstfield = b})
videodeviceoutTOPtransfermode :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPtransfermode = lens _videodeviceoutTOPtransfermode (\a b -> a {_videodeviceoutTOPtransfermode = b})
videodeviceoutTOPactive :: Lens' TOP (Maybe (Tree Bool))
videodeviceoutTOPactive = lens _videodeviceoutTOPactive (\a b -> a {_videodeviceoutTOPactive = b})
videodeviceoutTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPinputfiltertype = lens _videodeviceoutTOPinputfiltertype (\a b -> a {_videodeviceoutTOPinputfiltertype = b})
videodeviceoutTOPchanmask :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPchanmask = lens _videodeviceoutTOPchanmask (\a b -> a {_videodeviceoutTOPchanmask = b})
videodeviceoutTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPoutputresolution = lens _videodeviceoutTOPoutputresolution (\a b -> a {_videodeviceoutTOPoutputresolution = b})
videodeviceoutTOPfillmode :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPfillmode = lens _videodeviceoutTOPfillmode (\a b -> a {_videodeviceoutTOPfillmode = b})
videodeviceoutTOPbufferlength :: Lens' TOP (Maybe (Tree Float))
videodeviceoutTOPbufferlength = lens _videodeviceoutTOPbufferlength (\a b -> a {_videodeviceoutTOPbufferlength = b})
videodeviceoutTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPresolutionw = lens _videodeviceoutTOPresolutionw (\a b -> a {_videodeviceoutTOPresolutionw = b})
videodeviceoutTOPmanualfield :: Lens' TOP (Maybe (Tree Bool))
videodeviceoutTOPmanualfield = lens _videodeviceoutTOPmanualfield (\a b -> a {_videodeviceoutTOPmanualfield = b})
videodeviceoutTOParmenu :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOParmenu = lens _videodeviceoutTOParmenu (\a b -> a {_videodeviceoutTOParmenu = b})
videodeviceoutTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPfiltertype = lens _videodeviceoutTOPfiltertype (\a b -> a {_videodeviceoutTOPfiltertype = b})
videodeviceoutTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
videodeviceoutTOPaspect2 = lens _videodeviceoutTOPaspect2 (\a b -> a {_videodeviceoutTOPaspect2 = b})
videodeviceoutTOPformat :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPformat = lens _videodeviceoutTOPformat (\a b -> a {_videodeviceoutTOPformat = b})
videodeviceoutTOPsignalformat :: Lens' TOP (Maybe (Tree ByteString))
videodeviceoutTOPsignalformat = lens _videodeviceoutTOPsignalformat (\a b -> a {_videodeviceoutTOPsignalformat = b})
videodeviceoutTOPresmult :: Lens' TOP (Maybe (Tree Bool))
videodeviceoutTOPresmult = lens _videodeviceoutTOPresmult (\a b -> a {_videodeviceoutTOPresmult = b})
videodeviceoutTOPlibrary :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPlibrary = lens _videodeviceoutTOPlibrary (\a b -> a {_videodeviceoutTOPlibrary = b})
videodeviceoutTOPresmenu :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPresmenu = lens _videodeviceoutTOPresmenu (\a b -> a {_videodeviceoutTOPresmenu = b})
videodeviceoutTOPoutputpixelformat :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPoutputpixelformat = lens _videodeviceoutTOPoutputpixelformat (\a b -> a {_videodeviceoutTOPoutputpixelformat = b})
videodeviceoutTOPaudiobitdepth :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPaudiobitdepth = lens _videodeviceoutTOPaudiobitdepth (\a b -> a {_videodeviceoutTOPaudiobitdepth = b})
videodeviceoutTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPresolutionh = lens _videodeviceoutTOPresolutionh (\a b -> a {_videodeviceoutTOPresolutionh = b})
videodeviceoutTOPnpasses :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPnpasses = lens _videodeviceoutTOPnpasses (\a b -> a {_videodeviceoutTOPnpasses = b})
videodeviceoutTOPdevice :: Lens' TOP (Maybe (Tree ByteString))
videodeviceoutTOPdevice = lens _videodeviceoutTOPdevice (\a b -> a {_videodeviceoutTOPdevice = b})
videodeviceoutTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
videodeviceoutTOPaspect1 = lens _videodeviceoutTOPaspect1 (\a b -> a {_videodeviceoutTOPaspect1 = b})
videodeviceoutTOPchop :: Lens' TOP (Maybe (Tree CHOP))
videodeviceoutTOPchop = lens _videodeviceoutTOPchop (\a b -> a {_videodeviceoutTOPchop = b})
videodeviceoutTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
videodeviceoutTOPoutputaspect = lens _videodeviceoutTOPoutputaspect (\a b -> a {_videodeviceoutTOPoutputaspect = b})

depthTOPrangefrom1 :: Lens' TOP (Maybe (Tree Float))
depthTOPrangefrom1 = lens _depthTOPrangefrom1 (\a b -> a {_depthTOPrangefrom1 = b})
depthTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
depthTOPaspect2 = lens _depthTOPaspect2 (\a b -> a {_depthTOPaspect2 = b})
depthTOPformat :: Lens' TOP (Maybe (Tree Int))
depthTOPformat = lens _depthTOPformat (\a b -> a {_depthTOPformat = b})
depthTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
depthTOPinputfiltertype = lens _depthTOPinputfiltertype (\a b -> a {_depthTOPinputfiltertype = b})
depthTOPpixelformat :: Lens' TOP (Maybe (Tree Int))
depthTOPpixelformat = lens _depthTOPpixelformat (\a b -> a {_depthTOPpixelformat = b})
depthTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
depthTOPoutputresolution = lens _depthTOPoutputresolution (\a b -> a {_depthTOPoutputresolution = b})
depthTOPfillmode :: Lens' TOP (Maybe (Tree Int))
depthTOPfillmode = lens _depthTOPfillmode (\a b -> a {_depthTOPfillmode = b})
depthTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
depthTOPresolutionw = lens _depthTOPresolutionw (\a b -> a {_depthTOPresolutionw = b})
depthTOPclamp :: Lens' TOP (Maybe (Tree Bool))
depthTOPclamp = lens _depthTOPclamp (\a b -> a {_depthTOPclamp = b})
depthTOParmenu :: Lens' TOP (Maybe (Tree Int))
depthTOParmenu = lens _depthTOParmenu (\a b -> a {_depthTOParmenu = b})
depthTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
depthTOPfiltertype = lens _depthTOPfiltertype (\a b -> a {_depthTOPfiltertype = b})
depthTOPcameraindex :: Lens' TOP (Maybe (Tree Int))
depthTOPcameraindex = lens _depthTOPcameraindex (\a b -> a {_depthTOPcameraindex = b})
depthTOPresmult :: Lens' TOP (Maybe (Tree Bool))
depthTOPresmult = lens _depthTOPresmult (\a b -> a {_depthTOPresmult = b})
depthTOPdepthspace :: Lens' TOP (Maybe (Tree Int))
depthTOPdepthspace = lens _depthTOPdepthspace (\a b -> a {_depthTOPdepthspace = b})
depthTOPresmenu :: Lens' TOP (Maybe (Tree Int))
depthTOPresmenu = lens _depthTOPresmenu (\a b -> a {_depthTOPresmenu = b})
depthTOPchanmask :: Lens' TOP (Maybe (Tree Int))
depthTOPchanmask = lens _depthTOPchanmask (\a b -> a {_depthTOPchanmask = b})
depthTOPgamma :: Lens' TOP (Maybe (Tree Float))
depthTOPgamma = lens _depthTOPgamma (\a b -> a {_depthTOPgamma = b})
depthTOPrangeto1 :: Lens' TOP (Maybe (Tree Float))
depthTOPrangeto1 = lens _depthTOPrangeto1 (\a b -> a {_depthTOPrangeto1 = b})
depthTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
depthTOPresolutionh = lens _depthTOPresolutionh (\a b -> a {_depthTOPresolutionh = b})
depthTOPpeellayerindex :: Lens' TOP (Maybe (Tree Int))
depthTOPpeellayerindex = lens _depthTOPpeellayerindex (\a b -> a {_depthTOPpeellayerindex = b})
depthTOPrangeto2 :: Lens' TOP (Maybe (Tree Float))
depthTOPrangeto2 = lens _depthTOPrangeto2 (\a b -> a {_depthTOPrangeto2 = b})
depthTOPnpasses :: Lens' TOP (Maybe (Tree Int))
depthTOPnpasses = lens _depthTOPnpasses (\a b -> a {_depthTOPnpasses = b})
depthTOPrangefrom2 :: Lens' TOP (Maybe (Tree Float))
depthTOPrangefrom2 = lens _depthTOPrangefrom2 (\a b -> a {_depthTOPrangefrom2 = b})
depthTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
depthTOPaspect1 = lens _depthTOPaspect1 (\a b -> a {_depthTOPaspect1 = b})
depthTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
depthTOPoutputaspect = lens _depthTOPoutputaspect (\a b -> a {_depthTOPoutputaspect = b})

videostreaminTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
videostreaminTOPaspect2 = lens _videostreaminTOPaspect2 (\a b -> a {_videostreaminTOPaspect2 = b})
videostreaminTOPformat :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPformat = lens _videostreaminTOPformat (\a b -> a {_videostreaminTOPformat = b})
videostreaminTOPprereadframes :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPprereadframes = lens _videostreaminTOPprereadframes (\a b -> a {_videostreaminTOPprereadframes = b})
videostreaminTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPinputfiltertype = lens _videostreaminTOPinputfiltertype (\a b -> a {_videostreaminTOPinputfiltertype = b})
videostreaminTOPchanmask :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPchanmask = lens _videostreaminTOPchanmask (\a b -> a {_videostreaminTOPchanmask = b})
videostreaminTOPbottomhalfalpha :: Lens' TOP (Maybe (Tree Bool))
videostreaminTOPbottomhalfalpha = lens _videostreaminTOPbottomhalfalpha (\a b -> a {_videostreaminTOPbottomhalfalpha = b})
videostreaminTOPfillmode :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPfillmode = lens _videostreaminTOPfillmode (\a b -> a {_videostreaminTOPfillmode = b})
videostreaminTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPresolutionw = lens _videostreaminTOPresolutionw (\a b -> a {_videostreaminTOPresolutionw = b})
videostreaminTOParmenu :: Lens' TOP (Maybe (Tree Int))
videostreaminTOParmenu = lens _videostreaminTOParmenu (\a b -> a {_videostreaminTOParmenu = b})
videostreaminTOPdeinterlace :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPdeinterlace = lens _videostreaminTOPdeinterlace (\a b -> a {_videostreaminTOPdeinterlace = b})
videostreaminTOPprecedence :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPprecedence = lens _videostreaminTOPprecedence (\a b -> a {_videostreaminTOPprecedence = b})
videostreaminTOPasyncupload :: Lens' TOP (Maybe (Tree Bool))
videostreaminTOPasyncupload = lens _videostreaminTOPasyncupload (\a b -> a {_videostreaminTOPasyncupload = b})
videostreaminTOPnetworkqueuesize :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPnetworkqueuesize = lens _videostreaminTOPnetworkqueuesize (\a b -> a {_videostreaminTOPnetworkqueuesize = b})
videostreaminTOPresmult :: Lens' TOP (Maybe (Tree Bool))
videostreaminTOPresmult = lens _videostreaminTOPresmult (\a b -> a {_videostreaminTOPresmult = b})
videostreaminTOPresmenu :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPresmenu = lens _videostreaminTOPresmenu (\a b -> a {_videostreaminTOPresmenu = b})
videostreaminTOPreloadpulse :: Lens' TOP (Maybe (Tree Bool))
videostreaminTOPreloadpulse = lens _videostreaminTOPreloadpulse (\a b -> a {_videostreaminTOPreloadpulse = b})
videostreaminTOPurl :: Lens' TOP (Maybe (Tree ByteString))
videostreaminTOPurl = lens _videostreaminTOPurl (\a b -> a {_videostreaminTOPurl = b})
videostreaminTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPresolutionh = lens _videostreaminTOPresolutionh (\a b -> a {_videostreaminTOPresolutionh = b})
videostreaminTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPoutputresolution = lens _videostreaminTOPoutputresolution (\a b -> a {_videostreaminTOPoutputresolution = b})
videostreaminTOPplay :: Lens' TOP (Maybe (Tree Bool))
videostreaminTOPplay = lens _videostreaminTOPplay (\a b -> a {_videostreaminTOPplay = b})
videostreaminTOPnpasses :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPnpasses = lens _videostreaminTOPnpasses (\a b -> a {_videostreaminTOPnpasses = b})
videostreaminTOPnetworkbuffersize :: Lens' TOP (Maybe (Tree Float))
videostreaminTOPnetworkbuffersize = lens _videostreaminTOPnetworkbuffersize (\a b -> a {_videostreaminTOPnetworkbuffersize = b})
videostreaminTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
videostreaminTOPaspect1 = lens _videostreaminTOPaspect1 (\a b -> a {_videostreaminTOPaspect1 = b})
videostreaminTOPmaxdecodecpus :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPmaxdecodecpus = lens _videostreaminTOPmaxdecodecpus (\a b -> a {_videostreaminTOPmaxdecodecpus = b})
videostreaminTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPoutputaspect = lens _videostreaminTOPoutputaspect (\a b -> a {_videostreaminTOPoutputaspect = b})
videostreaminTOPreload :: Lens' TOP (Maybe (Tree Bool))
videostreaminTOPreload = lens _videostreaminTOPreload (\a b -> a {_videostreaminTOPreload = b})
videostreaminTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
videostreaminTOPfiltertype = lens _videostreaminTOPfiltertype (\a b -> a {_videostreaminTOPfiltertype = b})

sharedmemoutTOPresmult :: Lens' TOP (Maybe (Tree Bool))
sharedmemoutTOPresmult = lens _sharedmemoutTOPresmult (\a b -> a {_sharedmemoutTOPresmult = b})
sharedmemoutTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
sharedmemoutTOPaspect2 = lens _sharedmemoutTOPaspect2 (\a b -> a {_sharedmemoutTOPaspect2 = b})
sharedmemoutTOPformat :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPformat = lens _sharedmemoutTOPformat (\a b -> a {_sharedmemoutTOPformat = b})
sharedmemoutTOPactive :: Lens' TOP (Maybe (Tree Bool))
sharedmemoutTOPactive = lens _sharedmemoutTOPactive (\a b -> a {_sharedmemoutTOPactive = b})
sharedmemoutTOPdownloadtype :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPdownloadtype = lens _sharedmemoutTOPdownloadtype (\a b -> a {_sharedmemoutTOPdownloadtype = b})
sharedmemoutTOPnpasses :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPnpasses = lens _sharedmemoutTOPnpasses (\a b -> a {_sharedmemoutTOPnpasses = b})
sharedmemoutTOPmemtype :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPmemtype = lens _sharedmemoutTOPmemtype (\a b -> a {_sharedmemoutTOPmemtype = b})
sharedmemoutTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPinputfiltertype = lens _sharedmemoutTOPinputfiltertype (\a b -> a {_sharedmemoutTOPinputfiltertype = b})
sharedmemoutTOPresmenu :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPresmenu = lens _sharedmemoutTOPresmenu (\a b -> a {_sharedmemoutTOPresmenu = b})
sharedmemoutTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPoutputresolution = lens _sharedmemoutTOPoutputresolution (\a b -> a {_sharedmemoutTOPoutputresolution = b})
sharedmemoutTOPfillmode :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPfillmode = lens _sharedmemoutTOPfillmode (\a b -> a {_sharedmemoutTOPfillmode = b})
sharedmemoutTOPname :: Lens' TOP (Maybe (Tree ByteString))
sharedmemoutTOPname = lens _sharedmemoutTOPname (\a b -> a {_sharedmemoutTOPname = b})
sharedmemoutTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPresolutionh = lens _sharedmemoutTOPresolutionh (\a b -> a {_sharedmemoutTOPresolutionh = b})
sharedmemoutTOPchanmask :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPchanmask = lens _sharedmemoutTOPchanmask (\a b -> a {_sharedmemoutTOPchanmask = b})
sharedmemoutTOParmenu :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOParmenu = lens _sharedmemoutTOParmenu (\a b -> a {_sharedmemoutTOParmenu = b})
sharedmemoutTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPfiltertype = lens _sharedmemoutTOPfiltertype (\a b -> a {_sharedmemoutTOPfiltertype = b})
sharedmemoutTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
sharedmemoutTOPaspect1 = lens _sharedmemoutTOPaspect1 (\a b -> a {_sharedmemoutTOPaspect1 = b})
sharedmemoutTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPresolutionw = lens _sharedmemoutTOPresolutionw (\a b -> a {_sharedmemoutTOPresolutionw = b})
sharedmemoutTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
sharedmemoutTOPoutputaspect = lens _sharedmemoutTOPoutputaspect (\a b -> a {_sharedmemoutTOPoutputaspect = b})

choptoTOPresmult :: Lens' TOP (Maybe (Tree Bool))
choptoTOPresmult = lens _choptoTOPresmult (\a b -> a {_choptoTOPresmult = b})
choptoTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
choptoTOPaspect2 = lens _choptoTOPaspect2 (\a b -> a {_choptoTOPaspect2 = b})
choptoTOPformat :: Lens' TOP (Maybe (Tree Int))
choptoTOPformat = lens _choptoTOPformat (\a b -> a {_choptoTOPformat = b})
choptoTOPresmenu :: Lens' TOP (Maybe (Tree Int))
choptoTOPresmenu = lens _choptoTOPresmenu (\a b -> a {_choptoTOPresmenu = b})
choptoTOPdataformat :: Lens' TOP (Maybe (Tree Int))
choptoTOPdataformat = lens _choptoTOPdataformat (\a b -> a {_choptoTOPdataformat = b})
choptoTOPchanmask :: Lens' TOP (Maybe (Tree Int))
choptoTOPchanmask = lens _choptoTOPchanmask (\a b -> a {_choptoTOPchanmask = b})
choptoTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
choptoTOPinputfiltertype = lens _choptoTOPinputfiltertype (\a b -> a {_choptoTOPinputfiltertype = b})
choptoTOPnpasses :: Lens' TOP (Maybe (Tree Int))
choptoTOPnpasses = lens _choptoTOPnpasses (\a b -> a {_choptoTOPnpasses = b})
choptoTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
choptoTOPoutputresolution = lens _choptoTOPoutputresolution (\a b -> a {_choptoTOPoutputresolution = b})
choptoTOPfillmode :: Lens' TOP (Maybe (Tree Int))
choptoTOPfillmode = lens _choptoTOPfillmode (\a b -> a {_choptoTOPfillmode = b})
choptoTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
choptoTOPresolutionh = lens _choptoTOPresolutionh (\a b -> a {_choptoTOPresolutionh = b})
choptoTOPclamp :: Lens' TOP (Maybe (Tree Bool))
choptoTOPclamp = lens _choptoTOPclamp (\a b -> a {_choptoTOPclamp = b})
choptoTOParmenu :: Lens' TOP (Maybe (Tree Int))
choptoTOParmenu = lens _choptoTOParmenu (\a b -> a {_choptoTOParmenu = b})
choptoTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
choptoTOPfiltertype = lens _choptoTOPfiltertype (\a b -> a {_choptoTOPfiltertype = b})
choptoTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
choptoTOPaspect1 = lens _choptoTOPaspect1 (\a b -> a {_choptoTOPaspect1 = b})
choptoTOPchop :: Lens' TOP (Maybe (Tree CHOP))
choptoTOPchop = lens _choptoTOPchop (\a b -> a {_choptoTOPchop = b})
choptoTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
choptoTOPresolutionw = lens _choptoTOPresolutionw (\a b -> a {_choptoTOPresolutionw = b})
choptoTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
choptoTOPoutputaspect = lens _choptoTOPoutputaspect (\a b -> a {_choptoTOPoutputaspect = b})

openvrTOPresmult :: Lens' TOP (Maybe (Tree Bool))
openvrTOPresmult = lens _openvrTOPresmult (\a b -> a {_openvrTOPresmult = b})
openvrTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
openvrTOPaspect2 = lens _openvrTOPaspect2 (\a b -> a {_openvrTOPaspect2 = b})
openvrTOPformat :: Lens' TOP (Maybe (Tree Int))
openvrTOPformat = lens _openvrTOPformat (\a b -> a {_openvrTOPformat = b})
openvrTOPactive :: Lens' TOP (Maybe (Tree Bool))
openvrTOPactive = lens _openvrTOPactive (\a b -> a {_openvrTOPactive = b})
openvrTOPresmenu :: Lens' TOP (Maybe (Tree Int))
openvrTOPresmenu = lens _openvrTOPresmenu (\a b -> a {_openvrTOPresmenu = b})
openvrTOPnpasses :: Lens' TOP (Maybe (Tree Int))
openvrTOPnpasses = lens _openvrTOPnpasses (\a b -> a {_openvrTOPnpasses = b})
openvrTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
openvrTOPinputfiltertype = lens _openvrTOPinputfiltertype (\a b -> a {_openvrTOPinputfiltertype = b})
openvrTOPchanmask :: Lens' TOP (Maybe (Tree Int))
openvrTOPchanmask = lens _openvrTOPchanmask (\a b -> a {_openvrTOPchanmask = b})
openvrTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
openvrTOPoutputresolution = lens _openvrTOPoutputresolution (\a b -> a {_openvrTOPoutputresolution = b})
openvrTOPfillmode :: Lens' TOP (Maybe (Tree Int))
openvrTOPfillmode = lens _openvrTOPfillmode (\a b -> a {_openvrTOPfillmode = b})
openvrTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
openvrTOPresolutionw = lens _openvrTOPresolutionw (\a b -> a {_openvrTOPresolutionw = b})
openvrTOParmenu :: Lens' TOP (Maybe (Tree Int))
openvrTOParmenu = lens _openvrTOParmenu (\a b -> a {_openvrTOParmenu = b})
openvrTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
openvrTOPfiltertype = lens _openvrTOPfiltertype (\a b -> a {_openvrTOPfiltertype = b})
openvrTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
openvrTOPaspect1 = lens _openvrTOPaspect1 (\a b -> a {_openvrTOPaspect1 = b})
openvrTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
openvrTOPresolutionh = lens _openvrTOPresolutionh (\a b -> a {_openvrTOPresolutionh = b})
openvrTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
openvrTOPoutputaspect = lens _openvrTOPoutputaspect (\a b -> a {_openvrTOPoutputaspect = b})

channelmixTOPred3 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPred3 = lens _channelmixTOPred3 (\a b -> a {_channelmixTOPred3 = b})
channelmixTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPaspect2 = lens _channelmixTOPaspect2 (\a b -> a {_channelmixTOPaspect2 = b})
channelmixTOPformat :: Lens' TOP (Maybe (Tree Int))
channelmixTOPformat = lens _channelmixTOPformat (\a b -> a {_channelmixTOPformat = b})
channelmixTOPblue2 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPblue2 = lens _channelmixTOPblue2 (\a b -> a {_channelmixTOPblue2 = b})
channelmixTOPalpha4 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPalpha4 = lens _channelmixTOPalpha4 (\a b -> a {_channelmixTOPalpha4 = b})
channelmixTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
channelmixTOPinputfiltertype = lens _channelmixTOPinputfiltertype (\a b -> a {_channelmixTOPinputfiltertype = b})
channelmixTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPaspect1 = lens _channelmixTOPaspect1 (\a b -> a {_channelmixTOPaspect1 = b})
channelmixTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
channelmixTOPoutputresolution = lens _channelmixTOPoutputresolution (\a b -> a {_channelmixTOPoutputresolution = b})
channelmixTOPresmult :: Lens' TOP (Maybe (Tree Bool))
channelmixTOPresmult = lens _channelmixTOPresmult (\a b -> a {_channelmixTOPresmult = b})
channelmixTOPalpha3 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPalpha3 = lens _channelmixTOPalpha3 (\a b -> a {_channelmixTOPalpha3 = b})
channelmixTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
channelmixTOPresolutionw = lens _channelmixTOPresolutionw (\a b -> a {_channelmixTOPresolutionw = b})
channelmixTOPgreen2 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPgreen2 = lens _channelmixTOPgreen2 (\a b -> a {_channelmixTOPgreen2 = b})
channelmixTOPconstant2 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPconstant2 = lens _channelmixTOPconstant2 (\a b -> a {_channelmixTOPconstant2 = b})
channelmixTOPgreen1 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPgreen1 = lens _channelmixTOPgreen1 (\a b -> a {_channelmixTOPgreen1 = b})
channelmixTOParmenu :: Lens' TOP (Maybe (Tree Int))
channelmixTOParmenu = lens _channelmixTOParmenu (\a b -> a {_channelmixTOParmenu = b})
channelmixTOPconstant1 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPconstant1 = lens _channelmixTOPconstant1 (\a b -> a {_channelmixTOPconstant1 = b})
channelmixTOPconstant3 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPconstant3 = lens _channelmixTOPconstant3 (\a b -> a {_channelmixTOPconstant3 = b})
channelmixTOPred4 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPred4 = lens _channelmixTOPred4 (\a b -> a {_channelmixTOPred4 = b})
channelmixTOPgreen3 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPgreen3 = lens _channelmixTOPgreen3 (\a b -> a {_channelmixTOPgreen3 = b})
channelmixTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
channelmixTOPresolutionh = lens _channelmixTOPresolutionh (\a b -> a {_channelmixTOPresolutionh = b})
channelmixTOPchanmask :: Lens' TOP (Maybe (Tree Int))
channelmixTOPchanmask = lens _channelmixTOPchanmask (\a b -> a {_channelmixTOPchanmask = b})
channelmixTOPalpha1 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPalpha1 = lens _channelmixTOPalpha1 (\a b -> a {_channelmixTOPalpha1 = b})
channelmixTOPblue1 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPblue1 = lens _channelmixTOPblue1 (\a b -> a {_channelmixTOPblue1 = b})
channelmixTOPalpha2 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPalpha2 = lens _channelmixTOPalpha2 (\a b -> a {_channelmixTOPalpha2 = b})
channelmixTOPresmenu :: Lens' TOP (Maybe (Tree Int))
channelmixTOPresmenu = lens _channelmixTOPresmenu (\a b -> a {_channelmixTOPresmenu = b})
channelmixTOPconstant4 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPconstant4 = lens _channelmixTOPconstant4 (\a b -> a {_channelmixTOPconstant4 = b})
channelmixTOPfillmode :: Lens' TOP (Maybe (Tree Int))
channelmixTOPfillmode = lens _channelmixTOPfillmode (\a b -> a {_channelmixTOPfillmode = b})
channelmixTOPblue3 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPblue3 = lens _channelmixTOPblue3 (\a b -> a {_channelmixTOPblue3 = b})
channelmixTOPgreen4 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPgreen4 = lens _channelmixTOPgreen4 (\a b -> a {_channelmixTOPgreen4 = b})
channelmixTOPnpasses :: Lens' TOP (Maybe (Tree Int))
channelmixTOPnpasses = lens _channelmixTOPnpasses (\a b -> a {_channelmixTOPnpasses = b})
channelmixTOPred2 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPred2 = lens _channelmixTOPred2 (\a b -> a {_channelmixTOPred2 = b})
channelmixTOPred1 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPred1 = lens _channelmixTOPred1 (\a b -> a {_channelmixTOPred1 = b})
channelmixTOPblue4 :: Lens' TOP (Maybe (Tree Float))
channelmixTOPblue4 = lens _channelmixTOPblue4 (\a b -> a {_channelmixTOPblue4 = b})
channelmixTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
channelmixTOPoutputaspect = lens _channelmixTOPoutputaspect (\a b -> a {_channelmixTOPoutputaspect = b})
channelmixTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
channelmixTOPfiltertype = lens _channelmixTOPfiltertype (\a b -> a {_channelmixTOPfiltertype = b})

noiseTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
noiseTOPoutputaspect = lens _noiseTOPoutputaspect (\a b -> a {_noiseTOPoutputaspect = b})
noiseTOPrough :: Lens' TOP (Maybe (Tree Float))
noiseTOPrough = lens _noiseTOPrough (\a b -> a {_noiseTOPrough = b})
noiseTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
noiseTOPaspect2 = lens _noiseTOPaspect2 (\a b -> a {_noiseTOPaspect2 = b})
noiseTOPformat :: Lens' TOP (Maybe (Tree Int))
noiseTOPformat = lens _noiseTOPformat (\a b -> a {_noiseTOPformat = b})
noiseTOPinputscale :: Lens' TOP (Maybe (Tree Float))
noiseTOPinputscale = lens _noiseTOPinputscale (\a b -> a {_noiseTOPinputscale = b})
noiseTOPharmon :: Lens' TOP (Maybe (Tree Int))
noiseTOPharmon = lens _noiseTOPharmon (\a b -> a {_noiseTOPharmon = b})
noiseTOPoffset :: Lens' TOP (Maybe (Tree Float))
noiseTOPoffset = lens _noiseTOPoffset (\a b -> a {_noiseTOPoffset = b})
noiseTOPalpha :: Lens' TOP (Maybe (Tree Int))
noiseTOPalpha = lens _noiseTOPalpha (\a b -> a {_noiseTOPalpha = b})
noiseTOPresmenu :: Lens' TOP (Maybe (Tree Int))
noiseTOPresmenu = lens _noiseTOPresmenu (\a b -> a {_noiseTOPresmenu = b})
noiseTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
noiseTOPoutputresolution = lens _noiseTOPoutputresolution (\a b -> a {_noiseTOPoutputresolution = b})
noiseTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
noiseTOPaspect1 = lens _noiseTOPaspect1 (\a b -> a {_noiseTOPaspect1 = b})
noiseTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
noiseTOPresolutionw = lens _noiseTOPresolutionw (\a b -> a {_noiseTOPresolutionw = b})
noiseTOParmenu :: Lens' TOP (Maybe (Tree Int))
noiseTOParmenu = lens _noiseTOParmenu (\a b -> a {_noiseTOParmenu = b})
noiseTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
noiseTOPfiltertype = lens _noiseTOPfiltertype (\a b -> a {_noiseTOPfiltertype = b})
noiseTOPrgb :: Lens' TOP (Maybe (Tree Int))
noiseTOPrgb = lens _noiseTOPrgb (\a b -> a {_noiseTOPrgb = b})
noiseTOPxord :: Lens' TOP (Maybe (Tree Int))
noiseTOPxord = lens _noiseTOPxord (\a b -> a {_noiseTOPxord = b})
noiseTOPchanmask :: Lens' TOP (Maybe (Tree Int))
noiseTOPchanmask = lens _noiseTOPchanmask (\a b -> a {_noiseTOPchanmask = b})
noiseTOPr :: Lens' TOP (Vec3)
noiseTOPr = lens _noiseTOPr (\a b -> a {_noiseTOPr = b})
noiseTOPaspectcorrect :: Lens' TOP (Maybe (Tree Bool))
noiseTOPaspectcorrect = lens _noiseTOPaspectcorrect (\a b -> a {_noiseTOPaspectcorrect = b})
noiseTOPresmult :: Lens' TOP (Maybe (Tree Bool))
noiseTOPresmult = lens _noiseTOPresmult (\a b -> a {_noiseTOPresmult = b})
noiseTOPgain :: Lens' TOP (Maybe (Tree Float))
noiseTOPgain = lens _noiseTOPgain (\a b -> a {_noiseTOPgain = b})
noiseTOPtype :: Lens' TOP (Maybe (Tree Int))
noiseTOPtype = lens _noiseTOPtype (\a b -> a {_noiseTOPtype = b})
noiseTOPnoisescale :: Lens' TOP (Maybe (Tree Float))
noiseTOPnoisescale = lens _noiseTOPnoisescale (\a b -> a {_noiseTOPnoisescale = b})
noiseTOPs :: Lens' TOP (Vec3)
noiseTOPs = lens _noiseTOPs (\a b -> a {_noiseTOPs = b})
noiseTOPperiod :: Lens' TOP (Maybe (Tree Float))
noiseTOPperiod = lens _noiseTOPperiod (\a b -> a {_noiseTOPperiod = b})
noiseTOPt4d :: Lens' TOP (Maybe (Tree Float))
noiseTOPt4d = lens _noiseTOPt4d (\a b -> a {_noiseTOPt4d = b})
noiseTOPp :: Lens' TOP (Vec3)
noiseTOPp = lens _noiseTOPp (\a b -> a {_noiseTOPp = b})
noiseTOPfillmode :: Lens' TOP (Maybe (Tree Int))
noiseTOPfillmode = lens _noiseTOPfillmode (\a b -> a {_noiseTOPfillmode = b})
noiseTOPdither :: Lens' TOP (Maybe (Tree Bool))
noiseTOPdither = lens _noiseTOPdither (\a b -> a {_noiseTOPdither = b})
noiseTOPspread :: Lens' TOP (Maybe (Tree Float))
noiseTOPspread = lens _noiseTOPspread (\a b -> a {_noiseTOPspread = b})
noiseTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
noiseTOPresolutionh = lens _noiseTOPresolutionh (\a b -> a {_noiseTOPresolutionh = b})
noiseTOPs4d :: Lens' TOP (Maybe (Tree Float))
noiseTOPs4d = lens _noiseTOPs4d (\a b -> a {_noiseTOPs4d = b})
noiseTOPseed :: Lens' TOP (Maybe (Tree Float))
noiseTOPseed = lens _noiseTOPseed (\a b -> a {_noiseTOPseed = b})
noiseTOPnpasses :: Lens' TOP (Maybe (Tree Int))
noiseTOPnpasses = lens _noiseTOPnpasses (\a b -> a {_noiseTOPnpasses = b})
noiseTOPrord :: Lens' TOP (Maybe (Tree Int))
noiseTOPrord = lens _noiseTOPrord (\a b -> a {_noiseTOPrord = b})
noiseTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
noiseTOPinputfiltertype = lens _noiseTOPinputfiltertype (\a b -> a {_noiseTOPinputfiltertype = b})
noiseTOPamp :: Lens' TOP (Maybe (Tree Float))
noiseTOPamp = lens _noiseTOPamp (\a b -> a {_noiseTOPamp = b})
noiseTOPt :: Lens' TOP (Vec3)
noiseTOPt = lens _noiseTOPt (\a b -> a {_noiseTOPt = b})
noiseTOPexp :: Lens' TOP (Maybe (Tree Float))
noiseTOPexp = lens _noiseTOPexp (\a b -> a {_noiseTOPexp = b})
noiseTOPmono :: Lens' TOP (Maybe (Tree Bool))
noiseTOPmono = lens _noiseTOPmono (\a b -> a {_noiseTOPmono = b})

oculusriftTOPresmult :: Lens' TOP (Maybe (Tree Bool))
oculusriftTOPresmult = lens _oculusriftTOPresmult (\a b -> a {_oculusriftTOPresmult = b})
oculusriftTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
oculusriftTOPaspect2 = lens _oculusriftTOPaspect2 (\a b -> a {_oculusriftTOPaspect2 = b})
oculusriftTOPformat :: Lens' TOP (Maybe (Tree Int))
oculusriftTOPformat = lens _oculusriftTOPformat (\a b -> a {_oculusriftTOPformat = b})
oculusriftTOPactive :: Lens' TOP (Maybe (Tree Bool))
oculusriftTOPactive = lens _oculusriftTOPactive (\a b -> a {_oculusriftTOPactive = b})
oculusriftTOPresmenu :: Lens' TOP (Maybe (Tree Int))
oculusriftTOPresmenu = lens _oculusriftTOPresmenu (\a b -> a {_oculusriftTOPresmenu = b})
oculusriftTOPnpasses :: Lens' TOP (Maybe (Tree Int))
oculusriftTOPnpasses = lens _oculusriftTOPnpasses (\a b -> a {_oculusriftTOPnpasses = b})
oculusriftTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
oculusriftTOPinputfiltertype = lens _oculusriftTOPinputfiltertype (\a b -> a {_oculusriftTOPinputfiltertype = b})
oculusriftTOPchanmask :: Lens' TOP (Maybe (Tree Int))
oculusriftTOPchanmask = lens _oculusriftTOPchanmask (\a b -> a {_oculusriftTOPchanmask = b})
oculusriftTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
oculusriftTOPoutputresolution = lens _oculusriftTOPoutputresolution (\a b -> a {_oculusriftTOPoutputresolution = b})
oculusriftTOPfillmode :: Lens' TOP (Maybe (Tree Int))
oculusriftTOPfillmode = lens _oculusriftTOPfillmode (\a b -> a {_oculusriftTOPfillmode = b})
oculusriftTOPdebugperfhud :: Lens' TOP (Maybe (Tree Int))
oculusriftTOPdebugperfhud = lens _oculusriftTOPdebugperfhud (\a b -> a {_oculusriftTOPdebugperfhud = b})
oculusriftTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
oculusriftTOPresolutionw = lens _oculusriftTOPresolutionw (\a b -> a {_oculusriftTOPresolutionw = b})
oculusriftTOParmenu :: Lens' TOP (Maybe (Tree Int))
oculusriftTOParmenu = lens _oculusriftTOParmenu (\a b -> a {_oculusriftTOParmenu = b})
oculusriftTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
oculusriftTOPfiltertype = lens _oculusriftTOPfiltertype (\a b -> a {_oculusriftTOPfiltertype = b})
oculusriftTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
oculusriftTOPaspect1 = lens _oculusriftTOPaspect1 (\a b -> a {_oculusriftTOPaspect1 = b})
oculusriftTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
oculusriftTOPresolutionh = lens _oculusriftTOPresolutionh (\a b -> a {_oculusriftTOPresolutionh = b})
oculusriftTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
oculusriftTOPoutputaspect = lens _oculusriftTOPoutputaspect (\a b -> a {_oculusriftTOPoutputaspect = b})

transformTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
transformTOPaspect2 = lens _transformTOPaspect2 (\a b -> a {_transformTOPaspect2 = b})
transformTOPformat :: Lens' TOP (Maybe (Tree Int))
transformTOPformat = lens _transformTOPformat (\a b -> a {_transformTOPformat = b})
transformTOPextend :: Lens' TOP (Maybe (Tree Int))
transformTOPextend = lens _transformTOPextend (\a b -> a {_transformTOPextend = b})
transformTOPchanmask :: Lens' TOP (Maybe (Tree Int))
transformTOPchanmask = lens _transformTOPchanmask (\a b -> a {_transformTOPchanmask = b})
transformTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
transformTOPoutputresolution = lens _transformTOPoutputresolution (\a b -> a {_transformTOPoutputresolution = b})
transformTOPfillmode :: Lens' TOP (Maybe (Tree Int))
transformTOPfillmode = lens _transformTOPfillmode (\a b -> a {_transformTOPfillmode = b})
transformTOPgrowshrink :: Lens' TOP (Vec2)
transformTOPgrowshrink = lens _transformTOPgrowshrink (\a b -> a {_transformTOPgrowshrink = b})
transformTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
transformTOPresolutionw = lens _transformTOPresolutionw (\a b -> a {_transformTOPresolutionw = b})
transformTOPmipmapbias :: Lens' TOP (Maybe (Tree Float))
transformTOPmipmapbias = lens _transformTOPmipmapbias (\a b -> a {_transformTOPmipmapbias = b})
transformTOParmenu :: Lens' TOP (Maybe (Tree Int))
transformTOParmenu = lens _transformTOParmenu (\a b -> a {_transformTOParmenu = b})
transformTOPlimittiles :: Lens' TOP (Maybe (Tree Bool))
transformTOPlimittiles = lens _transformTOPlimittiles (\a b -> a {_transformTOPlimittiles = b})
transformTOPtileu2 :: Lens' TOP (Maybe (Tree Float))
transformTOPtileu2 = lens _transformTOPtileu2 (\a b -> a {_transformTOPtileu2 = b})
transformTOPtileu1 :: Lens' TOP (Maybe (Tree Float))
transformTOPtileu1 = lens _transformTOPtileu1 (\a b -> a {_transformTOPtileu1 = b})
transformTOPbgcolor :: Lens' TOP (Vec4)
transformTOPbgcolor = lens _transformTOPbgcolor (\a b -> a {_transformTOPbgcolor = b})
transformTOProtate :: Lens' TOP (Maybe (Tree Float))
transformTOProtate = lens _transformTOProtate (\a b -> a {_transformTOProtate = b})
transformTOPxord :: Lens' TOP (Maybe (Tree Int))
transformTOPxord = lens _transformTOPxord (\a b -> a {_transformTOPxord = b})
transformTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
transformTOPinputfiltertype = lens _transformTOPinputfiltertype (\a b -> a {_transformTOPinputfiltertype = b})
transformTOPresmult :: Lens' TOP (Maybe (Tree Bool))
transformTOPresmult = lens _transformTOPresmult (\a b -> a {_transformTOPresmult = b})
transformTOPpunit :: Lens' TOP (Maybe (Tree Int))
transformTOPpunit = lens _transformTOPpunit (\a b -> a {_transformTOPpunit = b})
transformTOPs :: Lens' TOP (Vec2)
transformTOPs = lens _transformTOPs (\a b -> a {_transformTOPs = b})
transformTOPresmenu :: Lens' TOP (Maybe (Tree Int))
transformTOPresmenu = lens _transformTOPresmenu (\a b -> a {_transformTOPresmenu = b})
transformTOPp :: Lens' TOP (Vec2)
transformTOPp = lens _transformTOPp (\a b -> a {_transformTOPp = b})
transformTOPtilev2 :: Lens' TOP (Maybe (Tree Float))
transformTOPtilev2 = lens _transformTOPtilev2 (\a b -> a {_transformTOPtilev2 = b})
transformTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
transformTOPresolutionh = lens _transformTOPresolutionh (\a b -> a {_transformTOPresolutionh = b})
transformTOPtunit :: Lens' TOP (Maybe (Tree Int))
transformTOPtunit = lens _transformTOPtunit (\a b -> a {_transformTOPtunit = b})
transformTOPcompover :: Lens' TOP (Maybe (Tree Bool))
transformTOPcompover = lens _transformTOPcompover (\a b -> a {_transformTOPcompover = b})
transformTOPnpasses :: Lens' TOP (Maybe (Tree Int))
transformTOPnpasses = lens _transformTOPnpasses (\a b -> a {_transformTOPnpasses = b})
transformTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
transformTOPaspect1 = lens _transformTOPaspect1 (\a b -> a {_transformTOPaspect1 = b})
transformTOPt :: Lens' TOP (Vec2)
transformTOPt = lens _transformTOPt (\a b -> a {_transformTOPt = b})
transformTOPtilev1 :: Lens' TOP (Maybe (Tree Float))
transformTOPtilev1 = lens _transformTOPtilev1 (\a b -> a {_transformTOPtilev1 = b})
transformTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
transformTOPoutputaspect = lens _transformTOPoutputaspect (\a b -> a {_transformTOPoutputaspect = b})
transformTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
transformTOPfiltertype = lens _transformTOPfiltertype (\a b -> a {_transformTOPfiltertype = b})

mathTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
mathTOPaspect2 = lens _mathTOPaspect2 (\a b -> a {_mathTOPaspect2 = b})
mathTOPformat :: Lens' TOP (Maybe (Tree Int))
mathTOPformat = lens _mathTOPformat (\a b -> a {_mathTOPformat = b})
mathTOPpostoff :: Lens' TOP (Maybe (Tree Float))
mathTOPpostoff = lens _mathTOPpostoff (\a b -> a {_mathTOPpostoff = b})
mathTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
mathTOPinputfiltertype = lens _mathTOPinputfiltertype (\a b -> a {_mathTOPinputfiltertype = b})
mathTOPchanmask :: Lens' TOP (Maybe (Tree Int))
mathTOPchanmask = lens _mathTOPchanmask (\a b -> a {_mathTOPchanmask = b})
mathTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
mathTOPoutputresolution = lens _mathTOPoutputresolution (\a b -> a {_mathTOPoutputresolution = b})
mathTOPfillmode :: Lens' TOP (Maybe (Tree Int))
mathTOPfillmode = lens _mathTOPfillmode (\a b -> a {_mathTOPfillmode = b})
mathTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
mathTOPresolutionw = lens _mathTOPresolutionw (\a b -> a {_mathTOPresolutionw = b})
mathTOParmenu :: Lens' TOP (Maybe (Tree Int))
mathTOParmenu = lens _mathTOParmenu (\a b -> a {_mathTOParmenu = b})
mathTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
mathTOPfiltertype = lens _mathTOPfiltertype (\a b -> a {_mathTOPfiltertype = b})
mathTOPfromrange1 :: Lens' TOP (Maybe (Tree Float))
mathTOPfromrange1 = lens _mathTOPfromrange1 (\a b -> a {_mathTOPfromrange1 = b})
mathTOPinteger :: Lens' TOP (Maybe (Tree Int))
mathTOPinteger = lens _mathTOPinteger (\a b -> a {_mathTOPinteger = b})
mathTOPresmult :: Lens' TOP (Maybe (Tree Bool))
mathTOPresmult = lens _mathTOPresmult (\a b -> a {_mathTOPresmult = b})
mathTOPgain :: Lens' TOP (Maybe (Tree Float))
mathTOPgain = lens _mathTOPgain (\a b -> a {_mathTOPgain = b})
mathTOPinputmask :: Lens' TOP (Maybe (Tree Int))
mathTOPinputmask = lens _mathTOPinputmask (\a b -> a {_mathTOPinputmask = b})
mathTOPresmenu :: Lens' TOP (Maybe (Tree Int))
mathTOPresmenu = lens _mathTOPresmenu (\a b -> a {_mathTOPresmenu = b})
mathTOPtorange1 :: Lens' TOP (Maybe (Tree Float))
mathTOPtorange1 = lens _mathTOPtorange1 (\a b -> a {_mathTOPtorange1 = b})
mathTOPfromrange2 :: Lens' TOP (Maybe (Tree Float))
mathTOPfromrange2 = lens _mathTOPfromrange2 (\a b -> a {_mathTOPfromrange2 = b})
mathTOPpostop :: Lens' TOP (Maybe (Tree Int))
mathTOPpostop = lens _mathTOPpostop (\a b -> a {_mathTOPpostop = b})
mathTOPoutputchannels :: Lens' TOP (Maybe (Tree Int))
mathTOPoutputchannels = lens _mathTOPoutputchannels (\a b -> a {_mathTOPoutputchannels = b})
mathTOPchanop :: Lens' TOP (Maybe (Tree Int))
mathTOPchanop = lens _mathTOPchanop (\a b -> a {_mathTOPchanop = b})
mathTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
mathTOPresolutionh = lens _mathTOPresolutionh (\a b -> a {_mathTOPresolutionh = b})
mathTOPnpasses :: Lens' TOP (Maybe (Tree Int))
mathTOPnpasses = lens _mathTOPnpasses (\a b -> a {_mathTOPnpasses = b})
mathTOPpreop :: Lens' TOP (Maybe (Tree Int))
mathTOPpreop = lens _mathTOPpreop (\a b -> a {_mathTOPpreop = b})
mathTOPpreoff :: Lens' TOP (Maybe (Tree Float))
mathTOPpreoff = lens _mathTOPpreoff (\a b -> a {_mathTOPpreoff = b})
mathTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
mathTOPaspect1 = lens _mathTOPaspect1 (\a b -> a {_mathTOPaspect1 = b})
mathTOPop :: Lens' TOP (Maybe (Tree Int))
mathTOPop = lens _mathTOPop (\a b -> a {_mathTOPop = b})
mathTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
mathTOPoutputaspect = lens _mathTOPoutputaspect (\a b -> a {_mathTOPoutputaspect = b})
mathTOPtorange2 :: Lens' TOP (Maybe (Tree Float))
mathTOPtorange2 = lens _mathTOPtorange2 (\a b -> a {_mathTOPtorange2 = b})

directxoutTOPresmult :: Lens' TOP (Maybe (Tree Bool))
directxoutTOPresmult = lens _directxoutTOPresmult (\a b -> a {_directxoutTOPresmult = b})
directxoutTOPqueuesize :: Lens' TOP (Maybe (Tree Int))
directxoutTOPqueuesize = lens _directxoutTOPqueuesize (\a b -> a {_directxoutTOPqueuesize = b})
directxoutTOPformat :: Lens' TOP (Maybe (Tree Int))
directxoutTOPformat = lens _directxoutTOPformat (\a b -> a {_directxoutTOPformat = b})
directxoutTOPactive :: Lens' TOP (Maybe (Tree Bool))
directxoutTOPactive = lens _directxoutTOPactive (\a b -> a {_directxoutTOPactive = b})
directxoutTOPresmenu :: Lens' TOP (Maybe (Tree Int))
directxoutTOPresmenu = lens _directxoutTOPresmenu (\a b -> a {_directxoutTOPresmenu = b})
directxoutTOPnpasses :: Lens' TOP (Maybe (Tree Int))
directxoutTOPnpasses = lens _directxoutTOPnpasses (\a b -> a {_directxoutTOPnpasses = b})
directxoutTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
directxoutTOPinputfiltertype = lens _directxoutTOPinputfiltertype (\a b -> a {_directxoutTOPinputfiltertype = b})
directxoutTOPchanmask :: Lens' TOP (Maybe (Tree Int))
directxoutTOPchanmask = lens _directxoutTOPchanmask (\a b -> a {_directxoutTOPchanmask = b})
directxoutTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
directxoutTOPoutputresolution = lens _directxoutTOPoutputresolution (\a b -> a {_directxoutTOPoutputresolution = b})
directxoutTOPfillmode :: Lens' TOP (Maybe (Tree Int))
directxoutTOPfillmode = lens _directxoutTOPfillmode (\a b -> a {_directxoutTOPfillmode = b})
directxoutTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
directxoutTOPresolutionw = lens _directxoutTOPresolutionw (\a b -> a {_directxoutTOPresolutionw = b})
directxoutTOParmenu :: Lens' TOP (Maybe (Tree Int))
directxoutTOParmenu = lens _directxoutTOParmenu (\a b -> a {_directxoutTOParmenu = b})
directxoutTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
directxoutTOPfiltertype = lens _directxoutTOPfiltertype (\a b -> a {_directxoutTOPfiltertype = b})
directxoutTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
directxoutTOPaspect1 = lens _directxoutTOPaspect1 (\a b -> a {_directxoutTOPaspect1 = b})
directxoutTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
directxoutTOPaspect2 = lens _directxoutTOPaspect2 (\a b -> a {_directxoutTOPaspect2 = b})
directxoutTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
directxoutTOPresolutionh = lens _directxoutTOPresolutionh (\a b -> a {_directxoutTOPresolutionh = b})
directxoutTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
directxoutTOPoutputaspect = lens _directxoutTOPoutputaspect (\a b -> a {_directxoutTOPoutputaspect = b})

chromakeyTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPaspect2 = lens _chromakeyTOPaspect2 (\a b -> a {_chromakeyTOPaspect2 = b})
chromakeyTOPformat :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPformat = lens _chromakeyTOPformat (\a b -> a {_chromakeyTOPformat = b})
chromakeyTOPrgbout :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPrgbout = lens _chromakeyTOPrgbout (\a b -> a {_chromakeyTOPrgbout = b})
chromakeyTOPhuemax :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPhuemax = lens _chromakeyTOPhuemax (\a b -> a {_chromakeyTOPhuemax = b})
chromakeyTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPaspect1 = lens _chromakeyTOPaspect1 (\a b -> a {_chromakeyTOPaspect1 = b})
chromakeyTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPoutputresolution = lens _chromakeyTOPoutputresolution (\a b -> a {_chromakeyTOPoutputresolution = b})
chromakeyTOPfillmode :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPfillmode = lens _chromakeyTOPfillmode (\a b -> a {_chromakeyTOPfillmode = b})
chromakeyTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPresolutionw = lens _chromakeyTOPresolutionw (\a b -> a {_chromakeyTOPresolutionw = b})
chromakeyTOPvalmin :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPvalmin = lens _chromakeyTOPvalmin (\a b -> a {_chromakeyTOPvalmin = b})
chromakeyTOParmenu :: Lens' TOP (Maybe (Tree Int))
chromakeyTOParmenu = lens _chromakeyTOParmenu (\a b -> a {_chromakeyTOParmenu = b})
chromakeyTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPfiltertype = lens _chromakeyTOPfiltertype (\a b -> a {_chromakeyTOPfiltertype = b})
chromakeyTOPalphaout :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPalphaout = lens _chromakeyTOPalphaout (\a b -> a {_chromakeyTOPalphaout = b})
chromakeyTOPinvert :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPinvert = lens _chromakeyTOPinvert (\a b -> a {_chromakeyTOPinvert = b})
chromakeyTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPresolutionh = lens _chromakeyTOPresolutionh (\a b -> a {_chromakeyTOPresolutionh = b})
chromakeyTOPssofthigh :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPssofthigh = lens _chromakeyTOPssofthigh (\a b -> a {_chromakeyTOPssofthigh = b})
chromakeyTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPinputfiltertype = lens _chromakeyTOPinputfiltertype (\a b -> a {_chromakeyTOPinputfiltertype = b})
chromakeyTOPhuemin :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPhuemin = lens _chromakeyTOPhuemin (\a b -> a {_chromakeyTOPhuemin = b})
chromakeyTOPresmult :: Lens' TOP (Maybe (Tree Bool))
chromakeyTOPresmult = lens _chromakeyTOPresmult (\a b -> a {_chromakeyTOPresmult = b})
chromakeyTOPssoftlow :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPssoftlow = lens _chromakeyTOPssoftlow (\a b -> a {_chromakeyTOPssoftlow = b})
chromakeyTOPresmenu :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPresmenu = lens _chromakeyTOPresmenu (\a b -> a {_chromakeyTOPresmenu = b})
chromakeyTOPchanmask :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPchanmask = lens _chromakeyTOPchanmask (\a b -> a {_chromakeyTOPchanmask = b})
chromakeyTOPhsofthigh :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPhsofthigh = lens _chromakeyTOPhsofthigh (\a b -> a {_chromakeyTOPhsofthigh = b})
chromakeyTOPsatmax :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPsatmax = lens _chromakeyTOPsatmax (\a b -> a {_chromakeyTOPsatmax = b})
chromakeyTOPvsofthigh :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPvsofthigh = lens _chromakeyTOPvsofthigh (\a b -> a {_chromakeyTOPvsofthigh = b})
chromakeyTOPsatmin :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPsatmin = lens _chromakeyTOPsatmin (\a b -> a {_chromakeyTOPsatmin = b})
chromakeyTOPvalmax :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPvalmax = lens _chromakeyTOPvalmax (\a b -> a {_chromakeyTOPvalmax = b})
chromakeyTOPnpasses :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPnpasses = lens _chromakeyTOPnpasses (\a b -> a {_chromakeyTOPnpasses = b})
chromakeyTOPvsoftlow :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPvsoftlow = lens _chromakeyTOPvsoftlow (\a b -> a {_chromakeyTOPvsoftlow = b})
chromakeyTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
chromakeyTOPoutputaspect = lens _chromakeyTOPoutputaspect (\a b -> a {_chromakeyTOPoutputaspect = b})
chromakeyTOPhsoftlow :: Lens' TOP (Maybe (Tree Float))
chromakeyTOPhsoftlow = lens _chromakeyTOPhsoftlow (\a b -> a {_chromakeyTOPhsoftlow = b})

videodeviceinTOPlgamma :: Lens' TOP (Maybe (Tree Float))
videodeviceinTOPlgamma = lens _videodeviceinTOPlgamma (\a b -> a {_videodeviceinTOPlgamma = b})
videodeviceinTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
videodeviceinTOPaspect2 = lens _videodeviceinTOPaspect2 (\a b -> a {_videodeviceinTOPaspect2 = b})
videodeviceinTOPformat :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPformat = lens _videodeviceinTOPformat (\a b -> a {_videodeviceinTOPformat = b})
videodeviceinTOPexposure :: Lens' TOP (Maybe (Tree Float))
videodeviceinTOPexposure = lens _videodeviceinTOPexposure (\a b -> a {_videodeviceinTOPexposure = b})
videodeviceinTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPinputfiltertype = lens _videodeviceinTOPinputfiltertype (\a b -> a {_videodeviceinTOPinputfiltertype = b})
videodeviceinTOPfillmode :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPfillmode = lens _videodeviceinTOPfillmode (\a b -> a {_videodeviceinTOPfillmode = b})
videodeviceinTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPresolutionw = lens _videodeviceinTOPresolutionw (\a b -> a {_videodeviceinTOPresolutionw = b})
videodeviceinTOPprecedence :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPprecedence = lens _videodeviceinTOPprecedence (\a b -> a {_videodeviceinTOPprecedence = b})
videodeviceinTOParmenu :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOParmenu = lens _videodeviceinTOParmenu (\a b -> a {_videodeviceinTOParmenu = b})
videodeviceinTOPinputpixelformat :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPinputpixelformat = lens _videodeviceinTOPinputpixelformat (\a b -> a {_videodeviceinTOPinputpixelformat = b})
videodeviceinTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPfiltertype = lens _videodeviceinTOPfiltertype (\a b -> a {_videodeviceinTOPfiltertype = b})
videodeviceinTOPautogebias :: Lens' TOP (Maybe (Tree Float))
videodeviceinTOPautogebias = lens _videodeviceinTOPautogebias (\a b -> a {_videodeviceinTOPautogebias = b})
videodeviceinTOPactive :: Lens' TOP (Maybe (Tree Bool))
videodeviceinTOPactive = lens _videodeviceinTOPactive (\a b -> a {_videodeviceinTOPactive = b})
videodeviceinTOPgain :: Lens' TOP (Maybe (Tree Float))
videodeviceinTOPgain = lens _videodeviceinTOPgain (\a b -> a {_videodeviceinTOPgain = b})
videodeviceinTOPcgamma :: Lens' TOP (Maybe (Tree Float))
videodeviceinTOPcgamma = lens _videodeviceinTOPcgamma (\a b -> a {_videodeviceinTOPcgamma = b})
videodeviceinTOPlibrary :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPlibrary = lens _videodeviceinTOPlibrary (\a b -> a {_videodeviceinTOPlibrary = b})
videodeviceinTOPresmenu :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPresmenu = lens _videodeviceinTOPresmenu (\a b -> a {_videodeviceinTOPresmenu = b})
videodeviceinTOPchannel :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPchannel = lens _videodeviceinTOPchannel (\a b -> a {_videodeviceinTOPchannel = b})
videodeviceinTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPresolutionh = lens _videodeviceinTOPresolutionh (\a b -> a {_videodeviceinTOPresolutionh = b})
videodeviceinTOPnpasses :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPnpasses = lens _videodeviceinTOPnpasses (\a b -> a {_videodeviceinTOPnpasses = b})
videodeviceinTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
videodeviceinTOPaspect1 = lens _videodeviceinTOPaspect1 (\a b -> a {_videodeviceinTOPaspect1 = b})
videodeviceinTOPlimitedfps :: Lens' TOP (Maybe (Tree Float))
videodeviceinTOPlimitedfps = lens _videodeviceinTOPlimitedfps (\a b -> a {_videodeviceinTOPlimitedfps = b})
videodeviceinTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPoutputaspect = lens _videodeviceinTOPoutputaspect (\a b -> a {_videodeviceinTOPoutputaspect = b})
videodeviceinTOPmaxsyncoffset :: Lens' TOP (Maybe (Tree Float))
videodeviceinTOPmaxsyncoffset = lens _videodeviceinTOPmaxsyncoffset (\a b -> a {_videodeviceinTOPmaxsyncoffset = b})
videodeviceinTOPtransfermode :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPtransfermode = lens _videodeviceinTOPtransfermode (\a b -> a {_videodeviceinTOPtransfermode = b})
videodeviceinTOPoptions :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPoptions = lens _videodeviceinTOPoptions (\a b -> a {_videodeviceinTOPoptions = b})
videodeviceinTOPsynctimeout :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPsynctimeout = lens _videodeviceinTOPsynctimeout (\a b -> a {_videodeviceinTOPsynctimeout = b})
videodeviceinTOPspecifyip :: Lens' TOP (Maybe (Tree Bool))
videodeviceinTOPspecifyip = lens _videodeviceinTOPspecifyip (\a b -> a {_videodeviceinTOPspecifyip = b})
videodeviceinTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPoutputresolution = lens _videodeviceinTOPoutputresolution (\a b -> a {_videodeviceinTOPoutputresolution = b})
videodeviceinTOPsyncgroupindex :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPsyncgroupindex = lens _videodeviceinTOPsyncgroupindex (\a b -> a {_videodeviceinTOPsyncgroupindex = b})
videodeviceinTOPquadlink :: Lens' TOP (Maybe (Tree Bool))
videodeviceinTOPquadlink = lens _videodeviceinTOPquadlink (\a b -> a {_videodeviceinTOPquadlink = b})
videodeviceinTOPlimitfps :: Lens' TOP (Maybe (Tree Bool))
videodeviceinTOPlimitfps = lens _videodeviceinTOPlimitfps (\a b -> a {_videodeviceinTOPlimitfps = b})
videodeviceinTOPautowb :: Lens' TOP (Maybe (Tree Bool))
videodeviceinTOPautowb = lens _videodeviceinTOPautowb (\a b -> a {_videodeviceinTOPautowb = b})
videodeviceinTOPip :: Lens' TOP (Maybe (Tree ByteString))
videodeviceinTOPip = lens _videodeviceinTOPip (\a b -> a {_videodeviceinTOPip = b})
videodeviceinTOPautoge :: Lens' TOP (Maybe (Tree Bool))
videodeviceinTOPautoge = lens _videodeviceinTOPautoge (\a b -> a {_videodeviceinTOPautoge = b})
videodeviceinTOPresmult :: Lens' TOP (Maybe (Tree Bool))
videodeviceinTOPresmult = lens _videodeviceinTOPresmult (\a b -> a {_videodeviceinTOPresmult = b})
videodeviceinTOPsignalformat :: Lens' TOP (Maybe (Tree ByteString))
videodeviceinTOPsignalformat = lens _videodeviceinTOPsignalformat (\a b -> a {_videodeviceinTOPsignalformat = b})
videodeviceinTOPwbcoeffs :: Lens' TOP (Vec3)
videodeviceinTOPwbcoeffs = lens _videodeviceinTOPwbcoeffs (\a b -> a {_videodeviceinTOPwbcoeffs = b})
videodeviceinTOPcapture :: Lens' TOP (Maybe (Tree Bool))
videodeviceinTOPcapture = lens _videodeviceinTOPcapture (\a b -> a {_videodeviceinTOPcapture = b})
videodeviceinTOPdevice :: Lens' TOP (Maybe (Tree ByteString))
videodeviceinTOPdevice = lens _videodeviceinTOPdevice (\a b -> a {_videodeviceinTOPdevice = b})
videodeviceinTOPchanmask :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPchanmask = lens _videodeviceinTOPchanmask (\a b -> a {_videodeviceinTOPchanmask = b})
videodeviceinTOPdeinterlace :: Lens' TOP (Maybe (Tree Int))
videodeviceinTOPdeinterlace = lens _videodeviceinTOPdeinterlace (\a b -> a {_videodeviceinTOPdeinterlace = b})
videodeviceinTOPcapturepulse :: Lens' TOP (Maybe (Tree Bool))
videodeviceinTOPcapturepulse = lens _videodeviceinTOPcapturepulse (\a b -> a {_videodeviceinTOPcapturepulse = b})
videodeviceinTOPsyncinputs :: Lens' TOP (Maybe (Tree Bool))
videodeviceinTOPsyncinputs = lens _videodeviceinTOPsyncinputs (\a b -> a {_videodeviceinTOPsyncinputs = b})

ndioutTOParmenu :: Lens' TOP (Maybe (Tree Int))
ndioutTOParmenu = lens _ndioutTOParmenu (\a b -> a {_ndioutTOParmenu = b})
ndioutTOPresmult :: Lens' TOP (Maybe (Tree Bool))
ndioutTOPresmult = lens _ndioutTOPresmult (\a b -> a {_ndioutTOPresmult = b})
ndioutTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
ndioutTOPaspect2 = lens _ndioutTOPaspect2 (\a b -> a {_ndioutTOPaspect2 = b})
ndioutTOPformat :: Lens' TOP (Maybe (Tree Int))
ndioutTOPformat = lens _ndioutTOPformat (\a b -> a {_ndioutTOPformat = b})
ndioutTOPactive :: Lens' TOP (Maybe (Tree Bool))
ndioutTOPactive = lens _ndioutTOPactive (\a b -> a {_ndioutTOPactive = b})
ndioutTOPresmenu :: Lens' TOP (Maybe (Tree Int))
ndioutTOPresmenu = lens _ndioutTOPresmenu (\a b -> a {_ndioutTOPresmenu = b})
ndioutTOPnpasses :: Lens' TOP (Maybe (Tree Int))
ndioutTOPnpasses = lens _ndioutTOPnpasses (\a b -> a {_ndioutTOPnpasses = b})
ndioutTOPchanmask :: Lens' TOP (Maybe (Tree Int))
ndioutTOPchanmask = lens _ndioutTOPchanmask (\a b -> a {_ndioutTOPchanmask = b})
ndioutTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
ndioutTOPinputfiltertype = lens _ndioutTOPinputfiltertype (\a b -> a {_ndioutTOPinputfiltertype = b})
ndioutTOPfps :: Lens' TOP (Maybe (Tree Float))
ndioutTOPfps = lens _ndioutTOPfps (\a b -> a {_ndioutTOPfps = b})
ndioutTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
ndioutTOPoutputresolution = lens _ndioutTOPoutputresolution (\a b -> a {_ndioutTOPoutputresolution = b})
ndioutTOPfillmode :: Lens' TOP (Maybe (Tree Int))
ndioutTOPfillmode = lens _ndioutTOPfillmode (\a b -> a {_ndioutTOPfillmode = b})
ndioutTOPname :: Lens' TOP (Maybe (Tree ByteString))
ndioutTOPname = lens _ndioutTOPname (\a b -> a {_ndioutTOPname = b})
ndioutTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
ndioutTOPresolutionh = lens _ndioutTOPresolutionh (\a b -> a {_ndioutTOPresolutionh = b})
ndioutTOPincludealpha :: Lens' TOP (Maybe (Tree Bool))
ndioutTOPincludealpha = lens _ndioutTOPincludealpha (\a b -> a {_ndioutTOPincludealpha = b})
ndioutTOPfailovername :: Lens' TOP (Maybe (Tree ByteString))
ndioutTOPfailovername = lens _ndioutTOPfailovername (\a b -> a {_ndioutTOPfailovername = b})
ndioutTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
ndioutTOPfiltertype = lens _ndioutTOPfiltertype (\a b -> a {_ndioutTOPfiltertype = b})
ndioutTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
ndioutTOPaspect1 = lens _ndioutTOPaspect1 (\a b -> a {_ndioutTOPaspect1 = b})
ndioutTOPgrouptable :: Lens' TOP (Maybe (Tree DAT))
ndioutTOPgrouptable = lens _ndioutTOPgrouptable (\a b -> a {_ndioutTOPgrouptable = b})
ndioutTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
ndioutTOPresolutionw = lens _ndioutTOPresolutionw (\a b -> a {_ndioutTOPresolutionw = b})
ndioutTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
ndioutTOPoutputaspect = lens _ndioutTOPoutputaspect (\a b -> a {_ndioutTOPoutputaspect = b})

svgTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
svgTOPaspect2 = lens _svgTOPaspect2 (\a b -> a {_svgTOPaspect2 = b})
svgTOPformat :: Lens' TOP (Maybe (Tree Int))
svgTOPformat = lens _svgTOPformat (\a b -> a {_svgTOPformat = b})
svgTOPfile :: Lens' TOP (Maybe (Tree ByteString))
svgTOPfile = lens _svgTOPfile (\a b -> a {_svgTOPfile = b})
svgTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
svgTOPinputfiltertype = lens _svgTOPinputfiltertype (\a b -> a {_svgTOPinputfiltertype = b})
svgTOPrord :: Lens' TOP (Maybe (Tree Int))
svgTOPrord = lens _svgTOPrord (\a b -> a {_svgTOPrord = b})
svgTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
svgTOPoutputresolution = lens _svgTOPoutputresolution (\a b -> a {_svgTOPoutputresolution = b})
svgTOPfillmode :: Lens' TOP (Maybe (Tree Int))
svgTOPfillmode = lens _svgTOPfillmode (\a b -> a {_svgTOPfillmode = b})
svgTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
svgTOPresolutionw = lens _svgTOPresolutionw (\a b -> a {_svgTOPresolutionw = b})
svgTOParmenu :: Lens' TOP (Maybe (Tree Int))
svgTOParmenu = lens _svgTOParmenu (\a b -> a {_svgTOParmenu = b})
svgTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
svgTOPfiltertype = lens _svgTOPfiltertype (\a b -> a {_svgTOPfiltertype = b})
svgTOPbgcolor :: Lens' TOP (Vec3)
svgTOPbgcolor = lens _svgTOPbgcolor (\a b -> a {_svgTOPbgcolor = b})
svgTOPantialias :: Lens' TOP (Maybe (Tree Int))
svgTOPantialias = lens _svgTOPantialias (\a b -> a {_svgTOPantialias = b})
svgTOPxord :: Lens' TOP (Maybe (Tree Int))
svgTOPxord = lens _svgTOPxord (\a b -> a {_svgTOPxord = b})
svgTOPchanmask :: Lens' TOP (Maybe (Tree Int))
svgTOPchanmask = lens _svgTOPchanmask (\a b -> a {_svgTOPchanmask = b})
svgTOPr :: Lens' TOP (Vec3)
svgTOPr = lens _svgTOPr (\a b -> a {_svgTOPr = b})
svgTOPresmult :: Lens' TOP (Maybe (Tree Bool))
svgTOPresmult = lens _svgTOPresmult (\a b -> a {_svgTOPresmult = b})
svgTOPpunit :: Lens' TOP (Maybe (Tree Int))
svgTOPpunit = lens _svgTOPpunit (\a b -> a {_svgTOPpunit = b})
svgTOPresmenu :: Lens' TOP (Maybe (Tree Int))
svgTOPresmenu = lens _svgTOPresmenu (\a b -> a {_svgTOPresmenu = b})
svgTOPs :: Lens' TOP (Vec2)
svgTOPs = lens _svgTOPs (\a b -> a {_svgTOPs = b})
svgTOPbgalpha :: Lens' TOP (Maybe (Tree Float))
svgTOPbgalpha = lens _svgTOPbgalpha (\a b -> a {_svgTOPbgalpha = b})
svgTOPp :: Lens' TOP (Vec2)
svgTOPp = lens _svgTOPp (\a b -> a {_svgTOPp = b})
svgTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
svgTOPresolutionh = lens _svgTOPresolutionh (\a b -> a {_svgTOPresolutionh = b})
svgTOPtunit :: Lens' TOP (Maybe (Tree Int))
svgTOPtunit = lens _svgTOPtunit (\a b -> a {_svgTOPtunit = b})
svgTOPnpasses :: Lens' TOP (Maybe (Tree Int))
svgTOPnpasses = lens _svgTOPnpasses (\a b -> a {_svgTOPnpasses = b})
svgTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
svgTOPaspect1 = lens _svgTOPaspect1 (\a b -> a {_svgTOPaspect1 = b})
svgTOPt :: Lens' TOP (Vec2)
svgTOPt = lens _svgTOPt (\a b -> a {_svgTOPt = b})
svgTOPdat :: Lens' TOP (Maybe (Tree DAT))
svgTOPdat = lens _svgTOPdat (\a b -> a {_svgTOPdat = b})
svgTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
svgTOPoutputaspect = lens _svgTOPoutputaspect (\a b -> a {_svgTOPoutputaspect = b})
svgTOPreload :: Lens' TOP (Maybe (Tree Bool))
svgTOPreload = lens _svgTOPreload (\a b -> a {_svgTOPreload = b})

leapmotionTOPresmult :: Lens' TOP (Maybe (Tree Bool))
leapmotionTOPresmult = lens _leapmotionTOPresmult (\a b -> a {_leapmotionTOPresmult = b})
leapmotionTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
leapmotionTOPaspect2 = lens _leapmotionTOPaspect2 (\a b -> a {_leapmotionTOPaspect2 = b})
leapmotionTOPformat :: Lens' TOP (Maybe (Tree Int))
leapmotionTOPformat = lens _leapmotionTOPformat (\a b -> a {_leapmotionTOPformat = b})
leapmotionTOPactive :: Lens' TOP (Maybe (Tree Bool))
leapmotionTOPactive = lens _leapmotionTOPactive (\a b -> a {_leapmotionTOPactive = b})
leapmotionTOPresmenu :: Lens' TOP (Maybe (Tree Int))
leapmotionTOPresmenu = lens _leapmotionTOPresmenu (\a b -> a {_leapmotionTOPresmenu = b})
leapmotionTOPnpasses :: Lens' TOP (Maybe (Tree Int))
leapmotionTOPnpasses = lens _leapmotionTOPnpasses (\a b -> a {_leapmotionTOPnpasses = b})
leapmotionTOPhmd :: Lens' TOP (Maybe (Tree Int))
leapmotionTOPhmd = lens _leapmotionTOPhmd (\a b -> a {_leapmotionTOPhmd = b})
leapmotionTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
leapmotionTOPinputfiltertype = lens _leapmotionTOPinputfiltertype (\a b -> a {_leapmotionTOPinputfiltertype = b})
leapmotionTOPchanmask :: Lens' TOP (Maybe (Tree Int))
leapmotionTOPchanmask = lens _leapmotionTOPchanmask (\a b -> a {_leapmotionTOPchanmask = b})
leapmotionTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
leapmotionTOPoutputresolution = lens _leapmotionTOPoutputresolution (\a b -> a {_leapmotionTOPoutputresolution = b})
leapmotionTOPfillmode :: Lens' TOP (Maybe (Tree Int))
leapmotionTOPfillmode = lens _leapmotionTOPfillmode (\a b -> a {_leapmotionTOPfillmode = b})
leapmotionTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
leapmotionTOPresolutionh = lens _leapmotionTOPresolutionh (\a b -> a {_leapmotionTOPresolutionh = b})
leapmotionTOParmenu :: Lens' TOP (Maybe (Tree Int))
leapmotionTOParmenu = lens _leapmotionTOParmenu (\a b -> a {_leapmotionTOParmenu = b})
leapmotionTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
leapmotionTOPfiltertype = lens _leapmotionTOPfiltertype (\a b -> a {_leapmotionTOPfiltertype = b})
leapmotionTOPcorrection :: Lens' TOP (Maybe (Tree Bool))
leapmotionTOPcorrection = lens _leapmotionTOPcorrection (\a b -> a {_leapmotionTOPcorrection = b})
leapmotionTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
leapmotionTOPaspect1 = lens _leapmotionTOPaspect1 (\a b -> a {_leapmotionTOPaspect1 = b})
leapmotionTOPflipy :: Lens' TOP (Maybe (Tree Bool))
leapmotionTOPflipy = lens _leapmotionTOPflipy (\a b -> a {_leapmotionTOPflipy = b})
leapmotionTOPflipx :: Lens' TOP (Maybe (Tree Bool))
leapmotionTOPflipx = lens _leapmotionTOPflipx (\a b -> a {_leapmotionTOPflipx = b})
leapmotionTOPcamera :: Lens' TOP (Maybe (Tree ByteString))
leapmotionTOPcamera = lens _leapmotionTOPcamera (\a b -> a {_leapmotionTOPcamera = b})
leapmotionTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
leapmotionTOPresolutionw = lens _leapmotionTOPresolutionw (\a b -> a {_leapmotionTOPresolutionw = b})
leapmotionTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
leapmotionTOPoutputaspect = lens _leapmotionTOPoutputaspect (\a b -> a {_leapmotionTOPoutputaspect = b})

touchoutTOParmenu :: Lens' TOP (Maybe (Tree Int))
touchoutTOParmenu = lens _touchoutTOParmenu (\a b -> a {_touchoutTOParmenu = b})
touchoutTOPresmult :: Lens' TOP (Maybe (Tree Bool))
touchoutTOPresmult = lens _touchoutTOPresmult (\a b -> a {_touchoutTOPresmult = b})
touchoutTOPalwayscook :: Lens' TOP (Maybe (Tree Bool))
touchoutTOPalwayscook = lens _touchoutTOPalwayscook (\a b -> a {_touchoutTOPalwayscook = b})
touchoutTOPformat :: Lens' TOP (Maybe (Tree Int))
touchoutTOPformat = lens _touchoutTOPformat (\a b -> a {_touchoutTOPformat = b})
touchoutTOPactive :: Lens' TOP (Maybe (Tree Bool))
touchoutTOPactive = lens _touchoutTOPactive (\a b -> a {_touchoutTOPactive = b})
touchoutTOPresmenu :: Lens' TOP (Maybe (Tree Int))
touchoutTOPresmenu = lens _touchoutTOPresmenu (\a b -> a {_touchoutTOPresmenu = b})
touchoutTOPnpasses :: Lens' TOP (Maybe (Tree Int))
touchoutTOPnpasses = lens _touchoutTOPnpasses (\a b -> a {_touchoutTOPnpasses = b})
touchoutTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
touchoutTOPresolutionw = lens _touchoutTOPresolutionw (\a b -> a {_touchoutTOPresolutionw = b})
touchoutTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
touchoutTOPinputfiltertype = lens _touchoutTOPinputfiltertype (\a b -> a {_touchoutTOPinputfiltertype = b})
touchoutTOPfps :: Lens' TOP (Maybe (Tree Int))
touchoutTOPfps = lens _touchoutTOPfps (\a b -> a {_touchoutTOPfps = b})
touchoutTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
touchoutTOPoutputresolution = lens _touchoutTOPoutputresolution (\a b -> a {_touchoutTOPoutputresolution = b})
touchoutTOPfillmode :: Lens' TOP (Maybe (Tree Int))
touchoutTOPfillmode = lens _touchoutTOPfillmode (\a b -> a {_touchoutTOPfillmode = b})
touchoutTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
touchoutTOPresolutionh = lens _touchoutTOPresolutionh (\a b -> a {_touchoutTOPresolutionh = b})
touchoutTOPchanmask :: Lens' TOP (Maybe (Tree Int))
touchoutTOPchanmask = lens _touchoutTOPchanmask (\a b -> a {_touchoutTOPchanmask = b})
touchoutTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
touchoutTOPaspect2 = lens _touchoutTOPaspect2 (\a b -> a {_touchoutTOPaspect2 = b})
touchoutTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
touchoutTOPfiltertype = lens _touchoutTOPfiltertype (\a b -> a {_touchoutTOPfiltertype = b})
touchoutTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
touchoutTOPaspect1 = lens _touchoutTOPaspect1 (\a b -> a {_touchoutTOPaspect1 = b})
touchoutTOPvideocodec :: Lens' TOP (Maybe (Tree Int))
touchoutTOPvideocodec = lens _touchoutTOPvideocodec (\a b -> a {_touchoutTOPvideocodec = b})
touchoutTOPport :: Lens' TOP (Maybe (Tree Int))
touchoutTOPport = lens _touchoutTOPport (\a b -> a {_touchoutTOPport = b})
touchoutTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
touchoutTOPoutputaspect = lens _touchoutTOPoutputaspect (\a b -> a {_touchoutTOPoutputaspect = b})

syphonspoutinTOPresmult :: Lens' TOP (Maybe (Tree Bool))
syphonspoutinTOPresmult = lens _syphonspoutinTOPresmult (\a b -> a {_syphonspoutinTOPresmult = b})
syphonspoutinTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
syphonspoutinTOPaspect2 = lens _syphonspoutinTOPaspect2 (\a b -> a {_syphonspoutinTOPaspect2 = b})
syphonspoutinTOPformat :: Lens' TOP (Maybe (Tree Int))
syphonspoutinTOPformat = lens _syphonspoutinTOPformat (\a b -> a {_syphonspoutinTOPformat = b})
syphonspoutinTOPresmenu :: Lens' TOP (Maybe (Tree Int))
syphonspoutinTOPresmenu = lens _syphonspoutinTOPresmenu (\a b -> a {_syphonspoutinTOPresmenu = b})
syphonspoutinTOPnpasses :: Lens' TOP (Maybe (Tree Int))
syphonspoutinTOPnpasses = lens _syphonspoutinTOPnpasses (\a b -> a {_syphonspoutinTOPnpasses = b})
syphonspoutinTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
syphonspoutinTOPinputfiltertype = lens _syphonspoutinTOPinputfiltertype (\a b -> a {_syphonspoutinTOPinputfiltertype = b})
syphonspoutinTOPchanmask :: Lens' TOP (Maybe (Tree Int))
syphonspoutinTOPchanmask = lens _syphonspoutinTOPchanmask (\a b -> a {_syphonspoutinTOPchanmask = b})
syphonspoutinTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
syphonspoutinTOPoutputresolution = lens _syphonspoutinTOPoutputresolution (\a b -> a {_syphonspoutinTOPoutputresolution = b})
syphonspoutinTOPfillmode :: Lens' TOP (Maybe (Tree Int))
syphonspoutinTOPfillmode = lens _syphonspoutinTOPfillmode (\a b -> a {_syphonspoutinTOPfillmode = b})
syphonspoutinTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
syphonspoutinTOPresolutionw = lens _syphonspoutinTOPresolutionw (\a b -> a {_syphonspoutinTOPresolutionw = b})
syphonspoutinTOPusespoutactivesender :: Lens' TOP (Maybe (Tree Bool))
syphonspoutinTOPusespoutactivesender = lens _syphonspoutinTOPusespoutactivesender (\a b -> a {_syphonspoutinTOPusespoutactivesender = b})
syphonspoutinTOParmenu :: Lens' TOP (Maybe (Tree Int))
syphonspoutinTOParmenu = lens _syphonspoutinTOParmenu (\a b -> a {_syphonspoutinTOParmenu = b})
syphonspoutinTOPsendername :: Lens' TOP (Maybe (Tree ByteString))
syphonspoutinTOPsendername = lens _syphonspoutinTOPsendername (\a b -> a {_syphonspoutinTOPsendername = b})
syphonspoutinTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
syphonspoutinTOPaspect1 = lens _syphonspoutinTOPaspect1 (\a b -> a {_syphonspoutinTOPaspect1 = b})
syphonspoutinTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
syphonspoutinTOPresolutionh = lens _syphonspoutinTOPresolutionh (\a b -> a {_syphonspoutinTOPresolutionh = b})
syphonspoutinTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
syphonspoutinTOPoutputaspect = lens _syphonspoutinTOPoutputaspect (\a b -> a {_syphonspoutinTOPoutputaspect = b})
syphonspoutinTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
syphonspoutinTOPfiltertype = lens _syphonspoutinTOPfiltertype (\a b -> a {_syphonspoutinTOPfiltertype = b})

videostreamoutTOPquality :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPquality = lens _videostreamoutTOPquality (\a b -> a {_videostreamoutTOPquality = b})
videostreamoutTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
videostreamoutTOPaspect2 = lens _videostreamoutTOPaspect2 (\a b -> a {_videostreamoutTOPaspect2 = b})
videostreamoutTOPformat :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPformat = lens _videostreamoutTOPformat (\a b -> a {_videostreamoutTOPformat = b})
videostreamoutTOPactive :: Lens' TOP (Maybe (Tree Bool))
videostreamoutTOPactive = lens _videostreamoutTOPactive (\a b -> a {_videostreamoutTOPactive = b})
videostreamoutTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPinputfiltertype = lens _videostreamoutTOPinputfiltertype (\a b -> a {_videostreamoutTOPinputfiltertype = b})
videostreamoutTOPfps :: Lens' TOP (Maybe (Tree Float))
videostreamoutTOPfps = lens _videostreamoutTOPfps (\a b -> a {_videostreamoutTOPfps = b})
videostreamoutTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPoutputresolution = lens _videostreamoutTOPoutputresolution (\a b -> a {_videostreamoutTOPoutputresolution = b})
videostreamoutTOPaudiochop :: Lens' TOP (Maybe (Tree CHOP))
videostreamoutTOPaudiochop = lens _videostreamoutTOPaudiochop (\a b -> a {_videostreamoutTOPaudiochop = b})
videostreamoutTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPresolutionw = lens _videostreamoutTOPresolutionw (\a b -> a {_videostreamoutTOPresolutionw = b})
videostreamoutTOPprofile :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPprofile = lens _videostreamoutTOPprofile (\a b -> a {_videostreamoutTOPprofile = b})
videostreamoutTOParmenu :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOParmenu = lens _videostreamoutTOParmenu (\a b -> a {_videostreamoutTOParmenu = b})
videostreamoutTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPfiltertype = lens _videostreamoutTOPfiltertype (\a b -> a {_videostreamoutTOPfiltertype = b})
videostreamoutTOPport :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPport = lens _videostreamoutTOPport (\a b -> a {_videostreamoutTOPport = b})
videostreamoutTOPstreamname :: Lens' TOP (Maybe (Tree ByteString))
videostreamoutTOPstreamname = lens _videostreamoutTOPstreamname (\a b -> a {_videostreamoutTOPstreamname = b})
videostreamoutTOPresmult :: Lens' TOP (Maybe (Tree Bool))
videostreamoutTOPresmult = lens _videostreamoutTOPresmult (\a b -> a {_videostreamoutTOPresmult = b})
videostreamoutTOPbitrate :: Lens' TOP (Maybe (Tree Float))
videostreamoutTOPbitrate = lens _videostreamoutTOPbitrate (\a b -> a {_videostreamoutTOPbitrate = b})
videostreamoutTOPresmenu :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPresmenu = lens _videostreamoutTOPresmenu (\a b -> a {_videostreamoutTOPresmenu = b})
videostreamoutTOPchanmask :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPchanmask = lens _videostreamoutTOPchanmask (\a b -> a {_videostreamoutTOPchanmask = b})
videostreamoutTOPforceidr :: Lens' TOP (Maybe (Tree Bool))
videostreamoutTOPforceidr = lens _videostreamoutTOPforceidr (\a b -> a {_videostreamoutTOPforceidr = b})
videostreamoutTOPfillmode :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPfillmode = lens _videostreamoutTOPfillmode (\a b -> a {_videostreamoutTOPfillmode = b})
videostreamoutTOPnumslices :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPnumslices = lens _videostreamoutTOPnumslices (\a b -> a {_videostreamoutTOPnumslices = b})
videostreamoutTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPresolutionh = lens _videostreamoutTOPresolutionh (\a b -> a {_videostreamoutTOPresolutionh = b})
videostreamoutTOPnpasses :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPnpasses = lens _videostreamoutTOPnpasses (\a b -> a {_videostreamoutTOPnpasses = b})
videostreamoutTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
videostreamoutTOPaspect1 = lens _videostreamoutTOPaspect1 (\a b -> a {_videostreamoutTOPaspect1 = b})
videostreamoutTOPmulticast :: Lens' TOP (Maybe (Tree Bool))
videostreamoutTOPmulticast = lens _videostreamoutTOPmulticast (\a b -> a {_videostreamoutTOPmulticast = b})
videostreamoutTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
videostreamoutTOPoutputaspect = lens _videostreamoutTOPoutputaspect (\a b -> a {_videostreamoutTOPoutputaspect = b})

scalabledisplayTOPnear :: Lens' TOP (Maybe (Tree Float))
scalabledisplayTOPnear = lens _scalabledisplayTOPnear (\a b -> a {_scalabledisplayTOPnear = b})
scalabledisplayTOPresmult :: Lens' TOP (Maybe (Tree Bool))
scalabledisplayTOPresmult = lens _scalabledisplayTOPresmult (\a b -> a {_scalabledisplayTOPresmult = b})
scalabledisplayTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
scalabledisplayTOPaspect2 = lens _scalabledisplayTOPaspect2 (\a b -> a {_scalabledisplayTOPaspect2 = b})
scalabledisplayTOPformat :: Lens' TOP (Maybe (Tree Int))
scalabledisplayTOPformat = lens _scalabledisplayTOPformat (\a b -> a {_scalabledisplayTOPformat = b})
scalabledisplayTOPresmenu :: Lens' TOP (Maybe (Tree Int))
scalabledisplayTOPresmenu = lens _scalabledisplayTOPresmenu (\a b -> a {_scalabledisplayTOPresmenu = b})
scalabledisplayTOPnpasses :: Lens' TOP (Maybe (Tree Int))
scalabledisplayTOPnpasses = lens _scalabledisplayTOPnpasses (\a b -> a {_scalabledisplayTOPnpasses = b})
scalabledisplayTOPchanmask :: Lens' TOP (Maybe (Tree Int))
scalabledisplayTOPchanmask = lens _scalabledisplayTOPchanmask (\a b -> a {_scalabledisplayTOPchanmask = b})
scalabledisplayTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
scalabledisplayTOPinputfiltertype = lens _scalabledisplayTOPinputfiltertype (\a b -> a {_scalabledisplayTOPinputfiltertype = b})
scalabledisplayTOPfar :: Lens' TOP (Maybe (Tree Float))
scalabledisplayTOPfar = lens _scalabledisplayTOPfar (\a b -> a {_scalabledisplayTOPfar = b})
scalabledisplayTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
scalabledisplayTOPoutputresolution = lens _scalabledisplayTOPoutputresolution (\a b -> a {_scalabledisplayTOPoutputresolution = b})
scalabledisplayTOPfillmode :: Lens' TOP (Maybe (Tree Int))
scalabledisplayTOPfillmode = lens _scalabledisplayTOPfillmode (\a b -> a {_scalabledisplayTOPfillmode = b})
scalabledisplayTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
scalabledisplayTOPresolutionh = lens _scalabledisplayTOPresolutionh (\a b -> a {_scalabledisplayTOPresolutionh = b})
scalabledisplayTOParmenu :: Lens' TOP (Maybe (Tree Int))
scalabledisplayTOParmenu = lens _scalabledisplayTOParmenu (\a b -> a {_scalabledisplayTOParmenu = b})
scalabledisplayTOPconfigfile :: Lens' TOP (Maybe (Tree ByteString))
scalabledisplayTOPconfigfile = lens _scalabledisplayTOPconfigfile (\a b -> a {_scalabledisplayTOPconfigfile = b})
scalabledisplayTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
scalabledisplayTOPaspect1 = lens _scalabledisplayTOPaspect1 (\a b -> a {_scalabledisplayTOPaspect1 = b})
scalabledisplayTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
scalabledisplayTOPresolutionw = lens _scalabledisplayTOPresolutionw (\a b -> a {_scalabledisplayTOPresolutionw = b})
scalabledisplayTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
scalabledisplayTOPoutputaspect = lens _scalabledisplayTOPoutputaspect (\a b -> a {_scalabledisplayTOPoutputaspect = b})
scalabledisplayTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
scalabledisplayTOPfiltertype = lens _scalabledisplayTOPfiltertype (\a b -> a {_scalabledisplayTOPfiltertype = b})

outsideTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
outsideTOPaspect2 = lens _outsideTOPaspect2 (\a b -> a {_outsideTOPaspect2 = b})
outsideTOPformat :: Lens' TOP (Maybe (Tree Int))
outsideTOPformat = lens _outsideTOPformat (\a b -> a {_outsideTOPformat = b})
outsideTOPextend :: Lens' TOP (Maybe (Tree Int))
outsideTOPextend = lens _outsideTOPextend (\a b -> a {_outsideTOPextend = b})
outsideTOPchanmask :: Lens' TOP (Maybe (Tree Int))
outsideTOPchanmask = lens _outsideTOPchanmask (\a b -> a {_outsideTOPchanmask = b})
outsideTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
outsideTOPoutputresolution = lens _outsideTOPoutputresolution (\a b -> a {_outsideTOPoutputresolution = b})
outsideTOPfillmode :: Lens' TOP (Maybe (Tree Int))
outsideTOPfillmode = lens _outsideTOPfillmode (\a b -> a {_outsideTOPfillmode = b})
outsideTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
outsideTOPresolutionw = lens _outsideTOPresolutionw (\a b -> a {_outsideTOPresolutionw = b})
outsideTOParmenu :: Lens' TOP (Maybe (Tree Int))
outsideTOParmenu = lens _outsideTOParmenu (\a b -> a {_outsideTOParmenu = b})
outsideTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
outsideTOPfiltertype = lens _outsideTOPfiltertype (\a b -> a {_outsideTOPfiltertype = b})
outsideTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
outsideTOPinputfiltertype = lens _outsideTOPinputfiltertype (\a b -> a {_outsideTOPinputfiltertype = b})
outsideTOPresmult :: Lens' TOP (Maybe (Tree Bool))
outsideTOPresmult = lens _outsideTOPresmult (\a b -> a {_outsideTOPresmult = b})
outsideTOPpunit :: Lens' TOP (Maybe (Tree Int))
outsideTOPpunit = lens _outsideTOPpunit (\a b -> a {_outsideTOPpunit = b})
outsideTOPs :: Lens' TOP (Vec2)
outsideTOPs = lens _outsideTOPs (\a b -> a {_outsideTOPs = b})
outsideTOPresmenu :: Lens' TOP (Maybe (Tree Int))
outsideTOPresmenu = lens _outsideTOPresmenu (\a b -> a {_outsideTOPresmenu = b})
outsideTOPp :: Lens' TOP (Vec2)
outsideTOPp = lens _outsideTOPp (\a b -> a {_outsideTOPp = b})
outsideTOPsize :: Lens' TOP (Maybe (Tree Int))
outsideTOPsize = lens _outsideTOPsize (\a b -> a {_outsideTOPsize = b})
outsideTOPnpasses :: Lens' TOP (Maybe (Tree Int))
outsideTOPnpasses = lens _outsideTOPnpasses (\a b -> a {_outsideTOPnpasses = b})
outsideTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
outsideTOPoutputaspect = lens _outsideTOPoutputaspect (\a b -> a {_outsideTOPoutputaspect = b})
outsideTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
outsideTOPresolutionh = lens _outsideTOPresolutionh (\a b -> a {_outsideTOPresolutionh = b})
outsideTOPtunit :: Lens' TOP (Maybe (Tree Int))
outsideTOPtunit = lens _outsideTOPtunit (\a b -> a {_outsideTOPtunit = b})
outsideTOPprefit :: Lens' TOP (Maybe (Tree Int))
outsideTOPprefit = lens _outsideTOPprefit (\a b -> a {_outsideTOPprefit = b})
outsideTOPr :: Lens' TOP (Maybe (Tree Float))
outsideTOPr = lens _outsideTOPr (\a b -> a {_outsideTOPr = b})
outsideTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
outsideTOPaspect1 = lens _outsideTOPaspect1 (\a b -> a {_outsideTOPaspect1 = b})
outsideTOPjustifyh :: Lens' TOP (Maybe (Tree Int))
outsideTOPjustifyh = lens _outsideTOPjustifyh (\a b -> a {_outsideTOPjustifyh = b})
outsideTOPt :: Lens' TOP (Vec2)
outsideTOPt = lens _outsideTOPt (\a b -> a {_outsideTOPt = b})
outsideTOPjustifyv :: Lens' TOP (Maybe (Tree Int))
outsideTOPjustifyv = lens _outsideTOPjustifyv (\a b -> a {_outsideTOPjustifyv = b})

resolutionTOPresmult :: Lens' TOP (Maybe (Tree Bool))
resolutionTOPresmult = lens _resolutionTOPresmult (\a b -> a {_resolutionTOPresmult = b})
resolutionTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
resolutionTOPaspect2 = lens _resolutionTOPaspect2 (\a b -> a {_resolutionTOPaspect2 = b})
resolutionTOPformat :: Lens' TOP (Maybe (Tree Int))
resolutionTOPformat = lens _resolutionTOPformat (\a b -> a {_resolutionTOPformat = b})
resolutionTOPresmenu :: Lens' TOP (Maybe (Tree Int))
resolutionTOPresmenu = lens _resolutionTOPresmenu (\a b -> a {_resolutionTOPresmenu = b})
resolutionTOPnpasses :: Lens' TOP (Maybe (Tree Int))
resolutionTOPnpasses = lens _resolutionTOPnpasses (\a b -> a {_resolutionTOPnpasses = b})
resolutionTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
resolutionTOPresolutionw = lens _resolutionTOPresolutionw (\a b -> a {_resolutionTOPresolutionw = b})
resolutionTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
resolutionTOPinputfiltertype = lens _resolutionTOPinputfiltertype (\a b -> a {_resolutionTOPinputfiltertype = b})
resolutionTOPchanmask :: Lens' TOP (Maybe (Tree Int))
resolutionTOPchanmask = lens _resolutionTOPchanmask (\a b -> a {_resolutionTOPchanmask = b})
resolutionTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
resolutionTOPoutputresolution = lens _resolutionTOPoutputresolution (\a b -> a {_resolutionTOPoutputresolution = b})
resolutionTOPfillmode :: Lens' TOP (Maybe (Tree Int))
resolutionTOPfillmode = lens _resolutionTOPfillmode (\a b -> a {_resolutionTOPfillmode = b})
resolutionTOPhighqualresize :: Lens' TOP (Maybe (Tree Bool))
resolutionTOPhighqualresize = lens _resolutionTOPhighqualresize (\a b -> a {_resolutionTOPhighqualresize = b})
resolutionTOParmenu :: Lens' TOP (Maybe (Tree Int))
resolutionTOParmenu = lens _resolutionTOParmenu (\a b -> a {_resolutionTOParmenu = b})
resolutionTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
resolutionTOPfiltertype = lens _resolutionTOPfiltertype (\a b -> a {_resolutionTOPfiltertype = b})
resolutionTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
resolutionTOPaspect1 = lens _resolutionTOPaspect1 (\a b -> a {_resolutionTOPaspect1 = b})
resolutionTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
resolutionTOPresolutionh = lens _resolutionTOPresolutionh (\a b -> a {_resolutionTOPresolutionh = b})
resolutionTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
resolutionTOPoutputaspect = lens _resolutionTOPoutputaspect (\a b -> a {_resolutionTOPoutputaspect = b})

differenceTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
differenceTOPaspect2 = lens _differenceTOPaspect2 (\a b -> a {_differenceTOPaspect2 = b})
differenceTOPformat :: Lens' TOP (Maybe (Tree Int))
differenceTOPformat = lens _differenceTOPformat (\a b -> a {_differenceTOPformat = b})
differenceTOPextend :: Lens' TOP (Maybe (Tree Int))
differenceTOPextend = lens _differenceTOPextend (\a b -> a {_differenceTOPextend = b})
differenceTOPchanmask :: Lens' TOP (Maybe (Tree Int))
differenceTOPchanmask = lens _differenceTOPchanmask (\a b -> a {_differenceTOPchanmask = b})
differenceTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
differenceTOPoutputresolution = lens _differenceTOPoutputresolution (\a b -> a {_differenceTOPoutputresolution = b})
differenceTOPfillmode :: Lens' TOP (Maybe (Tree Int))
differenceTOPfillmode = lens _differenceTOPfillmode (\a b -> a {_differenceTOPfillmode = b})
differenceTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
differenceTOPresolutionw = lens _differenceTOPresolutionw (\a b -> a {_differenceTOPresolutionw = b})
differenceTOParmenu :: Lens' TOP (Maybe (Tree Int))
differenceTOParmenu = lens _differenceTOParmenu (\a b -> a {_differenceTOParmenu = b})
differenceTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
differenceTOPfiltertype = lens _differenceTOPfiltertype (\a b -> a {_differenceTOPfiltertype = b})
differenceTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
differenceTOPinputfiltertype = lens _differenceTOPinputfiltertype (\a b -> a {_differenceTOPinputfiltertype = b})
differenceTOPresmult :: Lens' TOP (Maybe (Tree Bool))
differenceTOPresmult = lens _differenceTOPresmult (\a b -> a {_differenceTOPresmult = b})
differenceTOPpunit :: Lens' TOP (Maybe (Tree Int))
differenceTOPpunit = lens _differenceTOPpunit (\a b -> a {_differenceTOPpunit = b})
differenceTOPs :: Lens' TOP (Vec2)
differenceTOPs = lens _differenceTOPs (\a b -> a {_differenceTOPs = b})
differenceTOPresmenu :: Lens' TOP (Maybe (Tree Int))
differenceTOPresmenu = lens _differenceTOPresmenu (\a b -> a {_differenceTOPresmenu = b})
differenceTOPp :: Lens' TOP (Vec2)
differenceTOPp = lens _differenceTOPp (\a b -> a {_differenceTOPp = b})
differenceTOPsize :: Lens' TOP (Maybe (Tree Int))
differenceTOPsize = lens _differenceTOPsize (\a b -> a {_differenceTOPsize = b})
differenceTOPnpasses :: Lens' TOP (Maybe (Tree Int))
differenceTOPnpasses = lens _differenceTOPnpasses (\a b -> a {_differenceTOPnpasses = b})
differenceTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
differenceTOPoutputaspect = lens _differenceTOPoutputaspect (\a b -> a {_differenceTOPoutputaspect = b})
differenceTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
differenceTOPresolutionh = lens _differenceTOPresolutionh (\a b -> a {_differenceTOPresolutionh = b})
differenceTOPtunit :: Lens' TOP (Maybe (Tree Int))
differenceTOPtunit = lens _differenceTOPtunit (\a b -> a {_differenceTOPtunit = b})
differenceTOPprefit :: Lens' TOP (Maybe (Tree Int))
differenceTOPprefit = lens _differenceTOPprefit (\a b -> a {_differenceTOPprefit = b})
differenceTOPr :: Lens' TOP (Maybe (Tree Float))
differenceTOPr = lens _differenceTOPr (\a b -> a {_differenceTOPr = b})
differenceTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
differenceTOPaspect1 = lens _differenceTOPaspect1 (\a b -> a {_differenceTOPaspect1 = b})
differenceTOPjustifyh :: Lens' TOP (Maybe (Tree Int))
differenceTOPjustifyh = lens _differenceTOPjustifyh (\a b -> a {_differenceTOPjustifyh = b})
differenceTOPt :: Lens' TOP (Vec2)
differenceTOPt = lens _differenceTOPt (\a b -> a {_differenceTOPt = b})
differenceTOPjustifyv :: Lens' TOP (Maybe (Tree Int))
differenceTOPjustifyv = lens _differenceTOPjustifyv (\a b -> a {_differenceTOPjustifyv = b})

levelTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
levelTOPaspect2 = lens _levelTOPaspect2 (\a b -> a {_levelTOPaspect2 = b})
levelTOPbrightness1 :: Lens' TOP (Maybe (Tree Float))
levelTOPbrightness1 = lens _levelTOPbrightness1 (\a b -> a {_levelTOPbrightness1 = b})
levelTOPclamphigh :: Lens' TOP (Maybe (Tree Float))
levelTOPclamphigh = lens _levelTOPclamphigh (\a b -> a {_levelTOPclamphigh = b})
levelTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
levelTOPinputfiltertype = lens _levelTOPinputfiltertype (\a b -> a {_levelTOPinputfiltertype = b})
levelTOPclamplow2 :: Lens' TOP (Maybe (Tree Float))
levelTOPclamplow2 = lens _levelTOPclamplow2 (\a b -> a {_levelTOPclamplow2 = b})
levelTOPfillmode :: Lens' TOP (Maybe (Tree Int))
levelTOPfillmode = lens _levelTOPfillmode (\a b -> a {_levelTOPfillmode = b})
levelTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
levelTOPresolutionw = lens _levelTOPresolutionw (\a b -> a {_levelTOPresolutionw = b})
levelTOPclamp :: Lens' TOP (Maybe (Tree Bool))
levelTOPclamp = lens _levelTOPclamp (\a b -> a {_levelTOPclamp = b})
levelTOParmenu :: Lens' TOP (Maybe (Tree Int))
levelTOParmenu = lens _levelTOParmenu (\a b -> a {_levelTOParmenu = b})
levelTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
levelTOPfiltertype = lens _levelTOPfiltertype (\a b -> a {_levelTOPfiltertype = b})
levelTOPclampinput :: Lens' TOP (Maybe (Tree Bool))
levelTOPclampinput = lens _levelTOPclampinput (\a b -> a {_levelTOPclampinput = b})
levelTOPformat :: Lens' TOP (Maybe (Tree Int))
levelTOPformat = lens _levelTOPformat (\a b -> a {_levelTOPformat = b})
levelTOPhighr :: Lens' TOP (Maybe (Tree Float))
levelTOPhighr = lens _levelTOPhighr (\a b -> a {_levelTOPhighr = b})
levelTOPlowa :: Lens' TOP (Maybe (Tree Float))
levelTOPlowa = lens _levelTOPlowa (\a b -> a {_levelTOPlowa = b})
levelTOPresmenu :: Lens' TOP (Maybe (Tree Int))
levelTOPresmenu = lens _levelTOPresmenu (\a b -> a {_levelTOPresmenu = b})
levelTOPchanmask :: Lens' TOP (Maybe (Tree Int))
levelTOPchanmask = lens _levelTOPchanmask (\a b -> a {_levelTOPchanmask = b})
levelTOPgamma1 :: Lens' TOP (Maybe (Tree Float))
levelTOPgamma1 = lens _levelTOPgamma1 (\a b -> a {_levelTOPgamma1 = b})
levelTOPhighb :: Lens' TOP (Maybe (Tree Float))
levelTOPhighb = lens _levelTOPhighb (\a b -> a {_levelTOPhighb = b})
levelTOPsoften :: Lens' TOP (Maybe (Tree Float))
levelTOPsoften = lens _levelTOPsoften (\a b -> a {_levelTOPsoften = b})
levelTOPthreshold :: Lens' TOP (Maybe (Tree Float))
levelTOPthreshold = lens _levelTOPthreshold (\a b -> a {_levelTOPthreshold = b})
levelTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
levelTOPresolutionh = lens _levelTOPresolutionh (\a b -> a {_levelTOPresolutionh = b})
levelTOPlowb :: Lens' TOP (Maybe (Tree Float))
levelTOPlowb = lens _levelTOPlowb (\a b -> a {_levelTOPlowb = b})
levelTOPbrightness2 :: Lens' TOP (Maybe (Tree Float))
levelTOPbrightness2 = lens _levelTOPbrightness2 (\a b -> a {_levelTOPbrightness2 = b})
levelTOPstepsize :: Lens' TOP (Maybe (Tree Float))
levelTOPstepsize = lens _levelTOPstepsize (\a b -> a {_levelTOPstepsize = b})
levelTOPclamplow :: Lens' TOP (Maybe (Tree Float))
levelTOPclamplow = lens _levelTOPclamplow (\a b -> a {_levelTOPclamplow = b})
levelTOPinlow :: Lens' TOP (Maybe (Tree Float))
levelTOPinlow = lens _levelTOPinlow (\a b -> a {_levelTOPinlow = b})
levelTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
levelTOPoutputaspect = lens _levelTOPoutputaspect (\a b -> a {_levelTOPoutputaspect = b})
levelTOPlowg :: Lens' TOP (Maybe (Tree Float))
levelTOPlowg = lens _levelTOPlowg (\a b -> a {_levelTOPlowg = b})
levelTOPoutlow :: Lens' TOP (Maybe (Tree Float))
levelTOPoutlow = lens _levelTOPoutlow (\a b -> a {_levelTOPoutlow = b})
levelTOPblacklevel :: Lens' TOP (Maybe (Tree Float))
levelTOPblacklevel = lens _levelTOPblacklevel (\a b -> a {_levelTOPblacklevel = b})
levelTOPouthigh :: Lens' TOP (Maybe (Tree Float))
levelTOPouthigh = lens _levelTOPouthigh (\a b -> a {_levelTOPouthigh = b})
levelTOPcontrast :: Lens' TOP (Maybe (Tree Float))
levelTOPcontrast = lens _levelTOPcontrast (\a b -> a {_levelTOPcontrast = b})
levelTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
levelTOPaspect1 = lens _levelTOPaspect1 (\a b -> a {_levelTOPaspect1 = b})
levelTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
levelTOPoutputresolution = lens _levelTOPoutputresolution (\a b -> a {_levelTOPoutputresolution = b})
levelTOPopacity :: Lens' TOP (Maybe (Tree Float))
levelTOPopacity = lens _levelTOPopacity (\a b -> a {_levelTOPopacity = b})
levelTOPgamma2 :: Lens' TOP (Maybe (Tree Float))
levelTOPgamma2 = lens _levelTOPgamma2 (\a b -> a {_levelTOPgamma2 = b})
levelTOPinvert :: Lens' TOP (Maybe (Tree Float))
levelTOPinvert = lens _levelTOPinvert (\a b -> a {_levelTOPinvert = b})
levelTOPinhigh :: Lens' TOP (Maybe (Tree Float))
levelTOPinhigh = lens _levelTOPinhigh (\a b -> a {_levelTOPinhigh = b})
levelTOPresmult :: Lens' TOP (Maybe (Tree Bool))
levelTOPresmult = lens _levelTOPresmult (\a b -> a {_levelTOPresmult = b})
levelTOPstepping :: Lens' TOP (Maybe (Tree Bool))
levelTOPstepping = lens _levelTOPstepping (\a b -> a {_levelTOPstepping = b})
levelTOPclamphigh2 :: Lens' TOP (Maybe (Tree Float))
levelTOPclamphigh2 = lens _levelTOPclamphigh2 (\a b -> a {_levelTOPclamphigh2 = b})
levelTOPhighg :: Lens' TOP (Maybe (Tree Float))
levelTOPhighg = lens _levelTOPhighg (\a b -> a {_levelTOPhighg = b})
levelTOPnpasses :: Lens' TOP (Maybe (Tree Int))
levelTOPnpasses = lens _levelTOPnpasses (\a b -> a {_levelTOPnpasses = b})
levelTOPhigha :: Lens' TOP (Maybe (Tree Float))
levelTOPhigha = lens _levelTOPhigha (\a b -> a {_levelTOPhigha = b})
levelTOPlowr :: Lens' TOP (Maybe (Tree Float))
levelTOPlowr = lens _levelTOPlowr (\a b -> a {_levelTOPlowr = b})

rectangleTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
rectangleTOPaspect2 = lens _rectangleTOPaspect2 (\a b -> a {_rectangleTOPaspect2 = b})
rectangleTOPformat :: Lens' TOP (Maybe (Tree Int))
rectangleTOPformat = lens _rectangleTOPformat (\a b -> a {_rectangleTOPformat = b})
rectangleTOPcornerradius :: Lens' TOP (Maybe (Tree Float))
rectangleTOPcornerradius = lens _rectangleTOPcornerradius (\a b -> a {_rectangleTOPcornerradius = b})
rectangleTOPsoftnessunit :: Lens' TOP (Maybe (Tree Int))
rectangleTOPsoftnessunit = lens _rectangleTOPsoftnessunit (\a b -> a {_rectangleTOPsoftnessunit = b})
rectangleTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
rectangleTOPinputfiltertype = lens _rectangleTOPinputfiltertype (\a b -> a {_rectangleTOPinputfiltertype = b})
rectangleTOPchanmask :: Lens' TOP (Maybe (Tree Int))
rectangleTOPchanmask = lens _rectangleTOPchanmask (\a b -> a {_rectangleTOPchanmask = b})
rectangleTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
rectangleTOPoutputresolution = lens _rectangleTOPoutputresolution (\a b -> a {_rectangleTOPoutputresolution = b})
rectangleTOPborderoffset :: Lens' TOP (Maybe (Tree Float))
rectangleTOPborderoffset = lens _rectangleTOPborderoffset (\a b -> a {_rectangleTOPborderoffset = b})
rectangleTOPfillcolor :: Lens' TOP (Vec3)
rectangleTOPfillcolor = lens _rectangleTOPfillcolor (\a b -> a {_rectangleTOPfillcolor = b})
rectangleTOPantialias :: Lens' TOP (Maybe (Tree Bool))
rectangleTOPantialias = lens _rectangleTOPantialias (\a b -> a {_rectangleTOPantialias = b})
rectangleTOParmenu :: Lens' TOP (Maybe (Tree Int))
rectangleTOParmenu = lens _rectangleTOParmenu (\a b -> a {_rectangleTOParmenu = b})
rectangleTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
rectangleTOPfiltertype = lens _rectangleTOPfiltertype (\a b -> a {_rectangleTOPfiltertype = b})
rectangleTOPborderwidth :: Lens' TOP (Maybe (Tree Float))
rectangleTOPborderwidth = lens _rectangleTOPborderwidth (\a b -> a {_rectangleTOPborderwidth = b})
rectangleTOPfillalpha :: Lens' TOP (Maybe (Tree Float))
rectangleTOPfillalpha = lens _rectangleTOPfillalpha (\a b -> a {_rectangleTOPfillalpha = b})
rectangleTOPbgcolor :: Lens' TOP (Vec3)
rectangleTOPbgcolor = lens _rectangleTOPbgcolor (\a b -> a {_rectangleTOPbgcolor = b})
rectangleTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
rectangleTOPresolutionw = lens _rectangleTOPresolutionw (\a b -> a {_rectangleTOPresolutionw = b})
rectangleTOPcenterunit :: Lens' TOP (Maybe (Tree Int))
rectangleTOPcenterunit = lens _rectangleTOPcenterunit (\a b -> a {_rectangleTOPcenterunit = b})
rectangleTOPresmult :: Lens' TOP (Maybe (Tree Bool))
rectangleTOPresmult = lens _rectangleTOPresmult (\a b -> a {_rectangleTOPresmult = b})
rectangleTOPresmenu :: Lens' TOP (Maybe (Tree Int))
rectangleTOPresmenu = lens _rectangleTOPresmenu (\a b -> a {_rectangleTOPresmenu = b})
rectangleTOPmultrgbbyalpha :: Lens' TOP (Maybe (Tree Bool))
rectangleTOPmultrgbbyalpha = lens _rectangleTOPmultrgbbyalpha (\a b -> a {_rectangleTOPmultrgbbyalpha = b})
rectangleTOPsize :: Lens' TOP (Vec2)
rectangleTOPsize = lens _rectangleTOPsize (\a b -> a {_rectangleTOPsize = b})
rectangleTOPborder :: Lens' TOP (Vec3)
rectangleTOPborder = lens _rectangleTOPborder (\a b -> a {_rectangleTOPborder = b})
rectangleTOPbgalpha :: Lens' TOP (Maybe (Tree Float))
rectangleTOPbgalpha = lens _rectangleTOPbgalpha (\a b -> a {_rectangleTOPbgalpha = b})
rectangleTOPfillmode :: Lens' TOP (Maybe (Tree Int))
rectangleTOPfillmode = lens _rectangleTOPfillmode (\a b -> a {_rectangleTOPfillmode = b})
rectangleTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
rectangleTOPresolutionh = lens _rectangleTOPresolutionh (\a b -> a {_rectangleTOPresolutionh = b})
rectangleTOProtate :: Lens' TOP (Maybe (Tree Float))
rectangleTOProtate = lens _rectangleTOProtate (\a b -> a {_rectangleTOProtate = b})
rectangleTOPcenter :: Lens' TOP (Vec2)
rectangleTOPcenter = lens _rectangleTOPcenter (\a b -> a {_rectangleTOPcenter = b})
rectangleTOPsoftness :: Lens' TOP (Maybe (Tree Float))
rectangleTOPsoftness = lens _rectangleTOPsoftness (\a b -> a {_rectangleTOPsoftness = b})
rectangleTOPborderalpha :: Lens' TOP (Maybe (Tree Float))
rectangleTOPborderalpha = lens _rectangleTOPborderalpha (\a b -> a {_rectangleTOPborderalpha = b})
rectangleTOPnpasses :: Lens' TOP (Maybe (Tree Int))
rectangleTOPnpasses = lens _rectangleTOPnpasses (\a b -> a {_rectangleTOPnpasses = b})
rectangleTOPsizeunit :: Lens' TOP (Maybe (Tree Int))
rectangleTOPsizeunit = lens _rectangleTOPsizeunit (\a b -> a {_rectangleTOPsizeunit = b})
rectangleTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
rectangleTOPaspect1 = lens _rectangleTOPaspect1 (\a b -> a {_rectangleTOPaspect1 = b})
rectangleTOPcornerradiusunit :: Lens' TOP (Maybe (Tree Int))
rectangleTOPcornerradiusunit = lens _rectangleTOPcornerradiusunit (\a b -> a {_rectangleTOPcornerradiusunit = b})
rectangleTOPborderwidthunit :: Lens' TOP (Maybe (Tree Int))
rectangleTOPborderwidthunit = lens _rectangleTOPborderwidthunit (\a b -> a {_rectangleTOPborderwidthunit = b})
rectangleTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
rectangleTOPoutputaspect = lens _rectangleTOPoutputaspect (\a b -> a {_rectangleTOPoutputaspect = b})

sharedmeminTOPresmult :: Lens' TOP (Maybe (Tree Bool))
sharedmeminTOPresmult = lens _sharedmeminTOPresmult (\a b -> a {_sharedmeminTOPresmult = b})
sharedmeminTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
sharedmeminTOPaspect2 = lens _sharedmeminTOPaspect2 (\a b -> a {_sharedmeminTOPaspect2 = b})
sharedmeminTOPformat :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOPformat = lens _sharedmeminTOPformat (\a b -> a {_sharedmeminTOPformat = b})
sharedmeminTOPresmenu :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOPresmenu = lens _sharedmeminTOPresmenu (\a b -> a {_sharedmeminTOPresmenu = b})
sharedmeminTOPnpasses :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOPnpasses = lens _sharedmeminTOPnpasses (\a b -> a {_sharedmeminTOPnpasses = b})
sharedmeminTOPmemtype :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOPmemtype = lens _sharedmeminTOPmemtype (\a b -> a {_sharedmeminTOPmemtype = b})
sharedmeminTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOPinputfiltertype = lens _sharedmeminTOPinputfiltertype (\a b -> a {_sharedmeminTOPinputfiltertype = b})
sharedmeminTOPchanmask :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOPchanmask = lens _sharedmeminTOPchanmask (\a b -> a {_sharedmeminTOPchanmask = b})
sharedmeminTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOPoutputresolution = lens _sharedmeminTOPoutputresolution (\a b -> a {_sharedmeminTOPoutputresolution = b})
sharedmeminTOPfillmode :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOPfillmode = lens _sharedmeminTOPfillmode (\a b -> a {_sharedmeminTOPfillmode = b})
sharedmeminTOPname :: Lens' TOP (Maybe (Tree ByteString))
sharedmeminTOPname = lens _sharedmeminTOPname (\a b -> a {_sharedmeminTOPname = b})
sharedmeminTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOPresolutionw = lens _sharedmeminTOPresolutionw (\a b -> a {_sharedmeminTOPresolutionw = b})
sharedmeminTOParmenu :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOParmenu = lens _sharedmeminTOParmenu (\a b -> a {_sharedmeminTOParmenu = b})
sharedmeminTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOPfiltertype = lens _sharedmeminTOPfiltertype (\a b -> a {_sharedmeminTOPfiltertype = b})
sharedmeminTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
sharedmeminTOPaspect1 = lens _sharedmeminTOPaspect1 (\a b -> a {_sharedmeminTOPaspect1 = b})
sharedmeminTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOPresolutionh = lens _sharedmeminTOPresolutionh (\a b -> a {_sharedmeminTOPresolutionh = b})
sharedmeminTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
sharedmeminTOPoutputaspect = lens _sharedmeminTOPoutputaspect (\a b -> a {_sharedmeminTOPoutputaspect = b})

touchinTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
touchinTOPaspect2 = lens _touchinTOPaspect2 (\a b -> a {_touchinTOPaspect2 = b})
touchinTOPformat :: Lens' TOP (Maybe (Tree Int))
touchinTOPformat = lens _touchinTOPformat (\a b -> a {_touchinTOPformat = b})
touchinTOPactive :: Lens' TOP (Maybe (Tree Bool))
touchinTOPactive = lens _touchinTOPactive (\a b -> a {_touchinTOPactive = b})
touchinTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
touchinTOPoutputresolution = lens _touchinTOPoutputresolution (\a b -> a {_touchinTOPoutputresolution = b})
touchinTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
touchinTOPinputfiltertype = lens _touchinTOPinputfiltertype (\a b -> a {_touchinTOPinputfiltertype = b})
touchinTOPchanmask :: Lens' TOP (Maybe (Tree Int))
touchinTOPchanmask = lens _touchinTOPchanmask (\a b -> a {_touchinTOPchanmask = b})
touchinTOPaddress :: Lens' TOP (Maybe (Tree ByteString))
touchinTOPaddress = lens _touchinTOPaddress (\a b -> a {_touchinTOPaddress = b})
touchinTOPfillmode :: Lens' TOP (Maybe (Tree Int))
touchinTOPfillmode = lens _touchinTOPfillmode (\a b -> a {_touchinTOPfillmode = b})
touchinTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
touchinTOPresolutionw = lens _touchinTOPresolutionw (\a b -> a {_touchinTOPresolutionw = b})
touchinTOParmenu :: Lens' TOP (Maybe (Tree Int))
touchinTOParmenu = lens _touchinTOParmenu (\a b -> a {_touchinTOParmenu = b})
touchinTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
touchinTOPfiltertype = lens _touchinTOPfiltertype (\a b -> a {_touchinTOPfiltertype = b})
touchinTOPmintarget :: Lens' TOP (Maybe (Tree Float))
touchinTOPmintarget = lens _touchinTOPmintarget (\a b -> a {_touchinTOPmintarget = b})
touchinTOPmaxtarget :: Lens' TOP (Maybe (Tree Float))
touchinTOPmaxtarget = lens _touchinTOPmaxtarget (\a b -> a {_touchinTOPmaxtarget = b})
touchinTOPresmult :: Lens' TOP (Maybe (Tree Bool))
touchinTOPresmult = lens _touchinTOPresmult (\a b -> a {_touchinTOPresmult = b})
touchinTOPport :: Lens' TOP (Maybe (Tree Int))
touchinTOPport = lens _touchinTOPport (\a b -> a {_touchinTOPport = b})
touchinTOPresmenu :: Lens' TOP (Maybe (Tree Int))
touchinTOPresmenu = lens _touchinTOPresmenu (\a b -> a {_touchinTOPresmenu = b})
touchinTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
touchinTOPresolutionh = lens _touchinTOPresolutionh (\a b -> a {_touchinTOPresolutionh = b})
touchinTOPnpasses :: Lens' TOP (Maybe (Tree Int))
touchinTOPnpasses = lens _touchinTOPnpasses (\a b -> a {_touchinTOPnpasses = b})
touchinTOPmaxqueue :: Lens' TOP (Maybe (Tree Float))
touchinTOPmaxqueue = lens _touchinTOPmaxqueue (\a b -> a {_touchinTOPmaxqueue = b})
touchinTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
touchinTOPaspect1 = lens _touchinTOPaspect1 (\a b -> a {_touchinTOPaspect1 = b})
touchinTOPtargetdelay :: Lens' TOP (Maybe (Tree Float))
touchinTOPtargetdelay = lens _touchinTOPtargetdelay (\a b -> a {_touchinTOPtargetdelay = b})
touchinTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
touchinTOPoutputaspect = lens _touchinTOPoutputaspect (\a b -> a {_touchinTOPoutputaspect = b})

cubemapTOPmode :: Lens' TOP (Maybe (Tree Int))
cubemapTOPmode = lens _cubemapTOPmode (\a b -> a {_cubemapTOPmode = b})
cubemapTOPresmult :: Lens' TOP (Maybe (Tree Bool))
cubemapTOPresmult = lens _cubemapTOPresmult (\a b -> a {_cubemapTOPresmult = b})
cubemapTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
cubemapTOPaspect2 = lens _cubemapTOPaspect2 (\a b -> a {_cubemapTOPaspect2 = b})
cubemapTOPformat :: Lens' TOP (Maybe (Tree Int))
cubemapTOPformat = lens _cubemapTOPformat (\a b -> a {_cubemapTOPformat = b})
cubemapTOPresmenu :: Lens' TOP (Maybe (Tree Int))
cubemapTOPresmenu = lens _cubemapTOPresmenu (\a b -> a {_cubemapTOPresmenu = b})
cubemapTOPnpasses :: Lens' TOP (Maybe (Tree Int))
cubemapTOPnpasses = lens _cubemapTOPnpasses (\a b -> a {_cubemapTOPnpasses = b})
cubemapTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
cubemapTOPinputfiltertype = lens _cubemapTOPinputfiltertype (\a b -> a {_cubemapTOPinputfiltertype = b})
cubemapTOPchanmask :: Lens' TOP (Maybe (Tree Int))
cubemapTOPchanmask = lens _cubemapTOPchanmask (\a b -> a {_cubemapTOPchanmask = b})
cubemapTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
cubemapTOPoutputresolution = lens _cubemapTOPoutputresolution (\a b -> a {_cubemapTOPoutputresolution = b})
cubemapTOPfillmode :: Lens' TOP (Maybe (Tree Int))
cubemapTOPfillmode = lens _cubemapTOPfillmode (\a b -> a {_cubemapTOPfillmode = b})
cubemapTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
cubemapTOPresolutionw = lens _cubemapTOPresolutionw (\a b -> a {_cubemapTOPresolutionw = b})
cubemapTOParmenu :: Lens' TOP (Maybe (Tree Int))
cubemapTOParmenu = lens _cubemapTOParmenu (\a b -> a {_cubemapTOParmenu = b})
cubemapTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
cubemapTOPfiltertype = lens _cubemapTOPfiltertype (\a b -> a {_cubemapTOPfiltertype = b})
cubemapTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
cubemapTOPaspect1 = lens _cubemapTOPaspect1 (\a b -> a {_cubemapTOPaspect1 = b})
cubemapTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
cubemapTOPresolutionh = lens _cubemapTOPresolutionh (\a b -> a {_cubemapTOPresolutionh = b})
cubemapTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
cubemapTOPoutputaspect = lens _cubemapTOPoutputaspect (\a b -> a {_cubemapTOPoutputaspect = b})

hsvtorgbTOPresmult :: Lens' TOP (Maybe (Tree Bool))
hsvtorgbTOPresmult = lens _hsvtorgbTOPresmult (\a b -> a {_hsvtorgbTOPresmult = b})
hsvtorgbTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
hsvtorgbTOPaspect2 = lens _hsvtorgbTOPaspect2 (\a b -> a {_hsvtorgbTOPaspect2 = b})
hsvtorgbTOPformat :: Lens' TOP (Maybe (Tree Int))
hsvtorgbTOPformat = lens _hsvtorgbTOPformat (\a b -> a {_hsvtorgbTOPformat = b})
hsvtorgbTOPresmenu :: Lens' TOP (Maybe (Tree Int))
hsvtorgbTOPresmenu = lens _hsvtorgbTOPresmenu (\a b -> a {_hsvtorgbTOPresmenu = b})
hsvtorgbTOPnpasses :: Lens' TOP (Maybe (Tree Int))
hsvtorgbTOPnpasses = lens _hsvtorgbTOPnpasses (\a b -> a {_hsvtorgbTOPnpasses = b})
hsvtorgbTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
hsvtorgbTOPinputfiltertype = lens _hsvtorgbTOPinputfiltertype (\a b -> a {_hsvtorgbTOPinputfiltertype = b})
hsvtorgbTOPchanmask :: Lens' TOP (Maybe (Tree Int))
hsvtorgbTOPchanmask = lens _hsvtorgbTOPchanmask (\a b -> a {_hsvtorgbTOPchanmask = b})
hsvtorgbTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
hsvtorgbTOPoutputresolution = lens _hsvtorgbTOPoutputresolution (\a b -> a {_hsvtorgbTOPoutputresolution = b})
hsvtorgbTOPfillmode :: Lens' TOP (Maybe (Tree Int))
hsvtorgbTOPfillmode = lens _hsvtorgbTOPfillmode (\a b -> a {_hsvtorgbTOPfillmode = b})
hsvtorgbTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
hsvtorgbTOPresolutionw = lens _hsvtorgbTOPresolutionw (\a b -> a {_hsvtorgbTOPresolutionw = b})
hsvtorgbTOParmenu :: Lens' TOP (Maybe (Tree Int))
hsvtorgbTOParmenu = lens _hsvtorgbTOParmenu (\a b -> a {_hsvtorgbTOParmenu = b})
hsvtorgbTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
hsvtorgbTOPfiltertype = lens _hsvtorgbTOPfiltertype (\a b -> a {_hsvtorgbTOPfiltertype = b})
hsvtorgbTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
hsvtorgbTOPaspect1 = lens _hsvtorgbTOPaspect1 (\a b -> a {_hsvtorgbTOPaspect1 = b})
hsvtorgbTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
hsvtorgbTOPresolutionh = lens _hsvtorgbTOPresolutionh (\a b -> a {_hsvtorgbTOPresolutionh = b})
hsvtorgbTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
hsvtorgbTOPoutputaspect = lens _hsvtorgbTOPoutputaspect (\a b -> a {_hsvtorgbTOPoutputaspect = b})

timemachineTOParmenu :: Lens' TOP (Maybe (Tree Int))
timemachineTOParmenu = lens _timemachineTOParmenu (\a b -> a {_timemachineTOParmenu = b})
timemachineTOPresmult :: Lens' TOP (Maybe (Tree Bool))
timemachineTOPresmult = lens _timemachineTOPresmult (\a b -> a {_timemachineTOPresmult = b})
timemachineTOPwhiteoffsetunit :: Lens' TOP (Maybe (Tree Int))
timemachineTOPwhiteoffsetunit = lens _timemachineTOPwhiteoffsetunit (\a b -> a {_timemachineTOPwhiteoffsetunit = b})
timemachineTOPformat :: Lens' TOP (Maybe (Tree Int))
timemachineTOPformat = lens _timemachineTOPformat (\a b -> a {_timemachineTOPformat = b})
timemachineTOPblackoffsetunit :: Lens' TOP (Maybe (Tree Int))
timemachineTOPblackoffsetunit = lens _timemachineTOPblackoffsetunit (\a b -> a {_timemachineTOPblackoffsetunit = b})
timemachineTOPresmenu :: Lens' TOP (Maybe (Tree Int))
timemachineTOPresmenu = lens _timemachineTOPresmenu (\a b -> a {_timemachineTOPresmenu = b})
timemachineTOPnpasses :: Lens' TOP (Maybe (Tree Int))
timemachineTOPnpasses = lens _timemachineTOPnpasses (\a b -> a {_timemachineTOPnpasses = b})
timemachineTOPfillmode :: Lens' TOP (Maybe (Tree Int))
timemachineTOPfillmode = lens _timemachineTOPfillmode (\a b -> a {_timemachineTOPfillmode = b})
timemachineTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
timemachineTOPinputfiltertype = lens _timemachineTOPinputfiltertype (\a b -> a {_timemachineTOPinputfiltertype = b})
timemachineTOPchanmask :: Lens' TOP (Maybe (Tree Int))
timemachineTOPchanmask = lens _timemachineTOPchanmask (\a b -> a {_timemachineTOPchanmask = b})
timemachineTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
timemachineTOPoutputresolution = lens _timemachineTOPoutputresolution (\a b -> a {_timemachineTOPoutputresolution = b})
timemachineTOPwhiteoffset :: Lens' TOP (Maybe (Tree Float))
timemachineTOPwhiteoffset = lens _timemachineTOPwhiteoffset (\a b -> a {_timemachineTOPwhiteoffset = b})
timemachineTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
timemachineTOPresolutionh = lens _timemachineTOPresolutionh (\a b -> a {_timemachineTOPresolutionh = b})
timemachineTOPblackoffset :: Lens' TOP (Maybe (Tree Float))
timemachineTOPblackoffset = lens _timemachineTOPblackoffset (\a b -> a {_timemachineTOPblackoffset = b})
timemachineTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
timemachineTOPaspect2 = lens _timemachineTOPaspect2 (\a b -> a {_timemachineTOPaspect2 = b})
timemachineTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
timemachineTOPfiltertype = lens _timemachineTOPfiltertype (\a b -> a {_timemachineTOPfiltertype = b})
timemachineTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
timemachineTOPaspect1 = lens _timemachineTOPaspect1 (\a b -> a {_timemachineTOPaspect1 = b})
timemachineTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
timemachineTOPresolutionw = lens _timemachineTOPresolutionw (\a b -> a {_timemachineTOPresolutionw = b})
timemachineTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
timemachineTOPoutputaspect = lens _timemachineTOPoutputaspect (\a b -> a {_timemachineTOPoutputaspect = b})

rgbkeyTOPredmin :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPredmin = lens _rgbkeyTOPredmin (\a b -> a {_rgbkeyTOPredmin = b})
rgbkeyTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPaspect2 = lens _rgbkeyTOPaspect2 (\a b -> a {_rgbkeyTOPaspect2 = b})
rgbkeyTOPformat :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPformat = lens _rgbkeyTOPformat (\a b -> a {_rgbkeyTOPformat = b})
rgbkeyTOPgreenmin :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPgreenmin = lens _rgbkeyTOPgreenmin (\a b -> a {_rgbkeyTOPgreenmin = b})
rgbkeyTOPrgbout :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPrgbout = lens _rgbkeyTOPrgbout (\a b -> a {_rgbkeyTOPrgbout = b})
rgbkeyTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPinputfiltertype = lens _rgbkeyTOPinputfiltertype (\a b -> a {_rgbkeyTOPinputfiltertype = b})
rgbkeyTOPchanmask :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPchanmask = lens _rgbkeyTOPchanmask (\a b -> a {_rgbkeyTOPchanmask = b})
rgbkeyTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPoutputresolution = lens _rgbkeyTOPoutputresolution (\a b -> a {_rgbkeyTOPoutputresolution = b})
rgbkeyTOPfillmode :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPfillmode = lens _rgbkeyTOPfillmode (\a b -> a {_rgbkeyTOPfillmode = b})
rgbkeyTOPbsoftlow :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPbsoftlow = lens _rgbkeyTOPbsoftlow (\a b -> a {_rgbkeyTOPbsoftlow = b})
rgbkeyTOPgreenmax :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPgreenmax = lens _rgbkeyTOPgreenmax (\a b -> a {_rgbkeyTOPgreenmax = b})
rgbkeyTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPfiltertype = lens _rgbkeyTOPfiltertype (\a b -> a {_rgbkeyTOPfiltertype = b})
rgbkeyTOParmenu :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOParmenu = lens _rgbkeyTOParmenu (\a b -> a {_rgbkeyTOParmenu = b})
rgbkeyTOPredmax :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPredmax = lens _rgbkeyTOPredmax (\a b -> a {_rgbkeyTOPredmax = b})
rgbkeyTOPalphaout :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPalphaout = lens _rgbkeyTOPalphaout (\a b -> a {_rgbkeyTOPalphaout = b})
rgbkeyTOPinvert :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPinvert = lens _rgbkeyTOPinvert (\a b -> a {_rgbkeyTOPinvert = b})
rgbkeyTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPresolutionw = lens _rgbkeyTOPresolutionw (\a b -> a {_rgbkeyTOPresolutionw = b})
rgbkeyTOPbsofthigh :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPbsofthigh = lens _rgbkeyTOPbsofthigh (\a b -> a {_rgbkeyTOPbsofthigh = b})
rgbkeyTOPresmult :: Lens' TOP (Maybe (Tree Bool))
rgbkeyTOPresmult = lens _rgbkeyTOPresmult (\a b -> a {_rgbkeyTOPresmult = b})
rgbkeyTOPgsofthigh :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPgsofthigh = lens _rgbkeyTOPgsofthigh (\a b -> a {_rgbkeyTOPgsofthigh = b})
rgbkeyTOPresmenu :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPresmenu = lens _rgbkeyTOPresmenu (\a b -> a {_rgbkeyTOPresmenu = b})
rgbkeyTOPbluemin :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPbluemin = lens _rgbkeyTOPbluemin (\a b -> a {_rgbkeyTOPbluemin = b})
rgbkeyTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPresolutionh = lens _rgbkeyTOPresolutionh (\a b -> a {_rgbkeyTOPresolutionh = b})
rgbkeyTOPrsofthigh :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPrsofthigh = lens _rgbkeyTOPrsofthigh (\a b -> a {_rgbkeyTOPrsofthigh = b})
rgbkeyTOPrsoftlow :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPrsoftlow = lens _rgbkeyTOPrsoftlow (\a b -> a {_rgbkeyTOPrsoftlow = b})
rgbkeyTOPnpasses :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPnpasses = lens _rgbkeyTOPnpasses (\a b -> a {_rgbkeyTOPnpasses = b})
rgbkeyTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPaspect1 = lens _rgbkeyTOPaspect1 (\a b -> a {_rgbkeyTOPaspect1 = b})
rgbkeyTOPbluemax :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPbluemax = lens _rgbkeyTOPbluemax (\a b -> a {_rgbkeyTOPbluemax = b})
rgbkeyTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
rgbkeyTOPoutputaspect = lens _rgbkeyTOPoutputaspect (\a b -> a {_rgbkeyTOPoutputaspect = b})
rgbkeyTOPgsoftlow :: Lens' TOP (Maybe (Tree Float))
rgbkeyTOPgsoftlow = lens _rgbkeyTOPgsoftlow (\a b -> a {_rgbkeyTOPgsoftlow = b})

cacheTOPinterp :: Lens' TOP (Maybe (Tree Bool))
cacheTOPinterp = lens _cacheTOPinterp (\a b -> a {_cacheTOPinterp = b})
cacheTOPresetpulse :: Lens' TOP (Maybe (Tree Bool))
cacheTOPresetpulse = lens _cacheTOPresetpulse (\a b -> a {_cacheTOPresetpulse = b})
cacheTOPreplaceindex :: Lens' TOP (Maybe (Tree Int))
cacheTOPreplaceindex = lens _cacheTOPreplaceindex (\a b -> a {_cacheTOPreplaceindex = b})
cacheTOPreplace :: Lens' TOP (Maybe (Tree Bool))
cacheTOPreplace = lens _cacheTOPreplace (\a b -> a {_cacheTOPreplace = b})
cacheTOPactive :: Lens' TOP (Maybe (Tree Bool))
cacheTOPactive = lens _cacheTOPactive (\a b -> a {_cacheTOPactive = b})
cacheTOPactivepulse :: Lens' TOP (Maybe (Tree Bool))
cacheTOPactivepulse = lens _cacheTOPactivepulse (\a b -> a {_cacheTOPactivepulse = b})
cacheTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
cacheTOPinputfiltertype = lens _cacheTOPinputfiltertype (\a b -> a {_cacheTOPinputfiltertype = b})
cacheTOPchanmask :: Lens' TOP (Maybe (Tree Int))
cacheTOPchanmask = lens _cacheTOPchanmask (\a b -> a {_cacheTOPchanmask = b})
cacheTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
cacheTOPoutputresolution = lens _cacheTOPoutputresolution (\a b -> a {_cacheTOPoutputresolution = b})
cacheTOPprefill :: Lens' TOP (Maybe (Tree Bool))
cacheTOPprefill = lens _cacheTOPprefill (\a b -> a {_cacheTOPprefill = b})
cacheTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
cacheTOPresolutionw = lens _cacheTOPresolutionw (\a b -> a {_cacheTOPresolutionw = b})
cacheTOPalwayscook :: Lens' TOP (Maybe (Tree Bool))
cacheTOPalwayscook = lens _cacheTOPalwayscook (\a b -> a {_cacheTOPalwayscook = b})
cacheTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
cacheTOPfiltertype = lens _cacheTOPfiltertype (\a b -> a {_cacheTOPfiltertype = b})
cacheTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
cacheTOPaspect2 = lens _cacheTOPaspect2 (\a b -> a {_cacheTOPaspect2 = b})
cacheTOPformat :: Lens' TOP (Maybe (Tree Int))
cacheTOPformat = lens _cacheTOPformat (\a b -> a {_cacheTOPformat = b})
cacheTOPreplacespulse :: Lens' TOP (Maybe (Tree Bool))
cacheTOPreplacespulse = lens _cacheTOPreplacespulse (\a b -> a {_cacheTOPreplacespulse = b})
cacheTOPstep :: Lens' TOP (Maybe (Tree Int))
cacheTOPstep = lens _cacheTOPstep (\a b -> a {_cacheTOPstep = b})
cacheTOPprefillpulse :: Lens' TOP (Maybe (Tree Bool))
cacheTOPprefillpulse = lens _cacheTOPprefillpulse (\a b -> a {_cacheTOPprefillpulse = b})
cacheTOParmenu :: Lens' TOP (Maybe (Tree Int))
cacheTOParmenu = lens _cacheTOParmenu (\a b -> a {_cacheTOParmenu = b})
cacheTOPresmult :: Lens' TOP (Maybe (Tree Bool))
cacheTOPresmult = lens _cacheTOPresmult (\a b -> a {_cacheTOPresmult = b})
cacheTOPoutputindex :: Lens' TOP (Maybe (Tree Float))
cacheTOPoutputindex = lens _cacheTOPoutputindex (\a b -> a {_cacheTOPoutputindex = b})
cacheTOPresmenu :: Lens' TOP (Maybe (Tree Int))
cacheTOPresmenu = lens _cacheTOPresmenu (\a b -> a {_cacheTOPresmenu = b})
cacheTOPcachesize :: Lens' TOP (Maybe (Tree Int))
cacheTOPcachesize = lens _cacheTOPcachesize (\a b -> a {_cacheTOPcachesize = b})
cacheTOPfillmode :: Lens' TOP (Maybe (Tree Int))
cacheTOPfillmode = lens _cacheTOPfillmode (\a b -> a {_cacheTOPfillmode = b})
cacheTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
cacheTOPresolutionh = lens _cacheTOPresolutionh (\a b -> a {_cacheTOPresolutionh = b})
cacheTOPcacheonce :: Lens' TOP (Maybe (Tree Bool))
cacheTOPcacheonce = lens _cacheTOPcacheonce (\a b -> a {_cacheTOPcacheonce = b})
cacheTOPnpasses :: Lens' TOP (Maybe (Tree Int))
cacheTOPnpasses = lens _cacheTOPnpasses (\a b -> a {_cacheTOPnpasses = b})
cacheTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
cacheTOPaspect1 = lens _cacheTOPaspect1 (\a b -> a {_cacheTOPaspect1 = b})
cacheTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
cacheTOPoutputaspect = lens _cacheTOPoutputaspect (\a b -> a {_cacheTOPoutputaspect = b})
cacheTOPreset :: Lens' TOP (Maybe (Tree Bool))
cacheTOPreset = lens _cacheTOPreset (\a b -> a {_cacheTOPreset = b})
cacheTOPoutputindexunit :: Lens' TOP (Maybe (Tree Int))
cacheTOPoutputindexunit = lens _cacheTOPoutputindexunit (\a b -> a {_cacheTOPoutputindexunit = b})

renderpassTOPaspect2 :: Lens' TOP (Maybe (Tree Float))
renderpassTOPaspect2 = lens _renderpassTOPaspect2 (\a b -> a {_renderpassTOPaspect2 = b})
renderpassTOPoverdraw :: Lens' TOP (Maybe (Tree Bool))
renderpassTOPoverdraw = lens _renderpassTOPoverdraw (\a b -> a {_renderpassTOPoverdraw = b})
renderpassTOPvalue3 :: Lens' TOP (Vec4)
renderpassTOPvalue3 = lens _renderpassTOPvalue3 (\a b -> a {_renderpassTOPvalue3 = b})
renderpassTOPfillmode :: Lens' TOP (Maybe (Tree Int))
renderpassTOPfillmode = lens _renderpassTOPfillmode (\a b -> a {_renderpassTOPfillmode = b})
renderpassTOPcullface :: Lens' TOP (Maybe (Tree Int))
renderpassTOPcullface = lens _renderpassTOPcullface (\a b -> a {_renderpassTOPcullface = b})
renderpassTOPresolutionw :: Lens' TOP (Maybe (Tree Int))
renderpassTOPresolutionw = lens _renderpassTOPresolutionw (\a b -> a {_renderpassTOPresolutionw = b})
renderpassTOParmenu :: Lens' TOP (Maybe (Tree Int))
renderpassTOParmenu = lens _renderpassTOParmenu (\a b -> a {_renderpassTOParmenu = b})
renderpassTOPsampler0 :: Lens' TOP (Maybe (Tree ByteString))
renderpassTOPsampler0 = lens _renderpassTOPsampler0 (\a b -> a {_renderpassTOPsampler0 = b})
renderpassTOPformat :: Lens' TOP (Maybe (Tree Int))
renderpassTOPformat = lens _renderpassTOPformat (\a b -> a {_renderpassTOPformat = b})
renderpassTOPsampler3 :: Lens' TOP (Maybe (Tree ByteString))
renderpassTOPsampler3 = lens _renderpassTOPsampler3 (\a b -> a {_renderpassTOPsampler3 = b})
renderpassTOPresmenu :: Lens' TOP (Maybe (Tree Int))
renderpassTOPresmenu = lens _renderpassTOPresmenu (\a b -> a {_renderpassTOPresmenu = b})
renderpassTOPtop1extendv :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop1extendv = lens _renderpassTOPtop1extendv (\a b -> a {_renderpassTOPtop1extendv = b})
renderpassTOPoutputaspect :: Lens' TOP (Maybe (Tree Int))
renderpassTOPoutputaspect = lens _renderpassTOPoutputaspect (\a b -> a {_renderpassTOPoutputaspect = b})
renderpassTOPuniname1 :: Lens' TOP (Maybe (Tree ByteString))
renderpassTOPuniname1 = lens _renderpassTOPuniname1 (\a b -> a {_renderpassTOPuniname1 = b})
renderpassTOPcropbottom :: Lens' TOP (Maybe (Tree Float))
renderpassTOPcropbottom = lens _renderpassTOPcropbottom (\a b -> a {_renderpassTOPcropbottom = b})
renderpassTOPsampler4 :: Lens' TOP (Maybe (Tree ByteString))
renderpassTOPsampler4 = lens _renderpassTOPsampler4 (\a b -> a {_renderpassTOPsampler4 = b})
renderpassTOPinputfiltertype :: Lens' TOP (Maybe (Tree Int))
renderpassTOPinputfiltertype = lens _renderpassTOPinputfiltertype (\a b -> a {_renderpassTOPinputfiltertype = b})
renderpassTOPtop4filter :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop4filter = lens _renderpassTOPtop4filter (\a b -> a {_renderpassTOPtop4filter = b})
renderpassTOPoverridemat :: Lens' TOP (Maybe (Tree MAT))
renderpassTOPoverridemat = lens _renderpassTOPoverridemat (\a b -> a {_renderpassTOPoverridemat = b})
renderpassTOPorderindtrans :: Lens' TOP (Maybe (Tree Bool))
renderpassTOPorderindtrans = lens _renderpassTOPorderindtrans (\a b -> a {_renderpassTOPorderindtrans = b})
renderpassTOPtop4extendv :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop4extendv = lens _renderpassTOPtop4extendv (\a b -> a {_renderpassTOPtop4extendv = b})
renderpassTOPuniname4 :: Lens' TOP (Maybe (Tree ByteString))
renderpassTOPuniname4 = lens _renderpassTOPuniname4 (\a b -> a {_renderpassTOPuniname4 = b})
renderpassTOPvalue2 :: Lens' TOP (Vec4)
renderpassTOPvalue2 = lens _renderpassTOPvalue2 (\a b -> a {_renderpassTOPvalue2 = b})
renderpassTOPcropbottomunit :: Lens' TOP (Maybe (Tree Int))
renderpassTOPcropbottomunit = lens _renderpassTOPcropbottomunit (\a b -> a {_renderpassTOPcropbottomunit = b})
renderpassTOPcropleft :: Lens' TOP (Maybe (Tree Float))
renderpassTOPcropleft = lens _renderpassTOPcropleft (\a b -> a {_renderpassTOPcropleft = b})
renderpassTOPdepthpeel :: Lens' TOP (Maybe (Tree Bool))
renderpassTOPdepthpeel = lens _renderpassTOPdepthpeel (\a b -> a {_renderpassTOPdepthpeel = b})
renderpassTOPpolygonoffsetunits :: Lens' TOP (Maybe (Tree Float))
renderpassTOPpolygonoffsetunits = lens _renderpassTOPpolygonoffsetunits (\a b -> a {_renderpassTOPpolygonoffsetunits = b})
renderpassTOPtop1 :: Lens' TOP (Maybe (Tree TOP))
renderpassTOPtop1 = lens _renderpassTOPtop1 (\a b -> a {_renderpassTOPtop1 = b})
renderpassTOPtop1filter :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop1filter = lens _renderpassTOPtop1filter (\a b -> a {_renderpassTOPtop1filter = b})
renderpassTOPresmult :: Lens' TOP (Maybe (Tree Bool))
renderpassTOPresmult = lens _renderpassTOPresmult (\a b -> a {_renderpassTOPresmult = b})
renderpassTOPtop2extendw :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop2extendw = lens _renderpassTOPtop2extendw (\a b -> a {_renderpassTOPtop2extendw = b})
renderpassTOPsampler2 :: Lens' TOP (Maybe (Tree ByteString))
renderpassTOPsampler2 = lens _renderpassTOPsampler2 (\a b -> a {_renderpassTOPsampler2 = b})
renderpassTOPdither :: Lens' TOP (Maybe (Tree Bool))
renderpassTOPdither = lens _renderpassTOPdither (\a b -> a {_renderpassTOPdither = b})
renderpassTOPuniname2 :: Lens' TOP (Maybe (Tree ByteString))
renderpassTOPuniname2 = lens _renderpassTOPuniname2 (\a b -> a {_renderpassTOPuniname2 = b})
renderpassTOPtop2 :: Lens' TOP (Maybe (Tree TOP))
renderpassTOPtop2 = lens _renderpassTOPtop2 (\a b -> a {_renderpassTOPtop2 = b})
renderpassTOPrenderinput :: Lens' TOP (Maybe (Tree TOP))
renderpassTOPrenderinput = lens _renderpassTOPrenderinput (\a b -> a {_renderpassTOPrenderinput = b})
renderpassTOPuniname0 :: Lens' TOP (Maybe (Tree ByteString))
renderpassTOPuniname0 = lens _renderpassTOPuniname0 (\a b -> a {_renderpassTOPuniname0 = b})
renderpassTOPfiltertype :: Lens' TOP (Maybe (Tree Int))
renderpassTOPfiltertype = lens _renderpassTOPfiltertype (\a b -> a {_renderpassTOPfiltertype = b})
renderpassTOPtop4extendw :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop4extendw = lens _renderpassTOPtop4extendw (\a b -> a {_renderpassTOPtop4extendw = b})
renderpassTOPsampler1 :: Lens' TOP (Maybe (Tree ByteString))
renderpassTOPsampler1 = lens _renderpassTOPsampler1 (\a b -> a {_renderpassTOPsampler1 = b})
renderpassTOPrender :: Lens' TOP (Maybe (Tree Bool))
renderpassTOPrender = lens _renderpassTOPrender (\a b -> a {_renderpassTOPrender = b})
renderpassTOPvalue4 :: Lens' TOP (Vec4)
renderpassTOPvalue4 = lens _renderpassTOPvalue4 (\a b -> a {_renderpassTOPvalue4 = b})
renderpassTOPdrawdepthonly :: Lens' TOP (Maybe (Tree Bool))
renderpassTOPdrawdepthonly = lens _renderpassTOPdrawdepthonly (\a b -> a {_renderpassTOPdrawdepthonly = b})
renderpassTOPtop0anisotropy :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop0anisotropy = lens _renderpassTOPtop0anisotropy (\a b -> a {_renderpassTOPtop0anisotropy = b})
renderpassTOPcroprightunit :: Lens' TOP (Maybe (Tree Int))
renderpassTOPcroprightunit = lens _renderpassTOPcroprightunit (\a b -> a {_renderpassTOPcroprightunit = b})
renderpassTOPtop0 :: Lens' TOP (Maybe (Tree TOP))
renderpassTOPtop0 = lens _renderpassTOPtop0 (\a b -> a {_renderpassTOPtop0 = b})
renderpassTOPtop0extendv :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop0extendv = lens _renderpassTOPtop0extendv (\a b -> a {_renderpassTOPtop0extendv = b})
renderpassTOPtop3extendw :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop3extendw = lens _renderpassTOPtop3extendw (\a b -> a {_renderpassTOPtop3extendw = b})
renderpassTOPtop0filter :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop0filter = lens _renderpassTOPtop0filter (\a b -> a {_renderpassTOPtop0filter = b})
renderpassTOPpolygonoffsetfactor :: Lens' TOP (Maybe (Tree Float))
renderpassTOPpolygonoffsetfactor = lens _renderpassTOPpolygonoffsetfactor (\a b -> a {_renderpassTOPpolygonoffsetfactor = b})
renderpassTOPpolygonoffset :: Lens' TOP (Maybe (Tree Bool))
renderpassTOPpolygonoffset = lens _renderpassTOPpolygonoffset (\a b -> a {_renderpassTOPpolygonoffset = b})
renderpassTOPcropright :: Lens' TOP (Maybe (Tree Float))
renderpassTOPcropright = lens _renderpassTOPcropright (\a b -> a {_renderpassTOPcropright = b})
renderpassTOPtop3anisotropy :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop3anisotropy = lens _renderpassTOPtop3anisotropy (\a b -> a {_renderpassTOPtop3anisotropy = b})
renderpassTOPtop3extendv :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop3extendv = lens _renderpassTOPtop3extendv (\a b -> a {_renderpassTOPtop3extendv = b})
renderpassTOPresolutionh :: Lens' TOP (Maybe (Tree Int))
renderpassTOPresolutionh = lens _renderpassTOPresolutionh (\a b -> a {_renderpassTOPresolutionh = b})
renderpassTOPtop3filter :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop3filter = lens _renderpassTOPtop3filter (\a b -> a {_renderpassTOPtop3filter = b})
renderpassTOPallowbufblending :: Lens' TOP (Maybe (Tree Int))
renderpassTOPallowbufblending = lens _renderpassTOPallowbufblending (\a b -> a {_renderpassTOPallowbufblending = b})
renderpassTOPtop3 :: Lens' TOP (Maybe (Tree TOP))
renderpassTOPtop3 = lens _renderpassTOPtop3 (\a b -> a {_renderpassTOPtop3 = b})
renderpassTOPaspect1 :: Lens' TOP (Maybe (Tree Float))
renderpassTOPaspect1 = lens _renderpassTOPaspect1 (\a b -> a {_renderpassTOPaspect1 = b})
renderpassTOPtop4extendu :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop4extendu = lens _renderpassTOPtop4extendu (\a b -> a {_renderpassTOPtop4extendu = b})
renderpassTOPcoloroutputneeded :: Lens' TOP (Maybe (Tree Bool))
renderpassTOPcoloroutputneeded = lens _renderpassTOPcoloroutputneeded (\a b -> a {_renderpassTOPcoloroutputneeded = b})
renderpassTOPtop1extendu :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop1extendu = lens _renderpassTOPtop1extendu (\a b -> a {_renderpassTOPtop1extendu = b})
renderpassTOPalphatocoverage :: Lens' TOP (Maybe (Tree Bool))
renderpassTOPalphatocoverage = lens _renderpassTOPalphatocoverage (\a b -> a {_renderpassTOPalphatocoverage = b})
renderpassTOPtop3extendu :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop3extendu = lens _renderpassTOPtop3extendu (\a b -> a {_renderpassTOPtop3extendu = b})
renderpassTOPcleartocamcolor :: Lens' TOP (Maybe (Tree Bool))
renderpassTOPcleartocamcolor = lens _renderpassTOPcleartocamcolor (\a b -> a {_renderpassTOPcleartocamcolor = b})
renderpassTOPtop2anisotropy :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop2anisotropy = lens _renderpassTOPtop2anisotropy (\a b -> a {_renderpassTOPtop2anisotropy = b})
renderpassTOPcropleftunit :: Lens' TOP (Maybe (Tree Int))
renderpassTOPcropleftunit = lens _renderpassTOPcropleftunit (\a b -> a {_renderpassTOPcropleftunit = b})
renderpassTOPtop1extendw :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop1extendw = lens _renderpassTOPtop1extendw (\a b -> a {_renderpassTOPtop1extendw = b})
renderpassTOPtop2extendv :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop2extendv = lens _renderpassTOPtop2extendv (\a b -> a {_renderpassTOPtop2extendv = b})
renderpassTOPtop4anisotropy :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop4anisotropy = lens _renderpassTOPtop4anisotropy (\a b -> a {_renderpassTOPtop4anisotropy = b})
renderpassTOPtop4 :: Lens' TOP (Maybe (Tree TOP))
renderpassTOPtop4 = lens _renderpassTOPtop4 (\a b -> a {_renderpassTOPtop4 = b})
renderpassTOPtop2extendu :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop2extendu = lens _renderpassTOPtop2extendu (\a b -> a {_renderpassTOPtop2extendu = b})
renderpassTOPoverdrawlimit :: Lens' TOP (Maybe (Tree Int))
renderpassTOPoverdrawlimit = lens _renderpassTOPoverdrawlimit (\a b -> a {_renderpassTOPoverdrawlimit = b})
renderpassTOPvalue1 :: Lens' TOP (Vec4)
renderpassTOPvalue1 = lens _renderpassTOPvalue1 (\a b -> a {_renderpassTOPvalue1 = b})
renderpassTOPtop0extendu :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop0extendu = lens _renderpassTOPtop0extendu (\a b -> a {_renderpassTOPtop0extendu = b})
renderpassTOPvalue0 :: Lens' TOP (Vec4)
renderpassTOPvalue0 = lens _renderpassTOPvalue0 (\a b -> a {_renderpassTOPvalue0 = b})
renderpassTOPtop0extendw :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop0extendw = lens _renderpassTOPtop0extendw (\a b -> a {_renderpassTOPtop0extendw = b})
renderpassTOPtranspeellayers :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtranspeellayers = lens _renderpassTOPtranspeellayers (\a b -> a {_renderpassTOPtranspeellayers = b})
renderpassTOPcleardepth :: Lens' TOP (Maybe (Tree Bool))
renderpassTOPcleardepth = lens _renderpassTOPcleardepth (\a b -> a {_renderpassTOPcleardepth = b})
renderpassTOPcroptopunit :: Lens' TOP (Maybe (Tree Int))
renderpassTOPcroptopunit = lens _renderpassTOPcroptopunit (\a b -> a {_renderpassTOPcroptopunit = b})
renderpassTOPtop1anisotropy :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop1anisotropy = lens _renderpassTOPtop1anisotropy (\a b -> a {_renderpassTOPtop1anisotropy = b})
renderpassTOPoutputresolution :: Lens' TOP (Maybe (Tree Int))
renderpassTOPoutputresolution = lens _renderpassTOPoutputresolution (\a b -> a {_renderpassTOPoutputresolution = b})
renderpassTOPuniname3 :: Lens' TOP (Maybe (Tree ByteString))
renderpassTOPuniname3 = lens _renderpassTOPuniname3 (\a b -> a {_renderpassTOPuniname3 = b})
renderpassTOPnpasses :: Lens' TOP (Maybe (Tree Int))
renderpassTOPnpasses = lens _renderpassTOPnpasses (\a b -> a {_renderpassTOPnpasses = b})
renderpassTOPchanmask :: Lens' TOP (Maybe (Tree Int))
renderpassTOPchanmask = lens _renderpassTOPchanmask (\a b -> a {_renderpassTOPchanmask = b})
renderpassTOPcroptop :: Lens' TOP (Maybe (Tree Float))
renderpassTOPcroptop = lens _renderpassTOPcroptop (\a b -> a {_renderpassTOPcroptop = b})
renderpassTOPtop2filter :: Lens' TOP (Maybe (Tree Int))
renderpassTOPtop2filter = lens _renderpassTOPtop2filter (\a b -> a {_renderpassTOPtop2filter = b})

serialDATparity :: Lens' DAT (Maybe (Tree Bool))
serialDATparity = lens _serialDATparity (\a b -> a {_serialDATparity = b})
serialDATformat :: Lens' DAT (Maybe (Tree Int))
serialDATformat = lens _serialDATformat (\a b -> a {_serialDATformat = b})
serialDATactive :: Lens' DAT (Maybe (Tree Bool))
serialDATactive = lens _serialDATactive (\a b -> a {_serialDATactive = b})
serialDATextension :: Lens' DAT (Maybe (Tree Int))
serialDATextension = lens _serialDATextension (\a b -> a {_serialDATextension = b})
serialDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
serialDATcustomext = lens _serialDATcustomext (\a b -> a {_serialDATcustomext = b})
serialDATbaudrate :: Lens' DAT (Maybe (Tree Bool))
serialDATbaudrate = lens _serialDATbaudrate (\a b -> a {_serialDATbaudrate = b})
serialDATwordwrap :: Lens' DAT (Maybe (Tree Int))
serialDATwordwrap = lens _serialDATwordwrap (\a b -> a {_serialDATwordwrap = b})
serialDATrts :: Lens' DAT (Maybe (Tree Bool))
serialDATrts = lens _serialDATrts (\a b -> a {_serialDATrts = b})
serialDATstopbits :: Lens' DAT (Maybe (Tree Bool))
serialDATstopbits = lens _serialDATstopbits (\a b -> a {_serialDATstopbits = b})
serialDATclamp :: Lens' DAT (Maybe (Tree Bool))
serialDATclamp = lens _serialDATclamp (\a b -> a {_serialDATclamp = b})
serialDATdtr :: Lens' DAT (Maybe (Tree Bool))
serialDATdtr = lens _serialDATdtr (\a b -> a {_serialDATdtr = b})
serialDATlanguage :: Lens' DAT (Maybe (Tree Int))
serialDATlanguage = lens _serialDATlanguage (\a b -> a {_serialDATlanguage = b})
serialDATmaxlines :: Lens' DAT (Maybe (Tree Int))
serialDATmaxlines = lens _serialDATmaxlines (\a b -> a {_serialDATmaxlines = b})
serialDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
serialDATexecuteloc = lens _serialDATexecuteloc (\a b -> a {_serialDATexecuteloc = b})
serialDATdatabits :: Lens' DAT (Maybe (Tree Bool))
serialDATdatabits = lens _serialDATdatabits (\a b -> a {_serialDATdatabits = b})
serialDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
serialDATcallbacks = lens _serialDATcallbacks (\a b -> a {_serialDATcallbacks = b})
serialDATclear :: Lens' DAT (Maybe (Tree Bool))
serialDATclear = lens _serialDATclear (\a b -> a {_serialDATclear = b})
serialDATport :: Lens' DAT (Maybe (Tree Bool))
serialDATport = lens _serialDATport (\a b -> a {_serialDATport = b})
serialDATbytes :: Lens' DAT (Maybe (Tree Bool))
serialDATbytes = lens _serialDATbytes (\a b -> a {_serialDATbytes = b})

tcpipDATmode :: Lens' DAT (Maybe (Tree Int))
tcpipDATmode = lens _tcpipDATmode (\a b -> a {_tcpipDATmode = b})
tcpipDATformat :: Lens' DAT (Maybe (Tree Int))
tcpipDATformat = lens _tcpipDATformat (\a b -> a {_tcpipDATformat = b})
tcpipDATactive :: Lens' DAT (Maybe (Tree Bool))
tcpipDATactive = lens _tcpipDATactive (\a b -> a {_tcpipDATactive = b})
tcpipDATextension :: Lens' DAT (Maybe (Tree Int))
tcpipDATextension = lens _tcpipDATextension (\a b -> a {_tcpipDATextension = b})
tcpipDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
tcpipDATcustomext = lens _tcpipDATcustomext (\a b -> a {_tcpipDATcustomext = b})
tcpipDATwordwrap :: Lens' DAT (Maybe (Tree Int))
tcpipDATwordwrap = lens _tcpipDATwordwrap (\a b -> a {_tcpipDATwordwrap = b})
tcpipDATaddress :: Lens' DAT (Maybe (Tree ByteString))
tcpipDATaddress = lens _tcpipDATaddress (\a b -> a {_tcpipDATaddress = b})
tcpipDATshared :: Lens' DAT (Maybe (Tree Bool))
tcpipDATshared = lens _tcpipDATshared (\a b -> a {_tcpipDATshared = b})
tcpipDATclamp :: Lens' DAT (Maybe (Tree Bool))
tcpipDATclamp = lens _tcpipDATclamp (\a b -> a {_tcpipDATclamp = b})
tcpipDATlanguage :: Lens' DAT (Maybe (Tree Int))
tcpipDATlanguage = lens _tcpipDATlanguage (\a b -> a {_tcpipDATlanguage = b})
tcpipDATlocaladdress :: Lens' DAT (Maybe (Tree ByteString))
tcpipDATlocaladdress = lens _tcpipDATlocaladdress (\a b -> a {_tcpipDATlocaladdress = b})
tcpipDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
tcpipDATexecuteloc = lens _tcpipDATexecuteloc (\a b -> a {_tcpipDATexecuteloc = b})
tcpipDATclear :: Lens' DAT (Maybe (Tree Bool))
tcpipDATclear = lens _tcpipDATclear (\a b -> a {_tcpipDATclear = b})
tcpipDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
tcpipDATcallbacks = lens _tcpipDATcallbacks (\a b -> a {_tcpipDATcallbacks = b})
tcpipDATmaxlines :: Lens' DAT (Maybe (Tree Int))
tcpipDATmaxlines = lens _tcpipDATmaxlines (\a b -> a {_tcpipDATmaxlines = b})
tcpipDATport :: Lens' DAT (Maybe (Tree Int))
tcpipDATport = lens _tcpipDATport (\a b -> a {_tcpipDATport = b})
tcpipDATbytes :: Lens' DAT (Maybe (Tree Bool))
tcpipDATbytes = lens _tcpipDATbytes (\a b -> a {_tcpipDATbytes = b})

evaluateDAToutput :: Lens' DAT (Maybe (Tree ByteString))
evaluateDAToutput = lens _evaluateDAToutput (\a b -> a {_evaluateDAToutput = b})
evaluateDATfromcol :: Lens' DAT (Maybe (Tree Int))
evaluateDATfromcol = lens _evaluateDATfromcol (\a b -> a {_evaluateDATfromcol = b})
evaluateDATrowindexstart :: Lens' DAT (Maybe (Tree Int))
evaluateDATrowindexstart = lens _evaluateDATrowindexstart (\a b -> a {_evaluateDATrowindexstart = b})
evaluateDATrownameend :: Lens' DAT (Maybe (Tree ByteString))
evaluateDATrownameend = lens _evaluateDATrownameend (\a b -> a {_evaluateDATrownameend = b})
evaluateDATcolnamestart :: Lens' DAT (Maybe (Tree ByteString))
evaluateDATcolnamestart = lens _evaluateDATcolnamestart (\a b -> a {_evaluateDATcolnamestart = b})
evaluateDATfromrow :: Lens' DAT (Maybe (Tree Int))
evaluateDATfromrow = lens _evaluateDATfromrow (\a b -> a {_evaluateDATfromrow = b})
evaluateDATrowexpr :: Lens' DAT (Maybe (Tree ByteString))
evaluateDATrowexpr = lens _evaluateDATrowexpr (\a b -> a {_evaluateDATrowexpr = b})
evaluateDATrownamestart :: Lens' DAT (Maybe (Tree ByteString))
evaluateDATrownamestart = lens _evaluateDATrownamestart (\a b -> a {_evaluateDATrownamestart = b})
evaluateDATbackslash :: Lens' DAT (Maybe (Tree Bool))
evaluateDATbackslash = lens _evaluateDATbackslash (\a b -> a {_evaluateDATbackslash = b})
evaluateDATrowindexend :: Lens' DAT (Maybe (Tree Int))
evaluateDATrowindexend = lens _evaluateDATrowindexend (\a b -> a {_evaluateDATrowindexend = b})
evaluateDATdependency :: Lens' DAT (Maybe (Tree Bool))
evaluateDATdependency = lens _evaluateDATdependency (\a b -> a {_evaluateDATdependency = b})
evaluateDATcolexpr :: Lens' DAT (Maybe (Tree ByteString))
evaluateDATcolexpr = lens _evaluateDATcolexpr (\a b -> a {_evaluateDATcolexpr = b})
evaluateDATcolnames :: Lens' DAT (Maybe (Tree ByteString))
evaluateDATcolnames = lens _evaluateDATcolnames (\a b -> a {_evaluateDATcolnames = b})
evaluateDATdatexpr :: Lens' DAT (Maybe (Tree DAT))
evaluateDATdatexpr = lens _evaluateDATdatexpr (\a b -> a {_evaluateDATdatexpr = b})
evaluateDATexpr :: Lens' DAT (Maybe (Tree ByteString))
evaluateDATexpr = lens _evaluateDATexpr (\a b -> a {_evaluateDATexpr = b})
evaluateDATextractrows :: Lens' DAT (Maybe (Tree Int))
evaluateDATextractrows = lens _evaluateDATextractrows (\a b -> a {_evaluateDATextractrows = b})
evaluateDATextension :: Lens' DAT (Maybe (Tree Int))
evaluateDATextension = lens _evaluateDATextension (\a b -> a {_evaluateDATextension = b})
evaluateDATcolindexend :: Lens' DAT (Maybe (Tree Int))
evaluateDATcolindexend = lens _evaluateDATcolindexend (\a b -> a {_evaluateDATcolindexend = b})
evaluateDAToutputsize :: Lens' DAT (Maybe (Tree Int))
evaluateDAToutputsize = lens _evaluateDAToutputsize (\a b -> a {_evaluateDAToutputsize = b})
evaluateDATrownames :: Lens' DAT (Maybe (Tree ByteString))
evaluateDATrownames = lens _evaluateDATrownames (\a b -> a {_evaluateDATrownames = b})
evaluateDATxfirstrow :: Lens' DAT (Maybe (Tree Bool))
evaluateDATxfirstrow = lens _evaluateDATxfirstrow (\a b -> a {_evaluateDATxfirstrow = b})
evaluateDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
evaluateDATcustomext = lens _evaluateDATcustomext (\a b -> a {_evaluateDATcustomext = b})
evaluateDATlanguage :: Lens' DAT (Maybe (Tree Int))
evaluateDATlanguage = lens _evaluateDATlanguage (\a b -> a {_evaluateDATlanguage = b})
evaluateDATextractcols :: Lens' DAT (Maybe (Tree Int))
evaluateDATextractcols = lens _evaluateDATextractcols (\a b -> a {_evaluateDATextractcols = b})
evaluateDATwordwrap :: Lens' DAT (Maybe (Tree Int))
evaluateDATwordwrap = lens _evaluateDATwordwrap (\a b -> a {_evaluateDATwordwrap = b})
evaluateDATcolnameend :: Lens' DAT (Maybe (Tree ByteString))
evaluateDATcolnameend = lens _evaluateDATcolnameend (\a b -> a {_evaluateDATcolnameend = b})
evaluateDATdat :: Lens' DAT (Maybe (Tree DAT))
evaluateDATdat = lens _evaluateDATdat (\a b -> a {_evaluateDATdat = b})
evaluateDATcolindexstart :: Lens' DAT (Maybe (Tree Int))
evaluateDATcolindexstart = lens _evaluateDATcolindexstart (\a b -> a {_evaluateDATcolindexstart = b})
evaluateDATxfirstcol :: Lens' DAT (Maybe (Tree Bool))
evaluateDATxfirstcol = lens _evaluateDATxfirstcol (\a b -> a {_evaluateDATxfirstcol = b})

choptoDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
choptoDATcustomext = lens _choptoDATcustomext (\a b -> a {_choptoDATcustomext = b})
choptoDATlanguage :: Lens' DAT (Maybe (Tree Int))
choptoDATlanguage = lens _choptoDATlanguage (\a b -> a {_choptoDATlanguage = b})
choptoDATnames :: Lens' DAT (Maybe (Tree Bool))
choptoDATnames = lens _choptoDATnames (\a b -> a {_choptoDATnames = b})
choptoDATextension :: Lens' DAT (Maybe (Tree Int))
choptoDATextension = lens _choptoDATextension (\a b -> a {_choptoDATextension = b})
choptoDATwordwrap :: Lens' DAT (Maybe (Tree Int))
choptoDATwordwrap = lens _choptoDATwordwrap (\a b -> a {_choptoDATwordwrap = b})
choptoDATchop :: Lens' DAT (Maybe (Tree CHOP))
choptoDATchop = lens _choptoDATchop (\a b -> a {_choptoDATchop = b})
choptoDATlatestsample :: Lens' DAT (Maybe (Tree Bool))
choptoDATlatestsample = lens _choptoDATlatestsample (\a b -> a {_choptoDATlatestsample = b})
choptoDAToutput :: Lens' DAT (Maybe (Tree Int))
choptoDAToutput = lens _choptoDAToutput (\a b -> a {_choptoDAToutput = b})

chopexecuteDATedit :: Lens' DAT (Maybe (Tree Bool))
chopexecuteDATedit = lens _chopexecuteDATedit (\a b -> a {_chopexecuteDATedit = b})
chopexecuteDATontooff :: Lens' DAT (Maybe (Tree Bool))
chopexecuteDATontooff = lens _chopexecuteDATontooff (\a b -> a {_chopexecuteDATontooff = b})
chopexecuteDATwhileoff :: Lens' DAT (Maybe (Tree Bool))
chopexecuteDATwhileoff = lens _chopexecuteDATwhileoff (\a b -> a {_chopexecuteDATwhileoff = b})
chopexecuteDATactive :: Lens' DAT (Maybe (Tree Bool))
chopexecuteDATactive = lens _chopexecuteDATactive (\a b -> a {_chopexecuteDATactive = b})
chopexecuteDATextension :: Lens' DAT (Maybe (Tree Int))
chopexecuteDATextension = lens _chopexecuteDATextension (\a b -> a {_chopexecuteDATextension = b})
chopexecuteDATwhileon :: Lens' DAT (Maybe (Tree Bool))
chopexecuteDATwhileon = lens _chopexecuteDATwhileon (\a b -> a {_chopexecuteDATwhileon = b})
chopexecuteDATofftoon :: Lens' DAT (Maybe (Tree Bool))
chopexecuteDATofftoon = lens _chopexecuteDATofftoon (\a b -> a {_chopexecuteDATofftoon = b})
chopexecuteDATchannel :: Lens' DAT (Maybe (Tree ByteString))
chopexecuteDATchannel = lens _chopexecuteDATchannel (\a b -> a {_chopexecuteDATchannel = b})
chopexecuteDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
chopexecuteDATcustomext = lens _chopexecuteDATcustomext (\a b -> a {_chopexecuteDATcustomext = b})
chopexecuteDATlanguage :: Lens' DAT (Maybe (Tree Int))
chopexecuteDATlanguage = lens _chopexecuteDATlanguage (\a b -> a {_chopexecuteDATlanguage = b})
chopexecuteDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
chopexecuteDATexecuteloc = lens _chopexecuteDATexecuteloc (\a b -> a {_chopexecuteDATexecuteloc = b})
chopexecuteDATwordwrap :: Lens' DAT (Maybe (Tree Int))
chopexecuteDATwordwrap = lens _chopexecuteDATwordwrap (\a b -> a {_chopexecuteDATwordwrap = b})
chopexecuteDATvaluechange :: Lens' DAT (Maybe (Tree Bool))
chopexecuteDATvaluechange = lens _chopexecuteDATvaluechange (\a b -> a {_chopexecuteDATvaluechange = b})
chopexecuteDATchop :: Lens' DAT (Maybe (Tree CHOP))
chopexecuteDATchop = lens _chopexecuteDATchop (\a b -> a {_chopexecuteDATchop = b})
chopexecuteDATfreq :: Lens' DAT (Maybe (Tree Int))
chopexecuteDATfreq = lens _chopexecuteDATfreq (\a b -> a {_chopexecuteDATfreq = b})

performDATlogcustompanel :: Lens' DAT (Maybe (Tree Bool))
performDATlogcustompanel = lens _performDATlogcustompanel (\a b -> a {_performDATlogcustompanel = b})
performDATwordwrap :: Lens' DAT (Maybe (Tree Int))
performDATwordwrap = lens _performDATwordwrap (\a b -> a {_performDATwordwrap = b})
performDATlogrender :: Lens' DAT (Maybe (Tree Bool))
performDATlogrender = lens _performDATlogrender (\a b -> a {_performDATlogrender = b})
performDATactive :: Lens' DAT (Maybe (Tree Bool))
performDATactive = lens _performDATactive (\a b -> a {_performDATactive = b})
performDATlogmovie :: Lens' DAT (Maybe (Tree Bool))
performDATlogmovie = lens _performDATlogmovie (\a b -> a {_performDATlogmovie = b})
performDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
performDATcustomext = lens _performDATcustomext (\a b -> a {_performDATcustomext = b})
performDATextension :: Lens' DAT (Maybe (Tree Int))
performDATextension = lens _performDATextension (\a b -> a {_performDATextension = b})
performDATactivepulse :: Lens' DAT (Maybe (Tree Bool))
performDATactivepulse = lens _performDATactivepulse (\a b -> a {_performDATactivepulse = b})
performDATlogdrawchannels :: Lens' DAT (Maybe (Tree Bool))
performDATlogdrawchannels = lens _performDATlogdrawchannels (\a b -> a {_performDATlogdrawchannels = b})
performDATtriggermode :: Lens' DAT (Maybe (Tree Int))
performDATtriggermode = lens _performDATtriggermode (\a b -> a {_performDATtriggermode = b})
performDATlogscript :: Lens' DAT (Maybe (Tree Bool))
performDATlogscript = lens _performDATlogscript (\a b -> a {_performDATlogscript = b})
performDATlanguage :: Lens' DAT (Maybe (Tree Int))
performDATlanguage = lens _performDATlanguage (\a b -> a {_performDATlanguage = b})
performDATtriggerthreshold :: Lens' DAT (Maybe (Tree Float))
performDATtriggerthreshold = lens _performDATtriggerthreshold (\a b -> a {_performDATtriggerthreshold = b})
performDATlogcook :: Lens' DAT (Maybe (Tree Bool))
performDATlogcook = lens _performDATlogcook (\a b -> a {_performDATlogcook = b})
performDATloggraphics :: Lens' DAT (Maybe (Tree Bool))
performDATloggraphics = lens _performDATloggraphics (\a b -> a {_performDATloggraphics = b})
performDATlogframelength :: Lens' DAT (Maybe (Tree Bool))
performDATlogframelength = lens _performDATlogframelength (\a b -> a {_performDATlogframelength = b})
performDATlogobjectview :: Lens' DAT (Maybe (Tree Bool))
performDATlogobjectview = lens _performDATlogobjectview (\a b -> a {_performDATlogobjectview = b})
performDATlogmisc :: Lens' DAT (Maybe (Tree Bool))
performDATlogmisc = lens _performDATlogmisc (\a b -> a {_performDATlogmisc = b})
performDATlogexport :: Lens' DAT (Maybe (Tree Bool))
performDATlogexport = lens _performDATlogexport (\a b -> a {_performDATlogexport = b})
performDATlogviewport :: Lens' DAT (Maybe (Tree Bool))
performDATlogviewport = lens _performDATlogviewport (\a b -> a {_performDATlogviewport = b})
performDATlogmidi :: Lens' DAT (Maybe (Tree Bool))
performDATlogmidi = lens _performDATlogmidi (\a b -> a {_performDATlogmidi = b})

clipDATclip :: Lens' DAT (Maybe (Tree CHOP))
clipDATclip = lens _clipDATclip (\a b -> a {_clipDATclip = b})
clipDATedit :: Lens' DAT (Maybe (Tree Bool))
clipDATedit = lens _clipDATedit (\a b -> a {_clipDATedit = b})
clipDATfile :: Lens' DAT (Maybe (Tree ByteString))
clipDATfile = lens _clipDATfile (\a b -> a {_clipDATfile = b})
clipDATextension :: Lens' DAT (Maybe (Tree Int))
clipDATextension = lens _clipDATextension (\a b -> a {_clipDATextension = b})
clipDATwordwrap :: Lens' DAT (Maybe (Tree Int))
clipDATwordwrap = lens _clipDATwordwrap (\a b -> a {_clipDATwordwrap = b})
clipDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
clipDATcustomext = lens _clipDATcustomext (\a b -> a {_clipDATcustomext = b})
clipDATlanguage :: Lens' DAT (Maybe (Tree Int))
clipDATlanguage = lens _clipDATlanguage (\a b -> a {_clipDATlanguage = b})
clipDATreload :: Lens' DAT (Maybe (Tree Bool))
clipDATreload = lens _clipDATreload (\a b -> a {_clipDATreload = b})
clipDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
clipDATexecuteloc = lens _clipDATexecuteloc (\a b -> a {_clipDATexecuteloc = b})
clipDATframefirst :: Lens' DAT (Maybe (Tree Int))
clipDATframefirst = lens _clipDATframefirst (\a b -> a {_clipDATframefirst = b})
clipDATframeloop :: Lens' DAT (Maybe (Tree Int))
clipDATframeloop = lens _clipDATframeloop (\a b -> a {_clipDATframeloop = b})
clipDATexit :: Lens' DAT (Maybe (Tree Bool))
clipDATexit = lens _clipDATexit (\a b -> a {_clipDATexit = b})
clipDATprintstate :: Lens' DAT (Maybe (Tree Bool))
clipDATprintstate = lens _clipDATprintstate (\a b -> a {_clipDATprintstate = b})

tuioinDATaccel :: Lens' DAT (Maybe (Tree Bool))
tuioinDATaccel = lens _tuioinDATaccel (\a b -> a {_tuioinDATaccel = b})
tuioinDATactive :: Lens' DAT (Maybe (Tree Bool))
tuioinDATactive = lens _tuioinDATactive (\a b -> a {_tuioinDATactive = b})
tuioinDATangle :: Lens' DAT (Maybe (Tree Bool))
tuioinDATangle = lens _tuioinDATangle (\a b -> a {_tuioinDATangle = b})
tuioinDATsize :: Lens' DAT (Maybe (Tree Bool))
tuioinDATsize = lens _tuioinDATsize (\a b -> a {_tuioinDATsize = b})
tuioinDATprotocol :: Lens' DAT (Maybe (Tree Int))
tuioinDATprotocol = lens _tuioinDATprotocol (\a b -> a {_tuioinDATprotocol = b})
tuioinDATaddress :: Lens' DAT (Maybe (Tree ByteString))
tuioinDATaddress = lens _tuioinDATaddress (\a b -> a {_tuioinDATaddress = b})
tuioinDATshared :: Lens' DAT (Maybe (Tree Bool))
tuioinDATshared = lens _tuioinDATshared (\a b -> a {_tuioinDATshared = b})
tuioinDATprofile :: Lens' DAT (Maybe (Tree Bool))
tuioinDATprofile = lens _tuioinDATprofile (\a b -> a {_tuioinDATprofile = b})
tuioinDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
tuioinDATcustomext = lens _tuioinDATcustomext (\a b -> a {_tuioinDATcustomext = b})
tuioinDATvelocity :: Lens' DAT (Maybe (Tree Bool))
tuioinDATvelocity = lens _tuioinDATvelocity (\a b -> a {_tuioinDATvelocity = b})
tuioinDATtimestamp :: Lens' DAT (Maybe (Tree Bool))
tuioinDATtimestamp = lens _tuioinDATtimestamp (\a b -> a {_tuioinDATtimestamp = b})
tuioinDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
tuioinDATexecuteloc = lens _tuioinDATexecuteloc (\a b -> a {_tuioinDATexecuteloc = b})
tuioinDATwordwrap :: Lens' DAT (Maybe (Tree Int))
tuioinDATwordwrap = lens _tuioinDATwordwrap (\a b -> a {_tuioinDATwordwrap = b})
tuioinDATclassid :: Lens' DAT (Maybe (Tree Bool))
tuioinDATclassid = lens _tuioinDATclassid (\a b -> a {_tuioinDATclassid = b})
tuioinDATlanguage :: Lens' DAT (Maybe (Tree Int))
tuioinDATlanguage = lens _tuioinDATlanguage (\a b -> a {_tuioinDATlanguage = b})
tuioinDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
tuioinDATcallbacks = lens _tuioinDATcallbacks (\a b -> a {_tuioinDATcallbacks = b})
tuioinDATport :: Lens' DAT (Maybe (Tree Int))
tuioinDATport = lens _tuioinDATport (\a b -> a {_tuioinDATport = b})
tuioinDATextension :: Lens' DAT (Maybe (Tree Int))
tuioinDATextension = lens _tuioinDATextension (\a b -> a {_tuioinDATextension = b})

convertDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
convertDATcustomext = lens _convertDATcustomext (\a b -> a {_convertDATcustomext = b})
convertDATlanguage :: Lens' DAT (Maybe (Tree Int))
convertDATlanguage = lens _convertDATlanguage (\a b -> a {_convertDATlanguage = b})
convertDATremoveblank :: Lens' DAT (Maybe (Tree Bool))
convertDATremoveblank = lens _convertDATremoveblank (\a b -> a {_convertDATremoveblank = b})
convertDATextension :: Lens' DAT (Maybe (Tree Int))
convertDATextension = lens _convertDATextension (\a b -> a {_convertDATextension = b})
convertDATwordwrap :: Lens' DAT (Maybe (Tree Int))
convertDATwordwrap = lens _convertDATwordwrap (\a b -> a {_convertDATwordwrap = b})
convertDAThow :: Lens' DAT (Maybe (Tree Int))
convertDAThow = lens _convertDAThow (\a b -> a {_convertDAThow = b})
convertDATdelimiters :: Lens' DAT (Maybe (Tree ByteString))
convertDATdelimiters = lens _convertDATdelimiters (\a b -> a {_convertDATdelimiters = b})
convertDATspacers :: Lens' DAT (Maybe (Tree ByteString))
convertDATspacers = lens _convertDATspacers (\a b -> a {_convertDATspacers = b})

scriptDATsetuppars :: Lens' DAT (Maybe (Tree Bool))
scriptDATsetuppars = lens _scriptDATsetuppars (\a b -> a {_scriptDATsetuppars = b})
scriptDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
scriptDATcustomext = lens _scriptDATcustomext (\a b -> a {_scriptDATcustomext = b})
scriptDATlanguage :: Lens' DAT (Maybe (Tree Int))
scriptDATlanguage = lens _scriptDATlanguage (\a b -> a {_scriptDATlanguage = b})
scriptDATextension :: Lens' DAT (Maybe (Tree Int))
scriptDATextension = lens _scriptDATextension (\a b -> a {_scriptDATextension = b})
scriptDATwordwrap :: Lens' DAT (Maybe (Tree Int))
scriptDATwordwrap = lens _scriptDATwordwrap (\a b -> a {_scriptDATwordwrap = b})
scriptDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
scriptDATcallbacks = lens _scriptDATcallbacks (\a b -> a {_scriptDATcallbacks = b})

nullDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
nullDATcustomext = lens _nullDATcustomext (\a b -> a {_nullDATcustomext = b})
nullDATlanguage :: Lens' DAT (Maybe (Tree Int))
nullDATlanguage = lens _nullDATlanguage (\a b -> a {_nullDATlanguage = b})
nullDATextension :: Lens' DAT (Maybe (Tree Int))
nullDATextension = lens _nullDATextension (\a b -> a {_nullDATextension = b})
nullDATwordwrap :: Lens' DAT (Maybe (Tree Int))
nullDATwordwrap = lens _nullDATwordwrap (\a b -> a {_nullDATwordwrap = b})

reorderDATdelete :: Lens' DAT (Maybe (Tree Bool))
reorderDATdelete = lens _reorderDATdelete (\a b -> a {_reorderDATdelete = b})
reorderDATorder :: Lens' DAT (Maybe (Tree ByteString))
reorderDATorder = lens _reorderDATorder (\a b -> a {_reorderDATorder = b})
reorderDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
reorderDATcustomext = lens _reorderDATcustomext (\a b -> a {_reorderDATcustomext = b})
reorderDATlanguage :: Lens' DAT (Maybe (Tree Int))
reorderDATlanguage = lens _reorderDATlanguage (\a b -> a {_reorderDATlanguage = b})
reorderDATextension :: Lens' DAT (Maybe (Tree Int))
reorderDATextension = lens _reorderDATextension (\a b -> a {_reorderDATextension = b})
reorderDATwordwrap :: Lens' DAT (Maybe (Tree Int))
reorderDATwordwrap = lens _reorderDATwordwrap (\a b -> a {_reorderDATwordwrap = b})
reorderDATmethod :: Lens' DAT (Maybe (Tree Int))
reorderDATmethod = lens _reorderDATmethod (\a b -> a {_reorderDATmethod = b})
reorderDATafter :: Lens' DAT (Maybe (Tree ByteString))
reorderDATafter = lens _reorderDATafter (\a b -> a {_reorderDATafter = b})
reorderDATreorder :: Lens' DAT (Maybe (Tree Int))
reorderDATreorder = lens _reorderDATreorder (\a b -> a {_reorderDATreorder = b})
reorderDATbefore :: Lens' DAT (Maybe (Tree ByteString))
reorderDATbefore = lens _reorderDATbefore (\a b -> a {_reorderDATbefore = b})

errorDATtype :: Lens' DAT (Maybe (Tree ByteString))
errorDATtype = lens _errorDATtype (\a b -> a {_errorDATtype = b})
errorDATactive :: Lens' DAT (Maybe (Tree Bool))
errorDATactive = lens _errorDATactive (\a b -> a {_errorDATactive = b})
errorDATextension :: Lens' DAT (Maybe (Tree Int))
errorDATextension = lens _errorDATextension (\a b -> a {_errorDATextension = b})
errorDATwordwrap :: Lens' DAT (Maybe (Tree Int))
errorDATwordwrap = lens _errorDATwordwrap (\a b -> a {_errorDATwordwrap = b})
errorDATlogcurrent :: Lens' DAT (Maybe (Tree Bool))
errorDATlogcurrent = lens _errorDATlogcurrent (\a b -> a {_errorDATlogcurrent = b})
errorDATclamp :: Lens' DAT (Maybe (Tree Bool))
errorDATclamp = lens _errorDATclamp (\a b -> a {_errorDATclamp = b})
errorDATlanguage :: Lens' DAT (Maybe (Tree Int))
errorDATlanguage = lens _errorDATlanguage (\a b -> a {_errorDATlanguage = b})
errorDATmaxlines :: Lens' DAT (Maybe (Tree Int))
errorDATmaxlines = lens _errorDATmaxlines (\a b -> a {_errorDATmaxlines = b})
errorDATmessage :: Lens' DAT (Maybe (Tree ByteString))
errorDATmessage = lens _errorDATmessage (\a b -> a {_errorDATmessage = b})
errorDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
errorDATexecuteloc = lens _errorDATexecuteloc (\a b -> a {_errorDATexecuteloc = b})
errorDATclear :: Lens' DAT (Maybe (Tree Bool))
errorDATclear = lens _errorDATclear (\a b -> a {_errorDATclear = b})
errorDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
errorDATcallbacks = lens _errorDATcallbacks (\a b -> a {_errorDATcallbacks = b})
errorDATseverity :: Lens' DAT (Maybe (Tree ByteString))
errorDATseverity = lens _errorDATseverity (\a b -> a {_errorDATseverity = b})
errorDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
errorDATcustomext = lens _errorDATcustomext (\a b -> a {_errorDATcustomext = b})
errorDATsource :: Lens' DAT (Maybe (Tree ByteString))
errorDATsource = lens _errorDATsource (\a b -> a {_errorDATsource = b})

opexecuteDATflagchange :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATflagchange = lens _opexecuteDATflagchange (\a b -> a {_opexecuteDATflagchange = b})
opexecuteDATpostcook :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATpostcook = lens _opexecuteDATpostcook (\a b -> a {_opexecuteDATpostcook = b})
opexecuteDATpathchange :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATpathchange = lens _opexecuteDATpathchange (\a b -> a {_opexecuteDATpathchange = b})
opexecuteDATextensionchange :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATextensionchange = lens _opexecuteDATextensionchange (\a b -> a {_opexecuteDATextensionchange = b})
opexecuteDATactive :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATactive = lens _opexecuteDATactive (\a b -> a {_opexecuteDATactive = b})
opexecuteDATextension :: Lens' DAT (Maybe (Tree Int))
opexecuteDATextension = lens _opexecuteDATextension (\a b -> a {_opexecuteDATextension = b})
opexecuteDATcurrentchildchange :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATcurrentchildchange = lens _opexecuteDATcurrentchildchange (\a b -> a {_opexecuteDATcurrentchildchange = b})
opexecuteDATedit :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATedit = lens _opexecuteDATedit (\a b -> a {_opexecuteDATedit = b})
opexecuteDATuichange :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATuichange = lens _opexecuteDATuichange (\a b -> a {_opexecuteDATuichange = b})
opexecuteDATchildrename :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATchildrename = lens _opexecuteDATchildrename (\a b -> a {_opexecuteDATchildrename = b})
opexecuteDATopdelete :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATopdelete = lens _opexecuteDATopdelete (\a b -> a {_opexecuteDATopdelete = b})
opexecuteDATnumchildrenchange :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATnumchildrenchange = lens _opexecuteDATnumchildrenchange (\a b -> a {_opexecuteDATnumchildrenchange = b})
opexecuteDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
opexecuteDATcustomext = lens _opexecuteDATcustomext (\a b -> a {_opexecuteDATcustomext = b})
opexecuteDATwirechange :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATwirechange = lens _opexecuteDATwirechange (\a b -> a {_opexecuteDATwirechange = b})
opexecuteDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
opexecuteDATexecuteloc = lens _opexecuteDATexecuteloc (\a b -> a {_opexecuteDATexecuteloc = b})
opexecuteDATwordwrap :: Lens' DAT (Maybe (Tree Int))
opexecuteDATwordwrap = lens _opexecuteDATwordwrap (\a b -> a {_opexecuteDATwordwrap = b})
opexecuteDATlanguage :: Lens' DAT (Maybe (Tree Int))
opexecuteDATlanguage = lens _opexecuteDATlanguage (\a b -> a {_opexecuteDATlanguage = b})
opexecuteDATnamechange :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATnamechange = lens _opexecuteDATnamechange (\a b -> a {_opexecuteDATnamechange = b})
opexecuteDATprecook :: Lens' DAT (Maybe (Tree Bool))
opexecuteDATprecook = lens _opexecuteDATprecook (\a b -> a {_opexecuteDATprecook = b})

etherdreamDATpoll :: Lens' DAT (Maybe (Tree Bool))
etherdreamDATpoll = lens _etherdreamDATpoll (\a b -> a {_etherdreamDATpoll = b})
etherdreamDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
etherdreamDATcustomext = lens _etherdreamDATcustomext (\a b -> a {_etherdreamDATcustomext = b})
etherdreamDATlanguage :: Lens' DAT (Maybe (Tree Int))
etherdreamDATlanguage = lens _etherdreamDATlanguage (\a b -> a {_etherdreamDATlanguage = b})
etherdreamDATextension :: Lens' DAT (Maybe (Tree Int))
etherdreamDATextension = lens _etherdreamDATextension (\a b -> a {_etherdreamDATextension = b})
etherdreamDATwordwrap :: Lens' DAT (Maybe (Tree Int))
etherdreamDATwordwrap = lens _etherdreamDATwordwrap (\a b -> a {_etherdreamDATwordwrap = b})
etherdreamDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
etherdreamDATcallbacks = lens _etherdreamDATcallbacks (\a b -> a {_etherdreamDATcallbacks = b})
etherdreamDATcolumns :: Lens' DAT (Maybe (Tree ByteString))
etherdreamDATcolumns = lens _etherdreamDATcolumns (\a b -> a {_etherdreamDATcolumns = b})

midiinDATid :: Lens' DAT (Maybe (Tree ByteString))
midiinDATid = lens _midiinDATid (\a b -> a {_midiinDATid = b})
midiinDATindex :: Lens' DAT (Maybe (Tree ByteString))
midiinDATindex = lens _midiinDATindex (\a b -> a {_midiinDATindex = b})
midiinDATbytes :: Lens' DAT (Maybe (Tree Bool))
midiinDATbytes = lens _midiinDATbytes (\a b -> a {_midiinDATbytes = b})
midiinDATclear :: Lens' DAT (Maybe (Tree Bool))
midiinDATclear = lens _midiinDATclear (\a b -> a {_midiinDATclear = b})
midiinDATactive :: Lens' DAT (Maybe (Tree Bool))
midiinDATactive = lens _midiinDATactive (\a b -> a {_midiinDATactive = b})
midiinDATskiptiming :: Lens' DAT (Maybe (Tree Bool))
midiinDATskiptiming = lens _midiinDATskiptiming (\a b -> a {_midiinDATskiptiming = b})
midiinDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
midiinDATcustomext = lens _midiinDATcustomext (\a b -> a {_midiinDATcustomext = b})
midiinDATvalue :: Lens' DAT (Maybe (Tree ByteString))
midiinDATvalue = lens _midiinDATvalue (\a b -> a {_midiinDATvalue = b})
midiinDATclamp :: Lens' DAT (Maybe (Tree Bool))
midiinDATclamp = lens _midiinDATclamp (\a b -> a {_midiinDATclamp = b})
midiinDATchannel :: Lens' DAT (Maybe (Tree ByteString))
midiinDATchannel = lens _midiinDATchannel (\a b -> a {_midiinDATchannel = b})
midiinDATlanguage :: Lens' DAT (Maybe (Tree Int))
midiinDATlanguage = lens _midiinDATlanguage (\a b -> a {_midiinDATlanguage = b})
midiinDATdevice :: Lens' DAT (Maybe (Tree DAT))
midiinDATdevice = lens _midiinDATdevice (\a b -> a {_midiinDATdevice = b})
midiinDATmessage :: Lens' DAT (Maybe (Tree ByteString))
midiinDATmessage = lens _midiinDATmessage (\a b -> a {_midiinDATmessage = b})
midiinDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
midiinDATexecuteloc = lens _midiinDATexecuteloc (\a b -> a {_midiinDATexecuteloc = b})
midiinDATwordwrap :: Lens' DAT (Maybe (Tree Int))
midiinDATwordwrap = lens _midiinDATwordwrap (\a b -> a {_midiinDATwordwrap = b})
midiinDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
midiinDATcallbacks = lens _midiinDATcallbacks (\a b -> a {_midiinDATcallbacks = b})
midiinDATmaxlines :: Lens' DAT (Maybe (Tree Int))
midiinDATmaxlines = lens _midiinDATmaxlines (\a b -> a {_midiinDATmaxlines = b})
midiinDATskipsense :: Lens' DAT (Maybe (Tree Bool))
midiinDATskipsense = lens _midiinDATskipsense (\a b -> a {_midiinDATskipsense = b})
midiinDATextension :: Lens' DAT (Maybe (Tree Int))
midiinDATextension = lens _midiinDATextension (\a b -> a {_midiinDATextension = b})
midiinDATfilter :: Lens' DAT (Maybe (Tree Bool))
midiinDATfilter = lens _midiinDATfilter (\a b -> a {_midiinDATfilter = b})

selectDATcolexpr :: Lens' DAT (Maybe (Tree ByteString))
selectDATcolexpr = lens _selectDATcolexpr (\a b -> a {_selectDATcolexpr = b})
selectDATfromcol :: Lens' DAT (Maybe (Tree Int))
selectDATfromcol = lens _selectDATfromcol (\a b -> a {_selectDATfromcol = b})
selectDATrowindexstart :: Lens' DAT (Maybe (Tree Int))
selectDATrowindexstart = lens _selectDATrowindexstart (\a b -> a {_selectDATrowindexstart = b})
selectDATrownameend :: Lens' DAT (Maybe (Tree ByteString))
selectDATrownameend = lens _selectDATrownameend (\a b -> a {_selectDATrownameend = b})
selectDATfirstrow :: Lens' DAT (Maybe (Tree Bool))
selectDATfirstrow = lens _selectDATfirstrow (\a b -> a {_selectDATfirstrow = b})
selectDATcolnamestart :: Lens' DAT (Maybe (Tree ByteString))
selectDATcolnamestart = lens _selectDATcolnamestart (\a b -> a {_selectDATcolnamestart = b})
selectDATfromrow :: Lens' DAT (Maybe (Tree Int))
selectDATfromrow = lens _selectDATfromrow (\a b -> a {_selectDATfromrow = b})
selectDATrowexpr :: Lens' DAT (Maybe (Tree ByteString))
selectDATrowexpr = lens _selectDATrowexpr (\a b -> a {_selectDATrowexpr = b})
selectDATrownamestart :: Lens' DAT (Maybe (Tree ByteString))
selectDATrownamestart = lens _selectDATrownamestart (\a b -> a {_selectDATrownamestart = b})
selectDATrowindexend :: Lens' DAT (Maybe (Tree Int))
selectDATrowindexend = lens _selectDATrowindexend (\a b -> a {_selectDATrowindexend = b})
selectDAToutput :: Lens' DAT (Maybe (Tree Int))
selectDAToutput = lens _selectDAToutput (\a b -> a {_selectDAToutput = b})
selectDATextractrows :: Lens' DAT (Maybe (Tree Int))
selectDATextractrows = lens _selectDATextractrows (\a b -> a {_selectDATextractrows = b})
selectDATextension :: Lens' DAT (Maybe (Tree Int))
selectDATextension = lens _selectDATextension (\a b -> a {_selectDATextension = b})
selectDATcolindexend :: Lens' DAT (Maybe (Tree Int))
selectDATcolindexend = lens _selectDATcolindexend (\a b -> a {_selectDATcolindexend = b})
selectDATrownames :: Lens' DAT (Maybe (Tree ByteString))
selectDATrownames = lens _selectDATrownames (\a b -> a {_selectDATrownames = b})
selectDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
selectDATcustomext = lens _selectDATcustomext (\a b -> a {_selectDATcustomext = b})
selectDATlanguage :: Lens' DAT (Maybe (Tree Int))
selectDATlanguage = lens _selectDATlanguage (\a b -> a {_selectDATlanguage = b})
selectDATextractcols :: Lens' DAT (Maybe (Tree Int))
selectDATextractcols = lens _selectDATextractcols (\a b -> a {_selectDATextractcols = b})
selectDATwordwrap :: Lens' DAT (Maybe (Tree Int))
selectDATwordwrap = lens _selectDATwordwrap (\a b -> a {_selectDATwordwrap = b})
selectDATcolnameend :: Lens' DAT (Maybe (Tree ByteString))
selectDATcolnameend = lens _selectDATcolnameend (\a b -> a {_selectDATcolnameend = b})
selectDATdat :: Lens' DAT (Maybe (Tree DAT))
selectDATdat = lens _selectDATdat (\a b -> a {_selectDATdat = b})
selectDATfirstcol :: Lens' DAT (Maybe (Tree Bool))
selectDATfirstcol = lens _selectDATfirstcol (\a b -> a {_selectDATfirstcol = b})
selectDATcolindexstart :: Lens' DAT (Maybe (Tree Int))
selectDATcolindexstart = lens _selectDATcolindexstart (\a b -> a {_selectDATcolindexstart = b})
selectDATcolnames :: Lens' DAT (Maybe (Tree ByteString))
selectDATcolnames = lens _selectDATcolnames (\a b -> a {_selectDATcolnames = b})

fileoutDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
fileoutDATcustomext = lens _fileoutDATcustomext (\a b -> a {_fileoutDATcustomext = b})
fileoutDATlanguage :: Lens' DAT (Maybe (Tree Int))
fileoutDATlanguage = lens _fileoutDATlanguage (\a b -> a {_fileoutDATlanguage = b})
fileoutDATfile :: Lens' DAT (Maybe (Tree ByteString))
fileoutDATfile = lens _fileoutDATfile (\a b -> a {_fileoutDATfile = b})
fileoutDATextension :: Lens' DAT (Maybe (Tree Int))
fileoutDATextension = lens _fileoutDATextension (\a b -> a {_fileoutDATextension = b})
fileoutDATwordwrap :: Lens' DAT (Maybe (Tree Int))
fileoutDATwordwrap = lens _fileoutDATwordwrap (\a b -> a {_fileoutDATwordwrap = b})
fileoutDATappend :: Lens' DAT (Maybe (Tree Bool))
fileoutDATappend = lens _fileoutDATappend (\a b -> a {_fileoutDATappend = b})
fileoutDATn :: Lens' DAT (Maybe (Tree Int))
fileoutDATn = lens _fileoutDATn (\a b -> a {_fileoutDATn = b})
fileoutDATwrite :: Lens' DAT (Maybe (Tree Bool))
fileoutDATwrite = lens _fileoutDATwrite (\a b -> a {_fileoutDATwrite = b})

oscoutDATbundletimestamp :: Lens' DAT (Maybe (Tree Bool))
oscoutDATbundletimestamp = lens _oscoutDATbundletimestamp (\a b -> a {_oscoutDATbundletimestamp = b})
oscoutDATport :: Lens' DAT (Maybe (Tree Int))
oscoutDATport = lens _oscoutDATport (\a b -> a {_oscoutDATport = b})
oscoutDATclear :: Lens' DAT (Maybe (Tree Bool))
oscoutDATclear = lens _oscoutDATclear (\a b -> a {_oscoutDATclear = b})
oscoutDATactive :: Lens' DAT (Maybe (Tree Bool))
oscoutDATactive = lens _oscoutDATactive (\a b -> a {_oscoutDATactive = b})
oscoutDATextension :: Lens' DAT (Maybe (Tree Int))
oscoutDATextension = lens _oscoutDATextension (\a b -> a {_oscoutDATextension = b})
oscoutDATprotocol :: Lens' DAT (Maybe (Tree Int))
oscoutDATprotocol = lens _oscoutDATprotocol (\a b -> a {_oscoutDATprotocol = b})
oscoutDATsplitmessage :: Lens' DAT (Maybe (Tree Bool))
oscoutDATsplitmessage = lens _oscoutDATsplitmessage (\a b -> a {_oscoutDATsplitmessage = b})
oscoutDATaddress :: Lens' DAT (Maybe (Tree ByteString))
oscoutDATaddress = lens _oscoutDATaddress (\a b -> a {_oscoutDATaddress = b})
oscoutDATshared :: Lens' DAT (Maybe (Tree Bool))
oscoutDATshared = lens _oscoutDATshared (\a b -> a {_oscoutDATshared = b})
oscoutDATclamp :: Lens' DAT (Maybe (Tree Bool))
oscoutDATclamp = lens _oscoutDATclamp (\a b -> a {_oscoutDATclamp = b})
oscoutDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
oscoutDATcustomext = lens _oscoutDATcustomext (\a b -> a {_oscoutDATcustomext = b})
oscoutDATmaxlines :: Lens' DAT (Maybe (Tree Int))
oscoutDATmaxlines = lens _oscoutDATmaxlines (\a b -> a {_oscoutDATmaxlines = b})
oscoutDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
oscoutDATexecuteloc = lens _oscoutDATexecuteloc (\a b -> a {_oscoutDATexecuteloc = b})
oscoutDATwordwrap :: Lens' DAT (Maybe (Tree Int))
oscoutDATwordwrap = lens _oscoutDATwordwrap (\a b -> a {_oscoutDATwordwrap = b})
oscoutDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
oscoutDATcallbacks = lens _oscoutDATcallbacks (\a b -> a {_oscoutDATcallbacks = b})
oscoutDATlanguage :: Lens' DAT (Maybe (Tree Int))
oscoutDATlanguage = lens _oscoutDATlanguage (\a b -> a {_oscoutDATlanguage = b})
oscoutDATtypetag :: Lens' DAT (Maybe (Tree Bool))
oscoutDATtypetag = lens _oscoutDATtypetag (\a b -> a {_oscoutDATtypetag = b})
oscoutDATaddscope :: Lens' DAT (Maybe (Tree ByteString))
oscoutDATaddscope = lens _oscoutDATaddscope (\a b -> a {_oscoutDATaddscope = b})
oscoutDATsplitbundle :: Lens' DAT (Maybe (Tree Bool))
oscoutDATsplitbundle = lens _oscoutDATsplitbundle (\a b -> a {_oscoutDATsplitbundle = b})
oscoutDATbytes :: Lens' DAT (Maybe (Tree Bool))
oscoutDATbytes = lens _oscoutDATbytes (\a b -> a {_oscoutDATbytes = b})

midieventDATindex :: Lens' DAT (Maybe (Tree ByteString))
midieventDATindex = lens _midieventDATindex (\a b -> a {_midieventDATindex = b})
midieventDATbytes :: Lens' DAT (Maybe (Tree Bool))
midieventDATbytes = lens _midieventDATbytes (\a b -> a {_midieventDATbytes = b})
midieventDATclear :: Lens' DAT (Maybe (Tree Bool))
midieventDATclear = lens _midieventDATclear (\a b -> a {_midieventDATclear = b})
midieventDATfilter :: Lens' DAT (Maybe (Tree Bool))
midieventDATfilter = lens _midieventDATfilter (\a b -> a {_midieventDATfilter = b})
midieventDATskiptiming :: Lens' DAT (Maybe (Tree Bool))
midieventDATskiptiming = lens _midieventDATskiptiming (\a b -> a {_midieventDATskiptiming = b})
midieventDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
midieventDATcustomext = lens _midieventDATcustomext (\a b -> a {_midieventDATcustomext = b})
midieventDATvalue :: Lens' DAT (Maybe (Tree ByteString))
midieventDATvalue = lens _midieventDATvalue (\a b -> a {_midieventDATvalue = b})
midieventDATclamp :: Lens' DAT (Maybe (Tree Bool))
midieventDATclamp = lens _midieventDATclamp (\a b -> a {_midieventDATclamp = b})
midieventDATchannel :: Lens' DAT (Maybe (Tree ByteString))
midieventDATchannel = lens _midieventDATchannel (\a b -> a {_midieventDATchannel = b})
midieventDATlanguage :: Lens' DAT (Maybe (Tree Int))
midieventDATlanguage = lens _midieventDATlanguage (\a b -> a {_midieventDATlanguage = b})
midieventDATmaxlines :: Lens' DAT (Maybe (Tree Int))
midieventDATmaxlines = lens _midieventDATmaxlines (\a b -> a {_midieventDATmaxlines = b})
midieventDATmessage :: Lens' DAT (Maybe (Tree ByteString))
midieventDATmessage = lens _midieventDATmessage (\a b -> a {_midieventDATmessage = b})
midieventDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
midieventDATexecuteloc = lens _midieventDATexecuteloc (\a b -> a {_midieventDATexecuteloc = b})
midieventDATwordwrap :: Lens' DAT (Maybe (Tree Int))
midieventDATwordwrap = lens _midieventDATwordwrap (\a b -> a {_midieventDATwordwrap = b})
midieventDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
midieventDATcallbacks = lens _midieventDATcallbacks (\a b -> a {_midieventDATcallbacks = b})
midieventDATdir :: Lens' DAT (Maybe (Tree ByteString))
midieventDATdir = lens _midieventDATdir (\a b -> a {_midieventDATdir = b})
midieventDATskipsense :: Lens' DAT (Maybe (Tree Bool))
midieventDATskipsense = lens _midieventDATskipsense (\a b -> a {_midieventDATskipsense = b})
midieventDATextension :: Lens' DAT (Maybe (Tree Int))
midieventDATextension = lens _midieventDATextension (\a b -> a {_midieventDATextension = b})
midieventDATactive :: Lens' DAT (Maybe (Tree Bool))
midieventDATactive = lens _midieventDATactive (\a b -> a {_midieventDATactive = b})

artnetDATpoll :: Lens' DAT (Maybe (Tree Bool))
artnetDATpoll = lens _artnetDATpoll (\a b -> a {_artnetDATpoll = b})
artnetDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
artnetDATcustomext = lens _artnetDATcustomext (\a b -> a {_artnetDATcustomext = b})
artnetDATlanguage :: Lens' DAT (Maybe (Tree Int))
artnetDATlanguage = lens _artnetDATlanguage (\a b -> a {_artnetDATlanguage = b})
artnetDATextension :: Lens' DAT (Maybe (Tree Int))
artnetDATextension = lens _artnetDATextension (\a b -> a {_artnetDATextension = b})
artnetDATwordwrap :: Lens' DAT (Maybe (Tree Int))
artnetDATwordwrap = lens _artnetDATwordwrap (\a b -> a {_artnetDATwordwrap = b})
artnetDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
artnetDATcallbacks = lens _artnetDATcallbacks (\a b -> a {_artnetDATcallbacks = b})
artnetDATcolumns :: Lens' DAT (Maybe (Tree ByteString))
artnetDATcolumns = lens _artnetDATcolumns (\a b -> a {_artnetDATcolumns = b})

substituteDATexpandto :: Lens' DAT (Maybe (Tree Bool))
substituteDATexpandto = lens _substituteDATexpandto (\a b -> a {_substituteDATexpandto = b})
substituteDATcolexpr :: Lens' DAT (Maybe (Tree ByteString))
substituteDATcolexpr = lens _substituteDATcolexpr (\a b -> a {_substituteDATcolexpr = b})
substituteDATfromcol :: Lens' DAT (Maybe (Tree Int))
substituteDATfromcol = lens _substituteDATfromcol (\a b -> a {_substituteDATfromcol = b})
substituteDATrowindexstart :: Lens' DAT (Maybe (Tree Int))
substituteDATrowindexstart = lens _substituteDATrowindexstart (\a b -> a {_substituteDATrowindexstart = b})
substituteDATrownameend :: Lens' DAT (Maybe (Tree ByteString))
substituteDATrownameend = lens _substituteDATrownameend (\a b -> a {_substituteDATrownameend = b})
substituteDATbefore :: Lens' DAT (Maybe (Tree ByteString))
substituteDATbefore = lens _substituteDATbefore (\a b -> a {_substituteDATbefore = b})
substituteDATcolnamestart :: Lens' DAT (Maybe (Tree ByteString))
substituteDATcolnamestart = lens _substituteDATcolnamestart (\a b -> a {_substituteDATcolnamestart = b})
substituteDATfromrow :: Lens' DAT (Maybe (Tree Int))
substituteDATfromrow = lens _substituteDATfromrow (\a b -> a {_substituteDATfromrow = b})
substituteDATrowexpr :: Lens' DAT (Maybe (Tree ByteString))
substituteDATrowexpr = lens _substituteDATrowexpr (\a b -> a {_substituteDATrowexpr = b})
substituteDATrownamestart :: Lens' DAT (Maybe (Tree ByteString))
substituteDATrownamestart = lens _substituteDATrownamestart (\a b -> a {_substituteDATrownamestart = b})
substituteDATfirst :: Lens' DAT (Maybe (Tree Bool))
substituteDATfirst = lens _substituteDATfirst (\a b -> a {_substituteDATfirst = b})
substituteDATrowindexend :: Lens' DAT (Maybe (Tree Int))
substituteDATrowindexend = lens _substituteDATrowindexend (\a b -> a {_substituteDATrowindexend = b})
substituteDATcolnames :: Lens' DAT (Maybe (Tree ByteString))
substituteDATcolnames = lens _substituteDATcolnames (\a b -> a {_substituteDATcolnames = b})
substituteDATexpand :: Lens' DAT (Maybe (Tree Bool))
substituteDATexpand = lens _substituteDATexpand (\a b -> a {_substituteDATexpand = b})
substituteDATcase :: Lens' DAT (Maybe (Tree Bool))
substituteDATcase = lens _substituteDATcase (\a b -> a {_substituteDATcase = b})
substituteDATextractrows :: Lens' DAT (Maybe (Tree Int))
substituteDATextractrows = lens _substituteDATextractrows (\a b -> a {_substituteDATextractrows = b})
substituteDATextension :: Lens' DAT (Maybe (Tree Int))
substituteDATextension = lens _substituteDATextension (\a b -> a {_substituteDATextension = b})
substituteDATcolindexend :: Lens' DAT (Maybe (Tree Int))
substituteDATcolindexend = lens _substituteDATcolindexend (\a b -> a {_substituteDATcolindexend = b})
substituteDATrownames :: Lens' DAT (Maybe (Tree ByteString))
substituteDATrownames = lens _substituteDATrownames (\a b -> a {_substituteDATrownames = b})
substituteDATmatch :: Lens' DAT (Maybe (Tree Int))
substituteDATmatch = lens _substituteDATmatch (\a b -> a {_substituteDATmatch = b})
substituteDATxfirstrow :: Lens' DAT (Maybe (Tree Bool))
substituteDATxfirstrow = lens _substituteDATxfirstrow (\a b -> a {_substituteDATxfirstrow = b})
substituteDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
substituteDATcustomext = lens _substituteDATcustomext (\a b -> a {_substituteDATcustomext = b})
substituteDATlanguage :: Lens' DAT (Maybe (Tree Int))
substituteDATlanguage = lens _substituteDATlanguage (\a b -> a {_substituteDATlanguage = b})
substituteDATxfirstcol :: Lens' DAT (Maybe (Tree Bool))
substituteDATxfirstcol = lens _substituteDATxfirstcol (\a b -> a {_substituteDATxfirstcol = b})
substituteDATwordwrap :: Lens' DAT (Maybe (Tree Int))
substituteDATwordwrap = lens _substituteDATwordwrap (\a b -> a {_substituteDATwordwrap = b})
substituteDATcolnameend :: Lens' DAT (Maybe (Tree ByteString))
substituteDATcolnameend = lens _substituteDATcolnameend (\a b -> a {_substituteDATcolnameend = b})
substituteDATafter :: Lens' DAT (Maybe (Tree ByteString))
substituteDATafter = lens _substituteDATafter (\a b -> a {_substituteDATafter = b})
substituteDATcolindexstart :: Lens' DAT (Maybe (Tree Int))
substituteDATcolindexstart = lens _substituteDATcolindexstart (\a b -> a {_substituteDATcolindexstart = b})
substituteDATextractcols :: Lens' DAT (Maybe (Tree Int))
substituteDATextractcols = lens _substituteDATextractcols (\a b -> a {_substituteDATextractcols = b})

sortDATindex :: Lens' DAT (Maybe (Tree Int))
sortDATindex = lens _sortDATindex (\a b -> a {_sortDATindex = b})
sortDATextension :: Lens' DAT (Maybe (Tree Int))
sortDATextension = lens _sortDATextension (\a b -> a {_sortDATextension = b})
sortDATreverse :: Lens' DAT (Maybe (Tree Bool))
sortDATreverse = lens _sortDATreverse (\a b -> a {_sortDATreverse = b})
sortDATpreservefirst :: Lens' DAT (Maybe (Tree Bool))
sortDATpreservefirst = lens _sortDATpreservefirst (\a b -> a {_sortDATpreservefirst = b})
sortDATunique :: Lens' DAT (Maybe (Tree Int))
sortDATunique = lens _sortDATunique (\a b -> a {_sortDATunique = b})
sortDATname :: Lens' DAT (Maybe (Tree ByteString))
sortDATname = lens _sortDATname (\a b -> a {_sortDATname = b})
sortDATignorecase :: Lens' DAT (Maybe (Tree Bool))
sortDATignorecase = lens _sortDATignorecase (\a b -> a {_sortDATignorecase = b})
sortDATseed :: Lens' DAT (Maybe (Tree Float))
sortDATseed = lens _sortDATseed (\a b -> a {_sortDATseed = b})
sortDATlanguage :: Lens' DAT (Maybe (Tree Int))
sortDATlanguage = lens _sortDATlanguage (\a b -> a {_sortDATlanguage = b})
sortDATsortmethod :: Lens' DAT (Maybe (Tree Int))
sortDATsortmethod = lens _sortDATsortmethod (\a b -> a {_sortDATsortmethod = b})
sortDATwordwrap :: Lens' DAT (Maybe (Tree Int))
sortDATwordwrap = lens _sortDATwordwrap (\a b -> a {_sortDATwordwrap = b})
sortDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
sortDATcustomext = lens _sortDATcustomext (\a b -> a {_sortDATcustomext = b})
sortDATorder :: Lens' DAT (Maybe (Tree Int))
sortDATorder = lens _sortDATorder (\a b -> a {_sortDATorder = b})

keyboardinDATpanels :: Lens' DAT (Maybe (Tree COMP))
keyboardinDATpanels = lens _keyboardinDATpanels (\a b -> a {_keyboardinDATpanels = b})
keyboardinDATkeys :: Lens' DAT (Maybe (Tree ByteString))
keyboardinDATkeys = lens _keyboardinDATkeys (\a b -> a {_keyboardinDATkeys = b})
keyboardinDATclear :: Lens' DAT (Maybe (Tree Bool))
keyboardinDATclear = lens _keyboardinDATclear (\a b -> a {_keyboardinDATclear = b})
keyboardinDATactive :: Lens' DAT (Maybe (Tree Bool))
keyboardinDATactive = lens _keyboardinDATactive (\a b -> a {_keyboardinDATactive = b})
keyboardinDATextension :: Lens' DAT (Maybe (Tree Int))
keyboardinDATextension = lens _keyboardinDATextension (\a b -> a {_keyboardinDATextension = b})
keyboardinDATclamp :: Lens' DAT (Maybe (Tree Bool))
keyboardinDATclamp = lens _keyboardinDATclamp (\a b -> a {_keyboardinDATclamp = b})
keyboardinDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
keyboardinDATcustomext = lens _keyboardinDATcustomext (\a b -> a {_keyboardinDATcustomext = b})
keyboardinDATmaxlines :: Lens' DAT (Maybe (Tree Int))
keyboardinDATmaxlines = lens _keyboardinDATmaxlines (\a b -> a {_keyboardinDATmaxlines = b})
keyboardinDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
keyboardinDATexecuteloc = lens _keyboardinDATexecuteloc (\a b -> a {_keyboardinDATexecuteloc = b})
keyboardinDATwordwrap :: Lens' DAT (Maybe (Tree Int))
keyboardinDATwordwrap = lens _keyboardinDATwordwrap (\a b -> a {_keyboardinDATwordwrap = b})
keyboardinDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
keyboardinDATcallbacks = lens _keyboardinDATcallbacks (\a b -> a {_keyboardinDATcallbacks = b})
keyboardinDATlanguage :: Lens' DAT (Maybe (Tree Int))
keyboardinDATlanguage = lens _keyboardinDATlanguage (\a b -> a {_keyboardinDATlanguage = b})
keyboardinDATshortcuts :: Lens' DAT (Maybe (Tree ByteString))
keyboardinDATshortcuts = lens _keyboardinDATshortcuts (\a b -> a {_keyboardinDATshortcuts = b})
keyboardinDATlrmodifiers :: Lens' DAT (Maybe (Tree Bool))
keyboardinDATlrmodifiers = lens _keyboardinDATlrmodifiers (\a b -> a {_keyboardinDATlrmodifiers = b})
keyboardinDATperform :: Lens' DAT (Maybe (Tree Bool))
keyboardinDATperform = lens _keyboardinDATperform (\a b -> a {_keyboardinDATperform = b})

parameterexecuteDATexpressionchange :: Lens' DAT (Maybe (Tree Bool))
parameterexecuteDATexpressionchange = lens _parameterexecuteDATexpressionchange (\a b -> a {_parameterexecuteDATexpressionchange = b})
parameterexecuteDATmodechange :: Lens' DAT (Maybe (Tree Bool))
parameterexecuteDATmodechange = lens _parameterexecuteDATmodechange (\a b -> a {_parameterexecuteDATmodechange = b})
parameterexecuteDATvaluechange :: Lens' DAT (Maybe (Tree Bool))
parameterexecuteDATvaluechange = lens _parameterexecuteDATvaluechange (\a b -> a {_parameterexecuteDATvaluechange = b})
parameterexecuteDATactive :: Lens' DAT (Maybe (Tree Bool))
parameterexecuteDATactive = lens _parameterexecuteDATactive (\a b -> a {_parameterexecuteDATactive = b})
parameterexecuteDATextension :: Lens' DAT (Maybe (Tree Int))
parameterexecuteDATextension = lens _parameterexecuteDATextension (\a b -> a {_parameterexecuteDATextension = b})
parameterexecuteDATonpulse :: Lens' DAT (Maybe (Tree Bool))
parameterexecuteDATonpulse = lens _parameterexecuteDATonpulse (\a b -> a {_parameterexecuteDATonpulse = b})
parameterexecuteDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
parameterexecuteDATcustomext = lens _parameterexecuteDATcustomext (\a b -> a {_parameterexecuteDATcustomext = b})
parameterexecuteDATedit :: Lens' DAT (Maybe (Tree Bool))
parameterexecuteDATedit = lens _parameterexecuteDATedit (\a b -> a {_parameterexecuteDATedit = b})
parameterexecuteDATpars :: Lens' DAT (Maybe (Tree ByteString))
parameterexecuteDATpars = lens _parameterexecuteDATpars (\a b -> a {_parameterexecuteDATpars = b})
parameterexecuteDATenablechange :: Lens' DAT (Maybe (Tree Bool))
parameterexecuteDATenablechange = lens _parameterexecuteDATenablechange (\a b -> a {_parameterexecuteDATenablechange = b})
parameterexecuteDATcustom :: Lens' DAT (Maybe (Tree Bool))
parameterexecuteDATcustom = lens _parameterexecuteDATcustom (\a b -> a {_parameterexecuteDATcustom = b})
parameterexecuteDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
parameterexecuteDATexecuteloc = lens _parameterexecuteDATexecuteloc (\a b -> a {_parameterexecuteDATexecuteloc = b})
parameterexecuteDATwordwrap :: Lens' DAT (Maybe (Tree Int))
parameterexecuteDATwordwrap = lens _parameterexecuteDATwordwrap (\a b -> a {_parameterexecuteDATwordwrap = b})
parameterexecuteDATbuiltin :: Lens' DAT (Maybe (Tree Bool))
parameterexecuteDATbuiltin = lens _parameterexecuteDATbuiltin (\a b -> a {_parameterexecuteDATbuiltin = b})
parameterexecuteDATlanguage :: Lens' DAT (Maybe (Tree Int))
parameterexecuteDATlanguage = lens _parameterexecuteDATlanguage (\a b -> a {_parameterexecuteDATlanguage = b})
parameterexecuteDATexportchange :: Lens' DAT (Maybe (Tree Bool))
parameterexecuteDATexportchange = lens _parameterexecuteDATexportchange (\a b -> a {_parameterexecuteDATexportchange = b})

fifoDATclamp :: Lens' DAT (Maybe (Tree Bool))
fifoDATclamp = lens _fifoDATclamp (\a b -> a {_fifoDATclamp = b})
fifoDATlanguage :: Lens' DAT (Maybe (Tree Int))
fifoDATlanguage = lens _fifoDATlanguage (\a b -> a {_fifoDATlanguage = b})
fifoDATmaxlines :: Lens' DAT (Maybe (Tree Int))
fifoDATmaxlines = lens _fifoDATmaxlines (\a b -> a {_fifoDATmaxlines = b})
fifoDATextension :: Lens' DAT (Maybe (Tree Int))
fifoDATextension = lens _fifoDATextension (\a b -> a {_fifoDATextension = b})
fifoDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
fifoDATexecuteloc = lens _fifoDATexecuteloc (\a b -> a {_fifoDATexecuteloc = b})
fifoDATwordwrap :: Lens' DAT (Maybe (Tree Int))
fifoDATwordwrap = lens _fifoDATwordwrap (\a b -> a {_fifoDATwordwrap = b})
fifoDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
fifoDATcallbacks = lens _fifoDATcallbacks (\a b -> a {_fifoDATcallbacks = b})
fifoDATclear :: Lens' DAT (Maybe (Tree Bool))
fifoDATclear = lens _fifoDATclear (\a b -> a {_fifoDATclear = b})
fifoDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
fifoDATcustomext = lens _fifoDATcustomext (\a b -> a {_fifoDATcustomext = b})
fifoDATfirstrow :: Lens' DAT (Maybe (Tree Bool))
fifoDATfirstrow = lens _fifoDATfirstrow (\a b -> a {_fifoDATfirstrow = b})

multitouchinDATminrows :: Lens' DAT (Maybe (Tree Int))
multitouchinDATminrows = lens _multitouchinDATminrows (\a b -> a {_multitouchinDATminrows = b})
multitouchinDATwordwrap :: Lens' DAT (Maybe (Tree Int))
multitouchinDATwordwrap = lens _multitouchinDATwordwrap (\a b -> a {_multitouchinDATwordwrap = b})
multitouchinDATrelativeid :: Lens' DAT (Maybe (Tree Bool))
multitouchinDATrelativeid = lens _multitouchinDATrelativeid (\a b -> a {_multitouchinDATrelativeid = b})
multitouchinDATactive :: Lens' DAT (Maybe (Tree Bool))
multitouchinDATactive = lens _multitouchinDATactive (\a b -> a {_multitouchinDATactive = b})
multitouchinDATdoubleclickthresh :: Lens' DAT (Maybe (Tree Float))
multitouchinDATdoubleclickthresh = lens _multitouchinDATdoubleclickthresh (\a b -> a {_multitouchinDATdoubleclickthresh = b})
multitouchinDATclamp :: Lens' DAT (Maybe (Tree Bool))
multitouchinDATclamp = lens _multitouchinDATclamp (\a b -> a {_multitouchinDATclamp = b})
multitouchinDATextension :: Lens' DAT (Maybe (Tree Int))
multitouchinDATextension = lens _multitouchinDATextension (\a b -> a {_multitouchinDATextension = b})
multitouchinDATcontactthresh :: Lens' DAT (Maybe (Tree Float))
multitouchinDATcontactthresh = lens _multitouchinDATcontactthresh (\a b -> a {_multitouchinDATcontactthresh = b})
multitouchinDAToutputtype :: Lens' DAT (Maybe (Tree Int))
multitouchinDAToutputtype = lens _multitouchinDAToutputtype (\a b -> a {_multitouchinDAToutputtype = b})
multitouchinDATposthresh :: Lens' DAT (Maybe (Tree Float))
multitouchinDATposthresh = lens _multitouchinDATposthresh (\a b -> a {_multitouchinDATposthresh = b})
multitouchinDATmouse :: Lens' DAT (Maybe (Tree Bool))
multitouchinDATmouse = lens _multitouchinDATmouse (\a b -> a {_multitouchinDATmouse = b})
multitouchinDATlanguage :: Lens' DAT (Maybe (Tree Int))
multitouchinDATlanguage = lens _multitouchinDATlanguage (\a b -> a {_multitouchinDATlanguage = b})
multitouchinDATmaxlines :: Lens' DAT (Maybe (Tree Int))
multitouchinDATmaxlines = lens _multitouchinDATmaxlines (\a b -> a {_multitouchinDATmaxlines = b})
multitouchinDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
multitouchinDATexecuteloc = lens _multitouchinDATexecuteloc (\a b -> a {_multitouchinDATexecuteloc = b})
multitouchinDATpanel :: Lens' DAT (Maybe (Tree COMP))
multitouchinDATpanel = lens _multitouchinDATpanel (\a b -> a {_multitouchinDATpanel = b})
multitouchinDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
multitouchinDATcallbacks = lens _multitouchinDATcallbacks (\a b -> a {_multitouchinDATcallbacks = b})
multitouchinDATclear :: Lens' DAT (Maybe (Tree Bool))
multitouchinDATclear = lens _multitouchinDATclear (\a b -> a {_multitouchinDATclear = b})
multitouchinDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
multitouchinDATcustomext = lens _multitouchinDATcustomext (\a b -> a {_multitouchinDATcustomext = b})
multitouchinDATrelativepos :: Lens' DAT (Maybe (Tree Bool))
multitouchinDATrelativepos = lens _multitouchinDATrelativepos (\a b -> a {_multitouchinDATrelativepos = b})

switchDATindex :: Lens' DAT (Maybe (Tree Int))
switchDATindex = lens _switchDATindex (\a b -> a {_switchDATindex = b})
switchDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
switchDATcustomext = lens _switchDATcustomext (\a b -> a {_switchDATcustomext = b})
switchDATlanguage :: Lens' DAT (Maybe (Tree Int))
switchDATlanguage = lens _switchDATlanguage (\a b -> a {_switchDATlanguage = b})
switchDATextension :: Lens' DAT (Maybe (Tree Int))
switchDATextension = lens _switchDATextension (\a b -> a {_switchDATextension = b})
switchDATwordwrap :: Lens' DAT (Maybe (Tree Int))
switchDATwordwrap = lens _switchDATwordwrap (\a b -> a {_switchDATwordwrap = b})

folderDATrefreshpulse :: Lens' DAT (Maybe (Tree Bool))
folderDATrefreshpulse = lens _folderDATrefreshpulse (\a b -> a {_folderDATrefreshpulse = b})
folderDATactive :: Lens' DAT (Maybe (Tree Bool))
folderDATactive = lens _folderDATactive (\a b -> a {_folderDATactive = b})
folderDATnameformat :: Lens' DAT (Maybe (Tree Int))
folderDATnameformat = lens _folderDATnameformat (\a b -> a {_folderDATnameformat = b})
folderDATsizecol :: Lens' DAT (Maybe (Tree Bool))
folderDATsizecol = lens _folderDATsizecol (\a b -> a {_folderDATsizecol = b})
folderDATrelpathcol :: Lens' DAT (Maybe (Tree Bool))
folderDATrelpathcol = lens _folderDATrelpathcol (\a b -> a {_folderDATrelpathcol = b})
folderDATrootfolder :: Lens' DAT (Maybe (Tree ByteString))
folderDATrootfolder = lens _folderDATrootfolder (\a b -> a {_folderDATrootfolder = b})
folderDATtoxextensions :: Lens' DAT (Maybe (Tree Bool))
folderDATtoxextensions = lens _folderDATtoxextensions (\a b -> a {_folderDATtoxextensions = b})
folderDATpathcol :: Lens' DAT (Maybe (Tree Bool))
folderDATpathcol = lens _folderDATpathcol (\a b -> a {_folderDATpathcol = b})
folderDATimageextensions :: Lens' DAT (Maybe (Tree Bool))
folderDATimageextensions = lens _folderDATimageextensions (\a b -> a {_folderDATimageextensions = b})
folderDATrefresh :: Lens' DAT (Maybe (Tree Bool))
folderDATrefresh = lens _folderDATrefresh (\a b -> a {_folderDATrefresh = b})
folderDATtype :: Lens' DAT (Maybe (Tree Int))
folderDATtype = lens _folderDATtype (\a b -> a {_folderDATtype = b})
folderDATdatecreatedcol :: Lens' DAT (Maybe (Tree Bool))
folderDATdatecreatedcol = lens _folderDATdatecreatedcol (\a b -> a {_folderDATdatecreatedcol = b})
folderDATextensioncol :: Lens' DAT (Maybe (Tree Bool))
folderDATextensioncol = lens _folderDATextensioncol (\a b -> a {_folderDATextensioncol = b})
folderDATbasenamecol :: Lens' DAT (Maybe (Tree Bool))
folderDATbasenamecol = lens _folderDATbasenamecol (\a b -> a {_folderDATbasenamecol = b})
folderDATdepthcol :: Lens' DAT (Maybe (Tree Bool))
folderDATdepthcol = lens _folderDATdepthcol (\a b -> a {_folderDATdepthcol = b})
folderDATfolders :: Lens' DAT (Maybe (Tree ByteString))
folderDATfolders = lens _folderDATfolders (\a b -> a {_folderDATfolders = b})
folderDATtypecol :: Lens' DAT (Maybe (Tree Bool))
folderDATtypecol = lens _folderDATtypecol (\a b -> a {_folderDATtypecol = b})
folderDATdateformat :: Lens' DAT (Maybe (Tree Int))
folderDATdateformat = lens _folderDATdateformat (\a b -> a {_folderDATdateformat = b})
folderDATnames :: Lens' DAT (Maybe (Tree ByteString))
folderDATnames = lens _folderDATnames (\a b -> a {_folderDATnames = b})
folderDATfoldercol :: Lens' DAT (Maybe (Tree Bool))
folderDATfoldercol = lens _folderDATfoldercol (\a b -> a {_folderDATfoldercol = b})
folderDATwordwrap :: Lens' DAT (Maybe (Tree Int))
folderDATwordwrap = lens _folderDATwordwrap (\a b -> a {_folderDATwordwrap = b})
folderDATmaxdepth :: Lens' DAT (Maybe (Tree Int))
folderDATmaxdepth = lens _folderDATmaxdepth (\a b -> a {_folderDATmaxdepth = b})
folderDATsubfolders :: Lens' DAT (Maybe (Tree Bool))
folderDATsubfolders = lens _folderDATsubfolders (\a b -> a {_folderDATsubfolders = b})
folderDATdateaccessedcol :: Lens' DAT (Maybe (Tree Bool))
folderDATdateaccessedcol = lens _folderDATdateaccessedcol (\a b -> a {_folderDATdateaccessedcol = b})
folderDATnamecol :: Lens' DAT (Maybe (Tree Bool))
folderDATnamecol = lens _folderDATnamecol (\a b -> a {_folderDATnamecol = b})
folderDATmindepth :: Lens' DAT (Maybe (Tree Int))
folderDATmindepth = lens _folderDATmindepth (\a b -> a {_folderDATmindepth = b})
folderDATextension :: Lens' DAT (Maybe (Tree Int))
folderDATextension = lens _folderDATextension (\a b -> a {_folderDATextension = b})
folderDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
folderDATcustomext = lens _folderDATcustomext (\a b -> a {_folderDATcustomext = b})
folderDATextensions :: Lens' DAT (Maybe (Tree ByteString))
folderDATextensions = lens _folderDATextensions (\a b -> a {_folderDATextensions = b})
folderDATlimitdepth :: Lens' DAT (Maybe (Tree Bool))
folderDATlimitdepth = lens _folderDATlimitdepth (\a b -> a {_folderDATlimitdepth = b})
folderDATtoeextensions :: Lens' DAT (Maybe (Tree Bool))
folderDATtoeextensions = lens _folderDATtoeextensions (\a b -> a {_folderDATtoeextensions = b})
folderDATaudioextensions :: Lens' DAT (Maybe (Tree Bool))
folderDATaudioextensions = lens _folderDATaudioextensions (\a b -> a {_folderDATaudioextensions = b})
folderDATlanguage :: Lens' DAT (Maybe (Tree Int))
folderDATlanguage = lens _folderDATlanguage (\a b -> a {_folderDATlanguage = b})
folderDATallextensions :: Lens' DAT (Maybe (Tree Bool))
folderDATallextensions = lens _folderDATallextensions (\a b -> a {_folderDATallextensions = b})
folderDATdatemodifiedcol :: Lens' DAT (Maybe (Tree Bool))
folderDATdatemodifiedcol = lens _folderDATdatemodifiedcol (\a b -> a {_folderDATdatemodifiedcol = b})
folderDATmovieextensions :: Lens' DAT (Maybe (Tree Bool))
folderDATmovieextensions = lens _folderDATmovieextensions (\a b -> a {_folderDATmovieextensions = b})
folderDATasync :: Lens' DAT (Maybe (Tree Bool))
folderDATasync = lens _folderDATasync (\a b -> a {_folderDATasync = b})

mergeDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
mergeDATcustomext = lens _mergeDATcustomext (\a b -> a {_mergeDATcustomext = b})
mergeDATlanguage :: Lens' DAT (Maybe (Tree Int))
mergeDATlanguage = lens _mergeDATlanguage (\a b -> a {_mergeDATlanguage = b})
mergeDATunmatched :: Lens' DAT (Maybe (Tree Bool))
mergeDATunmatched = lens _mergeDATunmatched (\a b -> a {_mergeDATunmatched = b})
mergeDATspacer :: Lens' DAT (Maybe (Tree ByteString))
mergeDATspacer = lens _mergeDATspacer (\a b -> a {_mergeDATspacer = b})
mergeDATwordwrap :: Lens' DAT (Maybe (Tree Int))
mergeDATwordwrap = lens _mergeDATwordwrap (\a b -> a {_mergeDATwordwrap = b})
mergeDATbyname :: Lens' DAT (Maybe (Tree Bool))
mergeDATbyname = lens _mergeDATbyname (\a b -> a {_mergeDATbyname = b})
mergeDAThow :: Lens' DAT (Maybe (Tree Int))
mergeDAThow = lens _mergeDAThow (\a b -> a {_mergeDAThow = b})
mergeDATdat :: Lens' DAT (Maybe (Tree DAT))
mergeDATdat = lens _mergeDATdat (\a b -> a {_mergeDATdat = b})
mergeDATextension :: Lens' DAT (Maybe (Tree Int))
mergeDATextension = lens _mergeDATextension (\a b -> a {_mergeDATextension = b})

infoDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
infoDATcustomext = lens _infoDATcustomext (\a b -> a {_infoDATcustomext = b})
infoDATlanguage :: Lens' DAT (Maybe (Tree Int))
infoDATlanguage = lens _infoDATlanguage (\a b -> a {_infoDATlanguage = b})
infoDATpassive :: Lens' DAT (Maybe (Tree Bool))
infoDATpassive = lens _infoDATpassive (\a b -> a {_infoDATpassive = b})
infoDATextension :: Lens' DAT (Maybe (Tree Int))
infoDATextension = lens _infoDATextension (\a b -> a {_infoDATextension = b})
infoDATwordwrap :: Lens' DAT (Maybe (Tree Int))
infoDATwordwrap = lens _infoDATwordwrap (\a b -> a {_infoDATwordwrap = b})

textDATedit :: Lens' DAT (Maybe (Tree Bool))
textDATedit = lens _textDATedit (\a b -> a {_textDATedit = b})
textDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
textDATcustomext = lens _textDATcustomext (\a b -> a {_textDATcustomext = b})
textDATlanguage :: Lens' DAT (Maybe (Tree Int))
textDATlanguage = lens _textDATlanguage (\a b -> a {_textDATlanguage = b})
textDATfile :: Lens' DAT (Maybe (Tree ByteString))
textDATfile = lens _textDATfile (\a b -> a {_textDATfile = b})
textDATwritepulse :: Lens' DAT (Maybe (Tree Bool))
textDATwritepulse = lens _textDATwritepulse (\a b -> a {_textDATwritepulse = b})
textDATloadonstartpulse :: Lens' DAT (Maybe (Tree Bool))
textDATloadonstartpulse = lens _textDATloadonstartpulse (\a b -> a {_textDATloadonstartpulse = b})
textDATloadonstart :: Lens' DAT (Maybe (Tree Bool))
textDATloadonstart = lens _textDATloadonstart (\a b -> a {_textDATloadonstart = b})
textDATwordwrap :: Lens' DAT (Maybe (Tree Int))
textDATwordwrap = lens _textDATwordwrap (\a b -> a {_textDATwordwrap = b})
textDATextension :: Lens' DAT (Maybe (Tree Int))
textDATextension = lens _textDATextension (\a b -> a {_textDATextension = b})
textDATwrite :: Lens' DAT (Maybe (Tree Bool))
textDATwrite = lens _textDATwrite (\a b -> a {_textDATwrite = b})

outDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
outDATcustomext = lens _outDATcustomext (\a b -> a {_outDATcustomext = b})
outDATlabel :: Lens' DAT (Maybe (Tree ByteString))
outDATlabel = lens _outDATlabel (\a b -> a {_outDATlabel = b})
outDATlanguage :: Lens' DAT (Maybe (Tree Int))
outDATlanguage = lens _outDATlanguage (\a b -> a {_outDATlanguage = b})
outDATextension :: Lens' DAT (Maybe (Tree Int))
outDATextension = lens _outDATextension (\a b -> a {_outDATextension = b})
outDATwordwrap :: Lens' DAT (Maybe (Tree Int))
outDATwordwrap = lens _outDATwordwrap (\a b -> a {_outDATwordwrap = b})

touchoutDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
touchoutDATcustomext = lens _touchoutDATcustomext (\a b -> a {_touchoutDATcustomext = b})
touchoutDATlanguage :: Lens' DAT (Maybe (Tree Int))
touchoutDATlanguage = lens _touchoutDATlanguage (\a b -> a {_touchoutDATlanguage = b})
touchoutDATactive :: Lens' DAT (Maybe (Tree Bool))
touchoutDATactive = lens _touchoutDATactive (\a b -> a {_touchoutDATactive = b})
touchoutDATextension :: Lens' DAT (Maybe (Tree Int))
touchoutDATextension = lens _touchoutDATextension (\a b -> a {_touchoutDATextension = b})
touchoutDATwordwrap :: Lens' DAT (Maybe (Tree Int))
touchoutDATwordwrap = lens _touchoutDATwordwrap (\a b -> a {_touchoutDATwordwrap = b})
touchoutDATprotocol :: Lens' DAT (Maybe (Tree Int))
touchoutDATprotocol = lens _touchoutDATprotocol (\a b -> a {_touchoutDATprotocol = b})
touchoutDATresend :: Lens' DAT (Maybe (Tree Bool))
touchoutDATresend = lens _touchoutDATresend (\a b -> a {_touchoutDATresend = b})
touchoutDATport :: Lens' DAT (Maybe (Tree Int))
touchoutDATport = lens _touchoutDATport (\a b -> a {_touchoutDATport = b})
touchoutDATaddress :: Lens' DAT (Maybe (Tree ByteString))
touchoutDATaddress = lens _touchoutDATaddress (\a b -> a {_touchoutDATaddress = b})
touchoutDATshared :: Lens' DAT (Maybe (Tree Bool))
touchoutDATshared = lens _touchoutDATshared (\a b -> a {_touchoutDATshared = b})
touchoutDATredendantsends :: Lens' DAT (Maybe (Tree Int))
touchoutDATredendantsends = lens _touchoutDATredendantsends (\a b -> a {_touchoutDATredendantsends = b})

panelexecuteDATedit :: Lens' DAT (Maybe (Tree Bool))
panelexecuteDATedit = lens _panelexecuteDATedit (\a b -> a {_panelexecuteDATedit = b})
panelexecuteDATontooff :: Lens' DAT (Maybe (Tree Bool))
panelexecuteDATontooff = lens _panelexecuteDATontooff (\a b -> a {_panelexecuteDATontooff = b})
panelexecuteDATwhileoff :: Lens' DAT (Maybe (Tree Bool))
panelexecuteDATwhileoff = lens _panelexecuteDATwhileoff (\a b -> a {_panelexecuteDATwhileoff = b})
panelexecuteDATactive :: Lens' DAT (Maybe (Tree Bool))
panelexecuteDATactive = lens _panelexecuteDATactive (\a b -> a {_panelexecuteDATactive = b})
panelexecuteDATextension :: Lens' DAT (Maybe (Tree Int))
panelexecuteDATextension = lens _panelexecuteDATextension (\a b -> a {_panelexecuteDATextension = b})
panelexecuteDATwordwrap :: Lens' DAT (Maybe (Tree Int))
panelexecuteDATwordwrap = lens _panelexecuteDATwordwrap (\a b -> a {_panelexecuteDATwordwrap = b})
panelexecuteDATwhileon :: Lens' DAT (Maybe (Tree Bool))
panelexecuteDATwhileon = lens _panelexecuteDATwhileon (\a b -> a {_panelexecuteDATwhileon = b})
panelexecuteDATofftoon :: Lens' DAT (Maybe (Tree Bool))
panelexecuteDATofftoon = lens _panelexecuteDATofftoon (\a b -> a {_panelexecuteDATofftoon = b})
panelexecuteDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
panelexecuteDATcustomext = lens _panelexecuteDATcustomext (\a b -> a {_panelexecuteDATcustomext = b})
panelexecuteDATlanguage :: Lens' DAT (Maybe (Tree Int))
panelexecuteDATlanguage = lens _panelexecuteDATlanguage (\a b -> a {_panelexecuteDATlanguage = b})
panelexecuteDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
panelexecuteDATexecuteloc = lens _panelexecuteDATexecuteloc (\a b -> a {_panelexecuteDATexecuteloc = b})
panelexecuteDATpanel :: Lens' DAT (Maybe (Tree COMP))
panelexecuteDATpanel = lens _panelexecuteDATpanel (\a b -> a {_panelexecuteDATpanel = b})
panelexecuteDATvaluechange :: Lens' DAT (Maybe (Tree Bool))
panelexecuteDATvaluechange = lens _panelexecuteDATvaluechange (\a b -> a {_panelexecuteDATvaluechange = b})
panelexecuteDATpanelvalue :: Lens' DAT (Maybe (Tree ByteString))
panelexecuteDATpanelvalue = lens _panelexecuteDATpanelvalue (\a b -> a {_panelexecuteDATpanelvalue = b})

fileinDATwordwrap :: Lens' DAT (Maybe (Tree Int))
fileinDATwordwrap = lens _fileinDATwordwrap (\a b -> a {_fileinDATwordwrap = b})
fileinDATrefreshpulse :: Lens' DAT (Maybe (Tree Bool))
fileinDATrefreshpulse = lens _fileinDATrefreshpulse (\a b -> a {_fileinDATrefreshpulse = b})
fileinDATlanguage :: Lens' DAT (Maybe (Tree Int))
fileinDATlanguage = lens _fileinDATlanguage (\a b -> a {_fileinDATlanguage = b})
fileinDATfile :: Lens' DAT (Maybe (Tree ByteString))
fileinDATfile = lens _fileinDATfile (\a b -> a {_fileinDATfile = b})
fileinDATextension :: Lens' DAT (Maybe (Tree Int))
fileinDATextension = lens _fileinDATextension (\a b -> a {_fileinDATextension = b})
fileinDATrefresh :: Lens' DAT (Maybe (Tree Bool))
fileinDATrefresh = lens _fileinDATrefresh (\a b -> a {_fileinDATrefresh = b})
fileinDATconverttable :: Lens' DAT (Maybe (Tree Bool))
fileinDATconverttable = lens _fileinDATconverttable (\a b -> a {_fileinDATconverttable = b})
fileinDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
fileinDATcustomext = lens _fileinDATcustomext (\a b -> a {_fileinDATcustomext = b})

opfindDATpathcol :: Lens' DAT (Maybe (Tree Bool))
opfindDATpathcol = lens _opfindDATpathcol (\a b -> a {_opfindDATpathcol = b})
opfindDATmindepth :: Lens' DAT (Maybe (Tree Int))
opfindDATmindepth = lens _opfindDATmindepth (\a b -> a {_opfindDATmindepth = b})
opfindDATsops :: Lens' DAT (Maybe (Tree Bool))
opfindDATsops = lens _opfindDATsops (\a b -> a {_opfindDATsops = b})
opfindDATmaxops :: Lens' DAT (Maybe (Tree Int))
opfindDATmaxops = lens _opfindDATmaxops (\a b -> a {_opfindDATmaxops = b})
opfindDATlimitmaxops :: Lens' DAT (Maybe (Tree Bool))
opfindDATlimitmaxops = lens _opfindDATlimitmaxops (\a b -> a {_opfindDATlimitmaxops = b})
opfindDATexcludefilter :: Lens' DAT (Maybe (Tree ByteString))
opfindDATexcludefilter = lens _opfindDATexcludefilter (\a b -> a {_opfindDATexcludefilter = b})
opfindDATtagscol :: Lens' DAT (Maybe (Tree Bool))
opfindDATtagscol = lens _opfindDATtagscol (\a b -> a {_opfindDATtagscol = b})
opfindDATcommentfilter :: Lens' DAT (Maybe (Tree ByteString))
opfindDATcommentfilter = lens _opfindDATcommentfilter (\a b -> a {_opfindDATcommentfilter = b})
opfindDATcooktimescol :: Lens' DAT (Maybe (Tree Bool))
opfindDATcooktimescol = lens _opfindDATcooktimescol (\a b -> a {_opfindDATcooktimescol = b})
opfindDATparnondefaultonly :: Lens' DAT (Maybe (Tree Bool))
opfindDATparnondefaultonly = lens _opfindDATparnondefaultonly (\a b -> a {_opfindDATparnondefaultonly = b})
opfindDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
opfindDATcallbacks = lens _opfindDATcallbacks (\a b -> a {_opfindDATcallbacks = b})
opfindDATnamefilter :: Lens' DAT (Maybe (Tree ByteString))
opfindDATnamefilter = lens _opfindDATnamefilter (\a b -> a {_opfindDATnamefilter = b})
opfindDATcookpulse :: Lens' DAT (Maybe (Tree Bool))
opfindDATcookpulse = lens _opfindDATcookpulse (\a b -> a {_opfindDATcookpulse = b})
opfindDATwordwrap :: Lens' DAT (Maybe (Tree Int))
opfindDATwordwrap = lens _opfindDATwordwrap (\a b -> a {_opfindDATwordwrap = b})
opfindDATtypecol :: Lens' DAT (Maybe (Tree Bool))
opfindDATtypecol = lens _opfindDATtypecol (\a b -> a {_opfindDATtypecol = b})
opfindDATdepthcol :: Lens' DAT (Maybe (Tree Bool))
opfindDATdepthcol = lens _opfindDATdepthcol (\a b -> a {_opfindDATdepthcol = b})
opfindDATrelpathcol :: Lens' DAT (Maybe (Tree Bool))
opfindDATrelpathcol = lens _opfindDATrelpathcol (\a b -> a {_opfindDATrelpathcol = b})
opfindDATtypefilter :: Lens' DAT (Maybe (Tree ByteString))
opfindDATtypefilter = lens _opfindDATtypefilter (\a b -> a {_opfindDATtypefilter = b})
opfindDATnamecol :: Lens' DAT (Maybe (Tree Bool))
opfindDATnamecol = lens _opfindDATnamecol (\a b -> a {_opfindDATnamecol = b})
opfindDATparnamefilter :: Lens' DAT (Maybe (Tree ByteString))
opfindDATparnamefilter = lens _opfindDATparnamefilter (\a b -> a {_opfindDATparnamefilter = b})
opfindDATmats :: Lens' DAT (Maybe (Tree Bool))
opfindDATmats = lens _opfindDATmats (\a b -> a {_opfindDATmats = b})
opfindDATother :: Lens' DAT (Maybe (Tree Bool))
opfindDATother = lens _opfindDATother (\a b -> a {_opfindDATother = b})
opfindDATparentpath :: Lens' DAT (Maybe (Tree Bool))
opfindDATparentpath = lens _opfindDATparentpath (\a b -> a {_opfindDATparentpath = b})
opfindDATcombinefilters :: Lens' DAT (Maybe (Tree Int))
opfindDATcombinefilters = lens _opfindDATcombinefilters (\a b -> a {_opfindDATcombinefilters = b})
opfindDATlanguage :: Lens' DAT (Maybe (Tree Int))
opfindDATlanguage = lens _opfindDATlanguage (\a b -> a {_opfindDATlanguage = b})
opfindDATdats :: Lens' DAT (Maybe (Tree Bool))
opfindDATdats = lens _opfindDATdats (\a b -> a {_opfindDATdats = b})
opfindDATpanels :: Lens' DAT (Maybe (Tree Bool))
opfindDATpanels = lens _opfindDATpanels (\a b -> a {_opfindDATpanels = b})
opfindDATparvaluefilter :: Lens' DAT (Maybe (Tree ByteString))
opfindDATparvaluefilter = lens _opfindDATparvaluefilter (\a b -> a {_opfindDATparvaluefilter = b})
opfindDATparexpressionfilter :: Lens' DAT (Maybe (Tree ByteString))
opfindDATparexpressionfilter = lens _opfindDATparexpressionfilter (\a b -> a {_opfindDATparexpressionfilter = b})
opfindDATtops :: Lens' DAT (Maybe (Tree Bool))
opfindDATtops = lens _opfindDATtops (\a b -> a {_opfindDATtops = b})
opfindDATparentfilter :: Lens' DAT (Maybe (Tree ByteString))
opfindDATparentfilter = lens _opfindDATparentfilter (\a b -> a {_opfindDATparentfilter = b})
opfindDATincludecomponent :: Lens' DAT (Maybe (Tree Bool))
opfindDATincludecomponent = lens _opfindDATincludecomponent (\a b -> a {_opfindDATincludecomponent = b})
opfindDATcasesensitive :: Lens' DAT (Maybe (Tree Bool))
opfindDATcasesensitive = lens _opfindDATcasesensitive (\a b -> a {_opfindDATcasesensitive = b})
opfindDATextension :: Lens' DAT (Maybe (Tree Int))
opfindDATextension = lens _opfindDATextension (\a b -> a {_opfindDATextension = b})
opfindDATcomponent :: Lens' DAT (Maybe (Tree COMP))
opfindDATcomponent = lens _opfindDATcomponent (\a b -> a {_opfindDATcomponent = b})
opfindDATconvertbool :: Lens' DAT (Maybe (Tree Bool))
opfindDATconvertbool = lens _opfindDATconvertbool (\a b -> a {_opfindDATconvertbool = b})
opfindDATpathfilter :: Lens' DAT (Maybe (Tree ByteString))
opfindDATpathfilter = lens _opfindDATpathfilter (\a b -> a {_opfindDATpathfilter = b})
opfindDATconvertnone :: Lens' DAT (Maybe (Tree Bool))
opfindDATconvertnone = lens _opfindDATconvertnone (\a b -> a {_opfindDATconvertnone = b})
opfindDATmaxdepth :: Lens' DAT (Maybe (Tree Int))
opfindDATmaxdepth = lens _opfindDATmaxdepth (\a b -> a {_opfindDATmaxdepth = b})
opfindDATobjects :: Lens' DAT (Maybe (Tree Bool))
opfindDATobjects = lens _opfindDATobjects (\a b -> a {_opfindDATobjects = b})
opfindDATtagsfilter :: Lens' DAT (Maybe (Tree ByteString))
opfindDATtagsfilter = lens _opfindDATtagsfilter (\a b -> a {_opfindDATtagsfilter = b})
opfindDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
opfindDATcustomext = lens _opfindDATcustomext (\a b -> a {_opfindDATcustomext = b})
opfindDATlimitmaxdepth :: Lens' DAT (Maybe (Tree Bool))
opfindDATlimitmaxdepth = lens _opfindDATlimitmaxdepth (\a b -> a {_opfindDATlimitmaxdepth = b})
opfindDATidcol :: Lens' DAT (Maybe (Tree Bool))
opfindDATidcol = lens _opfindDATidcol (\a b -> a {_opfindDATidcol = b})
opfindDATchops :: Lens' DAT (Maybe (Tree Bool))
opfindDATchops = lens _opfindDATchops (\a b -> a {_opfindDATchops = b})
opfindDATactivecook :: Lens' DAT (Maybe (Tree Int))
opfindDATactivecook = lens _opfindDATactivecook (\a b -> a {_opfindDATactivecook = b})
opfindDATtextfilter :: Lens' DAT (Maybe (Tree ByteString))
opfindDATtextfilter = lens _opfindDATtextfilter (\a b -> a {_opfindDATtextfilter = b})

mqttclientDATclear :: Lens' DAT (Maybe (Tree Bool))
mqttclientDATclear = lens _mqttclientDATclear (\a b -> a {_mqttclientDATclear = b})
mqttclientDATactive :: Lens' DAT (Maybe (Tree Bool))
mqttclientDATactive = lens _mqttclientDATactive (\a b -> a {_mqttclientDATactive = b})
mqttclientDATextension :: Lens' DAT (Maybe (Tree Int))
mqttclientDATextension = lens _mqttclientDATextension (\a b -> a {_mqttclientDATextension = b})
mqttclientDATclamp :: Lens' DAT (Maybe (Tree Bool))
mqttclientDATclamp = lens _mqttclientDATclamp (\a b -> a {_mqttclientDATclamp = b})
mqttclientDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
mqttclientDATexecuteloc = lens _mqttclientDATexecuteloc (\a b -> a {_mqttclientDATexecuteloc = b})
mqttclientDATreconnect :: Lens' DAT (Maybe (Tree Bool))
mqttclientDATreconnect = lens _mqttclientDATreconnect (\a b -> a {_mqttclientDATreconnect = b})
mqttclientDATspecifyid :: Lens' DAT (Maybe (Tree Bool))
mqttclientDATspecifyid = lens _mqttclientDATspecifyid (\a b -> a {_mqttclientDATspecifyid = b})
mqttclientDATmaxinflight :: Lens' DAT (Maybe (Tree Int))
mqttclientDATmaxinflight = lens _mqttclientDATmaxinflight (\a b -> a {_mqttclientDATmaxinflight = b})
mqttclientDATcleansession :: Lens' DAT (Maybe (Tree Bool))
mqttclientDATcleansession = lens _mqttclientDATcleansession (\a b -> a {_mqttclientDATcleansession = b})
mqttclientDATkeepalive :: Lens' DAT (Maybe (Tree Int))
mqttclientDATkeepalive = lens _mqttclientDATkeepalive (\a b -> a {_mqttclientDATkeepalive = b})
mqttclientDATwordwrap :: Lens' DAT (Maybe (Tree Int))
mqttclientDATwordwrap = lens _mqttclientDATwordwrap (\a b -> a {_mqttclientDATwordwrap = b})
mqttclientDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
mqttclientDATcallbacks = lens _mqttclientDATcallbacks (\a b -> a {_mqttclientDATcallbacks = b})
mqttclientDATmaxlines :: Lens' DAT (Maybe (Tree Int))
mqttclientDATmaxlines = lens _mqttclientDATmaxlines (\a b -> a {_mqttclientDATmaxlines = b})
mqttclientDATusercid :: Lens' DAT (Maybe (Tree ByteString))
mqttclientDATusercid = lens _mqttclientDATusercid (\a b -> a {_mqttclientDATusercid = b})
mqttclientDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
mqttclientDATcustomext = lens _mqttclientDATcustomext (\a b -> a {_mqttclientDATcustomext = b})
mqttclientDATnetaddress :: Lens' DAT (Maybe (Tree ByteString))
mqttclientDATnetaddress = lens _mqttclientDATnetaddress (\a b -> a {_mqttclientDATnetaddress = b})
mqttclientDATlanguage :: Lens' DAT (Maybe (Tree Int))
mqttclientDATlanguage = lens _mqttclientDATlanguage (\a b -> a {_mqttclientDATlanguage = b})
mqttclientDATbytes :: Lens' DAT (Maybe (Tree Bool))
mqttclientDATbytes = lens _mqttclientDATbytes (\a b -> a {_mqttclientDATbytes = b})

websocketDATclear :: Lens' DAT (Maybe (Tree Bool))
websocketDATclear = lens _websocketDATclear (\a b -> a {_websocketDATclear = b})
websocketDATactive :: Lens' DAT (Maybe (Tree Bool))
websocketDATactive = lens _websocketDATactive (\a b -> a {_websocketDATactive = b})
websocketDATextension :: Lens' DAT (Maybe (Tree Int))
websocketDATextension = lens _websocketDATextension (\a b -> a {_websocketDATextension = b})
websocketDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
websocketDATcustomext = lens _websocketDATcustomext (\a b -> a {_websocketDATcustomext = b})
websocketDATsocketio :: Lens' DAT (Maybe (Tree Bool))
websocketDATsocketio = lens _websocketDATsocketio (\a b -> a {_websocketDATsocketio = b})
websocketDATclamp :: Lens' DAT (Maybe (Tree Bool))
websocketDATclamp = lens _websocketDATclamp (\a b -> a {_websocketDATclamp = b})
websocketDATlanguage :: Lens' DAT (Maybe (Tree Int))
websocketDATlanguage = lens _websocketDATlanguage (\a b -> a {_websocketDATlanguage = b})
websocketDATmaxlines :: Lens' DAT (Maybe (Tree Int))
websocketDATmaxlines = lens _websocketDATmaxlines (\a b -> a {_websocketDATmaxlines = b})
websocketDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
websocketDATexecuteloc = lens _websocketDATexecuteloc (\a b -> a {_websocketDATexecuteloc = b})
websocketDATwordwrap :: Lens' DAT (Maybe (Tree Int))
websocketDATwordwrap = lens _websocketDATwordwrap (\a b -> a {_websocketDATwordwrap = b})
websocketDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
websocketDATcallbacks = lens _websocketDATcallbacks (\a b -> a {_websocketDATcallbacks = b})
websocketDATbytes :: Lens' DAT (Maybe (Tree Bool))
websocketDATbytes = lens _websocketDATbytes (\a b -> a {_websocketDATbytes = b})
websocketDATport :: Lens' DAT (Maybe (Tree Int))
websocketDATport = lens _websocketDATport (\a b -> a {_websocketDATport = b})
websocketDATnetaddress :: Lens' DAT (Maybe (Tree ByteString))
websocketDATnetaddress = lens _websocketDATnetaddress (\a b -> a {_websocketDATnetaddress = b})
websocketDATsocketioaddress :: Lens' DAT (Maybe (Tree ByteString))
websocketDATsocketioaddress = lens _websocketDATsocketioaddress (\a b -> a {_websocketDATsocketioaddress = b})

udpoutDATbytes :: Lens' DAT (Maybe (Tree Bool))
udpoutDATbytes = lens _udpoutDATbytes (\a b -> a {_udpoutDATbytes = b})
udpoutDATformat :: Lens' DAT (Maybe (Tree Int))
udpoutDATformat = lens _udpoutDATformat (\a b -> a {_udpoutDATformat = b})
udpoutDATactive :: Lens' DAT (Maybe (Tree Bool))
udpoutDATactive = lens _udpoutDATactive (\a b -> a {_udpoutDATactive = b})
udpoutDATextension :: Lens' DAT (Maybe (Tree Int))
udpoutDATextension = lens _udpoutDATextension (\a b -> a {_udpoutDATextension = b})
udpoutDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
udpoutDATcustomext = lens _udpoutDATcustomext (\a b -> a {_udpoutDATcustomext = b})
udpoutDATprotocol :: Lens' DAT (Maybe (Tree Int))
udpoutDATprotocol = lens _udpoutDATprotocol (\a b -> a {_udpoutDATprotocol = b})
udpoutDATlocalport :: Lens' DAT (Maybe (Tree Int))
udpoutDATlocalport = lens _udpoutDATlocalport (\a b -> a {_udpoutDATlocalport = b})
udpoutDATaddress :: Lens' DAT (Maybe (Tree ByteString))
udpoutDATaddress = lens _udpoutDATaddress (\a b -> a {_udpoutDATaddress = b})
udpoutDATshared :: Lens' DAT (Maybe (Tree Bool))
udpoutDATshared = lens _udpoutDATshared (\a b -> a {_udpoutDATshared = b})
udpoutDATclamp :: Lens' DAT (Maybe (Tree Bool))
udpoutDATclamp = lens _udpoutDATclamp (\a b -> a {_udpoutDATclamp = b})
udpoutDATlanguage :: Lens' DAT (Maybe (Tree Int))
udpoutDATlanguage = lens _udpoutDATlanguage (\a b -> a {_udpoutDATlanguage = b})
udpoutDATmaxlines :: Lens' DAT (Maybe (Tree Int))
udpoutDATmaxlines = lens _udpoutDATmaxlines (\a b -> a {_udpoutDATmaxlines = b})
udpoutDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
udpoutDATexecuteloc = lens _udpoutDATexecuteloc (\a b -> a {_udpoutDATexecuteloc = b})
udpoutDATwordwrap :: Lens' DAT (Maybe (Tree Int))
udpoutDATwordwrap = lens _udpoutDATwordwrap (\a b -> a {_udpoutDATwordwrap = b})
udpoutDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
udpoutDATcallbacks = lens _udpoutDATcallbacks (\a b -> a {_udpoutDATcallbacks = b})
udpoutDATclear :: Lens' DAT (Maybe (Tree Bool))
udpoutDATclear = lens _udpoutDATclear (\a b -> a {_udpoutDATclear = b})
udpoutDATport :: Lens' DAT (Maybe (Tree Int))
udpoutDATport = lens _udpoutDATport (\a b -> a {_udpoutDATport = b})
udpoutDATlocalportmode :: Lens' DAT (Maybe (Tree Int))
udpoutDATlocalportmode = lens _udpoutDATlocalportmode (\a b -> a {_udpoutDATlocalportmode = b})

soptoDATwordwrap :: Lens' DAT (Maybe (Tree Int))
soptoDATwordwrap = lens _soptoDATwordwrap (\a b -> a {_soptoDATwordwrap = b})
soptoDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
soptoDATcustomext = lens _soptoDATcustomext (\a b -> a {_soptoDATcustomext = b})
soptoDATlanguage :: Lens' DAT (Maybe (Tree Int))
soptoDATlanguage = lens _soptoDATlanguage (\a b -> a {_soptoDATlanguage = b})
soptoDATsop :: Lens' DAT (Maybe (Tree SOP))
soptoDATsop = lens _soptoDATsop (\a b -> a {_soptoDATsop = b})
soptoDATgroup :: Lens' DAT (Maybe (Tree ByteString))
soptoDATgroup = lens _soptoDATgroup (\a b -> a {_soptoDATgroup = b})
soptoDATextract :: Lens' DAT (Maybe (Tree Int))
soptoDATextract = lens _soptoDATextract (\a b -> a {_soptoDATextract = b})
soptoDATattrib :: Lens' DAT (Maybe (Tree ByteString))
soptoDATattrib = lens _soptoDATattrib (\a b -> a {_soptoDATattrib = b})
soptoDATuvforpts :: Lens' DAT (Maybe (Tree Bool))
soptoDATuvforpts = lens _soptoDATuvforpts (\a b -> a {_soptoDATuvforpts = b})
soptoDATextension :: Lens' DAT (Maybe (Tree Int))
soptoDATextension = lens _soptoDATextension (\a b -> a {_soptoDATextension = b})

renderpickDATposition :: Lens' DAT (Maybe (Tree Int))
renderpickDATposition = lens _renderpickDATposition (\a b -> a {_renderpickDATposition = b})
renderpickDATwordwrap :: Lens' DAT (Maybe (Tree Int))
renderpickDATwordwrap = lens _renderpickDATwordwrap (\a b -> a {_renderpickDATwordwrap = b})
renderpickDATdepth :: Lens' DAT (Maybe (Tree Bool))
renderpickDATdepth = lens _renderpickDATdepth (\a b -> a {_renderpickDATdepth = b})
renderpickDATextension :: Lens' DAT (Maybe (Tree Int))
renderpickDATextension = lens _renderpickDATextension (\a b -> a {_renderpickDATextension = b})
renderpickDATcolor :: Lens' DAT (Maybe (Tree Bool))
renderpickDATcolor = lens _renderpickDATcolor (\a b -> a {_renderpickDATcolor = b})
renderpickDATcustomattrib2type :: Lens' DAT (Maybe (Tree Int))
renderpickDATcustomattrib2type = lens _renderpickDATcustomattrib2type (\a b -> a {_renderpickDATcustomattrib2type = b})
renderpickDATpickradstep :: Lens' DAT (Maybe (Tree Int))
renderpickDATpickradstep = lens _renderpickDATpickradstep (\a b -> a {_renderpickDATpickradstep = b})
renderpickDATcustomattrib1 :: Lens' DAT (Maybe (Tree ByteString))
renderpickDATcustomattrib1 = lens _renderpickDATcustomattrib1 (\a b -> a {_renderpickDATcustomattrib1 = b})
renderpickDATcustomattrib2 :: Lens' DAT (Maybe (Tree ByteString))
renderpickDATcustomattrib2 = lens _renderpickDATcustomattrib2 (\a b -> a {_renderpickDATcustomattrib2 = b})
renderpickDATallowmulticamera :: Lens' DAT (Maybe (Tree Bool))
renderpickDATallowmulticamera = lens _renderpickDATallowmulticamera (\a b -> a {_renderpickDATallowmulticamera = b})
renderpickDATclearprev :: Lens' DAT (Maybe (Tree Bool))
renderpickDATclearprev = lens _renderpickDATclearprev (\a b -> a {_renderpickDATclearprev = b})
renderpickDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
renderpickDATcallbacks = lens _renderpickDATcallbacks (\a b -> a {_renderpickDATcallbacks = b})
renderpickDATactivatecallbacks :: Lens' DAT (Maybe (Tree Bool))
renderpickDATactivatecallbacks = lens _renderpickDATactivatecallbacks (\a b -> a {_renderpickDATactivatecallbacks = b})
renderpickDATmergeinputdat :: Lens' DAT (Maybe (Tree Bool))
renderpickDATmergeinputdat = lens _renderpickDATmergeinputdat (\a b -> a {_renderpickDATmergeinputdat = b})
renderpickDATpickradius :: Lens' DAT (Maybe (Tree Int))
renderpickDATpickradius = lens _renderpickDATpickradius (\a b -> a {_renderpickDATpickradius = b})
renderpickDATcustomattrib1type :: Lens' DAT (Maybe (Tree Int))
renderpickDATcustomattrib1type = lens _renderpickDATcustomattrib1type (\a b -> a {_renderpickDATcustomattrib1type = b})
renderpickDATlanguage :: Lens' DAT (Maybe (Tree Int))
renderpickDATlanguage = lens _renderpickDATlanguage (\a b -> a {_renderpickDATlanguage = b})
renderpickDATpickcirstep :: Lens' DAT (Maybe (Tree Int))
renderpickDATpickcirstep = lens _renderpickDATpickcirstep (\a b -> a {_renderpickDATpickcirstep = b})
renderpickDATcustomattrib3type :: Lens' DAT (Maybe (Tree Int))
renderpickDATcustomattrib3type = lens _renderpickDATcustomattrib3type (\a b -> a {_renderpickDATcustomattrib3type = b})
renderpickDATcustomattrib3 :: Lens' DAT (Maybe (Tree ByteString))
renderpickDATcustomattrib3 = lens _renderpickDATcustomattrib3 (\a b -> a {_renderpickDATcustomattrib3 = b})
renderpickDATstrategy :: Lens' DAT (Maybe (Tree Int))
renderpickDATstrategy = lens _renderpickDATstrategy (\a b -> a {_renderpickDATstrategy = b})
renderpickDATuv :: Lens' DAT (Maybe (Tree Bool))
renderpickDATuv = lens _renderpickDATuv (\a b -> a {_renderpickDATuv = b})
renderpickDATrendertop :: Lens' DAT (Maybe (Tree TOP))
renderpickDATrendertop = lens _renderpickDATrendertop (\a b -> a {_renderpickDATrendertop = b})
renderpickDATusepickableflags :: Lens' DAT (Maybe (Tree Bool))
renderpickDATusepickableflags = lens _renderpickDATusepickableflags (\a b -> a {_renderpickDATusepickableflags = b})
renderpickDATcustomattrib4 :: Lens' DAT (Maybe (Tree ByteString))
renderpickDATcustomattrib4 = lens _renderpickDATcustomattrib4 (\a b -> a {_renderpickDATcustomattrib4 = b})
renderpickDATinstanceid :: Lens' DAT (Maybe (Tree Bool))
renderpickDATinstanceid = lens _renderpickDATinstanceid (\a b -> a {_renderpickDATinstanceid = b})
renderpickDATcustomattrib4type :: Lens' DAT (Maybe (Tree Int))
renderpickDATcustomattrib4type = lens _renderpickDATcustomattrib4type (\a b -> a {_renderpickDATcustomattrib4type = b})
renderpickDATresponsetime :: Lens' DAT (Maybe (Tree Int))
renderpickDATresponsetime = lens _renderpickDATresponsetime (\a b -> a {_renderpickDATresponsetime = b})
renderpickDATincludenonpickable :: Lens' DAT (Maybe (Tree Bool))
renderpickDATincludenonpickable = lens _renderpickDATincludenonpickable (\a b -> a {_renderpickDATincludenonpickable = b})
renderpickDATnormal :: Lens' DAT (Maybe (Tree Int))
renderpickDATnormal = lens _renderpickDATnormal (\a b -> a {_renderpickDATnormal = b})
renderpickDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
renderpickDATcustomext = lens _renderpickDATcustomext (\a b -> a {_renderpickDATcustomext = b})

touchinDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
touchinDATcustomext = lens _touchinDATcustomext (\a b -> a {_touchinDATcustomext = b})
touchinDATlanguage :: Lens' DAT (Maybe (Tree Int))
touchinDATlanguage = lens _touchinDATlanguage (\a b -> a {_touchinDATlanguage = b})
touchinDATactive :: Lens' DAT (Maybe (Tree Bool))
touchinDATactive = lens _touchinDATactive (\a b -> a {_touchinDATactive = b})
touchinDATextension :: Lens' DAT (Maybe (Tree Int))
touchinDATextension = lens _touchinDATextension (\a b -> a {_touchinDATextension = b})
touchinDATwordwrap :: Lens' DAT (Maybe (Tree Int))
touchinDATwordwrap = lens _touchinDATwordwrap (\a b -> a {_touchinDATwordwrap = b})
touchinDATprotocol :: Lens' DAT (Maybe (Tree Int))
touchinDATprotocol = lens _touchinDATprotocol (\a b -> a {_touchinDATprotocol = b})
touchinDATport :: Lens' DAT (Maybe (Tree Int))
touchinDATport = lens _touchinDATport (\a b -> a {_touchinDATport = b})
touchinDATaddress :: Lens' DAT (Maybe (Tree ByteString))
touchinDATaddress = lens _touchinDATaddress (\a b -> a {_touchinDATaddress = b})
touchinDATshared :: Lens' DAT (Maybe (Tree Bool))
touchinDATshared = lens _touchinDATshared (\a b -> a {_touchinDATshared = b})

transposeDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
transposeDATcustomext = lens _transposeDATcustomext (\a b -> a {_transposeDATcustomext = b})
transposeDATlanguage :: Lens' DAT (Maybe (Tree Int))
transposeDATlanguage = lens _transposeDATlanguage (\a b -> a {_transposeDATlanguage = b})
transposeDATextension :: Lens' DAT (Maybe (Tree Int))
transposeDATextension = lens _transposeDATextension (\a b -> a {_transposeDATextension = b})
transposeDATwordwrap :: Lens' DAT (Maybe (Tree Int))
transposeDATwordwrap = lens _transposeDATwordwrap (\a b -> a {_transposeDATwordwrap = b})

inDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
inDATcustomext = lens _inDATcustomext (\a b -> a {_inDATcustomext = b})
inDATlabel :: Lens' DAT (Maybe (Tree ByteString))
inDATlabel = lens _inDATlabel (\a b -> a {_inDATlabel = b})
inDATlanguage :: Lens' DAT (Maybe (Tree Int))
inDATlanguage = lens _inDATlanguage (\a b -> a {_inDATlanguage = b})
inDATextension :: Lens' DAT (Maybe (Tree Int))
inDATextension = lens _inDATextension (\a b -> a {_inDATextension = b})
inDATwordwrap :: Lens' DAT (Maybe (Tree Int))
inDATwordwrap = lens _inDATwordwrap (\a b -> a {_inDATwordwrap = b})

monitorsDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
monitorsDATcustomext = lens _monitorsDATcustomext (\a b -> a {_monitorsDATcustomext = b})
monitorsDATlanguage :: Lens' DAT (Maybe (Tree Int))
monitorsDATlanguage = lens _monitorsDATlanguage (\a b -> a {_monitorsDATlanguage = b})
monitorsDATextension :: Lens' DAT (Maybe (Tree Int))
monitorsDATextension = lens _monitorsDATextension (\a b -> a {_monitorsDATextension = b})
monitorsDATwordwrap :: Lens' DAT (Maybe (Tree Int))
monitorsDATwordwrap = lens _monitorsDATwordwrap (\a b -> a {_monitorsDATwordwrap = b})
monitorsDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
monitorsDATcallbacks = lens _monitorsDATcallbacks (\a b -> a {_monitorsDATcallbacks = b})
monitorsDATbounds :: Lens' DAT (Maybe (Tree Bool))
monitorsDATbounds = lens _monitorsDATbounds (\a b -> a {_monitorsDATbounds = b})
monitorsDATunits :: Lens' DAT (Maybe (Tree Int))
monitorsDATunits = lens _monitorsDATunits (\a b -> a {_monitorsDATunits = b})
monitorsDATmonitors :: Lens' DAT (Maybe (Tree Int))
monitorsDATmonitors = lens _monitorsDATmonitors (\a b -> a {_monitorsDATmonitors = b})

udpinDATformat :: Lens' DAT (Maybe (Tree Int))
udpinDATformat = lens _udpinDATformat (\a b -> a {_udpinDATformat = b})
udpinDATactive :: Lens' DAT (Maybe (Tree Bool))
udpinDATactive = lens _udpinDATactive (\a b -> a {_udpinDATactive = b})
udpinDATextension :: Lens' DAT (Maybe (Tree Int))
udpinDATextension = lens _udpinDATextension (\a b -> a {_udpinDATextension = b})
udpinDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
udpinDATcustomext = lens _udpinDATcustomext (\a b -> a {_udpinDATcustomext = b})
udpinDATprotocol :: Lens' DAT (Maybe (Tree Int))
udpinDATprotocol = lens _udpinDATprotocol (\a b -> a {_udpinDATprotocol = b})
udpinDATaddress :: Lens' DAT (Maybe (Tree ByteString))
udpinDATaddress = lens _udpinDATaddress (\a b -> a {_udpinDATaddress = b})
udpinDATshared :: Lens' DAT (Maybe (Tree Bool))
udpinDATshared = lens _udpinDATshared (\a b -> a {_udpinDATshared = b})
udpinDATclamp :: Lens' DAT (Maybe (Tree Bool))
udpinDATclamp = lens _udpinDATclamp (\a b -> a {_udpinDATclamp = b})
udpinDATlanguage :: Lens' DAT (Maybe (Tree Int))
udpinDATlanguage = lens _udpinDATlanguage (\a b -> a {_udpinDATlanguage = b})
udpinDATmaxlines :: Lens' DAT (Maybe (Tree Int))
udpinDATmaxlines = lens _udpinDATmaxlines (\a b -> a {_udpinDATmaxlines = b})
udpinDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
udpinDATexecuteloc = lens _udpinDATexecuteloc (\a b -> a {_udpinDATexecuteloc = b})
udpinDATwordwrap :: Lens' DAT (Maybe (Tree Int))
udpinDATwordwrap = lens _udpinDATwordwrap (\a b -> a {_udpinDATwordwrap = b})
udpinDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
udpinDATcallbacks = lens _udpinDATcallbacks (\a b -> a {_udpinDATcallbacks = b})
udpinDATclear :: Lens' DAT (Maybe (Tree Bool))
udpinDATclear = lens _udpinDATclear (\a b -> a {_udpinDATclear = b})
udpinDATport :: Lens' DAT (Maybe (Tree Int))
udpinDATport = lens _udpinDATport (\a b -> a {_udpinDATport = b})
udpinDATbytes :: Lens' DAT (Maybe (Tree Bool))
udpinDATbytes = lens _udpinDATbytes (\a b -> a {_udpinDATbytes = b})

examineDATtype :: Lens' DAT (Maybe (Tree ByteString))
examineDATtype = lens _examineDATtype (\a b -> a {_examineDATtype = b})
examineDATsubkey :: Lens' DAT (Maybe (Tree ByteString))
examineDATsubkey = lens _examineDATsubkey (\a b -> a {_examineDATsubkey = b})
examineDATextension :: Lens' DAT (Maybe (Tree Int))
examineDATextension = lens _examineDATextension (\a b -> a {_examineDATextension = b})
examineDAToutputkey :: Lens' DAT (Maybe (Tree Bool))
examineDAToutputkey = lens _examineDAToutputkey (\a b -> a {_examineDAToutputkey = b})
examineDATvalue :: Lens' DAT (Maybe (Tree ByteString))
examineDATvalue = lens _examineDATvalue (\a b -> a {_examineDATvalue = b})
examineDAToutputheaders :: Lens' DAT (Maybe (Tree Bool))
examineDAToutputheaders = lens _examineDAToutputheaders (\a b -> a {_examineDAToutputheaders = b})
examineDATwordwrap :: Lens' DAT (Maybe (Tree Int))
examineDATwordwrap = lens _examineDATwordwrap (\a b -> a {_examineDATwordwrap = b})
examineDAToutputtype :: Lens' DAT (Maybe (Tree Bool))
examineDAToutputtype = lens _examineDAToutputtype (\a b -> a {_examineDAToutputtype = b})
examineDAToutputlevel :: Lens' DAT (Maybe (Tree Bool))
examineDAToutputlevel = lens _examineDAToutputlevel (\a b -> a {_examineDAToutputlevel = b})
examineDATmaxlevels :: Lens' DAT (Maybe (Tree Int))
examineDATmaxlevels = lens _examineDATmaxlevels (\a b -> a {_examineDATmaxlevels = b})
examineDATexpandclasses :: Lens' DAT (Maybe (Tree Bool))
examineDATexpandclasses = lens _examineDATexpandclasses (\a b -> a {_examineDATexpandclasses = b})
examineDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
examineDATcustomext = lens _examineDATcustomext (\a b -> a {_examineDATcustomext = b})
examineDATlanguage :: Lens' DAT (Maybe (Tree Int))
examineDATlanguage = lens _examineDATlanguage (\a b -> a {_examineDATlanguage = b})
examineDATlevel :: Lens' DAT (Maybe (Tree ByteString))
examineDATlevel = lens _examineDATlevel (\a b -> a {_examineDATlevel = b})
examineDATformat :: Lens' DAT (Maybe (Tree Int))
examineDATformat = lens _examineDATformat (\a b -> a {_examineDATformat = b})
examineDATexpression :: Lens' DAT (Maybe (Tree ByteString))
examineDATexpression = lens _examineDATexpression (\a b -> a {_examineDATexpression = b})
examineDATsource :: Lens' DAT (Maybe (Tree Int))
examineDATsource = lens _examineDATsource (\a b -> a {_examineDATsource = b})
examineDAToutputvalue :: Lens' DAT (Maybe (Tree Bool))
examineDAToutputvalue = lens _examineDAToutputvalue (\a b -> a {_examineDAToutputvalue = b})
examineDATkey :: Lens' DAT (Maybe (Tree ByteString))
examineDATkey = lens _examineDATkey (\a b -> a {_examineDATkey = b})

webDATfetch :: Lens' DAT (Maybe (Tree Bool))
webDATfetch = lens _webDATfetch (\a b -> a {_webDATfetch = b})
webDATextension :: Lens' DAT (Maybe (Tree Int))
webDATextension = lens _webDATextension (\a b -> a {_webDATextension = b})
webDATwordwrap :: Lens' DAT (Maybe (Tree Int))
webDATwordwrap = lens _webDATwordwrap (\a b -> a {_webDATwordwrap = b})
webDATurl :: Lens' DAT (Maybe (Tree ByteString))
webDATurl = lens _webDATurl (\a b -> a {_webDATurl = b})
webDATdisconnect :: Lens' DAT (Maybe (Tree Bool))
webDATdisconnect = lens _webDATdisconnect (\a b -> a {_webDATdisconnect = b})
webDATsubmitfetch :: Lens' DAT (Maybe (Tree Bool))
webDATsubmitfetch = lens _webDATsubmitfetch (\a b -> a {_webDATsubmitfetch = b})
webDATincludeheader :: Lens' DAT (Maybe (Tree Bool))
webDATincludeheader = lens _webDATincludeheader (\a b -> a {_webDATincludeheader = b})
webDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
webDATcustomext = lens _webDATcustomext (\a b -> a {_webDATcustomext = b})
webDATlanguage :: Lens' DAT (Maybe (Tree Int))
webDATlanguage = lens _webDATlanguage (\a b -> a {_webDATlanguage = b})
webDATasyncfetch :: Lens' DAT (Maybe (Tree Bool))
webDATasyncfetch = lens _webDATasyncfetch (\a b -> a {_webDATasyncfetch = b})
webDATverifypeer :: Lens' DAT (Maybe (Tree Bool))
webDATverifypeer = lens _webDATverifypeer (\a b -> a {_webDATverifypeer = b})
webDATtimeout :: Lens' DAT (Maybe (Tree Int))
webDATtimeout = lens _webDATtimeout (\a b -> a {_webDATtimeout = b})
webDATmethod :: Lens' DAT (Maybe (Tree Int))
webDATmethod = lens _webDATmethod (\a b -> a {_webDATmethod = b})

udtoutDATformat :: Lens' DAT (Maybe (Tree Int))
udtoutDATformat = lens _udtoutDATformat (\a b -> a {_udtoutDATformat = b})
udtoutDATactive :: Lens' DAT (Maybe (Tree Bool))
udtoutDATactive = lens _udtoutDATactive (\a b -> a {_udtoutDATactive = b})
udtoutDATextension :: Lens' DAT (Maybe (Tree Int))
udtoutDATextension = lens _udtoutDATextension (\a b -> a {_udtoutDATextension = b})
udtoutDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
udtoutDATcustomext = lens _udtoutDATcustomext (\a b -> a {_udtoutDATcustomext = b})
udtoutDATprotocol :: Lens' DAT (Maybe (Tree Int))
udtoutDATprotocol = lens _udtoutDATprotocol (\a b -> a {_udtoutDATprotocol = b})
udtoutDATshared :: Lens' DAT (Maybe (Tree Bool))
udtoutDATshared = lens _udtoutDATshared (\a b -> a {_udtoutDATshared = b})
udtoutDATclamp :: Lens' DAT (Maybe (Tree Bool))
udtoutDATclamp = lens _udtoutDATclamp (\a b -> a {_udtoutDATclamp = b})
udtoutDATlanguage :: Lens' DAT (Maybe (Tree Int))
udtoutDATlanguage = lens _udtoutDATlanguage (\a b -> a {_udtoutDATlanguage = b})
udtoutDATmaxlines :: Lens' DAT (Maybe (Tree Int))
udtoutDATmaxlines = lens _udtoutDATmaxlines (\a b -> a {_udtoutDATmaxlines = b})
udtoutDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
udtoutDATexecuteloc = lens _udtoutDATexecuteloc (\a b -> a {_udtoutDATexecuteloc = b})
udtoutDATwordwrap :: Lens' DAT (Maybe (Tree Int))
udtoutDATwordwrap = lens _udtoutDATwordwrap (\a b -> a {_udtoutDATwordwrap = b})
udtoutDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
udtoutDATcallbacks = lens _udtoutDATcallbacks (\a b -> a {_udtoutDATcallbacks = b})
udtoutDATclear :: Lens' DAT (Maybe (Tree Bool))
udtoutDATclear = lens _udtoutDATclear (\a b -> a {_udtoutDATclear = b})
udtoutDATport :: Lens' DAT (Maybe (Tree Int))
udtoutDATport = lens _udtoutDATport (\a b -> a {_udtoutDATport = b})
udtoutDATbytes :: Lens' DAT (Maybe (Tree Bool))
udtoutDATbytes = lens _udtoutDATbytes (\a b -> a {_udtoutDATbytes = b})

indicesDATstart :: Lens' DAT (Maybe (Tree Float))
indicesDATstart = lens _indicesDATstart (\a b -> a {_indicesDATstart = b})
indicesDATend :: Lens' DAT (Maybe (Tree Float))
indicesDATend = lens _indicesDATend (\a b -> a {_indicesDATend = b})
indicesDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
indicesDATcustomext = lens _indicesDATcustomext (\a b -> a {_indicesDATcustomext = b})
indicesDATlanguage :: Lens' DAT (Maybe (Tree Int))
indicesDATlanguage = lens _indicesDATlanguage (\a b -> a {_indicesDATlanguage = b})
indicesDATextension :: Lens' DAT (Maybe (Tree Int))
indicesDATextension = lens _indicesDATextension (\a b -> a {_indicesDATextension = b})
indicesDATlevel :: Lens' DAT (Maybe (Tree Int))
indicesDATlevel = lens _indicesDATlevel (\a b -> a {_indicesDATlevel = b})
indicesDATwordwrap :: Lens' DAT (Maybe (Tree Int))
indicesDATwordwrap = lens _indicesDATwordwrap (\a b -> a {_indicesDATwordwrap = b})
indicesDATorigin :: Lens' DAT (Maybe (Tree Float))
indicesDATorigin = lens _indicesDATorigin (\a b -> a {_indicesDATorigin = b})

datexecuteDATrowchange :: Lens' DAT (Maybe (Tree Bool))
datexecuteDATrowchange = lens _datexecuteDATrowchange (\a b -> a {_datexecuteDATrowchange = b})
datexecuteDATedit :: Lens' DAT (Maybe (Tree Bool))
datexecuteDATedit = lens _datexecuteDATedit (\a b -> a {_datexecuteDATedit = b})
datexecuteDATactive :: Lens' DAT (Maybe (Tree Bool))
datexecuteDATactive = lens _datexecuteDATactive (\a b -> a {_datexecuteDATactive = b})
datexecuteDATextension :: Lens' DAT (Maybe (Tree Int))
datexecuteDATextension = lens _datexecuteDATextension (\a b -> a {_datexecuteDATextension = b})
datexecuteDATtablechange :: Lens' DAT (Maybe (Tree Bool))
datexecuteDATtablechange = lens _datexecuteDATtablechange (\a b -> a {_datexecuteDATtablechange = b})
datexecuteDATexecute :: Lens' DAT (Maybe (Tree Int))
datexecuteDATexecute = lens _datexecuteDATexecute (\a b -> a {_datexecuteDATexecute = b})
datexecuteDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
datexecuteDATcustomext = lens _datexecuteDATcustomext (\a b -> a {_datexecuteDATcustomext = b})
datexecuteDATlanguage :: Lens' DAT (Maybe (Tree Int))
datexecuteDATlanguage = lens _datexecuteDATlanguage (\a b -> a {_datexecuteDATlanguage = b})
datexecuteDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
datexecuteDATexecuteloc = lens _datexecuteDATexecuteloc (\a b -> a {_datexecuteDATexecuteloc = b})
datexecuteDATwordwrap :: Lens' DAT (Maybe (Tree Int))
datexecuteDATwordwrap = lens _datexecuteDATwordwrap (\a b -> a {_datexecuteDATwordwrap = b})
datexecuteDATcolchange :: Lens' DAT (Maybe (Tree Bool))
datexecuteDATcolchange = lens _datexecuteDATcolchange (\a b -> a {_datexecuteDATcolchange = b})
datexecuteDATcellchange :: Lens' DAT (Maybe (Tree Bool))
datexecuteDATcellchange = lens _datexecuteDATcellchange (\a b -> a {_datexecuteDATcellchange = b})
datexecuteDATdat :: Lens' DAT (Maybe (Tree DAT))
datexecuteDATdat = lens _datexecuteDATdat (\a b -> a {_datexecuteDATdat = b})
datexecuteDATsizechange :: Lens' DAT (Maybe (Tree Bool))
datexecuteDATsizechange = lens _datexecuteDATsizechange (\a b -> a {_datexecuteDATsizechange = b})

tableDATcols :: Lens' DAT (Maybe (Tree Int))
tableDATcols = lens _tableDATcols (\a b -> a {_tableDATcols = b})
tableDATfile :: Lens' DAT (Maybe (Tree ByteString))
tableDATfile = lens _tableDATfile (\a b -> a {_tableDATfile = b})
tableDATwritepulse :: Lens' DAT (Maybe (Tree Bool))
tableDATwritepulse = lens _tableDATwritepulse (\a b -> a {_tableDATwritepulse = b})
tableDATedit :: Lens' DAT (Maybe (Tree Bool))
tableDATedit = lens _tableDATedit (\a b -> a {_tableDATedit = b})
tableDATrows :: Lens' DAT (Maybe (Tree Int))
tableDATrows = lens _tableDATrows (\a b -> a {_tableDATrows = b})
tableDATwrite :: Lens' DAT (Maybe (Tree Bool))
tableDATwrite = lens _tableDATwrite (\a b -> a {_tableDATwrite = b})
tableDATloadonstartpulse :: Lens' DAT (Maybe (Tree Bool))
tableDATloadonstartpulse = lens _tableDATloadonstartpulse (\a b -> a {_tableDATloadonstartpulse = b})
tableDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
tableDATcustomext = lens _tableDATcustomext (\a b -> a {_tableDATcustomext = b})
tableDATlanguage :: Lens' DAT (Maybe (Tree Int))
tableDATlanguage = lens _tableDATlanguage (\a b -> a {_tableDATlanguage = b})
tableDATwordwrap :: Lens' DAT (Maybe (Tree Int))
tableDATwordwrap = lens _tableDATwordwrap (\a b -> a {_tableDATwordwrap = b})
tableDATloadonstart :: Lens' DAT (Maybe (Tree Bool))
tableDATloadonstart = lens _tableDATloadonstart (\a b -> a {_tableDATloadonstart = b})
tableDATdims :: Lens' DAT (Maybe (Tree Bool))
tableDATdims = lens _tableDATdims (\a b -> a {_tableDATdims = b})
tableDATextension :: Lens' DAT (Maybe (Tree Int))
tableDATextension = lens _tableDATextension (\a b -> a {_tableDATextension = b})
tableDATremoveblank :: Lens' DAT (Maybe (Tree Bool))
tableDATremoveblank = lens _tableDATremoveblank (\a b -> a {_tableDATremoveblank = b})

xmlDATextension :: Lens' DAT (Maybe (Tree Int))
xmlDATextension = lens _xmlDATextension (\a b -> a {_xmlDATextension = b})
xmlDATpvalue :: Lens' DAT (Maybe (Tree ByteString))
xmlDATpvalue = lens _xmlDATpvalue (\a b -> a {_xmlDATpvalue = b})
xmlDAToavalue :: Lens' DAT (Maybe (Tree ByteString))
xmlDAToavalue = lens _xmlDAToavalue (\a b -> a {_xmlDAToavalue = b})
xmlDATpname :: Lens' DAT (Maybe (Tree ByteString))
xmlDATpname = lens _xmlDATpname (\a b -> a {_xmlDATpname = b})
xmlDATlabel :: Lens' DAT (Maybe (Tree ByteString))
xmlDATlabel = lens _xmlDATlabel (\a b -> a {_xmlDATlabel = b})
xmlDATplabel :: Lens' DAT (Maybe (Tree ByteString))
xmlDATplabel = lens _xmlDATplabel (\a b -> a {_xmlDATplabel = b})
xmlDATmlabel :: Lens' DAT (Maybe (Tree ByteString))
xmlDATmlabel = lens _xmlDATmlabel (\a b -> a {_xmlDATmlabel = b})
xmlDATtext :: Lens' DAT (Maybe (Tree ByteString))
xmlDATtext = lens _xmlDATtext (\a b -> a {_xmlDATtext = b})
xmlDATmerge :: Lens' DAT (Maybe (Tree Int))
xmlDATmerge = lens _xmlDATmerge (\a b -> a {_xmlDATmerge = b})
xmlDATsgml :: Lens' DAT (Maybe (Tree Bool))
xmlDATsgml = lens _xmlDATsgml (\a b -> a {_xmlDATsgml = b})
xmlDATtype :: Lens' DAT (Maybe (Tree ByteString))
xmlDATtype = lens _xmlDATtype (\a b -> a {_xmlDATtype = b})
xmlDAToaname :: Lens' DAT (Maybe (Tree ByteString))
xmlDAToaname = lens _xmlDAToaname (\a b -> a {_xmlDAToaname = b})
xmlDATshow :: Lens' DAT (Maybe (Tree Int))
xmlDATshow = lens _xmlDATshow (\a b -> a {_xmlDATshow = b})
xmlDATptext :: Lens' DAT (Maybe (Tree ByteString))
xmlDATptext = lens _xmlDATptext (\a b -> a {_xmlDATptext = b})
xmlDATname :: Lens' DAT (Maybe (Tree ByteString))
xmlDATname = lens _xmlDATname (\a b -> a {_xmlDATname = b})
xmlDATlprefix :: Lens' DAT (Maybe (Tree Bool))
xmlDATlprefix = lens _xmlDATlprefix (\a b -> a {_xmlDATlprefix = b})
xmlDATptype :: Lens' DAT (Maybe (Tree ByteString))
xmlDATptype = lens _xmlDATptype (\a b -> a {_xmlDATptype = b})
xmlDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
xmlDATcustomext = lens _xmlDATcustomext (\a b -> a {_xmlDATcustomext = b})
xmlDATlanguage :: Lens' DAT (Maybe (Tree Int))
xmlDATlanguage = lens _xmlDATlanguage (\a b -> a {_xmlDATlanguage = b})
xmlDATwordwrap :: Lens' DAT (Maybe (Tree Int))
xmlDATwordwrap = lens _xmlDATwordwrap (\a b -> a {_xmlDATwordwrap = b})
xmlDATvalue :: Lens' DAT (Maybe (Tree ByteString))
xmlDATvalue = lens _xmlDATvalue (\a b -> a {_xmlDATvalue = b})
xmlDAToclabel :: Lens' DAT (Maybe (Tree ByteString))
xmlDAToclabel = lens _xmlDAToclabel (\a b -> a {_xmlDAToclabel = b})

insertDATindex :: Lens' DAT (Maybe (Tree Int))
insertDATindex = lens _insertDATindex (\a b -> a {_insertDATindex = b})
insertDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
insertDATcustomext = lens _insertDATcustomext (\a b -> a {_insertDATcustomext = b})
insertDATlanguage :: Lens' DAT (Maybe (Tree Int))
insertDATlanguage = lens _insertDATlanguage (\a b -> a {_insertDATlanguage = b})
insertDATextension :: Lens' DAT (Maybe (Tree Int))
insertDATextension = lens _insertDATextension (\a b -> a {_insertDATextension = b})
insertDATcontents :: Lens' DAT (Maybe (Tree ByteString))
insertDATcontents = lens _insertDATcontents (\a b -> a {_insertDATcontents = b})
insertDATinsert :: Lens' DAT (Maybe (Tree Int))
insertDATinsert = lens _insertDATinsert (\a b -> a {_insertDATinsert = b})
insertDATwordwrap :: Lens' DAT (Maybe (Tree Int))
insertDATwordwrap = lens _insertDATwordwrap (\a b -> a {_insertDATwordwrap = b})
insertDATat :: Lens' DAT (Maybe (Tree Int))
insertDATat = lens _insertDATat (\a b -> a {_insertDATat = b})

executeDATdevicechange :: Lens' DAT (Maybe (Tree Bool))
executeDATdevicechange = lens _executeDATdevicechange (\a b -> a {_executeDATdevicechange = b})
executeDATstart :: Lens' DAT (Maybe (Tree Bool))
executeDATstart = lens _executeDATstart (\a b -> a {_executeDATstart = b})
executeDATactive :: Lens' DAT (Maybe (Tree Bool))
executeDATactive = lens _executeDATactive (\a b -> a {_executeDATactive = b})
executeDATextension :: Lens' DAT (Maybe (Tree Int))
executeDATextension = lens _executeDATextension (\a b -> a {_executeDATextension = b})
executeDATplaystatechange :: Lens' DAT (Maybe (Tree Bool))
executeDATplaystatechange = lens _executeDATplaystatechange (\a b -> a {_executeDATplaystatechange = b})
executeDATedit :: Lens' DAT (Maybe (Tree Bool))
executeDATedit = lens _executeDATedit (\a b -> a {_executeDATedit = b})
executeDATwordwrap :: Lens' DAT (Maybe (Tree Int))
executeDATwordwrap = lens _executeDATwordwrap (\a b -> a {_executeDATwordwrap = b})
executeDATprojectpostsave :: Lens' DAT (Maybe (Tree Bool))
executeDATprojectpostsave = lens _executeDATprojectpostsave (\a b -> a {_executeDATprojectpostsave = b})
executeDATframeend :: Lens' DAT (Maybe (Tree Bool))
executeDATframeend = lens _executeDATframeend (\a b -> a {_executeDATframeend = b})
executeDATprojectpresave :: Lens' DAT (Maybe (Tree Bool))
executeDATprojectpresave = lens _executeDATprojectpresave (\a b -> a {_executeDATprojectpresave = b})
executeDATcreate :: Lens' DAT (Maybe (Tree Bool))
executeDATcreate = lens _executeDATcreate (\a b -> a {_executeDATcreate = b})
executeDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
executeDATcustomext = lens _executeDATcustomext (\a b -> a {_executeDATcustomext = b})
executeDATexit :: Lens' DAT (Maybe (Tree Bool))
executeDATexit = lens _executeDATexit (\a b -> a {_executeDATexit = b})
executeDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
executeDATexecuteloc = lens _executeDATexecuteloc (\a b -> a {_executeDATexecuteloc = b})
executeDATframestart :: Lens' DAT (Maybe (Tree Bool))
executeDATframestart = lens _executeDATframestart (\a b -> a {_executeDATframestart = b})
executeDATlanguage :: Lens' DAT (Maybe (Tree Int))
executeDATlanguage = lens _executeDATlanguage (\a b -> a {_executeDATlanguage = b})

oscinDATbundletimestamp :: Lens' DAT (Maybe (Tree Bool))
oscinDATbundletimestamp = lens _oscinDATbundletimestamp (\a b -> a {_oscinDATbundletimestamp = b})
oscinDATport :: Lens' DAT (Maybe (Tree Int))
oscinDATport = lens _oscinDATport (\a b -> a {_oscinDATport = b})
oscinDATclear :: Lens' DAT (Maybe (Tree Bool))
oscinDATclear = lens _oscinDATclear (\a b -> a {_oscinDATclear = b})
oscinDATactive :: Lens' DAT (Maybe (Tree Bool))
oscinDATactive = lens _oscinDATactive (\a b -> a {_oscinDATactive = b})
oscinDATextension :: Lens' DAT (Maybe (Tree Int))
oscinDATextension = lens _oscinDATextension (\a b -> a {_oscinDATextension = b})
oscinDATprotocol :: Lens' DAT (Maybe (Tree Int))
oscinDATprotocol = lens _oscinDATprotocol (\a b -> a {_oscinDATprotocol = b})
oscinDATsplitmessage :: Lens' DAT (Maybe (Tree Bool))
oscinDATsplitmessage = lens _oscinDATsplitmessage (\a b -> a {_oscinDATsplitmessage = b})
oscinDATaddress :: Lens' DAT (Maybe (Tree ByteString))
oscinDATaddress = lens _oscinDATaddress (\a b -> a {_oscinDATaddress = b})
oscinDATshared :: Lens' DAT (Maybe (Tree Bool))
oscinDATshared = lens _oscinDATshared (\a b -> a {_oscinDATshared = b})
oscinDATclamp :: Lens' DAT (Maybe (Tree Bool))
oscinDATclamp = lens _oscinDATclamp (\a b -> a {_oscinDATclamp = b})
oscinDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
oscinDATcustomext = lens _oscinDATcustomext (\a b -> a {_oscinDATcustomext = b})
oscinDATmaxlines :: Lens' DAT (Maybe (Tree Int))
oscinDATmaxlines = lens _oscinDATmaxlines (\a b -> a {_oscinDATmaxlines = b})
oscinDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
oscinDATexecuteloc = lens _oscinDATexecuteloc (\a b -> a {_oscinDATexecuteloc = b})
oscinDATwordwrap :: Lens' DAT (Maybe (Tree Int))
oscinDATwordwrap = lens _oscinDATwordwrap (\a b -> a {_oscinDATwordwrap = b})
oscinDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
oscinDATcallbacks = lens _oscinDATcallbacks (\a b -> a {_oscinDATcallbacks = b})
oscinDATlanguage :: Lens' DAT (Maybe (Tree Int))
oscinDATlanguage = lens _oscinDATlanguage (\a b -> a {_oscinDATlanguage = b})
oscinDATtypetag :: Lens' DAT (Maybe (Tree Bool))
oscinDATtypetag = lens _oscinDATtypetag (\a b -> a {_oscinDATtypetag = b})
oscinDATaddscope :: Lens' DAT (Maybe (Tree ByteString))
oscinDATaddscope = lens _oscinDATaddscope (\a b -> a {_oscinDATaddscope = b})
oscinDATsplitbundle :: Lens' DAT (Maybe (Tree Bool))
oscinDATsplitbundle = lens _oscinDATsplitbundle (\a b -> a {_oscinDATsplitbundle = b})
oscinDATbytes :: Lens' DAT (Maybe (Tree Bool))
oscinDATbytes = lens _oscinDATbytes (\a b -> a {_oscinDATbytes = b})

udtinDATformat :: Lens' DAT (Maybe (Tree Int))
udtinDATformat = lens _udtinDATformat (\a b -> a {_udtinDATformat = b})
udtinDATactive :: Lens' DAT (Maybe (Tree Bool))
udtinDATactive = lens _udtinDATactive (\a b -> a {_udtinDATactive = b})
udtinDATextension :: Lens' DAT (Maybe (Tree Int))
udtinDATextension = lens _udtinDATextension (\a b -> a {_udtinDATextension = b})
udtinDATcustomext :: Lens' DAT (Maybe (Tree ByteString))
udtinDATcustomext = lens _udtinDATcustomext (\a b -> a {_udtinDATcustomext = b})
udtinDATprotocol :: Lens' DAT (Maybe (Tree Int))
udtinDATprotocol = lens _udtinDATprotocol (\a b -> a {_udtinDATprotocol = b})
udtinDATaddress :: Lens' DAT (Maybe (Tree ByteString))
udtinDATaddress = lens _udtinDATaddress (\a b -> a {_udtinDATaddress = b})
udtinDATshared :: Lens' DAT (Maybe (Tree Bool))
udtinDATshared = lens _udtinDATshared (\a b -> a {_udtinDATshared = b})
udtinDATclamp :: Lens' DAT (Maybe (Tree Bool))
udtinDATclamp = lens _udtinDATclamp (\a b -> a {_udtinDATclamp = b})
udtinDATlanguage :: Lens' DAT (Maybe (Tree Int))
udtinDATlanguage = lens _udtinDATlanguage (\a b -> a {_udtinDATlanguage = b})
udtinDATmaxlines :: Lens' DAT (Maybe (Tree Int))
udtinDATmaxlines = lens _udtinDATmaxlines (\a b -> a {_udtinDATmaxlines = b})
udtinDATexecuteloc :: Lens' DAT (Maybe (Tree Int))
udtinDATexecuteloc = lens _udtinDATexecuteloc (\a b -> a {_udtinDATexecuteloc = b})
udtinDATwordwrap :: Lens' DAT (Maybe (Tree Int))
udtinDATwordwrap = lens _udtinDATwordwrap (\a b -> a {_udtinDATwordwrap = b})
udtinDATcallbacks :: Lens' DAT (Maybe (Tree DAT))
udtinDATcallbacks = lens _udtinDATcallbacks (\a b -> a {_udtinDATcallbacks = b})
udtinDATclear :: Lens' DAT (Maybe (Tree Bool))
udtinDATclear = lens _udtinDATclear (\a b -> a {_udtinDATclear = b})
udtinDATport :: Lens' DAT (Maybe (Tree Int))
udtinDATport = lens _udtinDATport (\a b -> a {_udtinDATport = b})
udtinDATbytes :: Lens' DAT (Maybe (Tree Bool))
udtinDATbytes = lens _udtinDATbytes (\a b -> a {_udtinDATbytes = b})

fieldCOMPtopborder :: Lens' COMP (Maybe (Tree Int))
fieldCOMPtopborder = lens _fieldCOMPtopborder (\a b -> a {_fieldCOMPtopborder = b})
fieldCOMPfieldprotected :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPfieldprotected = lens _fieldCOMPfieldprotected (\a b -> a {_fieldCOMPfieldprotected = b})
fieldCOMPscrollbarthickness :: Lens' COMP (Maybe (Tree Int))
fieldCOMPscrollbarthickness = lens _fieldCOMPscrollbarthickness (\a b -> a {_fieldCOMPscrollbarthickness = b})
fieldCOMPw :: Lens' COMP (Maybe (Tree Int))
fieldCOMPw = lens _fieldCOMPw (\a b -> a {_fieldCOMPw = b})
fieldCOMPalignorder :: Lens' COMP (Maybe (Tree Float))
fieldCOMPalignorder = lens _fieldCOMPalignorder (\a b -> a {_fieldCOMPalignorder = b})
fieldCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPloadondemand = lens _fieldCOMPloadondemand (\a b -> a {_fieldCOMPloadondemand = b})
fieldCOMPjustifyh :: Lens' COMP (Maybe (Tree Int))
fieldCOMPjustifyh = lens _fieldCOMPjustifyh (\a b -> a {_fieldCOMPjustifyh = b})
fieldCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPpromoteextension4 = lens _fieldCOMPpromoteextension4 (\a b -> a {_fieldCOMPpromoteextension4 = b})
fieldCOMPdropdestscript :: Lens' COMP (Maybe (Tree DAT))
fieldCOMPdropdestscript = lens _fieldCOMPdropdestscript (\a b -> a {_fieldCOMPdropdestscript = b})
fieldCOMPrepositionxmin :: Lens' COMP (Maybe (Tree Float))
fieldCOMPrepositionxmin = lens _fieldCOMPrepositionxmin (\a b -> a {_fieldCOMPrepositionxmin = b})
fieldCOMPx :: Lens' COMP (Maybe (Tree Int))
fieldCOMPx = lens _fieldCOMPx (\a b -> a {_fieldCOMPx = b})
fieldCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
fieldCOMPnodeview = lens _fieldCOMPnodeview (\a b -> a {_fieldCOMPnodeview = b})
fieldCOMPrepositionymax :: Lens' COMP (Maybe (Tree Float))
fieldCOMPrepositionymax = lens _fieldCOMPrepositionymax (\a b -> a {_fieldCOMPrepositionymax = b})
fieldCOMPmargint :: Lens' COMP (Maybe (Tree Float))
fieldCOMPmargint = lens _fieldCOMPmargint (\a b -> a {_fieldCOMPmargint = b})
fieldCOMPresizer :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPresizer = lens _fieldCOMPresizer (\a b -> a {_fieldCOMPresizer = b})
fieldCOMPdroptypescript :: Lens' COMP (Maybe (Tree DAT))
fieldCOMPdroptypescript = lens _fieldCOMPdroptypescript (\a b -> a {_fieldCOMPdroptypescript = b})
fieldCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPpromoteextension2 = lens _fieldCOMPpromoteextension2 (\a b -> a {_fieldCOMPpromoteextension2 = b})
fieldCOMPfixedaspect :: Lens' COMP (Maybe (Tree Int))
fieldCOMPfixedaspect = lens _fieldCOMPfixedaspect (\a b -> a {_fieldCOMPfixedaspect = b})
fieldCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
fieldCOMPextname1 = lens _fieldCOMPextname1 (\a b -> a {_fieldCOMPextname1 = b})
fieldCOMPmarginl :: Lens' COMP (Maybe (Tree Float))
fieldCOMPmarginl = lens _fieldCOMPmarginl (\a b -> a {_fieldCOMPmarginl = b})
fieldCOMPdodisablecolor :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPdodisablecolor = lens _fieldCOMPdodisablecolor (\a b -> a {_fieldCOMPdodisablecolor = b})
fieldCOMPmultitouch :: Lens' COMP (Maybe (Tree Int))
fieldCOMPmultitouch = lens _fieldCOMPmultitouch (\a b -> a {_fieldCOMPmultitouch = b})
fieldCOMPbgalpha :: Lens' COMP (Maybe (Tree Float))
fieldCOMPbgalpha = lens _fieldCOMPbgalpha (\a b -> a {_fieldCOMPbgalpha = b})
fieldCOMPfieldnoshift :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPfieldnoshift = lens _fieldCOMPfieldnoshift (\a b -> a {_fieldCOMPfieldnoshift = b})
fieldCOMPhmode :: Lens' COMP (Maybe (Tree Int))
fieldCOMPhmode = lens _fieldCOMPhmode (\a b -> a {_fieldCOMPhmode = b})
fieldCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPsavebackup = lens _fieldCOMPsavebackup (\a b -> a {_fieldCOMPsavebackup = b})
fieldCOMPuvbuttonsmiddle :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPuvbuttonsmiddle = lens _fieldCOMPuvbuttonsmiddle (\a b -> a {_fieldCOMPuvbuttonsmiddle = b})
fieldCOMPleftanchor :: Lens' COMP (Maybe (Tree Float))
fieldCOMPleftanchor = lens _fieldCOMPleftanchor (\a b -> a {_fieldCOMPleftanchor = b})
fieldCOMPclickthrough :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPclickthrough = lens _fieldCOMPclickthrough (\a b -> a {_fieldCOMPclickthrough = b})
fieldCOMPdisablealpha :: Lens' COMP (Maybe (Tree Float))
fieldCOMPdisablealpha = lens _fieldCOMPdisablealpha (\a b -> a {_fieldCOMPdisablealpha = b})
fieldCOMPvmode :: Lens' COMP (Maybe (Tree Int))
fieldCOMPvmode = lens _fieldCOMPvmode (\a b -> a {_fieldCOMPvmode = b})
fieldCOMPvorigin :: Lens' COMP (Maybe (Tree Float))
fieldCOMPvorigin = lens _fieldCOMPvorigin (\a b -> a {_fieldCOMPvorigin = b})
fieldCOMPdrag :: Lens' COMP (Maybe (Tree Int))
fieldCOMPdrag = lens _fieldCOMPdrag (\a b -> a {_fieldCOMPdrag = b})
fieldCOMPdisablecolor :: Lens' COMP (Vec3)
fieldCOMPdisablecolor = lens _fieldCOMPdisablecolor (\a b -> a {_fieldCOMPdisablecolor = b})
fieldCOMPresizehmin :: Lens' COMP (Maybe (Tree Float))
fieldCOMPresizehmin = lens _fieldCOMPresizehmin (\a b -> a {_fieldCOMPresizehmin = b})
fieldCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
fieldCOMPextname3 = lens _fieldCOMPextname3 (\a b -> a {_fieldCOMPextname3 = b})
fieldCOMPborderaalpha :: Lens' COMP (Maybe (Tree Float))
fieldCOMPborderaalpha = lens _fieldCOMPborderaalpha (\a b -> a {_fieldCOMPborderaalpha = b})
fieldCOMPoverlay :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPoverlay = lens _fieldCOMPoverlay (\a b -> a {_fieldCOMPoverlay = b})
fieldCOMPrepositionymin :: Lens' COMP (Maybe (Tree Float))
fieldCOMPrepositionymin = lens _fieldCOMPrepositionymin (\a b -> a {_fieldCOMPrepositionymin = b})
fieldCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPenablecloning = lens _fieldCOMPenablecloning (\a b -> a {_fieldCOMPenablecloning = b})
fieldCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
fieldCOMPsubcompname = lens _fieldCOMPsubcompname (\a b -> a {_fieldCOMPsubcompname = b})
fieldCOMPalign :: Lens' COMP (Maybe (Tree Int))
fieldCOMPalign = lens _fieldCOMPalign (\a b -> a {_fieldCOMPalign = b})
fieldCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPreloadtoxonstart = lens _fieldCOMPreloadtoxonstart (\a b -> a {_fieldCOMPreloadtoxonstart = b})
fieldCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPreinitnet = lens _fieldCOMPreinitnet (\a b -> a {_fieldCOMPreinitnet = b})
fieldCOMPfieldcursor :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPfieldcursor = lens _fieldCOMPfieldcursor (\a b -> a {_fieldCOMPfieldcursor = b})
fieldCOMPmarginr :: Lens' COMP (Maybe (Tree Float))
fieldCOMPmarginr = lens _fieldCOMPmarginr (\a b -> a {_fieldCOMPmarginr = b})
fieldCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
fieldCOMPparentshortcut = lens _fieldCOMPparentshortcut (\a b -> a {_fieldCOMPparentshortcut = b})
fieldCOMPresizet :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPresizet = lens _fieldCOMPresizet (\a b -> a {_fieldCOMPresizet = b})
fieldCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
fieldCOMPextension4 = lens _fieldCOMPextension4 (\a b -> a {_fieldCOMPextension4 = b})
fieldCOMPfieldconspaces :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPfieldconspaces = lens _fieldCOMPfieldconspaces (\a b -> a {_fieldCOMPfieldconspaces = b})
fieldCOMPleftborderi :: Lens' COMP (Maybe (Tree Int))
fieldCOMPleftborderi = lens _fieldCOMPleftborderi (\a b -> a {_fieldCOMPleftborderi = b})
fieldCOMPrepocomp :: Lens' COMP (Maybe (Tree COMP))
fieldCOMPrepocomp = lens _fieldCOMPrepocomp (\a b -> a {_fieldCOMPrepocomp = b})
fieldCOMPtopanchor :: Lens' COMP (Maybe (Tree Float))
fieldCOMPtopanchor = lens _fieldCOMPtopanchor (\a b -> a {_fieldCOMPtopanchor = b})
fieldCOMPanchordrag :: Lens' COMP (Maybe (Tree Int))
fieldCOMPanchordrag = lens _fieldCOMPanchordrag (\a b -> a {_fieldCOMPanchordrag = b})
fieldCOMPbottomborderi :: Lens' COMP (Maybe (Tree Int))
fieldCOMPbottomborderi = lens _fieldCOMPbottomborderi (\a b -> a {_fieldCOMPbottomborderi = b})
fieldCOMPrightborder :: Lens' COMP (Maybe (Tree Int))
fieldCOMPrightborder = lens _fieldCOMPrightborder (\a b -> a {_fieldCOMPrightborder = b})
fieldCOMPbottomborder :: Lens' COMP (Maybe (Tree Int))
fieldCOMPbottomborder = lens _fieldCOMPbottomborder (\a b -> a {_fieldCOMPbottomborder = b})
fieldCOMPlayer :: Lens' COMP (Maybe (Tree Float))
fieldCOMPlayer = lens _fieldCOMPlayer (\a b -> a {_fieldCOMPlayer = b})
fieldCOMPchop :: Lens' COMP (Maybe (Tree CHOP))
fieldCOMPchop = lens _fieldCOMPchop (\a b -> a {_fieldCOMPchop = b})
fieldCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPreinitextensions = lens _fieldCOMPreinitextensions (\a b -> a {_fieldCOMPreinitextensions = b})
fieldCOMPtopborderi :: Lens' COMP (Maybe (Tree Int))
fieldCOMPtopborderi = lens _fieldCOMPtopborderi (\a b -> a {_fieldCOMPtopborderi = b})
fieldCOMPalignallow :: Lens' COMP (Maybe (Tree Int))
fieldCOMPalignallow = lens _fieldCOMPalignallow (\a b -> a {_fieldCOMPalignallow = b})
fieldCOMPdragdropcallbacks :: Lens' COMP (Maybe (Tree DAT))
fieldCOMPdragdropcallbacks = lens _fieldCOMPdragdropcallbacks (\a b -> a {_fieldCOMPdragdropcallbacks = b})
fieldCOMPrightborderi :: Lens' COMP (Maybe (Tree Int))
fieldCOMPrightborderi = lens _fieldCOMPrightborderi (\a b -> a {_fieldCOMPrightborderi = b})
fieldCOMPresizel :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPresizel = lens _fieldCOMPresizel (\a b -> a {_fieldCOMPresizel = b})
fieldCOMPvfillweight :: Lens' COMP (Maybe (Tree Float))
fieldCOMPvfillweight = lens _fieldCOMPvfillweight (\a b -> a {_fieldCOMPvfillweight = b})
fieldCOMPborderover :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPborderover = lens _fieldCOMPborderover (\a b -> a {_fieldCOMPborderover = b})
fieldCOMPnamedchop :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPnamedchop = lens _fieldCOMPnamedchop (\a b -> a {_fieldCOMPnamedchop = b})
fieldCOMPmarginb :: Lens' COMP (Maybe (Tree Float))
fieldCOMPmarginb = lens _fieldCOMPmarginb (\a b -> a {_fieldCOMPmarginb = b})
fieldCOMPrepositionxmax :: Lens' COMP (Maybe (Tree Float))
fieldCOMPrepositionxmax = lens _fieldCOMPrepositionxmax (\a b -> a {_fieldCOMPrepositionxmax = b})
fieldCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
fieldCOMPextension2 = lens _fieldCOMPextension2 (\a b -> a {_fieldCOMPextension2 = b})
fieldCOMPborderbalpha :: Lens' COMP (Maybe (Tree Float))
fieldCOMPborderbalpha = lens _fieldCOMPborderbalpha (\a b -> a {_fieldCOMPborderbalpha = b})
fieldCOMPjustifyv :: Lens' COMP (Maybe (Tree Int))
fieldCOMPjustifyv = lens _fieldCOMPjustifyv (\a b -> a {_fieldCOMPjustifyv = b})
fieldCOMPpostoffset :: Lens' COMP (Vec2)
fieldCOMPpostoffset = lens _fieldCOMPpostoffset (\a b -> a {_fieldCOMPpostoffset = b})
fieldCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPpromoteextension3 = lens _fieldCOMPpromoteextension3 (\a b -> a {_fieldCOMPpromoteextension3 = b})
fieldCOMPtopoffset :: Lens' COMP (Maybe (Tree Float))
fieldCOMPtopoffset = lens _fieldCOMPtopoffset (\a b -> a {_fieldCOMPtopoffset = b})
fieldCOMPcomposite :: Lens' COMP (Maybe (Tree Int))
fieldCOMPcomposite = lens _fieldCOMPcomposite (\a b -> a {_fieldCOMPcomposite = b})
fieldCOMPdragscript :: Lens' COMP (Maybe (Tree DAT))
fieldCOMPdragscript = lens _fieldCOMPdragscript (\a b -> a {_fieldCOMPdragscript = b})
fieldCOMPmultrgb :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPmultrgb = lens _fieldCOMPmultrgb (\a b -> a {_fieldCOMPmultrgb = b})
fieldCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
fieldCOMPextension1 = lens _fieldCOMPextension1 (\a b -> a {_fieldCOMPextension1 = b})
fieldCOMPdrop :: Lens' COMP (Maybe (Tree Int))
fieldCOMPdrop = lens _fieldCOMPdrop (\a b -> a {_fieldCOMPdrop = b})
fieldCOMPfieldfocus :: Lens' COMP (Maybe (Tree DAT))
fieldCOMPfieldfocus = lens _fieldCOMPfieldfocus (\a b -> a {_fieldCOMPfieldfocus = b})
fieldCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPpromoteextension1 = lens _fieldCOMPpromoteextension1 (\a b -> a {_fieldCOMPpromoteextension1 = b})
fieldCOMPbordera :: Lens' COMP (Vec3)
fieldCOMPbordera = lens _fieldCOMPbordera (\a b -> a {_fieldCOMPbordera = b})
fieldCOMPuvbuttonsleft :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPuvbuttonsleft = lens _fieldCOMPuvbuttonsleft (\a b -> a {_fieldCOMPuvbuttonsleft = b})
fieldCOMPbgcolor :: Lens' COMP (Vec3)
fieldCOMPbgcolor = lens _fieldCOMPbgcolor (\a b -> a {_fieldCOMPbgcolor = b})
fieldCOMPresizehmax :: Lens' COMP (Maybe (Tree Float))
fieldCOMPresizehmax = lens _fieldCOMPresizehmax (\a b -> a {_fieldCOMPresizehmax = b})
fieldCOMPhelpdat :: Lens' COMP (Maybe (Tree DAT))
fieldCOMPhelpdat = lens _fieldCOMPhelpdat (\a b -> a {_fieldCOMPhelpdat = b})
fieldCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
fieldCOMPextension3 = lens _fieldCOMPextension3 (\a b -> a {_fieldCOMPextension3 = b})
fieldCOMPfieldtype :: Lens' COMP (Maybe (Tree Int))
fieldCOMPfieldtype = lens _fieldCOMPfieldtype (\a b -> a {_fieldCOMPfieldtype = b})
fieldCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
fieldCOMPexternaltox = lens _fieldCOMPexternaltox (\a b -> a {_fieldCOMPexternaltox = b})
fieldCOMPrightanchor :: Lens' COMP (Maybe (Tree Float))
fieldCOMPrightanchor = lens _fieldCOMPrightanchor (\a b -> a {_fieldCOMPrightanchor = b})
fieldCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
fieldCOMPextname2 = lens _fieldCOMPextname2 (\a b -> a {_fieldCOMPextname2 = b})
fieldCOMPh :: Lens' COMP (Maybe (Tree Int))
fieldCOMPh = lens _fieldCOMPh (\a b -> a {_fieldCOMPh = b})
fieldCOMPleftborder :: Lens' COMP (Maybe (Tree Int))
fieldCOMPleftborder = lens _fieldCOMPleftborder (\a b -> a {_fieldCOMPleftborder = b})
fieldCOMPtopfill :: Lens' COMP (Maybe (Tree Int))
fieldCOMPtopfill = lens _fieldCOMPtopfill (\a b -> a {_fieldCOMPtopfill = b})
fieldCOMPresizewmin :: Lens' COMP (Maybe (Tree Float))
fieldCOMPresizewmin = lens _fieldCOMPresizewmin (\a b -> a {_fieldCOMPresizewmin = b})
fieldCOMPmouserel :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPmouserel = lens _fieldCOMPmouserel (\a b -> a {_fieldCOMPmouserel = b})
fieldCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPenablecloningpulse = lens _fieldCOMPenablecloningpulse (\a b -> a {_fieldCOMPenablecloningpulse = b})
fieldCOMPoffset :: Lens' COMP (Vec2)
fieldCOMPoffset = lens _fieldCOMPoffset (\a b -> a {_fieldCOMPoffset = b})
fieldCOMPresizeb :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPresizeb = lens _fieldCOMPresizeb (\a b -> a {_fieldCOMPresizeb = b})
fieldCOMPleftoffset :: Lens' COMP (Maybe (Tree Float))
fieldCOMPleftoffset = lens _fieldCOMPleftoffset (\a b -> a {_fieldCOMPleftoffset = b})
fieldCOMPy :: Lens' COMP (Maybe (Tree Int))
fieldCOMPy = lens _fieldCOMPy (\a b -> a {_fieldCOMPy = b})
fieldCOMPpvscrollbar :: Lens' COMP (Maybe (Tree Int))
fieldCOMPpvscrollbar = lens _fieldCOMPpvscrollbar (\a b -> a {_fieldCOMPpvscrollbar = b})
fieldCOMPcrop :: Lens' COMP (Maybe (Tree Int))
fieldCOMPcrop = lens _fieldCOMPcrop (\a b -> a {_fieldCOMPcrop = b})
fieldCOMPbottomoffset :: Lens' COMP (Maybe (Tree Float))
fieldCOMPbottomoffset = lens _fieldCOMPbottomoffset (\a b -> a {_fieldCOMPbottomoffset = b})
fieldCOMPdisplay :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPdisplay = lens _fieldCOMPdisplay (\a b -> a {_fieldCOMPdisplay = b})
fieldCOMPfit :: Lens' COMP (Maybe (Tree Int))
fieldCOMPfit = lens _fieldCOMPfit (\a b -> a {_fieldCOMPfit = b})
fieldCOMPaspect :: Lens' COMP (Maybe (Tree Float))
fieldCOMPaspect = lens _fieldCOMPaspect (\a b -> a {_fieldCOMPaspect = b})
fieldCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
fieldCOMPextname4 = lens _fieldCOMPextname4 (\a b -> a {_fieldCOMPextname4 = b})
fieldCOMPuvbuttonsright :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPuvbuttonsright = lens _fieldCOMPuvbuttonsright (\a b -> a {_fieldCOMPuvbuttonsright = b})
fieldCOMPresizewmax :: Lens' COMP (Maybe (Tree Float))
fieldCOMPresizewmax = lens _fieldCOMPresizewmax (\a b -> a {_fieldCOMPresizewmax = b})
fieldCOMPborderb :: Lens' COMP (Vec3)
fieldCOMPborderb = lens _fieldCOMPborderb (\a b -> a {_fieldCOMPborderb = b})
fieldCOMPbottomanchor :: Lens' COMP (Maybe (Tree Float))
fieldCOMPbottomanchor = lens _fieldCOMPbottomanchor (\a b -> a {_fieldCOMPbottomanchor = b})
fieldCOMPsizefromwindow :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPsizefromwindow = lens _fieldCOMPsizefromwindow (\a b -> a {_fieldCOMPsizefromwindow = b})
fieldCOMPopacity :: Lens' COMP (Maybe (Tree Float))
fieldCOMPopacity = lens _fieldCOMPopacity (\a b -> a {_fieldCOMPopacity = b})
fieldCOMPtop :: Lens' COMP (Maybe (Tree TOP))
fieldCOMPtop = lens _fieldCOMPtop (\a b -> a {_fieldCOMPtop = b})
fieldCOMPmousewheel :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPmousewheel = lens _fieldCOMPmousewheel (\a b -> a {_fieldCOMPmousewheel = b})
fieldCOMPoverridemethod :: Lens' COMP (Maybe (Tree Int))
fieldCOMPoverridemethod = lens _fieldCOMPoverridemethod (\a b -> a {_fieldCOMPoverridemethod = b})
fieldCOMPreposition :: Lens' COMP (Maybe (Tree Int))
fieldCOMPreposition = lens _fieldCOMPreposition (\a b -> a {_fieldCOMPreposition = b})
fieldCOMPenable :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPenable = lens _fieldCOMPenable (\a b -> a {_fieldCOMPenable = b})
fieldCOMPfieldexpand :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPfieldexpand = lens _fieldCOMPfieldexpand (\a b -> a {_fieldCOMPfieldexpand = b})
fieldCOMPrightoffset :: Lens' COMP (Maybe (Tree Float))
fieldCOMPrightoffset = lens _fieldCOMPrightoffset (\a b -> a {_fieldCOMPrightoffset = b})
fieldCOMPvieweraspect :: Lens' COMP (Maybe (Tree Int))
fieldCOMPvieweraspect = lens _fieldCOMPvieweraspect (\a b -> a {_fieldCOMPvieweraspect = b})
fieldCOMPalignmax :: Lens' COMP (Maybe (Tree Int))
fieldCOMPalignmax = lens _fieldCOMPalignmax (\a b -> a {_fieldCOMPalignmax = b})
fieldCOMPscrolloverlay :: Lens' COMP (Maybe (Tree Int))
fieldCOMPscrolloverlay = lens _fieldCOMPscrolloverlay (\a b -> a {_fieldCOMPscrolloverlay = b})
fieldCOMPclone :: Lens' COMP (Maybe (Tree COMP))
fieldCOMPclone = lens _fieldCOMPclone (\a b -> a {_fieldCOMPclone = b})
fieldCOMPkeepmemory :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPkeepmemory = lens _fieldCOMPkeepmemory (\a b -> a {_fieldCOMPkeepmemory = b})
fieldCOMPdropscript :: Lens' COMP (Maybe (Tree DAT))
fieldCOMPdropscript = lens _fieldCOMPdropscript (\a b -> a {_fieldCOMPdropscript = b})
fieldCOMPfieldlock :: Lens' COMP (Maybe (Tree Bool))
fieldCOMPfieldlock = lens _fieldCOMPfieldlock (\a b -> a {_fieldCOMPfieldlock = b})
fieldCOMPhfillweight :: Lens' COMP (Maybe (Tree Float))
fieldCOMPhfillweight = lens _fieldCOMPhfillweight (\a b -> a {_fieldCOMPhfillweight = b})
fieldCOMPhorigin :: Lens' COMP (Maybe (Tree Float))
fieldCOMPhorigin = lens _fieldCOMPhorigin (\a b -> a {_fieldCOMPhorigin = b})
fieldCOMPspacing :: Lens' COMP (Maybe (Tree Float))
fieldCOMPspacing = lens _fieldCOMPspacing (\a b -> a {_fieldCOMPspacing = b})
fieldCOMPscale :: Lens' COMP (Vec2)
fieldCOMPscale = lens _fieldCOMPscale (\a b -> a {_fieldCOMPscale = b})
fieldCOMPphscrollbar :: Lens' COMP (Maybe (Tree Int))
fieldCOMPphscrollbar = lens _fieldCOMPphscrollbar (\a b -> a {_fieldCOMPphscrollbar = b})
fieldCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
fieldCOMPopshortcut = lens _fieldCOMPopshortcut (\a b -> a {_fieldCOMPopshortcut = b})
fieldCOMPcursor :: Lens' COMP (Maybe (Tree Int))
fieldCOMPcursor = lens _fieldCOMPcursor (\a b -> a {_fieldCOMPcursor = b})

sharedmemoutCOMPinstancea :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancea = lens _sharedmemoutCOMPinstancea (\a b -> a {_sharedmemoutCOMPinstancea = b})
sharedmemoutCOMPinstancerotupy :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancerotupy = lens _sharedmemoutCOMPinstancerotupy (\a b -> a {_sharedmemoutCOMPinstancerotupy = b})
sharedmemoutCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPextname1 = lens _sharedmemoutCOMPextname1 (\a b -> a {_sharedmemoutCOMPextname1 = b})
sharedmemoutCOMPinstancerottoz :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancerottoz = lens _sharedmemoutCOMPinstancerottoz (\a b -> a {_sharedmemoutCOMPinstancerottoz = b})
sharedmemoutCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPpromoteextension4 = lens _sharedmemoutCOMPpromoteextension4 (\a b -> a {_sharedmemoutCOMPpromoteextension4 = b})
sharedmemoutCOMPinstanceb :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstanceb = lens _sharedmemoutCOMPinstanceb (\a b -> a {_sharedmemoutCOMPinstanceb = b})
sharedmemoutCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPextension4 = lens _sharedmemoutCOMPextension4 (\a b -> a {_sharedmemoutCOMPextension4 = b})
sharedmemoutCOMPpathorient :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPpathorient = lens _sharedmemoutCOMPpathorient (\a b -> a {_sharedmemoutCOMPpathorient = b})
sharedmemoutCOMProll :: Lens' COMP (Maybe (Tree Float))
sharedmemoutCOMProll = lens _sharedmemoutCOMProll (\a b -> a {_sharedmemoutCOMProll = b})
sharedmemoutCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPnodeview = lens _sharedmemoutCOMPnodeview (\a b -> a {_sharedmemoutCOMPnodeview = b})
sharedmemoutCOMPinstancepx :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancepx = lens _sharedmemoutCOMPinstancepx (\a b -> a {_sharedmemoutCOMPinstancepx = b})
sharedmemoutCOMPpt :: Lens' COMP (Vec3)
sharedmemoutCOMPpt = lens _sharedmemoutCOMPpt (\a b -> a {_sharedmemoutCOMPpt = b})
sharedmemoutCOMPinstancetexanisotropy :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstancetexanisotropy = lens _sharedmemoutCOMPinstancetexanisotropy (\a b -> a {_sharedmemoutCOMPinstancetexanisotropy = b})
sharedmemoutCOMPprioritymethod :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPprioritymethod = lens _sharedmemoutCOMPprioritymethod (\a b -> a {_sharedmemoutCOMPprioritymethod = b})
sharedmemoutCOMPinstancefirstrow :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstancefirstrow = lens _sharedmemoutCOMPinstancefirstrow (\a b -> a {_sharedmemoutCOMPinstancefirstrow = b})
sharedmemoutCOMPbank :: Lens' COMP (Maybe (Tree Float))
sharedmemoutCOMPbank = lens _sharedmemoutCOMPbank (\a b -> a {_sharedmemoutCOMPbank = b})
sharedmemoutCOMPinstancety :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancety = lens _sharedmemoutCOMPinstancety (\a b -> a {_sharedmemoutCOMPinstancety = b})
sharedmemoutCOMPinstancery :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancery = lens _sharedmemoutCOMPinstancery (\a b -> a {_sharedmemoutCOMPinstancery = b})
sharedmemoutCOMPp :: Lens' COMP (Vec3)
sharedmemoutCOMPp = lens _sharedmemoutCOMPp (\a b -> a {_sharedmemoutCOMPp = b})
sharedmemoutCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPsavebackup = lens _sharedmemoutCOMPsavebackup (\a b -> a {_sharedmemoutCOMPsavebackup = b})
sharedmemoutCOMPpos :: Lens' COMP (Maybe (Tree Float))
sharedmemoutCOMPpos = lens _sharedmemoutCOMPpos (\a b -> a {_sharedmemoutCOMPpos = b})
sharedmemoutCOMPpathsop :: Lens' COMP (Maybe (Tree SOP))
sharedmemoutCOMPpathsop = lens _sharedmemoutCOMPpathsop (\a b -> a {_sharedmemoutCOMPpathsop = b})
sharedmemoutCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPsubcompname = lens _sharedmemoutCOMPsubcompname (\a b -> a {_sharedmemoutCOMPsubcompname = b})
sharedmemoutCOMPpickpriority :: Lens' COMP (Maybe (Tree Float))
sharedmemoutCOMPpickpriority = lens _sharedmemoutCOMPpickpriority (\a b -> a {_sharedmemoutCOMPpickpriority = b})
sharedmemoutCOMPinstancetexfilter :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstancetexfilter = lens _sharedmemoutCOMPinstancetexfilter (\a b -> a {_sharedmemoutCOMPinstancetexfilter = b})
sharedmemoutCOMPpr :: Lens' COMP (Vec3)
sharedmemoutCOMPpr = lens _sharedmemoutCOMPpr (\a b -> a {_sharedmemoutCOMPpr = b})
sharedmemoutCOMPinstanceg :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstanceg = lens _sharedmemoutCOMPinstanceg (\a b -> a {_sharedmemoutCOMPinstanceg = b})
sharedmemoutCOMPinstancetexmode :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstancetexmode = lens _sharedmemoutCOMPinstancetexmode (\a b -> a {_sharedmemoutCOMPinstancetexmode = b})
sharedmemoutCOMPwcolor :: Lens' COMP (Vec3)
sharedmemoutCOMPwcolor = lens _sharedmemoutCOMPwcolor (\a b -> a {_sharedmemoutCOMPwcolor = b})
sharedmemoutCOMPinstancepy :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancepy = lens _sharedmemoutCOMPinstancepy (\a b -> a {_sharedmemoutCOMPinstancepy = b})
sharedmemoutCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPreloadtoxonstart = lens _sharedmemoutCOMPreloadtoxonstart (\a b -> a {_sharedmemoutCOMPreloadtoxonstart = b})
sharedmemoutCOMPinstancesz :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancesz = lens _sharedmemoutCOMPinstancesz (\a b -> a {_sharedmemoutCOMPinstancesz = b})
sharedmemoutCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPexternaltox = lens _sharedmemoutCOMPexternaltox (\a b -> a {_sharedmemoutCOMPexternaltox = b})
sharedmemoutCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPparentshortcut = lens _sharedmemoutCOMPparentshortcut (\a b -> a {_sharedmemoutCOMPparentshortcut = b})
sharedmemoutCOMPinstancesy :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancesy = lens _sharedmemoutCOMPinstancesy (\a b -> a {_sharedmemoutCOMPinstancesy = b})
sharedmemoutCOMPnuminstances :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPnuminstances = lens _sharedmemoutCOMPnuminstances (\a b -> a {_sharedmemoutCOMPnuminstances = b})
sharedmemoutCOMPup :: Lens' COMP (Vec3)
sharedmemoutCOMPup = lens _sharedmemoutCOMPup (\a b -> a {_sharedmemoutCOMPup = b})
sharedmemoutCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPpromoteextension1 = lens _sharedmemoutCOMPpromoteextension1 (\a b -> a {_sharedmemoutCOMPpromoteextension1 = b})
sharedmemoutCOMPinstrord :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstrord = lens _sharedmemoutCOMPinstrord (\a b -> a {_sharedmemoutCOMPinstrord = b})
sharedmemoutCOMPpxord :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPpxord = lens _sharedmemoutCOMPpxord (\a b -> a {_sharedmemoutCOMPpxord = b})
sharedmemoutCOMPinstancetexindex :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancetexindex = lens _sharedmemoutCOMPinstancetexindex (\a b -> a {_sharedmemoutCOMPinstancetexindex = b})
sharedmemoutCOMPinstancerottox :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancerottox = lens _sharedmemoutCOMPinstancerottox (\a b -> a {_sharedmemoutCOMPinstancerottox = b})
sharedmemoutCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPreinitextensions = lens _sharedmemoutCOMPreinitextensions (\a b -> a {_sharedmemoutCOMPreinitextensions = b})
sharedmemoutCOMPinstancesx :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancesx = lens _sharedmemoutCOMPinstancesx (\a b -> a {_sharedmemoutCOMPinstancesx = b})
sharedmemoutCOMPinstancing :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPinstancing = lens _sharedmemoutCOMPinstancing (\a b -> a {_sharedmemoutCOMPinstancing = b})
sharedmemoutCOMPname :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPname = lens _sharedmemoutCOMPname (\a b -> a {_sharedmemoutCOMPname = b})
sharedmemoutCOMPprord :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPprord = lens _sharedmemoutCOMPprord (\a b -> a {_sharedmemoutCOMPprord = b})
sharedmemoutCOMPlookup :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPlookup = lens _sharedmemoutCOMPlookup (\a b -> a {_sharedmemoutCOMPlookup = b})
sharedmemoutCOMPinstancerz :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancerz = lens _sharedmemoutCOMPinstancerz (\a b -> a {_sharedmemoutCOMPinstancerz = b})
sharedmemoutCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPextension2 = lens _sharedmemoutCOMPextension2 (\a b -> a {_sharedmemoutCOMPextension2 = b})
sharedmemoutCOMPdrawpriority :: Lens' COMP (Maybe (Tree Float))
sharedmemoutCOMPdrawpriority = lens _sharedmemoutCOMPdrawpriority (\a b -> a {_sharedmemoutCOMPdrawpriority = b})
sharedmemoutCOMPinstanceu :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstanceu = lens _sharedmemoutCOMPinstanceu (\a b -> a {_sharedmemoutCOMPinstanceu = b})
sharedmemoutCOMPrender :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPrender = lens _sharedmemoutCOMPrender (\a b -> a {_sharedmemoutCOMPrender = b})
sharedmemoutCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPextension1 = lens _sharedmemoutCOMPextension1 (\a b -> a {_sharedmemoutCOMPextension1 = b})
sharedmemoutCOMPps :: Lens' COMP (Vec3)
sharedmemoutCOMPps = lens _sharedmemoutCOMPps (\a b -> a {_sharedmemoutCOMPps = b})
sharedmemoutCOMPinstancetexextendv :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstancetexextendv = lens _sharedmemoutCOMPinstancetexextendv (\a b -> a {_sharedmemoutCOMPinstancetexextendv = b})
sharedmemoutCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPextension3 = lens _sharedmemoutCOMPextension3 (\a b -> a {_sharedmemoutCOMPextension3 = b})
sharedmemoutCOMPpxform :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPpxform = lens _sharedmemoutCOMPpxform (\a b -> a {_sharedmemoutCOMPpxform = b})
sharedmemoutCOMPmaterial :: Lens' COMP (Maybe (Tree MAT))
sharedmemoutCOMPmaterial = lens _sharedmemoutCOMPmaterial (\a b -> a {_sharedmemoutCOMPmaterial = b})
sharedmemoutCOMPinstancer :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancer = lens _sharedmemoutCOMPinstancer (\a b -> a {_sharedmemoutCOMPinstancer = b})
sharedmemoutCOMPr :: Lens' COMP (Vec3)
sharedmemoutCOMPr = lens _sharedmemoutCOMPr (\a b -> a {_sharedmemoutCOMPr = b})
sharedmemoutCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPenablecloning = lens _sharedmemoutCOMPenablecloning (\a b -> a {_sharedmemoutCOMPenablecloning = b})
sharedmemoutCOMPinstancecolormode :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstancecolormode = lens _sharedmemoutCOMPinstancecolormode (\a b -> a {_sharedmemoutCOMPinstancecolormode = b})
sharedmemoutCOMPpp :: Lens' COMP (Vec3)
sharedmemoutCOMPpp = lens _sharedmemoutCOMPpp (\a b -> a {_sharedmemoutCOMPpp = b})
sharedmemoutCOMPinstancew :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancew = lens _sharedmemoutCOMPinstancew (\a b -> a {_sharedmemoutCOMPinstancew = b})
sharedmemoutCOMPinstancerx :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancerx = lens _sharedmemoutCOMPinstancerx (\a b -> a {_sharedmemoutCOMPinstancerx = b})
sharedmemoutCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPextname2 = lens _sharedmemoutCOMPextname2 (\a b -> a {_sharedmemoutCOMPextname2 = b})
sharedmemoutCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPopshortcut = lens _sharedmemoutCOMPopshortcut (\a b -> a {_sharedmemoutCOMPopshortcut = b})
sharedmemoutCOMPpcommit :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPpcommit = lens _sharedmemoutCOMPpcommit (\a b -> a {_sharedmemoutCOMPpcommit = b})
sharedmemoutCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPpromoteextension2 = lens _sharedmemoutCOMPpromoteextension2 (\a b -> a {_sharedmemoutCOMPpromoteextension2 = b})
sharedmemoutCOMPinstanceorder :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstanceorder = lens _sharedmemoutCOMPinstanceorder (\a b -> a {_sharedmemoutCOMPinstanceorder = b})
sharedmemoutCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPenablecloningpulse = lens _sharedmemoutCOMPenablecloningpulse (\a b -> a {_sharedmemoutCOMPenablecloningpulse = b})
sharedmemoutCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPreinitnet = lens _sharedmemoutCOMPreinitnet (\a b -> a {_sharedmemoutCOMPreinitnet = b})
sharedmemoutCOMPinstancetexextendu :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstancetexextendu = lens _sharedmemoutCOMPinstancetexextendu (\a b -> a {_sharedmemoutCOMPinstancetexextendu = b})
sharedmemoutCOMPinstancemode :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstancemode = lens _sharedmemoutCOMPinstancemode (\a b -> a {_sharedmemoutCOMPinstancemode = b})
sharedmemoutCOMPinstancerottoorder :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstancerottoorder = lens _sharedmemoutCOMPinstancerottoorder (\a b -> a {_sharedmemoutCOMPinstancerottoorder = b})
sharedmemoutCOMPinstancepz :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancepz = lens _sharedmemoutCOMPinstancepz (\a b -> a {_sharedmemoutCOMPinstancepz = b})
sharedmemoutCOMPinstancetexs :: Lens' COMP (Maybe (Tree TOP))
sharedmemoutCOMPinstancetexs = lens _sharedmemoutCOMPinstancetexs (\a b -> a {_sharedmemoutCOMPinstancetexs = b})
sharedmemoutCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPpromoteextension3 = lens _sharedmemoutCOMPpromoteextension3 (\a b -> a {_sharedmemoutCOMPpromoteextension3 = b})
sharedmemoutCOMPactive :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPactive = lens _sharedmemoutCOMPactive (\a b -> a {_sharedmemoutCOMPactive = b})
sharedmemoutCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPextname4 = lens _sharedmemoutCOMPextname4 (\a b -> a {_sharedmemoutCOMPextname4 = b})
sharedmemoutCOMPinstancetx :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancetx = lens _sharedmemoutCOMPinstancetx (\a b -> a {_sharedmemoutCOMPinstancetx = b})
sharedmemoutCOMPinstancerotupz :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancerotupz = lens _sharedmemoutCOMPinstancerotupz (\a b -> a {_sharedmemoutCOMPinstancerotupz = b})
sharedmemoutCOMPrord :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPrord = lens _sharedmemoutCOMPrord (\a b -> a {_sharedmemoutCOMPrord = b})
sharedmemoutCOMPpreset :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPpreset = lens _sharedmemoutCOMPpreset (\a b -> a {_sharedmemoutCOMPpreset = b})
sharedmemoutCOMPxord :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPxord = lens _sharedmemoutCOMPxord (\a b -> a {_sharedmemoutCOMPxord = b})
sharedmemoutCOMPt :: Lens' COMP (Vec3)
sharedmemoutCOMPt = lens _sharedmemoutCOMPt (\a b -> a {_sharedmemoutCOMPt = b})
sharedmemoutCOMPs :: Lens' COMP (Vec3)
sharedmemoutCOMPs = lens _sharedmemoutCOMPs (\a b -> a {_sharedmemoutCOMPs = b})
sharedmemoutCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPextname3 = lens _sharedmemoutCOMPextname3 (\a b -> a {_sharedmemoutCOMPextname3 = b})
sharedmemoutCOMPclone :: Lens' COMP (Maybe (Tree COMP))
sharedmemoutCOMPclone = lens _sharedmemoutCOMPclone (\a b -> a {_sharedmemoutCOMPclone = b})
sharedmemoutCOMPinstxord :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstxord = lens _sharedmemoutCOMPinstxord (\a b -> a {_sharedmemoutCOMPinstxord = b})
sharedmemoutCOMPinstancerotupx :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancerotupx = lens _sharedmemoutCOMPinstancerotupx (\a b -> a {_sharedmemoutCOMPinstancerotupx = b})
sharedmemoutCOMPinstancetexextendw :: Lens' COMP (Maybe (Tree Int))
sharedmemoutCOMPinstancetexextendw = lens _sharedmemoutCOMPinstancetexextendw (\a b -> a {_sharedmemoutCOMPinstancetexextendw = b})
sharedmemoutCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
sharedmemoutCOMPloadondemand = lens _sharedmemoutCOMPloadondemand (\a b -> a {_sharedmemoutCOMPloadondemand = b})
sharedmemoutCOMPinstancerottoy :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancerottoy = lens _sharedmemoutCOMPinstancerottoy (\a b -> a {_sharedmemoutCOMPinstancerottoy = b})
sharedmemoutCOMPinstancev :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancev = lens _sharedmemoutCOMPinstancev (\a b -> a {_sharedmemoutCOMPinstancev = b})
sharedmemoutCOMPinstancetz :: Lens' COMP (Maybe (Tree ByteString))
sharedmemoutCOMPinstancetz = lens _sharedmemoutCOMPinstancetz (\a b -> a {_sharedmemoutCOMPinstancetz = b})

tableCOMPtopborder :: Lens' COMP (Maybe (Tree Int))
tableCOMPtopborder = lens _tableCOMPtopborder (\a b -> a {_tableCOMPtopborder = b})
tableCOMPscrollbarthickness :: Lens' COMP (Maybe (Tree Int))
tableCOMPscrollbarthickness = lens _tableCOMPscrollbarthickness (\a b -> a {_tableCOMPscrollbarthickness = b})
tableCOMPw :: Lens' COMP (Maybe (Tree Int))
tableCOMPw = lens _tableCOMPw (\a b -> a {_tableCOMPw = b})
tableCOMPalignorder :: Lens' COMP (Maybe (Tree Float))
tableCOMPalignorder = lens _tableCOMPalignorder (\a b -> a {_tableCOMPalignorder = b})
tableCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
tableCOMPloadondemand = lens _tableCOMPloadondemand (\a b -> a {_tableCOMPloadondemand = b})
tableCOMPjustifyh :: Lens' COMP (Maybe (Tree Int))
tableCOMPjustifyh = lens _tableCOMPjustifyh (\a b -> a {_tableCOMPjustifyh = b})
tableCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
tableCOMPpromoteextension4 = lens _tableCOMPpromoteextension4 (\a b -> a {_tableCOMPpromoteextension4 = b})
tableCOMPtablereset :: Lens' COMP (Maybe (Tree Bool))
tableCOMPtablereset = lens _tableCOMPtablereset (\a b -> a {_tableCOMPtablereset = b})
tableCOMPrepositionxmin :: Lens' COMP (Maybe (Tree Float))
tableCOMPrepositionxmin = lens _tableCOMPrepositionxmin (\a b -> a {_tableCOMPrepositionxmin = b})
tableCOMPx :: Lens' COMP (Maybe (Tree Int))
tableCOMPx = lens _tableCOMPx (\a b -> a {_tableCOMPx = b})
tableCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
tableCOMPnodeview = lens _tableCOMPnodeview (\a b -> a {_tableCOMPnodeview = b})
tableCOMPrepositionymax :: Lens' COMP (Maybe (Tree Float))
tableCOMPrepositionymax = lens _tableCOMPrepositionymax (\a b -> a {_tableCOMPrepositionymax = b})
tableCOMPmargint :: Lens' COMP (Maybe (Tree Float))
tableCOMPmargint = lens _tableCOMPmargint (\a b -> a {_tableCOMPmargint = b})
tableCOMPresizer :: Lens' COMP (Maybe (Tree Bool))
tableCOMPresizer = lens _tableCOMPresizer (\a b -> a {_tableCOMPresizer = b})
tableCOMPdragscript :: Lens' COMP (Maybe (Tree DAT))
tableCOMPdragscript = lens _tableCOMPdragscript (\a b -> a {_tableCOMPdragscript = b})
tableCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
tableCOMPpromoteextension2 = lens _tableCOMPpromoteextension2 (\a b -> a {_tableCOMPpromoteextension2 = b})
tableCOMPfixedaspect :: Lens' COMP (Maybe (Tree Int))
tableCOMPfixedaspect = lens _tableCOMPfixedaspect (\a b -> a {_tableCOMPfixedaspect = b})
tableCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
tableCOMPextname1 = lens _tableCOMPextname1 (\a b -> a {_tableCOMPextname1 = b})
tableCOMPmarginl :: Lens' COMP (Maybe (Tree Float))
tableCOMPmarginl = lens _tableCOMPmarginl (\a b -> a {_tableCOMPmarginl = b})
tableCOMPdodisablecolor :: Lens' COMP (Maybe (Tree Bool))
tableCOMPdodisablecolor = lens _tableCOMPdodisablecolor (\a b -> a {_tableCOMPdodisablecolor = b})
tableCOMPmultitouch :: Lens' COMP (Maybe (Tree Int))
tableCOMPmultitouch = lens _tableCOMPmultitouch (\a b -> a {_tableCOMPmultitouch = b})
tableCOMPbgalpha :: Lens' COMP (Maybe (Tree Float))
tableCOMPbgalpha = lens _tableCOMPbgalpha (\a b -> a {_tableCOMPbgalpha = b})
tableCOMPhmode :: Lens' COMP (Maybe (Tree Int))
tableCOMPhmode = lens _tableCOMPhmode (\a b -> a {_tableCOMPhmode = b})
tableCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
tableCOMPsavebackup = lens _tableCOMPsavebackup (\a b -> a {_tableCOMPsavebackup = b})
tableCOMPuvbuttonsmiddle :: Lens' COMP (Maybe (Tree Bool))
tableCOMPuvbuttonsmiddle = lens _tableCOMPuvbuttonsmiddle (\a b -> a {_tableCOMPuvbuttonsmiddle = b})
tableCOMPleftanchor :: Lens' COMP (Maybe (Tree Float))
tableCOMPleftanchor = lens _tableCOMPleftanchor (\a b -> a {_tableCOMPleftanchor = b})
tableCOMPclickthrough :: Lens' COMP (Maybe (Tree Bool))
tableCOMPclickthrough = lens _tableCOMPclickthrough (\a b -> a {_tableCOMPclickthrough = b})
tableCOMPdisablealpha :: Lens' COMP (Maybe (Tree Float))
tableCOMPdisablealpha = lens _tableCOMPdisablealpha (\a b -> a {_tableCOMPdisablealpha = b})
tableCOMPvmode :: Lens' COMP (Maybe (Tree Int))
tableCOMPvmode = lens _tableCOMPvmode (\a b -> a {_tableCOMPvmode = b})
tableCOMPdroptypescript :: Lens' COMP (Maybe (Tree DAT))
tableCOMPdroptypescript = lens _tableCOMPdroptypescript (\a b -> a {_tableCOMPdroptypescript = b})
tableCOMPvorigin :: Lens' COMP (Maybe (Tree Float))
tableCOMPvorigin = lens _tableCOMPvorigin (\a b -> a {_tableCOMPvorigin = b})
tableCOMPdrag :: Lens' COMP (Maybe (Tree Int))
tableCOMPdrag = lens _tableCOMPdrag (\a b -> a {_tableCOMPdrag = b})
tableCOMPdisablecolor :: Lens' COMP (Vec3)
tableCOMPdisablecolor = lens _tableCOMPdisablecolor (\a b -> a {_tableCOMPdisablecolor = b})
tableCOMPresizehmin :: Lens' COMP (Maybe (Tree Float))
tableCOMPresizehmin = lens _tableCOMPresizehmin (\a b -> a {_tableCOMPresizehmin = b})
tableCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
tableCOMPextname3 = lens _tableCOMPextname3 (\a b -> a {_tableCOMPextname3 = b})
tableCOMPborderaalpha :: Lens' COMP (Maybe (Tree Float))
tableCOMPborderaalpha = lens _tableCOMPborderaalpha (\a b -> a {_tableCOMPborderaalpha = b})
tableCOMPoverlay :: Lens' COMP (Maybe (Tree Bool))
tableCOMPoverlay = lens _tableCOMPoverlay (\a b -> a {_tableCOMPoverlay = b})
tableCOMPrepositionymin :: Lens' COMP (Maybe (Tree Float))
tableCOMPrepositionymin = lens _tableCOMPrepositionymin (\a b -> a {_tableCOMPrepositionymin = b})
tableCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
tableCOMPenablecloning = lens _tableCOMPenablecloning (\a b -> a {_tableCOMPenablecloning = b})
tableCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
tableCOMPsubcompname = lens _tableCOMPsubcompname (\a b -> a {_tableCOMPsubcompname = b})
tableCOMPrightanchor :: Lens' COMP (Maybe (Tree Float))
tableCOMPrightanchor = lens _tableCOMPrightanchor (\a b -> a {_tableCOMPrightanchor = b})
tableCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
tableCOMPreloadtoxonstart = lens _tableCOMPreloadtoxonstart (\a b -> a {_tableCOMPreloadtoxonstart = b})
tableCOMPdropdestscript :: Lens' COMP (Maybe (Tree DAT))
tableCOMPdropdestscript = lens _tableCOMPdropdestscript (\a b -> a {_tableCOMPdropdestscript = b})
tableCOMPmarginr :: Lens' COMP (Maybe (Tree Float))
tableCOMPmarginr = lens _tableCOMPmarginr (\a b -> a {_tableCOMPmarginr = b})
tableCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
tableCOMPparentshortcut = lens _tableCOMPparentshortcut (\a b -> a {_tableCOMPparentshortcut = b})
tableCOMPmousewheel :: Lens' COMP (Maybe (Tree Bool))
tableCOMPmousewheel = lens _tableCOMPmousewheel (\a b -> a {_tableCOMPmousewheel = b})
tableCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
tableCOMPextension4 = lens _tableCOMPextension4 (\a b -> a {_tableCOMPextension4 = b})
tableCOMPcolattributes :: Lens' COMP (Maybe (Tree DAT))
tableCOMPcolattributes = lens _tableCOMPcolattributes (\a b -> a {_tableCOMPcolattributes = b})
tableCOMPphscrollbar :: Lens' COMP (Maybe (Tree Int))
tableCOMPphscrollbar = lens _tableCOMPphscrollbar (\a b -> a {_tableCOMPphscrollbar = b})
tableCOMPleftborderi :: Lens' COMP (Maybe (Tree Int))
tableCOMPleftborderi = lens _tableCOMPleftborderi (\a b -> a {_tableCOMPleftborderi = b})
tableCOMPrepocomp :: Lens' COMP (Maybe (Tree COMP))
tableCOMPrepocomp = lens _tableCOMPrepocomp (\a b -> a {_tableCOMPrepocomp = b})
tableCOMPtopanchor :: Lens' COMP (Maybe (Tree Float))
tableCOMPtopanchor = lens _tableCOMPtopanchor (\a b -> a {_tableCOMPtopanchor = b})
tableCOMPanchordrag :: Lens' COMP (Maybe (Tree Int))
tableCOMPanchordrag = lens _tableCOMPanchordrag (\a b -> a {_tableCOMPanchordrag = b})
tableCOMPbottomborderi :: Lens' COMP (Maybe (Tree Int))
tableCOMPbottomborderi = lens _tableCOMPbottomborderi (\a b -> a {_tableCOMPbottomborderi = b})
tableCOMPrightborder :: Lens' COMP (Maybe (Tree Int))
tableCOMPrightborder = lens _tableCOMPrightborder (\a b -> a {_tableCOMPrightborder = b})
tableCOMPlayer :: Lens' COMP (Maybe (Tree Float))
tableCOMPlayer = lens _tableCOMPlayer (\a b -> a {_tableCOMPlayer = b})
tableCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
tableCOMPreinitextensions = lens _tableCOMPreinitextensions (\a b -> a {_tableCOMPreinitextensions = b})
tableCOMPtopborderi :: Lens' COMP (Maybe (Tree Int))
tableCOMPtopborderi = lens _tableCOMPtopborderi (\a b -> a {_tableCOMPtopborderi = b})
tableCOMPalignallow :: Lens' COMP (Maybe (Tree Int))
tableCOMPalignallow = lens _tableCOMPalignallow (\a b -> a {_tableCOMPalignallow = b})
tableCOMPdragdropcallbacks :: Lens' COMP (Maybe (Tree DAT))
tableCOMPdragdropcallbacks = lens _tableCOMPdragdropcallbacks (\a b -> a {_tableCOMPdragdropcallbacks = b})
tableCOMPrightborderi :: Lens' COMP (Maybe (Tree Int))
tableCOMPrightborderi = lens _tableCOMPrightborderi (\a b -> a {_tableCOMPrightborderi = b})
tableCOMPresizel :: Lens' COMP (Maybe (Tree Bool))
tableCOMPresizel = lens _tableCOMPresizel (\a b -> a {_tableCOMPresizel = b})
tableCOMPvfillweight :: Lens' COMP (Maybe (Tree Float))
tableCOMPvfillweight = lens _tableCOMPvfillweight (\a b -> a {_tableCOMPvfillweight = b})
tableCOMPborderover :: Lens' COMP (Maybe (Tree Bool))
tableCOMPborderover = lens _tableCOMPborderover (\a b -> a {_tableCOMPborderover = b})
tableCOMPnamedchop :: Lens' COMP (Maybe (Tree Bool))
tableCOMPnamedchop = lens _tableCOMPnamedchop (\a b -> a {_tableCOMPnamedchop = b})
tableCOMPvalues :: Lens' COMP (Maybe (Tree DAT))
tableCOMPvalues = lens _tableCOMPvalues (\a b -> a {_tableCOMPvalues = b})
tableCOMPrepositionxmax :: Lens' COMP (Maybe (Tree Float))
tableCOMPrepositionxmax = lens _tableCOMPrepositionxmax (\a b -> a {_tableCOMPrepositionxmax = b})
tableCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
tableCOMPextension2 = lens _tableCOMPextension2 (\a b -> a {_tableCOMPextension2 = b})
tableCOMPborderbalpha :: Lens' COMP (Maybe (Tree Float))
tableCOMPborderbalpha = lens _tableCOMPborderbalpha (\a b -> a {_tableCOMPborderbalpha = b})
tableCOMPjustifyv :: Lens' COMP (Maybe (Tree Int))
tableCOMPjustifyv = lens _tableCOMPjustifyv (\a b -> a {_tableCOMPjustifyv = b})
tableCOMPpostoffset :: Lens' COMP (Vec2)
tableCOMPpostoffset = lens _tableCOMPpostoffset (\a b -> a {_tableCOMPpostoffset = b})
tableCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
tableCOMPreinitnet = lens _tableCOMPreinitnet (\a b -> a {_tableCOMPreinitnet = b})
tableCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
tableCOMPpromoteextension3 = lens _tableCOMPpromoteextension3 (\a b -> a {_tableCOMPpromoteextension3 = b})
tableCOMPtopoffset :: Lens' COMP (Maybe (Tree Float))
tableCOMPtopoffset = lens _tableCOMPtopoffset (\a b -> a {_tableCOMPtopoffset = b})
tableCOMPcomposite :: Lens' COMP (Maybe (Tree Int))
tableCOMPcomposite = lens _tableCOMPcomposite (\a b -> a {_tableCOMPcomposite = b})
tableCOMPtableoffsety :: Lens' COMP (Maybe (Tree Int))
tableCOMPtableoffsety = lens _tableCOMPtableoffsety (\a b -> a {_tableCOMPtableoffsety = b})
tableCOMPmultrgb :: Lens' COMP (Maybe (Tree Bool))
tableCOMPmultrgb = lens _tableCOMPmultrgb (\a b -> a {_tableCOMPmultrgb = b})
tableCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
tableCOMPextension1 = lens _tableCOMPextension1 (\a b -> a {_tableCOMPextension1 = b})
tableCOMPtablerows :: Lens' COMP (Maybe (Tree Int))
tableCOMPtablerows = lens _tableCOMPtablerows (\a b -> a {_tableCOMPtablerows = b})
tableCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
tableCOMPpromoteextension1 = lens _tableCOMPpromoteextension1 (\a b -> a {_tableCOMPpromoteextension1 = b})
tableCOMPbordera :: Lens' COMP (Vec3)
tableCOMPbordera = lens _tableCOMPbordera (\a b -> a {_tableCOMPbordera = b})
tableCOMPuvbuttonsleft :: Lens' COMP (Maybe (Tree Bool))
tableCOMPuvbuttonsleft = lens _tableCOMPuvbuttonsleft (\a b -> a {_tableCOMPuvbuttonsleft = b})
tableCOMPbgcolor :: Lens' COMP (Vec3)
tableCOMPbgcolor = lens _tableCOMPbgcolor (\a b -> a {_tableCOMPbgcolor = b})
tableCOMPresizehmax :: Lens' COMP (Maybe (Tree Float))
tableCOMPresizehmax = lens _tableCOMPresizehmax (\a b -> a {_tableCOMPresizehmax = b})
tableCOMPhelpdat :: Lens' COMP (Maybe (Tree DAT))
tableCOMPhelpdat = lens _tableCOMPhelpdat (\a b -> a {_tableCOMPhelpdat = b})
tableCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
tableCOMPextension3 = lens _tableCOMPextension3 (\a b -> a {_tableCOMPextension3 = b})
tableCOMPdrop :: Lens' COMP (Maybe (Tree Int))
tableCOMPdrop = lens _tableCOMPdrop (\a b -> a {_tableCOMPdrop = b})
tableCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
tableCOMPexternaltox = lens _tableCOMPexternaltox (\a b -> a {_tableCOMPexternaltox = b})
tableCOMPattributes :: Lens' COMP (Maybe (Tree DAT))
tableCOMPattributes = lens _tableCOMPattributes (\a b -> a {_tableCOMPattributes = b})
tableCOMPalign :: Lens' COMP (Maybe (Tree Int))
tableCOMPalign = lens _tableCOMPalign (\a b -> a {_tableCOMPalign = b})
tableCOMProwattributes :: Lens' COMP (Maybe (Tree DAT))
tableCOMProwattributes = lens _tableCOMProwattributes (\a b -> a {_tableCOMProwattributes = b})
tableCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
tableCOMPextname2 = lens _tableCOMPextname2 (\a b -> a {_tableCOMPextname2 = b})
tableCOMPh :: Lens' COMP (Maybe (Tree Int))
tableCOMPh = lens _tableCOMPh (\a b -> a {_tableCOMPh = b})
tableCOMPleftborder :: Lens' COMP (Maybe (Tree Int))
tableCOMPleftborder = lens _tableCOMPleftborder (\a b -> a {_tableCOMPleftborder = b})
tableCOMPtopfill :: Lens' COMP (Maybe (Tree Int))
tableCOMPtopfill = lens _tableCOMPtopfill (\a b -> a {_tableCOMPtopfill = b})
tableCOMPresizewmin :: Lens' COMP (Maybe (Tree Float))
tableCOMPresizewmin = lens _tableCOMPresizewmin (\a b -> a {_tableCOMPresizewmin = b})
tableCOMPmouserel :: Lens' COMP (Maybe (Tree Bool))
tableCOMPmouserel = lens _tableCOMPmouserel (\a b -> a {_tableCOMPmouserel = b})
tableCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
tableCOMPenablecloningpulse = lens _tableCOMPenablecloningpulse (\a b -> a {_tableCOMPenablecloningpulse = b})
tableCOMPoffset :: Lens' COMP (Vec2)
tableCOMPoffset = lens _tableCOMPoffset (\a b -> a {_tableCOMPoffset = b})
tableCOMPresizeb :: Lens' COMP (Maybe (Tree Bool))
tableCOMPresizeb = lens _tableCOMPresizeb (\a b -> a {_tableCOMPresizeb = b})
tableCOMPleftoffset :: Lens' COMP (Maybe (Tree Float))
tableCOMPleftoffset = lens _tableCOMPleftoffset (\a b -> a {_tableCOMPleftoffset = b})
tableCOMPy :: Lens' COMP (Maybe (Tree Int))
tableCOMPy = lens _tableCOMPy (\a b -> a {_tableCOMPy = b})
tableCOMPpvscrollbar :: Lens' COMP (Maybe (Tree Int))
tableCOMPpvscrollbar = lens _tableCOMPpvscrollbar (\a b -> a {_tableCOMPpvscrollbar = b})
tableCOMPcrop :: Lens' COMP (Maybe (Tree Int))
tableCOMPcrop = lens _tableCOMPcrop (\a b -> a {_tableCOMPcrop = b})
tableCOMPbottomoffset :: Lens' COMP (Maybe (Tree Float))
tableCOMPbottomoffset = lens _tableCOMPbottomoffset (\a b -> a {_tableCOMPbottomoffset = b})
tableCOMPdisplay :: Lens' COMP (Maybe (Tree Bool))
tableCOMPdisplay = lens _tableCOMPdisplay (\a b -> a {_tableCOMPdisplay = b})
tableCOMPfit :: Lens' COMP (Maybe (Tree Int))
tableCOMPfit = lens _tableCOMPfit (\a b -> a {_tableCOMPfit = b})
tableCOMPaspect :: Lens' COMP (Maybe (Tree Float))
tableCOMPaspect = lens _tableCOMPaspect (\a b -> a {_tableCOMPaspect = b})
tableCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
tableCOMPextname4 = lens _tableCOMPextname4 (\a b -> a {_tableCOMPextname4 = b})
tableCOMPuvbuttonsright :: Lens' COMP (Maybe (Tree Bool))
tableCOMPuvbuttonsright = lens _tableCOMPuvbuttonsright (\a b -> a {_tableCOMPuvbuttonsright = b})
tableCOMPresizewmax :: Lens' COMP (Maybe (Tree Float))
tableCOMPresizewmax = lens _tableCOMPresizewmax (\a b -> a {_tableCOMPresizewmax = b})
tableCOMPborderb :: Lens' COMP (Vec3)
tableCOMPborderb = lens _tableCOMPborderb (\a b -> a {_tableCOMPborderb = b})
tableCOMPbottomanchor :: Lens' COMP (Maybe (Tree Float))
tableCOMPbottomanchor = lens _tableCOMPbottomanchor (\a b -> a {_tableCOMPbottomanchor = b})
tableCOMPsizefromwindow :: Lens' COMP (Maybe (Tree Bool))
tableCOMPsizefromwindow = lens _tableCOMPsizefromwindow (\a b -> a {_tableCOMPsizefromwindow = b})
tableCOMPtableattributes :: Lens' COMP (Maybe (Tree DAT))
tableCOMPtableattributes = lens _tableCOMPtableattributes (\a b -> a {_tableCOMPtableattributes = b})
tableCOMPopacity :: Lens' COMP (Maybe (Tree Float))
tableCOMPopacity = lens _tableCOMPopacity (\a b -> a {_tableCOMPopacity = b})
tableCOMPinfoformat :: Lens' COMP (Maybe (Tree Int))
tableCOMPinfoformat = lens _tableCOMPinfoformat (\a b -> a {_tableCOMPinfoformat = b})
tableCOMPtop :: Lens' COMP (Maybe (Tree TOP))
tableCOMPtop = lens _tableCOMPtop (\a b -> a {_tableCOMPtop = b})
tableCOMPcursor :: Lens' COMP (Maybe (Tree Int))
tableCOMPcursor = lens _tableCOMPcursor (\a b -> a {_tableCOMPcursor = b})
tableCOMPoverridemethod :: Lens' COMP (Maybe (Tree Int))
tableCOMPoverridemethod = lens _tableCOMPoverridemethod (\a b -> a {_tableCOMPoverridemethod = b})
tableCOMPreposition :: Lens' COMP (Maybe (Tree Int))
tableCOMPreposition = lens _tableCOMPreposition (\a b -> a {_tableCOMPreposition = b})
tableCOMPenable :: Lens' COMP (Maybe (Tree Bool))
tableCOMPenable = lens _tableCOMPenable (\a b -> a {_tableCOMPenable = b})
tableCOMPchop :: Lens' COMP (Maybe (Tree CHOP))
tableCOMPchop = lens _tableCOMPchop (\a b -> a {_tableCOMPchop = b})
tableCOMPrightoffset :: Lens' COMP (Maybe (Tree Float))
tableCOMPrightoffset = lens _tableCOMPrightoffset (\a b -> a {_tableCOMPrightoffset = b})
tableCOMPvieweraspect :: Lens' COMP (Maybe (Tree Int))
tableCOMPvieweraspect = lens _tableCOMPvieweraspect (\a b -> a {_tableCOMPvieweraspect = b})
tableCOMPtablealign :: Lens' COMP (Maybe (Tree Int))
tableCOMPtablealign = lens _tableCOMPtablealign (\a b -> a {_tableCOMPtablealign = b})
tableCOMPmarginb :: Lens' COMP (Maybe (Tree Float))
tableCOMPmarginb = lens _tableCOMPmarginb (\a b -> a {_tableCOMPmarginb = b})
tableCOMPfontsizeunit :: Lens' COMP (Maybe (Tree Int))
tableCOMPfontsizeunit = lens _tableCOMPfontsizeunit (\a b -> a {_tableCOMPfontsizeunit = b})
tableCOMPalignmax :: Lens' COMP (Maybe (Tree Int))
tableCOMPalignmax = lens _tableCOMPalignmax (\a b -> a {_tableCOMPalignmax = b})
tableCOMPscrolloverlay :: Lens' COMP (Maybe (Tree Int))
tableCOMPscrolloverlay = lens _tableCOMPscrolloverlay (\a b -> a {_tableCOMPscrolloverlay = b})
tableCOMPclone :: Lens' COMP (Maybe (Tree COMP))
tableCOMPclone = lens _tableCOMPclone (\a b -> a {_tableCOMPclone = b})
tableCOMPkeepmemory :: Lens' COMP (Maybe (Tree Bool))
tableCOMPkeepmemory = lens _tableCOMPkeepmemory (\a b -> a {_tableCOMPkeepmemory = b})
tableCOMPdropscript :: Lens' COMP (Maybe (Tree DAT))
tableCOMPdropscript = lens _tableCOMPdropscript (\a b -> a {_tableCOMPdropscript = b})
tableCOMPhfillweight :: Lens' COMP (Maybe (Tree Float))
tableCOMPhfillweight = lens _tableCOMPhfillweight (\a b -> a {_tableCOMPhfillweight = b})
tableCOMPhorigin :: Lens' COMP (Maybe (Tree Float))
tableCOMPhorigin = lens _tableCOMPhorigin (\a b -> a {_tableCOMPhorigin = b})
tableCOMPspacing :: Lens' COMP (Maybe (Tree Float))
tableCOMPspacing = lens _tableCOMPspacing (\a b -> a {_tableCOMPspacing = b})
tableCOMPscale :: Lens' COMP (Vec2)
tableCOMPscale = lens _tableCOMPscale (\a b -> a {_tableCOMPscale = b})
tableCOMPtableoffsetx :: Lens' COMP (Maybe (Tree Int))
tableCOMPtableoffsetx = lens _tableCOMPtableoffsetx (\a b -> a {_tableCOMPtableoffsetx = b})
tableCOMPtablecols :: Lens' COMP (Maybe (Tree Int))
tableCOMPtablecols = lens _tableCOMPtablecols (\a b -> a {_tableCOMPtablecols = b})
tableCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
tableCOMPopshortcut = lens _tableCOMPopshortcut (\a b -> a {_tableCOMPopshortcut = b})
tableCOMPresizet :: Lens' COMP (Maybe (Tree Bool))
tableCOMPresizet = lens _tableCOMPresizet (\a b -> a {_tableCOMPresizet = b})
tableCOMPbottomborder :: Lens' COMP (Maybe (Tree Int))
tableCOMPbottomborder = lens _tableCOMPbottomborder (\a b -> a {_tableCOMPbottomborder = b})

containerCOMPtopborder :: Lens' COMP (Maybe (Tree Int))
containerCOMPtopborder = lens _containerCOMPtopborder (\a b -> a {_containerCOMPtopborder = b})
containerCOMPscrollbarthickness :: Lens' COMP (Maybe (Tree Int))
containerCOMPscrollbarthickness = lens _containerCOMPscrollbarthickness (\a b -> a {_containerCOMPscrollbarthickness = b})
containerCOMPw :: Lens' COMP (Maybe (Tree Int))
containerCOMPw = lens _containerCOMPw (\a b -> a {_containerCOMPw = b})
containerCOMPalignorder :: Lens' COMP (Maybe (Tree Float))
containerCOMPalignorder = lens _containerCOMPalignorder (\a b -> a {_containerCOMPalignorder = b})
containerCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
containerCOMPloadondemand = lens _containerCOMPloadondemand (\a b -> a {_containerCOMPloadondemand = b})
containerCOMPjustifyh :: Lens' COMP (Maybe (Tree Int))
containerCOMPjustifyh = lens _containerCOMPjustifyh (\a b -> a {_containerCOMPjustifyh = b})
containerCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
containerCOMPpromoteextension4 = lens _containerCOMPpromoteextension4 (\a b -> a {_containerCOMPpromoteextension4 = b})
containerCOMPdropdestscript :: Lens' COMP (Maybe (Tree DAT))
containerCOMPdropdestscript = lens _containerCOMPdropdestscript (\a b -> a {_containerCOMPdropdestscript = b})
containerCOMPrepositionxmin :: Lens' COMP (Maybe (Tree Float))
containerCOMPrepositionxmin = lens _containerCOMPrepositionxmin (\a b -> a {_containerCOMPrepositionxmin = b})
containerCOMPx :: Lens' COMP (Maybe (Tree Int))
containerCOMPx = lens _containerCOMPx (\a b -> a {_containerCOMPx = b})
containerCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
containerCOMPnodeview = lens _containerCOMPnodeview (\a b -> a {_containerCOMPnodeview = b})
containerCOMPmargint :: Lens' COMP (Maybe (Tree Float))
containerCOMPmargint = lens _containerCOMPmargint (\a b -> a {_containerCOMPmargint = b})
containerCOMPresizer :: Lens' COMP (Maybe (Tree Bool))
containerCOMPresizer = lens _containerCOMPresizer (\a b -> a {_containerCOMPresizer = b})
containerCOMPdroptypescript :: Lens' COMP (Maybe (Tree DAT))
containerCOMPdroptypescript = lens _containerCOMPdroptypescript (\a b -> a {_containerCOMPdroptypescript = b})
containerCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
containerCOMPpromoteextension2 = lens _containerCOMPpromoteextension2 (\a b -> a {_containerCOMPpromoteextension2 = b})
containerCOMPfixedaspect :: Lens' COMP (Maybe (Tree Int))
containerCOMPfixedaspect = lens _containerCOMPfixedaspect (\a b -> a {_containerCOMPfixedaspect = b})
containerCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
containerCOMPextname1 = lens _containerCOMPextname1 (\a b -> a {_containerCOMPextname1 = b})
containerCOMPmarginl :: Lens' COMP (Maybe (Tree Float))
containerCOMPmarginl = lens _containerCOMPmarginl (\a b -> a {_containerCOMPmarginl = b})
containerCOMPdodisablecolor :: Lens' COMP (Maybe (Tree Bool))
containerCOMPdodisablecolor = lens _containerCOMPdodisablecolor (\a b -> a {_containerCOMPdodisablecolor = b})
containerCOMPmultitouch :: Lens' COMP (Maybe (Tree Int))
containerCOMPmultitouch = lens _containerCOMPmultitouch (\a b -> a {_containerCOMPmultitouch = b})
containerCOMPbgalpha :: Lens' COMP (Maybe (Tree Float))
containerCOMPbgalpha = lens _containerCOMPbgalpha (\a b -> a {_containerCOMPbgalpha = b})
containerCOMPhmode :: Lens' COMP (Maybe (Tree Int))
containerCOMPhmode = lens _containerCOMPhmode (\a b -> a {_containerCOMPhmode = b})
containerCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
containerCOMPsavebackup = lens _containerCOMPsavebackup (\a b -> a {_containerCOMPsavebackup = b})
containerCOMPuvbuttonsmiddle :: Lens' COMP (Maybe (Tree Bool))
containerCOMPuvbuttonsmiddle = lens _containerCOMPuvbuttonsmiddle (\a b -> a {_containerCOMPuvbuttonsmiddle = b})
containerCOMPleftanchor :: Lens' COMP (Maybe (Tree Float))
containerCOMPleftanchor = lens _containerCOMPleftanchor (\a b -> a {_containerCOMPleftanchor = b})
containerCOMPclickthrough :: Lens' COMP (Maybe (Tree Bool))
containerCOMPclickthrough = lens _containerCOMPclickthrough (\a b -> a {_containerCOMPclickthrough = b})
containerCOMPdisablealpha :: Lens' COMP (Maybe (Tree Float))
containerCOMPdisablealpha = lens _containerCOMPdisablealpha (\a b -> a {_containerCOMPdisablealpha = b})
containerCOMPvmode :: Lens' COMP (Maybe (Tree Int))
containerCOMPvmode = lens _containerCOMPvmode (\a b -> a {_containerCOMPvmode = b})
containerCOMPvorigin :: Lens' COMP (Maybe (Tree Float))
containerCOMPvorigin = lens _containerCOMPvorigin (\a b -> a {_containerCOMPvorigin = b})
containerCOMPdrag :: Lens' COMP (Maybe (Tree Int))
containerCOMPdrag = lens _containerCOMPdrag (\a b -> a {_containerCOMPdrag = b})
containerCOMPdisablecolor :: Lens' COMP (Vec3)
containerCOMPdisablecolor = lens _containerCOMPdisablecolor (\a b -> a {_containerCOMPdisablecolor = b})
containerCOMPresizehmin :: Lens' COMP (Maybe (Tree Float))
containerCOMPresizehmin = lens _containerCOMPresizehmin (\a b -> a {_containerCOMPresizehmin = b})
containerCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
containerCOMPextname3 = lens _containerCOMPextname3 (\a b -> a {_containerCOMPextname3 = b})
containerCOMPborderaalpha :: Lens' COMP (Maybe (Tree Float))
containerCOMPborderaalpha = lens _containerCOMPborderaalpha (\a b -> a {_containerCOMPborderaalpha = b})
containerCOMPoverlay :: Lens' COMP (Maybe (Tree Bool))
containerCOMPoverlay = lens _containerCOMPoverlay (\a b -> a {_containerCOMPoverlay = b})
containerCOMPrepositionymin :: Lens' COMP (Maybe (Tree Float))
containerCOMPrepositionymin = lens _containerCOMPrepositionymin (\a b -> a {_containerCOMPrepositionymin = b})
containerCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
containerCOMPenablecloning = lens _containerCOMPenablecloning (\a b -> a {_containerCOMPenablecloning = b})
containerCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
containerCOMPsubcompname = lens _containerCOMPsubcompname (\a b -> a {_containerCOMPsubcompname = b})
containerCOMPalign :: Lens' COMP (Maybe (Tree Int))
containerCOMPalign = lens _containerCOMPalign (\a b -> a {_containerCOMPalign = b})
containerCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
containerCOMPreloadtoxonstart = lens _containerCOMPreloadtoxonstart (\a b -> a {_containerCOMPreloadtoxonstart = b})
containerCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
containerCOMPreinitnet = lens _containerCOMPreinitnet (\a b -> a {_containerCOMPreinitnet = b})
containerCOMPmarginr :: Lens' COMP (Maybe (Tree Float))
containerCOMPmarginr = lens _containerCOMPmarginr (\a b -> a {_containerCOMPmarginr = b})
containerCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
containerCOMPparentshortcut = lens _containerCOMPparentshortcut (\a b -> a {_containerCOMPparentshortcut = b})
containerCOMPresizet :: Lens' COMP (Maybe (Tree Bool))
containerCOMPresizet = lens _containerCOMPresizet (\a b -> a {_containerCOMPresizet = b})
containerCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
containerCOMPextension4 = lens _containerCOMPextension4 (\a b -> a {_containerCOMPextension4 = b})
containerCOMPleftborderi :: Lens' COMP (Maybe (Tree Int))
containerCOMPleftborderi = lens _containerCOMPleftborderi (\a b -> a {_containerCOMPleftborderi = b})
containerCOMPrepocomp :: Lens' COMP (Maybe (Tree COMP))
containerCOMPrepocomp = lens _containerCOMPrepocomp (\a b -> a {_containerCOMPrepocomp = b})
containerCOMPrepositionymax :: Lens' COMP (Maybe (Tree Float))
containerCOMPrepositionymax = lens _containerCOMPrepositionymax (\a b -> a {_containerCOMPrepositionymax = b})
containerCOMPanchordrag :: Lens' COMP (Maybe (Tree Int))
containerCOMPanchordrag = lens _containerCOMPanchordrag (\a b -> a {_containerCOMPanchordrag = b})
containerCOMPbottomborderi :: Lens' COMP (Maybe (Tree Int))
containerCOMPbottomborderi = lens _containerCOMPbottomborderi (\a b -> a {_containerCOMPbottomborderi = b})
containerCOMPrightborder :: Lens' COMP (Maybe (Tree Int))
containerCOMPrightborder = lens _containerCOMPrightborder (\a b -> a {_containerCOMPrightborder = b})
containerCOMPlayer :: Lens' COMP (Maybe (Tree Float))
containerCOMPlayer = lens _containerCOMPlayer (\a b -> a {_containerCOMPlayer = b})
containerCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
containerCOMPreinitextensions = lens _containerCOMPreinitextensions (\a b -> a {_containerCOMPreinitextensions = b})
containerCOMPtopborderi :: Lens' COMP (Maybe (Tree Int))
containerCOMPtopborderi = lens _containerCOMPtopborderi (\a b -> a {_containerCOMPtopborderi = b})
containerCOMPmousewheel :: Lens' COMP (Maybe (Tree Bool))
containerCOMPmousewheel = lens _containerCOMPmousewheel (\a b -> a {_containerCOMPmousewheel = b})
containerCOMPalignallow :: Lens' COMP (Maybe (Tree Int))
containerCOMPalignallow = lens _containerCOMPalignallow (\a b -> a {_containerCOMPalignallow = b})
containerCOMPdragdropcallbacks :: Lens' COMP (Maybe (Tree DAT))
containerCOMPdragdropcallbacks = lens _containerCOMPdragdropcallbacks (\a b -> a {_containerCOMPdragdropcallbacks = b})
containerCOMPtopanchor :: Lens' COMP (Maybe (Tree Float))
containerCOMPtopanchor = lens _containerCOMPtopanchor (\a b -> a {_containerCOMPtopanchor = b})
containerCOMPrightborderi :: Lens' COMP (Maybe (Tree Int))
containerCOMPrightborderi = lens _containerCOMPrightborderi (\a b -> a {_containerCOMPrightborderi = b})
containerCOMPresizel :: Lens' COMP (Maybe (Tree Bool))
containerCOMPresizel = lens _containerCOMPresizel (\a b -> a {_containerCOMPresizel = b})
containerCOMPvfillweight :: Lens' COMP (Maybe (Tree Float))
containerCOMPvfillweight = lens _containerCOMPvfillweight (\a b -> a {_containerCOMPvfillweight = b})
containerCOMPborderover :: Lens' COMP (Maybe (Tree Bool))
containerCOMPborderover = lens _containerCOMPborderover (\a b -> a {_containerCOMPborderover = b})
containerCOMPnamedchop :: Lens' COMP (Maybe (Tree Bool))
containerCOMPnamedchop = lens _containerCOMPnamedchop (\a b -> a {_containerCOMPnamedchop = b})
containerCOMPmarginb :: Lens' COMP (Maybe (Tree Float))
containerCOMPmarginb = lens _containerCOMPmarginb (\a b -> a {_containerCOMPmarginb = b})
containerCOMPrepositionxmax :: Lens' COMP (Maybe (Tree Float))
containerCOMPrepositionxmax = lens _containerCOMPrepositionxmax (\a b -> a {_containerCOMPrepositionxmax = b})
containerCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
containerCOMPextension2 = lens _containerCOMPextension2 (\a b -> a {_containerCOMPextension2 = b})
containerCOMPalignmax :: Lens' COMP (Maybe (Tree Int))
containerCOMPalignmax = lens _containerCOMPalignmax (\a b -> a {_containerCOMPalignmax = b})
containerCOMPjustifyv :: Lens' COMP (Maybe (Tree Int))
containerCOMPjustifyv = lens _containerCOMPjustifyv (\a b -> a {_containerCOMPjustifyv = b})
containerCOMPpostoffset :: Lens' COMP (Vec2)
containerCOMPpostoffset = lens _containerCOMPpostoffset (\a b -> a {_containerCOMPpostoffset = b})
containerCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
containerCOMPpromoteextension3 = lens _containerCOMPpromoteextension3 (\a b -> a {_containerCOMPpromoteextension3 = b})
containerCOMPtopoffset :: Lens' COMP (Maybe (Tree Float))
containerCOMPtopoffset = lens _containerCOMPtopoffset (\a b -> a {_containerCOMPtopoffset = b})
containerCOMPcomposite :: Lens' COMP (Maybe (Tree Int))
containerCOMPcomposite = lens _containerCOMPcomposite (\a b -> a {_containerCOMPcomposite = b})
containerCOMPdragscript :: Lens' COMP (Maybe (Tree DAT))
containerCOMPdragscript = lens _containerCOMPdragscript (\a b -> a {_containerCOMPdragscript = b})
containerCOMPmultrgb :: Lens' COMP (Maybe (Tree Bool))
containerCOMPmultrgb = lens _containerCOMPmultrgb (\a b -> a {_containerCOMPmultrgb = b})
containerCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
containerCOMPextension1 = lens _containerCOMPextension1 (\a b -> a {_containerCOMPextension1 = b})
containerCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
containerCOMPpromoteextension1 = lens _containerCOMPpromoteextension1 (\a b -> a {_containerCOMPpromoteextension1 = b})
containerCOMPbordera :: Lens' COMP (Vec3)
containerCOMPbordera = lens _containerCOMPbordera (\a b -> a {_containerCOMPbordera = b})
containerCOMPuvbuttonsleft :: Lens' COMP (Maybe (Tree Bool))
containerCOMPuvbuttonsleft = lens _containerCOMPuvbuttonsleft (\a b -> a {_containerCOMPuvbuttonsleft = b})
containerCOMPbgcolor :: Lens' COMP (Vec3)
containerCOMPbgcolor = lens _containerCOMPbgcolor (\a b -> a {_containerCOMPbgcolor = b})
containerCOMPresizehmax :: Lens' COMP (Maybe (Tree Float))
containerCOMPresizehmax = lens _containerCOMPresizehmax (\a b -> a {_containerCOMPresizehmax = b})
containerCOMPhelpdat :: Lens' COMP (Maybe (Tree DAT))
containerCOMPhelpdat = lens _containerCOMPhelpdat (\a b -> a {_containerCOMPhelpdat = b})
containerCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
containerCOMPextension3 = lens _containerCOMPextension3 (\a b -> a {_containerCOMPextension3 = b})
containerCOMPdrop :: Lens' COMP (Maybe (Tree Int))
containerCOMPdrop = lens _containerCOMPdrop (\a b -> a {_containerCOMPdrop = b})
containerCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
containerCOMPexternaltox = lens _containerCOMPexternaltox (\a b -> a {_containerCOMPexternaltox = b})
containerCOMPrightanchor :: Lens' COMP (Maybe (Tree Float))
containerCOMPrightanchor = lens _containerCOMPrightanchor (\a b -> a {_containerCOMPrightanchor = b})
containerCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
containerCOMPextname2 = lens _containerCOMPextname2 (\a b -> a {_containerCOMPextname2 = b})
containerCOMPh :: Lens' COMP (Maybe (Tree Int))
containerCOMPh = lens _containerCOMPh (\a b -> a {_containerCOMPh = b})
containerCOMPleftborder :: Lens' COMP (Maybe (Tree Int))
containerCOMPleftborder = lens _containerCOMPleftborder (\a b -> a {_containerCOMPleftborder = b})
containerCOMPtopfill :: Lens' COMP (Maybe (Tree Int))
containerCOMPtopfill = lens _containerCOMPtopfill (\a b -> a {_containerCOMPtopfill = b})
containerCOMPresizewmin :: Lens' COMP (Maybe (Tree Float))
containerCOMPresizewmin = lens _containerCOMPresizewmin (\a b -> a {_containerCOMPresizewmin = b})
containerCOMPmouserel :: Lens' COMP (Maybe (Tree Bool))
containerCOMPmouserel = lens _containerCOMPmouserel (\a b -> a {_containerCOMPmouserel = b})
containerCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
containerCOMPenablecloningpulse = lens _containerCOMPenablecloningpulse (\a b -> a {_containerCOMPenablecloningpulse = b})
containerCOMPoffset :: Lens' COMP (Vec2)
containerCOMPoffset = lens _containerCOMPoffset (\a b -> a {_containerCOMPoffset = b})
containerCOMPresizeb :: Lens' COMP (Maybe (Tree Bool))
containerCOMPresizeb = lens _containerCOMPresizeb (\a b -> a {_containerCOMPresizeb = b})
containerCOMPleftoffset :: Lens' COMP (Maybe (Tree Float))
containerCOMPleftoffset = lens _containerCOMPleftoffset (\a b -> a {_containerCOMPleftoffset = b})
containerCOMPy :: Lens' COMP (Maybe (Tree Int))
containerCOMPy = lens _containerCOMPy (\a b -> a {_containerCOMPy = b})
containerCOMPpvscrollbar :: Lens' COMP (Maybe (Tree Int))
containerCOMPpvscrollbar = lens _containerCOMPpvscrollbar (\a b -> a {_containerCOMPpvscrollbar = b})
containerCOMPcrop :: Lens' COMP (Maybe (Tree Int))
containerCOMPcrop = lens _containerCOMPcrop (\a b -> a {_containerCOMPcrop = b})
containerCOMPbottomoffset :: Lens' COMP (Maybe (Tree Float))
containerCOMPbottomoffset = lens _containerCOMPbottomoffset (\a b -> a {_containerCOMPbottomoffset = b})
containerCOMPdisplay :: Lens' COMP (Maybe (Tree Bool))
containerCOMPdisplay = lens _containerCOMPdisplay (\a b -> a {_containerCOMPdisplay = b})
containerCOMPfit :: Lens' COMP (Maybe (Tree Int))
containerCOMPfit = lens _containerCOMPfit (\a b -> a {_containerCOMPfit = b})
containerCOMPaspect :: Lens' COMP (Maybe (Tree Float))
containerCOMPaspect = lens _containerCOMPaspect (\a b -> a {_containerCOMPaspect = b})
containerCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
containerCOMPextname4 = lens _containerCOMPextname4 (\a b -> a {_containerCOMPextname4 = b})
containerCOMPuvbuttonsright :: Lens' COMP (Maybe (Tree Bool))
containerCOMPuvbuttonsright = lens _containerCOMPuvbuttonsright (\a b -> a {_containerCOMPuvbuttonsright = b})
containerCOMPresizewmax :: Lens' COMP (Maybe (Tree Float))
containerCOMPresizewmax = lens _containerCOMPresizewmax (\a b -> a {_containerCOMPresizewmax = b})
containerCOMPborderb :: Lens' COMP (Vec3)
containerCOMPborderb = lens _containerCOMPborderb (\a b -> a {_containerCOMPborderb = b})
containerCOMPbottomanchor :: Lens' COMP (Maybe (Tree Float))
containerCOMPbottomanchor = lens _containerCOMPbottomanchor (\a b -> a {_containerCOMPbottomanchor = b})
containerCOMPsizefromwindow :: Lens' COMP (Maybe (Tree Bool))
containerCOMPsizefromwindow = lens _containerCOMPsizefromwindow (\a b -> a {_containerCOMPsizefromwindow = b})
containerCOMPopacity :: Lens' COMP (Maybe (Tree Float))
containerCOMPopacity = lens _containerCOMPopacity (\a b -> a {_containerCOMPopacity = b})
containerCOMPtop :: Lens' COMP (Maybe (Tree TOP))
containerCOMPtop = lens _containerCOMPtop (\a b -> a {_containerCOMPtop = b})
containerCOMPcursor :: Lens' COMP (Maybe (Tree Int))
containerCOMPcursor = lens _containerCOMPcursor (\a b -> a {_containerCOMPcursor = b})
containerCOMPoverridemethod :: Lens' COMP (Maybe (Tree Int))
containerCOMPoverridemethod = lens _containerCOMPoverridemethod (\a b -> a {_containerCOMPoverridemethod = b})
containerCOMPreposition :: Lens' COMP (Maybe (Tree Int))
containerCOMPreposition = lens _containerCOMPreposition (\a b -> a {_containerCOMPreposition = b})
containerCOMPenable :: Lens' COMP (Maybe (Tree Bool))
containerCOMPenable = lens _containerCOMPenable (\a b -> a {_containerCOMPenable = b})
containerCOMPchop :: Lens' COMP (Maybe (Tree CHOP))
containerCOMPchop = lens _containerCOMPchop (\a b -> a {_containerCOMPchop = b})
containerCOMPrightoffset :: Lens' COMP (Maybe (Tree Float))
containerCOMPrightoffset = lens _containerCOMPrightoffset (\a b -> a {_containerCOMPrightoffset = b})
containerCOMPvieweraspect :: Lens' COMP (Maybe (Tree Int))
containerCOMPvieweraspect = lens _containerCOMPvieweraspect (\a b -> a {_containerCOMPvieweraspect = b})
containerCOMPborderbalpha :: Lens' COMP (Maybe (Tree Float))
containerCOMPborderbalpha = lens _containerCOMPborderbalpha (\a b -> a {_containerCOMPborderbalpha = b})
containerCOMPscrolloverlay :: Lens' COMP (Maybe (Tree Int))
containerCOMPscrolloverlay = lens _containerCOMPscrolloverlay (\a b -> a {_containerCOMPscrolloverlay = b})
containerCOMPclone :: Lens' COMP (Maybe (Tree COMP))
containerCOMPclone = lens _containerCOMPclone (\a b -> a {_containerCOMPclone = b})
containerCOMPkeepmemory :: Lens' COMP (Maybe (Tree Bool))
containerCOMPkeepmemory = lens _containerCOMPkeepmemory (\a b -> a {_containerCOMPkeepmemory = b})
containerCOMPdropscript :: Lens' COMP (Maybe (Tree DAT))
containerCOMPdropscript = lens _containerCOMPdropscript (\a b -> a {_containerCOMPdropscript = b})
containerCOMPhfillweight :: Lens' COMP (Maybe (Tree Float))
containerCOMPhfillweight = lens _containerCOMPhfillweight (\a b -> a {_containerCOMPhfillweight = b})
containerCOMPhorigin :: Lens' COMP (Maybe (Tree Float))
containerCOMPhorigin = lens _containerCOMPhorigin (\a b -> a {_containerCOMPhorigin = b})
containerCOMPspacing :: Lens' COMP (Maybe (Tree Float))
containerCOMPspacing = lens _containerCOMPspacing (\a b -> a {_containerCOMPspacing = b})
containerCOMPscale :: Lens' COMP (Vec2)
containerCOMPscale = lens _containerCOMPscale (\a b -> a {_containerCOMPscale = b})
containerCOMPphscrollbar :: Lens' COMP (Maybe (Tree Int))
containerCOMPphscrollbar = lens _containerCOMPphscrollbar (\a b -> a {_containerCOMPphscrollbar = b})
containerCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
containerCOMPopshortcut = lens _containerCOMPopshortcut (\a b -> a {_containerCOMPopshortcut = b})
containerCOMPbottomborder :: Lens' COMP (Maybe (Tree Int))
containerCOMPbottomborder = lens _containerCOMPbottomborder (\a b -> a {_containerCOMPbottomborder = b})

parameterCOMPtopborder :: Lens' COMP (Maybe (Tree Int))
parameterCOMPtopborder = lens _parameterCOMPtopborder (\a b -> a {_parameterCOMPtopborder = b})
parameterCOMPscrollbarthickness :: Lens' COMP (Maybe (Tree Int))
parameterCOMPscrollbarthickness = lens _parameterCOMPscrollbarthickness (\a b -> a {_parameterCOMPscrollbarthickness = b})
parameterCOMPw :: Lens' COMP (Maybe (Tree Int))
parameterCOMPw = lens _parameterCOMPw (\a b -> a {_parameterCOMPw = b})
parameterCOMPalignorder :: Lens' COMP (Maybe (Tree Float))
parameterCOMPalignorder = lens _parameterCOMPalignorder (\a b -> a {_parameterCOMPalignorder = b})
parameterCOMPdropscript :: Lens' COMP (Maybe (Tree DAT))
parameterCOMPdropscript = lens _parameterCOMPdropscript (\a b -> a {_parameterCOMPdropscript = b})
parameterCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPloadondemand = lens _parameterCOMPloadondemand (\a b -> a {_parameterCOMPloadondemand = b})
parameterCOMPjustifyh :: Lens' COMP (Maybe (Tree Int))
parameterCOMPjustifyh = lens _parameterCOMPjustifyh (\a b -> a {_parameterCOMPjustifyh = b})
parameterCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPpromoteextension4 = lens _parameterCOMPpromoteextension4 (\a b -> a {_parameterCOMPpromoteextension4 = b})
parameterCOMPdropdestscript :: Lens' COMP (Maybe (Tree DAT))
parameterCOMPdropdestscript = lens _parameterCOMPdropdestscript (\a b -> a {_parameterCOMPdropdestscript = b})
parameterCOMPrepositionxmin :: Lens' COMP (Maybe (Tree Float))
parameterCOMPrepositionxmin = lens _parameterCOMPrepositionxmin (\a b -> a {_parameterCOMPrepositionxmin = b})
parameterCOMPx :: Lens' COMP (Maybe (Tree Int))
parameterCOMPx = lens _parameterCOMPx (\a b -> a {_parameterCOMPx = b})
parameterCOMPmarginr :: Lens' COMP (Maybe (Tree Float))
parameterCOMPmarginr = lens _parameterCOMPmarginr (\a b -> a {_parameterCOMPmarginr = b})
parameterCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
parameterCOMPnodeview = lens _parameterCOMPnodeview (\a b -> a {_parameterCOMPnodeview = b})
parameterCOMPrepositionymax :: Lens' COMP (Maybe (Tree Float))
parameterCOMPrepositionymax = lens _parameterCOMPrepositionymax (\a b -> a {_parameterCOMPrepositionymax = b})
parameterCOMPmargint :: Lens' COMP (Maybe (Tree Float))
parameterCOMPmargint = lens _parameterCOMPmargint (\a b -> a {_parameterCOMPmargint = b})
parameterCOMPresizer :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPresizer = lens _parameterCOMPresizer (\a b -> a {_parameterCOMPresizer = b})
parameterCOMPdroptypescript :: Lens' COMP (Maybe (Tree DAT))
parameterCOMPdroptypescript = lens _parameterCOMPdroptypescript (\a b -> a {_parameterCOMPdroptypescript = b})
parameterCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPpromoteextension2 = lens _parameterCOMPpromoteextension2 (\a b -> a {_parameterCOMPpromoteextension2 = b})
parameterCOMPfixedaspect :: Lens' COMP (Maybe (Tree Int))
parameterCOMPfixedaspect = lens _parameterCOMPfixedaspect (\a b -> a {_parameterCOMPfixedaspect = b})
parameterCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPextname1 = lens _parameterCOMPextname1 (\a b -> a {_parameterCOMPextname1 = b})
parameterCOMPmarginl :: Lens' COMP (Maybe (Tree Float))
parameterCOMPmarginl = lens _parameterCOMPmarginl (\a b -> a {_parameterCOMPmarginl = b})
parameterCOMPdodisablecolor :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPdodisablecolor = lens _parameterCOMPdodisablecolor (\a b -> a {_parameterCOMPdodisablecolor = b})
parameterCOMPmultitouch :: Lens' COMP (Maybe (Tree Int))
parameterCOMPmultitouch = lens _parameterCOMPmultitouch (\a b -> a {_parameterCOMPmultitouch = b})
parameterCOMPbgalpha :: Lens' COMP (Maybe (Tree Float))
parameterCOMPbgalpha = lens _parameterCOMPbgalpha (\a b -> a {_parameterCOMPbgalpha = b})
parameterCOMPhmode :: Lens' COMP (Maybe (Tree Int))
parameterCOMPhmode = lens _parameterCOMPhmode (\a b -> a {_parameterCOMPhmode = b})
parameterCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPsavebackup = lens _parameterCOMPsavebackup (\a b -> a {_parameterCOMPsavebackup = b})
parameterCOMPuvbuttonsmiddle :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPuvbuttonsmiddle = lens _parameterCOMPuvbuttonsmiddle (\a b -> a {_parameterCOMPuvbuttonsmiddle = b})
parameterCOMPleftanchor :: Lens' COMP (Maybe (Tree Float))
parameterCOMPleftanchor = lens _parameterCOMPleftanchor (\a b -> a {_parameterCOMPleftanchor = b})
parameterCOMPclickthrough :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPclickthrough = lens _parameterCOMPclickthrough (\a b -> a {_parameterCOMPclickthrough = b})
parameterCOMPdisablealpha :: Lens' COMP (Maybe (Tree Float))
parameterCOMPdisablealpha = lens _parameterCOMPdisablealpha (\a b -> a {_parameterCOMPdisablealpha = b})
parameterCOMPvmode :: Lens' COMP (Maybe (Tree Int))
parameterCOMPvmode = lens _parameterCOMPvmode (\a b -> a {_parameterCOMPvmode = b})
parameterCOMPvorigin :: Lens' COMP (Maybe (Tree Float))
parameterCOMPvorigin = lens _parameterCOMPvorigin (\a b -> a {_parameterCOMPvorigin = b})
parameterCOMPinputeditor :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPinputeditor = lens _parameterCOMPinputeditor (\a b -> a {_parameterCOMPinputeditor = b})
parameterCOMPdisablecolor :: Lens' COMP (Vec3)
parameterCOMPdisablecolor = lens _parameterCOMPdisablecolor (\a b -> a {_parameterCOMPdisablecolor = b})
parameterCOMPresizehmin :: Lens' COMP (Maybe (Tree Float))
parameterCOMPresizehmin = lens _parameterCOMPresizehmin (\a b -> a {_parameterCOMPresizehmin = b})
parameterCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPextname3 = lens _parameterCOMPextname3 (\a b -> a {_parameterCOMPextname3 = b})
parameterCOMPborderaalpha :: Lens' COMP (Maybe (Tree Float))
parameterCOMPborderaalpha = lens _parameterCOMPborderaalpha (\a b -> a {_parameterCOMPborderaalpha = b})
parameterCOMPoverlay :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPoverlay = lens _parameterCOMPoverlay (\a b -> a {_parameterCOMPoverlay = b})
parameterCOMPrepositionymin :: Lens' COMP (Maybe (Tree Float))
parameterCOMPrepositionymin = lens _parameterCOMPrepositionymin (\a b -> a {_parameterCOMPrepositionymin = b})
parameterCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPenablecloning = lens _parameterCOMPenablecloning (\a b -> a {_parameterCOMPenablecloning = b})
parameterCOMPdrag :: Lens' COMP (Maybe (Tree Int))
parameterCOMPdrag = lens _parameterCOMPdrag (\a b -> a {_parameterCOMPdrag = b})
parameterCOMPrightanchor :: Lens' COMP (Maybe (Tree Float))
parameterCOMPrightanchor = lens _parameterCOMPrightanchor (\a b -> a {_parameterCOMPrightanchor = b})
parameterCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPreloadtoxonstart = lens _parameterCOMPreloadtoxonstart (\a b -> a {_parameterCOMPreloadtoxonstart = b})
parameterCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPreinitnet = lens _parameterCOMPreinitnet (\a b -> a {_parameterCOMPreinitnet = b})
parameterCOMPpagescope :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPpagescope = lens _parameterCOMPpagescope (\a b -> a {_parameterCOMPpagescope = b})
parameterCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPparentshortcut = lens _parameterCOMPparentshortcut (\a b -> a {_parameterCOMPparentshortcut = b})
parameterCOMPresizet :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPresizet = lens _parameterCOMPresizet (\a b -> a {_parameterCOMPresizet = b})
parameterCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPextension4 = lens _parameterCOMPextension4 (\a b -> a {_parameterCOMPextension4 = b})
parameterCOMPleftborderi :: Lens' COMP (Maybe (Tree Int))
parameterCOMPleftborderi = lens _parameterCOMPleftborderi (\a b -> a {_parameterCOMPleftborderi = b})
parameterCOMPrepocomp :: Lens' COMP (Maybe (Tree COMP))
parameterCOMPrepocomp = lens _parameterCOMPrepocomp (\a b -> a {_parameterCOMPrepocomp = b})
parameterCOMPtopanchor :: Lens' COMP (Maybe (Tree Float))
parameterCOMPtopanchor = lens _parameterCOMPtopanchor (\a b -> a {_parameterCOMPtopanchor = b})
parameterCOMPanchordrag :: Lens' COMP (Maybe (Tree Int))
parameterCOMPanchordrag = lens _parameterCOMPanchordrag (\a b -> a {_parameterCOMPanchordrag = b})
parameterCOMPbottomborderi :: Lens' COMP (Maybe (Tree Int))
parameterCOMPbottomborderi = lens _parameterCOMPbottomborderi (\a b -> a {_parameterCOMPbottomborderi = b})
parameterCOMPrightborder :: Lens' COMP (Maybe (Tree Int))
parameterCOMPrightborder = lens _parameterCOMPrightborder (\a b -> a {_parameterCOMPrightborder = b})
parameterCOMPbottomborder :: Lens' COMP (Maybe (Tree Int))
parameterCOMPbottomborder = lens _parameterCOMPbottomborder (\a b -> a {_parameterCOMPbottomborder = b})
parameterCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPreinitextensions = lens _parameterCOMPreinitextensions (\a b -> a {_parameterCOMPreinitextensions = b})
parameterCOMPtopborderi :: Lens' COMP (Maybe (Tree Int))
parameterCOMPtopborderi = lens _parameterCOMPtopborderi (\a b -> a {_parameterCOMPtopborderi = b})
parameterCOMPalignallow :: Lens' COMP (Maybe (Tree Int))
parameterCOMPalignallow = lens _parameterCOMPalignallow (\a b -> a {_parameterCOMPalignallow = b})
parameterCOMPcombinescopes :: Lens' COMP (Maybe (Tree Int))
parameterCOMPcombinescopes = lens _parameterCOMPcombinescopes (\a b -> a {_parameterCOMPcombinescopes = b})
parameterCOMPrightborderi :: Lens' COMP (Maybe (Tree Int))
parameterCOMPrightborderi = lens _parameterCOMPrightborderi (\a b -> a {_parameterCOMPrightborderi = b})
parameterCOMPresizel :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPresizel = lens _parameterCOMPresizel (\a b -> a {_parameterCOMPresizel = b})
parameterCOMPvfillweight :: Lens' COMP (Maybe (Tree Float))
parameterCOMPvfillweight = lens _parameterCOMPvfillweight (\a b -> a {_parameterCOMPvfillweight = b})
parameterCOMPborderover :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPborderover = lens _parameterCOMPborderover (\a b -> a {_parameterCOMPborderover = b})
parameterCOMPnamedchop :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPnamedchop = lens _parameterCOMPnamedchop (\a b -> a {_parameterCOMPnamedchop = b})
parameterCOMPmarginb :: Lens' COMP (Maybe (Tree Float))
parameterCOMPmarginb = lens _parameterCOMPmarginb (\a b -> a {_parameterCOMPmarginb = b})
parameterCOMPpagenames :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPpagenames = lens _parameterCOMPpagenames (\a b -> a {_parameterCOMPpagenames = b})
parameterCOMPrepositionxmax :: Lens' COMP (Maybe (Tree Float))
parameterCOMPrepositionxmax = lens _parameterCOMPrepositionxmax (\a b -> a {_parameterCOMPrepositionxmax = b})
parameterCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPextension2 = lens _parameterCOMPextension2 (\a b -> a {_parameterCOMPextension2 = b})
parameterCOMPborderbalpha :: Lens' COMP (Maybe (Tree Float))
parameterCOMPborderbalpha = lens _parameterCOMPborderbalpha (\a b -> a {_parameterCOMPborderbalpha = b})
parameterCOMPjustifyv :: Lens' COMP (Maybe (Tree Int))
parameterCOMPjustifyv = lens _parameterCOMPjustifyv (\a b -> a {_parameterCOMPjustifyv = b})
parameterCOMPpostoffset :: Lens' COMP (Vec2)
parameterCOMPpostoffset = lens _parameterCOMPpostoffset (\a b -> a {_parameterCOMPpostoffset = b})
parameterCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPpromoteextension3 = lens _parameterCOMPpromoteextension3 (\a b -> a {_parameterCOMPpromoteextension3 = b})
parameterCOMPtopoffset :: Lens' COMP (Maybe (Tree Float))
parameterCOMPtopoffset = lens _parameterCOMPtopoffset (\a b -> a {_parameterCOMPtopoffset = b})
parameterCOMPcomposite :: Lens' COMP (Maybe (Tree Int))
parameterCOMPcomposite = lens _parameterCOMPcomposite (\a b -> a {_parameterCOMPcomposite = b})
parameterCOMPdragscript :: Lens' COMP (Maybe (Tree DAT))
parameterCOMPdragscript = lens _parameterCOMPdragscript (\a b -> a {_parameterCOMPdragscript = b})
parameterCOMPmultrgb :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPmultrgb = lens _parameterCOMPmultrgb (\a b -> a {_parameterCOMPmultrgb = b})
parameterCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPextension1 = lens _parameterCOMPextension1 (\a b -> a {_parameterCOMPextension1 = b})
parameterCOMPdragdropcallbacks :: Lens' COMP (Maybe (Tree DAT))
parameterCOMPdragdropcallbacks = lens _parameterCOMPdragdropcallbacks (\a b -> a {_parameterCOMPdragdropcallbacks = b})
parameterCOMPcustom :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPcustom = lens _parameterCOMPcustom (\a b -> a {_parameterCOMPcustom = b})
parameterCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPpromoteextension1 = lens _parameterCOMPpromoteextension1 (\a b -> a {_parameterCOMPpromoteextension1 = b})
parameterCOMPbordera :: Lens' COMP (Vec3)
parameterCOMPbordera = lens _parameterCOMPbordera (\a b -> a {_parameterCOMPbordera = b})
parameterCOMPuvbuttonsleft :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPuvbuttonsleft = lens _parameterCOMPuvbuttonsleft (\a b -> a {_parameterCOMPuvbuttonsleft = b})
parameterCOMPbgcolor :: Lens' COMP (Vec3)
parameterCOMPbgcolor = lens _parameterCOMPbgcolor (\a b -> a {_parameterCOMPbgcolor = b})
parameterCOMPresizehmax :: Lens' COMP (Maybe (Tree Float))
parameterCOMPresizehmax = lens _parameterCOMPresizehmax (\a b -> a {_parameterCOMPresizehmax = b})
parameterCOMPhelpdat :: Lens' COMP (Maybe (Tree DAT))
parameterCOMPhelpdat = lens _parameterCOMPhelpdat (\a b -> a {_parameterCOMPhelpdat = b})
parameterCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPextension3 = lens _parameterCOMPextension3 (\a b -> a {_parameterCOMPextension3 = b})
parameterCOMPdrop :: Lens' COMP (Maybe (Tree Int))
parameterCOMPdrop = lens _parameterCOMPdrop (\a b -> a {_parameterCOMPdrop = b})
parameterCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPexternaltox = lens _parameterCOMPexternaltox (\a b -> a {_parameterCOMPexternaltox = b})
parameterCOMPoverridemethod :: Lens' COMP (Maybe (Tree Int))
parameterCOMPoverridemethod = lens _parameterCOMPoverridemethod (\a b -> a {_parameterCOMPoverridemethod = b})
parameterCOMPalign :: Lens' COMP (Maybe (Tree Int))
parameterCOMPalign = lens _parameterCOMPalign (\a b -> a {_parameterCOMPalign = b})
parameterCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPextname2 = lens _parameterCOMPextname2 (\a b -> a {_parameterCOMPextname2 = b})
parameterCOMPh :: Lens' COMP (Maybe (Tree Int))
parameterCOMPh = lens _parameterCOMPh (\a b -> a {_parameterCOMPh = b})
parameterCOMPleftborder :: Lens' COMP (Maybe (Tree Int))
parameterCOMPleftborder = lens _parameterCOMPleftborder (\a b -> a {_parameterCOMPleftborder = b})
parameterCOMPtopfill :: Lens' COMP (Maybe (Tree Int))
parameterCOMPtopfill = lens _parameterCOMPtopfill (\a b -> a {_parameterCOMPtopfill = b})
parameterCOMPresizewmin :: Lens' COMP (Maybe (Tree Float))
parameterCOMPresizewmin = lens _parameterCOMPresizewmin (\a b -> a {_parameterCOMPresizewmin = b})
parameterCOMPmouserel :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPmouserel = lens _parameterCOMPmouserel (\a b -> a {_parameterCOMPmouserel = b})
parameterCOMPoversize :: Lens' COMP (Maybe (Tree Float))
parameterCOMPoversize = lens _parameterCOMPoversize (\a b -> a {_parameterCOMPoversize = b})
parameterCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPenablecloningpulse = lens _parameterCOMPenablecloningpulse (\a b -> a {_parameterCOMPenablecloningpulse = b})
parameterCOMPoffset :: Lens' COMP (Vec2)
parameterCOMPoffset = lens _parameterCOMPoffset (\a b -> a {_parameterCOMPoffset = b})
parameterCOMPparscope :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPparscope = lens _parameterCOMPparscope (\a b -> a {_parameterCOMPparscope = b})
parameterCOMPresizeb :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPresizeb = lens _parameterCOMPresizeb (\a b -> a {_parameterCOMPresizeb = b})
parameterCOMPleftoffset :: Lens' COMP (Maybe (Tree Float))
parameterCOMPleftoffset = lens _parameterCOMPleftoffset (\a b -> a {_parameterCOMPleftoffset = b})
parameterCOMPy :: Lens' COMP (Maybe (Tree Int))
parameterCOMPy = lens _parameterCOMPy (\a b -> a {_parameterCOMPy = b})
parameterCOMPpvscrollbar :: Lens' COMP (Maybe (Tree Int))
parameterCOMPpvscrollbar = lens _parameterCOMPpvscrollbar (\a b -> a {_parameterCOMPpvscrollbar = b})
parameterCOMPcrop :: Lens' COMP (Maybe (Tree Int))
parameterCOMPcrop = lens _parameterCOMPcrop (\a b -> a {_parameterCOMPcrop = b})
parameterCOMPbottomoffset :: Lens' COMP (Maybe (Tree Float))
parameterCOMPbottomoffset = lens _parameterCOMPbottomoffset (\a b -> a {_parameterCOMPbottomoffset = b})
parameterCOMPdisplay :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPdisplay = lens _parameterCOMPdisplay (\a b -> a {_parameterCOMPdisplay = b})
parameterCOMPfit :: Lens' COMP (Maybe (Tree Int))
parameterCOMPfit = lens _parameterCOMPfit (\a b -> a {_parameterCOMPfit = b})
parameterCOMPaspect :: Lens' COMP (Maybe (Tree Float))
parameterCOMPaspect = lens _parameterCOMPaspect (\a b -> a {_parameterCOMPaspect = b})
parameterCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPextname4 = lens _parameterCOMPextname4 (\a b -> a {_parameterCOMPextname4 = b})
parameterCOMPuvbuttonsright :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPuvbuttonsright = lens _parameterCOMPuvbuttonsright (\a b -> a {_parameterCOMPuvbuttonsright = b})
parameterCOMPresizewmax :: Lens' COMP (Maybe (Tree Float))
parameterCOMPresizewmax = lens _parameterCOMPresizewmax (\a b -> a {_parameterCOMPresizewmax = b})
parameterCOMPscopeorder :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPscopeorder = lens _parameterCOMPscopeorder (\a b -> a {_parameterCOMPscopeorder = b})
parameterCOMPborderb :: Lens' COMP (Vec3)
parameterCOMPborderb = lens _parameterCOMPborderb (\a b -> a {_parameterCOMPborderb = b})
parameterCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPsubcompname = lens _parameterCOMPsubcompname (\a b -> a {_parameterCOMPsubcompname = b})
parameterCOMPbottomanchor :: Lens' COMP (Maybe (Tree Float))
parameterCOMPbottomanchor = lens _parameterCOMPbottomanchor (\a b -> a {_parameterCOMPbottomanchor = b})
parameterCOMPsizefromwindow :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPsizefromwindow = lens _parameterCOMPsizefromwindow (\a b -> a {_parameterCOMPsizefromwindow = b})
parameterCOMPopacity :: Lens' COMP (Maybe (Tree Float))
parameterCOMPopacity = lens _parameterCOMPopacity (\a b -> a {_parameterCOMPopacity = b})
parameterCOMPtop :: Lens' COMP (Maybe (Tree TOP))
parameterCOMPtop = lens _parameterCOMPtop (\a b -> a {_parameterCOMPtop = b})
parameterCOMPmousewheel :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPmousewheel = lens _parameterCOMPmousewheel (\a b -> a {_parameterCOMPmousewheel = b})
parameterCOMPbuiltin :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPbuiltin = lens _parameterCOMPbuiltin (\a b -> a {_parameterCOMPbuiltin = b})
parameterCOMPreposition :: Lens' COMP (Maybe (Tree Int))
parameterCOMPreposition = lens _parameterCOMPreposition (\a b -> a {_parameterCOMPreposition = b})
parameterCOMPenable :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPenable = lens _parameterCOMPenable (\a b -> a {_parameterCOMPenable = b})
parameterCOMPchop :: Lens' COMP (Maybe (Tree CHOP))
parameterCOMPchop = lens _parameterCOMPchop (\a b -> a {_parameterCOMPchop = b})
parameterCOMPrightoffset :: Lens' COMP (Maybe (Tree Float))
parameterCOMPrightoffset = lens _parameterCOMPrightoffset (\a b -> a {_parameterCOMPrightoffset = b})
parameterCOMPvieweraspect :: Lens' COMP (Maybe (Tree Int))
parameterCOMPvieweraspect = lens _parameterCOMPvieweraspect (\a b -> a {_parameterCOMPvieweraspect = b})
parameterCOMPheader :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPheader = lens _parameterCOMPheader (\a b -> a {_parameterCOMPheader = b})
parameterCOMPalignmax :: Lens' COMP (Maybe (Tree Int))
parameterCOMPalignmax = lens _parameterCOMPalignmax (\a b -> a {_parameterCOMPalignmax = b})
parameterCOMPscrolloverlay :: Lens' COMP (Maybe (Tree Int))
parameterCOMPscrolloverlay = lens _parameterCOMPscrolloverlay (\a b -> a {_parameterCOMPscrolloverlay = b})
parameterCOMPclone :: Lens' COMP (Maybe (Tree COMP))
parameterCOMPclone = lens _parameterCOMPclone (\a b -> a {_parameterCOMPclone = b})
parameterCOMPkeepmemory :: Lens' COMP (Maybe (Tree Bool))
parameterCOMPkeepmemory = lens _parameterCOMPkeepmemory (\a b -> a {_parameterCOMPkeepmemory = b})
parameterCOMPlayer :: Lens' COMP (Maybe (Tree Float))
parameterCOMPlayer = lens _parameterCOMPlayer (\a b -> a {_parameterCOMPlayer = b})
parameterCOMPhfillweight :: Lens' COMP (Maybe (Tree Float))
parameterCOMPhfillweight = lens _parameterCOMPhfillweight (\a b -> a {_parameterCOMPhfillweight = b})
parameterCOMPhorigin :: Lens' COMP (Maybe (Tree Float))
parameterCOMPhorigin = lens _parameterCOMPhorigin (\a b -> a {_parameterCOMPhorigin = b})
parameterCOMPspacing :: Lens' COMP (Maybe (Tree Float))
parameterCOMPspacing = lens _parameterCOMPspacing (\a b -> a {_parameterCOMPspacing = b})
parameterCOMPscale :: Lens' COMP (Vec2)
parameterCOMPscale = lens _parameterCOMPscale (\a b -> a {_parameterCOMPscale = b})
parameterCOMPphscrollbar :: Lens' COMP (Maybe (Tree Int))
parameterCOMPphscrollbar = lens _parameterCOMPphscrollbar (\a b -> a {_parameterCOMPphscrollbar = b})
parameterCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
parameterCOMPopshortcut = lens _parameterCOMPopshortcut (\a b -> a {_parameterCOMPopshortcut = b})
parameterCOMPcursor :: Lens' COMP (Maybe (Tree Int))
parameterCOMPcursor = lens _parameterCOMPcursor (\a b -> a {_parameterCOMPcursor = b})

sliderCOMPtopborder :: Lens' COMP (Maybe (Tree Int))
sliderCOMPtopborder = lens _sliderCOMPtopborder (\a b -> a {_sliderCOMPtopborder = b})
sliderCOMPscrollbarthickness :: Lens' COMP (Maybe (Tree Int))
sliderCOMPscrollbarthickness = lens _sliderCOMPscrollbarthickness (\a b -> a {_sliderCOMPscrollbarthickness = b})
sliderCOMPw :: Lens' COMP (Maybe (Tree Int))
sliderCOMPw = lens _sliderCOMPw (\a b -> a {_sliderCOMPw = b})
sliderCOMPalignorder :: Lens' COMP (Maybe (Tree Float))
sliderCOMPalignorder = lens _sliderCOMPalignorder (\a b -> a {_sliderCOMPalignorder = b})
sliderCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPloadondemand = lens _sliderCOMPloadondemand (\a b -> a {_sliderCOMPloadondemand = b})
sliderCOMPjustifyh :: Lens' COMP (Maybe (Tree Int))
sliderCOMPjustifyh = lens _sliderCOMPjustifyh (\a b -> a {_sliderCOMPjustifyh = b})
sliderCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPpromoteextension4 = lens _sliderCOMPpromoteextension4 (\a b -> a {_sliderCOMPpromoteextension4 = b})
sliderCOMPdropdestscript :: Lens' COMP (Maybe (Tree DAT))
sliderCOMPdropdestscript = lens _sliderCOMPdropdestscript (\a b -> a {_sliderCOMPdropdestscript = b})
sliderCOMPrepositionxmin :: Lens' COMP (Maybe (Tree Float))
sliderCOMPrepositionxmin = lens _sliderCOMPrepositionxmin (\a b -> a {_sliderCOMPrepositionxmin = b})
sliderCOMPx :: Lens' COMP (Maybe (Tree Int))
sliderCOMPx = lens _sliderCOMPx (\a b -> a {_sliderCOMPx = b})
sliderCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
sliderCOMPnodeview = lens _sliderCOMPnodeview (\a b -> a {_sliderCOMPnodeview = b})
sliderCOMPrepositionymax :: Lens' COMP (Maybe (Tree Float))
sliderCOMPrepositionymax = lens _sliderCOMPrepositionymax (\a b -> a {_sliderCOMPrepositionymax = b})
sliderCOMPmargint :: Lens' COMP (Maybe (Tree Float))
sliderCOMPmargint = lens _sliderCOMPmargint (\a b -> a {_sliderCOMPmargint = b})
sliderCOMPresizer :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPresizer = lens _sliderCOMPresizer (\a b -> a {_sliderCOMPresizer = b})
sliderCOMPdroptypescript :: Lens' COMP (Maybe (Tree DAT))
sliderCOMPdroptypescript = lens _sliderCOMPdroptypescript (\a b -> a {_sliderCOMPdroptypescript = b})
sliderCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPpromoteextension2 = lens _sliderCOMPpromoteextension2 (\a b -> a {_sliderCOMPpromoteextension2 = b})
sliderCOMPfixedaspect :: Lens' COMP (Maybe (Tree Int))
sliderCOMPfixedaspect = lens _sliderCOMPfixedaspect (\a b -> a {_sliderCOMPfixedaspect = b})
sliderCOMPzonel :: Lens' COMP (Maybe (Tree Float))
sliderCOMPzonel = lens _sliderCOMPzonel (\a b -> a {_sliderCOMPzonel = b})
sliderCOMPmarginl :: Lens' COMP (Maybe (Tree Float))
sliderCOMPmarginl = lens _sliderCOMPmarginl (\a b -> a {_sliderCOMPmarginl = b})
sliderCOMPdodisablecolor :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPdodisablecolor = lens _sliderCOMPdodisablecolor (\a b -> a {_sliderCOMPdodisablecolor = b})
sliderCOMPmultitouch :: Lens' COMP (Maybe (Tree Int))
sliderCOMPmultitouch = lens _sliderCOMPmultitouch (\a b -> a {_sliderCOMPmultitouch = b})
sliderCOMPbgalpha :: Lens' COMP (Maybe (Tree Float))
sliderCOMPbgalpha = lens _sliderCOMPbgalpha (\a b -> a {_sliderCOMPbgalpha = b})
sliderCOMPhmode :: Lens' COMP (Maybe (Tree Int))
sliderCOMPhmode = lens _sliderCOMPhmode (\a b -> a {_sliderCOMPhmode = b})
sliderCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPsavebackup = lens _sliderCOMPsavebackup (\a b -> a {_sliderCOMPsavebackup = b})
sliderCOMPuvbuttonsmiddle :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPuvbuttonsmiddle = lens _sliderCOMPuvbuttonsmiddle (\a b -> a {_sliderCOMPuvbuttonsmiddle = b})
sliderCOMPleftanchor :: Lens' COMP (Maybe (Tree Float))
sliderCOMPleftanchor = lens _sliderCOMPleftanchor (\a b -> a {_sliderCOMPleftanchor = b})
sliderCOMPmultrgb :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPmultrgb = lens _sliderCOMPmultrgb (\a b -> a {_sliderCOMPmultrgb = b})
sliderCOMPdisablealpha :: Lens' COMP (Maybe (Tree Float))
sliderCOMPdisablealpha = lens _sliderCOMPdisablealpha (\a b -> a {_sliderCOMPdisablealpha = b})
sliderCOMPvmode :: Lens' COMP (Maybe (Tree Int))
sliderCOMPvmode = lens _sliderCOMPvmode (\a b -> a {_sliderCOMPvmode = b})
sliderCOMPvorigin :: Lens' COMP (Maybe (Tree Float))
sliderCOMPvorigin = lens _sliderCOMPvorigin (\a b -> a {_sliderCOMPvorigin = b})
sliderCOMPdrag :: Lens' COMP (Maybe (Tree Int))
sliderCOMPdrag = lens _sliderCOMPdrag (\a b -> a {_sliderCOMPdrag = b})
sliderCOMPdisablecolor :: Lens' COMP (Vec3)
sliderCOMPdisablecolor = lens _sliderCOMPdisablecolor (\a b -> a {_sliderCOMPdisablecolor = b})
sliderCOMPresizehmin :: Lens' COMP (Maybe (Tree Float))
sliderCOMPresizehmin = lens _sliderCOMPresizehmin (\a b -> a {_sliderCOMPresizehmin = b})
sliderCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
sliderCOMPextname3 = lens _sliderCOMPextname3 (\a b -> a {_sliderCOMPextname3 = b})
sliderCOMPborderaalpha :: Lens' COMP (Maybe (Tree Float))
sliderCOMPborderaalpha = lens _sliderCOMPborderaalpha (\a b -> a {_sliderCOMPborderaalpha = b})
sliderCOMPoverlay :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPoverlay = lens _sliderCOMPoverlay (\a b -> a {_sliderCOMPoverlay = b})
sliderCOMPrepositionymin :: Lens' COMP (Maybe (Tree Float))
sliderCOMPrepositionymin = lens _sliderCOMPrepositionymin (\a b -> a {_sliderCOMPrepositionymin = b})
sliderCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPenablecloning = lens _sliderCOMPenablecloning (\a b -> a {_sliderCOMPenablecloning = b})
sliderCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
sliderCOMPsubcompname = lens _sliderCOMPsubcompname (\a b -> a {_sliderCOMPsubcompname = b})
sliderCOMPrightanchor :: Lens' COMP (Maybe (Tree Float))
sliderCOMPrightanchor = lens _sliderCOMPrightanchor (\a b -> a {_sliderCOMPrightanchor = b})
sliderCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPreloadtoxonstart = lens _sliderCOMPreloadtoxonstart (\a b -> a {_sliderCOMPreloadtoxonstart = b})
sliderCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPreinitnet = lens _sliderCOMPreinitnet (\a b -> a {_sliderCOMPreinitnet = b})
sliderCOMPmarginr :: Lens' COMP (Maybe (Tree Float))
sliderCOMPmarginr = lens _sliderCOMPmarginr (\a b -> a {_sliderCOMPmarginr = b})
sliderCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
sliderCOMPparentshortcut = lens _sliderCOMPparentshortcut (\a b -> a {_sliderCOMPparentshortcut = b})
sliderCOMPresizet :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPresizet = lens _sliderCOMPresizet (\a b -> a {_sliderCOMPresizet = b})
sliderCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
sliderCOMPextension4 = lens _sliderCOMPextension4 (\a b -> a {_sliderCOMPextension4 = b})
sliderCOMPnamedchop :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPnamedchop = lens _sliderCOMPnamedchop (\a b -> a {_sliderCOMPnamedchop = b})
sliderCOMPclampvl :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPclampvl = lens _sliderCOMPclampvl (\a b -> a {_sliderCOMPclampvl = b})
sliderCOMPrepocomp :: Lens' COMP (Maybe (Tree COMP))
sliderCOMPrepocomp = lens _sliderCOMPrepocomp (\a b -> a {_sliderCOMPrepocomp = b})
sliderCOMPtopanchor :: Lens' COMP (Maybe (Tree Float))
sliderCOMPtopanchor = lens _sliderCOMPtopanchor (\a b -> a {_sliderCOMPtopanchor = b})
sliderCOMPanchordrag :: Lens' COMP (Maybe (Tree Int))
sliderCOMPanchordrag = lens _sliderCOMPanchordrag (\a b -> a {_sliderCOMPanchordrag = b})
sliderCOMPbottomborderi :: Lens' COMP (Maybe (Tree Int))
sliderCOMPbottomborderi = lens _sliderCOMPbottomborderi (\a b -> a {_sliderCOMPbottomborderi = b})
sliderCOMPclampul :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPclampul = lens _sliderCOMPclampul (\a b -> a {_sliderCOMPclampul = b})
sliderCOMPrightborder :: Lens' COMP (Maybe (Tree Int))
sliderCOMPrightborder = lens _sliderCOMPrightborder (\a b -> a {_sliderCOMPrightborder = b})
sliderCOMPlayer :: Lens' COMP (Maybe (Tree Float))
sliderCOMPlayer = lens _sliderCOMPlayer (\a b -> a {_sliderCOMPlayer = b})
sliderCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPreinitextensions = lens _sliderCOMPreinitextensions (\a b -> a {_sliderCOMPreinitextensions = b})
sliderCOMPtopborderi :: Lens' COMP (Maybe (Tree Int))
sliderCOMPtopborderi = lens _sliderCOMPtopborderi (\a b -> a {_sliderCOMPtopborderi = b})
sliderCOMPalignallow :: Lens' COMP (Maybe (Tree Int))
sliderCOMPalignallow = lens _sliderCOMPalignallow (\a b -> a {_sliderCOMPalignallow = b})
sliderCOMPdragdropcallbacks :: Lens' COMP (Maybe (Tree DAT))
sliderCOMPdragdropcallbacks = lens _sliderCOMPdragdropcallbacks (\a b -> a {_sliderCOMPdragdropcallbacks = b})
sliderCOMPrightborderi :: Lens' COMP (Maybe (Tree Int))
sliderCOMPrightborderi = lens _sliderCOMPrightborderi (\a b -> a {_sliderCOMPrightborderi = b})
sliderCOMPresizel :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPresizel = lens _sliderCOMPresizel (\a b -> a {_sliderCOMPresizel = b})
sliderCOMPalignmax :: Lens' COMP (Maybe (Tree Int))
sliderCOMPalignmax = lens _sliderCOMPalignmax (\a b -> a {_sliderCOMPalignmax = b})
sliderCOMPvfillweight :: Lens' COMP (Maybe (Tree Float))
sliderCOMPvfillweight = lens _sliderCOMPvfillweight (\a b -> a {_sliderCOMPvfillweight = b})
sliderCOMPborderover :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPborderover = lens _sliderCOMPborderover (\a b -> a {_sliderCOMPborderover = b})
sliderCOMPleftborderi :: Lens' COMP (Maybe (Tree Int))
sliderCOMPleftborderi = lens _sliderCOMPleftborderi (\a b -> a {_sliderCOMPleftborderi = b})
sliderCOMPmarginb :: Lens' COMP (Maybe (Tree Float))
sliderCOMPmarginb = lens _sliderCOMPmarginb (\a b -> a {_sliderCOMPmarginb = b})
sliderCOMPrepositionxmax :: Lens' COMP (Maybe (Tree Float))
sliderCOMPrepositionxmax = lens _sliderCOMPrepositionxmax (\a b -> a {_sliderCOMPrepositionxmax = b})
sliderCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
sliderCOMPextension2 = lens _sliderCOMPextension2 (\a b -> a {_sliderCOMPextension2 = b})
sliderCOMPborderbalpha :: Lens' COMP (Maybe (Tree Float))
sliderCOMPborderbalpha = lens _sliderCOMPborderbalpha (\a b -> a {_sliderCOMPborderbalpha = b})
sliderCOMPjustifyv :: Lens' COMP (Maybe (Tree Int))
sliderCOMPjustifyv = lens _sliderCOMPjustifyv (\a b -> a {_sliderCOMPjustifyv = b})
sliderCOMPpostoffset :: Lens' COMP (Vec2)
sliderCOMPpostoffset = lens _sliderCOMPpostoffset (\a b -> a {_sliderCOMPpostoffset = b})
sliderCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPpromoteextension3 = lens _sliderCOMPpromoteextension3 (\a b -> a {_sliderCOMPpromoteextension3 = b})
sliderCOMPtopoffset :: Lens' COMP (Maybe (Tree Float))
sliderCOMPtopoffset = lens _sliderCOMPtopoffset (\a b -> a {_sliderCOMPtopoffset = b})
sliderCOMPcomposite :: Lens' COMP (Maybe (Tree Int))
sliderCOMPcomposite = lens _sliderCOMPcomposite (\a b -> a {_sliderCOMPcomposite = b})
sliderCOMPdragscript :: Lens' COMP (Maybe (Tree DAT))
sliderCOMPdragscript = lens _sliderCOMPdragscript (\a b -> a {_sliderCOMPdragscript = b})
sliderCOMPzoneb :: Lens' COMP (Maybe (Tree Float))
sliderCOMPzoneb = lens _sliderCOMPzoneb (\a b -> a {_sliderCOMPzoneb = b})
sliderCOMPclampvh :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPclampvh = lens _sliderCOMPclampvh (\a b -> a {_sliderCOMPclampvh = b})
sliderCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
sliderCOMPextension1 = lens _sliderCOMPextension1 (\a b -> a {_sliderCOMPextension1 = b})
sliderCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
sliderCOMPextname1 = lens _sliderCOMPextname1 (\a b -> a {_sliderCOMPextname1 = b})
sliderCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPpromoteextension1 = lens _sliderCOMPpromoteextension1 (\a b -> a {_sliderCOMPpromoteextension1 = b})
sliderCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
sliderCOMPopshortcut = lens _sliderCOMPopshortcut (\a b -> a {_sliderCOMPopshortcut = b})
sliderCOMPbordera :: Lens' COMP (Vec3)
sliderCOMPbordera = lens _sliderCOMPbordera (\a b -> a {_sliderCOMPbordera = b})
sliderCOMPuvbuttonsleft :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPuvbuttonsleft = lens _sliderCOMPuvbuttonsleft (\a b -> a {_sliderCOMPuvbuttonsleft = b})
sliderCOMPbgcolor :: Lens' COMP (Vec3)
sliderCOMPbgcolor = lens _sliderCOMPbgcolor (\a b -> a {_sliderCOMPbgcolor = b})
sliderCOMPresizehmax :: Lens' COMP (Maybe (Tree Float))
sliderCOMPresizehmax = lens _sliderCOMPresizehmax (\a b -> a {_sliderCOMPresizehmax = b})
sliderCOMPhelpdat :: Lens' COMP (Maybe (Tree DAT))
sliderCOMPhelpdat = lens _sliderCOMPhelpdat (\a b -> a {_sliderCOMPhelpdat = b})
sliderCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
sliderCOMPextension3 = lens _sliderCOMPextension3 (\a b -> a {_sliderCOMPextension3 = b})
sliderCOMPdrop :: Lens' COMP (Maybe (Tree Int))
sliderCOMPdrop = lens _sliderCOMPdrop (\a b -> a {_sliderCOMPdrop = b})
sliderCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
sliderCOMPexternaltox = lens _sliderCOMPexternaltox (\a b -> a {_sliderCOMPexternaltox = b})
sliderCOMPcursor :: Lens' COMP (Maybe (Tree Int))
sliderCOMPcursor = lens _sliderCOMPcursor (\a b -> a {_sliderCOMPcursor = b})
sliderCOMPalign :: Lens' COMP (Maybe (Tree Int))
sliderCOMPalign = lens _sliderCOMPalign (\a b -> a {_sliderCOMPalign = b})
sliderCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
sliderCOMPextname2 = lens _sliderCOMPextname2 (\a b -> a {_sliderCOMPextname2 = b})
sliderCOMPh :: Lens' COMP (Maybe (Tree Int))
sliderCOMPh = lens _sliderCOMPh (\a b -> a {_sliderCOMPh = b})
sliderCOMPleftborder :: Lens' COMP (Maybe (Tree Int))
sliderCOMPleftborder = lens _sliderCOMPleftborder (\a b -> a {_sliderCOMPleftborder = b})
sliderCOMPzonet :: Lens' COMP (Maybe (Tree Float))
sliderCOMPzonet = lens _sliderCOMPzonet (\a b -> a {_sliderCOMPzonet = b})
sliderCOMPtopfill :: Lens' COMP (Maybe (Tree Int))
sliderCOMPtopfill = lens _sliderCOMPtopfill (\a b -> a {_sliderCOMPtopfill = b})
sliderCOMPresizewmin :: Lens' COMP (Maybe (Tree Float))
sliderCOMPresizewmin = lens _sliderCOMPresizewmin (\a b -> a {_sliderCOMPresizewmin = b})
sliderCOMPmouserel :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPmouserel = lens _sliderCOMPmouserel (\a b -> a {_sliderCOMPmouserel = b})
sliderCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPenablecloningpulse = lens _sliderCOMPenablecloningpulse (\a b -> a {_sliderCOMPenablecloningpulse = b})
sliderCOMPoffset :: Lens' COMP (Vec2)
sliderCOMPoffset = lens _sliderCOMPoffset (\a b -> a {_sliderCOMPoffset = b})
sliderCOMPresizeb :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPresizeb = lens _sliderCOMPresizeb (\a b -> a {_sliderCOMPresizeb = b})
sliderCOMPleftoffset :: Lens' COMP (Maybe (Tree Float))
sliderCOMPleftoffset = lens _sliderCOMPleftoffset (\a b -> a {_sliderCOMPleftoffset = b})
sliderCOMPy :: Lens' COMP (Maybe (Tree Int))
sliderCOMPy = lens _sliderCOMPy (\a b -> a {_sliderCOMPy = b})
sliderCOMPpvscrollbar :: Lens' COMP (Maybe (Tree Int))
sliderCOMPpvscrollbar = lens _sliderCOMPpvscrollbar (\a b -> a {_sliderCOMPpvscrollbar = b})
sliderCOMPcrop :: Lens' COMP (Maybe (Tree Int))
sliderCOMPcrop = lens _sliderCOMPcrop (\a b -> a {_sliderCOMPcrop = b})
sliderCOMPbottomoffset :: Lens' COMP (Maybe (Tree Float))
sliderCOMPbottomoffset = lens _sliderCOMPbottomoffset (\a b -> a {_sliderCOMPbottomoffset = b})
sliderCOMPdisplay :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPdisplay = lens _sliderCOMPdisplay (\a b -> a {_sliderCOMPdisplay = b})
sliderCOMPfit :: Lens' COMP (Maybe (Tree Int))
sliderCOMPfit = lens _sliderCOMPfit (\a b -> a {_sliderCOMPfit = b})
sliderCOMPaspect :: Lens' COMP (Maybe (Tree Float))
sliderCOMPaspect = lens _sliderCOMPaspect (\a b -> a {_sliderCOMPaspect = b})
sliderCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
sliderCOMPextname4 = lens _sliderCOMPextname4 (\a b -> a {_sliderCOMPextname4 = b})
sliderCOMPuvbuttonsright :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPuvbuttonsright = lens _sliderCOMPuvbuttonsright (\a b -> a {_sliderCOMPuvbuttonsright = b})
sliderCOMPresizewmax :: Lens' COMP (Maybe (Tree Float))
sliderCOMPresizewmax = lens _sliderCOMPresizewmax (\a b -> a {_sliderCOMPresizewmax = b})
sliderCOMPborderb :: Lens' COMP (Vec3)
sliderCOMPborderb = lens _sliderCOMPborderb (\a b -> a {_sliderCOMPborderb = b})
sliderCOMPbottomanchor :: Lens' COMP (Maybe (Tree Float))
sliderCOMPbottomanchor = lens _sliderCOMPbottomanchor (\a b -> a {_sliderCOMPbottomanchor = b})
sliderCOMPsizefromwindow :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPsizefromwindow = lens _sliderCOMPsizefromwindow (\a b -> a {_sliderCOMPsizefromwindow = b})
sliderCOMPopacity :: Lens' COMP (Maybe (Tree Float))
sliderCOMPopacity = lens _sliderCOMPopacity (\a b -> a {_sliderCOMPopacity = b})
sliderCOMPtop :: Lens' COMP (Maybe (Tree TOP))
sliderCOMPtop = lens _sliderCOMPtop (\a b -> a {_sliderCOMPtop = b})
sliderCOMPmousewheel :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPmousewheel = lens _sliderCOMPmousewheel (\a b -> a {_sliderCOMPmousewheel = b})
sliderCOMPoverridemethod :: Lens' COMP (Maybe (Tree Int))
sliderCOMPoverridemethod = lens _sliderCOMPoverridemethod (\a b -> a {_sliderCOMPoverridemethod = b})
sliderCOMPreposition :: Lens' COMP (Maybe (Tree Int))
sliderCOMPreposition = lens _sliderCOMPreposition (\a b -> a {_sliderCOMPreposition = b})
sliderCOMPenable :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPenable = lens _sliderCOMPenable (\a b -> a {_sliderCOMPenable = b})
sliderCOMPchop :: Lens' COMP (Maybe (Tree CHOP))
sliderCOMPchop = lens _sliderCOMPchop (\a b -> a {_sliderCOMPchop = b})
sliderCOMPrightoffset :: Lens' COMP (Maybe (Tree Float))
sliderCOMPrightoffset = lens _sliderCOMPrightoffset (\a b -> a {_sliderCOMPrightoffset = b})
sliderCOMPvieweraspect :: Lens' COMP (Maybe (Tree Int))
sliderCOMPvieweraspect = lens _sliderCOMPvieweraspect (\a b -> a {_sliderCOMPvieweraspect = b})
sliderCOMPzoner :: Lens' COMP (Maybe (Tree Float))
sliderCOMPzoner = lens _sliderCOMPzoner (\a b -> a {_sliderCOMPzoner = b})
sliderCOMPclampuh :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPclampuh = lens _sliderCOMPclampuh (\a b -> a {_sliderCOMPclampuh = b})
sliderCOMPscrolloverlay :: Lens' COMP (Maybe (Tree Int))
sliderCOMPscrolloverlay = lens _sliderCOMPscrolloverlay (\a b -> a {_sliderCOMPscrolloverlay = b})
sliderCOMPclone :: Lens' COMP (Maybe (Tree COMP))
sliderCOMPclone = lens _sliderCOMPclone (\a b -> a {_sliderCOMPclone = b})
sliderCOMPkeepmemory :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPkeepmemory = lens _sliderCOMPkeepmemory (\a b -> a {_sliderCOMPkeepmemory = b})
sliderCOMPdropscript :: Lens' COMP (Maybe (Tree DAT))
sliderCOMPdropscript = lens _sliderCOMPdropscript (\a b -> a {_sliderCOMPdropscript = b})
sliderCOMPclickthrough :: Lens' COMP (Maybe (Tree Bool))
sliderCOMPclickthrough = lens _sliderCOMPclickthrough (\a b -> a {_sliderCOMPclickthrough = b})
sliderCOMPhfillweight :: Lens' COMP (Maybe (Tree Float))
sliderCOMPhfillweight = lens _sliderCOMPhfillweight (\a b -> a {_sliderCOMPhfillweight = b})
sliderCOMPhorigin :: Lens' COMP (Maybe (Tree Float))
sliderCOMPhorigin = lens _sliderCOMPhorigin (\a b -> a {_sliderCOMPhorigin = b})
sliderCOMPspacing :: Lens' COMP (Maybe (Tree Float))
sliderCOMPspacing = lens _sliderCOMPspacing (\a b -> a {_sliderCOMPspacing = b})
sliderCOMPscale :: Lens' COMP (Vec2)
sliderCOMPscale = lens _sliderCOMPscale (\a b -> a {_sliderCOMPscale = b})
sliderCOMPphscrollbar :: Lens' COMP (Maybe (Tree Int))
sliderCOMPphscrollbar = lens _sliderCOMPphscrollbar (\a b -> a {_sliderCOMPphscrollbar = b})
sliderCOMPslidertype :: Lens' COMP (Maybe (Tree Int))
sliderCOMPslidertype = lens _sliderCOMPslidertype (\a b -> a {_sliderCOMPslidertype = b})
sliderCOMPbottomborder :: Lens' COMP (Maybe (Tree Int))
sliderCOMPbottomborder = lens _sliderCOMPbottomborder (\a b -> a {_sliderCOMPbottomborder = b})

geometryCOMPinstancea :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancea = lens _geometryCOMPinstancea (\a b -> a {_geometryCOMPinstancea = b})
geometryCOMPinstancerotupy :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancerotupy = lens _geometryCOMPinstancerotupy (\a b -> a {_geometryCOMPinstancerotupy = b})
geometryCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPextname1 = lens _geometryCOMPextname1 (\a b -> a {_geometryCOMPextname1 = b})
geometryCOMPinstancerottoz :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancerottoz = lens _geometryCOMPinstancerottoz (\a b -> a {_geometryCOMPinstancerottoz = b})
geometryCOMPinstanceb :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstanceb = lens _geometryCOMPinstanceb (\a b -> a {_geometryCOMPinstanceb = b})
geometryCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPextension4 = lens _geometryCOMPextension4 (\a b -> a {_geometryCOMPextension4 = b})
geometryCOMPpathorient :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPpathorient = lens _geometryCOMPpathorient (\a b -> a {_geometryCOMPpathorient = b})
geometryCOMProll :: Lens' COMP (Maybe (Tree Float))
geometryCOMProll = lens _geometryCOMProll (\a b -> a {_geometryCOMProll = b})
geometryCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
geometryCOMPnodeview = lens _geometryCOMPnodeview (\a b -> a {_geometryCOMPnodeview = b})
geometryCOMPinstancepx :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancepx = lens _geometryCOMPinstancepx (\a b -> a {_geometryCOMPinstancepx = b})
geometryCOMPpt :: Lens' COMP (Vec3)
geometryCOMPpt = lens _geometryCOMPpt (\a b -> a {_geometryCOMPpt = b})
geometryCOMPinstancetexanisotropy :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstancetexanisotropy = lens _geometryCOMPinstancetexanisotropy (\a b -> a {_geometryCOMPinstancetexanisotropy = b})
geometryCOMPprioritymethod :: Lens' COMP (Maybe (Tree Int))
geometryCOMPprioritymethod = lens _geometryCOMPprioritymethod (\a b -> a {_geometryCOMPprioritymethod = b})
geometryCOMPinstancefirstrow :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstancefirstrow = lens _geometryCOMPinstancefirstrow (\a b -> a {_geometryCOMPinstancefirstrow = b})
geometryCOMPbank :: Lens' COMP (Maybe (Tree Float))
geometryCOMPbank = lens _geometryCOMPbank (\a b -> a {_geometryCOMPbank = b})
geometryCOMPinstancety :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancety = lens _geometryCOMPinstancety (\a b -> a {_geometryCOMPinstancety = b})
geometryCOMPinstancery :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancery = lens _geometryCOMPinstancery (\a b -> a {_geometryCOMPinstancery = b})
geometryCOMPp :: Lens' COMP (Vec3)
geometryCOMPp = lens _geometryCOMPp (\a b -> a {_geometryCOMPp = b})
geometryCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPsavebackup = lens _geometryCOMPsavebackup (\a b -> a {_geometryCOMPsavebackup = b})
geometryCOMPinstancerottox :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancerottox = lens _geometryCOMPinstancerottox (\a b -> a {_geometryCOMPinstancerottox = b})
geometryCOMPpos :: Lens' COMP (Maybe (Tree Float))
geometryCOMPpos = lens _geometryCOMPpos (\a b -> a {_geometryCOMPpos = b})
geometryCOMPpathsop :: Lens' COMP (Maybe (Tree SOP))
geometryCOMPpathsop = lens _geometryCOMPpathsop (\a b -> a {_geometryCOMPpathsop = b})
geometryCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPloadondemand = lens _geometryCOMPloadondemand (\a b -> a {_geometryCOMPloadondemand = b})
geometryCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPextname3 = lens _geometryCOMPextname3 (\a b -> a {_geometryCOMPextname3 = b})
geometryCOMPinstancetexfilter :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstancetexfilter = lens _geometryCOMPinstancetexfilter (\a b -> a {_geometryCOMPinstancetexfilter = b})
geometryCOMPpr :: Lens' COMP (Vec3)
geometryCOMPpr = lens _geometryCOMPpr (\a b -> a {_geometryCOMPpr = b})
geometryCOMPinstanceg :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstanceg = lens _geometryCOMPinstanceg (\a b -> a {_geometryCOMPinstanceg = b})
geometryCOMPinstancetexmode :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstancetexmode = lens _geometryCOMPinstancetexmode (\a b -> a {_geometryCOMPinstancetexmode = b})
geometryCOMPwcolor :: Lens' COMP (Vec3)
geometryCOMPwcolor = lens _geometryCOMPwcolor (\a b -> a {_geometryCOMPwcolor = b})
geometryCOMPinstancepy :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancepy = lens _geometryCOMPinstancepy (\a b -> a {_geometryCOMPinstancepy = b})
geometryCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPreloadtoxonstart = lens _geometryCOMPreloadtoxonstart (\a b -> a {_geometryCOMPreloadtoxonstart = b})
geometryCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPreinitnet = lens _geometryCOMPreinitnet (\a b -> a {_geometryCOMPreinitnet = b})
geometryCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPexternaltox = lens _geometryCOMPexternaltox (\a b -> a {_geometryCOMPexternaltox = b})
geometryCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPreinitextensions = lens _geometryCOMPreinitextensions (\a b -> a {_geometryCOMPreinitextensions = b})
geometryCOMPinstancesy :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancesy = lens _geometryCOMPinstancesy (\a b -> a {_geometryCOMPinstancesy = b})
geometryCOMPnuminstances :: Lens' COMP (Maybe (Tree Int))
geometryCOMPnuminstances = lens _geometryCOMPnuminstances (\a b -> a {_geometryCOMPnuminstances = b})
geometryCOMPup :: Lens' COMP (Vec3)
geometryCOMPup = lens _geometryCOMPup (\a b -> a {_geometryCOMPup = b})
geometryCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPpromoteextension1 = lens _geometryCOMPpromoteextension1 (\a b -> a {_geometryCOMPpromoteextension1 = b})
geometryCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPsubcompname = lens _geometryCOMPsubcompname (\a b -> a {_geometryCOMPsubcompname = b})
geometryCOMPinstrord :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstrord = lens _geometryCOMPinstrord (\a b -> a {_geometryCOMPinstrord = b})
geometryCOMPpxord :: Lens' COMP (Maybe (Tree Int))
geometryCOMPpxord = lens _geometryCOMPpxord (\a b -> a {_geometryCOMPpxord = b})
geometryCOMPinstancetexindex :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancetexindex = lens _geometryCOMPinstancetexindex (\a b -> a {_geometryCOMPinstancetexindex = b})
geometryCOMPpickpriority :: Lens' COMP (Maybe (Tree Float))
geometryCOMPpickpriority = lens _geometryCOMPpickpriority (\a b -> a {_geometryCOMPpickpriority = b})
geometryCOMPps :: Lens' COMP (Vec3)
geometryCOMPps = lens _geometryCOMPps (\a b -> a {_geometryCOMPps = b})
geometryCOMPinstancesx :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancesx = lens _geometryCOMPinstancesx (\a b -> a {_geometryCOMPinstancesx = b})
geometryCOMPinstancing :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPinstancing = lens _geometryCOMPinstancing (\a b -> a {_geometryCOMPinstancing = b})
geometryCOMPinstancetexextendv :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstancetexextendv = lens _geometryCOMPinstancetexextendv (\a b -> a {_geometryCOMPinstancetexextendv = b})
geometryCOMPprord :: Lens' COMP (Maybe (Tree Int))
geometryCOMPprord = lens _geometryCOMPprord (\a b -> a {_geometryCOMPprord = b})
geometryCOMPlookup :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPlookup = lens _geometryCOMPlookup (\a b -> a {_geometryCOMPlookup = b})
geometryCOMPinstancerz :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancerz = lens _geometryCOMPinstancerz (\a b -> a {_geometryCOMPinstancerz = b})
geometryCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPextension2 = lens _geometryCOMPextension2 (\a b -> a {_geometryCOMPextension2 = b})
geometryCOMPdrawpriority :: Lens' COMP (Maybe (Tree Float))
geometryCOMPdrawpriority = lens _geometryCOMPdrawpriority (\a b -> a {_geometryCOMPdrawpriority = b})
geometryCOMPinstanceu :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstanceu = lens _geometryCOMPinstanceu (\a b -> a {_geometryCOMPinstanceu = b})
geometryCOMPrender :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPrender = lens _geometryCOMPrender (\a b -> a {_geometryCOMPrender = b})
geometryCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPextension1 = lens _geometryCOMPextension1 (\a b -> a {_geometryCOMPextension1 = b})
geometryCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPpromoteextension4 = lens _geometryCOMPpromoteextension4 (\a b -> a {_geometryCOMPpromoteextension4 = b})
geometryCOMPinstancetexs :: Lens' COMP (Maybe (Tree TOP))
geometryCOMPinstancetexs = lens _geometryCOMPinstancetexs (\a b -> a {_geometryCOMPinstancetexs = b})
geometryCOMPpxform :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPpxform = lens _geometryCOMPpxform (\a b -> a {_geometryCOMPpxform = b})
geometryCOMPmaterial :: Lens' COMP (Maybe (Tree MAT))
geometryCOMPmaterial = lens _geometryCOMPmaterial (\a b -> a {_geometryCOMPmaterial = b})
geometryCOMPinstancer :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancer = lens _geometryCOMPinstancer (\a b -> a {_geometryCOMPinstancer = b})
geometryCOMPr :: Lens' COMP (Vec3)
geometryCOMPr = lens _geometryCOMPr (\a b -> a {_geometryCOMPr = b})
geometryCOMPinstancerottoorder :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstancerottoorder = lens _geometryCOMPinstancerottoorder (\a b -> a {_geometryCOMPinstancerottoorder = b})
geometryCOMPinstancecolormode :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstancecolormode = lens _geometryCOMPinstancecolormode (\a b -> a {_geometryCOMPinstancecolormode = b})
geometryCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPextension3 = lens _geometryCOMPextension3 (\a b -> a {_geometryCOMPextension3 = b})
geometryCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPenablecloningpulse = lens _geometryCOMPenablecloningpulse (\a b -> a {_geometryCOMPenablecloningpulse = b})
geometryCOMPinstancerx :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancerx = lens _geometryCOMPinstancerx (\a b -> a {_geometryCOMPinstancerx = b})
geometryCOMPinstancesz :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancesz = lens _geometryCOMPinstancesz (\a b -> a {_geometryCOMPinstancesz = b})
geometryCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPopshortcut = lens _geometryCOMPopshortcut (\a b -> a {_geometryCOMPopshortcut = b})
geometryCOMPpcommit :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPpcommit = lens _geometryCOMPpcommit (\a b -> a {_geometryCOMPpcommit = b})
geometryCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPpromoteextension2 = lens _geometryCOMPpromoteextension2 (\a b -> a {_geometryCOMPpromoteextension2 = b})
geometryCOMPinstanceorder :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstanceorder = lens _geometryCOMPinstanceorder (\a b -> a {_geometryCOMPinstanceorder = b})
geometryCOMPinstancew :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancew = lens _geometryCOMPinstancew (\a b -> a {_geometryCOMPinstancew = b})
geometryCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPparentshortcut = lens _geometryCOMPparentshortcut (\a b -> a {_geometryCOMPparentshortcut = b})
geometryCOMPinstancemode :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstancemode = lens _geometryCOMPinstancemode (\a b -> a {_geometryCOMPinstancemode = b})
geometryCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPenablecloning = lens _geometryCOMPenablecloning (\a b -> a {_geometryCOMPenablecloning = b})
geometryCOMPinstancepz :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancepz = lens _geometryCOMPinstancepz (\a b -> a {_geometryCOMPinstancepz = b})
geometryCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPpromoteextension3 = lens _geometryCOMPpromoteextension3 (\a b -> a {_geometryCOMPpromoteextension3 = b})
geometryCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPextname4 = lens _geometryCOMPextname4 (\a b -> a {_geometryCOMPextname4 = b})
geometryCOMPinstancetx :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancetx = lens _geometryCOMPinstancetx (\a b -> a {_geometryCOMPinstancetx = b})
geometryCOMPinstancerotupz :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancerotupz = lens _geometryCOMPinstancerotupz (\a b -> a {_geometryCOMPinstancerotupz = b})
geometryCOMPrord :: Lens' COMP (Maybe (Tree Int))
geometryCOMPrord = lens _geometryCOMPrord (\a b -> a {_geometryCOMPrord = b})
geometryCOMPpp :: Lens' COMP (Vec3)
geometryCOMPpp = lens _geometryCOMPpp (\a b -> a {_geometryCOMPpp = b})
geometryCOMPpreset :: Lens' COMP (Maybe (Tree Bool))
geometryCOMPpreset = lens _geometryCOMPpreset (\a b -> a {_geometryCOMPpreset = b})
geometryCOMPinstancetexextendu :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstancetexextendu = lens _geometryCOMPinstancetexextendu (\a b -> a {_geometryCOMPinstancetexextendu = b})
geometryCOMPxord :: Lens' COMP (Maybe (Tree Int))
geometryCOMPxord = lens _geometryCOMPxord (\a b -> a {_geometryCOMPxord = b})
geometryCOMPt :: Lens' COMP (Vec3)
geometryCOMPt = lens _geometryCOMPt (\a b -> a {_geometryCOMPt = b})
geometryCOMPs :: Lens' COMP (Vec3)
geometryCOMPs = lens _geometryCOMPs (\a b -> a {_geometryCOMPs = b})
geometryCOMPclone :: Lens' COMP (Maybe (Tree COMP))
geometryCOMPclone = lens _geometryCOMPclone (\a b -> a {_geometryCOMPclone = b})
geometryCOMPinstxord :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstxord = lens _geometryCOMPinstxord (\a b -> a {_geometryCOMPinstxord = b})
geometryCOMPinstancerotupx :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancerotupx = lens _geometryCOMPinstancerotupx (\a b -> a {_geometryCOMPinstancerotupx = b})
geometryCOMPinstancetexextendw :: Lens' COMP (Maybe (Tree Int))
geometryCOMPinstancetexextendw = lens _geometryCOMPinstancetexextendw (\a b -> a {_geometryCOMPinstancetexextendw = b})
geometryCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPextname2 = lens _geometryCOMPextname2 (\a b -> a {_geometryCOMPextname2 = b})
geometryCOMPinstancerottoy :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancerottoy = lens _geometryCOMPinstancerottoy (\a b -> a {_geometryCOMPinstancerottoy = b})
geometryCOMPinstancev :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancev = lens _geometryCOMPinstancev (\a b -> a {_geometryCOMPinstancev = b})
geometryCOMPinstancetz :: Lens' COMP (Maybe (Tree ByteString))
geometryCOMPinstancetz = lens _geometryCOMPinstancetz (\a b -> a {_geometryCOMPinstancetz = b})

cameraCOMPprojection :: Lens' COMP (Maybe (Tree Int))
cameraCOMPprojection = lens _cameraCOMPprojection (\a b -> a {_cameraCOMPprojection = b})
cameraCOMPviewanglemethod :: Lens' COMP (Maybe (Tree Int))
cameraCOMPviewanglemethod = lens _cameraCOMPviewanglemethod (\a b -> a {_cameraCOMPviewanglemethod = b})
cameraCOMPfognear :: Lens' COMP (Maybe (Tree Float))
cameraCOMPfognear = lens _cameraCOMPfognear (\a b -> a {_cameraCOMPfognear = b})
cameraCOMPwin :: Lens' COMP (Vec2)
cameraCOMPwin = lens _cameraCOMPwin (\a b -> a {_cameraCOMPwin = b})
cameraCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPextname1 = lens _cameraCOMPextname1 (\a b -> a {_cameraCOMPextname1 = b})
cameraCOMPrender :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPrender = lens _cameraCOMPrender (\a b -> a {_cameraCOMPrender = b})
cameraCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPextension1 = lens _cameraCOMPextension1 (\a b -> a {_cameraCOMPextension1 = b})
cameraCOMPprioritymethod :: Lens' COMP (Maybe (Tree Int))
cameraCOMPprioritymethod = lens _cameraCOMPprioritymethod (\a b -> a {_cameraCOMPprioritymethod = b})
cameraCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPextension4 = lens _cameraCOMPextension4 (\a b -> a {_cameraCOMPextension4 = b})
cameraCOMPpathorient :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPpathorient = lens _cameraCOMPpathorient (\a b -> a {_cameraCOMPpathorient = b})
cameraCOMProll :: Lens' COMP (Maybe (Tree Float))
cameraCOMProll = lens _cameraCOMProll (\a b -> a {_cameraCOMProll = b})
cameraCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
cameraCOMPnodeview = lens _cameraCOMPnodeview (\a b -> a {_cameraCOMPnodeview = b})
cameraCOMPpt :: Lens' COMP (Vec3)
cameraCOMPpt = lens _cameraCOMPpt (\a b -> a {_cameraCOMPpt = b})
cameraCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPpromoteextension3 = lens _cameraCOMPpromoteextension3 (\a b -> a {_cameraCOMPpromoteextension3 = b})
cameraCOMPfog :: Lens' COMP (Maybe (Tree Int))
cameraCOMPfog = lens _cameraCOMPfog (\a b -> a {_cameraCOMPfog = b})
cameraCOMPcustomproj :: Lens' COMP (Maybe (Tree DAT))
cameraCOMPcustomproj = lens _cameraCOMPcustomproj (\a b -> a {_cameraCOMPcustomproj = b})
cameraCOMPfogfar :: Lens' COMP (Maybe (Tree Float))
cameraCOMPfogfar = lens _cameraCOMPfogfar (\a b -> a {_cameraCOMPfogfar = b})
cameraCOMPbgcolor :: Lens' COMP (Vec4)
cameraCOMPbgcolor = lens _cameraCOMPbgcolor (\a b -> a {_cameraCOMPbgcolor = b})
cameraCOMPpxform :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPpxform = lens _cameraCOMPpxform (\a b -> a {_cameraCOMPpxform = b})
cameraCOMPmaterial :: Lens' COMP (Maybe (Tree MAT))
cameraCOMPmaterial = lens _cameraCOMPmaterial (\a b -> a {_cameraCOMPmaterial = b})
cameraCOMPbank :: Lens' COMP (Maybe (Tree Float))
cameraCOMPbank = lens _cameraCOMPbank (\a b -> a {_cameraCOMPbank = b})
cameraCOMPr :: Lens' COMP (Vec3)
cameraCOMPr = lens _cameraCOMPr (\a b -> a {_cameraCOMPr = b})
cameraCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPenablecloning = lens _cameraCOMPenablecloning (\a b -> a {_cameraCOMPenablecloning = b})
cameraCOMPpp :: Lens' COMP (Vec3)
cameraCOMPpp = lens _cameraCOMPpp (\a b -> a {_cameraCOMPpp = b})
cameraCOMPfov :: Lens' COMP (Maybe (Tree Float))
cameraCOMPfov = lens _cameraCOMPfov (\a b -> a {_cameraCOMPfov = b})
cameraCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPextension3 = lens _cameraCOMPextension3 (\a b -> a {_cameraCOMPextension3 = b})
cameraCOMPp :: Lens' COMP (Vec3)
cameraCOMPp = lens _cameraCOMPp (\a b -> a {_cameraCOMPp = b})
cameraCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPextname2 = lens _cameraCOMPextname2 (\a b -> a {_cameraCOMPextname2 = b})
cameraCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPopshortcut = lens _cameraCOMPopshortcut (\a b -> a {_cameraCOMPopshortcut = b})
cameraCOMPpcommit :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPpcommit = lens _cameraCOMPpcommit (\a b -> a {_cameraCOMPpcommit = b})
cameraCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPsavebackup = lens _cameraCOMPsavebackup (\a b -> a {_cameraCOMPsavebackup = b})
cameraCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPreinitextensions = lens _cameraCOMPreinitextensions (\a b -> a {_cameraCOMPreinitextensions = b})
cameraCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPpromoteextension2 = lens _cameraCOMPpromoteextension2 (\a b -> a {_cameraCOMPpromoteextension2 = b})
cameraCOMPprojectionblend :: Lens' COMP (Maybe (Tree Float))
cameraCOMPprojectionblend = lens _cameraCOMPprojectionblend (\a b -> a {_cameraCOMPprojectionblend = b})
cameraCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPreloadtoxonstart = lens _cameraCOMPreloadtoxonstart (\a b -> a {_cameraCOMPreloadtoxonstart = b})
cameraCOMPpos :: Lens' COMP (Maybe (Tree Float))
cameraCOMPpos = lens _cameraCOMPpos (\a b -> a {_cameraCOMPpos = b})
cameraCOMPpathsop :: Lens' COMP (Maybe (Tree SOP))
cameraCOMPpathsop = lens _cameraCOMPpathsop (\a b -> a {_cameraCOMPpathsop = b})
cameraCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPloadondemand = lens _cameraCOMPloadondemand (\a b -> a {_cameraCOMPloadondemand = b})
cameraCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPextname3 = lens _cameraCOMPextname3 (\a b -> a {_cameraCOMPextname3 = b})
cameraCOMPfogalpha :: Lens' COMP (Maybe (Tree Float))
cameraCOMPfogalpha = lens _cameraCOMPfogalpha (\a b -> a {_cameraCOMPfogalpha = b})
cameraCOMPpr :: Lens' COMP (Vec3)
cameraCOMPpr = lens _cameraCOMPpr (\a b -> a {_cameraCOMPpr = b})
cameraCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPpromoteextension4 = lens _cameraCOMPpromoteextension4 (\a b -> a {_cameraCOMPpromoteextension4 = b})
cameraCOMPwcolor :: Lens' COMP (Vec3)
cameraCOMPwcolor = lens _cameraCOMPwcolor (\a b -> a {_cameraCOMPwcolor = b})
cameraCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPenablecloningpulse = lens _cameraCOMPenablecloningpulse (\a b -> a {_cameraCOMPenablecloningpulse = b})
cameraCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPextname4 = lens _cameraCOMPextname4 (\a b -> a {_cameraCOMPextname4 = b})
cameraCOMPfocal :: Lens' COMP (Maybe (Tree Float))
cameraCOMPfocal = lens _cameraCOMPfocal (\a b -> a {_cameraCOMPfocal = b})
cameraCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPreinitnet = lens _cameraCOMPreinitnet (\a b -> a {_cameraCOMPreinitnet = b})
cameraCOMPfar :: Lens' COMP (Maybe (Tree Float))
cameraCOMPfar = lens _cameraCOMPfar (\a b -> a {_cameraCOMPfar = b})
cameraCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPexternaltox = lens _cameraCOMPexternaltox (\a b -> a {_cameraCOMPexternaltox = b})
cameraCOMPpreset :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPpreset = lens _cameraCOMPpreset (\a b -> a {_cameraCOMPpreset = b})
cameraCOMPfogmap :: Lens' COMP (Maybe (Tree TOP))
cameraCOMPfogmap = lens _cameraCOMPfogmap (\a b -> a {_cameraCOMPfogmap = b})
cameraCOMPfogdensity :: Lens' COMP (Maybe (Tree Float))
cameraCOMPfogdensity = lens _cameraCOMPfogdensity (\a b -> a {_cameraCOMPfogdensity = b})
cameraCOMPaperture :: Lens' COMP (Maybe (Tree Float))
cameraCOMPaperture = lens _cameraCOMPaperture (\a b -> a {_cameraCOMPaperture = b})
cameraCOMPup :: Lens' COMP (Vec3)
cameraCOMPup = lens _cameraCOMPup (\a b -> a {_cameraCOMPup = b})
cameraCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
cameraCOMPpromoteextension1 = lens _cameraCOMPpromoteextension1 (\a b -> a {_cameraCOMPpromoteextension1 = b})
cameraCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPsubcompname = lens _cameraCOMPsubcompname (\a b -> a {_cameraCOMPsubcompname = b})
cameraCOMPpxord :: Lens' COMP (Maybe (Tree Int))
cameraCOMPpxord = lens _cameraCOMPpxord (\a b -> a {_cameraCOMPpxord = b})
cameraCOMPxord :: Lens' COMP (Maybe (Tree Int))
cameraCOMPxord = lens _cameraCOMPxord (\a b -> a {_cameraCOMPxord = b})
cameraCOMPpickpriority :: Lens' COMP (Maybe (Tree Float))
cameraCOMPpickpriority = lens _cameraCOMPpickpriority (\a b -> a {_cameraCOMPpickpriority = b})
cameraCOMPnear :: Lens' COMP (Maybe (Tree Float))
cameraCOMPnear = lens _cameraCOMPnear (\a b -> a {_cameraCOMPnear = b})
cameraCOMPps :: Lens' COMP (Vec3)
cameraCOMPps = lens _cameraCOMPps (\a b -> a {_cameraCOMPps = b})
cameraCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPextension2 = lens _cameraCOMPextension2 (\a b -> a {_cameraCOMPextension2 = b})
cameraCOMPs :: Lens' COMP (Vec3)
cameraCOMPs = lens _cameraCOMPs (\a b -> a {_cameraCOMPs = b})
cameraCOMPclone :: Lens' COMP (Maybe (Tree COMP))
cameraCOMPclone = lens _cameraCOMPclone (\a b -> a {_cameraCOMPclone = b})
cameraCOMPprord :: Lens' COMP (Maybe (Tree Int))
cameraCOMPprord = lens _cameraCOMPprord (\a b -> a {_cameraCOMPprord = b})
cameraCOMPlookup :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPlookup = lens _cameraCOMPlookup (\a b -> a {_cameraCOMPlookup = b})
cameraCOMPrord :: Lens' COMP (Maybe (Tree Int))
cameraCOMPrord = lens _cameraCOMPrord (\a b -> a {_cameraCOMPrord = b})
cameraCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
cameraCOMPparentshortcut = lens _cameraCOMPparentshortcut (\a b -> a {_cameraCOMPparentshortcut = b})
cameraCOMPorthowidth :: Lens' COMP (Maybe (Tree Float))
cameraCOMPorthowidth = lens _cameraCOMPorthowidth (\a b -> a {_cameraCOMPorthowidth = b})
cameraCOMPt :: Lens' COMP (Vec3)
cameraCOMPt = lens _cameraCOMPt (\a b -> a {_cameraCOMPt = b})
cameraCOMPfogcolor :: Lens' COMP (Vec3)
cameraCOMPfogcolor = lens _cameraCOMPfogcolor (\a b -> a {_cameraCOMPfogcolor = b})
cameraCOMPdrawpriority :: Lens' COMP (Maybe (Tree Float))
cameraCOMPdrawpriority = lens _cameraCOMPdrawpriority (\a b -> a {_cameraCOMPdrawpriority = b})

animationCOMPrangetype :: Lens' COMP (Maybe (Tree Int))
animationCOMPrangetype = lens _animationCOMPrangetype (\a b -> a {_animationCOMPrangetype = b})
animationCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
animationCOMPextname1 = lens _animationCOMPextname1 (\a b -> a {_animationCOMPextname1 = b})
animationCOMPcuepulse :: Lens' COMP (Maybe (Tree Bool))
animationCOMPcuepulse = lens _animationCOMPcuepulse (\a b -> a {_animationCOMPcuepulse = b})
animationCOMPinputindexunit :: Lens' COMP (Maybe (Tree Int))
animationCOMPinputindexunit = lens _animationCOMPinputindexunit (\a b -> a {_animationCOMPinputindexunit = b})
animationCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
animationCOMPextension4 = lens _animationCOMPextension4 (\a b -> a {_animationCOMPextension4 = b})
animationCOMPeditrate :: Lens' COMP (Maybe (Tree Float))
animationCOMPeditrate = lens _animationCOMPeditrate (\a b -> a {_animationCOMPeditrate = b})
animationCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
animationCOMPextension3 = lens _animationCOMPextension3 (\a b -> a {_animationCOMPextension3 = b})
animationCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
animationCOMPenablecloning = lens _animationCOMPenablecloning (\a b -> a {_animationCOMPenablecloning = b})
animationCOMPstart :: Lens' COMP (Maybe (Tree Float))
animationCOMPstart = lens _animationCOMPstart (\a b -> a {_animationCOMPstart = b})
animationCOMPtleft :: Lens' COMP (Maybe (Tree Int))
animationCOMPtleft = lens _animationCOMPtleft (\a b -> a {_animationCOMPtleft = b})
animationCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
animationCOMPextname4 = lens _animationCOMPextname4 (\a b -> a {_animationCOMPextname4 = b})
animationCOMPendunit :: Lens' COMP (Maybe (Tree Int))
animationCOMPendunit = lens _animationCOMPendunit (\a b -> a {_animationCOMPendunit = b})
animationCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
animationCOMPopshortcut = lens _animationCOMPopshortcut (\a b -> a {_animationCOMPopshortcut = b})
animationCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
animationCOMPsavebackup = lens _animationCOMPsavebackup (\a b -> a {_animationCOMPsavebackup = b})
animationCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
animationCOMPpromoteextension2 = lens _animationCOMPpromoteextension2 (\a b -> a {_animationCOMPpromoteextension2 = b})
animationCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
animationCOMPextname2 = lens _animationCOMPextname2 (\a b -> a {_animationCOMPextname2 = b})
animationCOMPplay :: Lens' COMP (Maybe (Tree Bool))
animationCOMPplay = lens _animationCOMPplay (\a b -> a {_animationCOMPplay = b})
animationCOMPtdefault :: Lens' COMP (Maybe (Tree Float))
animationCOMPtdefault = lens _animationCOMPtdefault (\a b -> a {_animationCOMPtdefault = b})
animationCOMPcuepointunit :: Lens' COMP (Maybe (Tree Int))
animationCOMPcuepointunit = lens _animationCOMPcuepointunit (\a b -> a {_animationCOMPcuepointunit = b})
animationCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
animationCOMPloadondemand = lens _animationCOMPloadondemand (\a b -> a {_animationCOMPloadondemand = b})
animationCOMPeditorigin :: Lens' COMP (Maybe (Tree Float))
animationCOMPeditorigin = lens _animationCOMPeditorigin (\a b -> a {_animationCOMPeditorigin = b})
animationCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
animationCOMPextension1 = lens _animationCOMPextension1 (\a b -> a {_animationCOMPextension1 = b})
animationCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
animationCOMPpromoteextension3 = lens _animationCOMPpromoteextension3 (\a b -> a {_animationCOMPpromoteextension3 = b})
animationCOMPend :: Lens' COMP (Maybe (Tree Float))
animationCOMPend = lens _animationCOMPend (\a b -> a {_animationCOMPend = b})
animationCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
animationCOMPpromoteextension4 = lens _animationCOMPpromoteextension4 (\a b -> a {_animationCOMPpromoteextension4 = b})
animationCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
animationCOMPenablecloningpulse = lens _animationCOMPenablecloningpulse (\a b -> a {_animationCOMPenablecloningpulse = b})
animationCOMPcyclic :: Lens' COMP (Maybe (Tree Int))
animationCOMPcyclic = lens _animationCOMPcyclic (\a b -> a {_animationCOMPcyclic = b})
animationCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
animationCOMPreloadtoxonstart = lens _animationCOMPreloadtoxonstart (\a b -> a {_animationCOMPreloadtoxonstart = b})
animationCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
animationCOMPreinitnet = lens _animationCOMPreinitnet (\a b -> a {_animationCOMPreinitnet = b})
animationCOMPcuepoint :: Lens' COMP (Maybe (Tree Float))
animationCOMPcuepoint = lens _animationCOMPcuepoint (\a b -> a {_animationCOMPcuepoint = b})
animationCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
animationCOMPexternaltox = lens _animationCOMPexternaltox (\a b -> a {_animationCOMPexternaltox = b})
animationCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
animationCOMPparentshortcut = lens _animationCOMPparentshortcut (\a b -> a {_animationCOMPparentshortcut = b})
animationCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
animationCOMPpromoteextension1 = lens _animationCOMPpromoteextension1 (\a b -> a {_animationCOMPpromoteextension1 = b})
animationCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
animationCOMPsubcompname = lens _animationCOMPsubcompname (\a b -> a {_animationCOMPsubcompname = b})
animationCOMPstartunit :: Lens' COMP (Maybe (Tree Int))
animationCOMPstartunit = lens _animationCOMPstartunit (\a b -> a {_animationCOMPstartunit = b})
animationCOMPspeed :: Lens' COMP (Maybe (Tree Float))
animationCOMPspeed = lens _animationCOMPspeed (\a b -> a {_animationCOMPspeed = b})
animationCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
animationCOMPextname3 = lens _animationCOMPextname3 (\a b -> a {_animationCOMPextname3 = b})
animationCOMPtright :: Lens' COMP (Maybe (Tree Int))
animationCOMPtright = lens _animationCOMPtright (\a b -> a {_animationCOMPtright = b})
animationCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
animationCOMPreinitextensions = lens _animationCOMPreinitextensions (\a b -> a {_animationCOMPreinitextensions = b})
animationCOMPspecifyedit :: Lens' COMP (Maybe (Tree Bool))
animationCOMPspecifyedit = lens _animationCOMPspecifyedit (\a b -> a {_animationCOMPspecifyedit = b})
animationCOMPclone :: Lens' COMP (Maybe (Tree COMP))
animationCOMPclone = lens _animationCOMPclone (\a b -> a {_animationCOMPclone = b})
animationCOMPplaymode :: Lens' COMP (Maybe (Tree Int))
animationCOMPplaymode = lens _animationCOMPplaymode (\a b -> a {_animationCOMPplaymode = b})
animationCOMPeditanimation :: Lens' COMP (Maybe (Tree Bool))
animationCOMPeditanimation = lens _animationCOMPeditanimation (\a b -> a {_animationCOMPeditanimation = b})
animationCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
animationCOMPextension2 = lens _animationCOMPextension2 (\a b -> a {_animationCOMPextension2 = b})
animationCOMPcue :: Lens' COMP (Maybe (Tree Bool))
animationCOMPcue = lens _animationCOMPcue (\a b -> a {_animationCOMPcue = b})

replicatorCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPreinitnet = lens _replicatorCOMPreinitnet (\a b -> a {_replicatorCOMPreinitnet = b})
replicatorCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPextname1 = lens _replicatorCOMPextname1 (\a b -> a {_replicatorCOMPextname1 = b})
replicatorCOMPnumreplicants :: Lens' COMP (Maybe (Tree Int))
replicatorCOMPnumreplicants = lens _replicatorCOMPnumreplicants (\a b -> a {_replicatorCOMPnumreplicants = b})
replicatorCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPextension1 = lens _replicatorCOMPextension1 (\a b -> a {_replicatorCOMPextension1 = b})
replicatorCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPpromoteextension4 = lens _replicatorCOMPpromoteextension4 (\a b -> a {_replicatorCOMPpromoteextension4 = b})
replicatorCOMPmaxops :: Lens' COMP (Maybe (Tree Int))
replicatorCOMPmaxops = lens _replicatorCOMPmaxops (\a b -> a {_replicatorCOMPmaxops = b})
replicatorCOMPcallbacks :: Lens' COMP (Maybe (Tree DAT))
replicatorCOMPcallbacks = lens _replicatorCOMPcallbacks (\a b -> a {_replicatorCOMPcallbacks = b})
replicatorCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPextension3 = lens _replicatorCOMPextension3 (\a b -> a {_replicatorCOMPextension3 = b})
replicatorCOMPlayoutorigin2 :: Lens' COMP (Maybe (Tree Int))
replicatorCOMPlayoutorigin2 = lens _replicatorCOMPlayoutorigin2 (\a b -> a {_replicatorCOMPlayoutorigin2 = b})
replicatorCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPenablecloning = lens _replicatorCOMPenablecloning (\a b -> a {_replicatorCOMPenablecloning = b})
replicatorCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPexternaltox = lens _replicatorCOMPexternaltox (\a b -> a {_replicatorCOMPexternaltox = b})
replicatorCOMPlayoutorigin1 :: Lens' COMP (Maybe (Tree Int))
replicatorCOMPlayoutorigin1 = lens _replicatorCOMPlayoutorigin1 (\a b -> a {_replicatorCOMPlayoutorigin1 = b})
replicatorCOMPrecreateall :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPrecreateall = lens _replicatorCOMPrecreateall (\a b -> a {_replicatorCOMPrecreateall = b})
replicatorCOMPrepsuffixstart :: Lens' COMP (Maybe (Tree Int))
replicatorCOMPrepsuffixstart = lens _replicatorCOMPrepsuffixstart (\a b -> a {_replicatorCOMPrepsuffixstart = b})
replicatorCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPextname2 = lens _replicatorCOMPextname2 (\a b -> a {_replicatorCOMPextname2 = b})
replicatorCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPopshortcut = lens _replicatorCOMPopshortcut (\a b -> a {_replicatorCOMPopshortcut = b})
replicatorCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPsavebackup = lens _replicatorCOMPsavebackup (\a b -> a {_replicatorCOMPsavebackup = b})
replicatorCOMPcolindex :: Lens' COMP (Maybe (Tree Int))
replicatorCOMPcolindex = lens _replicatorCOMPcolindex (\a b -> a {_replicatorCOMPcolindex = b})
replicatorCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPpromoteextension2 = lens _replicatorCOMPpromoteextension2 (\a b -> a {_replicatorCOMPpromoteextension2 = b})
replicatorCOMPdoincremental :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPdoincremental = lens _replicatorCOMPdoincremental (\a b -> a {_replicatorCOMPdoincremental = b})
replicatorCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPenablecloningpulse = lens _replicatorCOMPenablecloningpulse (\a b -> a {_replicatorCOMPenablecloningpulse = b})
replicatorCOMPrecreatemissing :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPrecreatemissing = lens _replicatorCOMPrecreatemissing (\a b -> a {_replicatorCOMPrecreatemissing = b})
replicatorCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPloadondemand = lens _replicatorCOMPloadondemand (\a b -> a {_replicatorCOMPloadondemand = b})
replicatorCOMPtemplate :: Lens' COMP (Maybe (Tree DAT))
replicatorCOMPtemplate = lens _replicatorCOMPtemplate (\a b -> a {_replicatorCOMPtemplate = b})
replicatorCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPpromoteextension3 = lens _replicatorCOMPpromoteextension3 (\a b -> a {_replicatorCOMPpromoteextension3 = b})
replicatorCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPextname4 = lens _replicatorCOMPextname4 (\a b -> a {_replicatorCOMPextname4 = b})
replicatorCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPreloadtoxonstart = lens _replicatorCOMPreloadtoxonstart (\a b -> a {_replicatorCOMPreloadtoxonstart = b})
replicatorCOMPnamefromtable :: Lens' COMP (Maybe (Tree Int))
replicatorCOMPnamefromtable = lens _replicatorCOMPnamefromtable (\a b -> a {_replicatorCOMPnamefromtable = b})
replicatorCOMPtscript :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPtscript = lens _replicatorCOMPtscript (\a b -> a {_replicatorCOMPtscript = b})
replicatorCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPreinitextensions = lens _replicatorCOMPreinitextensions (\a b -> a {_replicatorCOMPreinitextensions = b})
replicatorCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPextension4 = lens _replicatorCOMPextension4 (\a b -> a {_replicatorCOMPextension4 = b})
replicatorCOMPscriptmenu :: Lens' COMP (Maybe (Tree Int))
replicatorCOMPscriptmenu = lens _replicatorCOMPscriptmenu (\a b -> a {_replicatorCOMPscriptmenu = b})
replicatorCOMPopprefix :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPopprefix = lens _replicatorCOMPopprefix (\a b -> a {_replicatorCOMPopprefix = b})
replicatorCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPpromoteextension1 = lens _replicatorCOMPpromoteextension1 (\a b -> a {_replicatorCOMPpromoteextension1 = b})
replicatorCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPsubcompname = lens _replicatorCOMPsubcompname (\a b -> a {_replicatorCOMPsubcompname = b})
replicatorCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPextname3 = lens _replicatorCOMPextname3 (\a b -> a {_replicatorCOMPextname3 = b})
replicatorCOMPdestination :: Lens' COMP (Maybe (Tree COMP))
replicatorCOMPdestination = lens _replicatorCOMPdestination (\a b -> a {_replicatorCOMPdestination = b})
replicatorCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPparentshortcut = lens _replicatorCOMPparentshortcut (\a b -> a {_replicatorCOMPparentshortcut = b})
replicatorCOMPdomaxops :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPdomaxops = lens _replicatorCOMPdomaxops (\a b -> a {_replicatorCOMPdomaxops = b})
replicatorCOMPignorefirstrow :: Lens' COMP (Maybe (Tree Bool))
replicatorCOMPignorefirstrow = lens _replicatorCOMPignorefirstrow (\a b -> a {_replicatorCOMPignorefirstrow = b})
replicatorCOMPcolname :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPcolname = lens _replicatorCOMPcolname (\a b -> a {_replicatorCOMPcolname = b})
replicatorCOMPlayout :: Lens' COMP (Maybe (Tree Int))
replicatorCOMPlayout = lens _replicatorCOMPlayout (\a b -> a {_replicatorCOMPlayout = b})
replicatorCOMPclone :: Lens' COMP (Maybe (Tree COMP))
replicatorCOMPclone = lens _replicatorCOMPclone (\a b -> a {_replicatorCOMPclone = b})
replicatorCOMPincrement :: Lens' COMP (Maybe (Tree Int))
replicatorCOMPincrement = lens _replicatorCOMPincrement (\a b -> a {_replicatorCOMPincrement = b})
replicatorCOMPmethod :: Lens' COMP (Maybe (Tree Int))
replicatorCOMPmethod = lens _replicatorCOMPmethod (\a b -> a {_replicatorCOMPmethod = b})
replicatorCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
replicatorCOMPextension2 = lens _replicatorCOMPextension2 (\a b -> a {_replicatorCOMPextension2 = b})

opviewerCOMPtopborder :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPtopborder = lens _opviewerCOMPtopborder (\a b -> a {_opviewerCOMPtopborder = b})
opviewerCOMPscrollbarthickness :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPscrollbarthickness = lens _opviewerCOMPscrollbarthickness (\a b -> a {_opviewerCOMPscrollbarthickness = b})
opviewerCOMPw :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPw = lens _opviewerCOMPw (\a b -> a {_opviewerCOMPw = b})
opviewerCOMPalignorder :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPalignorder = lens _opviewerCOMPalignorder (\a b -> a {_opviewerCOMPalignorder = b})
opviewerCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPloadondemand = lens _opviewerCOMPloadondemand (\a b -> a {_opviewerCOMPloadondemand = b})
opviewerCOMPjustifyh :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPjustifyh = lens _opviewerCOMPjustifyh (\a b -> a {_opviewerCOMPjustifyh = b})
opviewerCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPpromoteextension4 = lens _opviewerCOMPpromoteextension4 (\a b -> a {_opviewerCOMPpromoteextension4 = b})
opviewerCOMPdropdestscript :: Lens' COMP (Maybe (Tree DAT))
opviewerCOMPdropdestscript = lens _opviewerCOMPdropdestscript (\a b -> a {_opviewerCOMPdropdestscript = b})
opviewerCOMPrepositionxmin :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPrepositionxmin = lens _opviewerCOMPrepositionxmin (\a b -> a {_opviewerCOMPrepositionxmin = b})
opviewerCOMPx :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPx = lens _opviewerCOMPx (\a b -> a {_opviewerCOMPx = b})
opviewerCOMPmargint :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPmargint = lens _opviewerCOMPmargint (\a b -> a {_opviewerCOMPmargint = b})
opviewerCOMPresizer :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPresizer = lens _opviewerCOMPresizer (\a b -> a {_opviewerCOMPresizer = b})
opviewerCOMPdroptypescript :: Lens' COMP (Maybe (Tree DAT))
opviewerCOMPdroptypescript = lens _opviewerCOMPdroptypescript (\a b -> a {_opviewerCOMPdroptypescript = b})
opviewerCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPpromoteextension2 = lens _opviewerCOMPpromoteextension2 (\a b -> a {_opviewerCOMPpromoteextension2 = b})
opviewerCOMPfixedaspect :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPfixedaspect = lens _opviewerCOMPfixedaspect (\a b -> a {_opviewerCOMPfixedaspect = b})
opviewerCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
opviewerCOMPextname1 = lens _opviewerCOMPextname1 (\a b -> a {_opviewerCOMPextname1 = b})
opviewerCOMPmarginl :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPmarginl = lens _opviewerCOMPmarginl (\a b -> a {_opviewerCOMPmarginl = b})
opviewerCOMPdodisablecolor :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPdodisablecolor = lens _opviewerCOMPdodisablecolor (\a b -> a {_opviewerCOMPdodisablecolor = b})
opviewerCOMPmultitouch :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPmultitouch = lens _opviewerCOMPmultitouch (\a b -> a {_opviewerCOMPmultitouch = b})
opviewerCOMPbgalpha :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPbgalpha = lens _opviewerCOMPbgalpha (\a b -> a {_opviewerCOMPbgalpha = b})
opviewerCOMPhmode :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPhmode = lens _opviewerCOMPhmode (\a b -> a {_opviewerCOMPhmode = b})
opviewerCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPsavebackup = lens _opviewerCOMPsavebackup (\a b -> a {_opviewerCOMPsavebackup = b})
opviewerCOMPuvbuttonsmiddle :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPuvbuttonsmiddle = lens _opviewerCOMPuvbuttonsmiddle (\a b -> a {_opviewerCOMPuvbuttonsmiddle = b})
opviewerCOMPleftanchor :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPleftanchor = lens _opviewerCOMPleftanchor (\a b -> a {_opviewerCOMPleftanchor = b})
opviewerCOMPclickthrough :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPclickthrough = lens _opviewerCOMPclickthrough (\a b -> a {_opviewerCOMPclickthrough = b})
opviewerCOMPdisablealpha :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPdisablealpha = lens _opviewerCOMPdisablealpha (\a b -> a {_opviewerCOMPdisablealpha = b})
opviewerCOMPvmode :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPvmode = lens _opviewerCOMPvmode (\a b -> a {_opviewerCOMPvmode = b})
opviewerCOMPvorigin :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPvorigin = lens _opviewerCOMPvorigin (\a b -> a {_opviewerCOMPvorigin = b})
opviewerCOMPdrag :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPdrag = lens _opviewerCOMPdrag (\a b -> a {_opviewerCOMPdrag = b})
opviewerCOMPdisablecolor :: Lens' COMP (Vec3)
opviewerCOMPdisablecolor = lens _opviewerCOMPdisablecolor (\a b -> a {_opviewerCOMPdisablecolor = b})
opviewerCOMPresizehmin :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPresizehmin = lens _opviewerCOMPresizehmin (\a b -> a {_opviewerCOMPresizehmin = b})
opviewerCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
opviewerCOMPextname3 = lens _opviewerCOMPextname3 (\a b -> a {_opviewerCOMPextname3 = b})
opviewerCOMPborderaalpha :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPborderaalpha = lens _opviewerCOMPborderaalpha (\a b -> a {_opviewerCOMPborderaalpha = b})
opviewerCOMPoverlay :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPoverlay = lens _opviewerCOMPoverlay (\a b -> a {_opviewerCOMPoverlay = b})
opviewerCOMPrepositionymin :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPrepositionymin = lens _opviewerCOMPrepositionymin (\a b -> a {_opviewerCOMPrepositionymin = b})
opviewerCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPenablecloning = lens _opviewerCOMPenablecloning (\a b -> a {_opviewerCOMPenablecloning = b})
opviewerCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
opviewerCOMPsubcompname = lens _opviewerCOMPsubcompname (\a b -> a {_opviewerCOMPsubcompname = b})
opviewerCOMPalign :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPalign = lens _opviewerCOMPalign (\a b -> a {_opviewerCOMPalign = b})
opviewerCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPreloadtoxonstart = lens _opviewerCOMPreloadtoxonstart (\a b -> a {_opviewerCOMPreloadtoxonstart = b})
opviewerCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPreinitnet = lens _opviewerCOMPreinitnet (\a b -> a {_opviewerCOMPreinitnet = b})
opviewerCOMPmarginr :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPmarginr = lens _opviewerCOMPmarginr (\a b -> a {_opviewerCOMPmarginr = b})
opviewerCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
opviewerCOMPparentshortcut = lens _opviewerCOMPparentshortcut (\a b -> a {_opviewerCOMPparentshortcut = b})
opviewerCOMPresizet :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPresizet = lens _opviewerCOMPresizet (\a b -> a {_opviewerCOMPresizet = b})
opviewerCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
opviewerCOMPextension4 = lens _opviewerCOMPextension4 (\a b -> a {_opviewerCOMPextension4 = b})
opviewerCOMPleftborderi :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPleftborderi = lens _opviewerCOMPleftborderi (\a b -> a {_opviewerCOMPleftborderi = b})
opviewerCOMPrepocomp :: Lens' COMP (Maybe (Tree COMP))
opviewerCOMPrepocomp = lens _opviewerCOMPrepocomp (\a b -> a {_opviewerCOMPrepocomp = b})
opviewerCOMPrepositionymax :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPrepositionymax = lens _opviewerCOMPrepositionymax (\a b -> a {_opviewerCOMPrepositionymax = b})
opviewerCOMPanchordrag :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPanchordrag = lens _opviewerCOMPanchordrag (\a b -> a {_opviewerCOMPanchordrag = b})
opviewerCOMPbottomborderi :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPbottomborderi = lens _opviewerCOMPbottomborderi (\a b -> a {_opviewerCOMPbottomborderi = b})
opviewerCOMPrightborder :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPrightborder = lens _opviewerCOMPrightborder (\a b -> a {_opviewerCOMPrightborder = b})
opviewerCOMPlayer :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPlayer = lens _opviewerCOMPlayer (\a b -> a {_opviewerCOMPlayer = b})
opviewerCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPreinitextensions = lens _opviewerCOMPreinitextensions (\a b -> a {_opviewerCOMPreinitextensions = b})
opviewerCOMPtopborderi :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPtopborderi = lens _opviewerCOMPtopborderi (\a b -> a {_opviewerCOMPtopborderi = b})
opviewerCOMPmousewheel :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPmousewheel = lens _opviewerCOMPmousewheel (\a b -> a {_opviewerCOMPmousewheel = b})
opviewerCOMPalignallow :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPalignallow = lens _opviewerCOMPalignallow (\a b -> a {_opviewerCOMPalignallow = b})
opviewerCOMPdragdropcallbacks :: Lens' COMP (Maybe (Tree DAT))
opviewerCOMPdragdropcallbacks = lens _opviewerCOMPdragdropcallbacks (\a b -> a {_opviewerCOMPdragdropcallbacks = b})
opviewerCOMPtopanchor :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPtopanchor = lens _opviewerCOMPtopanchor (\a b -> a {_opviewerCOMPtopanchor = b})
opviewerCOMPrightborderi :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPrightborderi = lens _opviewerCOMPrightborderi (\a b -> a {_opviewerCOMPrightborderi = b})
opviewerCOMPresizel :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPresizel = lens _opviewerCOMPresizel (\a b -> a {_opviewerCOMPresizel = b})
opviewerCOMPvfillweight :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPvfillweight = lens _opviewerCOMPvfillweight (\a b -> a {_opviewerCOMPvfillweight = b})
opviewerCOMPborderover :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPborderover = lens _opviewerCOMPborderover (\a b -> a {_opviewerCOMPborderover = b})
opviewerCOMPnamedchop :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPnamedchop = lens _opviewerCOMPnamedchop (\a b -> a {_opviewerCOMPnamedchop = b})
opviewerCOMPmarginb :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPmarginb = lens _opviewerCOMPmarginb (\a b -> a {_opviewerCOMPmarginb = b})
opviewerCOMPrepositionxmax :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPrepositionxmax = lens _opviewerCOMPrepositionxmax (\a b -> a {_opviewerCOMPrepositionxmax = b})
opviewerCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
opviewerCOMPextension2 = lens _opviewerCOMPextension2 (\a b -> a {_opviewerCOMPextension2 = b})
opviewerCOMPalignmax :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPalignmax = lens _opviewerCOMPalignmax (\a b -> a {_opviewerCOMPalignmax = b})
opviewerCOMPjustifyv :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPjustifyv = lens _opviewerCOMPjustifyv (\a b -> a {_opviewerCOMPjustifyv = b})
opviewerCOMPpostoffset :: Lens' COMP (Vec2)
opviewerCOMPpostoffset = lens _opviewerCOMPpostoffset (\a b -> a {_opviewerCOMPpostoffset = b})
opviewerCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPpromoteextension3 = lens _opviewerCOMPpromoteextension3 (\a b -> a {_opviewerCOMPpromoteextension3 = b})
opviewerCOMPtopoffset :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPtopoffset = lens _opviewerCOMPtopoffset (\a b -> a {_opviewerCOMPtopoffset = b})
opviewerCOMPcomposite :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPcomposite = lens _opviewerCOMPcomposite (\a b -> a {_opviewerCOMPcomposite = b})
opviewerCOMPdragscript :: Lens' COMP (Maybe (Tree DAT))
opviewerCOMPdragscript = lens _opviewerCOMPdragscript (\a b -> a {_opviewerCOMPdragscript = b})
opviewerCOMPmultrgb :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPmultrgb = lens _opviewerCOMPmultrgb (\a b -> a {_opviewerCOMPmultrgb = b})
opviewerCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
opviewerCOMPextension1 = lens _opviewerCOMPextension1 (\a b -> a {_opviewerCOMPextension1 = b})
opviewerCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPpromoteextension1 = lens _opviewerCOMPpromoteextension1 (\a b -> a {_opviewerCOMPpromoteextension1 = b})
opviewerCOMPbordera :: Lens' COMP (Vec3)
opviewerCOMPbordera = lens _opviewerCOMPbordera (\a b -> a {_opviewerCOMPbordera = b})
opviewerCOMPuvbuttonsleft :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPuvbuttonsleft = lens _opviewerCOMPuvbuttonsleft (\a b -> a {_opviewerCOMPuvbuttonsleft = b})
opviewerCOMPbgcolor :: Lens' COMP (Vec3)
opviewerCOMPbgcolor = lens _opviewerCOMPbgcolor (\a b -> a {_opviewerCOMPbgcolor = b})
opviewerCOMPresizehmax :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPresizehmax = lens _opviewerCOMPresizehmax (\a b -> a {_opviewerCOMPresizehmax = b})
opviewerCOMPhelpdat :: Lens' COMP (Maybe (Tree DAT))
opviewerCOMPhelpdat = lens _opviewerCOMPhelpdat (\a b -> a {_opviewerCOMPhelpdat = b})
opviewerCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
opviewerCOMPextension3 = lens _opviewerCOMPextension3 (\a b -> a {_opviewerCOMPextension3 = b})
opviewerCOMPdrop :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPdrop = lens _opviewerCOMPdrop (\a b -> a {_opviewerCOMPdrop = b})
opviewerCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
opviewerCOMPexternaltox = lens _opviewerCOMPexternaltox (\a b -> a {_opviewerCOMPexternaltox = b})
opviewerCOMPrightanchor :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPrightanchor = lens _opviewerCOMPrightanchor (\a b -> a {_opviewerCOMPrightanchor = b})
opviewerCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
opviewerCOMPextname2 = lens _opviewerCOMPextname2 (\a b -> a {_opviewerCOMPextname2 = b})
opviewerCOMPh :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPh = lens _opviewerCOMPh (\a b -> a {_opviewerCOMPh = b})
opviewerCOMPleftborder :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPleftborder = lens _opviewerCOMPleftborder (\a b -> a {_opviewerCOMPleftborder = b})
opviewerCOMPtopfill :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPtopfill = lens _opviewerCOMPtopfill (\a b -> a {_opviewerCOMPtopfill = b})
opviewerCOMPresizewmin :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPresizewmin = lens _opviewerCOMPresizewmin (\a b -> a {_opviewerCOMPresizewmin = b})
opviewerCOMPmouserel :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPmouserel = lens _opviewerCOMPmouserel (\a b -> a {_opviewerCOMPmouserel = b})
opviewerCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPenablecloningpulse = lens _opviewerCOMPenablecloningpulse (\a b -> a {_opviewerCOMPenablecloningpulse = b})
opviewerCOMPoffset :: Lens' COMP (Vec2)
opviewerCOMPoffset = lens _opviewerCOMPoffset (\a b -> a {_opviewerCOMPoffset = b})
opviewerCOMPresizeb :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPresizeb = lens _opviewerCOMPresizeb (\a b -> a {_opviewerCOMPresizeb = b})
opviewerCOMPleftoffset :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPleftoffset = lens _opviewerCOMPleftoffset (\a b -> a {_opviewerCOMPleftoffset = b})
opviewerCOMPy :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPy = lens _opviewerCOMPy (\a b -> a {_opviewerCOMPy = b})
opviewerCOMPpvscrollbar :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPpvscrollbar = lens _opviewerCOMPpvscrollbar (\a b -> a {_opviewerCOMPpvscrollbar = b})
opviewerCOMPcrop :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPcrop = lens _opviewerCOMPcrop (\a b -> a {_opviewerCOMPcrop = b})
opviewerCOMPbottomoffset :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPbottomoffset = lens _opviewerCOMPbottomoffset (\a b -> a {_opviewerCOMPbottomoffset = b})
opviewerCOMPdisplay :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPdisplay = lens _opviewerCOMPdisplay (\a b -> a {_opviewerCOMPdisplay = b})
opviewerCOMPfit :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPfit = lens _opviewerCOMPfit (\a b -> a {_opviewerCOMPfit = b})
opviewerCOMPaspect :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPaspect = lens _opviewerCOMPaspect (\a b -> a {_opviewerCOMPaspect = b})
opviewerCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
opviewerCOMPextname4 = lens _opviewerCOMPextname4 (\a b -> a {_opviewerCOMPextname4 = b})
opviewerCOMPuvbuttonsright :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPuvbuttonsright = lens _opviewerCOMPuvbuttonsright (\a b -> a {_opviewerCOMPuvbuttonsright = b})
opviewerCOMPresizewmax :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPresizewmax = lens _opviewerCOMPresizewmax (\a b -> a {_opviewerCOMPresizewmax = b})
opviewerCOMPborderb :: Lens' COMP (Vec3)
opviewerCOMPborderb = lens _opviewerCOMPborderb (\a b -> a {_opviewerCOMPborderb = b})
opviewerCOMPbottomanchor :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPbottomanchor = lens _opviewerCOMPbottomanchor (\a b -> a {_opviewerCOMPbottomanchor = b})
opviewerCOMPsizefromwindow :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPsizefromwindow = lens _opviewerCOMPsizefromwindow (\a b -> a {_opviewerCOMPsizefromwindow = b})
opviewerCOMPopacity :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPopacity = lens _opviewerCOMPopacity (\a b -> a {_opviewerCOMPopacity = b})
opviewerCOMPtop :: Lens' COMP (Maybe (Tree TOP))
opviewerCOMPtop = lens _opviewerCOMPtop (\a b -> a {_opviewerCOMPtop = b})
opviewerCOMPcursor :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPcursor = lens _opviewerCOMPcursor (\a b -> a {_opviewerCOMPcursor = b})
opviewerCOMPoverridemethod :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPoverridemethod = lens _opviewerCOMPoverridemethod (\a b -> a {_opviewerCOMPoverridemethod = b})
opviewerCOMPreposition :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPreposition = lens _opviewerCOMPreposition (\a b -> a {_opviewerCOMPreposition = b})
opviewerCOMPenable :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPenable = lens _opviewerCOMPenable (\a b -> a {_opviewerCOMPenable = b})
opviewerCOMPchop :: Lens' COMP (Maybe (Tree CHOP))
opviewerCOMPchop = lens _opviewerCOMPchop (\a b -> a {_opviewerCOMPchop = b})
opviewerCOMPrightoffset :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPrightoffset = lens _opviewerCOMPrightoffset (\a b -> a {_opviewerCOMPrightoffset = b})
opviewerCOMPvieweraspect :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPvieweraspect = lens _opviewerCOMPvieweraspect (\a b -> a {_opviewerCOMPvieweraspect = b})
opviewerCOMPborderbalpha :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPborderbalpha = lens _opviewerCOMPborderbalpha (\a b -> a {_opviewerCOMPborderbalpha = b})
opviewerCOMPscrolloverlay :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPscrolloverlay = lens _opviewerCOMPscrolloverlay (\a b -> a {_opviewerCOMPscrolloverlay = b})
opviewerCOMPclone :: Lens' COMP (Maybe (Tree COMP))
opviewerCOMPclone = lens _opviewerCOMPclone (\a b -> a {_opviewerCOMPclone = b})
opviewerCOMPkeepmemory :: Lens' COMP (Maybe (Tree Bool))
opviewerCOMPkeepmemory = lens _opviewerCOMPkeepmemory (\a b -> a {_opviewerCOMPkeepmemory = b})
opviewerCOMPdropscript :: Lens' COMP (Maybe (Tree DAT))
opviewerCOMPdropscript = lens _opviewerCOMPdropscript (\a b -> a {_opviewerCOMPdropscript = b})
opviewerCOMPhfillweight :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPhfillweight = lens _opviewerCOMPhfillweight (\a b -> a {_opviewerCOMPhfillweight = b})
opviewerCOMPhorigin :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPhorigin = lens _opviewerCOMPhorigin (\a b -> a {_opviewerCOMPhorigin = b})
opviewerCOMPspacing :: Lens' COMP (Maybe (Tree Float))
opviewerCOMPspacing = lens _opviewerCOMPspacing (\a b -> a {_opviewerCOMPspacing = b})
opviewerCOMPscale :: Lens' COMP (Vec2)
opviewerCOMPscale = lens _opviewerCOMPscale (\a b -> a {_opviewerCOMPscale = b})
opviewerCOMPphscrollbar :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPphscrollbar = lens _opviewerCOMPphscrollbar (\a b -> a {_opviewerCOMPphscrollbar = b})
opviewerCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
opviewerCOMPopshortcut = lens _opviewerCOMPopshortcut (\a b -> a {_opviewerCOMPopshortcut = b})
opviewerCOMPbottomborder :: Lens' COMP (Maybe (Tree Int))
opviewerCOMPbottomborder = lens _opviewerCOMPbottomborder (\a b -> a {_opviewerCOMPbottomborder = b})

ambientlightCOMPprojection :: Lens' COMP (Maybe (Tree Int))
ambientlightCOMPprojection = lens _ambientlightCOMPprojection (\a b -> a {_ambientlightCOMPprojection = b})
ambientlightCOMPviewanglemethod :: Lens' COMP (Maybe (Tree Int))
ambientlightCOMPviewanglemethod = lens _ambientlightCOMPviewanglemethod (\a b -> a {_ambientlightCOMPviewanglemethod = b})
ambientlightCOMPfognear :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPfognear = lens _ambientlightCOMPfognear (\a b -> a {_ambientlightCOMPfognear = b})
ambientlightCOMPwin :: Lens' COMP (Vec2)
ambientlightCOMPwin = lens _ambientlightCOMPwin (\a b -> a {_ambientlightCOMPwin = b})
ambientlightCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPextname1 = lens _ambientlightCOMPextname1 (\a b -> a {_ambientlightCOMPextname1 = b})
ambientlightCOMPcustomproj :: Lens' COMP (Maybe (Tree DAT))
ambientlightCOMPcustomproj = lens _ambientlightCOMPcustomproj (\a b -> a {_ambientlightCOMPcustomproj = b})
ambientlightCOMPrender :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPrender = lens _ambientlightCOMPrender (\a b -> a {_ambientlightCOMPrender = b})
ambientlightCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPextension1 = lens _ambientlightCOMPextension1 (\a b -> a {_ambientlightCOMPextension1 = b})
ambientlightCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPpromoteextension4 = lens _ambientlightCOMPpromoteextension4 (\a b -> a {_ambientlightCOMPpromoteextension4 = b})
ambientlightCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPextension4 = lens _ambientlightCOMPextension4 (\a b -> a {_ambientlightCOMPextension4 = b})
ambientlightCOMPpathorient :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPpathorient = lens _ambientlightCOMPpathorient (\a b -> a {_ambientlightCOMPpathorient = b})
ambientlightCOMProll :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMProll = lens _ambientlightCOMProll (\a b -> a {_ambientlightCOMProll = b})
ambientlightCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
ambientlightCOMPnodeview = lens _ambientlightCOMPnodeview (\a b -> a {_ambientlightCOMPnodeview = b})
ambientlightCOMPpt :: Lens' COMP (Vec3)
ambientlightCOMPpt = lens _ambientlightCOMPpt (\a b -> a {_ambientlightCOMPpt = b})
ambientlightCOMPps :: Lens' COMP (Vec3)
ambientlightCOMPps = lens _ambientlightCOMPps (\a b -> a {_ambientlightCOMPps = b})
ambientlightCOMPfog :: Lens' COMP (Maybe (Tree Int))
ambientlightCOMPfog = lens _ambientlightCOMPfog (\a b -> a {_ambientlightCOMPfog = b})
ambientlightCOMPprioritymethod :: Lens' COMP (Maybe (Tree Int))
ambientlightCOMPprioritymethod = lens _ambientlightCOMPprioritymethod (\a b -> a {_ambientlightCOMPprioritymethod = b})
ambientlightCOMPfogfar :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPfogfar = lens _ambientlightCOMPfogfar (\a b -> a {_ambientlightCOMPfogfar = b})
ambientlightCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPextension3 = lens _ambientlightCOMPextension3 (\a b -> a {_ambientlightCOMPextension3 = b})
ambientlightCOMPpxform :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPpxform = lens _ambientlightCOMPpxform (\a b -> a {_ambientlightCOMPpxform = b})
ambientlightCOMPmaterial :: Lens' COMP (Maybe (Tree MAT))
ambientlightCOMPmaterial = lens _ambientlightCOMPmaterial (\a b -> a {_ambientlightCOMPmaterial = b})
ambientlightCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPreinitextensions = lens _ambientlightCOMPreinitextensions (\a b -> a {_ambientlightCOMPreinitextensions = b})
ambientlightCOMPr :: Lens' COMP (Vec3)
ambientlightCOMPr = lens _ambientlightCOMPr (\a b -> a {_ambientlightCOMPr = b})
ambientlightCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPenablecloning = lens _ambientlightCOMPenablecloning (\a b -> a {_ambientlightCOMPenablecloning = b})
ambientlightCOMPpp :: Lens' COMP (Vec3)
ambientlightCOMPpp = lens _ambientlightCOMPpp (\a b -> a {_ambientlightCOMPpp = b})
ambientlightCOMPfov :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPfov = lens _ambientlightCOMPfov (\a b -> a {_ambientlightCOMPfov = b})
ambientlightCOMPp :: Lens' COMP (Vec3)
ambientlightCOMPp = lens _ambientlightCOMPp (\a b -> a {_ambientlightCOMPp = b})
ambientlightCOMPpr :: Lens' COMP (Vec3)
ambientlightCOMPpr = lens _ambientlightCOMPpr (\a b -> a {_ambientlightCOMPpr = b})
ambientlightCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPextname2 = lens _ambientlightCOMPextname2 (\a b -> a {_ambientlightCOMPextname2 = b})
ambientlightCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPopshortcut = lens _ambientlightCOMPopshortcut (\a b -> a {_ambientlightCOMPopshortcut = b})
ambientlightCOMPpcommit :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPpcommit = lens _ambientlightCOMPpcommit (\a b -> a {_ambientlightCOMPpcommit = b})
ambientlightCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPsavebackup = lens _ambientlightCOMPsavebackup (\a b -> a {_ambientlightCOMPsavebackup = b})
ambientlightCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPpromoteextension2 = lens _ambientlightCOMPpromoteextension2 (\a b -> a {_ambientlightCOMPpromoteextension2 = b})
ambientlightCOMPprojectionblend :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPprojectionblend = lens _ambientlightCOMPprojectionblend (\a b -> a {_ambientlightCOMPprojectionblend = b})
ambientlightCOMPfocal :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPfocal = lens _ambientlightCOMPfocal (\a b -> a {_ambientlightCOMPfocal = b})
ambientlightCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPenablecloningpulse = lens _ambientlightCOMPenablecloningpulse (\a b -> a {_ambientlightCOMPenablecloningpulse = b})
ambientlightCOMPfogdensity :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPfogdensity = lens _ambientlightCOMPfogdensity (\a b -> a {_ambientlightCOMPfogdensity = b})
ambientlightCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPsubcompname = lens _ambientlightCOMPsubcompname (\a b -> a {_ambientlightCOMPsubcompname = b})
ambientlightCOMPpickpriority :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPpickpriority = lens _ambientlightCOMPpickpriority (\a b -> a {_ambientlightCOMPpickpriority = b})
ambientlightCOMPfogalpha :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPfogalpha = lens _ambientlightCOMPfogalpha (\a b -> a {_ambientlightCOMPfogalpha = b})
ambientlightCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPpromoteextension3 = lens _ambientlightCOMPpromoteextension3 (\a b -> a {_ambientlightCOMPpromoteextension3 = b})
ambientlightCOMPwcolor :: Lens' COMP (Vec3)
ambientlightCOMPwcolor = lens _ambientlightCOMPwcolor (\a b -> a {_ambientlightCOMPwcolor = b})
ambientlightCOMPpos :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPpos = lens _ambientlightCOMPpos (\a b -> a {_ambientlightCOMPpos = b})
ambientlightCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPextname4 = lens _ambientlightCOMPextname4 (\a b -> a {_ambientlightCOMPextname4 = b})
ambientlightCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPreloadtoxonstart = lens _ambientlightCOMPreloadtoxonstart (\a b -> a {_ambientlightCOMPreloadtoxonstart = b})
ambientlightCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPreinitnet = lens _ambientlightCOMPreinitnet (\a b -> a {_ambientlightCOMPreinitnet = b})
ambientlightCOMPfar :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPfar = lens _ambientlightCOMPfar (\a b -> a {_ambientlightCOMPfar = b})
ambientlightCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPexternaltox = lens _ambientlightCOMPexternaltox (\a b -> a {_ambientlightCOMPexternaltox = b})
ambientlightCOMPpreset :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPpreset = lens _ambientlightCOMPpreset (\a b -> a {_ambientlightCOMPpreset = b})
ambientlightCOMPfogmap :: Lens' COMP (Maybe (Tree TOP))
ambientlightCOMPfogmap = lens _ambientlightCOMPfogmap (\a b -> a {_ambientlightCOMPfogmap = b})
ambientlightCOMPpathsop :: Lens' COMP (Maybe (Tree SOP))
ambientlightCOMPpathsop = lens _ambientlightCOMPpathsop (\a b -> a {_ambientlightCOMPpathsop = b})
ambientlightCOMPbank :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPbank = lens _ambientlightCOMPbank (\a b -> a {_ambientlightCOMPbank = b})
ambientlightCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPpromoteextension1 = lens _ambientlightCOMPpromoteextension1 (\a b -> a {_ambientlightCOMPpromoteextension1 = b})
ambientlightCOMPrord :: Lens' COMP (Maybe (Tree Int))
ambientlightCOMPrord = lens _ambientlightCOMPrord (\a b -> a {_ambientlightCOMPrord = b})
ambientlightCOMPup :: Lens' COMP (Vec3)
ambientlightCOMPup = lens _ambientlightCOMPup (\a b -> a {_ambientlightCOMPup = b})
ambientlightCOMPpxord :: Lens' COMP (Maybe (Tree Int))
ambientlightCOMPpxord = lens _ambientlightCOMPpxord (\a b -> a {_ambientlightCOMPpxord = b})
ambientlightCOMPxord :: Lens' COMP (Maybe (Tree Int))
ambientlightCOMPxord = lens _ambientlightCOMPxord (\a b -> a {_ambientlightCOMPxord = b})
ambientlightCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPextname3 = lens _ambientlightCOMPextname3 (\a b -> a {_ambientlightCOMPextname3 = b})
ambientlightCOMPnear :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPnear = lens _ambientlightCOMPnear (\a b -> a {_ambientlightCOMPnear = b})
ambientlightCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPparentshortcut = lens _ambientlightCOMPparentshortcut (\a b -> a {_ambientlightCOMPparentshortcut = b})
ambientlightCOMPt :: Lens' COMP (Vec3)
ambientlightCOMPt = lens _ambientlightCOMPt (\a b -> a {_ambientlightCOMPt = b})
ambientlightCOMPs :: Lens' COMP (Vec3)
ambientlightCOMPs = lens _ambientlightCOMPs (\a b -> a {_ambientlightCOMPs = b})
ambientlightCOMPbgcolor :: Lens' COMP (Vec4)
ambientlightCOMPbgcolor = lens _ambientlightCOMPbgcolor (\a b -> a {_ambientlightCOMPbgcolor = b})
ambientlightCOMPc :: Lens' COMP (Vec3)
ambientlightCOMPc = lens _ambientlightCOMPc (\a b -> a {_ambientlightCOMPc = b})
ambientlightCOMPclone :: Lens' COMP (Maybe (Tree COMP))
ambientlightCOMPclone = lens _ambientlightCOMPclone (\a b -> a {_ambientlightCOMPclone = b})
ambientlightCOMPprord :: Lens' COMP (Maybe (Tree Int))
ambientlightCOMPprord = lens _ambientlightCOMPprord (\a b -> a {_ambientlightCOMPprord = b})
ambientlightCOMPaperture :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPaperture = lens _ambientlightCOMPaperture (\a b -> a {_ambientlightCOMPaperture = b})
ambientlightCOMPlookup :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPlookup = lens _ambientlightCOMPlookup (\a b -> a {_ambientlightCOMPlookup = b})
ambientlightCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
ambientlightCOMPloadondemand = lens _ambientlightCOMPloadondemand (\a b -> a {_ambientlightCOMPloadondemand = b})
ambientlightCOMPdimmer :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPdimmer = lens _ambientlightCOMPdimmer (\a b -> a {_ambientlightCOMPdimmer = b})
ambientlightCOMPorthowidth :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPorthowidth = lens _ambientlightCOMPorthowidth (\a b -> a {_ambientlightCOMPorthowidth = b})
ambientlightCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
ambientlightCOMPextension2 = lens _ambientlightCOMPextension2 (\a b -> a {_ambientlightCOMPextension2 = b})
ambientlightCOMPfogcolor :: Lens' COMP (Vec3)
ambientlightCOMPfogcolor = lens _ambientlightCOMPfogcolor (\a b -> a {_ambientlightCOMPfogcolor = b})
ambientlightCOMPdrawpriority :: Lens' COMP (Maybe (Tree Float))
ambientlightCOMPdrawpriority = lens _ambientlightCOMPdrawpriority (\a b -> a {_ambientlightCOMPdrawpriority = b})

selectCOMPtopborder :: Lens' COMP (Maybe (Tree Int))
selectCOMPtopborder = lens _selectCOMPtopborder (\a b -> a {_selectCOMPtopborder = b})
selectCOMPscrollbarthickness :: Lens' COMP (Maybe (Tree Int))
selectCOMPscrollbarthickness = lens _selectCOMPscrollbarthickness (\a b -> a {_selectCOMPscrollbarthickness = b})
selectCOMPw :: Lens' COMP (Maybe (Tree Int))
selectCOMPw = lens _selectCOMPw (\a b -> a {_selectCOMPw = b})
selectCOMPalignorder :: Lens' COMP (Maybe (Tree Float))
selectCOMPalignorder = lens _selectCOMPalignorder (\a b -> a {_selectCOMPalignorder = b})
selectCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
selectCOMPloadondemand = lens _selectCOMPloadondemand (\a b -> a {_selectCOMPloadondemand = b})
selectCOMPjustifyh :: Lens' COMP (Maybe (Tree Int))
selectCOMPjustifyh = lens _selectCOMPjustifyh (\a b -> a {_selectCOMPjustifyh = b})
selectCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
selectCOMPpromoteextension4 = lens _selectCOMPpromoteextension4 (\a b -> a {_selectCOMPpromoteextension4 = b})
selectCOMPdropdestscript :: Lens' COMP (Maybe (Tree DAT))
selectCOMPdropdestscript = lens _selectCOMPdropdestscript (\a b -> a {_selectCOMPdropdestscript = b})
selectCOMPrepositionxmin :: Lens' COMP (Maybe (Tree Float))
selectCOMPrepositionxmin = lens _selectCOMPrepositionxmin (\a b -> a {_selectCOMPrepositionxmin = b})
selectCOMPselectpanel :: Lens' COMP (Maybe (Tree COMP))
selectCOMPselectpanel = lens _selectCOMPselectpanel (\a b -> a {_selectCOMPselectpanel = b})
selectCOMPmarginr :: Lens' COMP (Maybe (Tree Float))
selectCOMPmarginr = lens _selectCOMPmarginr (\a b -> a {_selectCOMPmarginr = b})
selectCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
selectCOMPnodeview = lens _selectCOMPnodeview (\a b -> a {_selectCOMPnodeview = b})
selectCOMPmargint :: Lens' COMP (Maybe (Tree Float))
selectCOMPmargint = lens _selectCOMPmargint (\a b -> a {_selectCOMPmargint = b})
selectCOMPresizer :: Lens' COMP (Maybe (Tree Bool))
selectCOMPresizer = lens _selectCOMPresizer (\a b -> a {_selectCOMPresizer = b})
selectCOMPdroptypescript :: Lens' COMP (Maybe (Tree DAT))
selectCOMPdroptypescript = lens _selectCOMPdroptypescript (\a b -> a {_selectCOMPdroptypescript = b})
selectCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
selectCOMPpromoteextension2 = lens _selectCOMPpromoteextension2 (\a b -> a {_selectCOMPpromoteextension2 = b})
selectCOMPfixedaspect :: Lens' COMP (Maybe (Tree Int))
selectCOMPfixedaspect = lens _selectCOMPfixedaspect (\a b -> a {_selectCOMPfixedaspect = b})
selectCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
selectCOMPextname1 = lens _selectCOMPextname1 (\a b -> a {_selectCOMPextname1 = b})
selectCOMPleftanchor :: Lens' COMP (Maybe (Tree Float))
selectCOMPleftanchor = lens _selectCOMPleftanchor (\a b -> a {_selectCOMPleftanchor = b})
selectCOMPdodisablecolor :: Lens' COMP (Maybe (Tree Bool))
selectCOMPdodisablecolor = lens _selectCOMPdodisablecolor (\a b -> a {_selectCOMPdodisablecolor = b})
selectCOMPmultitouch :: Lens' COMP (Maybe (Tree Int))
selectCOMPmultitouch = lens _selectCOMPmultitouch (\a b -> a {_selectCOMPmultitouch = b})
selectCOMPbgalpha :: Lens' COMP (Maybe (Tree Float))
selectCOMPbgalpha = lens _selectCOMPbgalpha (\a b -> a {_selectCOMPbgalpha = b})
selectCOMPfollowselection :: Lens' COMP (Maybe (Tree Bool))
selectCOMPfollowselection = lens _selectCOMPfollowselection (\a b -> a {_selectCOMPfollowselection = b})
selectCOMPhmode :: Lens' COMP (Maybe (Tree Int))
selectCOMPhmode = lens _selectCOMPhmode (\a b -> a {_selectCOMPhmode = b})
selectCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
selectCOMPsavebackup = lens _selectCOMPsavebackup (\a b -> a {_selectCOMPsavebackup = b})
selectCOMPuvbuttonsmiddle :: Lens' COMP (Maybe (Tree Bool))
selectCOMPuvbuttonsmiddle = lens _selectCOMPuvbuttonsmiddle (\a b -> a {_selectCOMPuvbuttonsmiddle = b})
selectCOMPclickthrough :: Lens' COMP (Maybe (Tree Bool))
selectCOMPclickthrough = lens _selectCOMPclickthrough (\a b -> a {_selectCOMPclickthrough = b})
selectCOMPdisablealpha :: Lens' COMP (Maybe (Tree Float))
selectCOMPdisablealpha = lens _selectCOMPdisablealpha (\a b -> a {_selectCOMPdisablealpha = b})
selectCOMPvmode :: Lens' COMP (Maybe (Tree Int))
selectCOMPvmode = lens _selectCOMPvmode (\a b -> a {_selectCOMPvmode = b})
selectCOMPvorigin :: Lens' COMP (Maybe (Tree Float))
selectCOMPvorigin = lens _selectCOMPvorigin (\a b -> a {_selectCOMPvorigin = b})
selectCOMPdrag :: Lens' COMP (Maybe (Tree Int))
selectCOMPdrag = lens _selectCOMPdrag (\a b -> a {_selectCOMPdrag = b})
selectCOMPdisablecolor :: Lens' COMP (Vec3)
selectCOMPdisablecolor = lens _selectCOMPdisablecolor (\a b -> a {_selectCOMPdisablecolor = b})
selectCOMPresizehmin :: Lens' COMP (Maybe (Tree Float))
selectCOMPresizehmin = lens _selectCOMPresizehmin (\a b -> a {_selectCOMPresizehmin = b})
selectCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
selectCOMPextname3 = lens _selectCOMPextname3 (\a b -> a {_selectCOMPextname3 = b})
selectCOMPborderaalpha :: Lens' COMP (Maybe (Tree Float))
selectCOMPborderaalpha = lens _selectCOMPborderaalpha (\a b -> a {_selectCOMPborderaalpha = b})
selectCOMPoverlay :: Lens' COMP (Maybe (Tree Bool))
selectCOMPoverlay = lens _selectCOMPoverlay (\a b -> a {_selectCOMPoverlay = b})
selectCOMPrepositionymin :: Lens' COMP (Maybe (Tree Float))
selectCOMPrepositionymin = lens _selectCOMPrepositionymin (\a b -> a {_selectCOMPrepositionymin = b})
selectCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
selectCOMPenablecloning = lens _selectCOMPenablecloning (\a b -> a {_selectCOMPenablecloning = b})
selectCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
selectCOMPsubcompname = lens _selectCOMPsubcompname (\a b -> a {_selectCOMPsubcompname = b})
selectCOMPrightanchor :: Lens' COMP (Maybe (Tree Float))
selectCOMPrightanchor = lens _selectCOMPrightanchor (\a b -> a {_selectCOMPrightanchor = b})
selectCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
selectCOMPreloadtoxonstart = lens _selectCOMPreloadtoxonstart (\a b -> a {_selectCOMPreloadtoxonstart = b})
selectCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
selectCOMPreinitnet = lens _selectCOMPreinitnet (\a b -> a {_selectCOMPreinitnet = b})
selectCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
selectCOMPexternaltox = lens _selectCOMPexternaltox (\a b -> a {_selectCOMPexternaltox = b})
selectCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
selectCOMPparentshortcut = lens _selectCOMPparentshortcut (\a b -> a {_selectCOMPparentshortcut = b})
selectCOMPresizet :: Lens' COMP (Maybe (Tree Bool))
selectCOMPresizet = lens _selectCOMPresizet (\a b -> a {_selectCOMPresizet = b})
selectCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
selectCOMPextension4 = lens _selectCOMPextension4 (\a b -> a {_selectCOMPextension4 = b})
selectCOMPnamedchop :: Lens' COMP (Maybe (Tree Bool))
selectCOMPnamedchop = lens _selectCOMPnamedchop (\a b -> a {_selectCOMPnamedchop = b})
selectCOMPx :: Lens' COMP (Maybe (Tree Int))
selectCOMPx = lens _selectCOMPx (\a b -> a {_selectCOMPx = b})
selectCOMPrepocomp :: Lens' COMP (Maybe (Tree COMP))
selectCOMPrepocomp = lens _selectCOMPrepocomp (\a b -> a {_selectCOMPrepocomp = b})
selectCOMPrepositionymax :: Lens' COMP (Maybe (Tree Float))
selectCOMPrepositionymax = lens _selectCOMPrepositionymax (\a b -> a {_selectCOMPrepositionymax = b})
selectCOMPanchordrag :: Lens' COMP (Maybe (Tree Int))
selectCOMPanchordrag = lens _selectCOMPanchordrag (\a b -> a {_selectCOMPanchordrag = b})
selectCOMPbottomborderi :: Lens' COMP (Maybe (Tree Int))
selectCOMPbottomborderi = lens _selectCOMPbottomborderi (\a b -> a {_selectCOMPbottomborderi = b})
selectCOMPrightborder :: Lens' COMP (Maybe (Tree Int))
selectCOMPrightborder = lens _selectCOMPrightborder (\a b -> a {_selectCOMPrightborder = b})
selectCOMPlayer :: Lens' COMP (Maybe (Tree Float))
selectCOMPlayer = lens _selectCOMPlayer (\a b -> a {_selectCOMPlayer = b})
selectCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
selectCOMPreinitextensions = lens _selectCOMPreinitextensions (\a b -> a {_selectCOMPreinitextensions = b})
selectCOMPtopborderi :: Lens' COMP (Maybe (Tree Int))
selectCOMPtopborderi = lens _selectCOMPtopborderi (\a b -> a {_selectCOMPtopborderi = b})
selectCOMPalignallow :: Lens' COMP (Maybe (Tree Int))
selectCOMPalignallow = lens _selectCOMPalignallow (\a b -> a {_selectCOMPalignallow = b})
selectCOMPdragdropcallbacks :: Lens' COMP (Maybe (Tree DAT))
selectCOMPdragdropcallbacks = lens _selectCOMPdragdropcallbacks (\a b -> a {_selectCOMPdragdropcallbacks = b})
selectCOMPtopanchor :: Lens' COMP (Maybe (Tree Float))
selectCOMPtopanchor = lens _selectCOMPtopanchor (\a b -> a {_selectCOMPtopanchor = b})
selectCOMPrightborderi :: Lens' COMP (Maybe (Tree Int))
selectCOMPrightborderi = lens _selectCOMPrightborderi (\a b -> a {_selectCOMPrightborderi = b})
selectCOMPresizel :: Lens' COMP (Maybe (Tree Bool))
selectCOMPresizel = lens _selectCOMPresizel (\a b -> a {_selectCOMPresizel = b})
selectCOMPvfillweight :: Lens' COMP (Maybe (Tree Float))
selectCOMPvfillweight = lens _selectCOMPvfillweight (\a b -> a {_selectCOMPvfillweight = b})
selectCOMPborderover :: Lens' COMP (Maybe (Tree Bool))
selectCOMPborderover = lens _selectCOMPborderover (\a b -> a {_selectCOMPborderover = b})
selectCOMPleftborderi :: Lens' COMP (Maybe (Tree Int))
selectCOMPleftborderi = lens _selectCOMPleftborderi (\a b -> a {_selectCOMPleftborderi = b})
selectCOMPmarginb :: Lens' COMP (Maybe (Tree Float))
selectCOMPmarginb = lens _selectCOMPmarginb (\a b -> a {_selectCOMPmarginb = b})
selectCOMPrepositionxmax :: Lens' COMP (Maybe (Tree Float))
selectCOMPrepositionxmax = lens _selectCOMPrepositionxmax (\a b -> a {_selectCOMPrepositionxmax = b})
selectCOMPmatchsize :: Lens' COMP (Maybe (Tree Bool))
selectCOMPmatchsize = lens _selectCOMPmatchsize (\a b -> a {_selectCOMPmatchsize = b})
selectCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
selectCOMPextension2 = lens _selectCOMPextension2 (\a b -> a {_selectCOMPextension2 = b})
selectCOMPborderbalpha :: Lens' COMP (Maybe (Tree Float))
selectCOMPborderbalpha = lens _selectCOMPborderbalpha (\a b -> a {_selectCOMPborderbalpha = b})
selectCOMPdropscript :: Lens' COMP (Maybe (Tree DAT))
selectCOMPdropscript = lens _selectCOMPdropscript (\a b -> a {_selectCOMPdropscript = b})
selectCOMPpostoffset :: Lens' COMP (Vec2)
selectCOMPpostoffset = lens _selectCOMPpostoffset (\a b -> a {_selectCOMPpostoffset = b})
selectCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
selectCOMPpromoteextension3 = lens _selectCOMPpromoteextension3 (\a b -> a {_selectCOMPpromoteextension3 = b})
selectCOMPtopoffset :: Lens' COMP (Maybe (Tree Float))
selectCOMPtopoffset = lens _selectCOMPtopoffset (\a b -> a {_selectCOMPtopoffset = b})
selectCOMPcomposite :: Lens' COMP (Maybe (Tree Int))
selectCOMPcomposite = lens _selectCOMPcomposite (\a b -> a {_selectCOMPcomposite = b})
selectCOMPmultrgb :: Lens' COMP (Maybe (Tree Bool))
selectCOMPmultrgb = lens _selectCOMPmultrgb (\a b -> a {_selectCOMPmultrgb = b})
selectCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
selectCOMPextension1 = lens _selectCOMPextension1 (\a b -> a {_selectCOMPextension1 = b})
selectCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
selectCOMPpromoteextension1 = lens _selectCOMPpromoteextension1 (\a b -> a {_selectCOMPpromoteextension1 = b})
selectCOMPbordera :: Lens' COMP (Vec3)
selectCOMPbordera = lens _selectCOMPbordera (\a b -> a {_selectCOMPbordera = b})
selectCOMPuvbuttonsleft :: Lens' COMP (Maybe (Tree Bool))
selectCOMPuvbuttonsleft = lens _selectCOMPuvbuttonsleft (\a b -> a {_selectCOMPuvbuttonsleft = b})
selectCOMPbgcolor :: Lens' COMP (Vec3)
selectCOMPbgcolor = lens _selectCOMPbgcolor (\a b -> a {_selectCOMPbgcolor = b})
selectCOMPresizehmax :: Lens' COMP (Maybe (Tree Float))
selectCOMPresizehmax = lens _selectCOMPresizehmax (\a b -> a {_selectCOMPresizehmax = b})
selectCOMPhelpdat :: Lens' COMP (Maybe (Tree DAT))
selectCOMPhelpdat = lens _selectCOMPhelpdat (\a b -> a {_selectCOMPhelpdat = b})
selectCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
selectCOMPextension3 = lens _selectCOMPextension3 (\a b -> a {_selectCOMPextension3 = b})
selectCOMPaspect :: Lens' COMP (Maybe (Tree Float))
selectCOMPaspect = lens _selectCOMPaspect (\a b -> a {_selectCOMPaspect = b})
selectCOMPcursor :: Lens' COMP (Maybe (Tree Int))
selectCOMPcursor = lens _selectCOMPcursor (\a b -> a {_selectCOMPcursor = b})
selectCOMPalign :: Lens' COMP (Maybe (Tree Int))
selectCOMPalign = lens _selectCOMPalign (\a b -> a {_selectCOMPalign = b})
selectCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
selectCOMPextname2 = lens _selectCOMPextname2 (\a b -> a {_selectCOMPextname2 = b})
selectCOMPh :: Lens' COMP (Maybe (Tree Int))
selectCOMPh = lens _selectCOMPh (\a b -> a {_selectCOMPh = b})
selectCOMPleftborder :: Lens' COMP (Maybe (Tree Int))
selectCOMPleftborder = lens _selectCOMPleftborder (\a b -> a {_selectCOMPleftborder = b})
selectCOMPtopfill :: Lens' COMP (Maybe (Tree Int))
selectCOMPtopfill = lens _selectCOMPtopfill (\a b -> a {_selectCOMPtopfill = b})
selectCOMPresizewmin :: Lens' COMP (Maybe (Tree Float))
selectCOMPresizewmin = lens _selectCOMPresizewmin (\a b -> a {_selectCOMPresizewmin = b})
selectCOMPmouserel :: Lens' COMP (Maybe (Tree Bool))
selectCOMPmouserel = lens _selectCOMPmouserel (\a b -> a {_selectCOMPmouserel = b})
selectCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
selectCOMPenablecloningpulse = lens _selectCOMPenablecloningpulse (\a b -> a {_selectCOMPenablecloningpulse = b})
selectCOMPoffset :: Lens' COMP (Vec2)
selectCOMPoffset = lens _selectCOMPoffset (\a b -> a {_selectCOMPoffset = b})
selectCOMPresizeb :: Lens' COMP (Maybe (Tree Bool))
selectCOMPresizeb = lens _selectCOMPresizeb (\a b -> a {_selectCOMPresizeb = b})
selectCOMPleftoffset :: Lens' COMP (Maybe (Tree Float))
selectCOMPleftoffset = lens _selectCOMPleftoffset (\a b -> a {_selectCOMPleftoffset = b})
selectCOMPy :: Lens' COMP (Maybe (Tree Int))
selectCOMPy = lens _selectCOMPy (\a b -> a {_selectCOMPy = b})
selectCOMPpvscrollbar :: Lens' COMP (Maybe (Tree Int))
selectCOMPpvscrollbar = lens _selectCOMPpvscrollbar (\a b -> a {_selectCOMPpvscrollbar = b})
selectCOMPcrop :: Lens' COMP (Maybe (Tree Int))
selectCOMPcrop = lens _selectCOMPcrop (\a b -> a {_selectCOMPcrop = b})
selectCOMPbottomoffset :: Lens' COMP (Maybe (Tree Float))
selectCOMPbottomoffset = lens _selectCOMPbottomoffset (\a b -> a {_selectCOMPbottomoffset = b})
selectCOMPdisplay :: Lens' COMP (Maybe (Tree Bool))
selectCOMPdisplay = lens _selectCOMPdisplay (\a b -> a {_selectCOMPdisplay = b})
selectCOMPfit :: Lens' COMP (Maybe (Tree Int))
selectCOMPfit = lens _selectCOMPfit (\a b -> a {_selectCOMPfit = b})
selectCOMPdrop :: Lens' COMP (Maybe (Tree Int))
selectCOMPdrop = lens _selectCOMPdrop (\a b -> a {_selectCOMPdrop = b})
selectCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
selectCOMPextname4 = lens _selectCOMPextname4 (\a b -> a {_selectCOMPextname4 = b})
selectCOMPmarginl :: Lens' COMP (Maybe (Tree Float))
selectCOMPmarginl = lens _selectCOMPmarginl (\a b -> a {_selectCOMPmarginl = b})
selectCOMPuvbuttonsright :: Lens' COMP (Maybe (Tree Bool))
selectCOMPuvbuttonsright = lens _selectCOMPuvbuttonsright (\a b -> a {_selectCOMPuvbuttonsright = b})
selectCOMPresizewmax :: Lens' COMP (Maybe (Tree Float))
selectCOMPresizewmax = lens _selectCOMPresizewmax (\a b -> a {_selectCOMPresizewmax = b})
selectCOMPdragscript :: Lens' COMP (Maybe (Tree DAT))
selectCOMPdragscript = lens _selectCOMPdragscript (\a b -> a {_selectCOMPdragscript = b})
selectCOMPbottomanchor :: Lens' COMP (Maybe (Tree Float))
selectCOMPbottomanchor = lens _selectCOMPbottomanchor (\a b -> a {_selectCOMPbottomanchor = b})
selectCOMPsizefromwindow :: Lens' COMP (Maybe (Tree Bool))
selectCOMPsizefromwindow = lens _selectCOMPsizefromwindow (\a b -> a {_selectCOMPsizefromwindow = b})
selectCOMPopacity :: Lens' COMP (Maybe (Tree Float))
selectCOMPopacity = lens _selectCOMPopacity (\a b -> a {_selectCOMPopacity = b})
selectCOMPborderb :: Lens' COMP (Vec3)
selectCOMPborderb = lens _selectCOMPborderb (\a b -> a {_selectCOMPborderb = b})
selectCOMPmousewheel :: Lens' COMP (Maybe (Tree Bool))
selectCOMPmousewheel = lens _selectCOMPmousewheel (\a b -> a {_selectCOMPmousewheel = b})
selectCOMPoverridemethod :: Lens' COMP (Maybe (Tree Int))
selectCOMPoverridemethod = lens _selectCOMPoverridemethod (\a b -> a {_selectCOMPoverridemethod = b})
selectCOMPreposition :: Lens' COMP (Maybe (Tree Int))
selectCOMPreposition = lens _selectCOMPreposition (\a b -> a {_selectCOMPreposition = b})
selectCOMPenable :: Lens' COMP (Maybe (Tree Bool))
selectCOMPenable = lens _selectCOMPenable (\a b -> a {_selectCOMPenable = b})
selectCOMPchop :: Lens' COMP (Maybe (Tree CHOP))
selectCOMPchop = lens _selectCOMPchop (\a b -> a {_selectCOMPchop = b})
selectCOMPspacing :: Lens' COMP (Maybe (Tree Float))
selectCOMPspacing = lens _selectCOMPspacing (\a b -> a {_selectCOMPspacing = b})
selectCOMPrightoffset :: Lens' COMP (Maybe (Tree Float))
selectCOMPrightoffset = lens _selectCOMPrightoffset (\a b -> a {_selectCOMPrightoffset = b})
selectCOMPvieweraspect :: Lens' COMP (Maybe (Tree Int))
selectCOMPvieweraspect = lens _selectCOMPvieweraspect (\a b -> a {_selectCOMPvieweraspect = b})
selectCOMPalignmax :: Lens' COMP (Maybe (Tree Int))
selectCOMPalignmax = lens _selectCOMPalignmax (\a b -> a {_selectCOMPalignmax = b})
selectCOMPscrolloverlay :: Lens' COMP (Maybe (Tree Int))
selectCOMPscrolloverlay = lens _selectCOMPscrolloverlay (\a b -> a {_selectCOMPscrolloverlay = b})
selectCOMPclone :: Lens' COMP (Maybe (Tree COMP))
selectCOMPclone = lens _selectCOMPclone (\a b -> a {_selectCOMPclone = b})
selectCOMPkeepmemory :: Lens' COMP (Maybe (Tree Bool))
selectCOMPkeepmemory = lens _selectCOMPkeepmemory (\a b -> a {_selectCOMPkeepmemory = b})
selectCOMPjustifyv :: Lens' COMP (Maybe (Tree Int))
selectCOMPjustifyv = lens _selectCOMPjustifyv (\a b -> a {_selectCOMPjustifyv = b})
selectCOMPhfillweight :: Lens' COMP (Maybe (Tree Float))
selectCOMPhfillweight = lens _selectCOMPhfillweight (\a b -> a {_selectCOMPhfillweight = b})
selectCOMPhorigin :: Lens' COMP (Maybe (Tree Float))
selectCOMPhorigin = lens _selectCOMPhorigin (\a b -> a {_selectCOMPhorigin = b})
selectCOMPtop :: Lens' COMP (Maybe (Tree TOP))
selectCOMPtop = lens _selectCOMPtop (\a b -> a {_selectCOMPtop = b})
selectCOMPscale :: Lens' COMP (Vec2)
selectCOMPscale = lens _selectCOMPscale (\a b -> a {_selectCOMPscale = b})
selectCOMPphscrollbar :: Lens' COMP (Maybe (Tree Int))
selectCOMPphscrollbar = lens _selectCOMPphscrollbar (\a b -> a {_selectCOMPphscrollbar = b})
selectCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
selectCOMPopshortcut = lens _selectCOMPopshortcut (\a b -> a {_selectCOMPopshortcut = b})
selectCOMPbottomborder :: Lens' COMP (Maybe (Tree Int))
selectCOMPbottomborder = lens _selectCOMPbottomborder (\a b -> a {_selectCOMPbottomborder = b})

environmentlightCOMPprojection :: Lens' COMP (Maybe (Tree Int))
environmentlightCOMPprojection = lens _environmentlightCOMPprojection (\a b -> a {_environmentlightCOMPprojection = b})
environmentlightCOMPviewanglemethod :: Lens' COMP (Maybe (Tree Int))
environmentlightCOMPviewanglemethod = lens _environmentlightCOMPviewanglemethod (\a b -> a {_environmentlightCOMPviewanglemethod = b})
environmentlightCOMPfognear :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPfognear = lens _environmentlightCOMPfognear (\a b -> a {_environmentlightCOMPfognear = b})
environmentlightCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPextname1 = lens _environmentlightCOMPextname1 (\a b -> a {_environmentlightCOMPextname1 = b})
environmentlightCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPloadondemand = lens _environmentlightCOMPloadondemand (\a b -> a {_environmentlightCOMPloadondemand = b})
environmentlightCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPpromoteextension4 = lens _environmentlightCOMPpromoteextension4 (\a b -> a {_environmentlightCOMPpromoteextension4 = b})
environmentlightCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPextension4 = lens _environmentlightCOMPextension4 (\a b -> a {_environmentlightCOMPextension4 = b})
environmentlightCOMPpathorient :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPpathorient = lens _environmentlightCOMPpathorient (\a b -> a {_environmentlightCOMPpathorient = b})
environmentlightCOMProll :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMProll = lens _environmentlightCOMProll (\a b -> a {_environmentlightCOMProll = b})
environmentlightCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
environmentlightCOMPnodeview = lens _environmentlightCOMPnodeview (\a b -> a {_environmentlightCOMPnodeview = b})
environmentlightCOMPenvlightmapprefilter :: Lens' COMP (Maybe (Tree Int))
environmentlightCOMPenvlightmapprefilter = lens _environmentlightCOMPenvlightmapprefilter (\a b -> a {_environmentlightCOMPenvlightmapprefilter = b})
environmentlightCOMPcustomproj :: Lens' COMP (Maybe (Tree DAT))
environmentlightCOMPcustomproj = lens _environmentlightCOMPcustomproj (\a b -> a {_environmentlightCOMPcustomproj = b})
environmentlightCOMPbank :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPbank = lens _environmentlightCOMPbank (\a b -> a {_environmentlightCOMPbank = b})
environmentlightCOMPfov :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPfov = lens _environmentlightCOMPfov (\a b -> a {_environmentlightCOMPfov = b})
environmentlightCOMPp :: Lens' COMP (Vec3)
environmentlightCOMPp = lens _environmentlightCOMPp (\a b -> a {_environmentlightCOMPp = b})
environmentlightCOMPenvlightmap :: Lens' COMP (Maybe (Tree TOP))
environmentlightCOMPenvlightmap = lens _environmentlightCOMPenvlightmap (\a b -> a {_environmentlightCOMPenvlightmap = b})
environmentlightCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPsavebackup = lens _environmentlightCOMPsavebackup (\a b -> a {_environmentlightCOMPsavebackup = b})
environmentlightCOMPprojectionblend :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPprojectionblend = lens _environmentlightCOMPprojectionblend (\a b -> a {_environmentlightCOMPprojectionblend = b})
environmentlightCOMPpos :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPpos = lens _environmentlightCOMPpos (\a b -> a {_environmentlightCOMPpos = b})
environmentlightCOMPfogdensity :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPfogdensity = lens _environmentlightCOMPfogdensity (\a b -> a {_environmentlightCOMPfogdensity = b})
environmentlightCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPsubcompname = lens _environmentlightCOMPsubcompname (\a b -> a {_environmentlightCOMPsubcompname = b})
environmentlightCOMPpickpriority :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPpickpriority = lens _environmentlightCOMPpickpriority (\a b -> a {_environmentlightCOMPpickpriority = b})
environmentlightCOMPfogalpha :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPfogalpha = lens _environmentlightCOMPfogalpha (\a b -> a {_environmentlightCOMPfogalpha = b})
environmentlightCOMPenvlightspecmap :: Lens' COMP (Maybe (Tree TOP))
environmentlightCOMPenvlightspecmap = lens _environmentlightCOMPenvlightspecmap (\a b -> a {_environmentlightCOMPenvlightspecmap = b})
environmentlightCOMPpr :: Lens' COMP (Vec3)
environmentlightCOMPpr = lens _environmentlightCOMPpr (\a b -> a {_environmentlightCOMPpr = b})
environmentlightCOMPwcolor :: Lens' COMP (Vec3)
environmentlightCOMPwcolor = lens _environmentlightCOMPwcolor (\a b -> a {_environmentlightCOMPwcolor = b})
environmentlightCOMPfocal :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPfocal = lens _environmentlightCOMPfocal (\a b -> a {_environmentlightCOMPfocal = b})
environmentlightCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPreinitnet = lens _environmentlightCOMPreinitnet (\a b -> a {_environmentlightCOMPreinitnet = b})
environmentlightCOMPfar :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPfar = lens _environmentlightCOMPfar (\a b -> a {_environmentlightCOMPfar = b})
environmentlightCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPexternaltox = lens _environmentlightCOMPexternaltox (\a b -> a {_environmentlightCOMPexternaltox = b})
environmentlightCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPparentshortcut = lens _environmentlightCOMPparentshortcut (\a b -> a {_environmentlightCOMPparentshortcut = b})
environmentlightCOMPpreset :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPpreset = lens _environmentlightCOMPpreset (\a b -> a {_environmentlightCOMPpreset = b})
environmentlightCOMPpathsop :: Lens' COMP (Maybe (Tree SOP))
environmentlightCOMPpathsop = lens _environmentlightCOMPpathsop (\a b -> a {_environmentlightCOMPpathsop = b})
environmentlightCOMPaperture :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPaperture = lens _environmentlightCOMPaperture (\a b -> a {_environmentlightCOMPaperture = b})
environmentlightCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPpromoteextension1 = lens _environmentlightCOMPpromoteextension1 (\a b -> a {_environmentlightCOMPpromoteextension1 = b})
environmentlightCOMPup :: Lens' COMP (Vec3)
environmentlightCOMPup = lens _environmentlightCOMPup (\a b -> a {_environmentlightCOMPup = b})
environmentlightCOMPpxord :: Lens' COMP (Maybe (Tree Int))
environmentlightCOMPpxord = lens _environmentlightCOMPpxord (\a b -> a {_environmentlightCOMPpxord = b})
environmentlightCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPextname3 = lens _environmentlightCOMPextname3 (\a b -> a {_environmentlightCOMPextname3 = b})
environmentlightCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPreinitextensions = lens _environmentlightCOMPreinitextensions (\a b -> a {_environmentlightCOMPreinitextensions = b})
environmentlightCOMPprord :: Lens' COMP (Maybe (Tree Int))
environmentlightCOMPprord = lens _environmentlightCOMPprord (\a b -> a {_environmentlightCOMPprord = b})
environmentlightCOMPpt :: Lens' COMP (Vec3)
environmentlightCOMPpt = lens _environmentlightCOMPpt (\a b -> a {_environmentlightCOMPpt = b})
environmentlightCOMPlookup :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPlookup = lens _environmentlightCOMPlookup (\a b -> a {_environmentlightCOMPlookup = b})
environmentlightCOMPt :: Lens' COMP (Vec3)
environmentlightCOMPt = lens _environmentlightCOMPt (\a b -> a {_environmentlightCOMPt = b})
environmentlightCOMPfogcolor :: Lens' COMP (Vec3)
environmentlightCOMPfogcolor = lens _environmentlightCOMPfogcolor (\a b -> a {_environmentlightCOMPfogcolor = b})
environmentlightCOMPdrawpriority :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPdrawpriority = lens _environmentlightCOMPdrawpriority (\a b -> a {_environmentlightCOMPdrawpriority = b})
environmentlightCOMPwin :: Lens' COMP (Vec2)
environmentlightCOMPwin = lens _environmentlightCOMPwin (\a b -> a {_environmentlightCOMPwin = b})
environmentlightCOMPrender :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPrender = lens _environmentlightCOMPrender (\a b -> a {_environmentlightCOMPrender = b})
environmentlightCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPextension1 = lens _environmentlightCOMPextension1 (\a b -> a {_environmentlightCOMPextension1 = b})
environmentlightCOMPprioritymethod :: Lens' COMP (Maybe (Tree Int))
environmentlightCOMPprioritymethod = lens _environmentlightCOMPprioritymethod (\a b -> a {_environmentlightCOMPprioritymethod = b})
environmentlightCOMPenvlightmapquality :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPenvlightmapquality = lens _environmentlightCOMPenvlightmapquality (\a b -> a {_environmentlightCOMPenvlightmapquality = b})
environmentlightCOMPps :: Lens' COMP (Vec3)
environmentlightCOMPps = lens _environmentlightCOMPps (\a b -> a {_environmentlightCOMPps = b})
environmentlightCOMPfog :: Lens' COMP (Maybe (Tree Int))
environmentlightCOMPfog = lens _environmentlightCOMPfog (\a b -> a {_environmentlightCOMPfog = b})
environmentlightCOMPfogfar :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPfogfar = lens _environmentlightCOMPfogfar (\a b -> a {_environmentlightCOMPfogfar = b})
environmentlightCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPextension3 = lens _environmentlightCOMPextension3 (\a b -> a {_environmentlightCOMPextension3 = b})
environmentlightCOMPpxform :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPpxform = lens _environmentlightCOMPpxform (\a b -> a {_environmentlightCOMPpxform = b})
environmentlightCOMPmaterial :: Lens' COMP (Maybe (Tree MAT))
environmentlightCOMPmaterial = lens _environmentlightCOMPmaterial (\a b -> a {_environmentlightCOMPmaterial = b})
environmentlightCOMPbgcolor :: Lens' COMP (Vec4)
environmentlightCOMPbgcolor = lens _environmentlightCOMPbgcolor (\a b -> a {_environmentlightCOMPbgcolor = b})
environmentlightCOMPr :: Lens' COMP (Vec3)
environmentlightCOMPr = lens _environmentlightCOMPr (\a b -> a {_environmentlightCOMPr = b})
environmentlightCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPenablecloning = lens _environmentlightCOMPenablecloning (\a b -> a {_environmentlightCOMPenablecloning = b})
environmentlightCOMPenvlightmaprotate :: Lens' COMP (Vec3)
environmentlightCOMPenvlightmaprotate = lens _environmentlightCOMPenvlightmaprotate (\a b -> a {_environmentlightCOMPenvlightmaprotate = b})
environmentlightCOMPpp :: Lens' COMP (Vec3)
environmentlightCOMPpp = lens _environmentlightCOMPpp (\a b -> a {_environmentlightCOMPpp = b})
environmentlightCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPextname2 = lens _environmentlightCOMPextname2 (\a b -> a {_environmentlightCOMPextname2 = b})
environmentlightCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPopshortcut = lens _environmentlightCOMPopshortcut (\a b -> a {_environmentlightCOMPopshortcut = b})
environmentlightCOMPpcommit :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPpcommit = lens _environmentlightCOMPpcommit (\a b -> a {_environmentlightCOMPpcommit = b})
environmentlightCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPpromoteextension2 = lens _environmentlightCOMPpromoteextension2 (\a b -> a {_environmentlightCOMPpromoteextension2 = b})
environmentlightCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPreloadtoxonstart = lens _environmentlightCOMPreloadtoxonstart (\a b -> a {_environmentlightCOMPreloadtoxonstart = b})
environmentlightCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPenablecloningpulse = lens _environmentlightCOMPenablecloningpulse (\a b -> a {_environmentlightCOMPenablecloningpulse = b})
environmentlightCOMPenvlightdiffusemap :: Lens' COMP (Maybe (Tree TOP))
environmentlightCOMPenvlightdiffusemap = lens _environmentlightCOMPenvlightdiffusemap (\a b -> a {_environmentlightCOMPenvlightdiffusemap = b})
environmentlightCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
environmentlightCOMPpromoteextension3 = lens _environmentlightCOMPpromoteextension3 (\a b -> a {_environmentlightCOMPpromoteextension3 = b})
environmentlightCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPextname4 = lens _environmentlightCOMPextname4 (\a b -> a {_environmentlightCOMPextname4 = b})
environmentlightCOMPfogmap :: Lens' COMP (Maybe (Tree TOP))
environmentlightCOMPfogmap = lens _environmentlightCOMPfogmap (\a b -> a {_environmentlightCOMPfogmap = b})
environmentlightCOMPxord :: Lens' COMP (Maybe (Tree Int))
environmentlightCOMPxord = lens _environmentlightCOMPxord (\a b -> a {_environmentlightCOMPxord = b})
environmentlightCOMPorthowidth :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPorthowidth = lens _environmentlightCOMPorthowidth (\a b -> a {_environmentlightCOMPorthowidth = b})
environmentlightCOMPnear :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPnear = lens _environmentlightCOMPnear (\a b -> a {_environmentlightCOMPnear = b})
environmentlightCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
environmentlightCOMPextension2 = lens _environmentlightCOMPextension2 (\a b -> a {_environmentlightCOMPextension2 = b})
environmentlightCOMPs :: Lens' COMP (Vec3)
environmentlightCOMPs = lens _environmentlightCOMPs (\a b -> a {_environmentlightCOMPs = b})
environmentlightCOMPc :: Lens' COMP (Vec3)
environmentlightCOMPc = lens _environmentlightCOMPc (\a b -> a {_environmentlightCOMPc = b})
environmentlightCOMPclone :: Lens' COMP (Maybe (Tree COMP))
environmentlightCOMPclone = lens _environmentlightCOMPclone (\a b -> a {_environmentlightCOMPclone = b})
environmentlightCOMPenvlightmaptype2d :: Lens' COMP (Maybe (Tree Int))
environmentlightCOMPenvlightmaptype2d = lens _environmentlightCOMPenvlightmaptype2d (\a b -> a {_environmentlightCOMPenvlightmaptype2d = b})
environmentlightCOMPrord :: Lens' COMP (Maybe (Tree Int))
environmentlightCOMPrord = lens _environmentlightCOMPrord (\a b -> a {_environmentlightCOMPrord = b})
environmentlightCOMPdimmer :: Lens' COMP (Maybe (Tree Float))
environmentlightCOMPdimmer = lens _environmentlightCOMPdimmer (\a b -> a {_environmentlightCOMPdimmer = b})

windowCOMPdpiscaling :: Lens' COMP (Maybe (Tree Int))
windowCOMPdpiscaling = lens _windowCOMPdpiscaling (\a b -> a {_windowCOMPdpiscaling = b})
windowCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPextname1 = lens _windowCOMPextname1 (\a b -> a {_windowCOMPextname1 = b})
windowCOMPjustifyh :: Lens' COMP (Maybe (Tree Int))
windowCOMPjustifyh = lens _windowCOMPjustifyh (\a b -> a {_windowCOMPjustifyh = b})
windowCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
windowCOMPpromoteextension4 = lens _windowCOMPpromoteextension4 (\a b -> a {_windowCOMPpromoteextension4 = b})
windowCOMPwinw :: Lens' COMP (Maybe (Tree Int))
windowCOMPwinw = lens _windowCOMPwinw (\a b -> a {_windowCOMPwinw = b})
windowCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPextension4 = lens _windowCOMPextension4 (\a b -> a {_windowCOMPextension4 = b})
windowCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
windowCOMPsavebackup = lens _windowCOMPsavebackup (\a b -> a {_windowCOMPsavebackup = b})
windowCOMPbordersinsize :: Lens' COMP (Maybe (Tree Bool))
windowCOMPbordersinsize = lens _windowCOMPbordersinsize (\a b -> a {_windowCOMPbordersinsize = b})
windowCOMPborders :: Lens' COMP (Maybe (Tree Bool))
windowCOMPborders = lens _windowCOMPborders (\a b -> a {_windowCOMPborders = b})
windowCOMPsingle :: Lens' COMP (Maybe (Tree Int))
windowCOMPsingle = lens _windowCOMPsingle (\a b -> a {_windowCOMPsingle = b})
windowCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPextension3 = lens _windowCOMPextension3 (\a b -> a {_windowCOMPextension3 = b})
windowCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPparentshortcut = lens _windowCOMPparentshortcut (\a b -> a {_windowCOMPparentshortcut = b})
windowCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
windowCOMPenablecloning = lens _windowCOMPenablecloning (\a b -> a {_windowCOMPenablecloning = b})
windowCOMPwinoffsety :: Lens' COMP (Maybe (Tree Int))
windowCOMPwinoffsety = lens _windowCOMPwinoffsety (\a b -> a {_windowCOMPwinoffsety = b})
windowCOMPhwframelock :: Lens' COMP (Maybe (Tree Bool))
windowCOMPhwframelock = lens _windowCOMPhwframelock (\a b -> a {_windowCOMPhwframelock = b})
windowCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPextname2 = lens _windowCOMPextname2 (\a b -> a {_windowCOMPextname2 = b})
windowCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPopshortcut = lens _windowCOMPopshortcut (\a b -> a {_windowCOMPopshortcut = b})
windowCOMPincludedialog :: Lens' COMP (Maybe (Tree Bool))
windowCOMPincludedialog = lens _windowCOMPincludedialog (\a b -> a {_windowCOMPincludedialog = b})
windowCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
windowCOMPpromoteextension2 = lens _windowCOMPpromoteextension2 (\a b -> a {_windowCOMPpromoteextension2 = b})
windowCOMPcloseescape :: Lens' COMP (Maybe (Tree Bool))
windowCOMPcloseescape = lens _windowCOMPcloseescape (\a b -> a {_windowCOMPcloseescape = b})
windowCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
windowCOMPenablecloningpulse = lens _windowCOMPenablecloningpulse (\a b -> a {_windowCOMPenablecloningpulse = b})
windowCOMPperformance :: Lens' COMP (Maybe (Tree Bool))
windowCOMPperformance = lens _windowCOMPperformance (\a b -> a {_windowCOMPperformance = b})
windowCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
windowCOMPloadondemand = lens _windowCOMPloadondemand (\a b -> a {_windowCOMPloadondemand = b})
windowCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPextension1 = lens _windowCOMPextension1 (\a b -> a {_windowCOMPextension1 = b})
windowCOMPwinoffsetx :: Lens' COMP (Maybe (Tree Int))
windowCOMPwinoffsetx = lens _windowCOMPwinoffsetx (\a b -> a {_windowCOMPwinoffsetx = b})
windowCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
windowCOMPpromoteextension3 = lens _windowCOMPpromoteextension3 (\a b -> a {_windowCOMPpromoteextension3 = b})
windowCOMPwinh :: Lens' COMP (Maybe (Tree Int))
windowCOMPwinh = lens _windowCOMPwinh (\a b -> a {_windowCOMPwinh = b})
windowCOMPalwaysontop :: Lens' COMP (Maybe (Tree Bool))
windowCOMPalwaysontop = lens _windowCOMPalwaysontop (\a b -> a {_windowCOMPalwaysontop = b})
windowCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPextname4 = lens _windowCOMPextname4 (\a b -> a {_windowCOMPextname4 = b})
windowCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
windowCOMPreloadtoxonstart = lens _windowCOMPreloadtoxonstart (\a b -> a {_windowCOMPreloadtoxonstart = b})
windowCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
windowCOMPreinitnet = lens _windowCOMPreinitnet (\a b -> a {_windowCOMPreinitnet = b})
windowCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPexternaltox = lens _windowCOMPexternaltox (\a b -> a {_windowCOMPexternaltox = b})
windowCOMPmonitor :: Lens' COMP (Maybe (Tree Int))
windowCOMPmonitor = lens _windowCOMPmonitor (\a b -> a {_windowCOMPmonitor = b})
windowCOMPinteract :: Lens' COMP (Maybe (Tree Bool))
windowCOMPinteract = lens _windowCOMPinteract (\a b -> a {_windowCOMPinteract = b})
windowCOMPwinclose :: Lens' COMP (Maybe (Tree Bool))
windowCOMPwinclose = lens _windowCOMPwinclose (\a b -> a {_windowCOMPwinclose = b})
windowCOMPupdate :: Lens' COMP (Maybe (Tree Bool))
windowCOMPupdate = lens _windowCOMPupdate (\a b -> a {_windowCOMPupdate = b})
windowCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
windowCOMPpromoteextension1 = lens _windowCOMPpromoteextension1 (\a b -> a {_windowCOMPpromoteextension1 = b})
windowCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPsubcompname = lens _windowCOMPsubcompname (\a b -> a {_windowCOMPsubcompname = b})
windowCOMPtitle :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPtitle = lens _windowCOMPtitle (\a b -> a {_windowCOMPtitle = b})
windowCOMPwinopen :: Lens' COMP (Maybe (Tree Bool))
windowCOMPwinopen = lens _windowCOMPwinopen (\a b -> a {_windowCOMPwinopen = b})
windowCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPextname3 = lens _windowCOMPextname3 (\a b -> a {_windowCOMPextname3 = b})
windowCOMPjustifyoffsetto :: Lens' COMP (Maybe (Tree Int))
windowCOMPjustifyoffsetto = lens _windowCOMPjustifyoffsetto (\a b -> a {_windowCOMPjustifyoffsetto = b})
windowCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
windowCOMPreinitextensions = lens _windowCOMPreinitextensions (\a b -> a {_windowCOMPreinitextensions = b})
windowCOMPignoretaskbar :: Lens' COMP (Maybe (Tree Bool))
windowCOMPignoretaskbar = lens _windowCOMPignoretaskbar (\a b -> a {_windowCOMPignoretaskbar = b})
windowCOMPopendialog :: Lens' COMP (Maybe (Tree Bool))
windowCOMPopendialog = lens _windowCOMPopendialog (\a b -> a {_windowCOMPopendialog = b})
windowCOMPsize :: Lens' COMP (Maybe (Tree Int))
windowCOMPsize = lens _windowCOMPsize (\a b -> a {_windowCOMPsize = b})
windowCOMPsetperform :: Lens' COMP (Maybe (Tree Bool))
windowCOMPsetperform = lens _windowCOMPsetperform (\a b -> a {_windowCOMPsetperform = b})
windowCOMPclone :: Lens' COMP (Maybe (Tree COMP))
windowCOMPclone = lens _windowCOMPclone (\a b -> a {_windowCOMPclone = b})
windowCOMPdrawwindow :: Lens' COMP (Maybe (Tree Bool))
windowCOMPdrawwindow = lens _windowCOMPdrawwindow (\a b -> a {_windowCOMPdrawwindow = b})
windowCOMPcursorvisible :: Lens' COMP (Maybe (Tree Int))
windowCOMPcursorvisible = lens _windowCOMPcursorvisible (\a b -> a {_windowCOMPcursorvisible = b})
windowCOMPopenglstereo :: Lens' COMP (Maybe (Tree Bool))
windowCOMPopenglstereo = lens _windowCOMPopenglstereo (\a b -> a {_windowCOMPopenglstereo = b})
windowCOMPvsyncmode :: Lens' COMP (Maybe (Tree Int))
windowCOMPvsyncmode = lens _windowCOMPvsyncmode (\a b -> a {_windowCOMPvsyncmode = b})
windowCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
windowCOMPextension2 = lens _windowCOMPextension2 (\a b -> a {_windowCOMPextension2 = b})
windowCOMPjustifyv :: Lens' COMP (Maybe (Tree Int))
windowCOMPjustifyv = lens _windowCOMPjustifyv (\a b -> a {_windowCOMPjustifyv = b})

buttonCOMPtopborder :: Lens' COMP (Maybe (Tree Int))
buttonCOMPtopborder = lens _buttonCOMPtopborder (\a b -> a {_buttonCOMPtopborder = b})
buttonCOMPscrollbarthickness :: Lens' COMP (Maybe (Tree Int))
buttonCOMPscrollbarthickness = lens _buttonCOMPscrollbarthickness (\a b -> a {_buttonCOMPscrollbarthickness = b})
buttonCOMPw :: Lens' COMP (Maybe (Tree Int))
buttonCOMPw = lens _buttonCOMPw (\a b -> a {_buttonCOMPw = b})
buttonCOMPalignorder :: Lens' COMP (Maybe (Tree Float))
buttonCOMPalignorder = lens _buttonCOMPalignorder (\a b -> a {_buttonCOMPalignorder = b})
buttonCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPloadondemand = lens _buttonCOMPloadondemand (\a b -> a {_buttonCOMPloadondemand = b})
buttonCOMPjustifyh :: Lens' COMP (Maybe (Tree Int))
buttonCOMPjustifyh = lens _buttonCOMPjustifyh (\a b -> a {_buttonCOMPjustifyh = b})
buttonCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPpromoteextension4 = lens _buttonCOMPpromoteextension4 (\a b -> a {_buttonCOMPpromoteextension4 = b})
buttonCOMPdropdestscript :: Lens' COMP (Maybe (Tree DAT))
buttonCOMPdropdestscript = lens _buttonCOMPdropdestscript (\a b -> a {_buttonCOMPdropdestscript = b})
buttonCOMPrepositionxmin :: Lens' COMP (Maybe (Tree Float))
buttonCOMPrepositionxmin = lens _buttonCOMPrepositionxmin (\a b -> a {_buttonCOMPrepositionxmin = b})
buttonCOMPx :: Lens' COMP (Maybe (Tree Int))
buttonCOMPx = lens _buttonCOMPx (\a b -> a {_buttonCOMPx = b})
buttonCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
buttonCOMPnodeview = lens _buttonCOMPnodeview (\a b -> a {_buttonCOMPnodeview = b})
buttonCOMPmargint :: Lens' COMP (Maybe (Tree Float))
buttonCOMPmargint = lens _buttonCOMPmargint (\a b -> a {_buttonCOMPmargint = b})
buttonCOMPresizer :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPresizer = lens _buttonCOMPresizer (\a b -> a {_buttonCOMPresizer = b})
buttonCOMPdroptypescript :: Lens' COMP (Maybe (Tree DAT))
buttonCOMPdroptypescript = lens _buttonCOMPdroptypescript (\a b -> a {_buttonCOMPdroptypescript = b})
buttonCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPpromoteextension2 = lens _buttonCOMPpromoteextension2 (\a b -> a {_buttonCOMPpromoteextension2 = b})
buttonCOMPfixedaspect :: Lens' COMP (Maybe (Tree Int))
buttonCOMPfixedaspect = lens _buttonCOMPfixedaspect (\a b -> a {_buttonCOMPfixedaspect = b})
buttonCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPextname1 = lens _buttonCOMPextname1 (\a b -> a {_buttonCOMPextname1 = b})
buttonCOMPmarginl :: Lens' COMP (Maybe (Tree Float))
buttonCOMPmarginl = lens _buttonCOMPmarginl (\a b -> a {_buttonCOMPmarginl = b})
buttonCOMPdodisablecolor :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPdodisablecolor = lens _buttonCOMPdodisablecolor (\a b -> a {_buttonCOMPdodisablecolor = b})
buttonCOMPmultitouch :: Lens' COMP (Maybe (Tree Int))
buttonCOMPmultitouch = lens _buttonCOMPmultitouch (\a b -> a {_buttonCOMPmultitouch = b})
buttonCOMPbgalpha :: Lens' COMP (Maybe (Tree Float))
buttonCOMPbgalpha = lens _buttonCOMPbgalpha (\a b -> a {_buttonCOMPbgalpha = b})
buttonCOMPhmode :: Lens' COMP (Maybe (Tree Int))
buttonCOMPhmode = lens _buttonCOMPhmode (\a b -> a {_buttonCOMPhmode = b})
buttonCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPsavebackup = lens _buttonCOMPsavebackup (\a b -> a {_buttonCOMPsavebackup = b})
buttonCOMPuvbuttonsmiddle :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPuvbuttonsmiddle = lens _buttonCOMPuvbuttonsmiddle (\a b -> a {_buttonCOMPuvbuttonsmiddle = b})
buttonCOMPleftanchor :: Lens' COMP (Maybe (Tree Float))
buttonCOMPleftanchor = lens _buttonCOMPleftanchor (\a b -> a {_buttonCOMPleftanchor = b})
buttonCOMPclickthrough :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPclickthrough = lens _buttonCOMPclickthrough (\a b -> a {_buttonCOMPclickthrough = b})
buttonCOMPdisablealpha :: Lens' COMP (Maybe (Tree Float))
buttonCOMPdisablealpha = lens _buttonCOMPdisablealpha (\a b -> a {_buttonCOMPdisablealpha = b})
buttonCOMPvmode :: Lens' COMP (Maybe (Tree Int))
buttonCOMPvmode = lens _buttonCOMPvmode (\a b -> a {_buttonCOMPvmode = b})
buttonCOMPvorigin :: Lens' COMP (Maybe (Tree Float))
buttonCOMPvorigin = lens _buttonCOMPvorigin (\a b -> a {_buttonCOMPvorigin = b})
buttonCOMPdrag :: Lens' COMP (Maybe (Tree Int))
buttonCOMPdrag = lens _buttonCOMPdrag (\a b -> a {_buttonCOMPdrag = b})
buttonCOMPdisablecolor :: Lens' COMP (Vec3)
buttonCOMPdisablecolor = lens _buttonCOMPdisablecolor (\a b -> a {_buttonCOMPdisablecolor = b})
buttonCOMPresizehmin :: Lens' COMP (Maybe (Tree Float))
buttonCOMPresizehmin = lens _buttonCOMPresizehmin (\a b -> a {_buttonCOMPresizehmin = b})
buttonCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPextname3 = lens _buttonCOMPextname3 (\a b -> a {_buttonCOMPextname3 = b})
buttonCOMPborderaalpha :: Lens' COMP (Maybe (Tree Float))
buttonCOMPborderaalpha = lens _buttonCOMPborderaalpha (\a b -> a {_buttonCOMPborderaalpha = b})
buttonCOMPoverlay :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPoverlay = lens _buttonCOMPoverlay (\a b -> a {_buttonCOMPoverlay = b})
buttonCOMPbuttongroupdat :: Lens' COMP (Maybe (Tree DAT))
buttonCOMPbuttongroupdat = lens _buttonCOMPbuttongroupdat (\a b -> a {_buttonCOMPbuttongroupdat = b})
buttonCOMPrepositionymin :: Lens' COMP (Maybe (Tree Float))
buttonCOMPrepositionymin = lens _buttonCOMPrepositionymin (\a b -> a {_buttonCOMPrepositionymin = b})
buttonCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPenablecloning = lens _buttonCOMPenablecloning (\a b -> a {_buttonCOMPenablecloning = b})
buttonCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPsubcompname = lens _buttonCOMPsubcompname (\a b -> a {_buttonCOMPsubcompname = b})
buttonCOMPalign :: Lens' COMP (Maybe (Tree Int))
buttonCOMPalign = lens _buttonCOMPalign (\a b -> a {_buttonCOMPalign = b})
buttonCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPreloadtoxonstart = lens _buttonCOMPreloadtoxonstart (\a b -> a {_buttonCOMPreloadtoxonstart = b})
buttonCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPreinitnet = lens _buttonCOMPreinitnet (\a b -> a {_buttonCOMPreinitnet = b})
buttonCOMPmarginr :: Lens' COMP (Maybe (Tree Float))
buttonCOMPmarginr = lens _buttonCOMPmarginr (\a b -> a {_buttonCOMPmarginr = b})
buttonCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPparentshortcut = lens _buttonCOMPparentshortcut (\a b -> a {_buttonCOMPparentshortcut = b})
buttonCOMPresizet :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPresizet = lens _buttonCOMPresizet (\a b -> a {_buttonCOMPresizet = b})
buttonCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPextension4 = lens _buttonCOMPextension4 (\a b -> a {_buttonCOMPextension4 = b})
buttonCOMPleftborderi :: Lens' COMP (Maybe (Tree Int))
buttonCOMPleftborderi = lens _buttonCOMPleftborderi (\a b -> a {_buttonCOMPleftborderi = b})
buttonCOMPrepocomp :: Lens' COMP (Maybe (Tree COMP))
buttonCOMPrepocomp = lens _buttonCOMPrepocomp (\a b -> a {_buttonCOMPrepocomp = b})
buttonCOMPrepositionymax :: Lens' COMP (Maybe (Tree Float))
buttonCOMPrepositionymax = lens _buttonCOMPrepositionymax (\a b -> a {_buttonCOMPrepositionymax = b})
buttonCOMPanchordrag :: Lens' COMP (Maybe (Tree Int))
buttonCOMPanchordrag = lens _buttonCOMPanchordrag (\a b -> a {_buttonCOMPanchordrag = b})
buttonCOMPbottomborderi :: Lens' COMP (Maybe (Tree Int))
buttonCOMPbottomborderi = lens _buttonCOMPbottomborderi (\a b -> a {_buttonCOMPbottomborderi = b})
buttonCOMPrightborder :: Lens' COMP (Maybe (Tree Int))
buttonCOMPrightborder = lens _buttonCOMPrightborder (\a b -> a {_buttonCOMPrightborder = b})
buttonCOMPbottomborder :: Lens' COMP (Maybe (Tree Int))
buttonCOMPbottomborder = lens _buttonCOMPbottomborder (\a b -> a {_buttonCOMPbottomborder = b})
buttonCOMPlayer :: Lens' COMP (Maybe (Tree Float))
buttonCOMPlayer = lens _buttonCOMPlayer (\a b -> a {_buttonCOMPlayer = b})
buttonCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPreinitextensions = lens _buttonCOMPreinitextensions (\a b -> a {_buttonCOMPreinitextensions = b})
buttonCOMPtopborderi :: Lens' COMP (Maybe (Tree Int))
buttonCOMPtopborderi = lens _buttonCOMPtopborderi (\a b -> a {_buttonCOMPtopborderi = b})
buttonCOMPalignallow :: Lens' COMP (Maybe (Tree Int))
buttonCOMPalignallow = lens _buttonCOMPalignallow (\a b -> a {_buttonCOMPalignallow = b})
buttonCOMPdragdropcallbacks :: Lens' COMP (Maybe (Tree DAT))
buttonCOMPdragdropcallbacks = lens _buttonCOMPdragdropcallbacks (\a b -> a {_buttonCOMPdragdropcallbacks = b})
buttonCOMPtopanchor :: Lens' COMP (Maybe (Tree Float))
buttonCOMPtopanchor = lens _buttonCOMPtopanchor (\a b -> a {_buttonCOMPtopanchor = b})
buttonCOMPrightborderi :: Lens' COMP (Maybe (Tree Int))
buttonCOMPrightborderi = lens _buttonCOMPrightborderi (\a b -> a {_buttonCOMPrightborderi = b})
buttonCOMPresizel :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPresizel = lens _buttonCOMPresizel (\a b -> a {_buttonCOMPresizel = b})
buttonCOMPvfillweight :: Lens' COMP (Maybe (Tree Float))
buttonCOMPvfillweight = lens _buttonCOMPvfillweight (\a b -> a {_buttonCOMPvfillweight = b})
buttonCOMPborderover :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPborderover = lens _buttonCOMPborderover (\a b -> a {_buttonCOMPborderover = b})
buttonCOMPnamedchop :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPnamedchop = lens _buttonCOMPnamedchop (\a b -> a {_buttonCOMPnamedchop = b})
buttonCOMPmarginb :: Lens' COMP (Maybe (Tree Float))
buttonCOMPmarginb = lens _buttonCOMPmarginb (\a b -> a {_buttonCOMPmarginb = b})
buttonCOMPrepositionxmax :: Lens' COMP (Maybe (Tree Float))
buttonCOMPrepositionxmax = lens _buttonCOMPrepositionxmax (\a b -> a {_buttonCOMPrepositionxmax = b})
buttonCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPextension2 = lens _buttonCOMPextension2 (\a b -> a {_buttonCOMPextension2 = b})
buttonCOMPalignmax :: Lens' COMP (Maybe (Tree Int))
buttonCOMPalignmax = lens _buttonCOMPalignmax (\a b -> a {_buttonCOMPalignmax = b})
buttonCOMPjustifyv :: Lens' COMP (Maybe (Tree Int))
buttonCOMPjustifyv = lens _buttonCOMPjustifyv (\a b -> a {_buttonCOMPjustifyv = b})
buttonCOMPpostoffset :: Lens' COMP (Vec2)
buttonCOMPpostoffset = lens _buttonCOMPpostoffset (\a b -> a {_buttonCOMPpostoffset = b})
buttonCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPpromoteextension3 = lens _buttonCOMPpromoteextension3 (\a b -> a {_buttonCOMPpromoteextension3 = b})
buttonCOMPtopoffset :: Lens' COMP (Maybe (Tree Float))
buttonCOMPtopoffset = lens _buttonCOMPtopoffset (\a b -> a {_buttonCOMPtopoffset = b})
buttonCOMPcomposite :: Lens' COMP (Maybe (Tree Int))
buttonCOMPcomposite = lens _buttonCOMPcomposite (\a b -> a {_buttonCOMPcomposite = b})
buttonCOMPdragscript :: Lens' COMP (Maybe (Tree DAT))
buttonCOMPdragscript = lens _buttonCOMPdragscript (\a b -> a {_buttonCOMPdragscript = b})
buttonCOMPmultrgb :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPmultrgb = lens _buttonCOMPmultrgb (\a b -> a {_buttonCOMPmultrgb = b})
buttonCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPextension1 = lens _buttonCOMPextension1 (\a b -> a {_buttonCOMPextension1 = b})
buttonCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPpromoteextension1 = lens _buttonCOMPpromoteextension1 (\a b -> a {_buttonCOMPpromoteextension1 = b})
buttonCOMPbordera :: Lens' COMP (Vec3)
buttonCOMPbordera = lens _buttonCOMPbordera (\a b -> a {_buttonCOMPbordera = b})
buttonCOMPuvbuttonsleft :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPuvbuttonsleft = lens _buttonCOMPuvbuttonsleft (\a b -> a {_buttonCOMPuvbuttonsleft = b})
buttonCOMPbgcolor :: Lens' COMP (Vec3)
buttonCOMPbgcolor = lens _buttonCOMPbgcolor (\a b -> a {_buttonCOMPbgcolor = b})
buttonCOMPresizehmax :: Lens' COMP (Maybe (Tree Float))
buttonCOMPresizehmax = lens _buttonCOMPresizehmax (\a b -> a {_buttonCOMPresizehmax = b})
buttonCOMPhelpdat :: Lens' COMP (Maybe (Tree DAT))
buttonCOMPhelpdat = lens _buttonCOMPhelpdat (\a b -> a {_buttonCOMPhelpdat = b})
buttonCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPextension3 = lens _buttonCOMPextension3 (\a b -> a {_buttonCOMPextension3 = b})
buttonCOMPdrop :: Lens' COMP (Maybe (Tree Int))
buttonCOMPdrop = lens _buttonCOMPdrop (\a b -> a {_buttonCOMPdrop = b})
buttonCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPexternaltox = lens _buttonCOMPexternaltox (\a b -> a {_buttonCOMPexternaltox = b})
buttonCOMPbuttontype :: Lens' COMP (Maybe (Tree Int))
buttonCOMPbuttontype = lens _buttonCOMPbuttontype (\a b -> a {_buttonCOMPbuttontype = b})
buttonCOMPrightanchor :: Lens' COMP (Maybe (Tree Float))
buttonCOMPrightanchor = lens _buttonCOMPrightanchor (\a b -> a {_buttonCOMPrightanchor = b})
buttonCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPextname2 = lens _buttonCOMPextname2 (\a b -> a {_buttonCOMPextname2 = b})
buttonCOMPh :: Lens' COMP (Maybe (Tree Int))
buttonCOMPh = lens _buttonCOMPh (\a b -> a {_buttonCOMPh = b})
buttonCOMPleftborder :: Lens' COMP (Maybe (Tree Int))
buttonCOMPleftborder = lens _buttonCOMPleftborder (\a b -> a {_buttonCOMPleftborder = b})
buttonCOMPtopfill :: Lens' COMP (Maybe (Tree Int))
buttonCOMPtopfill = lens _buttonCOMPtopfill (\a b -> a {_buttonCOMPtopfill = b})
buttonCOMPresizewmin :: Lens' COMP (Maybe (Tree Float))
buttonCOMPresizewmin = lens _buttonCOMPresizewmin (\a b -> a {_buttonCOMPresizewmin = b})
buttonCOMPmouserel :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPmouserel = lens _buttonCOMPmouserel (\a b -> a {_buttonCOMPmouserel = b})
buttonCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPenablecloningpulse = lens _buttonCOMPenablecloningpulse (\a b -> a {_buttonCOMPenablecloningpulse = b})
buttonCOMPoffset :: Lens' COMP (Vec2)
buttonCOMPoffset = lens _buttonCOMPoffset (\a b -> a {_buttonCOMPoffset = b})
buttonCOMPresizeb :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPresizeb = lens _buttonCOMPresizeb (\a b -> a {_buttonCOMPresizeb = b})
buttonCOMPleftoffset :: Lens' COMP (Maybe (Tree Float))
buttonCOMPleftoffset = lens _buttonCOMPleftoffset (\a b -> a {_buttonCOMPleftoffset = b})
buttonCOMPy :: Lens' COMP (Maybe (Tree Int))
buttonCOMPy = lens _buttonCOMPy (\a b -> a {_buttonCOMPy = b})
buttonCOMPpvscrollbar :: Lens' COMP (Maybe (Tree Int))
buttonCOMPpvscrollbar = lens _buttonCOMPpvscrollbar (\a b -> a {_buttonCOMPpvscrollbar = b})
buttonCOMPcrop :: Lens' COMP (Maybe (Tree Int))
buttonCOMPcrop = lens _buttonCOMPcrop (\a b -> a {_buttonCOMPcrop = b})
buttonCOMPbottomoffset :: Lens' COMP (Maybe (Tree Float))
buttonCOMPbottomoffset = lens _buttonCOMPbottomoffset (\a b -> a {_buttonCOMPbottomoffset = b})
buttonCOMPdisplay :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPdisplay = lens _buttonCOMPdisplay (\a b -> a {_buttonCOMPdisplay = b})
buttonCOMPfit :: Lens' COMP (Maybe (Tree Int))
buttonCOMPfit = lens _buttonCOMPfit (\a b -> a {_buttonCOMPfit = b})
buttonCOMPaspect :: Lens' COMP (Maybe (Tree Float))
buttonCOMPaspect = lens _buttonCOMPaspect (\a b -> a {_buttonCOMPaspect = b})
buttonCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPextname4 = lens _buttonCOMPextname4 (\a b -> a {_buttonCOMPextname4 = b})
buttonCOMPuvbuttonsright :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPuvbuttonsright = lens _buttonCOMPuvbuttonsright (\a b -> a {_buttonCOMPuvbuttonsright = b})
buttonCOMPresizewmax :: Lens' COMP (Maybe (Tree Float))
buttonCOMPresizewmax = lens _buttonCOMPresizewmax (\a b -> a {_buttonCOMPresizewmax = b})
buttonCOMPborderb :: Lens' COMP (Vec3)
buttonCOMPborderb = lens _buttonCOMPborderb (\a b -> a {_buttonCOMPborderb = b})
buttonCOMPbottomanchor :: Lens' COMP (Maybe (Tree Float))
buttonCOMPbottomanchor = lens _buttonCOMPbottomanchor (\a b -> a {_buttonCOMPbottomanchor = b})
buttonCOMPsizefromwindow :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPsizefromwindow = lens _buttonCOMPsizefromwindow (\a b -> a {_buttonCOMPsizefromwindow = b})
buttonCOMPopacity :: Lens' COMP (Maybe (Tree Float))
buttonCOMPopacity = lens _buttonCOMPopacity (\a b -> a {_buttonCOMPopacity = b})
buttonCOMPbuttongroup :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPbuttongroup = lens _buttonCOMPbuttongroup (\a b -> a {_buttonCOMPbuttongroup = b})
buttonCOMPtop :: Lens' COMP (Maybe (Tree TOP))
buttonCOMPtop = lens _buttonCOMPtop (\a b -> a {_buttonCOMPtop = b})
buttonCOMPmousewheel :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPmousewheel = lens _buttonCOMPmousewheel (\a b -> a {_buttonCOMPmousewheel = b})
buttonCOMPoverridemethod :: Lens' COMP (Maybe (Tree Int))
buttonCOMPoverridemethod = lens _buttonCOMPoverridemethod (\a b -> a {_buttonCOMPoverridemethod = b})
buttonCOMPreposition :: Lens' COMP (Maybe (Tree Int))
buttonCOMPreposition = lens _buttonCOMPreposition (\a b -> a {_buttonCOMPreposition = b})
buttonCOMPenable :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPenable = lens _buttonCOMPenable (\a b -> a {_buttonCOMPenable = b})
buttonCOMPchop :: Lens' COMP (Maybe (Tree CHOP))
buttonCOMPchop = lens _buttonCOMPchop (\a b -> a {_buttonCOMPchop = b})
buttonCOMPrightoffset :: Lens' COMP (Maybe (Tree Float))
buttonCOMPrightoffset = lens _buttonCOMPrightoffset (\a b -> a {_buttonCOMPrightoffset = b})
buttonCOMPvieweraspect :: Lens' COMP (Maybe (Tree Int))
buttonCOMPvieweraspect = lens _buttonCOMPvieweraspect (\a b -> a {_buttonCOMPvieweraspect = b})
buttonCOMPborderbalpha :: Lens' COMP (Maybe (Tree Float))
buttonCOMPborderbalpha = lens _buttonCOMPborderbalpha (\a b -> a {_buttonCOMPborderbalpha = b})
buttonCOMPscrolloverlay :: Lens' COMP (Maybe (Tree Int))
buttonCOMPscrolloverlay = lens _buttonCOMPscrolloverlay (\a b -> a {_buttonCOMPscrolloverlay = b})
buttonCOMPclone :: Lens' COMP (Maybe (Tree COMP))
buttonCOMPclone = lens _buttonCOMPclone (\a b -> a {_buttonCOMPclone = b})
buttonCOMPkeepmemory :: Lens' COMP (Maybe (Tree Bool))
buttonCOMPkeepmemory = lens _buttonCOMPkeepmemory (\a b -> a {_buttonCOMPkeepmemory = b})
buttonCOMPdropscript :: Lens' COMP (Maybe (Tree DAT))
buttonCOMPdropscript = lens _buttonCOMPdropscript (\a b -> a {_buttonCOMPdropscript = b})
buttonCOMPhfillweight :: Lens' COMP (Maybe (Tree Float))
buttonCOMPhfillweight = lens _buttonCOMPhfillweight (\a b -> a {_buttonCOMPhfillweight = b})
buttonCOMPhorigin :: Lens' COMP (Maybe (Tree Float))
buttonCOMPhorigin = lens _buttonCOMPhorigin (\a b -> a {_buttonCOMPhorigin = b})
buttonCOMPspacing :: Lens' COMP (Maybe (Tree Float))
buttonCOMPspacing = lens _buttonCOMPspacing (\a b -> a {_buttonCOMPspacing = b})
buttonCOMPscale :: Lens' COMP (Vec2)
buttonCOMPscale = lens _buttonCOMPscale (\a b -> a {_buttonCOMPscale = b})
buttonCOMPphscrollbar :: Lens' COMP (Maybe (Tree Int))
buttonCOMPphscrollbar = lens _buttonCOMPphscrollbar (\a b -> a {_buttonCOMPphscrollbar = b})
buttonCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
buttonCOMPopshortcut = lens _buttonCOMPopshortcut (\a b -> a {_buttonCOMPopshortcut = b})
buttonCOMPcursor :: Lens' COMP (Maybe (Tree Int))
buttonCOMPcursor = lens _buttonCOMPcursor (\a b -> a {_buttonCOMPcursor = b})

blendCOMPinstancea :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancea = lens _blendCOMPinstancea (\a b -> a {_blendCOMPinstancea = b})
blendCOMPparenttype :: Lens' COMP (Maybe (Tree Int))
blendCOMPparenttype = lens _blendCOMPparenttype (\a b -> a {_blendCOMPparenttype = b})
blendCOMPinstancerotupy :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancerotupy = lens _blendCOMPinstancerotupy (\a b -> a {_blendCOMPinstancerotupy = b})
blendCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPextname1 = lens _blendCOMPextname1 (\a b -> a {_blendCOMPextname1 = b})
blendCOMPinstancerottoz :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancerottoz = lens _blendCOMPinstancerottoz (\a b -> a {_blendCOMPinstancerottoz = b})
blendCOMPinstancesz :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancesz = lens _blendCOMPinstancesz (\a b -> a {_blendCOMPinstancesz = b})
blendCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
blendCOMPpromoteextension4 = lens _blendCOMPpromoteextension4 (\a b -> a {_blendCOMPpromoteextension4 = b})
blendCOMPinstanceb :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstanceb = lens _blendCOMPinstanceb (\a b -> a {_blendCOMPinstanceb = b})
blendCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPextension4 = lens _blendCOMPextension4 (\a b -> a {_blendCOMPextension4 = b})
blendCOMPpathorient :: Lens' COMP (Maybe (Tree Bool))
blendCOMPpathorient = lens _blendCOMPpathorient (\a b -> a {_blendCOMPpathorient = b})
blendCOMProll :: Lens' COMP (Maybe (Tree Float))
blendCOMProll = lens _blendCOMProll (\a b -> a {_blendCOMProll = b})
blendCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
blendCOMPnodeview = lens _blendCOMPnodeview (\a b -> a {_blendCOMPnodeview = b})
blendCOMPinstancepx :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancepx = lens _blendCOMPinstancepx (\a b -> a {_blendCOMPinstancepx = b})
blendCOMPpt :: Lens' COMP (Vec3)
blendCOMPpt = lens _blendCOMPpt (\a b -> a {_blendCOMPpt = b})
blendCOMPinstancetexanisotropy :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstancetexanisotropy = lens _blendCOMPinstancetexanisotropy (\a b -> a {_blendCOMPinstancetexanisotropy = b})
blendCOMPblendm3 :: Lens' COMP (Maybe (Tree Int))
blendCOMPblendm3 = lens _blendCOMPblendm3 (\a b -> a {_blendCOMPblendm3 = b})
blendCOMPprioritymethod :: Lens' COMP (Maybe (Tree Int))
blendCOMPprioritymethod = lens _blendCOMPprioritymethod (\a b -> a {_blendCOMPprioritymethod = b})
blendCOMPblendw3 :: Lens' COMP (Maybe (Tree Float))
blendCOMPblendw3 = lens _blendCOMPblendw3 (\a b -> a {_blendCOMPblendw3 = b})
blendCOMPinstancefirstrow :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstancefirstrow = lens _blendCOMPinstancefirstrow (\a b -> a {_blendCOMPinstancefirstrow = b})
blendCOMPbank :: Lens' COMP (Maybe (Tree Float))
blendCOMPbank = lens _blendCOMPbank (\a b -> a {_blendCOMPbank = b})
blendCOMPinstancety :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancety = lens _blendCOMPinstancety (\a b -> a {_blendCOMPinstancety = b})
blendCOMPinstxord :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstxord = lens _blendCOMPinstxord (\a b -> a {_blendCOMPinstxord = b})
blendCOMPp :: Lens' COMP (Vec3)
blendCOMPp = lens _blendCOMPp (\a b -> a {_blendCOMPp = b})
blendCOMPshortrot :: Lens' COMP (Maybe (Tree Bool))
blendCOMPshortrot = lens _blendCOMPshortrot (\a b -> a {_blendCOMPshortrot = b})
blendCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
blendCOMPsavebackup = lens _blendCOMPsavebackup (\a b -> a {_blendCOMPsavebackup = b})
blendCOMPinstancerottox :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancerottox = lens _blendCOMPinstancerottox (\a b -> a {_blendCOMPinstancerottox = b})
blendCOMPaxesorient :: Lens' COMP (Maybe (Tree Bool))
blendCOMPaxesorient = lens _blendCOMPaxesorient (\a b -> a {_blendCOMPaxesorient = b})
blendCOMPpos :: Lens' COMP (Maybe (Tree Float))
blendCOMPpos = lens _blendCOMPpos (\a b -> a {_blendCOMPpos = b})
blendCOMPpathsop :: Lens' COMP (Maybe (Tree SOP))
blendCOMPpathsop = lens _blendCOMPpathsop (\a b -> a {_blendCOMPpathsop = b})
blendCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPsubcompname = lens _blendCOMPsubcompname (\a b -> a {_blendCOMPsubcompname = b})
blendCOMPpickpriority :: Lens' COMP (Maybe (Tree Float))
blendCOMPpickpriority = lens _blendCOMPpickpriority (\a b -> a {_blendCOMPpickpriority = b})
blendCOMPinstancetexfilter :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstancetexfilter = lens _blendCOMPinstancetexfilter (\a b -> a {_blendCOMPinstancetexfilter = b})
blendCOMPpr :: Lens' COMP (Vec3)
blendCOMPpr = lens _blendCOMPpr (\a b -> a {_blendCOMPpr = b})
blendCOMPinstanceg :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstanceg = lens _blendCOMPinstanceg (\a b -> a {_blendCOMPinstanceg = b})
blendCOMPinstancetexmode :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstancetexmode = lens _blendCOMPinstancetexmode (\a b -> a {_blendCOMPinstancetexmode = b})
blendCOMPwcolor :: Lens' COMP (Vec3)
blendCOMPwcolor = lens _blendCOMPwcolor (\a b -> a {_blendCOMPwcolor = b})
blendCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
blendCOMPenablecloningpulse = lens _blendCOMPenablecloningpulse (\a b -> a {_blendCOMPenablecloningpulse = b})
blendCOMPinstancew :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancew = lens _blendCOMPinstancew (\a b -> a {_blendCOMPinstancew = b})
blendCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
blendCOMPreloadtoxonstart = lens _blendCOMPreloadtoxonstart (\a b -> a {_blendCOMPreloadtoxonstart = b})
blendCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
blendCOMPreinitnet = lens _blendCOMPreinitnet (\a b -> a {_blendCOMPreinitnet = b})
blendCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPexternaltox = lens _blendCOMPexternaltox (\a b -> a {_blendCOMPexternaltox = b})
blendCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
blendCOMPreinitextensions = lens _blendCOMPreinitextensions (\a b -> a {_blendCOMPreinitextensions = b})
blendCOMPpreset :: Lens' COMP (Maybe (Tree Bool))
blendCOMPpreset = lens _blendCOMPpreset (\a b -> a {_blendCOMPpreset = b})
blendCOMPnuminstances :: Lens' COMP (Maybe (Tree Int))
blendCOMPnuminstances = lens _blendCOMPnuminstances (\a b -> a {_blendCOMPnuminstances = b})
blendCOMPup :: Lens' COMP (Vec3)
blendCOMPup = lens _blendCOMPup (\a b -> a {_blendCOMPup = b})
blendCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
blendCOMPpromoteextension1 = lens _blendCOMPpromoteextension1 (\a b -> a {_blendCOMPpromoteextension1 = b})
blendCOMPinstrord :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstrord = lens _blendCOMPinstrord (\a b -> a {_blendCOMPinstrord = b})
blendCOMPpxord :: Lens' COMP (Maybe (Tree Int))
blendCOMPpxord = lens _blendCOMPpxord (\a b -> a {_blendCOMPpxord = b})
blendCOMPinstancetexindex :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancetexindex = lens _blendCOMPinstancetexindex (\a b -> a {_blendCOMPinstancetexindex = b})
blendCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPextname3 = lens _blendCOMPextname3 (\a b -> a {_blendCOMPextname3 = b})
blendCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPparentshortcut = lens _blendCOMPparentshortcut (\a b -> a {_blendCOMPparentshortcut = b})
blendCOMPinstancesx :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancesx = lens _blendCOMPinstancesx (\a b -> a {_blendCOMPinstancesx = b})
blendCOMPinstancing :: Lens' COMP (Maybe (Tree Bool))
blendCOMPinstancing = lens _blendCOMPinstancing (\a b -> a {_blendCOMPinstancing = b})
blendCOMPinstancepy :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancepy = lens _blendCOMPinstancepy (\a b -> a {_blendCOMPinstancepy = b})
blendCOMPprord :: Lens' COMP (Maybe (Tree Int))
blendCOMPprord = lens _blendCOMPprord (\a b -> a {_blendCOMPprord = b})
blendCOMPblendm1 :: Lens' COMP (Maybe (Tree Int))
blendCOMPblendm1 = lens _blendCOMPblendm1 (\a b -> a {_blendCOMPblendm1 = b})
blendCOMPinstancerz :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancerz = lens _blendCOMPinstancerz (\a b -> a {_blendCOMPinstancerz = b})
blendCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPextension2 = lens _blendCOMPextension2 (\a b -> a {_blendCOMPextension2 = b})
blendCOMPps :: Lens' COMP (Vec3)
blendCOMPps = lens _blendCOMPps (\a b -> a {_blendCOMPps = b})
blendCOMPreset :: Lens' COMP (Maybe (Tree Float))
blendCOMPreset = lens _blendCOMPreset (\a b -> a {_blendCOMPreset = b})
blendCOMPinstanceu :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstanceu = lens _blendCOMPinstanceu (\a b -> a {_blendCOMPinstanceu = b})
blendCOMPblendw2 :: Lens' COMP (Maybe (Tree Float))
blendCOMPblendw2 = lens _blendCOMPblendw2 (\a b -> a {_blendCOMPblendw2 = b})
blendCOMPrender :: Lens' COMP (Maybe (Tree Bool))
blendCOMPrender = lens _blendCOMPrender (\a b -> a {_blendCOMPrender = b})
blendCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPextension1 = lens _blendCOMPextension1 (\a b -> a {_blendCOMPextension1 = b})
blendCOMPinstancetexextendv :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstancetexextendv = lens _blendCOMPinstancetexextendv (\a b -> a {_blendCOMPinstancetexextendv = b})
blendCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPextension3 = lens _blendCOMPextension3 (\a b -> a {_blendCOMPextension3 = b})
blendCOMPpxform :: Lens' COMP (Maybe (Tree Bool))
blendCOMPpxform = lens _blendCOMPpxform (\a b -> a {_blendCOMPpxform = b})
blendCOMPmaterial :: Lens' COMP (Maybe (Tree MAT))
blendCOMPmaterial = lens _blendCOMPmaterial (\a b -> a {_blendCOMPmaterial = b})
blendCOMPinstancer :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancer = lens _blendCOMPinstancer (\a b -> a {_blendCOMPinstancer = b})
blendCOMPr :: Lens' COMP (Vec3)
blendCOMPr = lens _blendCOMPr (\a b -> a {_blendCOMPr = b})
blendCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
blendCOMPenablecloning = lens _blendCOMPenablecloning (\a b -> a {_blendCOMPenablecloning = b})
blendCOMPinstancecolormode :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstancecolormode = lens _blendCOMPinstancecolormode (\a b -> a {_blendCOMPinstancecolormode = b})
blendCOMPblendm4 :: Lens' COMP (Maybe (Tree Int))
blendCOMPblendm4 = lens _blendCOMPblendm4 (\a b -> a {_blendCOMPblendm4 = b})
blendCOMPblendm2 :: Lens' COMP (Maybe (Tree Int))
blendCOMPblendm2 = lens _blendCOMPblendm2 (\a b -> a {_blendCOMPblendm2 = b})
blendCOMPinstancerx :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancerx = lens _blendCOMPinstancerx (\a b -> a {_blendCOMPinstancerx = b})
blendCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPextname2 = lens _blendCOMPextname2 (\a b -> a {_blendCOMPextname2 = b})
blendCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPopshortcut = lens _blendCOMPopshortcut (\a b -> a {_blendCOMPopshortcut = b})
blendCOMPinstancetx :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancetx = lens _blendCOMPinstancetx (\a b -> a {_blendCOMPinstancetx = b})
blendCOMPpcommit :: Lens' COMP (Maybe (Tree Bool))
blendCOMPpcommit = lens _blendCOMPpcommit (\a b -> a {_blendCOMPpcommit = b})
blendCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
blendCOMPpromoteextension2 = lens _blendCOMPpromoteextension2 (\a b -> a {_blendCOMPpromoteextension2 = b})
blendCOMPblendw4 :: Lens' COMP (Maybe (Tree Float))
blendCOMPblendw4 = lens _blendCOMPblendw4 (\a b -> a {_blendCOMPblendw4 = b})
blendCOMPinstanceorder :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstanceorder = lens _blendCOMPinstanceorder (\a b -> a {_blendCOMPinstanceorder = b})
blendCOMPsequence :: Lens' COMP (Maybe (Tree Float))
blendCOMPsequence = lens _blendCOMPsequence (\a b -> a {_blendCOMPsequence = b})
blendCOMPinstancetexextendu :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstancetexextendu = lens _blendCOMPinstancetexextendu (\a b -> a {_blendCOMPinstancetexextendu = b})
blendCOMPinstancemode :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstancemode = lens _blendCOMPinstancemode (\a b -> a {_blendCOMPinstancemode = b})
blendCOMPinstancerottoorder :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstancerottoorder = lens _blendCOMPinstancerottoorder (\a b -> a {_blendCOMPinstancerottoorder = b})
blendCOMPinstancepz :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancepz = lens _blendCOMPinstancepz (\a b -> a {_blendCOMPinstancepz = b})
blendCOMPinstancetexs :: Lens' COMP (Maybe (Tree TOP))
blendCOMPinstancetexs = lens _blendCOMPinstancetexs (\a b -> a {_blendCOMPinstancetexs = b})
blendCOMPlookup :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPlookup = lens _blendCOMPlookup (\a b -> a {_blendCOMPlookup = b})
blendCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
blendCOMPpromoteextension3 = lens _blendCOMPpromoteextension3 (\a b -> a {_blendCOMPpromoteextension3 = b})
blendCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPextname4 = lens _blendCOMPextname4 (\a b -> a {_blendCOMPextname4 = b})
blendCOMPblendw1 :: Lens' COMP (Maybe (Tree Float))
blendCOMPblendw1 = lens _blendCOMPblendw1 (\a b -> a {_blendCOMPblendw1 = b})
blendCOMPinstancerotupz :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancerotupz = lens _blendCOMPinstancerotupz (\a b -> a {_blendCOMPinstancerotupz = b})
blendCOMPrord :: Lens' COMP (Maybe (Tree Int))
blendCOMPrord = lens _blendCOMPrord (\a b -> a {_blendCOMPrord = b})
blendCOMPpp :: Lens' COMP (Vec3)
blendCOMPpp = lens _blendCOMPpp (\a b -> a {_blendCOMPpp = b})
blendCOMPinstancesy :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancesy = lens _blendCOMPinstancesy (\a b -> a {_blendCOMPinstancesy = b})
blendCOMPxord :: Lens' COMP (Maybe (Tree Int))
blendCOMPxord = lens _blendCOMPxord (\a b -> a {_blendCOMPxord = b})
blendCOMPinstancery :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancery = lens _blendCOMPinstancery (\a b -> a {_blendCOMPinstancery = b})
blendCOMPt :: Lens' COMP (Vec3)
blendCOMPt = lens _blendCOMPt (\a b -> a {_blendCOMPt = b})
blendCOMPnoffset :: Lens' COMP (Maybe (Tree Float))
blendCOMPnoffset = lens _blendCOMPnoffset (\a b -> a {_blendCOMPnoffset = b})
blendCOMPs :: Lens' COMP (Vec3)
blendCOMPs = lens _blendCOMPs (\a b -> a {_blendCOMPs = b})
blendCOMPclone :: Lens' COMP (Maybe (Tree COMP))
blendCOMPclone = lens _blendCOMPclone (\a b -> a {_blendCOMPclone = b})
blendCOMPdrawpriority :: Lens' COMP (Maybe (Tree Float))
blendCOMPdrawpriority = lens _blendCOMPdrawpriority (\a b -> a {_blendCOMPdrawpriority = b})
blendCOMPinstancetexextendw :: Lens' COMP (Maybe (Tree Int))
blendCOMPinstancetexextendw = lens _blendCOMPinstancetexextendw (\a b -> a {_blendCOMPinstancetexextendw = b})
blendCOMPinstancerotupx :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancerotupx = lens _blendCOMPinstancerotupx (\a b -> a {_blendCOMPinstancerotupx = b})
blendCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
blendCOMPloadondemand = lens _blendCOMPloadondemand (\a b -> a {_blendCOMPloadondemand = b})
blendCOMPinstancerottoy :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancerottoy = lens _blendCOMPinstancerottoy (\a b -> a {_blendCOMPinstancerottoy = b})
blendCOMPinstancev :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancev = lens _blendCOMPinstancev (\a b -> a {_blendCOMPinstancev = b})
blendCOMPinstancetz :: Lens' COMP (Maybe (Tree ByteString))
blendCOMPinstancetz = lens _blendCOMPinstancetz (\a b -> a {_blendCOMPinstancetz = b})

camerablendCOMPprojection :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPprojection = lens _camerablendCOMPprojection (\a b -> a {_camerablendCOMPprojection = b})
camerablendCOMPviewanglemethod :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPviewanglemethod = lens _camerablendCOMPviewanglemethod (\a b -> a {_camerablendCOMPviewanglemethod = b})
camerablendCOMPparenttype :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPparenttype = lens _camerablendCOMPparenttype (\a b -> a {_camerablendCOMPparenttype = b})
camerablendCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPextname1 = lens _camerablendCOMPextname1 (\a b -> a {_camerablendCOMPextname1 = b})
camerablendCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPpromoteextension4 = lens _camerablendCOMPpromoteextension4 (\a b -> a {_camerablendCOMPpromoteextension4 = b})
camerablendCOMPfognear :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPfognear = lens _camerablendCOMPfognear (\a b -> a {_camerablendCOMPfognear = b})
camerablendCOMPpathorient :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPpathorient = lens _camerablendCOMPpathorient (\a b -> a {_camerablendCOMPpathorient = b})
camerablendCOMProll :: Lens' COMP (Maybe (Tree Float))
camerablendCOMProll = lens _camerablendCOMProll (\a b -> a {_camerablendCOMProll = b})
camerablendCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPnodeview = lens _camerablendCOMPnodeview (\a b -> a {_camerablendCOMPnodeview = b})
camerablendCOMPpt :: Lens' COMP (Vec3)
camerablendCOMPpt = lens _camerablendCOMPpt (\a b -> a {_camerablendCOMPpt = b})
camerablendCOMPblendm3 :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPblendm3 = lens _camerablendCOMPblendm3 (\a b -> a {_camerablendCOMPblendm3 = b})
camerablendCOMPprioritymethod :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPprioritymethod = lens _camerablendCOMPprioritymethod (\a b -> a {_camerablendCOMPprioritymethod = b})
camerablendCOMPblendw3 :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPblendw3 = lens _camerablendCOMPblendw3 (\a b -> a {_camerablendCOMPblendw3 = b})
camerablendCOMPblendm4 :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPblendm4 = lens _camerablendCOMPblendm4 (\a b -> a {_camerablendCOMPblendm4 = b})
camerablendCOMPbank :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPbank = lens _camerablendCOMPbank (\a b -> a {_camerablendCOMPbank = b})
camerablendCOMPfov :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPfov = lens _camerablendCOMPfov (\a b -> a {_camerablendCOMPfov = b})
camerablendCOMPp :: Lens' COMP (Vec3)
camerablendCOMPp = lens _camerablendCOMPp (\a b -> a {_camerablendCOMPp = b})
camerablendCOMPshortrot :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPshortrot = lens _camerablendCOMPshortrot (\a b -> a {_camerablendCOMPshortrot = b})
camerablendCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPsavebackup = lens _camerablendCOMPsavebackup (\a b -> a {_camerablendCOMPsavebackup = b})
camerablendCOMPprojectionblend :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPprojectionblend = lens _camerablendCOMPprojectionblend (\a b -> a {_camerablendCOMPprojectionblend = b})
camerablendCOMPaxesorient :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPaxesorient = lens _camerablendCOMPaxesorient (\a b -> a {_camerablendCOMPaxesorient = b})
camerablendCOMPpos :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPpos = lens _camerablendCOMPpos (\a b -> a {_camerablendCOMPpos = b})
camerablendCOMPpathsop :: Lens' COMP (Maybe (Tree SOP))
camerablendCOMPpathsop = lens _camerablendCOMPpathsop (\a b -> a {_camerablendCOMPpathsop = b})
camerablendCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPloadondemand = lens _camerablendCOMPloadondemand (\a b -> a {_camerablendCOMPloadondemand = b})
camerablendCOMPpickpriority :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPpickpriority = lens _camerablendCOMPpickpriority (\a b -> a {_camerablendCOMPpickpriority = b})
camerablendCOMPfogalpha :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPfogalpha = lens _camerablendCOMPfogalpha (\a b -> a {_camerablendCOMPfogalpha = b})
camerablendCOMPpr :: Lens' COMP (Vec3)
camerablendCOMPpr = lens _camerablendCOMPpr (\a b -> a {_camerablendCOMPpr = b})
camerablendCOMPwcolor :: Lens' COMP (Vec3)
camerablendCOMPwcolor = lens _camerablendCOMPwcolor (\a b -> a {_camerablendCOMPwcolor = b})
camerablendCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPenablecloningpulse = lens _camerablendCOMPenablecloningpulse (\a b -> a {_camerablendCOMPenablecloningpulse = b})
camerablendCOMPfocal :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPfocal = lens _camerablendCOMPfocal (\a b -> a {_camerablendCOMPfocal = b})
camerablendCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPreinitnet = lens _camerablendCOMPreinitnet (\a b -> a {_camerablendCOMPreinitnet = b})
camerablendCOMPfar :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPfar = lens _camerablendCOMPfar (\a b -> a {_camerablendCOMPfar = b})
camerablendCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPexternaltox = lens _camerablendCOMPexternaltox (\a b -> a {_camerablendCOMPexternaltox = b})
camerablendCOMPps :: Lens' COMP (Vec3)
camerablendCOMPps = lens _camerablendCOMPps (\a b -> a {_camerablendCOMPps = b})
camerablendCOMPpreset :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPpreset = lens _camerablendCOMPpreset (\a b -> a {_camerablendCOMPpreset = b})
camerablendCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPextension4 = lens _camerablendCOMPextension4 (\a b -> a {_camerablendCOMPextension4 = b})
camerablendCOMPfogdensity :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPfogdensity = lens _camerablendCOMPfogdensity (\a b -> a {_camerablendCOMPfogdensity = b})
camerablendCOMPaperture :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPaperture = lens _camerablendCOMPaperture (\a b -> a {_camerablendCOMPaperture = b})
camerablendCOMPup :: Lens' COMP (Vec3)
camerablendCOMPup = lens _camerablendCOMPup (\a b -> a {_camerablendCOMPup = b})
camerablendCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPpromoteextension1 = lens _camerablendCOMPpromoteextension1 (\a b -> a {_camerablendCOMPpromoteextension1 = b})
camerablendCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPsubcompname = lens _camerablendCOMPsubcompname (\a b -> a {_camerablendCOMPsubcompname = b})
camerablendCOMPpxord :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPpxord = lens _camerablendCOMPpxord (\a b -> a {_camerablendCOMPpxord = b})
camerablendCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPextname3 = lens _camerablendCOMPextname3 (\a b -> a {_camerablendCOMPextname3 = b})
camerablendCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPreinitextensions = lens _camerablendCOMPreinitextensions (\a b -> a {_camerablendCOMPreinitextensions = b})
camerablendCOMPprord :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPprord = lens _camerablendCOMPprord (\a b -> a {_camerablendCOMPprord = b})
camerablendCOMPblendm1 :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPblendm1 = lens _camerablendCOMPblendm1 (\a b -> a {_camerablendCOMPblendm1 = b})
camerablendCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPextension2 = lens _camerablendCOMPextension2 (\a b -> a {_camerablendCOMPextension2 = b})
camerablendCOMPfogcolor :: Lens' COMP (Vec3)
camerablendCOMPfogcolor = lens _camerablendCOMPfogcolor (\a b -> a {_camerablendCOMPfogcolor = b})
camerablendCOMPdrawpriority :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPdrawpriority = lens _camerablendCOMPdrawpriority (\a b -> a {_camerablendCOMPdrawpriority = b})
camerablendCOMPreset :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPreset = lens _camerablendCOMPreset (\a b -> a {_camerablendCOMPreset = b})
camerablendCOMPwin :: Lens' COMP (Vec2)
camerablendCOMPwin = lens _camerablendCOMPwin (\a b -> a {_camerablendCOMPwin = b})
camerablendCOMPblendw2 :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPblendw2 = lens _camerablendCOMPblendw2 (\a b -> a {_camerablendCOMPblendw2 = b})
camerablendCOMPrender :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPrender = lens _camerablendCOMPrender (\a b -> a {_camerablendCOMPrender = b})
camerablendCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPextension1 = lens _camerablendCOMPextension1 (\a b -> a {_camerablendCOMPextension1 = b})
camerablendCOMPcustomproj :: Lens' COMP (Maybe (Tree DAT))
camerablendCOMPcustomproj = lens _camerablendCOMPcustomproj (\a b -> a {_camerablendCOMPcustomproj = b})
camerablendCOMPfog :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPfog = lens _camerablendCOMPfog (\a b -> a {_camerablendCOMPfog = b})
camerablendCOMPfogfar :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPfogfar = lens _camerablendCOMPfogfar (\a b -> a {_camerablendCOMPfogfar = b})
camerablendCOMPbgcolor :: Lens' COMP (Vec4)
camerablendCOMPbgcolor = lens _camerablendCOMPbgcolor (\a b -> a {_camerablendCOMPbgcolor = b})
camerablendCOMPpxform :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPpxform = lens _camerablendCOMPpxform (\a b -> a {_camerablendCOMPpxform = b})
camerablendCOMPmaterial :: Lens' COMP (Maybe (Tree MAT))
camerablendCOMPmaterial = lens _camerablendCOMPmaterial (\a b -> a {_camerablendCOMPmaterial = b})
camerablendCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPextension3 = lens _camerablendCOMPextension3 (\a b -> a {_camerablendCOMPextension3 = b})
camerablendCOMPr :: Lens' COMP (Vec3)
camerablendCOMPr = lens _camerablendCOMPr (\a b -> a {_camerablendCOMPr = b})
camerablendCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPenablecloning = lens _camerablendCOMPenablecloning (\a b -> a {_camerablendCOMPenablecloning = b})
camerablendCOMPpp :: Lens' COMP (Vec3)
camerablendCOMPpp = lens _camerablendCOMPpp (\a b -> a {_camerablendCOMPpp = b})
camerablendCOMPblendm2 :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPblendm2 = lens _camerablendCOMPblendm2 (\a b -> a {_camerablendCOMPblendm2 = b})
camerablendCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPextname2 = lens _camerablendCOMPextname2 (\a b -> a {_camerablendCOMPextname2 = b})
camerablendCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPopshortcut = lens _camerablendCOMPopshortcut (\a b -> a {_camerablendCOMPopshortcut = b})
camerablendCOMPpcommit :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPpcommit = lens _camerablendCOMPpcommit (\a b -> a {_camerablendCOMPpcommit = b})
camerablendCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPpromoteextension2 = lens _camerablendCOMPpromoteextension2 (\a b -> a {_camerablendCOMPpromoteextension2 = b})
camerablendCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPreloadtoxonstart = lens _camerablendCOMPreloadtoxonstart (\a b -> a {_camerablendCOMPreloadtoxonstart = b})
camerablendCOMPblendw4 :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPblendw4 = lens _camerablendCOMPblendw4 (\a b -> a {_camerablendCOMPblendw4 = b})
camerablendCOMPsequence :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPsequence = lens _camerablendCOMPsequence (\a b -> a {_camerablendCOMPsequence = b})
camerablendCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPparentshortcut = lens _camerablendCOMPparentshortcut (\a b -> a {_camerablendCOMPparentshortcut = b})
camerablendCOMPlookup :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPlookup = lens _camerablendCOMPlookup (\a b -> a {_camerablendCOMPlookup = b})
camerablendCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
camerablendCOMPpromoteextension3 = lens _camerablendCOMPpromoteextension3 (\a b -> a {_camerablendCOMPpromoteextension3 = b})
camerablendCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
camerablendCOMPextname4 = lens _camerablendCOMPextname4 (\a b -> a {_camerablendCOMPextname4 = b})
camerablendCOMPblendw1 :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPblendw1 = lens _camerablendCOMPblendw1 (\a b -> a {_camerablendCOMPblendw1 = b})
camerablendCOMPfogmap :: Lens' COMP (Maybe (Tree TOP))
camerablendCOMPfogmap = lens _camerablendCOMPfogmap (\a b -> a {_camerablendCOMPfogmap = b})
camerablendCOMPxord :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPxord = lens _camerablendCOMPxord (\a b -> a {_camerablendCOMPxord = b})
camerablendCOMPnear :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPnear = lens _camerablendCOMPnear (\a b -> a {_camerablendCOMPnear = b})
camerablendCOMPt :: Lens' COMP (Vec3)
camerablendCOMPt = lens _camerablendCOMPt (\a b -> a {_camerablendCOMPt = b})
camerablendCOMPnoffset :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPnoffset = lens _camerablendCOMPnoffset (\a b -> a {_camerablendCOMPnoffset = b})
camerablendCOMPs :: Lens' COMP (Vec3)
camerablendCOMPs = lens _camerablendCOMPs (\a b -> a {_camerablendCOMPs = b})
camerablendCOMPclone :: Lens' COMP (Maybe (Tree COMP))
camerablendCOMPclone = lens _camerablendCOMPclone (\a b -> a {_camerablendCOMPclone = b})
camerablendCOMPrord :: Lens' COMP (Maybe (Tree Int))
camerablendCOMPrord = lens _camerablendCOMPrord (\a b -> a {_camerablendCOMPrord = b})
camerablendCOMPorthowidth :: Lens' COMP (Maybe (Tree Float))
camerablendCOMPorthowidth = lens _camerablendCOMPorthowidth (\a b -> a {_camerablendCOMPorthowidth = b})

boneCOMPinstancea :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancea = lens _boneCOMPinstancea (\a b -> a {_boneCOMPinstancea = b})
boneCOMPendxrange :: Lens' COMP (Maybe (Tree Float))
boneCOMPendxrange = lens _boneCOMPendxrange (\a b -> a {_boneCOMPendxrange = b})
boneCOMPinstancerotupy :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancerotupy = lens _boneCOMPinstancerotupy (\a b -> a {_boneCOMPinstancerotupy = b})
boneCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPextname1 = lens _boneCOMPextname1 (\a b -> a {_boneCOMPextname1 = b})
boneCOMPinstancerottoz :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancerottoz = lens _boneCOMPinstancerottoz (\a b -> a {_boneCOMPinstancerottoz = b})
boneCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
boneCOMPloadondemand = lens _boneCOMPloadondemand (\a b -> a {_boneCOMPloadondemand = b})
boneCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
boneCOMPpromoteextension4 = lens _boneCOMPpromoteextension4 (\a b -> a {_boneCOMPpromoteextension4 = b})
boneCOMPikdamp :: Lens' COMP (Maybe (Tree Float))
boneCOMPikdamp = lens _boneCOMPikdamp (\a b -> a {_boneCOMPikdamp = b})
boneCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPextension4 = lens _boneCOMPextension4 (\a b -> a {_boneCOMPextension4 = b})
boneCOMPpathorient :: Lens' COMP (Maybe (Tree Bool))
boneCOMPpathorient = lens _boneCOMPpathorient (\a b -> a {_boneCOMPpathorient = b})
boneCOMProll :: Lens' COMP (Maybe (Tree Float))
boneCOMProll = lens _boneCOMProll (\a b -> a {_boneCOMProll = b})
boneCOMPcrbotheight :: Lens' COMP (Maybe (Tree Float))
boneCOMPcrbotheight = lens _boneCOMPcrbotheight (\a b -> a {_boneCOMPcrbotheight = b})
boneCOMPinstancepx :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancepx = lens _boneCOMPinstancepx (\a b -> a {_boneCOMPinstancepx = b})
boneCOMPpt :: Lens' COMP (Vec3)
boneCOMPpt = lens _boneCOMPpt (\a b -> a {_boneCOMPpt = b})
boneCOMPinstancetexanisotropy :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstancetexanisotropy = lens _boneCOMPinstancetexanisotropy (\a b -> a {_boneCOMPinstancetexanisotropy = b})
boneCOMPinstancetexfilter :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstancetexfilter = lens _boneCOMPinstancetexfilter (\a b -> a {_boneCOMPinstancetexfilter = b})
boneCOMPprioritymethod :: Lens' COMP (Maybe (Tree Int))
boneCOMPprioritymethod = lens _boneCOMPprioritymethod (\a b -> a {_boneCOMPprioritymethod = b})
boneCOMPinstancefirstrow :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstancefirstrow = lens _boneCOMPinstancefirstrow (\a b -> a {_boneCOMPinstancefirstrow = b})
boneCOMPbank :: Lens' COMP (Maybe (Tree Float))
boneCOMPbank = lens _boneCOMPbank (\a b -> a {_boneCOMPbank = b})
boneCOMPinstancety :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancety = lens _boneCOMPinstancety (\a b -> a {_boneCOMPinstancety = b})
boneCOMPinstxord :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstxord = lens _boneCOMPinstxord (\a b -> a {_boneCOMPinstxord = b})
boneCOMPp :: Lens' COMP (Vec3)
boneCOMPp = lens _boneCOMPp (\a b -> a {_boneCOMPp = b})
boneCOMPcrtopcap :: Lens' COMP (Vec3)
boneCOMPcrtopcap = lens _boneCOMPcrtopcap (\a b -> a {_boneCOMPcrtopcap = b})
boneCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
boneCOMPsavebackup = lens _boneCOMPsavebackup (\a b -> a {_boneCOMPsavebackup = b})
boneCOMPinstancev :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancev = lens _boneCOMPinstancev (\a b -> a {_boneCOMPinstancev = b})
boneCOMPinstancerottox :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancerottox = lens _boneCOMPinstancerottox (\a b -> a {_boneCOMPinstancerottox = b})
boneCOMPpos :: Lens' COMP (Maybe (Tree Float))
boneCOMPpos = lens _boneCOMPpos (\a b -> a {_boneCOMPpos = b})
boneCOMPendyrange :: Lens' COMP (Maybe (Tree Float))
boneCOMPendyrange = lens _boneCOMPendyrange (\a b -> a {_boneCOMPendyrange = b})
boneCOMPpathsop :: Lens' COMP (Maybe (Tree SOP))
boneCOMPpathsop = lens _boneCOMPpathsop (\a b -> a {_boneCOMPpathsop = b})
boneCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPsubcompname = lens _boneCOMPsubcompname (\a b -> a {_boneCOMPsubcompname = b})
boneCOMPpickpriority :: Lens' COMP (Maybe (Tree Float))
boneCOMPpickpriority = lens _boneCOMPpickpriority (\a b -> a {_boneCOMPpickpriority = b})
boneCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPextension1 = lens _boneCOMPextension1 (\a b -> a {_boneCOMPextension1 = b})
boneCOMPinstanceorder :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstanceorder = lens _boneCOMPinstanceorder (\a b -> a {_boneCOMPinstanceorder = b})
boneCOMPpr :: Lens' COMP (Vec3)
boneCOMPpr = lens _boneCOMPpr (\a b -> a {_boneCOMPpr = b})
boneCOMPinstanceg :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstanceg = lens _boneCOMPinstanceg (\a b -> a {_boneCOMPinstanceg = b})
boneCOMPinstancetexmode :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstancetexmode = lens _boneCOMPinstancetexmode (\a b -> a {_boneCOMPinstancetexmode = b})
boneCOMPwcolor :: Lens' COMP (Vec3)
boneCOMPwcolor = lens _boneCOMPwcolor (\a b -> a {_boneCOMPwcolor = b})
boneCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
boneCOMPenablecloningpulse = lens _boneCOMPenablecloningpulse (\a b -> a {_boneCOMPenablecloningpulse = b})
boneCOMPinstanceb :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstanceb = lens _boneCOMPinstanceb (\a b -> a {_boneCOMPinstanceb = b})
boneCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
boneCOMPreloadtoxonstart = lens _boneCOMPreloadtoxonstart (\a b -> a {_boneCOMPreloadtoxonstart = b})
boneCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
boneCOMPreinitnet = lens _boneCOMPreinitnet (\a b -> a {_boneCOMPreinitnet = b})
boneCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPexternaltox = lens _boneCOMPexternaltox (\a b -> a {_boneCOMPexternaltox = b})
boneCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
boneCOMPreinitextensions = lens _boneCOMPreinitextensions (\a b -> a {_boneCOMPreinitextensions = b})
boneCOMPpreset :: Lens' COMP (Maybe (Tree Bool))
boneCOMPpreset = lens _boneCOMPpreset (\a b -> a {_boneCOMPpreset = b})
boneCOMPnuminstances :: Lens' COMP (Maybe (Tree Int))
boneCOMPnuminstances = lens _boneCOMPnuminstances (\a b -> a {_boneCOMPnuminstances = b})
boneCOMPrestangles :: Lens' COMP (Vec3)
boneCOMPrestangles = lens _boneCOMPrestangles (\a b -> a {_boneCOMPrestangles = b})
boneCOMPup :: Lens' COMP (Vec3)
boneCOMPup = lens _boneCOMPup (\a b -> a {_boneCOMPup = b})
boneCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
boneCOMPpromoteextension1 = lens _boneCOMPpromoteextension1 (\a b -> a {_boneCOMPpromoteextension1 = b})
boneCOMPinstrord :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstrord = lens _boneCOMPinstrord (\a b -> a {_boneCOMPinstrord = b})
boneCOMPpxord :: Lens' COMP (Maybe (Tree Int))
boneCOMPpxord = lens _boneCOMPpxord (\a b -> a {_boneCOMPpxord = b})
boneCOMPinstancetexindex :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancetexindex = lens _boneCOMPinstancetexindex (\a b -> a {_boneCOMPinstancetexindex = b})
boneCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPextname3 = lens _boneCOMPextname3 (\a b -> a {_boneCOMPextname3 = b})
boneCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPparentshortcut = lens _boneCOMPparentshortcut (\a b -> a {_boneCOMPparentshortcut = b})
boneCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
boneCOMPnodeview = lens _boneCOMPnodeview (\a b -> a {_boneCOMPnodeview = b})
boneCOMPinstancesx :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancesx = lens _boneCOMPinstancesx (\a b -> a {_boneCOMPinstancesx = b})
boneCOMPinstancing :: Lens' COMP (Maybe (Tree Bool))
boneCOMPinstancing = lens _boneCOMPinstancing (\a b -> a {_boneCOMPinstancing = b})
boneCOMPinstancepy :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancepy = lens _boneCOMPinstancepy (\a b -> a {_boneCOMPinstancepy = b})
boneCOMPprord :: Lens' COMP (Maybe (Tree Int))
boneCOMPprord = lens _boneCOMPprord (\a b -> a {_boneCOMPprord = b})
boneCOMPinstancer :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancer = lens _boneCOMPinstancer (\a b -> a {_boneCOMPinstancer = b})
boneCOMPlookup :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPlookup = lens _boneCOMPlookup (\a b -> a {_boneCOMPlookup = b})
boneCOMPinstancerz :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancerz = lens _boneCOMPinstancerz (\a b -> a {_boneCOMPinstancerz = b})
boneCOMPt :: Lens' COMP (Vec3)
boneCOMPt = lens _boneCOMPt (\a b -> a {_boneCOMPt = b})
boneCOMPdrawpriority :: Lens' COMP (Maybe (Tree Float))
boneCOMPdrawpriority = lens _boneCOMPdrawpriority (\a b -> a {_boneCOMPdrawpriority = b})
boneCOMPdisplaylink :: Lens' COMP (Maybe (Tree Bool))
boneCOMPdisplaylink = lens _boneCOMPdisplaylink (\a b -> a {_boneCOMPdisplaylink = b})
boneCOMPinstanceu :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstanceu = lens _boneCOMPinstanceu (\a b -> a {_boneCOMPinstanceu = b})
boneCOMPinstancepz :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancepz = lens _boneCOMPinstancepz (\a b -> a {_boneCOMPinstancepz = b})
boneCOMPrender :: Lens' COMP (Maybe (Tree Bool))
boneCOMPrender = lens _boneCOMPrender (\a b -> a {_boneCOMPrender = b})
boneCOMPbeginyrange :: Lens' COMP (Maybe (Tree Float))
boneCOMPbeginyrange = lens _boneCOMPbeginyrange (\a b -> a {_boneCOMPbeginyrange = b})
boneCOMPps :: Lens' COMP (Vec3)
boneCOMPps = lens _boneCOMPps (\a b -> a {_boneCOMPps = b})
boneCOMPinstancetexextendv :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstancetexextendv = lens _boneCOMPinstancetexextendv (\a b -> a {_boneCOMPinstancetexextendv = b})
boneCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPextension3 = lens _boneCOMPextension3 (\a b -> a {_boneCOMPextension3 = b})
boneCOMPpxform :: Lens' COMP (Maybe (Tree Bool))
boneCOMPpxform = lens _boneCOMPpxform (\a b -> a {_boneCOMPpxform = b})
boneCOMPdisplaycapture :: Lens' COMP (Maybe (Tree Bool))
boneCOMPdisplaycapture = lens _boneCOMPdisplaycapture (\a b -> a {_boneCOMPdisplaycapture = b})
boneCOMPyrolloff :: Lens' COMP (Maybe (Tree Float))
boneCOMPyrolloff = lens _boneCOMPyrolloff (\a b -> a {_boneCOMPyrolloff = b})
boneCOMPr :: Lens' COMP (Vec3)
boneCOMPr = lens _boneCOMPr (\a b -> a {_boneCOMPr = b})
boneCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
boneCOMPenablecloning = lens _boneCOMPenablecloning (\a b -> a {_boneCOMPenablecloning = b})
boneCOMPinstancecolormode :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstancecolormode = lens _boneCOMPinstancecolormode (\a b -> a {_boneCOMPinstancecolormode = b})
boneCOMPxdamp :: Lens' COMP (Maybe (Tree Float))
boneCOMPxdamp = lens _boneCOMPxdamp (\a b -> a {_boneCOMPxdamp = b})
boneCOMPpp :: Lens' COMP (Vec3)
boneCOMPpp = lens _boneCOMPpp (\a b -> a {_boneCOMPpp = b})
boneCOMPinstancew :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancew = lens _boneCOMPinstancew (\a b -> a {_boneCOMPinstancew = b})
boneCOMPinstancerx :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancerx = lens _boneCOMPinstancerx (\a b -> a {_boneCOMPinstancerx = b})
boneCOMPmaterial :: Lens' COMP (Maybe (Tree MAT))
boneCOMPmaterial = lens _boneCOMPmaterial (\a b -> a {_boneCOMPmaterial = b})
boneCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPopshortcut = lens _boneCOMPopshortcut (\a b -> a {_boneCOMPopshortcut = b})
boneCOMPinstancetx :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancetx = lens _boneCOMPinstancetx (\a b -> a {_boneCOMPinstancetx = b})
boneCOMPpcommit :: Lens' COMP (Maybe (Tree Bool))
boneCOMPpcommit = lens _boneCOMPpcommit (\a b -> a {_boneCOMPpcommit = b})
boneCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
boneCOMPpromoteextension2 = lens _boneCOMPpromoteextension2 (\a b -> a {_boneCOMPpromoteextension2 = b})
boneCOMPcrcenter :: Lens' COMP (Vec3)
boneCOMPcrcenter = lens _boneCOMPcrcenter (\a b -> a {_boneCOMPcrcenter = b})
boneCOMPydamp :: Lens' COMP (Maybe (Tree Float))
boneCOMPydamp = lens _boneCOMPydamp (\a b -> a {_boneCOMPydamp = b})
boneCOMPinstancetexextendu :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstancetexextendu = lens _boneCOMPinstancetexextendu (\a b -> a {_boneCOMPinstancetexextendu = b})
boneCOMPinstancemode :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstancemode = lens _boneCOMPinstancemode (\a b -> a {_boneCOMPinstancemode = b})
boneCOMPinstancerottoorder :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstancerottoorder = lens _boneCOMPinstancerottoorder (\a b -> a {_boneCOMPinstancerottoorder = b})
boneCOMPinstancesz :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancesz = lens _boneCOMPinstancesz (\a b -> a {_boneCOMPinstancesz = b})
boneCOMPinstancetexs :: Lens' COMP (Maybe (Tree TOP))
boneCOMPinstancetexs = lens _boneCOMPinstancetexs (\a b -> a {_boneCOMPinstancetexs = b})
boneCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
boneCOMPpromoteextension3 = lens _boneCOMPpromoteextension3 (\a b -> a {_boneCOMPpromoteextension3 = b})
boneCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPextname4 = lens _boneCOMPextname4 (\a b -> a {_boneCOMPextname4 = b})
boneCOMPcrbotcap :: Lens' COMP (Vec3)
boneCOMPcrbotcap = lens _boneCOMPcrbotcap (\a b -> a {_boneCOMPcrbotcap = b})
boneCOMPinstancerotupz :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancerotupz = lens _boneCOMPinstancerotupz (\a b -> a {_boneCOMPinstancerotupz = b})
boneCOMPrord :: Lens' COMP (Maybe (Tree Int))
boneCOMPrord = lens _boneCOMPrord (\a b -> a {_boneCOMPrord = b})
boneCOMPinstancesy :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancesy = lens _boneCOMPinstancesy (\a b -> a {_boneCOMPinstancesy = b})
boneCOMPxord :: Lens' COMP (Maybe (Tree Int))
boneCOMPxord = lens _boneCOMPxord (\a b -> a {_boneCOMPxord = b})
boneCOMPlength :: Lens' COMP (Maybe (Tree Float))
boneCOMPlength = lens _boneCOMPlength (\a b -> a {_boneCOMPlength = b})
boneCOMPinstancery :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancery = lens _boneCOMPinstancery (\a b -> a {_boneCOMPinstancery = b})
boneCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPextension2 = lens _boneCOMPextension2 (\a b -> a {_boneCOMPextension2 = b})
boneCOMPs :: Lens' COMP (Vec3)
boneCOMPs = lens _boneCOMPs (\a b -> a {_boneCOMPs = b})
boneCOMPxrolloff :: Lens' COMP (Maybe (Tree Float))
boneCOMPxrolloff = lens _boneCOMPxrolloff (\a b -> a {_boneCOMPxrolloff = b})
boneCOMPclone :: Lens' COMP (Maybe (Tree COMP))
boneCOMPclone = lens _boneCOMPclone (\a b -> a {_boneCOMPclone = b})
boneCOMPinstancerotupx :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancerotupx = lens _boneCOMPinstancerotupx (\a b -> a {_boneCOMPinstancerotupx = b})
boneCOMPinstancetexextendw :: Lens' COMP (Maybe (Tree Int))
boneCOMPinstancetexextendw = lens _boneCOMPinstancetexextendw (\a b -> a {_boneCOMPinstancetexextendw = b})
boneCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPextname2 = lens _boneCOMPextname2 (\a b -> a {_boneCOMPextname2 = b})
boneCOMPinstancerottoy :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancerottoy = lens _boneCOMPinstancerottoy (\a b -> a {_boneCOMPinstancerottoy = b})
boneCOMPbeginxrange :: Lens' COMP (Maybe (Tree Float))
boneCOMPbeginxrange = lens _boneCOMPbeginxrange (\a b -> a {_boneCOMPbeginxrange = b})
boneCOMPcrtopheight :: Lens' COMP (Maybe (Tree Float))
boneCOMPcrtopheight = lens _boneCOMPcrtopheight (\a b -> a {_boneCOMPcrtopheight = b})
boneCOMPinstancetz :: Lens' COMP (Maybe (Tree ByteString))
boneCOMPinstancetz = lens _boneCOMPinstancetz (\a b -> a {_boneCOMPinstancetz = b})

listCOMPtopborder :: Lens' COMP (Maybe (Tree Int))
listCOMPtopborder = lens _listCOMPtopborder (\a b -> a {_listCOMPtopborder = b})
listCOMProws :: Lens' COMP (Maybe (Tree Int))
listCOMProws = lens _listCOMProws (\a b -> a {_listCOMProws = b})
listCOMPscrollbarthickness :: Lens' COMP (Maybe (Tree Int))
listCOMPscrollbarthickness = lens _listCOMPscrollbarthickness (\a b -> a {_listCOMPscrollbarthickness = b})
listCOMPw :: Lens' COMP (Maybe (Tree Int))
listCOMPw = lens _listCOMPw (\a b -> a {_listCOMPw = b})
listCOMPalignorder :: Lens' COMP (Maybe (Tree Float))
listCOMPalignorder = lens _listCOMPalignorder (\a b -> a {_listCOMPalignorder = b})
listCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
listCOMPloadondemand = lens _listCOMPloadondemand (\a b -> a {_listCOMPloadondemand = b})
listCOMPjustifyh :: Lens' COMP (Maybe (Tree Int))
listCOMPjustifyh = lens _listCOMPjustifyh (\a b -> a {_listCOMPjustifyh = b})
listCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
listCOMPpromoteextension4 = lens _listCOMPpromoteextension4 (\a b -> a {_listCOMPpromoteextension4 = b})
listCOMPdropdestscript :: Lens' COMP (Maybe (Tree DAT))
listCOMPdropdestscript = lens _listCOMPdropdestscript (\a b -> a {_listCOMPdropdestscript = b})
listCOMPrepositionxmin :: Lens' COMP (Maybe (Tree Float))
listCOMPrepositionxmin = lens _listCOMPrepositionxmin (\a b -> a {_listCOMPrepositionxmin = b})
listCOMPx :: Lens' COMP (Maybe (Tree Int))
listCOMPx = lens _listCOMPx (\a b -> a {_listCOMPx = b})
listCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
listCOMPnodeview = lens _listCOMPnodeview (\a b -> a {_listCOMPnodeview = b})
listCOMPrepositionymax :: Lens' COMP (Maybe (Tree Float))
listCOMPrepositionymax = lens _listCOMPrepositionymax (\a b -> a {_listCOMPrepositionymax = b})
listCOMPmargint :: Lens' COMP (Maybe (Tree Float))
listCOMPmargint = lens _listCOMPmargint (\a b -> a {_listCOMPmargint = b})
listCOMPresizer :: Lens' COMP (Maybe (Tree Bool))
listCOMPresizer = lens _listCOMPresizer (\a b -> a {_listCOMPresizer = b})
listCOMPdroptypescript :: Lens' COMP (Maybe (Tree DAT))
listCOMPdroptypescript = lens _listCOMPdroptypescript (\a b -> a {_listCOMPdroptypescript = b})
listCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
listCOMPpromoteextension2 = lens _listCOMPpromoteextension2 (\a b -> a {_listCOMPpromoteextension2 = b})
listCOMPfixedaspect :: Lens' COMP (Maybe (Tree Int))
listCOMPfixedaspect = lens _listCOMPfixedaspect (\a b -> a {_listCOMPfixedaspect = b})
listCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
listCOMPextname1 = lens _listCOMPextname1 (\a b -> a {_listCOMPextname1 = b})
listCOMPmarginl :: Lens' COMP (Maybe (Tree Float))
listCOMPmarginl = lens _listCOMPmarginl (\a b -> a {_listCOMPmarginl = b})
listCOMPdodisablecolor :: Lens' COMP (Maybe (Tree Bool))
listCOMPdodisablecolor = lens _listCOMPdodisablecolor (\a b -> a {_listCOMPdodisablecolor = b})
listCOMPmultitouch :: Lens' COMP (Maybe (Tree Int))
listCOMPmultitouch = lens _listCOMPmultitouch (\a b -> a {_listCOMPmultitouch = b})
listCOMPbgalpha :: Lens' COMP (Maybe (Tree Float))
listCOMPbgalpha = lens _listCOMPbgalpha (\a b -> a {_listCOMPbgalpha = b})
listCOMPhmode :: Lens' COMP (Maybe (Tree Int))
listCOMPhmode = lens _listCOMPhmode (\a b -> a {_listCOMPhmode = b})
listCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
listCOMPsavebackup = lens _listCOMPsavebackup (\a b -> a {_listCOMPsavebackup = b})
listCOMPuvbuttonsmiddle :: Lens' COMP (Maybe (Tree Bool))
listCOMPuvbuttonsmiddle = lens _listCOMPuvbuttonsmiddle (\a b -> a {_listCOMPuvbuttonsmiddle = b})
listCOMPleftanchor :: Lens' COMP (Maybe (Tree Float))
listCOMPleftanchor = lens _listCOMPleftanchor (\a b -> a {_listCOMPleftanchor = b})
listCOMPclickthrough :: Lens' COMP (Maybe (Tree Bool))
listCOMPclickthrough = lens _listCOMPclickthrough (\a b -> a {_listCOMPclickthrough = b})
listCOMPdisablealpha :: Lens' COMP (Maybe (Tree Float))
listCOMPdisablealpha = lens _listCOMPdisablealpha (\a b -> a {_listCOMPdisablealpha = b})
listCOMPvmode :: Lens' COMP (Maybe (Tree Int))
listCOMPvmode = lens _listCOMPvmode (\a b -> a {_listCOMPvmode = b})
listCOMPvorigin :: Lens' COMP (Maybe (Tree Float))
listCOMPvorigin = lens _listCOMPvorigin (\a b -> a {_listCOMPvorigin = b})
listCOMPdrag :: Lens' COMP (Maybe (Tree Int))
listCOMPdrag = lens _listCOMPdrag (\a b -> a {_listCOMPdrag = b})
listCOMPdisablecolor :: Lens' COMP (Vec3)
listCOMPdisablecolor = lens _listCOMPdisablecolor (\a b -> a {_listCOMPdisablecolor = b})
listCOMPresizehmin :: Lens' COMP (Maybe (Tree Float))
listCOMPresizehmin = lens _listCOMPresizehmin (\a b -> a {_listCOMPresizehmin = b})
listCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
listCOMPextname3 = lens _listCOMPextname3 (\a b -> a {_listCOMPextname3 = b})
listCOMPborderaalpha :: Lens' COMP (Maybe (Tree Float))
listCOMPborderaalpha = lens _listCOMPborderaalpha (\a b -> a {_listCOMPborderaalpha = b})
listCOMPoffcellcallbacks :: Lens' COMP (Maybe (Tree Bool))
listCOMPoffcellcallbacks = lens _listCOMPoffcellcallbacks (\a b -> a {_listCOMPoffcellcallbacks = b})
listCOMPrepositionymin :: Lens' COMP (Maybe (Tree Float))
listCOMPrepositionymin = lens _listCOMPrepositionymin (\a b -> a {_listCOMPrepositionymin = b})
listCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
listCOMPenablecloning = lens _listCOMPenablecloning (\a b -> a {_listCOMPenablecloning = b})
listCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
listCOMPsubcompname = lens _listCOMPsubcompname (\a b -> a {_listCOMPsubcompname = b})
listCOMPrightanchor :: Lens' COMP (Maybe (Tree Float))
listCOMPrightanchor = lens _listCOMPrightanchor (\a b -> a {_listCOMPrightanchor = b})
listCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
listCOMPreloadtoxonstart = lens _listCOMPreloadtoxonstart (\a b -> a {_listCOMPreloadtoxonstart = b})
listCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
listCOMPreinitnet = lens _listCOMPreinitnet (\a b -> a {_listCOMPreinitnet = b})
listCOMPhscrollbar :: Lens' COMP (Maybe (Tree Bool))
listCOMPhscrollbar = lens _listCOMPhscrollbar (\a b -> a {_listCOMPhscrollbar = b})
listCOMPmarginr :: Lens' COMP (Maybe (Tree Float))
listCOMPmarginr = lens _listCOMPmarginr (\a b -> a {_listCOMPmarginr = b})
listCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
listCOMPparentshortcut = lens _listCOMPparentshortcut (\a b -> a {_listCOMPparentshortcut = b})
listCOMPresizet :: Lens' COMP (Maybe (Tree Bool))
listCOMPresizet = lens _listCOMPresizet (\a b -> a {_listCOMPresizet = b})
listCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
listCOMPextension4 = lens _listCOMPextension4 (\a b -> a {_listCOMPextension4 = b})
listCOMPleftborderi :: Lens' COMP (Maybe (Tree Int))
listCOMPleftborderi = lens _listCOMPleftborderi (\a b -> a {_listCOMPleftborderi = b})
listCOMPrepocomp :: Lens' COMP (Maybe (Tree COMP))
listCOMPrepocomp = lens _listCOMPrepocomp (\a b -> a {_listCOMPrepocomp = b})
listCOMPtopanchor :: Lens' COMP (Maybe (Tree Float))
listCOMPtopanchor = lens _listCOMPtopanchor (\a b -> a {_listCOMPtopanchor = b})
listCOMPanchordrag :: Lens' COMP (Maybe (Tree Int))
listCOMPanchordrag = lens _listCOMPanchordrag (\a b -> a {_listCOMPanchordrag = b})
listCOMPbottomborderi :: Lens' COMP (Maybe (Tree Int))
listCOMPbottomborderi = lens _listCOMPbottomborderi (\a b -> a {_listCOMPbottomborderi = b})
listCOMPrightborder :: Lens' COMP (Maybe (Tree Int))
listCOMPrightborder = lens _listCOMPrightborder (\a b -> a {_listCOMPrightborder = b})
listCOMPbottomborder :: Lens' COMP (Maybe (Tree Int))
listCOMPbottomborder = lens _listCOMPbottomborder (\a b -> a {_listCOMPbottomborder = b})
listCOMPlayer :: Lens' COMP (Maybe (Tree Float))
listCOMPlayer = lens _listCOMPlayer (\a b -> a {_listCOMPlayer = b})
listCOMPchop :: Lens' COMP (Maybe (Tree CHOP))
listCOMPchop = lens _listCOMPchop (\a b -> a {_listCOMPchop = b})
listCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
listCOMPreinitextensions = lens _listCOMPreinitextensions (\a b -> a {_listCOMPreinitextensions = b})
listCOMPtopborderi :: Lens' COMP (Maybe (Tree Int))
listCOMPtopborderi = lens _listCOMPtopborderi (\a b -> a {_listCOMPtopborderi = b})
listCOMPalignallow :: Lens' COMP (Maybe (Tree Int))
listCOMPalignallow = lens _listCOMPalignallow (\a b -> a {_listCOMPalignallow = b})
listCOMPdragdropcallbacks :: Lens' COMP (Maybe (Tree DAT))
listCOMPdragdropcallbacks = lens _listCOMPdragdropcallbacks (\a b -> a {_listCOMPdragdropcallbacks = b})
listCOMPrightborderi :: Lens' COMP (Maybe (Tree Int))
listCOMPrightborderi = lens _listCOMPrightborderi (\a b -> a {_listCOMPrightborderi = b})
listCOMPresizel :: Lens' COMP (Maybe (Tree Bool))
listCOMPresizel = lens _listCOMPresizel (\a b -> a {_listCOMPresizel = b})
listCOMPvfillweight :: Lens' COMP (Maybe (Tree Float))
listCOMPvfillweight = lens _listCOMPvfillweight (\a b -> a {_listCOMPvfillweight = b})
listCOMPborderover :: Lens' COMP (Maybe (Tree Bool))
listCOMPborderover = lens _listCOMPborderover (\a b -> a {_listCOMPborderover = b})
listCOMPnamedchop :: Lens' COMP (Maybe (Tree Bool))
listCOMPnamedchop = lens _listCOMPnamedchop (\a b -> a {_listCOMPnamedchop = b})
listCOMPmarginb :: Lens' COMP (Maybe (Tree Float))
listCOMPmarginb = lens _listCOMPmarginb (\a b -> a {_listCOMPmarginb = b})
listCOMPrepositionxmax :: Lens' COMP (Maybe (Tree Float))
listCOMPrepositionxmax = lens _listCOMPrepositionxmax (\a b -> a {_listCOMPrepositionxmax = b})
listCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
listCOMPextension2 = lens _listCOMPextension2 (\a b -> a {_listCOMPextension2 = b})
listCOMPborderbalpha :: Lens' COMP (Maybe (Tree Float))
listCOMPborderbalpha = lens _listCOMPborderbalpha (\a b -> a {_listCOMPborderbalpha = b})
listCOMPjustifyv :: Lens' COMP (Maybe (Tree Int))
listCOMPjustifyv = lens _listCOMPjustifyv (\a b -> a {_listCOMPjustifyv = b})
listCOMPreset :: Lens' COMP (Maybe (Tree Bool))
listCOMPreset = lens _listCOMPreset (\a b -> a {_listCOMPreset = b})
listCOMPcols :: Lens' COMP (Maybe (Tree Int))
listCOMPcols = lens _listCOMPcols (\a b -> a {_listCOMPcols = b})
listCOMPtopoffset :: Lens' COMP (Maybe (Tree Float))
listCOMPtopoffset = lens _listCOMPtopoffset (\a b -> a {_listCOMPtopoffset = b})
listCOMPcomposite :: Lens' COMP (Maybe (Tree Int))
listCOMPcomposite = lens _listCOMPcomposite (\a b -> a {_listCOMPcomposite = b})
listCOMPdragscript :: Lens' COMP (Maybe (Tree DAT))
listCOMPdragscript = lens _listCOMPdragscript (\a b -> a {_listCOMPdragscript = b})
listCOMPoverlay :: Lens' COMP (Maybe (Tree Bool))
listCOMPoverlay = lens _listCOMPoverlay (\a b -> a {_listCOMPoverlay = b})
listCOMPmultrgb :: Lens' COMP (Maybe (Tree Bool))
listCOMPmultrgb = lens _listCOMPmultrgb (\a b -> a {_listCOMPmultrgb = b})
listCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
listCOMPextension1 = lens _listCOMPextension1 (\a b -> a {_listCOMPextension1 = b})
listCOMPvscrollbar :: Lens' COMP (Maybe (Tree Bool))
listCOMPvscrollbar = lens _listCOMPvscrollbar (\a b -> a {_listCOMPvscrollbar = b})
listCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
listCOMPpromoteextension3 = lens _listCOMPpromoteextension3 (\a b -> a {_listCOMPpromoteextension3 = b})
listCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
listCOMPpromoteextension1 = lens _listCOMPpromoteextension1 (\a b -> a {_listCOMPpromoteextension1 = b})
listCOMPbordera :: Lens' COMP (Vec3)
listCOMPbordera = lens _listCOMPbordera (\a b -> a {_listCOMPbordera = b})
listCOMPcallbacks :: Lens' COMP (Maybe (Tree DAT))
listCOMPcallbacks = lens _listCOMPcallbacks (\a b -> a {_listCOMPcallbacks = b})
listCOMPuvbuttonsleft :: Lens' COMP (Maybe (Tree Bool))
listCOMPuvbuttonsleft = lens _listCOMPuvbuttonsleft (\a b -> a {_listCOMPuvbuttonsleft = b})
listCOMPbgcolor :: Lens' COMP (Vec3)
listCOMPbgcolor = lens _listCOMPbgcolor (\a b -> a {_listCOMPbgcolor = b})
listCOMPresizehmax :: Lens' COMP (Maybe (Tree Float))
listCOMPresizehmax = lens _listCOMPresizehmax (\a b -> a {_listCOMPresizehmax = b})
listCOMPhelpdat :: Lens' COMP (Maybe (Tree DAT))
listCOMPhelpdat = lens _listCOMPhelpdat (\a b -> a {_listCOMPhelpdat = b})
listCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
listCOMPextension3 = lens _listCOMPextension3 (\a b -> a {_listCOMPextension3 = b})
listCOMPdrop :: Lens' COMP (Maybe (Tree Int))
listCOMPdrop = lens _listCOMPdrop (\a b -> a {_listCOMPdrop = b})
listCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
listCOMPexternaltox = lens _listCOMPexternaltox (\a b -> a {_listCOMPexternaltox = b})
listCOMPalign :: Lens' COMP (Maybe (Tree Int))
listCOMPalign = lens _listCOMPalign (\a b -> a {_listCOMPalign = b})
listCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
listCOMPextname2 = lens _listCOMPextname2 (\a b -> a {_listCOMPextname2 = b})
listCOMPh :: Lens' COMP (Maybe (Tree Int))
listCOMPh = lens _listCOMPh (\a b -> a {_listCOMPh = b})
listCOMPleftborder :: Lens' COMP (Maybe (Tree Int))
listCOMPleftborder = lens _listCOMPleftborder (\a b -> a {_listCOMPleftborder = b})
listCOMPtopfill :: Lens' COMP (Maybe (Tree Int))
listCOMPtopfill = lens _listCOMPtopfill (\a b -> a {_listCOMPtopfill = b})
listCOMPresizewmin :: Lens' COMP (Maybe (Tree Float))
listCOMPresizewmin = lens _listCOMPresizewmin (\a b -> a {_listCOMPresizewmin = b})
listCOMPmouserel :: Lens' COMP (Maybe (Tree Bool))
listCOMPmouserel = lens _listCOMPmouserel (\a b -> a {_listCOMPmouserel = b})
listCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
listCOMPenablecloningpulse = lens _listCOMPenablecloningpulse (\a b -> a {_listCOMPenablecloningpulse = b})
listCOMPoffset :: Lens' COMP (Vec2)
listCOMPoffset = lens _listCOMPoffset (\a b -> a {_listCOMPoffset = b})
listCOMPresizeb :: Lens' COMP (Maybe (Tree Bool))
listCOMPresizeb = lens _listCOMPresizeb (\a b -> a {_listCOMPresizeb = b})
listCOMPleftoffset :: Lens' COMP (Maybe (Tree Float))
listCOMPleftoffset = lens _listCOMPleftoffset (\a b -> a {_listCOMPleftoffset = b})
listCOMPy :: Lens' COMP (Maybe (Tree Int))
listCOMPy = lens _listCOMPy (\a b -> a {_listCOMPy = b})
listCOMPpvscrollbar :: Lens' COMP (Maybe (Tree Int))
listCOMPpvscrollbar = lens _listCOMPpvscrollbar (\a b -> a {_listCOMPpvscrollbar = b})
listCOMPcrop :: Lens' COMP (Maybe (Tree Int))
listCOMPcrop = lens _listCOMPcrop (\a b -> a {_listCOMPcrop = b})
listCOMPbottomoffset :: Lens' COMP (Maybe (Tree Float))
listCOMPbottomoffset = lens _listCOMPbottomoffset (\a b -> a {_listCOMPbottomoffset = b})
listCOMPdisplay :: Lens' COMP (Maybe (Tree Bool))
listCOMPdisplay = lens _listCOMPdisplay (\a b -> a {_listCOMPdisplay = b})
listCOMPfit :: Lens' COMP (Maybe (Tree Int))
listCOMPfit = lens _listCOMPfit (\a b -> a {_listCOMPfit = b})
listCOMPaspect :: Lens' COMP (Maybe (Tree Float))
listCOMPaspect = lens _listCOMPaspect (\a b -> a {_listCOMPaspect = b})
listCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
listCOMPextname4 = lens _listCOMPextname4 (\a b -> a {_listCOMPextname4 = b})
listCOMPuvbuttonsright :: Lens' COMP (Maybe (Tree Bool))
listCOMPuvbuttonsright = lens _listCOMPuvbuttonsright (\a b -> a {_listCOMPuvbuttonsright = b})
listCOMPresizewmax :: Lens' COMP (Maybe (Tree Float))
listCOMPresizewmax = lens _listCOMPresizewmax (\a b -> a {_listCOMPresizewmax = b})
listCOMPborderb :: Lens' COMP (Vec3)
listCOMPborderb = lens _listCOMPborderb (\a b -> a {_listCOMPborderb = b})
listCOMPlockfirstrow :: Lens' COMP (Maybe (Tree Bool))
listCOMPlockfirstrow = lens _listCOMPlockfirstrow (\a b -> a {_listCOMPlockfirstrow = b})
listCOMPsizefromwindow :: Lens' COMP (Maybe (Tree Bool))
listCOMPsizefromwindow = lens _listCOMPsizefromwindow (\a b -> a {_listCOMPsizefromwindow = b})
listCOMPopacity :: Lens' COMP (Maybe (Tree Float))
listCOMPopacity = lens _listCOMPopacity (\a b -> a {_listCOMPopacity = b})
listCOMPtop :: Lens' COMP (Maybe (Tree TOP))
listCOMPtop = lens _listCOMPtop (\a b -> a {_listCOMPtop = b})
listCOMPmousewheel :: Lens' COMP (Maybe (Tree Bool))
listCOMPmousewheel = lens _listCOMPmousewheel (\a b -> a {_listCOMPmousewheel = b})
listCOMPoverridemethod :: Lens' COMP (Maybe (Tree Int))
listCOMPoverridemethod = lens _listCOMPoverridemethod (\a b -> a {_listCOMPoverridemethod = b})
listCOMPreposition :: Lens' COMP (Maybe (Tree Int))
listCOMPreposition = lens _listCOMPreposition (\a b -> a {_listCOMPreposition = b})
listCOMPenable :: Lens' COMP (Maybe (Tree Bool))
listCOMPenable = lens _listCOMPenable (\a b -> a {_listCOMPenable = b})
listCOMPbottomanchor :: Lens' COMP (Maybe (Tree Float))
listCOMPbottomanchor = lens _listCOMPbottomanchor (\a b -> a {_listCOMPbottomanchor = b})
listCOMPrightoffset :: Lens' COMP (Maybe (Tree Float))
listCOMPrightoffset = lens _listCOMPrightoffset (\a b -> a {_listCOMPrightoffset = b})
listCOMPvieweraspect :: Lens' COMP (Maybe (Tree Int))
listCOMPvieweraspect = lens _listCOMPvieweraspect (\a b -> a {_listCOMPvieweraspect = b})
listCOMPlockfirstcol :: Lens' COMP (Maybe (Tree Bool))
listCOMPlockfirstcol = lens _listCOMPlockfirstcol (\a b -> a {_listCOMPlockfirstcol = b})
listCOMPalignmax :: Lens' COMP (Maybe (Tree Int))
listCOMPalignmax = lens _listCOMPalignmax (\a b -> a {_listCOMPalignmax = b})
listCOMPscrolloverlay :: Lens' COMP (Maybe (Tree Int))
listCOMPscrolloverlay = lens _listCOMPscrolloverlay (\a b -> a {_listCOMPscrolloverlay = b})
listCOMPclone :: Lens' COMP (Maybe (Tree COMP))
listCOMPclone = lens _listCOMPclone (\a b -> a {_listCOMPclone = b})
listCOMPkeepmemory :: Lens' COMP (Maybe (Tree Bool))
listCOMPkeepmemory = lens _listCOMPkeepmemory (\a b -> a {_listCOMPkeepmemory = b})
listCOMPdropscript :: Lens' COMP (Maybe (Tree DAT))
listCOMPdropscript = lens _listCOMPdropscript (\a b -> a {_listCOMPdropscript = b})
listCOMPhfillweight :: Lens' COMP (Maybe (Tree Float))
listCOMPhfillweight = lens _listCOMPhfillweight (\a b -> a {_listCOMPhfillweight = b})
listCOMPpostoffset :: Lens' COMP (Vec2)
listCOMPpostoffset = lens _listCOMPpostoffset (\a b -> a {_listCOMPpostoffset = b})
listCOMPhorigin :: Lens' COMP (Maybe (Tree Float))
listCOMPhorigin = lens _listCOMPhorigin (\a b -> a {_listCOMPhorigin = b})
listCOMPspacing :: Lens' COMP (Maybe (Tree Float))
listCOMPspacing = lens _listCOMPspacing (\a b -> a {_listCOMPspacing = b})
listCOMPscale :: Lens' COMP (Vec2)
listCOMPscale = lens _listCOMPscale (\a b -> a {_listCOMPscale = b})
listCOMPphscrollbar :: Lens' COMP (Maybe (Tree Int))
listCOMPphscrollbar = lens _listCOMPphscrollbar (\a b -> a {_listCOMPphscrollbar = b})
listCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
listCOMPopshortcut = lens _listCOMPopshortcut (\a b -> a {_listCOMPopshortcut = b})
listCOMPcursor :: Lens' COMP (Maybe (Tree Int))
listCOMPcursor = lens _listCOMPcursor (\a b -> a {_listCOMPcursor = b})

handleCOMPinstancea :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancea = lens _handleCOMPinstancea (\a b -> a {_handleCOMPinstancea = b})
handleCOMPinstancerotupy :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancerotupy = lens _handleCOMPinstancerotupy (\a b -> a {_handleCOMPinstancerotupy = b})
handleCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPextname1 = lens _handleCOMPextname1 (\a b -> a {_handleCOMPextname1 = b})
handleCOMPinstancerottoz :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancerottoz = lens _handleCOMPinstancerottoz (\a b -> a {_handleCOMPinstancerottoz = b})
handleCOMPinstancesz :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancesz = lens _handleCOMPinstancesz (\a b -> a {_handleCOMPinstancesz = b})
handleCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
handleCOMPpromoteextension4 = lens _handleCOMPpromoteextension4 (\a b -> a {_handleCOMPpromoteextension4 = b})
handleCOMPinstanceb :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstanceb = lens _handleCOMPinstanceb (\a b -> a {_handleCOMPinstanceb = b})
handleCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPextension4 = lens _handleCOMPextension4 (\a b -> a {_handleCOMPextension4 = b})
handleCOMPpathorient :: Lens' COMP (Maybe (Tree Bool))
handleCOMPpathorient = lens _handleCOMPpathorient (\a b -> a {_handleCOMPpathorient = b})
handleCOMProll :: Lens' COMP (Maybe (Tree Float))
handleCOMProll = lens _handleCOMProll (\a b -> a {_handleCOMProll = b})
handleCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
handleCOMPnodeview = lens _handleCOMPnodeview (\a b -> a {_handleCOMPnodeview = b})
handleCOMPinstancepx :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancepx = lens _handleCOMPinstancepx (\a b -> a {_handleCOMPinstancepx = b})
handleCOMPpt :: Lens' COMP (Vec3)
handleCOMPpt = lens _handleCOMPpt (\a b -> a {_handleCOMPpt = b})
handleCOMPinstancetexanisotropy :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstancetexanisotropy = lens _handleCOMPinstancetexanisotropy (\a b -> a {_handleCOMPinstancetexanisotropy = b})
handleCOMPprioritymethod :: Lens' COMP (Maybe (Tree Int))
handleCOMPprioritymethod = lens _handleCOMPprioritymethod (\a b -> a {_handleCOMPprioritymethod = b})
handleCOMPlrxmax :: Lens' COMP (Maybe (Tree Float))
handleCOMPlrxmax = lens _handleCOMPlrxmax (\a b -> a {_handleCOMPlrxmax = b})
handleCOMPinstancefirstrow :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstancefirstrow = lens _handleCOMPinstancefirstrow (\a b -> a {_handleCOMPinstancefirstrow = b})
handleCOMPbank :: Lens' COMP (Maybe (Tree Float))
handleCOMPbank = lens _handleCOMPbank (\a b -> a {_handleCOMPbank = b})
handleCOMPinstancety :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancety = lens _handleCOMPinstancety (\a b -> a {_handleCOMPinstancety = b})
handleCOMPinstancery :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancery = lens _handleCOMPinstancery (\a b -> a {_handleCOMPinstancery = b})
handleCOMPp :: Lens' COMP (Vec3)
handleCOMPp = lens _handleCOMPp (\a b -> a {_handleCOMPp = b})
handleCOMPlrxmin :: Lens' COMP (Maybe (Tree Float))
handleCOMPlrxmin = lens _handleCOMPlrxmin (\a b -> a {_handleCOMPlrxmin = b})
handleCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
handleCOMPsavebackup = lens _handleCOMPsavebackup (\a b -> a {_handleCOMPsavebackup = b})
handleCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPextname2 = lens _handleCOMPextname2 (\a b -> a {_handleCOMPextname2 = b})
handleCOMPinstancerottox :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancerottox = lens _handleCOMPinstancerottox (\a b -> a {_handleCOMPinstancerottox = b})
handleCOMPpos :: Lens' COMP (Maybe (Tree Float))
handleCOMPpos = lens _handleCOMPpos (\a b -> a {_handleCOMPpos = b})
handleCOMPpathsop :: Lens' COMP (Maybe (Tree SOP))
handleCOMPpathsop = lens _handleCOMPpathsop (\a b -> a {_handleCOMPpathsop = b})
handleCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPsubcompname = lens _handleCOMPsubcompname (\a b -> a {_handleCOMPsubcompname = b})
handleCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPextname3 = lens _handleCOMPextname3 (\a b -> a {_handleCOMPextname3 = b})
handleCOMPinstancetexfilter :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstancetexfilter = lens _handleCOMPinstancetexfilter (\a b -> a {_handleCOMPinstancetexfilter = b})
handleCOMPpr :: Lens' COMP (Vec3)
handleCOMPpr = lens _handleCOMPpr (\a b -> a {_handleCOMPpr = b})
handleCOMPinstanceg :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstanceg = lens _handleCOMPinstanceg (\a b -> a {_handleCOMPinstanceg = b})
handleCOMPinstancetexmode :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstancetexmode = lens _handleCOMPinstancetexmode (\a b -> a {_handleCOMPinstancetexmode = b})
handleCOMPwcolor :: Lens' COMP (Vec3)
handleCOMPwcolor = lens _handleCOMPwcolor (\a b -> a {_handleCOMPwcolor = b})
handleCOMPinstancepy :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancepy = lens _handleCOMPinstancepy (\a b -> a {_handleCOMPinstancepy = b})
handleCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
handleCOMPreloadtoxonstart = lens _handleCOMPreloadtoxonstart (\a b -> a {_handleCOMPreloadtoxonstart = b})
handleCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
handleCOMPreinitnet = lens _handleCOMPreinitnet (\a b -> a {_handleCOMPreinitnet = b})
handleCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPexternaltox = lens _handleCOMPexternaltox (\a b -> a {_handleCOMPexternaltox = b})
handleCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
handleCOMPreinitextensions = lens _handleCOMPreinitextensions (\a b -> a {_handleCOMPreinitextensions = b})
handleCOMPpreset :: Lens' COMP (Maybe (Tree Bool))
handleCOMPpreset = lens _handleCOMPpreset (\a b -> a {_handleCOMPpreset = b})
handleCOMPnuminstances :: Lens' COMP (Maybe (Tree Int))
handleCOMPnuminstances = lens _handleCOMPnuminstances (\a b -> a {_handleCOMPnuminstances = b})
handleCOMPup :: Lens' COMP (Vec3)
handleCOMPup = lens _handleCOMPup (\a b -> a {_handleCOMPup = b})
handleCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
handleCOMPpromoteextension1 = lens _handleCOMPpromoteextension1 (\a b -> a {_handleCOMPpromoteextension1 = b})
handleCOMPinstrord :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstrord = lens _handleCOMPinstrord (\a b -> a {_handleCOMPinstrord = b})
handleCOMPpxord :: Lens' COMP (Maybe (Tree Int))
handleCOMPpxord = lens _handleCOMPpxord (\a b -> a {_handleCOMPpxord = b})
handleCOMPinstancetexindex :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancetexindex = lens _handleCOMPinstancetexindex (\a b -> a {_handleCOMPinstancetexindex = b})
handleCOMPpickpriority :: Lens' COMP (Maybe (Tree Float))
handleCOMPpickpriority = lens _handleCOMPpickpriority (\a b -> a {_handleCOMPpickpriority = b})
handleCOMPtwistonly :: Lens' COMP (Maybe (Tree Bool))
handleCOMPtwistonly = lens _handleCOMPtwistonly (\a b -> a {_handleCOMPtwistonly = b})
handleCOMPps :: Lens' COMP (Vec3)
handleCOMPps = lens _handleCOMPps (\a b -> a {_handleCOMPps = b})
handleCOMPfalloff :: Lens' COMP (Maybe (Tree Float))
handleCOMPfalloff = lens _handleCOMPfalloff (\a b -> a {_handleCOMPfalloff = b})
handleCOMPinstancing :: Lens' COMP (Maybe (Tree Bool))
handleCOMPinstancing = lens _handleCOMPinstancing (\a b -> a {_handleCOMPinstancing = b})
handleCOMPinstancetexextendu :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstancetexextendu = lens _handleCOMPinstancetexextendu (\a b -> a {_handleCOMPinstancetexextendu = b})
handleCOMPprord :: Lens' COMP (Maybe (Tree Int))
handleCOMPprord = lens _handleCOMPprord (\a b -> a {_handleCOMPprord = b})
handleCOMPlookup :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPlookup = lens _handleCOMPlookup (\a b -> a {_handleCOMPlookup = b})
handleCOMPinstancerz :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancerz = lens _handleCOMPinstancerz (\a b -> a {_handleCOMPinstancerz = b})
handleCOMPlrzmax :: Lens' COMP (Maybe (Tree Float))
handleCOMPlrzmax = lens _handleCOMPlrzmax (\a b -> a {_handleCOMPlrzmax = b})
handleCOMPdrawpriority :: Lens' COMP (Maybe (Tree Float))
handleCOMPdrawpriority = lens _handleCOMPdrawpriority (\a b -> a {_handleCOMPdrawpriority = b})
handleCOMPinstanceu :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstanceu = lens _handleCOMPinstanceu (\a b -> a {_handleCOMPinstanceu = b})
handleCOMPrender :: Lens' COMP (Maybe (Tree Bool))
handleCOMPrender = lens _handleCOMPrender (\a b -> a {_handleCOMPrender = b})
handleCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPextension1 = lens _handleCOMPextension1 (\a b -> a {_handleCOMPextension1 = b})
handleCOMPinstancetexextendv :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstancetexextendv = lens _handleCOMPinstancetexextendv (\a b -> a {_handleCOMPinstancetexextendv = b})
handleCOMPlrymax :: Lens' COMP (Maybe (Tree Float))
handleCOMPlrymax = lens _handleCOMPlrymax (\a b -> a {_handleCOMPlrymax = b})
handleCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPextension3 = lens _handleCOMPextension3 (\a b -> a {_handleCOMPextension3 = b})
handleCOMPpxform :: Lens' COMP (Maybe (Tree Bool))
handleCOMPpxform = lens _handleCOMPpxform (\a b -> a {_handleCOMPpxform = b})
handleCOMPmaterial :: Lens' COMP (Maybe (Tree MAT))
handleCOMPmaterial = lens _handleCOMPmaterial (\a b -> a {_handleCOMPmaterial = b})
handleCOMPinstancer :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancer = lens _handleCOMPinstancer (\a b -> a {_handleCOMPinstancer = b})
handleCOMPr :: Lens' COMP (Vec3)
handleCOMPr = lens _handleCOMPr (\a b -> a {_handleCOMPr = b})
handleCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
handleCOMPenablecloning = lens _handleCOMPenablecloning (\a b -> a {_handleCOMPenablecloning = b})
handleCOMPinstancecolormode :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstancecolormode = lens _handleCOMPinstancecolormode (\a b -> a {_handleCOMPinstancecolormode = b})
handleCOMPpp :: Lens' COMP (Vec3)
handleCOMPpp = lens _handleCOMPpp (\a b -> a {_handleCOMPpp = b})
handleCOMPinstancew :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancew = lens _handleCOMPinstancew (\a b -> a {_handleCOMPinstancew = b})
handleCOMPinstancerx :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancerx = lens _handleCOMPinstancerx (\a b -> a {_handleCOMPinstancerx = b})
handleCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
handleCOMPloadondemand = lens _handleCOMPloadondemand (\a b -> a {_handleCOMPloadondemand = b})
handleCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPopshortcut = lens _handleCOMPopshortcut (\a b -> a {_handleCOMPopshortcut = b})
handleCOMPpcommit :: Lens' COMP (Maybe (Tree Bool))
handleCOMPpcommit = lens _handleCOMPpcommit (\a b -> a {_handleCOMPpcommit = b})
handleCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
handleCOMPpromoteextension2 = lens _handleCOMPpromoteextension2 (\a b -> a {_handleCOMPpromoteextension2 = b})
handleCOMPlrzmin :: Lens' COMP (Maybe (Tree Float))
handleCOMPlrzmin = lens _handleCOMPlrzmin (\a b -> a {_handleCOMPlrzmin = b})
handleCOMPinstanceorder :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstanceorder = lens _handleCOMPinstanceorder (\a b -> a {_handleCOMPinstanceorder = b})
handleCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
handleCOMPenablecloningpulse = lens _handleCOMPenablecloningpulse (\a b -> a {_handleCOMPenablecloningpulse = b})
handleCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPparentshortcut = lens _handleCOMPparentshortcut (\a b -> a {_handleCOMPparentshortcut = b})
handleCOMPinstancemode :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstancemode = lens _handleCOMPinstancemode (\a b -> a {_handleCOMPinstancemode = b})
handleCOMPinstancerottoorder :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstancerottoorder = lens _handleCOMPinstancerottoorder (\a b -> a {_handleCOMPinstancerottoorder = b})
handleCOMPinstancepz :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancepz = lens _handleCOMPinstancepz (\a b -> a {_handleCOMPinstancepz = b})
handleCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
handleCOMPpromoteextension3 = lens _handleCOMPpromoteextension3 (\a b -> a {_handleCOMPpromoteextension3 = b})
handleCOMPinstancesx :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancesx = lens _handleCOMPinstancesx (\a b -> a {_handleCOMPinstancesx = b})
handleCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPextname4 = lens _handleCOMPextname4 (\a b -> a {_handleCOMPextname4 = b})
handleCOMPinstancetx :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancetx = lens _handleCOMPinstancetx (\a b -> a {_handleCOMPinstancetx = b})
handleCOMPinstancerotupz :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancerotupz = lens _handleCOMPinstancerotupz (\a b -> a {_handleCOMPinstancerotupz = b})
handleCOMPweight :: Lens' COMP (Maybe (Tree Float))
handleCOMPweight = lens _handleCOMPweight (\a b -> a {_handleCOMPweight = b})
handleCOMPinstancesy :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancesy = lens _handleCOMPinstancesy (\a b -> a {_handleCOMPinstancesy = b})
handleCOMPxord :: Lens' COMP (Maybe (Tree Int))
handleCOMPxord = lens _handleCOMPxord (\a b -> a {_handleCOMPxord = b})
handleCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPextension2 = lens _handleCOMPextension2 (\a b -> a {_handleCOMPextension2 = b})
handleCOMPlrymin :: Lens' COMP (Maybe (Tree Float))
handleCOMPlrymin = lens _handleCOMPlrymin (\a b -> a {_handleCOMPlrymin = b})
handleCOMPdorzlimit :: Lens' COMP (Maybe (Tree Bool))
handleCOMPdorzlimit = lens _handleCOMPdorzlimit (\a b -> a {_handleCOMPdorzlimit = b})
handleCOMPs :: Lens' COMP (Vec3)
handleCOMPs = lens _handleCOMPs (\a b -> a {_handleCOMPs = b})
handleCOMPdorylimit :: Lens' COMP (Maybe (Tree Bool))
handleCOMPdorylimit = lens _handleCOMPdorylimit (\a b -> a {_handleCOMPdorylimit = b})
handleCOMPclone :: Lens' COMP (Maybe (Tree COMP))
handleCOMPclone = lens _handleCOMPclone (\a b -> a {_handleCOMPclone = b})
handleCOMPdorxlimit :: Lens' COMP (Maybe (Tree Bool))
handleCOMPdorxlimit = lens _handleCOMPdorxlimit (\a b -> a {_handleCOMPdorxlimit = b})
handleCOMPinstxord :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstxord = lens _handleCOMPinstxord (\a b -> a {_handleCOMPinstxord = b})
handleCOMPt :: Lens' COMP (Vec3)
handleCOMPt = lens _handleCOMPt (\a b -> a {_handleCOMPt = b})
handleCOMPinstancetexextendw :: Lens' COMP (Maybe (Tree Int))
handleCOMPinstancetexextendw = lens _handleCOMPinstancetexextendw (\a b -> a {_handleCOMPinstancetexextendw = b})
handleCOMPinstancerotupx :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancerotupx = lens _handleCOMPinstancerotupx (\a b -> a {_handleCOMPinstancerotupx = b})
handleCOMPrord :: Lens' COMP (Maybe (Tree Int))
handleCOMPrord = lens _handleCOMPrord (\a b -> a {_handleCOMPrord = b})
handleCOMPinstancerottoy :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancerottoy = lens _handleCOMPinstancerottoy (\a b -> a {_handleCOMPinstancerottoy = b})
handleCOMPinstancev :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancev = lens _handleCOMPinstancev (\a b -> a {_handleCOMPinstancev = b})
handleCOMPinstancetexs :: Lens' COMP (Maybe (Tree TOP))
handleCOMPinstancetexs = lens _handleCOMPinstancetexs (\a b -> a {_handleCOMPinstancetexs = b})
handleCOMPinstancetz :: Lens' COMP (Maybe (Tree ByteString))
handleCOMPinstancetz = lens _handleCOMPinstancetz (\a b -> a {_handleCOMPinstancetz = b})

nullCOMPinstancea :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancea = lens _nullCOMPinstancea (\a b -> a {_nullCOMPinstancea = b})
nullCOMPinstancerotupy :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancerotupy = lens _nullCOMPinstancerotupy (\a b -> a {_nullCOMPinstancerotupy = b})
nullCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPextname1 = lens _nullCOMPextname1 (\a b -> a {_nullCOMPextname1 = b})
nullCOMPinstancerottoz :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancerottoz = lens _nullCOMPinstancerottoz (\a b -> a {_nullCOMPinstancerottoz = b})
nullCOMPpickpriority :: Lens' COMP (Maybe (Tree Float))
nullCOMPpickpriority = lens _nullCOMPpickpriority (\a b -> a {_nullCOMPpickpriority = b})
nullCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
nullCOMPpromoteextension4 = lens _nullCOMPpromoteextension4 (\a b -> a {_nullCOMPpromoteextension4 = b})
nullCOMPinstanceb :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstanceb = lens _nullCOMPinstanceb (\a b -> a {_nullCOMPinstanceb = b})
nullCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPextension4 = lens _nullCOMPextension4 (\a b -> a {_nullCOMPextension4 = b})
nullCOMPpathorient :: Lens' COMP (Maybe (Tree Bool))
nullCOMPpathorient = lens _nullCOMPpathorient (\a b -> a {_nullCOMPpathorient = b})
nullCOMProll :: Lens' COMP (Maybe (Tree Float))
nullCOMProll = lens _nullCOMProll (\a b -> a {_nullCOMProll = b})
nullCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
nullCOMPnodeview = lens _nullCOMPnodeview (\a b -> a {_nullCOMPnodeview = b})
nullCOMPinstancepx :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancepx = lens _nullCOMPinstancepx (\a b -> a {_nullCOMPinstancepx = b})
nullCOMPpt :: Lens' COMP (Vec3)
nullCOMPpt = lens _nullCOMPpt (\a b -> a {_nullCOMPpt = b})
nullCOMPinstancetexanisotropy :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstancetexanisotropy = lens _nullCOMPinstancetexanisotropy (\a b -> a {_nullCOMPinstancetexanisotropy = b})
nullCOMPprioritymethod :: Lens' COMP (Maybe (Tree Int))
nullCOMPprioritymethod = lens _nullCOMPprioritymethod (\a b -> a {_nullCOMPprioritymethod = b})
nullCOMPinstancefirstrow :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstancefirstrow = lens _nullCOMPinstancefirstrow (\a b -> a {_nullCOMPinstancefirstrow = b})
nullCOMPbank :: Lens' COMP (Maybe (Tree Float))
nullCOMPbank = lens _nullCOMPbank (\a b -> a {_nullCOMPbank = b})
nullCOMPinstancety :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancety = lens _nullCOMPinstancety (\a b -> a {_nullCOMPinstancety = b})
nullCOMPinstancery :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancery = lens _nullCOMPinstancery (\a b -> a {_nullCOMPinstancery = b})
nullCOMPp :: Lens' COMP (Vec3)
nullCOMPp = lens _nullCOMPp (\a b -> a {_nullCOMPp = b})
nullCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
nullCOMPsavebackup = lens _nullCOMPsavebackup (\a b -> a {_nullCOMPsavebackup = b})
nullCOMPpos :: Lens' COMP (Maybe (Tree Float))
nullCOMPpos = lens _nullCOMPpos (\a b -> a {_nullCOMPpos = b})
nullCOMPpathsop :: Lens' COMP (Maybe (Tree SOP))
nullCOMPpathsop = lens _nullCOMPpathsop (\a b -> a {_nullCOMPpathsop = b})
nullCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPsubcompname = lens _nullCOMPsubcompname (\a b -> a {_nullCOMPsubcompname = b})
nullCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPextname3 = lens _nullCOMPextname3 (\a b -> a {_nullCOMPextname3 = b})
nullCOMPinstancetexfilter :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstancetexfilter = lens _nullCOMPinstancetexfilter (\a b -> a {_nullCOMPinstancetexfilter = b})
nullCOMPpr :: Lens' COMP (Vec3)
nullCOMPpr = lens _nullCOMPpr (\a b -> a {_nullCOMPpr = b})
nullCOMPinstanceg :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstanceg = lens _nullCOMPinstanceg (\a b -> a {_nullCOMPinstanceg = b})
nullCOMPinstancetexmode :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstancetexmode = lens _nullCOMPinstancetexmode (\a b -> a {_nullCOMPinstancetexmode = b})
nullCOMPwcolor :: Lens' COMP (Vec3)
nullCOMPwcolor = lens _nullCOMPwcolor (\a b -> a {_nullCOMPwcolor = b})
nullCOMPinstancepy :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancepy = lens _nullCOMPinstancepy (\a b -> a {_nullCOMPinstancepy = b})
nullCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
nullCOMPreloadtoxonstart = lens _nullCOMPreloadtoxonstart (\a b -> a {_nullCOMPreloadtoxonstart = b})
nullCOMPinstancesz :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancesz = lens _nullCOMPinstancesz (\a b -> a {_nullCOMPinstancesz = b})
nullCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPexternaltox = lens _nullCOMPexternaltox (\a b -> a {_nullCOMPexternaltox = b})
nullCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
nullCOMPreinitextensions = lens _nullCOMPreinitextensions (\a b -> a {_nullCOMPreinitextensions = b})
nullCOMPinstancesy :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancesy = lens _nullCOMPinstancesy (\a b -> a {_nullCOMPinstancesy = b})
nullCOMPnuminstances :: Lens' COMP (Maybe (Tree Int))
nullCOMPnuminstances = lens _nullCOMPnuminstances (\a b -> a {_nullCOMPnuminstances = b})
nullCOMPup :: Lens' COMP (Vec3)
nullCOMPup = lens _nullCOMPup (\a b -> a {_nullCOMPup = b})
nullCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
nullCOMPpromoteextension1 = lens _nullCOMPpromoteextension1 (\a b -> a {_nullCOMPpromoteextension1 = b})
nullCOMPinstrord :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstrord = lens _nullCOMPinstrord (\a b -> a {_nullCOMPinstrord = b})
nullCOMPpxord :: Lens' COMP (Maybe (Tree Int))
nullCOMPpxord = lens _nullCOMPpxord (\a b -> a {_nullCOMPpxord = b})
nullCOMPinstancetexindex :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancetexindex = lens _nullCOMPinstancetexindex (\a b -> a {_nullCOMPinstancetexindex = b})
nullCOMPinstancerottox :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancerottox = lens _nullCOMPinstancerottox (\a b -> a {_nullCOMPinstancerottox = b})
nullCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPparentshortcut = lens _nullCOMPparentshortcut (\a b -> a {_nullCOMPparentshortcut = b})
nullCOMPinstancesx :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancesx = lens _nullCOMPinstancesx (\a b -> a {_nullCOMPinstancesx = b})
nullCOMPinstancing :: Lens' COMP (Maybe (Tree Bool))
nullCOMPinstancing = lens _nullCOMPinstancing (\a b -> a {_nullCOMPinstancing = b})
nullCOMPinstancetexextendu :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstancetexextendu = lens _nullCOMPinstancetexextendu (\a b -> a {_nullCOMPinstancetexextendu = b})
nullCOMPprord :: Lens' COMP (Maybe (Tree Int))
nullCOMPprord = lens _nullCOMPprord (\a b -> a {_nullCOMPprord = b})
nullCOMPlookup :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPlookup = lens _nullCOMPlookup (\a b -> a {_nullCOMPlookup = b})
nullCOMPinstancerz :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancerz = lens _nullCOMPinstancerz (\a b -> a {_nullCOMPinstancerz = b})
nullCOMPt :: Lens' COMP (Vec3)
nullCOMPt = lens _nullCOMPt (\a b -> a {_nullCOMPt = b})
nullCOMPps :: Lens' COMP (Vec3)
nullCOMPps = lens _nullCOMPps (\a b -> a {_nullCOMPps = b})
nullCOMPinstanceu :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstanceu = lens _nullCOMPinstanceu (\a b -> a {_nullCOMPinstanceu = b})
nullCOMPrender :: Lens' COMP (Maybe (Tree Bool))
nullCOMPrender = lens _nullCOMPrender (\a b -> a {_nullCOMPrender = b})
nullCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPextension1 = lens _nullCOMPextension1 (\a b -> a {_nullCOMPextension1 = b})
nullCOMPinstancetexextendv :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstancetexextendv = lens _nullCOMPinstancetexextendv (\a b -> a {_nullCOMPinstancetexextendv = b})
nullCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPextension3 = lens _nullCOMPextension3 (\a b -> a {_nullCOMPextension3 = b})
nullCOMPpxform :: Lens' COMP (Maybe (Tree Bool))
nullCOMPpxform = lens _nullCOMPpxform (\a b -> a {_nullCOMPpxform = b})
nullCOMPmaterial :: Lens' COMP (Maybe (Tree MAT))
nullCOMPmaterial = lens _nullCOMPmaterial (\a b -> a {_nullCOMPmaterial = b})
nullCOMPinstancer :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancer = lens _nullCOMPinstancer (\a b -> a {_nullCOMPinstancer = b})
nullCOMPr :: Lens' COMP (Vec3)
nullCOMPr = lens _nullCOMPr (\a b -> a {_nullCOMPr = b})
nullCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
nullCOMPenablecloning = lens _nullCOMPenablecloning (\a b -> a {_nullCOMPenablecloning = b})
nullCOMPinstancecolormode :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstancecolormode = lens _nullCOMPinstancecolormode (\a b -> a {_nullCOMPinstancecolormode = b})
nullCOMPpp :: Lens' COMP (Vec3)
nullCOMPpp = lens _nullCOMPpp (\a b -> a {_nullCOMPpp = b})
nullCOMPinstancew :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancew = lens _nullCOMPinstancew (\a b -> a {_nullCOMPinstancew = b})
nullCOMPinstancerx :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancerx = lens _nullCOMPinstancerx (\a b -> a {_nullCOMPinstancerx = b})
nullCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPextname2 = lens _nullCOMPextname2 (\a b -> a {_nullCOMPextname2 = b})
nullCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPopshortcut = lens _nullCOMPopshortcut (\a b -> a {_nullCOMPopshortcut = b})
nullCOMPpcommit :: Lens' COMP (Maybe (Tree Bool))
nullCOMPpcommit = lens _nullCOMPpcommit (\a b -> a {_nullCOMPpcommit = b})
nullCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
nullCOMPpromoteextension2 = lens _nullCOMPpromoteextension2 (\a b -> a {_nullCOMPpromoteextension2 = b})
nullCOMPinstanceorder :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstanceorder = lens _nullCOMPinstanceorder (\a b -> a {_nullCOMPinstanceorder = b})
nullCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
nullCOMPenablecloningpulse = lens _nullCOMPenablecloningpulse (\a b -> a {_nullCOMPenablecloningpulse = b})
nullCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
nullCOMPreinitnet = lens _nullCOMPreinitnet (\a b -> a {_nullCOMPreinitnet = b})
nullCOMPinstancemode :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstancemode = lens _nullCOMPinstancemode (\a b -> a {_nullCOMPinstancemode = b})
nullCOMPinstancerottoorder :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstancerottoorder = lens _nullCOMPinstancerottoorder (\a b -> a {_nullCOMPinstancerottoorder = b})
nullCOMPinstancepz :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancepz = lens _nullCOMPinstancepz (\a b -> a {_nullCOMPinstancepz = b})
nullCOMPinstancetexs :: Lens' COMP (Maybe (Tree TOP))
nullCOMPinstancetexs = lens _nullCOMPinstancetexs (\a b -> a {_nullCOMPinstancetexs = b})
nullCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
nullCOMPpromoteextension3 = lens _nullCOMPpromoteextension3 (\a b -> a {_nullCOMPpromoteextension3 = b})
nullCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPextname4 = lens _nullCOMPextname4 (\a b -> a {_nullCOMPextname4 = b})
nullCOMPinstancetx :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancetx = lens _nullCOMPinstancetx (\a b -> a {_nullCOMPinstancetx = b})
nullCOMPinstancerotupz :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancerotupz = lens _nullCOMPinstancerotupz (\a b -> a {_nullCOMPinstancerotupz = b})
nullCOMPrord :: Lens' COMP (Maybe (Tree Int))
nullCOMPrord = lens _nullCOMPrord (\a b -> a {_nullCOMPrord = b})
nullCOMPpreset :: Lens' COMP (Maybe (Tree Bool))
nullCOMPpreset = lens _nullCOMPpreset (\a b -> a {_nullCOMPpreset = b})
nullCOMPxord :: Lens' COMP (Maybe (Tree Int))
nullCOMPxord = lens _nullCOMPxord (\a b -> a {_nullCOMPxord = b})
nullCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPextension2 = lens _nullCOMPextension2 (\a b -> a {_nullCOMPextension2 = b})
nullCOMPs :: Lens' COMP (Vec3)
nullCOMPs = lens _nullCOMPs (\a b -> a {_nullCOMPs = b})
nullCOMPclone :: Lens' COMP (Maybe (Tree COMP))
nullCOMPclone = lens _nullCOMPclone (\a b -> a {_nullCOMPclone = b})
nullCOMPdrawpriority :: Lens' COMP (Maybe (Tree Float))
nullCOMPdrawpriority = lens _nullCOMPdrawpriority (\a b -> a {_nullCOMPdrawpriority = b})
nullCOMPinstxord :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstxord = lens _nullCOMPinstxord (\a b -> a {_nullCOMPinstxord = b})
nullCOMPinstancerotupx :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancerotupx = lens _nullCOMPinstancerotupx (\a b -> a {_nullCOMPinstancerotupx = b})
nullCOMPinstancetexextendw :: Lens' COMP (Maybe (Tree Int))
nullCOMPinstancetexextendw = lens _nullCOMPinstancetexextendw (\a b -> a {_nullCOMPinstancetexextendw = b})
nullCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
nullCOMPloadondemand = lens _nullCOMPloadondemand (\a b -> a {_nullCOMPloadondemand = b})
nullCOMPinstancerottoy :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancerottoy = lens _nullCOMPinstancerottoy (\a b -> a {_nullCOMPinstancerottoy = b})
nullCOMPinstancev :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancev = lens _nullCOMPinstancev (\a b -> a {_nullCOMPinstancev = b})
nullCOMPinstancetz :: Lens' COMP (Maybe (Tree ByteString))
nullCOMPinstancetz = lens _nullCOMPinstancetz (\a b -> a {_nullCOMPinstancetz = b})

sharedmeminCOMPinstancea :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancea = lens _sharedmeminCOMPinstancea (\a b -> a {_sharedmeminCOMPinstancea = b})
sharedmeminCOMPinstancerotupy :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancerotupy = lens _sharedmeminCOMPinstancerotupy (\a b -> a {_sharedmeminCOMPinstancerotupy = b})
sharedmeminCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPextname1 = lens _sharedmeminCOMPextname1 (\a b -> a {_sharedmeminCOMPextname1 = b})
sharedmeminCOMPinstancerottoz :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancerottoz = lens _sharedmeminCOMPinstancerottoz (\a b -> a {_sharedmeminCOMPinstancerottoz = b})
sharedmeminCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPpromoteextension4 = lens _sharedmeminCOMPpromoteextension4 (\a b -> a {_sharedmeminCOMPpromoteextension4 = b})
sharedmeminCOMPinstanceb :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstanceb = lens _sharedmeminCOMPinstanceb (\a b -> a {_sharedmeminCOMPinstanceb = b})
sharedmeminCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPextension4 = lens _sharedmeminCOMPextension4 (\a b -> a {_sharedmeminCOMPextension4 = b})
sharedmeminCOMPpathorient :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPpathorient = lens _sharedmeminCOMPpathorient (\a b -> a {_sharedmeminCOMPpathorient = b})
sharedmeminCOMProll :: Lens' COMP (Maybe (Tree Float))
sharedmeminCOMProll = lens _sharedmeminCOMProll (\a b -> a {_sharedmeminCOMProll = b})
sharedmeminCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPnodeview = lens _sharedmeminCOMPnodeview (\a b -> a {_sharedmeminCOMPnodeview = b})
sharedmeminCOMPinstancepx :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancepx = lens _sharedmeminCOMPinstancepx (\a b -> a {_sharedmeminCOMPinstancepx = b})
sharedmeminCOMPpt :: Lens' COMP (Vec3)
sharedmeminCOMPpt = lens _sharedmeminCOMPpt (\a b -> a {_sharedmeminCOMPpt = b})
sharedmeminCOMPinstancetexanisotropy :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstancetexanisotropy = lens _sharedmeminCOMPinstancetexanisotropy (\a b -> a {_sharedmeminCOMPinstancetexanisotropy = b})
sharedmeminCOMPprioritymethod :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPprioritymethod = lens _sharedmeminCOMPprioritymethod (\a b -> a {_sharedmeminCOMPprioritymethod = b})
sharedmeminCOMPinstancefirstrow :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstancefirstrow = lens _sharedmeminCOMPinstancefirstrow (\a b -> a {_sharedmeminCOMPinstancefirstrow = b})
sharedmeminCOMPbank :: Lens' COMP (Maybe (Tree Float))
sharedmeminCOMPbank = lens _sharedmeminCOMPbank (\a b -> a {_sharedmeminCOMPbank = b})
sharedmeminCOMPinstancety :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancety = lens _sharedmeminCOMPinstancety (\a b -> a {_sharedmeminCOMPinstancety = b})
sharedmeminCOMPinstancery :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancery = lens _sharedmeminCOMPinstancery (\a b -> a {_sharedmeminCOMPinstancery = b})
sharedmeminCOMPp :: Lens' COMP (Vec3)
sharedmeminCOMPp = lens _sharedmeminCOMPp (\a b -> a {_sharedmeminCOMPp = b})
sharedmeminCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPsavebackup = lens _sharedmeminCOMPsavebackup (\a b -> a {_sharedmeminCOMPsavebackup = b})
sharedmeminCOMPpos :: Lens' COMP (Maybe (Tree Float))
sharedmeminCOMPpos = lens _sharedmeminCOMPpos (\a b -> a {_sharedmeminCOMPpos = b})
sharedmeminCOMPpathsop :: Lens' COMP (Maybe (Tree SOP))
sharedmeminCOMPpathsop = lens _sharedmeminCOMPpathsop (\a b -> a {_sharedmeminCOMPpathsop = b})
sharedmeminCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPsubcompname = lens _sharedmeminCOMPsubcompname (\a b -> a {_sharedmeminCOMPsubcompname = b})
sharedmeminCOMPpickpriority :: Lens' COMP (Maybe (Tree Float))
sharedmeminCOMPpickpriority = lens _sharedmeminCOMPpickpriority (\a b -> a {_sharedmeminCOMPpickpriority = b})
sharedmeminCOMPinstancetexfilter :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstancetexfilter = lens _sharedmeminCOMPinstancetexfilter (\a b -> a {_sharedmeminCOMPinstancetexfilter = b})
sharedmeminCOMPpr :: Lens' COMP (Vec3)
sharedmeminCOMPpr = lens _sharedmeminCOMPpr (\a b -> a {_sharedmeminCOMPpr = b})
sharedmeminCOMPinstanceg :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstanceg = lens _sharedmeminCOMPinstanceg (\a b -> a {_sharedmeminCOMPinstanceg = b})
sharedmeminCOMPinstancetexmode :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstancetexmode = lens _sharedmeminCOMPinstancetexmode (\a b -> a {_sharedmeminCOMPinstancetexmode = b})
sharedmeminCOMPwcolor :: Lens' COMP (Vec3)
sharedmeminCOMPwcolor = lens _sharedmeminCOMPwcolor (\a b -> a {_sharedmeminCOMPwcolor = b})
sharedmeminCOMPinstancepy :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancepy = lens _sharedmeminCOMPinstancepy (\a b -> a {_sharedmeminCOMPinstancepy = b})
sharedmeminCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPreloadtoxonstart = lens _sharedmeminCOMPreloadtoxonstart (\a b -> a {_sharedmeminCOMPreloadtoxonstart = b})
sharedmeminCOMPinstancesz :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancesz = lens _sharedmeminCOMPinstancesz (\a b -> a {_sharedmeminCOMPinstancesz = b})
sharedmeminCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPexternaltox = lens _sharedmeminCOMPexternaltox (\a b -> a {_sharedmeminCOMPexternaltox = b})
sharedmeminCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPparentshortcut = lens _sharedmeminCOMPparentshortcut (\a b -> a {_sharedmeminCOMPparentshortcut = b})
sharedmeminCOMPinstancesy :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancesy = lens _sharedmeminCOMPinstancesy (\a b -> a {_sharedmeminCOMPinstancesy = b})
sharedmeminCOMPnuminstances :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPnuminstances = lens _sharedmeminCOMPnuminstances (\a b -> a {_sharedmeminCOMPnuminstances = b})
sharedmeminCOMPup :: Lens' COMP (Vec3)
sharedmeminCOMPup = lens _sharedmeminCOMPup (\a b -> a {_sharedmeminCOMPup = b})
sharedmeminCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPpromoteextension1 = lens _sharedmeminCOMPpromoteextension1 (\a b -> a {_sharedmeminCOMPpromoteextension1 = b})
sharedmeminCOMPinstrord :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstrord = lens _sharedmeminCOMPinstrord (\a b -> a {_sharedmeminCOMPinstrord = b})
sharedmeminCOMPpxord :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPpxord = lens _sharedmeminCOMPpxord (\a b -> a {_sharedmeminCOMPpxord = b})
sharedmeminCOMPinstancetexindex :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancetexindex = lens _sharedmeminCOMPinstancetexindex (\a b -> a {_sharedmeminCOMPinstancetexindex = b})
sharedmeminCOMPinstancerottox :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancerottox = lens _sharedmeminCOMPinstancerottox (\a b -> a {_sharedmeminCOMPinstancerottox = b})
sharedmeminCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPreinitextensions = lens _sharedmeminCOMPreinitextensions (\a b -> a {_sharedmeminCOMPreinitextensions = b})
sharedmeminCOMPinstancesx :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancesx = lens _sharedmeminCOMPinstancesx (\a b -> a {_sharedmeminCOMPinstancesx = b})
sharedmeminCOMPinstancing :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPinstancing = lens _sharedmeminCOMPinstancing (\a b -> a {_sharedmeminCOMPinstancing = b})
sharedmeminCOMPname :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPname = lens _sharedmeminCOMPname (\a b -> a {_sharedmeminCOMPname = b})
sharedmeminCOMPprord :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPprord = lens _sharedmeminCOMPprord (\a b -> a {_sharedmeminCOMPprord = b})
sharedmeminCOMPlookup :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPlookup = lens _sharedmeminCOMPlookup (\a b -> a {_sharedmeminCOMPlookup = b})
sharedmeminCOMPinstancerz :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancerz = lens _sharedmeminCOMPinstancerz (\a b -> a {_sharedmeminCOMPinstancerz = b})
sharedmeminCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPextension2 = lens _sharedmeminCOMPextension2 (\a b -> a {_sharedmeminCOMPextension2 = b})
sharedmeminCOMPdrawpriority :: Lens' COMP (Maybe (Tree Float))
sharedmeminCOMPdrawpriority = lens _sharedmeminCOMPdrawpriority (\a b -> a {_sharedmeminCOMPdrawpriority = b})
sharedmeminCOMPinstanceu :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstanceu = lens _sharedmeminCOMPinstanceu (\a b -> a {_sharedmeminCOMPinstanceu = b})
sharedmeminCOMPrender :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPrender = lens _sharedmeminCOMPrender (\a b -> a {_sharedmeminCOMPrender = b})
sharedmeminCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPextension1 = lens _sharedmeminCOMPextension1 (\a b -> a {_sharedmeminCOMPextension1 = b})
sharedmeminCOMPps :: Lens' COMP (Vec3)
sharedmeminCOMPps = lens _sharedmeminCOMPps (\a b -> a {_sharedmeminCOMPps = b})
sharedmeminCOMPinstancetexextendv :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstancetexextendv = lens _sharedmeminCOMPinstancetexextendv (\a b -> a {_sharedmeminCOMPinstancetexextendv = b})
sharedmeminCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPextension3 = lens _sharedmeminCOMPextension3 (\a b -> a {_sharedmeminCOMPextension3 = b})
sharedmeminCOMPpxform :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPpxform = lens _sharedmeminCOMPpxform (\a b -> a {_sharedmeminCOMPpxform = b})
sharedmeminCOMPmaterial :: Lens' COMP (Maybe (Tree MAT))
sharedmeminCOMPmaterial = lens _sharedmeminCOMPmaterial (\a b -> a {_sharedmeminCOMPmaterial = b})
sharedmeminCOMPinstancer :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancer = lens _sharedmeminCOMPinstancer (\a b -> a {_sharedmeminCOMPinstancer = b})
sharedmeminCOMPr :: Lens' COMP (Vec3)
sharedmeminCOMPr = lens _sharedmeminCOMPr (\a b -> a {_sharedmeminCOMPr = b})
sharedmeminCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPenablecloning = lens _sharedmeminCOMPenablecloning (\a b -> a {_sharedmeminCOMPenablecloning = b})
sharedmeminCOMPinstancecolormode :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstancecolormode = lens _sharedmeminCOMPinstancecolormode (\a b -> a {_sharedmeminCOMPinstancecolormode = b})
sharedmeminCOMPpp :: Lens' COMP (Vec3)
sharedmeminCOMPpp = lens _sharedmeminCOMPpp (\a b -> a {_sharedmeminCOMPpp = b})
sharedmeminCOMPinstancew :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancew = lens _sharedmeminCOMPinstancew (\a b -> a {_sharedmeminCOMPinstancew = b})
sharedmeminCOMPinstancerx :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancerx = lens _sharedmeminCOMPinstancerx (\a b -> a {_sharedmeminCOMPinstancerx = b})
sharedmeminCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPextname2 = lens _sharedmeminCOMPextname2 (\a b -> a {_sharedmeminCOMPextname2 = b})
sharedmeminCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPopshortcut = lens _sharedmeminCOMPopshortcut (\a b -> a {_sharedmeminCOMPopshortcut = b})
sharedmeminCOMPpcommit :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPpcommit = lens _sharedmeminCOMPpcommit (\a b -> a {_sharedmeminCOMPpcommit = b})
sharedmeminCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPpromoteextension2 = lens _sharedmeminCOMPpromoteextension2 (\a b -> a {_sharedmeminCOMPpromoteextension2 = b})
sharedmeminCOMPinstanceorder :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstanceorder = lens _sharedmeminCOMPinstanceorder (\a b -> a {_sharedmeminCOMPinstanceorder = b})
sharedmeminCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPenablecloningpulse = lens _sharedmeminCOMPenablecloningpulse (\a b -> a {_sharedmeminCOMPenablecloningpulse = b})
sharedmeminCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPreinitnet = lens _sharedmeminCOMPreinitnet (\a b -> a {_sharedmeminCOMPreinitnet = b})
sharedmeminCOMPinstancetexextendu :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstancetexextendu = lens _sharedmeminCOMPinstancetexextendu (\a b -> a {_sharedmeminCOMPinstancetexextendu = b})
sharedmeminCOMPinstancemode :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstancemode = lens _sharedmeminCOMPinstancemode (\a b -> a {_sharedmeminCOMPinstancemode = b})
sharedmeminCOMPinstancerottoorder :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstancerottoorder = lens _sharedmeminCOMPinstancerottoorder (\a b -> a {_sharedmeminCOMPinstancerottoorder = b})
sharedmeminCOMPinstancepz :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancepz = lens _sharedmeminCOMPinstancepz (\a b -> a {_sharedmeminCOMPinstancepz = b})
sharedmeminCOMPinstancetexs :: Lens' COMP (Maybe (Tree TOP))
sharedmeminCOMPinstancetexs = lens _sharedmeminCOMPinstancetexs (\a b -> a {_sharedmeminCOMPinstancetexs = b})
sharedmeminCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPpromoteextension3 = lens _sharedmeminCOMPpromoteextension3 (\a b -> a {_sharedmeminCOMPpromoteextension3 = b})
sharedmeminCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPextname4 = lens _sharedmeminCOMPextname4 (\a b -> a {_sharedmeminCOMPextname4 = b})
sharedmeminCOMPinstancetx :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancetx = lens _sharedmeminCOMPinstancetx (\a b -> a {_sharedmeminCOMPinstancetx = b})
sharedmeminCOMPinstancerotupz :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancerotupz = lens _sharedmeminCOMPinstancerotupz (\a b -> a {_sharedmeminCOMPinstancerotupz = b})
sharedmeminCOMPrord :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPrord = lens _sharedmeminCOMPrord (\a b -> a {_sharedmeminCOMPrord = b})
sharedmeminCOMPpreset :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPpreset = lens _sharedmeminCOMPpreset (\a b -> a {_sharedmeminCOMPpreset = b})
sharedmeminCOMPxord :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPxord = lens _sharedmeminCOMPxord (\a b -> a {_sharedmeminCOMPxord = b})
sharedmeminCOMPt :: Lens' COMP (Vec3)
sharedmeminCOMPt = lens _sharedmeminCOMPt (\a b -> a {_sharedmeminCOMPt = b})
sharedmeminCOMPs :: Lens' COMP (Vec3)
sharedmeminCOMPs = lens _sharedmeminCOMPs (\a b -> a {_sharedmeminCOMPs = b})
sharedmeminCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPextname3 = lens _sharedmeminCOMPextname3 (\a b -> a {_sharedmeminCOMPextname3 = b})
sharedmeminCOMPclone :: Lens' COMP (Maybe (Tree COMP))
sharedmeminCOMPclone = lens _sharedmeminCOMPclone (\a b -> a {_sharedmeminCOMPclone = b})
sharedmeminCOMPinstxord :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstxord = lens _sharedmeminCOMPinstxord (\a b -> a {_sharedmeminCOMPinstxord = b})
sharedmeminCOMPinstancerotupx :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancerotupx = lens _sharedmeminCOMPinstancerotupx (\a b -> a {_sharedmeminCOMPinstancerotupx = b})
sharedmeminCOMPinstancetexextendw :: Lens' COMP (Maybe (Tree Int))
sharedmeminCOMPinstancetexextendw = lens _sharedmeminCOMPinstancetexextendw (\a b -> a {_sharedmeminCOMPinstancetexextendw = b})
sharedmeminCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
sharedmeminCOMPloadondemand = lens _sharedmeminCOMPloadondemand (\a b -> a {_sharedmeminCOMPloadondemand = b})
sharedmeminCOMPinstancerottoy :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancerottoy = lens _sharedmeminCOMPinstancerottoy (\a b -> a {_sharedmeminCOMPinstancerottoy = b})
sharedmeminCOMPinstancev :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancev = lens _sharedmeminCOMPinstancev (\a b -> a {_sharedmeminCOMPinstancev = b})
sharedmeminCOMPinstancetz :: Lens' COMP (Maybe (Tree ByteString))
sharedmeminCOMPinstancetz = lens _sharedmeminCOMPinstancetz (\a b -> a {_sharedmeminCOMPinstancetz = b})

lightCOMPprojection :: Lens' COMP (Maybe (Tree Int))
lightCOMPprojection = lens _lightCOMPprojection (\a b -> a {_lightCOMPprojection = b})
lightCOMPviewanglemethod :: Lens' COMP (Maybe (Tree Int))
lightCOMPviewanglemethod = lens _lightCOMPviewanglemethod (\a b -> a {_lightCOMPviewanglemethod = b})
lightCOMPprojmap :: Lens' COMP (Maybe (Tree TOP))
lightCOMPprojmap = lens _lightCOMPprojmap (\a b -> a {_lightCOMPprojmap = b})
lightCOMPlightsize2 :: Lens' COMP (Maybe (Tree Float))
lightCOMPlightsize2 = lens _lightCOMPlightsize2 (\a b -> a {_lightCOMPlightsize2 = b})
lightCOMPfogcolor :: Lens' COMP (Vec3)
lightCOMPfogcolor = lens _lightCOMPfogcolor (\a b -> a {_lightCOMPfogcolor = b})
lightCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPextname1 = lens _lightCOMPextname1 (\a b -> a {_lightCOMPextname1 = b})
lightCOMPbackfacelit :: Lens' COMP (Maybe (Tree Int))
lightCOMPbackfacelit = lens _lightCOMPbackfacelit (\a b -> a {_lightCOMPbackfacelit = b})
lightCOMPattenuationexp :: Lens' COMP (Maybe (Tree Float))
lightCOMPattenuationexp = lens _lightCOMPattenuationexp (\a b -> a {_lightCOMPattenuationexp = b})
lightCOMPzbounds2 :: Lens' COMP (Maybe (Tree Float))
lightCOMPzbounds2 = lens _lightCOMPzbounds2 (\a b -> a {_lightCOMPzbounds2 = b})
lightCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
lightCOMPpromoteextension4 = lens _lightCOMPpromoteextension4 (\a b -> a {_lightCOMPpromoteextension4 = b})
lightCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPextension4 = lens _lightCOMPextension4 (\a b -> a {_lightCOMPextension4 = b})
lightCOMPpathorient :: Lens' COMP (Maybe (Tree Bool))
lightCOMPpathorient = lens _lightCOMPpathorient (\a b -> a {_lightCOMPpathorient = b})
lightCOMProll :: Lens' COMP (Maybe (Tree Float))
lightCOMProll = lens _lightCOMProll (\a b -> a {_lightCOMProll = b})
lightCOMPnodeview :: Lens' COMP (Maybe (Tree Int))
lightCOMPnodeview = lens _lightCOMPnodeview (\a b -> a {_lightCOMPnodeview = b})
lightCOMPpt :: Lens' COMP (Vec3)
lightCOMPpt = lens _lightCOMPpt (\a b -> a {_lightCOMPpt = b})
lightCOMPclone :: Lens' COMP (Maybe (Tree COMP))
lightCOMPclone = lens _lightCOMPclone (\a b -> a {_lightCOMPclone = b})
lightCOMPprioritymethod :: Lens' COMP (Maybe (Tree Int))
lightCOMPprioritymethod = lens _lightCOMPprioritymethod (\a b -> a {_lightCOMPprioritymethod = b})
lightCOMPbank :: Lens' COMP (Maybe (Tree Float))
lightCOMPbank = lens _lightCOMPbank (\a b -> a {_lightCOMPbank = b})
lightCOMPaspectcorrect :: Lens' COMP (Maybe (Tree Bool))
lightCOMPaspectcorrect = lens _lightCOMPaspectcorrect (\a b -> a {_lightCOMPaspectcorrect = b})
lightCOMPprojectionblend :: Lens' COMP (Maybe (Tree Float))
lightCOMPprojectionblend = lens _lightCOMPprojectionblend (\a b -> a {_lightCOMPprojectionblend = b})
lightCOMPfov :: Lens' COMP (Maybe (Tree Float))
lightCOMPfov = lens _lightCOMPfov (\a b -> a {_lightCOMPfov = b})
lightCOMPp :: Lens' COMP (Vec3)
lightCOMPp = lens _lightCOMPp (\a b -> a {_lightCOMPp = b})
lightCOMPprojmapextendw :: Lens' COMP (Maybe (Tree Int))
lightCOMPprojmapextendw = lens _lightCOMPprojmapextendw (\a b -> a {_lightCOMPprojmapextendw = b})
lightCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
lightCOMPsavebackup = lens _lightCOMPsavebackup (\a b -> a {_lightCOMPsavebackup = b})
lightCOMPpolygonoffsetunits :: Lens' COMP (Maybe (Tree Float))
lightCOMPpolygonoffsetunits = lens _lightCOMPpolygonoffsetunits (\a b -> a {_lightCOMPpolygonoffsetunits = b})
lightCOMPshadowresolution1 :: Lens' COMP (Maybe (Tree Int))
lightCOMPshadowresolution1 = lens _lightCOMPshadowresolution1 (\a b -> a {_lightCOMPshadowresolution1 = b})
lightCOMPpos :: Lens' COMP (Maybe (Tree Float))
lightCOMPpos = lens _lightCOMPpos (\a b -> a {_lightCOMPpos = b})
lightCOMPpathsop :: Lens' COMP (Maybe (Tree SOP))
lightCOMPpathsop = lens _lightCOMPpathsop (\a b -> a {_lightCOMPpathsop = b})
lightCOMPuseconeforfov :: Lens' COMP (Maybe (Tree Bool))
lightCOMPuseconeforfov = lens _lightCOMPuseconeforfov (\a b -> a {_lightCOMPuseconeforfov = b})
lightCOMPmaxshadowsoftness :: Lens' COMP (Maybe (Tree Float))
lightCOMPmaxshadowsoftness = lens _lightCOMPmaxshadowsoftness (\a b -> a {_lightCOMPmaxshadowsoftness = b})
lightCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPextname3 = lens _lightCOMPextname3 (\a b -> a {_lightCOMPextname3 = b})
lightCOMPfogalpha :: Lens' COMP (Maybe (Tree Float))
lightCOMPfogalpha = lens _lightCOMPfogalpha (\a b -> a {_lightCOMPfogalpha = b})
lightCOMPpr :: Lens' COMP (Vec3)
lightCOMPpr = lens _lightCOMPpr (\a b -> a {_lightCOMPpr = b})
lightCOMPwcolor :: Lens' COMP (Vec3)
lightCOMPwcolor = lens _lightCOMPwcolor (\a b -> a {_lightCOMPwcolor = b})
lightCOMPfocal :: Lens' COMP (Maybe (Tree Float))
lightCOMPfocal = lens _lightCOMPfocal (\a b -> a {_lightCOMPfocal = b})
lightCOMPattenuationend :: Lens' COMP (Maybe (Tree Float))
lightCOMPattenuationend = lens _lightCOMPattenuationend (\a b -> a {_lightCOMPattenuationend = b})
lightCOMPxbounds1 :: Lens' COMP (Maybe (Tree Float))
lightCOMPxbounds1 = lens _lightCOMPxbounds1 (\a b -> a {_lightCOMPxbounds1 = b})
lightCOMPfar :: Lens' COMP (Maybe (Tree Float))
lightCOMPfar = lens _lightCOMPfar (\a b -> a {_lightCOMPfar = b})
lightCOMPprojmapextendv :: Lens' COMP (Maybe (Tree Int))
lightCOMPprojmapextendv = lens _lightCOMPprojmapextendv (\a b -> a {_lightCOMPprojmapextendv = b})
lightCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
lightCOMPreinitextensions = lens _lightCOMPreinitextensions (\a b -> a {_lightCOMPreinitextensions = b})
lightCOMPfogdensity :: Lens' COMP (Maybe (Tree Float))
lightCOMPfogdensity = lens _lightCOMPfogdensity (\a b -> a {_lightCOMPfogdensity = b})
lightCOMPaperture :: Lens' COMP (Maybe (Tree Float))
lightCOMPaperture = lens _lightCOMPaperture (\a b -> a {_lightCOMPaperture = b})
lightCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
lightCOMPpromoteextension1 = lens _lightCOMPpromoteextension1 (\a b -> a {_lightCOMPpromoteextension1 = b})
lightCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPsubcompname = lens _lightCOMPsubcompname (\a b -> a {_lightCOMPsubcompname = b})
lightCOMPxbounds2 :: Lens' COMP (Maybe (Tree Float))
lightCOMPxbounds2 = lens _lightCOMPxbounds2 (\a b -> a {_lightCOMPxbounds2 = b})
lightCOMPup :: Lens' COMP (Vec3)
lightCOMPup = lens _lightCOMPup (\a b -> a {_lightCOMPup = b})
lightCOMPpxord :: Lens' COMP (Maybe (Tree Int))
lightCOMPpxord = lens _lightCOMPpxord (\a b -> a {_lightCOMPpxord = b})
lightCOMPshadowresolution2 :: Lens' COMP (Maybe (Tree Int))
lightCOMPshadowresolution2 = lens _lightCOMPshadowresolution2 (\a b -> a {_lightCOMPshadowresolution2 = b})
lightCOMPpickpriority :: Lens' COMP (Maybe (Tree Float))
lightCOMPpickpriority = lens _lightCOMPpickpriority (\a b -> a {_lightCOMPpickpriority = b})
lightCOMPconedelta :: Lens' COMP (Maybe (Tree Float))
lightCOMPconedelta = lens _lightCOMPconedelta (\a b -> a {_lightCOMPconedelta = b})
lightCOMPps :: Lens' COMP (Vec3)
lightCOMPps = lens _lightCOMPps (\a b -> a {_lightCOMPps = b})
lightCOMPzbounds1 :: Lens' COMP (Maybe (Tree Float))
lightCOMPzbounds1 = lens _lightCOMPzbounds1 (\a b -> a {_lightCOMPzbounds1 = b})
lightCOMPs :: Lens' COMP (Vec3)
lightCOMPs = lens _lightCOMPs (\a b -> a {_lightCOMPs = b})
lightCOMPfiltersamples :: Lens' COMP (Maybe (Tree Int))
lightCOMPfiltersamples = lens _lightCOMPfiltersamples (\a b -> a {_lightCOMPfiltersamples = b})
lightCOMPshadowmap :: Lens' COMP (Maybe (Tree TOP))
lightCOMPshadowmap = lens _lightCOMPshadowmap (\a b -> a {_lightCOMPshadowmap = b})
lightCOMPprojmapanisotropy :: Lens' COMP (Maybe (Tree Int))
lightCOMPprojmapanisotropy = lens _lightCOMPprojmapanisotropy (\a b -> a {_lightCOMPprojmapanisotropy = b})
lightCOMPprord :: Lens' COMP (Maybe (Tree Int))
lightCOMPprord = lens _lightCOMPprord (\a b -> a {_lightCOMPprord = b})
lightCOMPybounds2 :: Lens' COMP (Maybe (Tree Float))
lightCOMPybounds2 = lens _lightCOMPybounds2 (\a b -> a {_lightCOMPybounds2 = b})
lightCOMPlookup :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPlookup = lens _lightCOMPlookup (\a b -> a {_lightCOMPlookup = b})
lightCOMPc :: Lens' COMP (Vec3)
lightCOMPc = lens _lightCOMPc (\a b -> a {_lightCOMPc = b})
lightCOMPattenuationstart :: Lens' COMP (Maybe (Tree Float))
lightCOMPattenuationstart = lens _lightCOMPattenuationstart (\a b -> a {_lightCOMPattenuationstart = b})
lightCOMPt :: Lens' COMP (Vec3)
lightCOMPt = lens _lightCOMPt (\a b -> a {_lightCOMPt = b})
lightCOMPconeroll :: Lens' COMP (Maybe (Tree Float))
lightCOMPconeroll = lens _lightCOMPconeroll (\a b -> a {_lightCOMPconeroll = b})
lightCOMPdrawpriority :: Lens' COMP (Maybe (Tree Float))
lightCOMPdrawpriority = lens _lightCOMPdrawpriority (\a b -> a {_lightCOMPdrawpriority = b})
lightCOMPsearchsteps :: Lens' COMP (Maybe (Tree Int))
lightCOMPsearchsteps = lens _lightCOMPsearchsteps (\a b -> a {_lightCOMPsearchsteps = b})
lightCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
lightCOMPreinitnet = lens _lightCOMPreinitnet (\a b -> a {_lightCOMPreinitnet = b})
lightCOMPwin :: Lens' COMP (Vec2)
lightCOMPwin = lens _lightCOMPwin (\a b -> a {_lightCOMPwin = b})
lightCOMPprojangle :: Lens' COMP (Maybe (Tree Float))
lightCOMPprojangle = lens _lightCOMPprojangle (\a b -> a {_lightCOMPprojangle = b})
lightCOMPrender :: Lens' COMP (Maybe (Tree Bool))
lightCOMPrender = lens _lightCOMPrender (\a b -> a {_lightCOMPrender = b})
lightCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPextension1 = lens _lightCOMPextension1 (\a b -> a {_lightCOMPextension1 = b})
lightCOMPcustomproj :: Lens' COMP (Maybe (Tree DAT))
lightCOMPcustomproj = lens _lightCOMPcustomproj (\a b -> a {_lightCOMPcustomproj = b})
lightCOMPconeangle :: Lens' COMP (Maybe (Tree Float))
lightCOMPconeangle = lens _lightCOMPconeangle (\a b -> a {_lightCOMPconeangle = b})
lightCOMPfog :: Lens' COMP (Maybe (Tree Int))
lightCOMPfog = lens _lightCOMPfog (\a b -> a {_lightCOMPfog = b})
lightCOMPfogfar :: Lens' COMP (Maybe (Tree Float))
lightCOMPfogfar = lens _lightCOMPfogfar (\a b -> a {_lightCOMPfogfar = b})
lightCOMPbgcolor :: Lens' COMP (Vec4)
lightCOMPbgcolor = lens _lightCOMPbgcolor (\a b -> a {_lightCOMPbgcolor = b})
lightCOMPpxform :: Lens' COMP (Maybe (Tree Bool))
lightCOMPpxform = lens _lightCOMPpxform (\a b -> a {_lightCOMPpxform = b})
lightCOMPmaterial :: Lens' COMP (Maybe (Tree MAT))
lightCOMPmaterial = lens _lightCOMPmaterial (\a b -> a {_lightCOMPmaterial = b})
lightCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPextension3 = lens _lightCOMPextension3 (\a b -> a {_lightCOMPextension3 = b})
lightCOMPr :: Lens' COMP (Vec3)
lightCOMPr = lens _lightCOMPr (\a b -> a {_lightCOMPr = b})
lightCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
lightCOMPenablecloning = lens _lightCOMPenablecloning (\a b -> a {_lightCOMPenablecloning = b})
lightCOMPshadowtype :: Lens' COMP (Maybe (Tree Int))
lightCOMPshadowtype = lens _lightCOMPshadowtype (\a b -> a {_lightCOMPshadowtype = b})
lightCOMPpp :: Lens' COMP (Vec3)
lightCOMPpp = lens _lightCOMPpp (\a b -> a {_lightCOMPpp = b})
lightCOMPlightsize1 :: Lens' COMP (Maybe (Tree Float))
lightCOMPlightsize1 = lens _lightCOMPlightsize1 (\a b -> a {_lightCOMPlightsize1 = b})
lightCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPextname2 = lens _lightCOMPextname2 (\a b -> a {_lightCOMPextname2 = b})
lightCOMPpcommit :: Lens' COMP (Maybe (Tree Bool))
lightCOMPpcommit = lens _lightCOMPpcommit (\a b -> a {_lightCOMPpcommit = b})
lightCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
lightCOMPpromoteextension2 = lens _lightCOMPpromoteextension2 (\a b -> a {_lightCOMPpromoteextension2 = b})
lightCOMPprojmapextendu :: Lens' COMP (Maybe (Tree Int))
lightCOMPprojmapextendu = lens _lightCOMPprojmapextendu (\a b -> a {_lightCOMPprojmapextendu = b})
lightCOMPattenuated :: Lens' COMP (Maybe (Tree Bool))
lightCOMPattenuated = lens _lightCOMPattenuated (\a b -> a {_lightCOMPattenuated = b})
lightCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
lightCOMPenablecloningpulse = lens _lightCOMPenablecloningpulse (\a b -> a {_lightCOMPenablecloningpulse = b})
lightCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPparentshortcut = lens _lightCOMPparentshortcut (\a b -> a {_lightCOMPparentshortcut = b})
lightCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
lightCOMPpromoteextension3 = lens _lightCOMPpromoteextension3 (\a b -> a {_lightCOMPpromoteextension3 = b})
lightCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPextname4 = lens _lightCOMPextname4 (\a b -> a {_lightCOMPextname4 = b})
lightCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPexternaltox = lens _lightCOMPexternaltox (\a b -> a {_lightCOMPexternaltox = b})
lightCOMPpolygonoffsetfactor :: Lens' COMP (Maybe (Tree Float))
lightCOMPpolygonoffsetfactor = lens _lightCOMPpolygonoffsetfactor (\a b -> a {_lightCOMPpolygonoffsetfactor = b})
lightCOMPfogmap :: Lens' COMP (Maybe (Tree TOP))
lightCOMPfogmap = lens _lightCOMPfogmap (\a b -> a {_lightCOMPfogmap = b})
lightCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
lightCOMPreloadtoxonstart = lens _lightCOMPreloadtoxonstart (\a b -> a {_lightCOMPreloadtoxonstart = b})
lightCOMPprojmapmode :: Lens' COMP (Maybe (Tree Int))
lightCOMPprojmapmode = lens _lightCOMPprojmapmode (\a b -> a {_lightCOMPprojmapmode = b})
lightCOMPpreset :: Lens' COMP (Maybe (Tree Bool))
lightCOMPpreset = lens _lightCOMPpreset (\a b -> a {_lightCOMPpreset = b})
lightCOMPfognear :: Lens' COMP (Maybe (Tree Float))
lightCOMPfognear = lens _lightCOMPfognear (\a b -> a {_lightCOMPfognear = b})
lightCOMPxord :: Lens' COMP (Maybe (Tree Int))
lightCOMPxord = lens _lightCOMPxord (\a b -> a {_lightCOMPxord = b})
lightCOMPorthowidth :: Lens' COMP (Maybe (Tree Float))
lightCOMPorthowidth = lens _lightCOMPorthowidth (\a b -> a {_lightCOMPorthowidth = b})
lightCOMPnear :: Lens' COMP (Maybe (Tree Float))
lightCOMPnear = lens _lightCOMPnear (\a b -> a {_lightCOMPnear = b})
lightCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPextension2 = lens _lightCOMPextension2 (\a b -> a {_lightCOMPextension2 = b})
lightCOMPfrontfacelit :: Lens' COMP (Maybe (Tree Int))
lightCOMPfrontfacelit = lens _lightCOMPfrontfacelit (\a b -> a {_lightCOMPfrontfacelit = b})
lightCOMPybounds1 :: Lens' COMP (Maybe (Tree Float))
lightCOMPybounds1 = lens _lightCOMPybounds1 (\a b -> a {_lightCOMPybounds1 = b})
lightCOMPprojmapfilter :: Lens' COMP (Maybe (Tree Int))
lightCOMPprojmapfilter = lens _lightCOMPprojmapfilter (\a b -> a {_lightCOMPprojmapfilter = b})
lightCOMPrord :: Lens' COMP (Maybe (Tree Int))
lightCOMPrord = lens _lightCOMPrord (\a b -> a {_lightCOMPrord = b})
lightCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
lightCOMPloadondemand = lens _lightCOMPloadondemand (\a b -> a {_lightCOMPloadondemand = b})
lightCOMPdimmer :: Lens' COMP (Maybe (Tree Float))
lightCOMPdimmer = lens _lightCOMPdimmer (\a b -> a {_lightCOMPdimmer = b})
lightCOMPlighttype :: Lens' COMP (Maybe (Tree Int))
lightCOMPlighttype = lens _lightCOMPlighttype (\a b -> a {_lightCOMPlighttype = b})
lightCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
lightCOMPopshortcut = lens _lightCOMPopshortcut (\a b -> a {_lightCOMPopshortcut = b})

baseCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
baseCOMPpromoteextension3 = lens _baseCOMPpromoteextension3 (\a b -> a {_baseCOMPpromoteextension3 = b})
baseCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
baseCOMPextname1 = lens _baseCOMPextname1 (\a b -> a {_baseCOMPextname1 = b})
baseCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
baseCOMPextname4 = lens _baseCOMPextname4 (\a b -> a {_baseCOMPextname4 = b})
baseCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
baseCOMPreloadtoxonstart = lens _baseCOMPreloadtoxonstart (\a b -> a {_baseCOMPreloadtoxonstart = b})
baseCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
baseCOMPreinitnet = lens _baseCOMPreinitnet (\a b -> a {_baseCOMPreinitnet = b})
baseCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
baseCOMPextension1 = lens _baseCOMPextension1 (\a b -> a {_baseCOMPextension1 = b})
baseCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
baseCOMPpromoteextension4 = lens _baseCOMPpromoteextension4 (\a b -> a {_baseCOMPpromoteextension4 = b})
baseCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
baseCOMPexternaltox = lens _baseCOMPexternaltox (\a b -> a {_baseCOMPexternaltox = b})
baseCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
baseCOMPextension4 = lens _baseCOMPextension4 (\a b -> a {_baseCOMPextension4 = b})
baseCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
baseCOMPpromoteextension1 = lens _baseCOMPpromoteextension1 (\a b -> a {_baseCOMPpromoteextension1 = b})
baseCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
baseCOMPextname3 = lens _baseCOMPextname3 (\a b -> a {_baseCOMPextname3 = b})
baseCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
baseCOMPextension3 = lens _baseCOMPextension3 (\a b -> a {_baseCOMPextension3 = b})
baseCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
baseCOMPparentshortcut = lens _baseCOMPparentshortcut (\a b -> a {_baseCOMPparentshortcut = b})
baseCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
baseCOMPenablecloning = lens _baseCOMPenablecloning (\a b -> a {_baseCOMPenablecloning = b})
baseCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
baseCOMPreinitextensions = lens _baseCOMPreinitextensions (\a b -> a {_baseCOMPreinitextensions = b})
baseCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
baseCOMPextname2 = lens _baseCOMPextname2 (\a b -> a {_baseCOMPextname2 = b})
baseCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
baseCOMPopshortcut = lens _baseCOMPopshortcut (\a b -> a {_baseCOMPopshortcut = b})
baseCOMPclone :: Lens' COMP (Maybe (Tree COMP))
baseCOMPclone = lens _baseCOMPclone (\a b -> a {_baseCOMPclone = b})
baseCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
baseCOMPsavebackup = lens _baseCOMPsavebackup (\a b -> a {_baseCOMPsavebackup = b})
baseCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
baseCOMPpromoteextension2 = lens _baseCOMPpromoteextension2 (\a b -> a {_baseCOMPpromoteextension2 = b})
baseCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
baseCOMPenablecloningpulse = lens _baseCOMPenablecloningpulse (\a b -> a {_baseCOMPenablecloningpulse = b})
baseCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
baseCOMPloadondemand = lens _baseCOMPloadondemand (\a b -> a {_baseCOMPloadondemand = b})
baseCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
baseCOMPsubcompname = lens _baseCOMPsubcompname (\a b -> a {_baseCOMPsubcompname = b})
baseCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
baseCOMPextension2 = lens _baseCOMPextension2 (\a b -> a {_baseCOMPextension2 = b})

timeCOMPpromoteextension3 :: Lens' COMP (Maybe (Tree Bool))
timeCOMPpromoteextension3 = lens _timeCOMPpromoteextension3 (\a b -> a {_timeCOMPpromoteextension3 = b})
timeCOMPenablecloning :: Lens' COMP (Maybe (Tree Bool))
timeCOMPenablecloning = lens _timeCOMPenablecloning (\a b -> a {_timeCOMPenablecloning = b})
timeCOMPend :: Lens' COMP (Maybe (Tree Int))
timeCOMPend = lens _timeCOMPend (\a b -> a {_timeCOMPend = b})
timeCOMPrangeend :: Lens' COMP (Maybe (Tree Int))
timeCOMPrangeend = lens _timeCOMPrangeend (\a b -> a {_timeCOMPrangeend = b})
timeCOMPrangestart :: Lens' COMP (Maybe (Tree Int))
timeCOMPrangestart = lens _timeCOMPrangestart (\a b -> a {_timeCOMPrangestart = b})
timeCOMPextname4 :: Lens' COMP (Maybe (Tree ByteString))
timeCOMPextname4 = lens _timeCOMPextname4 (\a b -> a {_timeCOMPextname4 = b})
timeCOMPreloadtoxonstart :: Lens' COMP (Maybe (Tree Bool))
timeCOMPreloadtoxonstart = lens _timeCOMPreloadtoxonstart (\a b -> a {_timeCOMPreloadtoxonstart = b})
timeCOMPexternaltox :: Lens' COMP (Maybe (Tree ByteString))
timeCOMPexternaltox = lens _timeCOMPexternaltox (\a b -> a {_timeCOMPexternaltox = b})
timeCOMPextension1 :: Lens' COMP (Maybe (Tree ByteString))
timeCOMPextension1 = lens _timeCOMPextension1 (\a b -> a {_timeCOMPextension1 = b})
timeCOMPpromoteextension4 :: Lens' COMP (Maybe (Tree Bool))
timeCOMPpromoteextension4 = lens _timeCOMPpromoteextension4 (\a b -> a {_timeCOMPpromoteextension4 = b})
timeCOMPextname1 :: Lens' COMP (Maybe (Tree ByteString))
timeCOMPextname1 = lens _timeCOMPextname1 (\a b -> a {_timeCOMPextname1 = b})
timeCOMPextension4 :: Lens' COMP (Maybe (Tree ByteString))
timeCOMPextension4 = lens _timeCOMPextension4 (\a b -> a {_timeCOMPextension4 = b})
timeCOMPreinitnet :: Lens' COMP (Maybe (Tree Bool))
timeCOMPreinitnet = lens _timeCOMPreinitnet (\a b -> a {_timeCOMPreinitnet = b})
timeCOMPpromoteextension1 :: Lens' COMP (Maybe (Tree Bool))
timeCOMPpromoteextension1 = lens _timeCOMPpromoteextension1 (\a b -> a {_timeCOMPpromoteextension1 = b})
timeCOMPsubcompname :: Lens' COMP (Maybe (Tree ByteString))
timeCOMPsubcompname = lens _timeCOMPsubcompname (\a b -> a {_timeCOMPsubcompname = b})
timeCOMPrangelimit :: Lens' COMP (Maybe (Tree Int))
timeCOMPrangelimit = lens _timeCOMPrangelimit (\a b -> a {_timeCOMPrangelimit = b})
timeCOMPtempo :: Lens' COMP (Maybe (Tree Float))
timeCOMPtempo = lens _timeCOMPtempo (\a b -> a {_timeCOMPtempo = b})
timeCOMPextension3 :: Lens' COMP (Maybe (Tree ByteString))
timeCOMPextension3 = lens _timeCOMPextension3 (\a b -> a {_timeCOMPextension3 = b})
timeCOMPindependent :: Lens' COMP (Maybe (Tree Bool))
timeCOMPindependent = lens _timeCOMPindependent (\a b -> a {_timeCOMPindependent = b})
timeCOMPparentshortcut :: Lens' COMP (Maybe (Tree ByteString))
timeCOMPparentshortcut = lens _timeCOMPparentshortcut (\a b -> a {_timeCOMPparentshortcut = b})
timeCOMPextname3 :: Lens' COMP (Maybe (Tree ByteString))
timeCOMPextname3 = lens _timeCOMPextname3 (\a b -> a {_timeCOMPextname3 = b})
timeCOMPstart :: Lens' COMP (Maybe (Tree Int))
timeCOMPstart = lens _timeCOMPstart (\a b -> a {_timeCOMPstart = b})
timeCOMPreinitextensions :: Lens' COMP (Maybe (Tree Bool))
timeCOMPreinitextensions = lens _timeCOMPreinitextensions (\a b -> a {_timeCOMPreinitextensions = b})
timeCOMPresetframe :: Lens' COMP (Maybe (Tree Int))
timeCOMPresetframe = lens _timeCOMPresetframe (\a b -> a {_timeCOMPresetframe = b})
timeCOMPsignature1 :: Lens' COMP (Maybe (Tree Int))
timeCOMPsignature1 = lens _timeCOMPsignature1 (\a b -> a {_timeCOMPsignature1 = b})
timeCOMPsignature2 :: Lens' COMP (Maybe (Tree Int))
timeCOMPsignature2 = lens _timeCOMPsignature2 (\a b -> a {_timeCOMPsignature2 = b})
timeCOMPrate :: Lens' COMP (Maybe (Tree Float))
timeCOMPrate = lens _timeCOMPrate (\a b -> a {_timeCOMPrate = b})
timeCOMPclone :: Lens' COMP (Maybe (Tree COMP))
timeCOMPclone = lens _timeCOMPclone (\a b -> a {_timeCOMPclone = b})
timeCOMPsavebackup :: Lens' COMP (Maybe (Tree Bool))
timeCOMPsavebackup = lens _timeCOMPsavebackup (\a b -> a {_timeCOMPsavebackup = b})
timeCOMPpromoteextension2 :: Lens' COMP (Maybe (Tree Bool))
timeCOMPpromoteextension2 = lens _timeCOMPpromoteextension2 (\a b -> a {_timeCOMPpromoteextension2 = b})
timeCOMPplay :: Lens' COMP (Maybe (Tree Int))
timeCOMPplay = lens _timeCOMPplay (\a b -> a {_timeCOMPplay = b})
timeCOMPenablecloningpulse :: Lens' COMP (Maybe (Tree Bool))
timeCOMPenablecloningpulse = lens _timeCOMPenablecloningpulse (\a b -> a {_timeCOMPenablecloningpulse = b})
timeCOMPextname2 :: Lens' COMP (Maybe (Tree ByteString))
timeCOMPextname2 = lens _timeCOMPextname2 (\a b -> a {_timeCOMPextname2 = b})
timeCOMPloadondemand :: Lens' COMP (Maybe (Tree Bool))
timeCOMPloadondemand = lens _timeCOMPloadondemand (\a b -> a {_timeCOMPloadondemand = b})
timeCOMPextension2 :: Lens' COMP (Maybe (Tree ByteString))
timeCOMPextension2 = lens _timeCOMPextension2 (\a b -> a {_timeCOMPextension2 = b})
timeCOMPopshortcut :: Lens' COMP (Maybe (Tree ByteString))
timeCOMPopshortcut = lens _timeCOMPopshortcut (\a b -> a {_timeCOMPopshortcut = b})

chopIns :: Lens' CHOP [Tree CHOP]
chopIns = lens _chopIns (\a b -> a {_chopIns = b})
matIns :: Lens' MAT [Tree MAT]
matIns = lens _matIns (\a b -> a {_matIns = b})
sopIns :: Lens' SOP [Tree SOP]
sopIns = lens _sopIns (\a b -> a {_sopIns = b})
topIns :: Lens' TOP [Tree TOP]
topIns = lens _topIns (\a b -> a {_topIns = b})
datIns :: Lens' DAT [Tree DAT]
datIns = lens _datIns (\a b -> a {_datIns = b})
compIns :: Lens' COMP [Tree COMP]
compIns = lens _compIns (\a b -> a {_compIns = b})

chopCommands :: Lens' CHOP [CommandType]
chopCommands = lens _chopCommands (\a b -> a {_chopCommands = b})
matCommands :: Lens' MAT [CommandType]
matCommands = lens _matCommands (\a b -> a {_matCommands = b})
sopCommands :: Lens' SOP [CommandType]
sopCommands = lens _sopCommands (\a b -> a {_sopCommands = b})
topCommands :: Lens' TOP [CommandType]
topCommands = lens _topCommands (\a b -> a {_topCommands = b})
datCommands :: Lens' DAT [CommandType]
datCommands = lens _datCommands (\a b -> a {_datCommands = b})
compCommands :: Lens' COMP [CommandType]
compCommands = lens _compCommands (\a b -> a {_compCommands = b})
